
SQIsign_level1_STM32F429I-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00036728  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006620  080368d8  080368d8  000378d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803cef8  0803cef8  0003fd10  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803cef8  0803cef8  0003def8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803cf00  0803cf00  0003fd10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803cf00  0803cf00  0003df00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803cf04  0803cf04  0003df04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001d10  20000000  0803cf08  0003e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003fd10  2**0
                  CONTENTS
 10 .bss          00000678  20001d10  20001d10  0003fd10  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003fd10  2**0
                  CONTENTS, READONLY
 12 .heap         00200000  d0000000  d0000000  00040000  2**0
                  ALLOC
 13 .stack        00600000  d0200000  d0200000  00040000  2**0
                  ALLOC
 14 .debug_info   0003fc85  00000000  00000000  0003fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009b5a  00000000  00000000  0007f9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003748  00000000  00000000  00089520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002aa3  00000000  00000000  0008cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002efd6  00000000  00000000  0008f70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003f410  00000000  00000000  000be6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f82fe  00000000  00000000  000fdaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001f5def  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f864  00000000  00000000  001f5e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  00205698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20001d10 	.word	0x20001d10
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080368c0 	.word	0x080368c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20001d14 	.word	0x20001d14
 80001ec:	080368c0 	.word	0x080368c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <sqisign_gen_quat_alg_coord_mul>:
    ibz_finalize(&bp);
}

void
quat_alg_coord_mul(ibz_vec_4_t *res, const ibz_vec_4_t *a, const ibz_vec_4_t *b, const quat_alg_t *alg)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	@ 0x50
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
    ibz_t prod;
    ibz_vec_4_t sum;
    ibz_init(&prod);
 8000f32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f36:	4618      	mov	r0, r3
 8000f38:	f01c f865 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&sum);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00d ff66 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>

    ibz_set(&(sum[0]), 0);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f01c f988 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&(sum[1]), 0);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	330c      	adds	r3, #12
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f01c f981 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&(sum[2]), 0);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	3318      	adds	r3, #24
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f01c f97a 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&(sum[3]), 0);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	3324      	adds	r3, #36	@ 0x24
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f01c f973 	bl	801d262 <sqisign_gen_ibz_set>

    // compute 1 coordinate
    ibz_mul(&prod, &((*a)[2]), &((*b)[2]));
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	f103 0118 	add.w	r1, r3, #24
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f103 0218 	add.w	r2, r3, #24
 8000f88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f01c f86e 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&(sum[0]), &(sum[0]), &prod);
 8000f92:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000f96:	f107 0114 	add.w	r1, r7, #20
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f01c f856 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&prod, &((*a)[3]), &((*b)[3]));
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8000fb0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f01c f85a 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&(sum[0]), &(sum[0]), &prod);
 8000fba:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000fbe:	f107 0114 	add.w	r1, r7, #20
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f01c f842 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&(sum[0]), &(sum[0]), &(alg->p));
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	f107 0114 	add.w	r1, r7, #20
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f01c f849 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&prod, &((*a)[0]), &((*b)[0]));
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f01c f842 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[0]), &(sum[0]), &prod);
 8000fea:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000fee:	f107 0114 	add.w	r1, r7, #20
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f01c f81b 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*a)[1]), &((*b)[1]));
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	f103 010c 	add.w	r1, r3, #12
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f103 020c 	add.w	r2, r3, #12
 8001008:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800100c:	4618      	mov	r0, r3
 800100e:	f01c f82e 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&(sum[0]), &(sum[0]), &prod);
 8001012:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001016:	f107 0114 	add.w	r1, r7, #20
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4618      	mov	r0, r3
 8001020:	f01c f816 	bl	801d050 <sqisign_gen_ibz_sub>
    // compute i coordiante
    ibz_mul(&prod, &((*a)[2]), &((*b)[3]));
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f103 0118 	add.w	r1, r3, #24
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001030:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001034:	4618      	mov	r0, r3
 8001036:	f01c f81a 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[1]), &(sum[1]), &prod);
 800103a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	f103 010c 	add.w	r1, r3, #12
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	330c      	adds	r3, #12
 800104c:	4618      	mov	r0, r3
 800104e:	f01b fff0 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*a)[3]), &((*b)[2]));
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 0218 	add.w	r2, r3, #24
 800105e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001062:	4618      	mov	r0, r3
 8001064:	f01c f803 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&(sum[1]), &(sum[1]), &prod);
 8001068:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	f103 010c 	add.w	r1, r3, #12
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	330c      	adds	r3, #12
 800107a:	4618      	mov	r0, r3
 800107c:	f01b ffe8 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&(sum[1]), &(sum[1]), &(alg->p));
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	f103 010c 	add.w	r1, r3, #12
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	330c      	adds	r3, #12
 8001090:	4618      	mov	r0, r3
 8001092:	f01b ffec 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&prod, &((*a)[0]), &((*b)[1]));
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f103 020c 	add.w	r2, r3, #12
 800109e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010a2:	4618      	mov	r0, r3
 80010a4:	f01b ffe3 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[1]), &(sum[1]), &prod);
 80010a8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	f103 010c 	add.w	r1, r3, #12
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	330c      	adds	r3, #12
 80010ba:	4618      	mov	r0, r3
 80010bc:	f01b ffb9 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*a)[1]), &((*b)[0]));
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f103 010c 	add.w	r1, r3, #12
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010cc:	4618      	mov	r0, r3
 80010ce:	f01b ffce 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[1]), &(sum[1]), &prod);
 80010d2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	f103 010c 	add.w	r1, r3, #12
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	330c      	adds	r3, #12
 80010e4:	4618      	mov	r0, r3
 80010e6:	f01b ffa4 	bl	801d032 <sqisign_gen_ibz_add>
    // compute j coordiante
    ibz_mul(&prod, &((*a)[0]), &((*b)[2]));
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f103 0218 	add.w	r2, r3, #24
 80010f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010f6:	4618      	mov	r0, r3
 80010f8:	f01b ffb9 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[2]), &(sum[2]), &prod);
 80010fc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	f103 0118 	add.w	r1, r3, #24
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	3318      	adds	r3, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f01b ff8f 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*a)[2]), &((*b)[0]));
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f103 0118 	add.w	r1, r3, #24
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001120:	4618      	mov	r0, r3
 8001122:	f01b ffa4 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[2]), &(sum[2]), &prod);
 8001126:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	f103 0118 	add.w	r1, r3, #24
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	3318      	adds	r3, #24
 8001138:	4618      	mov	r0, r3
 800113a:	f01b ff7a 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*a)[1]), &((*b)[3]));
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	f103 010c 	add.w	r1, r3, #12
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800114a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800114e:	4618      	mov	r0, r3
 8001150:	f01b ff8d 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&(sum[2]), &(sum[2]), &prod);
 8001154:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	f103 0118 	add.w	r1, r3, #24
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	3318      	adds	r3, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f01b ff72 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&prod, &((*a)[3]), &((*b)[1]));
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f103 020c 	add.w	r2, r3, #12
 8001178:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800117c:	4618      	mov	r0, r3
 800117e:	f01b ff76 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[2]), &(sum[2]), &prod);
 8001182:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	f103 0118 	add.w	r1, r3, #24
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	3318      	adds	r3, #24
 8001194:	4618      	mov	r0, r3
 8001196:	f01b ff4c 	bl	801d032 <sqisign_gen_ibz_add>
    // compute ij coordiante
    ibz_mul(&prod, &((*a)[0]), &((*b)[3]));
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80011a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011a6:	4618      	mov	r0, r3
 80011a8:	f01b ff61 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[3]), &(sum[3]), &prod);
 80011ac:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	3324      	adds	r3, #36	@ 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	f01b ff37 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*a)[3]), &((*b)[0]));
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011d0:	4618      	mov	r0, r3
 80011d2:	f01b ff4c 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[3]), &(sum[3]), &prod);
 80011d6:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	3324      	adds	r3, #36	@ 0x24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f01b ff22 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*a)[2]), &((*b)[1]));
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f103 0118 	add.w	r1, r3, #24
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f103 020c 	add.w	r2, r3, #12
 80011fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011fe:	4618      	mov	r0, r3
 8001200:	f01b ff35 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&(sum[3]), &(sum[3]), &prod);
 8001204:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	3324      	adds	r3, #36	@ 0x24
 8001216:	4618      	mov	r0, r3
 8001218:	f01b ff1a 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&prod, &((*a)[1]), &((*b)[2]));
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f103 010c 	add.w	r1, r3, #12
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f103 0218 	add.w	r2, r3, #24
 8001228:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800122c:	4618      	mov	r0, r3
 800122e:	f01b ff1e 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(sum[3]), &(sum[3]), &prod);
 8001232:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	3324      	adds	r3, #36	@ 0x24
 8001244:	4618      	mov	r0, r3
 8001246:	f01b fef4 	bl	801d032 <sqisign_gen_ibz_add>

    ibz_copy(&((*res)[0]), &(sum[0]));
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f107 0214 	add.w	r2, r7, #20
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f01c f812 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*res)[1]), &(sum[1]));
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f103 020c 	add.w	r2, r3, #12
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	330c      	adds	r3, #12
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f01c f808 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*res)[2]), &(sum[2]));
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f103 0218 	add.w	r2, r3, #24
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	3318      	adds	r3, #24
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f01b fffe 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*res)[3]), &(sum[3]));
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	3324      	adds	r3, #36	@ 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f01b fff4 	bl	801d27c <sqisign_gen_ibz_copy>

    ibz_finalize(&prod);
 8001294:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001298:	4618      	mov	r0, r3
 800129a:	f01b febf 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&sum);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4618      	mov	r0, r3
 80012a4:	f00d fdd1 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 80012a8:	bf00      	nop
 80012aa:	3750      	adds	r7, #80	@ 0x50
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <sqisign_gen_quat_alg_equal_denom>:

void
quat_alg_equal_denom(quat_alg_elem_t *res_a, quat_alg_elem_t *res_b, const quat_alg_elem_t *a, const quat_alg_elem_t *b)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	@ 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
    ibz_t gcd, r;
    ibz_init(&gcd);
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f01b fe9f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&r);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4618      	mov	r0, r3
 80012ce:	f01b fe9a 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_gcd(&gcd, &(a->denom), &(b->denom));
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	4618      	mov	r0, r3
 80012dc:	f01c f988 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    // temporarily set res_a.denom to a.denom/gcd, and res_b.denom to b.denom/gcd
    ibz_div(&(res_a->denom), &r, &(a->denom), &gcd);
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	f107 0114 	add.w	r1, r7, #20
 80012ec:	f01b fee8 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_div(&(res_b->denom), &r, &(b->denom), &gcd);
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	f107 0114 	add.w	r1, r7, #20
 80012fc:	f01b fee0 	bl	801d0c0 <sqisign_gen_ibz_div>
    for (int i = 0; i < 4; i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001304:	e02e      	b.n	8001364 <sqisign_gen_quat_alg_equal_denom+0xb4>
        // multiply coordiates by reduced denominators from the other element
        ibz_mul(&(res_a->coord[i]), &(a->coord[i]), &(res_b->denom));
 8001306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	3308      	adds	r3, #8
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	1d18      	adds	r0, r3, #4
 8001318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	3308      	adds	r3, #8
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	4619      	mov	r1, r3
 800132e:	f01b fe9e 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&(res_b->coord[i]), &(b->coord[i]), &(res_a->denom));
 8001332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	3308      	adds	r3, #8
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	4413      	add	r3, r2
 8001342:	1d18      	adds	r0, r3, #4
 8001344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	3308      	adds	r3, #8
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	3304      	adds	r3, #4
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4619      	mov	r1, r3
 800135a:	f01b fe88 	bl	801d06e <sqisign_gen_ibz_mul>
    for (int i = 0; i < 4; i++) {
 800135e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001360:	3301      	adds	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001366:	2b03      	cmp	r3, #3
 8001368:	ddcd      	ble.n	8001306 <sqisign_gen_quat_alg_equal_denom+0x56>
    }
    // multiply both reduced denominators
    ibz_mul(&(res_a->denom), &(res_a->denom), &(res_b->denom));
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	4618      	mov	r0, r3
 8001372:	f01b fe7c 	bl	801d06e <sqisign_gen_ibz_mul>
    // multiply them by the gcd to get the new common denominator
    ibz_mul(&(res_b->denom), &(res_a->denom), &gcd);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	f107 0220 	add.w	r2, r7, #32
 800137e:	4618      	mov	r0, r3
 8001380:	f01b fe75 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&(res_a->denom), &(res_a->denom), &gcd);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	68f9      	ldr	r1, [r7, #12]
 8001388:	f107 0220 	add.w	r2, r7, #32
 800138c:	4618      	mov	r0, r3
 800138e:	f01b fe6e 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_finalize(&gcd);
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	4618      	mov	r0, r3
 8001398:	f01b fe40 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&r);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4618      	mov	r0, r3
 80013a2:	f01b fe3b 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	@ 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <sqisign_gen_quat_alg_add>:

// Public Functions

void
quat_alg_add(quat_alg_elem_t *res, const quat_alg_elem_t *a, const quat_alg_elem_t *b)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b0a2      	sub	sp, #136	@ 0x88
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
    quat_alg_elem_t res_a, res_b;
    quat_alg_elem_init(&res_a);
 80013ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013be:	4618      	mov	r0, r3
 80013c0:	f00d fcde 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    quat_alg_elem_init(&res_b);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00d fcd9 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    // put both on the same denominator
    quat_alg_equal_denom(&res_a, &res_b, a, b);
 80013ce:	f107 0110 	add.w	r1, r7, #16
 80013d2:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	f7ff ff69 	bl	80012b0 <sqisign_gen_quat_alg_equal_denom>
    // then add
    ibz_copy(&(res->denom), &(res_a.denom));
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f01b ff48 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_vec_4_add(&(res->coord), &(res_a.coord), &(res_b.coord));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f103 000c 	add.w	r0, r3, #12
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	f103 020c 	add.w	r2, r3, #12
 80013fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013fe:	330c      	adds	r3, #12
 8001400:	4619      	mov	r1, r3
 8001402:	f008 fd9b 	bl	8009f3c <sqisign_gen_ibz_vec_4_add>
    quat_alg_elem_finalize(&res_a);
 8001406:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800140a:	4618      	mov	r0, r3
 800140c:	f00d fcce 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    quat_alg_elem_finalize(&res_b);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4618      	mov	r0, r3
 8001416:	f00d fcc9 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
}
 800141a:	bf00      	nop
 800141c:	3788      	adds	r7, #136	@ 0x88
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <sqisign_gen_quat_alg_mul>:
    quat_alg_elem_finalize(&res_b);
}

void
quat_alg_mul(quat_alg_elem_t *res, const quat_alg_elem_t *a, const quat_alg_elem_t *b, const quat_alg_t *alg)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	603b      	str	r3, [r7, #0]
    // denominator: product of denominators
    ibz_mul(&(res->denom), &(a->denom), &(b->denom));
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4618      	mov	r0, r3
 8001438:	f01b fe19 	bl	801d06e <sqisign_gen_ibz_mul>
    quat_alg_coord_mul(&(res->coord), &(a->coord), &(b->coord), alg);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f103 000c 	add.w	r0, r3, #12
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f103 010c 	add.w	r1, r3, #12
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f103 020c 	add.w	r2, r3, #12
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f7ff fd68 	bl	8000f24 <sqisign_gen_quat_alg_coord_mul>
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <sqisign_gen_quat_alg_norm>:

void
quat_alg_norm(ibz_t *res_num, ibz_t *res_denom, const quat_alg_elem_t *a, const quat_alg_t *alg)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b09a      	sub	sp, #104	@ 0x68
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
    ibz_t r, g;
    quat_alg_elem_t norm;
    ibz_init(&r);
 800146a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800146e:	4618      	mov	r0, r3
 8001470:	f01b fdc9 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&g);
 8001474:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001478:	4618      	mov	r0, r3
 800147a:	f01b fdc4 	bl	801d006 <sqisign_gen_ibz_init>
    quat_alg_elem_init(&norm);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4618      	mov	r0, r3
 8001484:	f00d fc7c 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>

    quat_alg_conj(&norm, a);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f87f 	bl	8001592 <sqisign_gen_quat_alg_conj>
    quat_alg_mul(&norm, a, &norm, alg);
 8001494:	f107 0214 	add.w	r2, r7, #20
 8001498:	f107 0014 	add.w	r0, r7, #20
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f7ff ffbf 	bl	8001422 <sqisign_gen_quat_alg_mul>
    ibz_gcd(&g, &(norm.coord[0]), &(norm.denom));
 80014a4:	f107 0214 	add.w	r2, r7, #20
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	f103 010c 	add.w	r1, r3, #12
 80014b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014b4:	4618      	mov	r0, r3
 80014b6:	f01c f89b 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    ibz_div(res_num, &r, &(norm.coord[0]), &g);
 80014ba:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	f103 020c 	add.w	r2, r3, #12
 80014c6:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80014ca:	4603      	mov	r3, r0
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f01b fdf7 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_div(res_denom, &r, &(norm.denom), &g);
 80014d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014d6:	f107 0214 	add.w	r2, r7, #20
 80014da:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80014de:	68b8      	ldr	r0, [r7, #8]
 80014e0:	f01b fdee 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_abs(res_denom, res_denom);
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	68b8      	ldr	r0, [r7, #8]
 80014e8:	f01b fddd 	bl	801d0a6 <sqisign_gen_ibz_abs>
    ibz_abs(res_num, res_num);
 80014ec:	68f9      	ldr	r1, [r7, #12]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f01b fdd9 	bl	801d0a6 <sqisign_gen_ibz_abs>
    assert(ibz_cmp(res_denom, &ibz_const_zero) > 0);
 80014f4:	490f      	ldr	r1, [pc, #60]	@ (8001534 <sqisign_gen_quat_alg_norm+0xd8>)
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f01b fe5a 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	dc05      	bgt.n	800150e <sqisign_gen_quat_alg_norm+0xb2>
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <sqisign_gen_quat_alg_norm+0xdc>)
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <sqisign_gen_quat_alg_norm+0xe0>)
 8001506:	219d      	movs	r1, #157	@ 0x9d
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <sqisign_gen_quat_alg_norm+0xe4>)
 800150a:	f033 fe95 	bl	8035238 <__assert_func>

    quat_alg_elem_finalize(&norm);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4618      	mov	r0, r3
 8001514:	f00d fc4a 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    ibz_finalize(&r);
 8001518:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800151c:	4618      	mov	r0, r3
 800151e:	f01b fd7d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&g);
 8001522:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001526:	4618      	mov	r0, r3
 8001528:	f01b fd78 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 800152c:	bf00      	nop
 800152e:	3768      	adds	r7, #104	@ 0x68
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	0803b8f4 	.word	0x0803b8f4
 8001538:	080368d8 	.word	0x080368d8
 800153c:	0803966c 	.word	0x0803966c
 8001540:	08036900 	.word	0x08036900

08001544 <sqisign_gen_quat_alg_scalar>:

void
quat_alg_scalar(quat_alg_elem_t *elem, const ibz_t *numerator, const ibz_t *denominator)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
    ibz_copy(&(elem->denom), denominator);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f01b fe91 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&(elem->coord[0]), numerator);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f01b fe8b 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_set(&(elem->coord[1]), 0);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3318      	adds	r3, #24
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f01b fe78 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&(elem->coord[2]), 0);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3324      	adds	r3, #36	@ 0x24
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f01b fe72 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&(elem->coord[3]), 0);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3330      	adds	r3, #48	@ 0x30
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f01b fe6c 	bl	801d262 <sqisign_gen_ibz_set>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <sqisign_gen_quat_alg_conj>:

void
quat_alg_conj(quat_alg_elem_t *conj, const quat_alg_elem_t *x)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
    ibz_copy(&(conj->denom), &(x->denom));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f01b fe6a 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&(conj->coord[0]), &(x->coord[0]));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f103 020c 	add.w	r2, r3, #12
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	330c      	adds	r3, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f01b fe61 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_neg(&(conj->coord[1]), &(x->coord[1]));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f103 0218 	add.w	r2, r3, #24
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3318      	adds	r3, #24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f01b fd60 	bl	801d08c <sqisign_gen_ibz_neg>
    ibz_neg(&(conj->coord[2]), &(x->coord[2]));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3324      	adds	r3, #36	@ 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f01b fd57 	bl	801d08c <sqisign_gen_ibz_neg>
    ibz_neg(&(conj->coord[3]), &(x->coord[3]));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3330      	adds	r3, #48	@ 0x30
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f01b fd4e 	bl	801d08c <sqisign_gen_ibz_neg>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <sqisign_gen_quat_alg_make_primitive>:

void
quat_alg_make_primitive(ibz_vec_4_t *primitive_x, ibz_t *content, const quat_alg_elem_t *x, const quat_lattice_t *order)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    int ok UNUSED = quat_lattice_contains(primitive_x, order, x);
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f01f fe6c 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8001610:	6238      	str	r0, [r7, #32]
    assert(ok);
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <sqisign_gen_quat_alg_make_primitive+0x2c>
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <sqisign_gen_quat_alg_make_primitive+0x8c>)
 800161a:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <sqisign_gen_quat_alg_make_primitive+0x90>)
 800161c:	21bc      	movs	r1, #188	@ 0xbc
 800161e:	481b      	ldr	r0, [pc, #108]	@ (800168c <sqisign_gen_quat_alg_make_primitive+0x94>)
 8001620:	f033 fe0a 	bl	8035238 <__assert_func>
    ibz_vec_4_content(content, primitive_x);
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f008 fc6a 	bl	8009f00 <sqisign_gen_ibz_vec_4_content>
    ibz_t r;
    ibz_init(&r);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4618      	mov	r0, r3
 8001632:	f01b fce8 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 4; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
 800163a:	e017      	b.n	800166c <sqisign_gen_quat_alg_make_primitive+0x74>
        ibz_div(*primitive_x + i, &r, *primitive_x + i, content);
 800163c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1898      	adds	r0, r3, r2
 800164c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	441a      	add	r2, r3
 800165c:	f107 0114 	add.w	r1, r7, #20
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f01b fd2d 	bl	801d0c0 <sqisign_gen_ibz_div>
    for (int i = 0; i < 4; i++) {
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	2b03      	cmp	r3, #3
 8001670:	dde4      	ble.n	800163c <sqisign_gen_quat_alg_make_primitive+0x44>
    }
    ibz_finalize(&r);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4618      	mov	r0, r3
 8001678:	f01b fcd0 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	@ 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	08036918 	.word	0x08036918
 8001688:	08039688 	.word	0x08039688
 800168c:	08036900 	.word	0x08036900

08001690 <sqisign_gen_quat_alg_normalize>:

void
quat_alg_normalize(quat_alg_elem_t *x)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	@ 0x30
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    ibz_t gcd, sign, r;
    ibz_init(&gcd);
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	4618      	mov	r0, r3
 800169e:	f01b fcb2 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&sign);
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f01b fcad 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&r);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4618      	mov	r0, r3
 80016b2:	f01b fca8 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_content(&gcd, &(x->coord));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f103 020c 	add.w	r2, r3, #12
 80016bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f008 fc1c 	bl	8009f00 <sqisign_gen_ibz_vec_4_content>
    ibz_gcd(&gcd, &gcd, &(x->denom));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80016ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d2:	4618      	mov	r0, r3
 80016d4:	f01b ff8c 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    ibz_div(&(x->denom), &r, &(x->denom), &gcd);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e0:	f107 010c 	add.w	r1, r7, #12
 80016e4:	f01b fcec 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_vec_4_scalar_div(&(x->coord), &gcd, &(x->coord));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f103 000c 	add.w	r0, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f103 020c 	add.w	r2, r3, #12
 80016f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	f008 fd10 	bl	800a11e <sqisign_gen_ibz_vec_4_scalar_div>
    ibz_set(&sign, 2 * (0 > ibz_cmp(&ibz_const_zero, &(x->denom))) - 1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4619      	mov	r1, r3
 8001702:	481a      	ldr	r0, [pc, #104]	@ (800176c <sqisign_gen_quat_alg_normalize+0xdc>)
 8001704:	f01b fd54 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	da01      	bge.n	8001712 <sqisign_gen_quat_alg_normalize+0x82>
 800170e:	2201      	movs	r2, #1
 8001710:	e001      	b.n	8001716 <sqisign_gen_quat_alg_normalize+0x86>
 8001712:	f04f 32ff 	mov.w	r2, #4294967295
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f01b fda0 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_vec_4_scalar_mul(&(x->coord), &sign, &(x->coord));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f103 000c 	add.w	r0, r3, #12
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f103 020c 	add.w	r2, r3, #12
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	4619      	mov	r1, r3
 8001734:	f008 fccd 	bl	800a0d2 <sqisign_gen_ibz_vec_4_scalar_mul>
    ibz_mul(&(x->denom), &sign, &(x->denom));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	f107 0118 	add.w	r1, r7, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f01b fc94 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_finalize(&gcd);
 8001746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174a:	4618      	mov	r0, r3
 800174c:	f01b fc66 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&sign);
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	4618      	mov	r0, r3
 8001756:	f01b fc61 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&r);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4618      	mov	r0, r3
 8001760:	f01b fc5c 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8001764:	bf00      	nop
 8001766:	3730      	adds	r7, #48	@ 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	0803b8f4 	.word	0x0803b8f4

08001770 <sqisign_gen_quat_alg_elem_is_zero>:
    return (res);
}

int
quat_alg_elem_is_zero(const quat_alg_elem_t *x)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    int res = ibz_vec_4_is_zero(&(x->coord));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	330c      	adds	r3, #12
 800177c:	4618      	mov	r0, r3
 800177e:	f008 fc0e 	bl	8009f9e <sqisign_gen_ibz_vec_4_is_zero>
 8001782:	60f8      	str	r0, [r7, #12]
    return (res);
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <sqisign_gen_quat_alg_elem_copy>:
    ibz_set(&(elem->denom), denom);
}

void
quat_alg_elem_copy(quat_alg_elem_t *copy, const quat_alg_elem_t *copied)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
    ibz_copy(&copy->denom, &copied->denom);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f01b fd6c 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&copy->coord[0], &copied->coord[0]);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f103 020c 	add.w	r2, r3, #12
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	330c      	adds	r3, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f01b fd63 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&copy->coord[1], &copied->coord[1]);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f103 0218 	add.w	r2, r3, #24
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3318      	adds	r3, #24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f01b fd5a 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&copy->coord[2], &copied->coord[2]);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3324      	adds	r3, #36	@ 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4610      	mov	r0, r2
 80017d6:	f01b fd51 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&copy->coord[3], &copied->coord[3]);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3330      	adds	r3, #48	@ 0x30
 80017e4:	4619      	mov	r1, r3
 80017e6:	4610      	mov	r0, r2
 80017e8:	f01b fd48 	bl	801d27c <sqisign_gen_ibz_copy>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <crypto_sign_keypair>:
#if defined(ENABLE_SIGN)

SQISIGN_API
int
crypto_sign_keypair(unsigned char *pk, unsigned char *sk)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]

    return sqisign_keypair(pk, sk);
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f029 fc0b 	bl	802b01c <sqisign_keypair>
 8001806:	4603      	mov	r3, r0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <crypto_sign>:
SQISIGN_API
int
crypto_sign(unsigned char *sm, unsigned long long *smlen,
            const unsigned char *m, unsigned long long mlen,
            const unsigned char *sk)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af04      	add	r7, sp, #16
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
    return sqisign_sign(sm, smlen, m, mlen, sk);
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001824:	e9cd 2300 	strd	r2, r3, [sp]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f029 fc47 	bl	802b0c0 <sqisign_sign>
 8001832:	4603      	mov	r3, r0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <crypto_sign_open>:
SQISIGN_API
int
crypto_sign_open(unsigned char *m, unsigned long long *mlen,
                 const unsigned char *sm, unsigned long long smlen,
                 const unsigned char *pk)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af04      	add	r7, sp, #16
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
    return sqisign_open(m, mlen, sm, smlen, pk);
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001850:	e9cd 2300 	strd	r2, r3, [sp]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f029 fcc0 	bl	802b1de <sqisign_open>
 800185e:	4603      	mov	r3, r0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <copy_point>:
int ec_curve_init_from_A(ec_curve_t *E, const fp2_t *A);

// Copying points, bases and curves
static inline void
copy_point(ec_point_t *P, const ec_point_t *Q)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f011 f8d7 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3348      	adds	r3, #72	@ 0x48
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f011 f8ce 	bl	8012a2c <fp2_copy>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <copy_curve>:
    copy_point(&B1->PmQ, &B0->PmQ);
}

static inline void
copy_curve(ec_curve_t *E1, const ec_curve_t *E2)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f011 f8bf 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3348      	adds	r3, #72	@ 0x48
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f011 f8b6 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3390      	adds	r3, #144	@ 0x90
 80018d6:	4619      	mov	r1, r3
 80018d8:	4610      	mov	r0, r2
 80018da:	f7ff ffc5 	bl	8001868 <copy_point>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <test_point_order_twof>:
 *
 * @return 0xFFFFFFFF if the order is correct, 0 otherwise
 */
static int
test_point_order_twof(const ec_point_t *P, const ec_curve_t *E, int t)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b0f2      	sub	sp, #456	@ 0x1c8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80018f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018f4:	6018      	str	r0, [r3, #0]
 80018f6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80018fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80018fe:	6019      	str	r1, [r3, #0]
 8001900:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001904:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001908:	601a      	str	r2, [r3, #0]
    ec_point_t test;
    ec_curve_t curve;
    test = *P;
 800190a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800190e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001918:	4611      	mov	r1, r2
 800191a:	2290      	movs	r2, #144	@ 0x90
 800191c:	4618      	mov	r0, r3
 800191e:	f034 fa3e 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 8001922:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001926:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800192a:	f107 0214 	add.w	r2, r7, #20
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	4610      	mov	r0, r2
 8001932:	f7ff ffb1 	bl	8001898 <copy_curve>

    if (ec_is_zero(&test))
 8001936:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800193a:	4618      	mov	r0, r3
 800193c:	f009 fe73 	bl	800b626 <ec_is_zero>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <test_point_order_twof+0x64>
        return 0;
 8001946:	2300      	movs	r3, #0
 8001948:	e026      	b.n	8001998 <test_point_order_twof+0xb2>
    // Scale point by 2^(t-1)
    ec_dbl_iter(&test, t - 1, &test, &curve);
 800194a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800194e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1e59      	subs	r1, r3, #1
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800195e:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8001962:	f00b f8d5 	bl	800cb10 <ec_dbl_iter>
    // If it's zero now, it doesnt have order 2^t
    if (ec_is_zero(&test))
 8001966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800196a:	4618      	mov	r0, r3
 800196c:	f009 fe5b 	bl	800b626 <ec_is_zero>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <test_point_order_twof+0x94>
        return 0;
 8001976:	2300      	movs	r3, #0
 8001978:	e00e      	b.n	8001998 <test_point_order_twof+0xb2>
    // Ensure [2^t] P = 0
    ec_dbl(&test, &test, &curve);
 800197a:	f107 0214 	add.w	r2, r7, #20
 800197e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001986:	4618      	mov	r0, r3
 8001988:	f00b f890 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 800198c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001990:	4618      	mov	r0, r3
 8001992:	f009 fe48 	bl	800b626 <ec_is_zero>
 8001996:	4603      	mov	r3, r0
}
 8001998:	4618      	mov	r0, r3
 800199a:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <test_basis_order_twof>:
 *
 * @return 0xFFFFFFFF if the order is correct, 0 otherwise
 */
static int
test_basis_order_twof(const ec_basis_t *B, const ec_curve_t *E, int t)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b088      	sub	sp, #32
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
    int check_P = test_point_order_twof(&B->P, E, t);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff96 	bl	80018e6 <test_point_order_twof>
 80019ba:	61f8      	str	r0, [r7, #28]
    int check_Q = test_point_order_twof(&B->Q, E, t);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3390      	adds	r3, #144	@ 0x90
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff8e 	bl	80018e6 <test_point_order_twof>
 80019ca:	61b8      	str	r0, [r7, #24]
    int check_PmQ = test_point_order_twof(&B->PmQ, E, t);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff85 	bl	80018e6 <test_point_order_twof>
 80019dc:	6178      	str	r0, [r7, #20]

    return check_P & check_Q & check_PmQ;
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4013      	ands	r3, r2
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <ec_recover_y>:
#include "e0_basis.h"
#include <assert.h>

uint32_t
ec_recover_y(fp2_t *y, const fp2_t *Px, const ec_curve_t *curve)
{ // Recover y-coordinate of a point on the Montgomery curve y^2 = x^3 + Ax^2 + x
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b096      	sub	sp, #88	@ 0x58
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
    fp2_t t0;

    fp2_sqr(&t0, Px);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f011 f8e2 	bl	8012bcc <fp2_sqr>
    fp2_mul(y, &t0, &curve->A); // Ax^2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f011 f88c 	bl	8012b2e <fp2_mul>
    fp2_add(y, y, Px);          // Ax^2 + x
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f011 f81e 	bl	8012a5c <fp2_add>
    fp2_mul(&t0, &t0, Px);
 8001a20:	f107 0110 	add.w	r1, r7, #16
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f011 f87f 	bl	8012b2e <fp2_mul>
    fp2_add(y, y, &t0); // x^3 + Ax^2 + x
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	461a      	mov	r2, r3
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f011 f80f 	bl	8012a5c <fp2_add>
    // This is required, because we do not yet know that our curves are
    // supersingular so our points live on the twist with B = 1.
    return fp2_sqrt_verify(y);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f011 fa58 	bl	8012ef4 <fp2_sqrt_verify>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3758      	adds	r7, #88	@ 0x58
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <difference_point>:

static void
difference_point(ec_point_t *PQ, const ec_point_t *P, const ec_point_t *Q, const ec_curve_t *curve)
{
 8001a4e:	b590      	push	{r4, r7, lr}
 8001a50:	b0df      	sub	sp, #380	@ 0x17c
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 8001a58:	f5a4 74b6 	sub.w	r4, r4, #364	@ 0x16c
 8001a5c:	6020      	str	r0, [r4, #0]
 8001a5e:	f507 70bc 	add.w	r0, r7, #376	@ 0x178
 8001a62:	f5a0 70b8 	sub.w	r0, r0, #368	@ 0x170
 8001a66:	6001      	str	r1, [r0, #0]
 8001a68:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 8001a6c:	f5a1 71ba 	sub.w	r1, r1, #372	@ 0x174
 8001a70:	600a      	str	r2, [r1, #0]
 8001a72:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001a76:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a7a:	6013      	str	r3, [r2, #0]
    // Given P,Q in projective x-only, computes a deterministic choice for (P-Q)
    // Based on Proposition 3 of https://eprint.iacr.org/2017/518.pdf

    fp2_t Bxx, Bxz, Bzz, t0, t1;

    fp2_mul(&t0, &P->x, &Q->x);
 8001a7c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a80:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a84:	6819      	ldr	r1, [r3, #0]
 8001a86:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a8a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a94:	4618      	mov	r0, r3
 8001a96:	f011 f84a 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &P->z, &Q->z);
 8001a9a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a9e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8001aa8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001aac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	4618      	mov	r0, r3
 8001abc:	f011 f837 	bl	8012b2e <fp2_mul>
    fp2_sub(&Bxx, &t0, &t1);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001ac8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001acc:	4618      	mov	r0, r3
 8001ace:	f010 fffb 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&Bxx, &Bxx);
 8001ad2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001ad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f011 f875 	bl	8012bcc <fp2_sqr>
    fp2_mul(&Bxx, &Bxx, &curve->C); // C*(P.x*Q.x-P.z*Q.z)^2
 8001ae2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ae6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001af0:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8001af4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001af8:	4618      	mov	r0, r3
 8001afa:	f011 f818 	bl	8012b2e <fp2_mul>
    fp2_add(&Bxz, &t0, &t1);
 8001afe:	f107 0210 	add.w	r2, r7, #16
 8001b02:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001b06:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f010 ffa6 	bl	8012a5c <fp2_add>
    fp2_mul(&t0, &P->x, &Q->z);
 8001b10:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b14:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b1e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b28:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f010 fffe 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &P->z, &Q->x);
 8001b32:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b36:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8001b40:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b44:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f010 ffed 	bl	8012b2e <fp2_mul>
    fp2_add(&Bzz, &t0, &t1);
 8001b54:	f107 0210 	add.w	r2, r7, #16
 8001b58:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001b5c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f010 ff7b 	bl	8012a5c <fp2_add>
    fp2_mul(&Bxz, &Bxz, &Bzz); // (P.x*Q.x+P.z*Q.z)(P.x*Q.z+P.z*Q.x)
 8001b66:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001b6a:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001b6e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001b72:	4618      	mov	r0, r3
 8001b74:	f010 ffdb 	bl	8012b2e <fp2_mul>
    fp2_sub(&Bzz, &t0, &t1);
 8001b78:	f107 0210 	add.w	r2, r7, #16
 8001b7c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001b80:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f010 ff9f 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&Bzz, &Bzz);
 8001b8a:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001b8e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f011 f819 	bl	8012bcc <fp2_sqr>
    fp2_mul(&Bzz, &Bzz, &curve->C); // C*(P.x*Q.z-P.z*Q.x)^2
 8001b9a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b9e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ba8:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8001bac:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f010 ffbc 	bl	8012b2e <fp2_mul>
    fp2_mul(&Bxz, &Bxz, &curve->C); // C*(P.x*Q.x+P.z*Q.z)(P.x*Q.z+P.z*Q.x)
 8001bb6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001bba:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001bc4:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001bc8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f010 ffae 	bl	8012b2e <fp2_mul>
    fp2_mul(&t0, &t0, &t1);
 8001bd2:	f107 0210 	add.w	r2, r7, #16
 8001bd6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001bda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001bde:	4618      	mov	r0, r3
 8001be0:	f010 ffa5 	bl	8012b2e <fp2_mul>
    fp2_mul(&t0, &t0, &curve->A);
 8001be4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001be8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001bf2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f010 ff99 	bl	8012b2e <fp2_mul>
    fp2_add(&t0, &t0, &t0);
 8001bfc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001c00:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001c04:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f010 ff27 	bl	8012a5c <fp2_add>
    fp2_add(&Bxz, &Bxz, &t0); // C*(P.x*Q.x+P.z*Q.z)(P.x*Q.z+P.z*Q.x) + 2*A*P.x*Q.z*P.z*Q.x
 8001c0e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001c12:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001c16:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f010 ff1e 	bl	8012a5c <fp2_add>

    // To ensure that the denominator is a fourth power in Fp, we normalize by
    // C*C_bar^2*(P.z)_bar^2*(Q.z)_bar^2
    fp_copy(&t0.re, &curve->C.re);
 8001c20:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c24:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c2e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f017 fdff 	bl	8019838 <fp_copy>
    fp_neg(&t0.im, &curve->C.im);
 8001c3a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c3e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001c48:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c4c:	3324      	adds	r3, #36	@ 0x24
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f017 fe2e 	bl	80198b2 <fp_neg>
    fp2_sqr(&t0, &t0);
 8001c56:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001c5a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f010 ffb3 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t0, &t0, &curve->C);
 8001c66:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c6a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c74:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001c78:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f010 ff56 	bl	8012b2e <fp2_mul>
    fp_copy(&t1.re, &P->z.re);
 8001c82:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c86:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f017 fdce 	bl	8019838 <fp_copy>
    fp_neg(&t1.im, &P->z.im);
 8001c9c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ca0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	3324      	adds	r3, #36	@ 0x24
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f017 fdfd 	bl	80198b2 <fp_neg>
    fp2_sqr(&t1, &t1);
 8001cb8:	f107 0210 	add.w	r2, r7, #16
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f010 ff82 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t0, &t0, &t1);
 8001cc8:	f107 0210 	add.w	r2, r7, #16
 8001ccc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001cd0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f010 ff2a 	bl	8012b2e <fp2_mul>
    fp_copy(&t1.re, &Q->z.re);
 8001cda:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001cde:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f017 fda2 	bl	8019838 <fp_copy>
    fp_neg(&t1.im, &Q->z.im);
 8001cf4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001cf8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	3324      	adds	r3, #36	@ 0x24
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f017 fdd1 	bl	80198b2 <fp_neg>
    fp2_sqr(&t1, &t1);
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f010 ff56 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t0, &t0, &t1);
 8001d20:	f107 0210 	add.w	r2, r7, #16
 8001d24:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001d28:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f010 fefe 	bl	8012b2e <fp2_mul>
    fp2_mul(&Bxx, &Bxx, &t0);
 8001d32:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001d36:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8001d3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f010 fef5 	bl	8012b2e <fp2_mul>
    fp2_mul(&Bxz, &Bxz, &t0);
 8001d44:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001d48:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001d4c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001d50:	4618      	mov	r0, r3
 8001d52:	f010 feec 	bl	8012b2e <fp2_mul>
    fp2_mul(&Bzz, &Bzz, &t0);
 8001d56:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001d5a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8001d5e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f010 fee3 	bl	8012b2e <fp2_mul>

    // Solving quadratic equation
    fp2_sqr(&t0, &Bxz);
 8001d68:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8001d6c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f010 ff2a 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t1, &Bxx, &Bzz);
 8001d78:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001d7c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	4618      	mov	r0, r3
 8001d86:	f010 fed2 	bl	8012b2e <fp2_mul>
    fp2_sub(&t0, &t0, &t1);
 8001d8a:	f107 0210 	add.w	r2, r7, #16
 8001d8e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001d92:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d96:	4618      	mov	r0, r3
 8001d98:	f010 fe96 	bl	8012ac8 <fp2_sub>
    // No need to check if t0 is square, as per the entangled basis algorithm.
    fp2_sqrt(&t0);
 8001d9c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001da0:	4618      	mov	r0, r3
 8001da2:	f010 ffb1 	bl	8012d08 <fp2_sqrt>
    fp2_add(&PQ->x, &Bxz, &t0);
 8001da6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001daa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001db4:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f010 fe4f 	bl	8012a5c <fp2_add>
    fp2_copy(&PQ->z, &Bzz);
 8001dbe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dc2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3348      	adds	r3, #72	@ 0x48
 8001dca:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f010 fe2b 	bl	8012a2c <fp2_copy>
}
 8001dd6:	bf00      	nop
 8001dd8:	f507 77be 	add.w	r7, r7, #380	@ 0x17c
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}

08001de0 <lift_basis_normalized>:

// Lifts a basis x(P), x(Q), x(P-Q) assuming the curve has (A/C : 1) and the point
// P = (X/Z : 1). For generic implementation see lift_basis()
uint32_t
lift_basis_normalized(jac_point_t *P, jac_point_t *Q, ec_basis_t *B, ec_curve_t *E)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b0cf      	sub	sp, #316	@ 0x13c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8001dea:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8001dee:	6020      	str	r0, [r4, #0]
 8001df0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8001df4:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8001df8:	6001      	str	r1, [r0, #0]
 8001dfa:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001dfe:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8001e02:	600a      	str	r2, [r1, #0]
 8001e04:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001e08:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001e0c:	6013      	str	r3, [r2, #0]
    assert(fp2_is_one(&B->P.z));
 8001e0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e12:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3348      	adds	r3, #72	@ 0x48
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f010 fdee 	bl	80129fc <fp2_is_one>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <lift_basis_normalized+0x52>
 8001e26:	4bd5      	ldr	r3, [pc, #852]	@ (800217c <lift_basis_normalized+0x39c>)
 8001e28:	4ad5      	ldr	r2, [pc, #852]	@ (8002180 <lift_basis_normalized+0x3a0>)
 8001e2a:	2151      	movs	r1, #81	@ 0x51
 8001e2c:	48d5      	ldr	r0, [pc, #852]	@ (8002184 <lift_basis_normalized+0x3a4>)
 8001e2e:	f033 fa03 	bl	8035238 <__assert_func>
    assert(fp2_is_one(&E->C));
 8001e32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3348      	adds	r3, #72	@ 0x48
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f010 fddc 	bl	80129fc <fp2_is_one>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <lift_basis_normalized+0x76>
 8001e4a:	4bcf      	ldr	r3, [pc, #828]	@ (8002188 <lift_basis_normalized+0x3a8>)
 8001e4c:	4acc      	ldr	r2, [pc, #816]	@ (8002180 <lift_basis_normalized+0x3a0>)
 8001e4e:	2152      	movs	r1, #82	@ 0x52
 8001e50:	48cc      	ldr	r0, [pc, #816]	@ (8002184 <lift_basis_normalized+0x3a4>)
 8001e52:	f033 f9f1 	bl	8035238 <__assert_func>

    fp2_copy(&P->x, &B->P.x);
 8001e56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	f010 fddd 	bl	8012a2c <fp2_copy>
    fp2_copy(&Q->x, &B->Q.x);
 8001e72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3390      	adds	r3, #144	@ 0x90
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f010 fdce 	bl	8012a2c <fp2_copy>
    fp2_copy(&Q->z, &B->Q.z);
 8001e90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e94:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8001e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ea2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	33d8      	adds	r3, #216	@ 0xd8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f010 fdbd 	bl	8012a2c <fp2_copy>
    fp2_set_one(&P->z);
 8001eb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001eb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3390      	adds	r3, #144	@ 0x90
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f010 fd4a 	bl	8012958 <fp2_set_one>
    uint32_t ret = ec_recover_y(&P->y, &P->x, E);
 8001ec4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ec8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001ed2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ed6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ee0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f7ff fd83 	bl	80019f0 <ec_recover_y>
 8001eea:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134

    // Algorithm of Okeya-Sakurai to recover y.Q in the montgomery model
    fp2_t v1, v2, v3, v4;
    fp2_mul(&v1, &P->x, &Q->z);
 8001eee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ef2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001efc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8001f06:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f010 fe0f 	bl	8012b2e <fp2_mul>
    fp2_add(&v2, &Q->x, &v1);
 8001f10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f14:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8001f1e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f22:	4618      	mov	r0, r3
 8001f24:	f010 fd9a 	bl	8012a5c <fp2_add>
    fp2_sub(&v3, &Q->x, &v1);
 8001f28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f2c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8001f36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f010 fdc4 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&v3, &v3);
 8001f40:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001f44:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f010 fe3e 	bl	8012bcc <fp2_sqr>
    fp2_mul(&v3, &v3, &B->PmQ.x);
 8001f50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8001f5e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001f62:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f66:	4618      	mov	r0, r3
 8001f68:	f010 fde1 	bl	8012b2e <fp2_mul>
    fp2_add(&v1, &E->A, &E->A);
 8001f6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f70:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f84:	4618      	mov	r0, r3
 8001f86:	f010 fd69 	bl	8012a5c <fp2_add>
    fp2_mul(&v1, &v1, &Q->z);
 8001f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8001f98:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8001f9c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f010 fdc4 	bl	8012b2e <fp2_mul>
    fp2_add(&v2, &v2, &v1);
 8001fa6:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8001faa:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8001fae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f010 fd52 	bl	8012a5c <fp2_add>
    fp2_mul(&v4, &P->x, &Q->x);
 8001fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001fbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001fc6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f010 fdac 	bl	8012b2e <fp2_mul>
    fp2_add(&v4, &v4, &Q->z);
 8001fd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001fda:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8001fe4:	f107 0114 	add.w	r1, r7, #20
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4618      	mov	r0, r3
 8001fee:	f010 fd35 	bl	8012a5c <fp2_add>
    fp2_mul(&v2, &v2, &v4);
 8001ff2:	f107 0214 	add.w	r2, r7, #20
 8001ff6:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8001ffa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ffe:	4618      	mov	r0, r3
 8002000:	f010 fd95 	bl	8012b2e <fp2_mul>
    fp2_mul(&v1, &v1, &Q->z);
 8002004:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002008:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8002012:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8002016:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800201a:	4618      	mov	r0, r3
 800201c:	f010 fd87 	bl	8012b2e <fp2_mul>
    fp2_sub(&v2, &v2, &v1);
 8002020:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8002024:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002028:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800202c:	4618      	mov	r0, r3
 800202e:	f010 fd4b 	bl	8012ac8 <fp2_sub>
    fp2_mul(&v2, &v2, &B->PmQ.z);
 8002032:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002036:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8002040:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002044:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002048:	4618      	mov	r0, r3
 800204a:	f010 fd70 	bl	8012b2e <fp2_mul>
    fp2_sub(&Q->y, &v3, &v2);
 800204e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002052:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3348      	adds	r3, #72	@ 0x48
 800205a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800205e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002062:	4618      	mov	r0, r3
 8002064:	f010 fd30 	bl	8012ac8 <fp2_sub>
    fp2_add(&v1, &P->y, &P->y);
 8002068:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800206c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8002076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800207a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002084:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002088:	4618      	mov	r0, r3
 800208a:	f010 fce7 	bl	8012a5c <fp2_add>
    fp2_mul(&v1, &v1, &Q->z);
 800208e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002092:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800209c:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 80020a0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80020a4:	4618      	mov	r0, r3
 80020a6:	f010 fd42 	bl	8012b2e <fp2_mul>
    fp2_mul(&v1, &v1, &B->PmQ.z);
 80020aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80020b8:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 80020bc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80020c0:	4618      	mov	r0, r3
 80020c2:	f010 fd34 	bl	8012b2e <fp2_mul>
    fp2_mul(&Q->x, &Q->x, &v1);
 80020c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 80020de:	4619      	mov	r1, r3
 80020e0:	f010 fd25 	bl	8012b2e <fp2_mul>
    fp2_mul(&Q->z, &Q->z, &v1);
 80020e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80020f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3390      	adds	r3, #144	@ 0x90
 80020fe:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8002102:	4619      	mov	r1, r3
 8002104:	f010 fd13 	bl	8012b2e <fp2_mul>

    // Transforming to a jacobian coordinate
    fp2_sqr(&v1, &Q->z);
 8002108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800210c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8002116:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f010 fd55 	bl	8012bcc <fp2_sqr>
    fp2_mul(&Q->y, &Q->y, &v1);
 8002122:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002126:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8002130:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002134:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3348      	adds	r3, #72	@ 0x48
 800213c:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8002140:	4619      	mov	r1, r3
 8002142:	f010 fcf4 	bl	8012b2e <fp2_mul>
    fp2_mul(&Q->x, &Q->x, &Q->z);
 8002146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800214a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002154:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800215e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3390      	adds	r3, #144	@ 0x90
 8002166:	461a      	mov	r2, r3
 8002168:	f010 fce1 	bl	8012b2e <fp2_mul>
    return ret;
 800216c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
}
 8002170:	4618      	mov	r0, r3
 8002172:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	bf00      	nop
 800217c:	08036928 	.word	0x08036928
 8002180:	0803693c 	.word	0x0803693c
 8002184:	08036940 	.word	0x08036940
 8002188:	08036954 	.word	0x08036954

0800218c <lift_basis>:

uint32_t
lift_basis(jac_point_t *P, jac_point_t *Q, ec_basis_t *B, ec_curve_t *E)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0a8      	sub	sp, #160	@ 0xa0
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
    // Normalise the curve E such that (A : C) is (A/C : 1)
    // and the point x(P) = (X/Z : 1).
    fp2_t inverses[2];
    fp2_copy(&inverses[0], &B->P.z);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f010 fc40 	bl	8012a2c <fp2_copy>
    fp2_copy(&inverses[1], &E->C);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	3348      	adds	r3, #72	@ 0x48
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f010 fc36 	bl	8012a2c <fp2_copy>

    fp2_batched_inv(inverses, 2);
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	2102      	movs	r1, #2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f010 fecc 	bl	8012f64 <fp2_batched_inv>
    fp2_set_one(&B->P.z);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3348      	adds	r3, #72	@ 0x48
 80021d0:	4618      	mov	r0, r3
 80021d2:	f010 fbc1 	bl	8012958 <fp2_set_one>
    fp2_set_one(&E->C);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	3348      	adds	r3, #72	@ 0x48
 80021da:	4618      	mov	r0, r3
 80021dc:	f010 fbbc 	bl	8012958 <fp2_set_one>

    fp2_mul(&B->P.x, &B->P.x, &inverses[0]);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f107 0210 	add.w	r2, r7, #16
 80021e8:	4618      	mov	r0, r3
 80021ea:	f010 fca0 	bl	8012b2e <fp2_mul>
    fp2_mul(&E->A, &E->A, &inverses[1]);
 80021ee:	6838      	ldr	r0, [r7, #0]
 80021f0:	6839      	ldr	r1, [r7, #0]
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	3348      	adds	r3, #72	@ 0x48
 80021f8:	461a      	mov	r2, r3
 80021fa:	f010 fc98 	bl	8012b2e <fp2_mul>

    // Lift the basis to Jacobian points P, Q
    return lift_basis_normalized(P, Q, B, E);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fdeb 	bl	8001de0 <lift_basis_normalized>
 800220a:	4603      	mov	r3, r0
}
 800220c:	4618      	mov	r0, r3
 800220e:	37a0      	adds	r7, #160	@ 0xa0
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <is_on_curve>:

// Given an x-coordinate, determines if this is a valid
// point on the curve. Assumes C=1.
static uint32_t
is_on_curve(const fp2_t *x, const ec_curve_t *curve)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b094      	sub	sp, #80	@ 0x50
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
    assert(fp2_is_one(&curve->C));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	3348      	adds	r3, #72	@ 0x48
 8002222:	4618      	mov	r0, r3
 8002224:	f010 fbea 	bl	80129fc <fp2_is_one>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <is_on_curve+0x26>
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <is_on_curve+0x78>)
 8002230:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <is_on_curve+0x7c>)
 8002232:	2191      	movs	r1, #145	@ 0x91
 8002234:	4817      	ldr	r0, [pc, #92]	@ (8002294 <is_on_curve+0x80>)
 8002236:	f032 ffff 	bl	8035238 <__assert_func>
    fp2_t t0;

    fp2_add(&t0, x, &curve->A); // x + (A/C)
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4618      	mov	r0, r3
 8002244:	f010 fc0a 	bl	8012a5c <fp2_add>
    fp2_mul(&t0, &t0, x);       // x^2 + (A/C)*x
 8002248:	f107 0108 	add.w	r1, r7, #8
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	f010 fc6b 	bl	8012b2e <fp2_mul>
    fp2_add_one(&t0, &t0);      // x^2 + (A/C)*x + 1
 8002258:	f107 0208 	add.w	r2, r7, #8
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f010 fc16 	bl	8012a94 <fp2_add_one>
    fp2_mul(&t0, &t0, x);       // x^3 + (A/C)*x^2 + x
 8002268:	f107 0108 	add.w	r1, r7, #8
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4618      	mov	r0, r3
 8002274:	f010 fc5b 	bl	8012b2e <fp2_mul>

    return fp2_is_square(&t0);
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	4618      	mov	r0, r3
 800227e:	f010 fd1c 	bl	8012cba <fp2_is_square>
 8002282:	4603      	mov	r3, r0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3750      	adds	r7, #80	@ 0x50
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	08036968 	.word	0x08036968
 8002290:	0803693c 	.word	0x0803693c
 8002294:	08036940 	.word	0x08036940

08002298 <clear_cofactor_for_maximal_even_order>:

// Helper function which given a point of order k*2^n with n maximal
// and k odd, computes a point of order 2^f
static inline void
clear_cofactor_for_maximal_even_order(ec_point_t *P, ec_curve_t *curve, int f)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
    // clear out the odd cofactor to get a point of order 2^n
    ec_mul(P, p_cofactor_for_2f, P_COFACTOR_FOR_2F_BITLENGTH, P, curve);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2203      	movs	r2, #3
 80022ac:	490f      	ldr	r1, [pc, #60]	@ (80022ec <clear_cofactor_for_maximal_even_order+0x54>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f00a fcc5 	bl	800cc3e <ec_mul>

    // clear the power of two to get a point of order 2^f
    for (int i = 0; i < TORSION_EVEN_POWER - f; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e00c      	b.n	80022d4 <clear_cofactor_for_maximal_even_order+0x3c>
        xDBL_A24(P, P, &curve->A24, curve->is_A24_computed_and_normalized);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f009 fcdf 	bl	800bc8c <xDBL_A24>
    for (int i = 0; i < TORSION_EVEN_POWER - f; i++) {
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbec      	blt.n	80022ba <clear_cofactor_for_maximal_even_order+0x22>
    }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	0803973c 	.word	0x0803973c

080022f0 <find_nqr_factor>:

// Helper function which finds an NQR -1 / (1 + i*b) for entangled basis generation
static uint8_t
find_nqr_factor(fp2_t *x, ec_curve_t *curve, const uint8_t start)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0d0      	sub	sp, #320	@ 0x140
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022fe:	6018      	str	r0, [r3, #0]
 8002300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002304:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002308:	6019      	str	r1, [r3, #0]
 800230a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800230e:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 8002312:	701a      	strb	r2, [r3, #0]

    // We return the hint as a u8, but use (uint16_t)n to give 2^16 - 1
    // to make failure cryptographically negligible, with a fallback when
    // n > 128 is required.
    uint8_t hint;
    uint32_t found = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    uint16_t n = start;
 800231a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800231e:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e

    bool qr_b = 1;
 8002328:	2301      	movs	r3, #1
 800232a:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
    fp_t b, tmp;
    fp2_t z, t0, t1;

    do {
        while (qr_b) {
 800232e:	e01d      	b.n	800236c <find_nqr_factor+0x7c>
            // find b with 1 + b^2 a non-quadratic residue
            fp_set_small(&tmp, (uint32_t)n * n + 1);
 8002330:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8002334:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8002338:	fb02 f303 	mul.w	r3, r2, r3
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f017 fa27 	bl	8019798 <fp_set_small>
            qr_b = fp_is_square(&tmp);
 800234a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800234e:	4618      	mov	r0, r3
 8002350:	f017 fae5 	bl	801991e <fp_is_square>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
            n++; // keeps track of b = n - 1
 8002362:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8002366:	3301      	adds	r3, #1
 8002368:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        while (qr_b) {
 800236c:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1dd      	bne.n	8002330 <find_nqr_factor+0x40>
        // is equivalent to A^2*(z-1) - z^2 NQR for z = 1 + i*b
        // thus prevents unnecessary inversion pre-check

        // t0 = z - 1 = i*b
        // t1 = z = 1 + i*b
        fp_set_small(&b, (uint32_t)n - 1);
 8002374:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f017 fa09 	bl	8019798 <fp_set_small>
        fp2_set_zero(&t0);
 8002386:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800238a:	4618      	mov	r0, r3
 800238c:	f010 faf5 	bl	801297a <fp2_set_zero>
        fp2_set_one(&z);
 8002390:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002394:	4618      	mov	r0, r3
 8002396:	f010 fadf 	bl	8012958 <fp2_set_one>
        fp_copy(&z.im, &b);
 800239a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800239e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023a2:	3324      	adds	r3, #36	@ 0x24
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f017 fa46 	bl	8019838 <fp_copy>
        fp_copy(&t0.im, &b);
 80023ac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80023b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023b4:	3324      	adds	r3, #36	@ 0x24
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f017 fa3d 	bl	8019838 <fp_copy>

        // A^2*(z-1) - z^2
        fp2_sqr(&t1, &curve->A);
 80023be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f010 fbfc 	bl	8012bcc <fp2_sqr>
        fp2_mul(&t0, &t0, &t1); // A^2 * (z - 1)
 80023d4:	f107 0214 	add.w	r2, r7, #20
 80023d8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80023dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023e0:	4618      	mov	r0, r3
 80023e2:	f010 fba4 	bl	8012b2e <fp2_mul>
        fp2_sqr(&t1, &z);
 80023e6:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f010 fbeb 	bl	8012bcc <fp2_sqr>
        fp2_sub(&t0, &t0, &t1); // A^2 * (z - 1) - z^2
 80023f6:	f107 0214 	add.w	r2, r7, #20
 80023fa:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80023fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002402:	4618      	mov	r0, r3
 8002404:	f010 fb60 	bl	8012ac8 <fp2_sub>
        found = !fp2_is_square(&t0);
 8002408:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800240c:	4618      	mov	r0, r3
 800240e:	f010 fc54 	bl	8012cba <fp2_is_square>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

        qr_b = 1;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
    } while (!found);
 8002428:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800242c:	2b00      	cmp	r3, #0
 800242e:	d09d      	beq.n	800236c <find_nqr_factor+0x7c>

    // set Px to -A/(1 + i*b)
    fp2_copy(x, &z);
 8002430:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002434:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002438:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800243c:	4611      	mov	r1, r2
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	f010 faf4 	bl	8012a2c <fp2_copy>
    fp2_inv(x);
 8002444:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002448:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	f010 fbf4 	bl	8012c3a <fp2_inv>
    fp2_mul(x, x, &curve->A);
 8002452:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002456:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002460:	f5a3 719a 	sub.w	r1, r3, #308	@ 0x134
 8002464:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002468:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800246c:	6809      	ldr	r1, [r1, #0]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	f010 fb5d 	bl	8012b2e <fp2_mul>
    fp2_neg(x, x);
 8002474:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002478:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 800247c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002480:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002484:	6811      	ldr	r1, [r2, #0]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	f010 fb39 	bl	8012afe <fp2_neg>
    /*
     * With very low probability n will not fit in 7 bits.
     * We set hint = 0 which signals failure and the need
     * to generate a value on the fly during verification
     */
    hint = n <= 128 ? n - 1 : 0;
 800248c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8002490:	2b80      	cmp	r3, #128	@ 0x80
 8002492:	d805      	bhi.n	80024a0 <find_nqr_factor+0x1b0>
 8002494:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e000      	b.n	80024a2 <find_nqr_factor+0x1b2>
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

    return hint;
 80024a6:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <find_nA_x_coord>:

// Helper function which finds a point x(P) = n * A
static uint8_t
find_nA_x_coord(fp2_t *x, ec_curve_t *curve, const uint8_t start)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	4613      	mov	r3, r2
 80024c0:	71fb      	strb	r3, [r7, #7]
    assert(!fp2_is_square(&curve->A)); // Only to be called when A is a NQR
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f010 fbf8 	bl	8012cba <fp2_is_square>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <find_nA_x_coord+0x28>
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <find_nA_x_coord+0x84>)
 80024d2:	4a1a      	ldr	r2, [pc, #104]	@ (800253c <find_nA_x_coord+0x88>)
 80024d4:	21ef      	movs	r1, #239	@ 0xef
 80024d6:	481a      	ldr	r0, [pc, #104]	@ (8002540 <find_nA_x_coord+0x8c>)
 80024d8:	f032 feae 	bl	8035238 <__assert_func>

    // when A is NQR we allow x(P) to be a multiple n*A of A
    uint8_t n = start;
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	75fb      	strb	r3, [r7, #23]
    if (n == 1) {
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <find_nA_x_coord+0x3e>
        fp2_copy(x, &curve->A);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4619      	mov	r1, r3
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f010 fa9e 	bl	8012a2c <fp2_copy>
 80024f0:	e00f      	b.n	8002512 <find_nA_x_coord+0x5e>
    } else {
        fp2_mul_small(x, &curve->A, n);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	7dfa      	ldrb	r2, [r7, #23]
 80024f6:	4619      	mov	r1, r3
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f010 fa14 	bl	8012926 <fp2_mul_small>
    }

    while (!is_on_curve(x, curve)) {
 80024fe:	e008      	b.n	8002512 <find_nA_x_coord+0x5e>
        fp2_add(x, x, &curve->A);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	461a      	mov	r2, r3
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f010 faa8 	bl	8012a5c <fp2_add>
        n++;
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	3301      	adds	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
    while (!is_on_curve(x, curve)) {
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7ff fe7d 	bl	8002214 <is_on_curve>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ef      	beq.n	8002500 <find_nA_x_coord+0x4c>
    /*
     * With very low probability (1/2^128), n will not fit in 7 bits.
     * In this case, we set hint = 0 which signals failure and the need
     * to generate a value on the fly during verification
     */
    uint8_t hint = n < 128 ? n : 0;
 8002520:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002524:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002528:	b25b      	sxtb	r3, r3
 800252a:	75bb      	strb	r3, [r7, #22]
    return hint;
 800252c:	7dbb      	ldrb	r3, [r7, #22]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	08036980 	.word	0x08036980
 800253c:	0803693c 	.word	0x0803693c
 8002540:	08036940 	.word	0x08036940

08002544 <ec_basis_E0_2f>:

// The entangled basis generation does not allow A = 0
// so we simply return the one we have already precomputed
static void
ec_basis_E0_2f(ec_basis_t *PQ2, ec_curve_t *curve, int f)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0ce      	sub	sp, #312	@ 0x138
 8002548:	af00      	add	r7, sp, #0
 800254a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800254e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002552:	6018      	str	r0, [r3, #0]
 8002554:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002558:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800255c:	6019      	str	r1, [r3, #0]
 800255e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002562:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002566:	601a      	str	r2, [r3, #0]
    assert(fp2_is_zero(&curve->A));
 8002568:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800256c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f010 fa12 	bl	801299c <fp2_is_zero>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <ec_basis_E0_2f+0x48>
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <ec_basis_E0_2f+0x11c>)
 8002580:	4a38      	ldr	r2, [pc, #224]	@ (8002664 <ec_basis_E0_2f+0x120>)
 8002582:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002586:	4838      	ldr	r0, [pc, #224]	@ (8002668 <ec_basis_E0_2f+0x124>)
 8002588:	f032 fe56 	bl	8035238 <__assert_func>
    ec_point_t P, Q;

    // Set P, Q to precomputed (X : 1) values
    fp2_copy(&P.x, &BASIS_E0_PX);
 800258c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002590:	4936      	ldr	r1, [pc, #216]	@ (800266c <ec_basis_E0_2f+0x128>)
 8002592:	4618      	mov	r0, r3
 8002594:	f010 fa4a 	bl	8012a2c <fp2_copy>
    fp2_copy(&Q.x, &BASIS_E0_QX);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4934      	ldr	r1, [pc, #208]	@ (8002670 <ec_basis_E0_2f+0x12c>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f010 fa44 	bl	8012a2c <fp2_copy>
    fp2_set_one(&P.z);
 80025a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025a8:	3348      	adds	r3, #72	@ 0x48
 80025aa:	4618      	mov	r0, r3
 80025ac:	f010 f9d4 	bl	8012958 <fp2_set_one>
    fp2_set_one(&Q.z);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	3348      	adds	r3, #72	@ 0x48
 80025b6:	4618      	mov	r0, r3
 80025b8:	f010 f9ce 	bl	8012958 <fp2_set_one>

    // clear the power of two to get a point of order 2^f
    for (int i = 0; i < TORSION_EVEN_POWER - f; i++) {
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80025c2:	e014      	b.n	80025ee <ec_basis_E0_2f+0xaa>
        xDBL_E0(&P, &P);
 80025c4:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80025c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f009 fa56 	bl	800ba80 <xDBL_E0>
        xDBL_E0(&Q, &Q);
 80025d4:	f107 0214 	add.w	r2, r7, #20
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f009 fa4e 	bl	800ba80 <xDBL_E0>
    for (int i = 0; i < TORSION_EVEN_POWER - f; i++) {
 80025e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80025e8:	3301      	adds	r3, #1
 80025ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80025ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80025f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 80025fc:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002600:	429a      	cmp	r2, r3
 8002602:	dbdf      	blt.n	80025c4 <ec_basis_E0_2f+0x80>
    }

    // Set P, Q in the basis and compute x(P - Q)
    copy_point(&PQ2->P, &P);
 8002604:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002608:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f927 	bl	8001868 <copy_point>
    copy_point(&PQ2->Q, &Q);
 800261a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800261e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3390      	adds	r3, #144	@ 0x90
 8002626:	f107 0214 	add.w	r2, r7, #20
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f91b 	bl	8001868 <copy_point>
    difference_point(&PQ2->PmQ, &P, &Q, curve);
 8002632:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002636:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8002640:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002644:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002648:	f107 0214 	add.w	r2, r7, #20
 800264c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f7ff f9fc 	bl	8001a4e <difference_point>
}
 8002656:	bf00      	nop
 8002658:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	0803699c 	.word	0x0803699c
 8002664:	0803693c 	.word	0x0803693c
 8002668:	08036940 	.word	0x08036940
 800266c:	080396ac 	.word	0x080396ac
 8002670:	080396f4 	.word	0x080396f4

08002674 <ec_curve_to_basis_2f_to_hint>:

// Computes a basis E[2^f] = <P, Q> where the point Q is above (0 : 0)
// and stores hints as an array for faster recomputation at a later point
uint8_t
ec_curve_to_basis_2f_to_hint(ec_basis_t *PQ2, ec_curve_t *curve, int f)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ce      	sub	sp, #312	@ 0x138
 8002678:	af00      	add	r7, sp, #0
 800267a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800267e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002682:	6018      	str	r0, [r3, #0]
 8002684:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002688:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800268c:	6019      	str	r1, [r3, #0]
 800268e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002692:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002696:	601a      	str	r2, [r3, #0]
    // Normalise (A/C : 1) and ((A + 2)/4 : 1)
    ec_normalize_curve_and_A24(curve);
 8002698:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800269c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f008 ff71 	bl	800b588 <ec_normalize_curve_and_A24>

    if (fp2_is_zero(&curve->A)) {
 80026a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80026aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f010 f973 	bl	801299c <fp2_is_zero>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d012      	beq.n	80026e2 <ec_curve_to_basis_2f_to_hint+0x6e>
        ec_basis_E0_2f(PQ2, curve, f);
 80026bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80026c0:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80026c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80026c8:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
 80026cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80026d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	f7ff ff33 	bl	8002544 <ec_basis_E0_2f>
        return 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	e0aa      	b.n	8002838 <ec_curve_to_basis_2f_to_hint+0x1c4>
    }

    uint8_t hint;
    bool hint_A = fp2_is_square(&curve->A);
 80026e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80026e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f010 fae4 	bl	8012cba <fp2_is_square>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136

    // Compute the points P, Q
    ec_point_t P, Q;

    if (!hint_A) {
 8002700:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8002704:	f083 0301 	eor.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <ec_curve_to_basis_2f_to_hint+0xb6>
        // when A is NQR we allow x(P) to be a multiple n*A of A
        hint = find_nA_x_coord(&P.x, curve, 1);
 800270e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002712:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002716:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800271a:	2201      	movs	r2, #1
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	f7ff fec9 	bl	80024b4 <find_nA_x_coord>
 8002722:	4603      	mov	r3, r0
 8002724:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8002728:	e00c      	b.n	8002744 <ec_curve_to_basis_2f_to_hint+0xd0>
    } else {
        // when A is QR we instead have to find (1 + b^2) a NQR
        // such that x(P) = -A / (1 + i*b)
        hint = find_nqr_factor(&P.x, curve, 1);
 800272a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800272e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002732:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8002736:	2201      	movs	r2, #1
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	f7ff fdd9 	bl	80022f0 <find_nqr_factor>
 800273e:	4603      	mov	r3, r0
 8002740:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    }

    fp2_set_one(&P.z);
 8002744:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002748:	3348      	adds	r3, #72	@ 0x48
 800274a:	4618      	mov	r0, r3
 800274c:	f010 f904 	bl	8012958 <fp2_set_one>
    fp2_add(&Q.x, &curve->A, &P.x);
 8002750:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002754:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4618      	mov	r0, r3
 8002764:	f010 f97a 	bl	8012a5c <fp2_add>
    fp2_neg(&Q.x, &Q.x);
 8002768:	f107 0214 	add.w	r2, r7, #20
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f010 f9c3 	bl	8012afe <fp2_neg>
    fp2_set_one(&Q.z);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	3348      	adds	r3, #72	@ 0x48
 800277e:	4618      	mov	r0, r3
 8002780:	f010 f8ea 	bl	8012958 <fp2_set_one>

    // clear out the odd cofactor to get a point of order 2^f
    clear_cofactor_for_maximal_even_order(&P, curve, f);
 8002784:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002788:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 800278c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002790:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002794:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	f7ff fd7c 	bl	8002298 <clear_cofactor_for_maximal_even_order>
    clear_cofactor_for_maximal_even_order(&Q, curve, f);
 80027a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027a4:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80027a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027b0:	f107 0014 	add.w	r0, r7, #20
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	f7ff fd6e 	bl	8002298 <clear_cofactor_for_maximal_even_order>

    // compute PmQ, set PmQ to Q to ensure Q above (0,0)
    difference_point(&PQ2->Q, &P, &Q, curve);
 80027bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80027ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027d2:	f107 0214 	add.w	r2, r7, #20
 80027d6:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f7ff f937 	bl	8001a4e <difference_point>
    copy_point(&PQ2->P, &P);
 80027e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f839 	bl	8001868 <copy_point>
    copy_point(&PQ2->PmQ, &Q);
 80027f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002804:	f107 0214 	add.w	r2, r7, #20
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f82c 	bl	8001868 <copy_point>

    // Finally, we compress hint_A and hint into a single bytes.
    // We choose to set the LSB of hint to hint_A
    assert(hint < 128); // We expect hint to be 7-bits in size
 8002810:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8002814:	2b00      	cmp	r3, #0
 8002816:	da06      	bge.n	8002826 <ec_curve_to_basis_2f_to_hint+0x1b2>
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <ec_curve_to_basis_2f_to_hint+0x1d0>)
 800281a:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <ec_curve_to_basis_2f_to_hint+0x1d4>)
 800281c:	f240 114d 	movw	r1, #333	@ 0x14d
 8002820:	480a      	ldr	r0, [pc, #40]	@ (800284c <ec_curve_to_basis_2f_to_hint+0x1d8>)
 8002822:	f032 fd09 	bl	8035238 <__assert_func>
    return (hint << 1) | hint_A;
 8002826:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	b25a      	sxtb	r2, r3
 800282e:	f997 3136 	ldrsb.w	r3, [r7, #310]	@ 0x136
 8002832:	4313      	orrs	r3, r2
 8002834:	b25b      	sxtb	r3, r3
 8002836:	b2db      	uxtb	r3, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	080369b4 	.word	0x080369b4
 8002848:	0803693c 	.word	0x0803693c
 800284c:	08036940 	.word	0x08036940

08002850 <ec_curve_to_basis_2f_from_hint>:

// Computes a basis E[2^f] = <P, Q> where the point Q is above (0 : 0)
// given the hints as an array for faster basis computation
int
ec_curve_to_basis_2f_from_hint(ec_basis_t *PQ2, ec_curve_t *curve, int f, const uint8_t hint)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b0cf      	sub	sp, #316	@ 0x13c
 8002854:	af00      	add	r7, sp, #0
 8002856:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800285a:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 800285e:	6020      	str	r0, [r4, #0]
 8002860:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8002864:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8002868:	6001      	str	r1, [r0, #0]
 800286a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800286e:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8002872:	600a      	str	r2, [r1, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800287a:	f2a3 1335 	subw	r3, r3, #309	@ 0x135
 800287e:	701a      	strb	r2, [r3, #0]
    // Normalise (A/C : 1) and ((A + 2)/4 : 1)
    ec_normalize_curve_and_A24(curve);
 8002880:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002884:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	f008 fe7d 	bl	800b588 <ec_normalize_curve_and_A24>

    if (fp2_is_zero(&curve->A)) {
 800288e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002892:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f010 f87f 	bl	801299c <fp2_is_zero>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <ec_curve_to_basis_2f_from_hint+0x7a>
        ec_basis_E0_2f(PQ2, curve, f);
 80028a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028a8:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80028ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028b0:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
 80028b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6809      	ldr	r1, [r1, #0]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	f7ff fe3f 	bl	8002544 <ec_basis_E0_2f>
        return 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e11b      	b.n	8002b02 <ec_curve_to_basis_2f_from_hint+0x2b2>
    }

    // The LSB of hint encodes whether A is a QR
    // The remaining 7-bits are used to find a valid x(P)
    bool hint_A = hint & 1;
 80028ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028ce:	f2a3 1335 	subw	r3, r3, #309	@ 0x135
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    uint8_t hint_P = hint >> 1;
 80028e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80028e8:	f2a3 1335 	subw	r3, r3, #309	@ 0x135
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136

    // Compute the points P, Q
    ec_point_t P, Q;

    if (!hint_P) {
 80028f4:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11c      	bne.n	8002936 <ec_curve_to_basis_2f_from_hint+0xe6>
        // When hint_P = 0 it means we did not find a point in 128 attempts
        // this is very rare and we almost never expect to need this fallback
        // In either case, we can start with b = 128 to skip testing the known
        // values which will not work
        if (!hint_A) {
 80028fc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8002900:	f083 0301 	eor.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <ec_curve_to_basis_2f_from_hint+0xd0>
            find_nA_x_coord(&P.x, curve, 128);
 800290a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800290e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002912:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	f7ff fdcb 	bl	80024b4 <find_nA_x_coord>
 800291e:	e045      	b.n	80029ac <ec_curve_to_basis_2f_from_hint+0x15c>
        } else {
            find_nqr_factor(&P.x, curve, 128);
 8002920:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002924:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002928:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	f7ff fcde 	bl	80022f0 <find_nqr_factor>
 8002934:	e03a      	b.n	80029ac <ec_curve_to_basis_2f_from_hint+0x15c>
        }
    } else {
        // Otherwise we use the hint to directly find x(P) based on hint_A
        if (!hint_A) {
 8002936:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800293a:	f083 0301 	eor.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <ec_curve_to_basis_2f_from_hint+0x10e>
            // when A is NQR, we have found n such that x(P) = n*A
            fp2_mul_small(&P.x, &curve->A, hint_P);
 8002944:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002948:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 8002952:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002956:	4618      	mov	r0, r3
 8002958:	f00f ffe5 	bl	8012926 <fp2_mul_small>
 800295c:	e026      	b.n	80029ac <ec_curve_to_basis_2f_from_hint+0x15c>
        } else {
            // when A is QR we have found b such that (1 + b^2) is a NQR in
            // Fp, so we must compute x(P) = -A / (1 + i*b)
            fp_set_one(&P.x.re);
 800295e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002962:	4618      	mov	r0, r3
 8002964:	f016 ff41 	bl	80197ea <fp_set_one>
            fp_set_small(&P.x.im, hint_P);
 8002968:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 800296c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002970:	3324      	adds	r3, #36	@ 0x24
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f016 ff0f 	bl	8019798 <fp_set_small>
            fp2_inv(&P.x);
 800297a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800297e:	4618      	mov	r0, r3
 8002980:	f010 f95b 	bl	8012c3a <fp2_inv>
            fp2_mul(&P.x, &P.x, &curve->A);
 8002984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002988:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8002992:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002996:	4618      	mov	r0, r3
 8002998:	f010 f8c9 	bl	8012b2e <fp2_mul>
            fp2_neg(&P.x, &P.x);
 800299c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80029a0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f010 f8a9 	bl	8012afe <fp2_neg>
        }
    }
    fp2_set_one(&P.z);
 80029ac:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80029b0:	3348      	adds	r3, #72	@ 0x48
 80029b2:	4618      	mov	r0, r3
 80029b4:	f00f ffd0 	bl	8012958 <fp2_set_one>

#ifndef NDEBUG
    int passed = 1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    passed = is_on_curve(&P.x, curve);
 80029be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029c6:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	4610      	mov	r0, r2
 80029ce:	f7ff fc21 	bl	8002214 <is_on_curve>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    passed &= !fp2_is_square(&P.x);
 80029d8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80029dc:	4618      	mov	r0, r3
 80029de:	f010 f96c 	bl	8012cba <fp2_is_square>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80029f4:	4013      	ands	r3, r2
 80029f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    if (!passed)
 80029fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <ec_curve_to_basis_2f_from_hint+0x1b6>
        return 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e07d      	b.n	8002b02 <ec_curve_to_basis_2f_from_hint+0x2b2>
#endif

    // set xQ to -xP - A
    fp2_add(&Q.x, &curve->A, &P.x);
 8002a06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f010 f81f 	bl	8012a5c <fp2_add>
    fp2_neg(&Q.x, &Q.x);
 8002a1e:	f107 0210 	add.w	r2, r7, #16
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f010 f868 	bl	8012afe <fp2_neg>
    fp2_set_one(&Q.z);
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	3348      	adds	r3, #72	@ 0x48
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00f ff8f 	bl	8012958 <fp2_set_one>

    // clear out the odd cofactor to get a point of order 2^f
    clear_cofactor_for_maximal_even_order(&P, curve, f);
 8002a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a3e:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8002a42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a4a:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	f7ff fc21 	bl	8002298 <clear_cofactor_for_maximal_even_order>
    clear_cofactor_for_maximal_even_order(&Q, curve, f);
 8002a56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a5a:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8002a5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a66:	f107 0010 	add.w	r0, r7, #16
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	f7ff fc13 	bl	8002298 <clear_cofactor_for_maximal_even_order>

    // compute PmQ, set PmQ to Q to ensure Q above (0,0)
    difference_point(&PQ2->Q, &P, &Q, curve);
 8002a72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8002a80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a84:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a88:	f107 0210 	add.w	r2, r7, #16
 8002a8c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f7fe ffdc 	bl	8001a4e <difference_point>
    copy_point(&PQ2->P, &P);
 8002a96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fede 	bl	8001868 <copy_point>
    copy_point(&PQ2->PmQ, &Q);
 8002aac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ab0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002aba:	f107 0210 	add.w	r2, r7, #16
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fed1 	bl	8001868 <copy_point>

#ifndef NDEBUG
    passed &= test_basis_order_twof(PQ2, curve, f);
 8002ac6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002aca:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8002ace:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ad2:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
 8002ad6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ada:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	6809      	ldr	r1, [r1, #0]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	f7fe ff5d 	bl	80019a2 <test_basis_order_twof>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002aee:	4013      	ands	r3, r2
 8002af0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    if (!passed)
 8002af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <ec_curve_to_basis_2f_from_hint+0x2b0>
        return 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <ec_curve_to_basis_2f_from_hint+0x2b2>
#endif

    return 1;
 8002b00:	2301      	movs	r3, #1
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd90      	pop	{r4, r7, pc}

08002b0c <copy_point>:
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00f ff85 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	3348      	adds	r3, #72	@ 0x48
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f00f ff7c 	bl	8012a2c <fp2_copy>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <copy_curve>:
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00f ff6d 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	3348      	adds	r3, #72	@ 0x48
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f00f ff64 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	3390      	adds	r3, #144	@ 0x90
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f7ff ffc5 	bl	8002b0c <copy_point>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <test_point_order_twof>:
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b0f2      	sub	sp, #456	@ 0x1c8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8002b94:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b98:	6018      	str	r0, [r3, #0]
 8002b9a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8002b9e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ba2:	6019      	str	r1, [r3, #0]
 8002ba4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8002ba8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002bac:	601a      	str	r2, [r3, #0]
    test = *P;
 8002bae:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8002bb2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	2290      	movs	r2, #144	@ 0x90
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f033 f8ec 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 8002bc6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8002bca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002bce:	f107 0214 	add.w	r2, r7, #20
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7ff ffb1 	bl	8002b3c <copy_curve>
    if (ec_is_zero(&test))
 8002bda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bde:	4618      	mov	r0, r3
 8002be0:	f008 fd21 	bl	800b626 <ec_is_zero>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <test_point_order_twof+0x64>
        return 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e026      	b.n	8002c3c <test_point_order_twof+0xb2>
    ec_dbl_iter(&test, t - 1, &test, &curve);
 8002bee:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8002bf2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1e59      	subs	r1, r3, #1
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002c02:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8002c06:	f009 ff83 	bl	800cb10 <ec_dbl_iter>
    if (ec_is_zero(&test))
 8002c0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f008 fd09 	bl	800b626 <ec_is_zero>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <test_point_order_twof+0x94>
        return 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e00e      	b.n	8002c3c <test_point_order_twof+0xb2>
    ec_dbl(&test, &test, &curve);
 8002c1e:	f107 0214 	add.w	r2, r7, #20
 8002c22:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8002c26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f009 ff3e 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 8002c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c34:	4618      	mov	r0, r3
 8002c36:	f008 fcf6 	bl	800b626 <ec_is_zero>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <test_basis_order_twof>:
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
    int check_P = test_point_order_twof(&B->P, E, t);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff96 	bl	8002b8a <test_point_order_twof>
 8002c5e:	61f8      	str	r0, [r7, #28]
    int check_Q = test_point_order_twof(&B->Q, E, t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3390      	adds	r3, #144	@ 0x90
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff8e 	bl	8002b8a <test_point_order_twof>
 8002c6e:	61b8      	str	r0, [r7, #24]
    int check_PmQ = test_point_order_twof(&B->PmQ, E, t);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff85 	bl	8002b8a <test_point_order_twof>
 8002c80:	6178      	str	r0, [r7, #20]
    return check_P & check_Q & check_PmQ;
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	401a      	ands	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	4013      	ands	r3, r2
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <cubicalADD>:
// Note: if needed, cubicalDBL is simply xDBL_A24 normalized and
// costs 3M + 2S + 2a + 2s

static void
cubicalADD(ec_point_t *R, const ec_point_t *P, const ec_point_t *Q, const fp2_t *ixPQ)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b0cd      	sub	sp, #308	@ 0x134
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 8002c9e:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 8002ca2:	6020      	str	r0, [r4, #0]
 8002ca4:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8002ca8:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 8002cac:	6001      	str	r1, [r0, #0]
 8002cae:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8002cb2:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8002cb6:	600a      	str	r2, [r1, #0]
 8002cb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002cbc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8002cc0:	6013      	str	r3, [r2, #0]
    fp2_t t0, t1, t2, t3;

    fp2_add(&t0, &P->x, &P->z);
 8002cc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002cda:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f00f febc 	bl	8012a5c <fp2_add>
    fp2_sub(&t1, &P->x, &P->z);
 8002ce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ce8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cf2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002cfc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f00f fee1 	bl	8012ac8 <fp2_sub>
    fp2_add(&t2, &Q->x, &Q->z);
 8002d06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002d1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d22:	4618      	mov	r0, r3
 8002d24:	f00f fe9a 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &Q->x, &Q->z);
 8002d28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002d40:	f107 0310 	add.w	r3, r7, #16
 8002d44:	4618      	mov	r0, r3
 8002d46:	f00f febf 	bl	8012ac8 <fp2_sub>
    fp2_mul(&t0, &t0, &t3);
 8002d4a:	f107 0210 	add.w	r2, r7, #16
 8002d4e:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002d52:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002d56:	4618      	mov	r0, r3
 8002d58:	f00f fee9 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &t1, &t2);
 8002d5c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002d60:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8002d64:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f00f fee0 	bl	8012b2e <fp2_mul>
    fp2_add(&t2, &t0, &t1);
 8002d6e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002d72:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002d76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f00f fe6e 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &t0, &t1);
 8002d80:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002d84:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f00f fe9b 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&R->z, &t3);
 8002d92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d96:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3348      	adds	r3, #72	@ 0x48
 8002d9e:	f107 0210 	add.w	r2, r7, #16
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f00f ff11 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&t2, &t2);
 8002daa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002dae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f00f ff09 	bl	8012bcc <fp2_sqr>
    fp2_mul(&R->x, ixPQ, &t2);
 8002dba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002dbe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002dcc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	f00f feac 	bl	8012b2e <fp2_mul>
}
 8002dd6:	bf00      	nop
 8002dd8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd90      	pop	{r4, r7, pc}

08002de0 <cubicalDBLADD>:
              ec_point_t *QQ,
              const ec_point_t *P,
              const ec_point_t *Q,
              const fp2_t *ixPQ,
              const ec_point_t *A24)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b0cd      	sub	sp, #308	@ 0x134
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 8002dea:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 8002dee:	6020      	str	r0, [r4, #0]
 8002df0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8002df4:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 8002df8:	6001      	str	r1, [r0, #0]
 8002dfa:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8002dfe:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8002e02:	600a      	str	r2, [r1, #0]
 8002e04:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002e08:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8002e0c:	6013      	str	r3, [r2, #0]
    // A24 = (A+2C/4C: 1)
    assert(fp2_is_one(&A24->z));
 8002e0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002e12:	3348      	adds	r3, #72	@ 0x48
 8002e14:	4618      	mov	r0, r3
 8002e16:	f00f fdf1 	bl	80129fc <fp2_is_one>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <cubicalDBLADD+0x4c>
 8002e20:	4b7e      	ldr	r3, [pc, #504]	@ (800301c <cubicalDBLADD+0x23c>)
 8002e22:	4a7f      	ldr	r2, [pc, #508]	@ (8003020 <cubicalDBLADD+0x240>)
 8002e24:	2133      	movs	r1, #51	@ 0x33
 8002e26:	487f      	ldr	r0, [pc, #508]	@ (8003024 <cubicalDBLADD+0x244>)
 8002e28:	f032 fa06 	bl	8035238 <__assert_func>

    fp2_t t0, t1, t2, t3;

    fp2_add(&t0, &P->x, &P->z);
 8002e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002e44:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f00f fe07 	bl	8012a5c <fp2_add>
    fp2_sub(&t1, &P->x, &P->z);
 8002e4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002e66:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f00f fe2c 	bl	8012ac8 <fp2_sub>
    fp2_add(&PpQ->x, &Q->x, &Q->z);
 8002e70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e74:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e7e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e88:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3348      	adds	r3, #72	@ 0x48
 8002e90:	461a      	mov	r2, r3
 8002e92:	f00f fde3 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &Q->x, &Q->z);
 8002e96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e9a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ea4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00f fe08 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t2, &PpQ->x);
 8002eb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ebc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00f fe7f 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&QQ->z, &t3);
 8002ece:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ed2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3348      	adds	r3, #72	@ 0x48
 8002eda:	f107 0210 	add.w	r2, r7, #16
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00f fe73 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t0, &t0, &t3);
 8002ee6:	f107 0210 	add.w	r2, r7, #16
 8002eea:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002eee:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f00f fe1b 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &t1, &PpQ->x);
 8002ef8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002efc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8002f06:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f00f fe0f 	bl	8012b2e <fp2_mul>
    fp2_add(&PpQ->x, &t0, &t1);
 8002f10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f14:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002f1e:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002f22:	4618      	mov	r0, r3
 8002f24:	f00f fd9a 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &t0, &t1);
 8002f28:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002f2c:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f00f fdc7 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&PpQ->z, &t3);
 8002f3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f3e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3348      	adds	r3, #72	@ 0x48
 8002f46:	f107 0210 	add.w	r2, r7, #16
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f00f fe3d 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&PpQ->x, &PpQ->x);
 8002f52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f56:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f00f fe2f 	bl	8012bcc <fp2_sqr>
    fp2_mul(&PpQ->x, ixPQ, &PpQ->x);
 8002f6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f88:	f00f fdd1 	bl	8012b2e <fp2_mul>
    fp2_sub(&t3, &t2, &QQ->z);
 8002f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f90:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002f9a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f00f fd90 	bl	8012ac8 <fp2_sub>
    fp2_mul(&QQ->x, &t2, &QQ->z);
 8002fa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002fac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002fb6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002fc0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f00f fdb2 	bl	8012b2e <fp2_mul>
    fp2_mul(&t0, &t3, &A24->x);
 8002fca:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002fce:	f107 0110 	add.w	r1, r7, #16
 8002fd2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f00f fda9 	bl	8012b2e <fp2_mul>
    fp2_add(&t0, &t0, &QQ->z);
 8002fdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002fe0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002fea:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002fee:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f00f fd32 	bl	8012a5c <fp2_add>
    fp2_mul(&QQ->z, &t0, &t3);
 8002ff8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ffc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3348      	adds	r3, #72	@ 0x48
 8003004:	f107 0210 	add.w	r2, r7, #16
 8003008:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800300c:	4618      	mov	r0, r3
 800300e:	f00f fd8e 	bl	8012b2e <fp2_mul>
}
 8003012:	bf00      	nop
 8003014:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}
 800301c:	080369cc 	.word	0x080369cc
 8003020:	080369e0 	.word	0x080369e0
 8003024:	080369e4 	.word	0x080369e4

08003028 <biext_ladder_2e>:
                ec_point_t *nQ,
                const ec_point_t *PQ,
                const ec_point_t *Q,
                const fp2_t *ixP,
                const ec_point_t *A24)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
    copy_point(PnQ, PQ);
 8003036:	6839      	ldr	r1, [r7, #0]
 8003038:	68b8      	ldr	r0, [r7, #8]
 800303a:	f7ff fd67 	bl	8002b0c <copy_point>
    copy_point(nQ, Q);
 800303e:	6a39      	ldr	r1, [r7, #32]
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fd63 	bl	8002b0c <copy_point>
    for (uint32_t i = 0; i < e; i++) {
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e00c      	b.n	8003066 <biext_ladder_2e+0x3e>
        cubicalDBLADD(PnQ, nQ, PnQ, nQ, ixP, A24);
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68b8      	ldr	r0, [r7, #8]
 800305c:	f7ff fec0 	bl	8002de0 <cubicalDBLADD>
    for (uint32_t i = 0; i < e; i++) {
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	429a      	cmp	r2, r3
 800306c:	d3ee      	bcc.n	800304c <biext_ladder_2e+0x24>
    }
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <point_ratio>:

// Compute the monodromy ratio X/Z above as a (X:Z) point to avoid a division
// We implicitly use (1,0) as a cubical point above 0_E
static void
point_ratio(ec_point_t *R, const ec_point_t *PnQ, const ec_point_t *nQ, const ec_point_t *P)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
    // Sanity tests
    assert(ec_is_zero(nQ));
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f008 facd 	bl	800b626 <ec_is_zero>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <point_ratio+0x26>
 8003092:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <point_ratio+0x64>)
 8003094:	4a12      	ldr	r2, [pc, #72]	@ (80030e0 <point_ratio+0x68>)
 8003096:	2162      	movs	r1, #98	@ 0x62
 8003098:	4812      	ldr	r0, [pc, #72]	@ (80030e4 <point_ratio+0x6c>)
 800309a:	f032 f8cd 	bl	8035238 <__assert_func>
    assert(ec_is_equal(PnQ, P));
 800309e:	6839      	ldr	r1, [r7, #0]
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f008 fae2 	bl	800b66a <ec_is_equal>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <point_ratio+0x40>
 80030ac:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <point_ratio+0x70>)
 80030ae:	4a0c      	ldr	r2, [pc, #48]	@ (80030e0 <point_ratio+0x68>)
 80030b0:	2163      	movs	r1, #99	@ 0x63
 80030b2:	480c      	ldr	r0, [pc, #48]	@ (80030e4 <point_ratio+0x6c>)
 80030b4:	f032 f8c0 	bl	8035238 <__assert_func>

    fp2_mul(&R->x, &nQ->x, &P->x);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f00f fd35 	bl	8012b2e <fp2_mul>
    fp2_copy(&R->z, &PnQ->x);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3348      	adds	r3, #72	@ 0x48
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00f fcad 	bl	8012a2c <fp2_copy>
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	08036a00 	.word	0x08036a00
 80030e0:	080369e0 	.word	0x080369e0
 80030e4:	080369e4 	.word	0x080369e4
 80030e8:	08036a10 	.word	0x08036a10

080030ec <translate>:

// Compute the cubical translation of P by a point of 2-torsion T
static void
translate(ec_point_t *P, const ec_point_t *T)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b0cc      	sub	sp, #304	@ 0x130
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80030f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030fa:	6018      	str	r0, [r3, #0]
 80030fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003100:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003104:	6019      	str	r1, [r3, #0]

    {
        fp2_t t0, t1;

        // PX_new = AX - BZ
        fp2_mul(&t0, &T->x, &P->x);
 8003106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800310a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003114:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	4618      	mov	r0, r3
 8003120:	f00f fd05 	bl	8012b2e <fp2_mul>
        fp2_mul(&t1, &T->z, &P->z);
 8003124:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003128:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8003132:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003136:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003140:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003144:	4618      	mov	r0, r3
 8003146:	f00f fcf2 	bl	8012b2e <fp2_mul>
        fp2_sub(&PX_new, &t0, &t1);
 800314a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800314e:	f107 0108 	add.w	r1, r7, #8
 8003152:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003156:	4618      	mov	r0, r3
 8003158:	f00f fcb6 	bl	8012ac8 <fp2_sub>

        // PZ_new = BX - AZ
        fp2_mul(&t0, &T->z, &P->x);
 800315c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003160:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800316a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800316e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f107 0308 	add.w	r3, r7, #8
 8003178:	4618      	mov	r0, r3
 800317a:	f00f fcd8 	bl	8012b2e <fp2_mul>
        fp2_mul(&t1, &T->x, &P->z);
 800317e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003182:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800318c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003196:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800319a:	4618      	mov	r0, r3
 800319c:	f00f fcc7 	bl	8012b2e <fp2_mul>
        fp2_sub(&PZ_new, &t0, &t1);
 80031a0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80031a4:	f107 0108 	add.w	r1, r7, #8
 80031a8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80031ac:	4618      	mov	r0, r3
 80031ae:	f00f fc8b 	bl	8012ac8 <fp2_sub>
    }

    // When we have A zero we should return (Z : X)
    uint32_t TA_is_zero = fp2_is_zero(&T->x);
 80031b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80031b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f00f fbed 	bl	801299c <fp2_is_zero>
 80031c2:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
    fp2_select(&PX_new, &PX_new, &P->z, TA_is_zero);
 80031c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80031ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80031d4:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 80031d8:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80031dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80031e0:	f010 f8b7 	bl	8013352 <fp2_select>
    fp2_select(&PZ_new, &PZ_new, &P->x, TA_is_zero);
 80031e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80031e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80031f2:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80031f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80031fa:	f010 f8aa 	bl	8013352 <fp2_select>

    // When we have B zero we should return (X : Z)
    uint32_t TB_is_zero = fp2_is_zero(&T->z);
 80031fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003202:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3348      	adds	r3, #72	@ 0x48
 800320a:	4618      	mov	r0, r3
 800320c:	f00f fbc6 	bl	801299c <fp2_is_zero>
 8003210:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    fp2_select(&PX_new, &PX_new, &P->x, TB_is_zero);
 8003214:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003218:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8003222:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8003226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800322a:	f010 f892 	bl	8013352 <fp2_select>
    fp2_select(&PZ_new, &PZ_new, &P->z, TB_is_zero);
 800322e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003232:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800323c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003240:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8003244:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003248:	f010 f883 	bl	8013352 <fp2_select>

    // Set the point to the desired result
    fp2_copy(&P->x, &PX_new);
 800324c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003250:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f00f fbe5 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &PZ_new);
 8003262:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003266:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3348      	adds	r3, #72	@ 0x48
 800326e:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f00f fbd9 	bl	8012a2c <fp2_copy>
}
 800327a:	bf00      	nop
 800327c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <monodromy_i>:
// need P, Q, PQ, A24 to be normalised (this is not strictly necessary, but
// care need to be taken when they are not normalised. Only handle the
// normalised case for now)
static void
monodromy_i(ec_point_t *R, const pairing_params_t *pairing_data, bool swap_PQ)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 800328a:	af04      	add	r7, sp, #16
 800328c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8003290:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8003294:	6018      	str	r0, [r3, #0]
 8003296:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800329a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800329e:	6019      	str	r1, [r3, #0]
 80032a0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80032a4:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80032a8:	701a      	strb	r2, [r3, #0]

    // When we compute the Weil pairing we need both P + [2^e]Q and
    // Q + [2^e]P which we can do easily with biext_ladder_2e() below
    // we use a bool to decide wether to use Q, ixP or P, ixQ in the
    // ladder and P or Q in translation.
    if (!swap_PQ) {
 80032aa:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80032ae:	f2a3 2391 	subw	r3, r3, #657	@ 0x291
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d026      	beq.n	800330c <monodromy_i+0x88>
        copy_point(&P, &pairing_data->P);
 80032be:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80032c2:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fc1b 	bl	8002b0c <copy_point>
        copy_point(&Q, &pairing_data->Q);
 80032d6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80032da:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 80032e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fc0e 	bl	8002b0c <copy_point>
        fp2_copy(&ixP, &pairing_data->ixP);
 80032f0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80032f4:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f503 72da 	add.w	r2, r3, #436	@ 0x1b4
 80032fe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f00f fb91 	bl	8012a2c <fp2_copy>
 800330a:	e025      	b.n	8003358 <monodromy_i+0xd4>
    } else {
        copy_point(&P, &pairing_data->Q);
 800330c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8003310:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 800331a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fbf3 	bl	8002b0c <copy_point>
        copy_point(&Q, &pairing_data->P);
 8003326:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800332a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1d1a      	adds	r2, r3, #4
 8003332:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fbe7 	bl	8002b0c <copy_point>
        fp2_copy(&ixP, &pairing_data->ixQ);
 800333e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8003342:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f503 72fe 	add.w	r2, r3, #508	@ 0x1fc
 800334c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f00f fb6a 	bl	8012a2c <fp2_copy>
    }

    // Compute the biextension ladder P + [2^e]Q
    biext_ladder_2e(pairing_data->e - 1, &PnQ, &nQ, &pairing_data->PQ, &Q, &ixP, &pairing_data->A24);
 8003358:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800335c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	1e58      	subs	r0, r3, #1
 8003366:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800336a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8003374:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8003378:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8003382:	f107 0210 	add.w	r2, r7, #16
 8003386:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800338a:	9302      	str	r3, [sp, #8]
 800338c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4623      	mov	r3, r4
 800339a:	f7ff fe45 	bl	8003028 <biext_ladder_2e>
    translate(&PnQ, &nQ);
 800339e:	f107 0210 	add.w	r2, r7, #16
 80033a2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fe9f 	bl	80030ec <translate>
    translate(&nQ, &nQ);
 80033ae:	f107 0210 	add.w	r2, r7, #16
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fe97 	bl	80030ec <translate>
    point_ratio(R, &PnQ, &nQ, &P);
 80033be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033c2:	f107 0210 	add.w	r2, r7, #16
 80033c6:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80033ca:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 80033ce:	f5a0 7023 	sub.w	r0, r0, #652	@ 0x28c
 80033d2:	6800      	ldr	r0, [r0, #0]
 80033d4:	f7ff fe50 	bl	8003078 <point_ratio>
}
 80033d8:	bf00      	nop
 80033da:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}

080033e2 <cubical_normalization>:

// Normalize the points and also store 1/x(P), 1/x(Q)
static void
cubical_normalization(pairing_params_t *pairing_data, const ec_point_t *P, const ec_point_t *Q)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b0cc      	sub	sp, #304	@ 0x130
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80033ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80033f0:	6018      	str	r0, [r3, #0]
 80033f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80033f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80033fa:	6019      	str	r1, [r3, #0]
 80033fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003400:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003404:	601a      	str	r2, [r3, #0]
    fp2_t t[4];
    fp2_copy(&t[0], &P->x);
 8003406:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800340a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	f107 0310 	add.w	r3, r7, #16
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f00f fb08 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[1], &P->z);
 800341c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003420:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	3348      	adds	r3, #72	@ 0x48
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f00f fafa 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[2], &Q->x);
 8003438:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800343c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	f107 0310 	add.w	r3, r7, #16
 8003446:	3390      	adds	r3, #144	@ 0x90
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f00f faee 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[3], &Q->z);
 8003450:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003454:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	33d8      	adds	r3, #216	@ 0xd8
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f00f fae0 	bl	8012a2c <fp2_copy>
    fp2_batched_inv(t, 4);
 800346c:	f107 0310 	add.w	r3, r7, #16
 8003470:	2104      	movs	r1, #4
 8003472:	4618      	mov	r0, r3
 8003474:	f00f fd76 	bl	8012f64 <fp2_batched_inv>

    // Store PZ / PX and QZ / QX
    fp2_mul(&pairing_data->ixP, &P->z, &t[0]);
 8003478:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800347c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8003486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800348a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3348      	adds	r3, #72	@ 0x48
 8003492:	f107 0210 	add.w	r2, r7, #16
 8003496:	4619      	mov	r1, r3
 8003498:	f00f fb49 	bl	8012b2e <fp2_mul>
    fp2_mul(&pairing_data->ixQ, &Q->z, &t[2]);
 800349c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80034a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f503 70fe 	add.w	r0, r3, #508	@ 0x1fc
 80034aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80034ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	3390      	adds	r3, #144	@ 0x90
 80034be:	461a      	mov	r2, r3
 80034c0:	f00f fb35 	bl	8012b2e <fp2_mul>

    // Store x(P), x(Q) normalised to (X/Z : 1)
    fp2_mul(&pairing_data->P.x, &P->x, &t[1]);
 80034c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80034c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1d18      	adds	r0, r3, #4
 80034d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80034d4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	f107 0310 	add.w	r3, r7, #16
 80034de:	3348      	adds	r3, #72	@ 0x48
 80034e0:	461a      	mov	r2, r3
 80034e2:	f00f fb24 	bl	8012b2e <fp2_mul>
    fp2_mul(&pairing_data->Q.x, &Q->x, &t[3]);
 80034e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80034ea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f103 0094 	add.w	r0, r3, #148	@ 0x94
 80034f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80034f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	f107 0310 	add.w	r3, r7, #16
 8003502:	33d8      	adds	r3, #216	@ 0xd8
 8003504:	461a      	mov	r2, r3
 8003506:	f00f fb12 	bl	8012b2e <fp2_mul>
    fp2_set_one(&pairing_data->P.z);
 800350a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800350e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	334c      	adds	r3, #76	@ 0x4c
 8003516:	4618      	mov	r0, r3
 8003518:	f00f fa1e 	bl	8012958 <fp2_set_one>
    fp2_set_one(&pairing_data->Q.z);
 800351c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003520:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	33dc      	adds	r3, #220	@ 0xdc
 8003528:	4618      	mov	r0, r3
 800352a:	f00f fa15 	bl	8012958 <fp2_set_one>
}
 800352e:	bf00      	nop
 8003530:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <weil_n>:

// Weil pairing, PQ should be P+Q in (X:Z) coordinates
// We assume the points are normalised correctly
static void
weil_n(fp2_t *r, const pairing_params_t *pairing_data)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0ca      	sub	sp, #296	@ 0x128
 800353c:	af00      	add	r7, sp, #0
 800353e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003542:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003546:	6018      	str	r0, [r3, #0]
 8003548:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800354c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003550:	6019      	str	r1, [r3, #0]
    ec_point_t R0, R1;
    monodromy_i(&R0, pairing_data, true);
 8003552:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003556:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800355a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800355e:	2201      	movs	r2, #1
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	f7ff fe8f 	bl	8003284 <monodromy_i>
    monodromy_i(&R1, pairing_data, false);
 8003566:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800356a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800356e:	f107 0008 	add.w	r0, r7, #8
 8003572:	2200      	movs	r2, #0
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	f7ff fe85 	bl	8003284 <monodromy_i>

    fp2_mul(r, &R0.x, &R1.z);
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003582:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003586:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800358a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	f00f facd 	bl	8012b2e <fp2_mul>
    fp2_inv(r);
 8003594:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003598:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f00f fb4c 	bl	8012c3a <fp2_inv>
    fp2_mul(r, r, &R0.z);
 80035a2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80035a6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80035aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80035ae:	f5a3 7192 	sub.w	r1, r3, #292	@ 0x124
 80035b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80035b6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80035ba:	6809      	ldr	r1, [r1, #0]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	f00f fab6 	bl	8012b2e <fp2_mul>
    fp2_mul(r, r, &R1.x);
 80035c2:	f107 0208 	add.w	r2, r7, #8
 80035c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80035ca:	f5a3 7192 	sub.w	r1, r3, #292	@ 0x124
 80035ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80035d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80035d6:	6809      	ldr	r1, [r1, #0]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	f00f faa8 	bl	8012b2e <fp2_mul>
}
 80035de:	bf00      	nop
 80035e0:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <weil>:
// Weil pairing, PQ should be P+Q in (X:Z) coordinates
// Normalise the points and call the code above
// The code will crash (division by 0) if either P or Q is (0:1)
void
weil(fp2_t *r, uint32_t e, const ec_point_t *P, const ec_point_t *Q, const ec_point_t *PQ, ec_curve_t *E)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	f5ad 7d3b 	sub.w	sp, sp, #748	@ 0x2ec
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 80035f4:	f5a4 7437 	sub.w	r4, r4, #732	@ 0x2dc
 80035f8:	6020      	str	r0, [r4, #0]
 80035fa:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 80035fe:	f5a0 7038 	sub.w	r0, r0, #736	@ 0x2e0
 8003602:	6001      	str	r1, [r0, #0]
 8003604:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 8003608:	f5a1 7139 	sub.w	r1, r1, #740	@ 0x2e4
 800360c:	600a      	str	r2, [r1, #0]
 800360e:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 8003612:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 8003616:	6013      	str	r3, [r2, #0]
    pairing_params_t pairing_data;
    // Construct the structure for the Weil pairing
    // Set (PX/PZ : 1), (QX : QZ : 1), PZ/PX and QZ/QX
    pairing_data.e = e;
 8003618:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800361c:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8003620:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 8003624:	f5a2 7238 	sub.w	r2, r2, #736	@ 0x2e0
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	601a      	str	r2, [r3, #0]
    cubical_normalization(&pairing_data, P, Q);
 800362c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8003630:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 8003634:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8003638:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 800363c:	f107 0014 	add.w	r0, r7, #20
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	f7ff fecd 	bl	80033e2 <cubical_normalization>
    copy_point(&pairing_data.PQ, PQ);
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003650:	f8d7 12f8 	ldr.w	r1, [r7, #760]	@ 0x2f8
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fa59 	bl	8002b0c <copy_point>

    // Ensure the input curve has A24 normalised and store
    // in a struct
    ec_curve_normalize_A24(E);
 800365a:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 800365e:	f007 ff5f 	bl	800b520 <ec_curve_normalize_A24>
    copy_point(&pairing_data.A24, &E->A24);
 8003662:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8003666:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fa49 	bl	8002b0c <copy_point>

    // Compute the Weil pairing e_(2^n)(P, Q)
    weil_n(r, &pairing_data);
 800367a:	f107 0214 	add.w	r2, r7, #20
 800367e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8003682:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8003686:	4611      	mov	r1, r2
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	f7ff ff55 	bl	8003538 <weil_n>
}
 800368e:	bf00      	nop
 8003690:	f507 773b 	add.w	r7, r7, #748	@ 0x2ec
 8003694:	46bd      	mov	sp, r7
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <clear_cofac>:

// two helper functions for reducing the tate pairing
// clear_cofac clears (p + 1) // 2^f for an Fp2 value
void
clear_cofac(fp2_t *r, const fp2_t *a)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b096      	sub	sp, #88	@ 0x58
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    digit_t exp = *p_cofactor_for_2f;
 80036a2:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <clear_cofac+0x64>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	657b      	str	r3, [r7, #84]	@ 0x54
    exp >>= 1;
 80036a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	657b      	str	r3, [r7, #84]	@ 0x54

    fp2_t x;
    fp2_copy(&x, a);
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f00f f9b9 	bl	8012a2c <fp2_copy>
    fp2_copy(r, a);
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f00f f9b5 	bl	8012a2c <fp2_copy>

    // removes cofac
    while (exp > 0) {
 80036c2:	e012      	b.n	80036ea <clear_cofac+0x52>
        fp2_sqr(r, r);
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f00f fa80 	bl	8012bcc <fp2_sqr>
        if (exp & 1) {
 80036cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <clear_cofac+0x4c>
            fp2_mul(r, r, &x);
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	461a      	mov	r2, r3
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f00f fa25 	bl	8012b2e <fp2_mul>
        }
        exp >>= 1;
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	657b      	str	r3, [r7, #84]	@ 0x54
    while (exp > 0) {
 80036ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e9      	bne.n	80036c4 <clear_cofac+0x2c>
    }
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3758      	adds	r7, #88	@ 0x58
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	0803973c 	.word	0x0803973c

08003700 <fp2_frob>:

// applies frobenius a + ib --> a - ib to an fp2 element
void
fp2_frob(fp2_t *out, const fp2_t *in)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
    fp_copy(&(out->re), &(in->re));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f016 f891 	bl	8019838 <fp_copy>
    fp_neg(&(out->im), &(in->im));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	3324      	adds	r3, #36	@ 0x24
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f016 f8c5 	bl	80198b2 <fp_neg>
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <fp2_dlog_2e_rec>:
// pairings rather than the Weil pairings; this is not implemented yet)

// recursive dlog function
static bool
fp2_dlog_2e_rec(digit_t *a, long len, fp2_t *pows_f, fp2_t *pows_g, long stacklen)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b0a0      	sub	sp, #128	@ 0x80
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
    if (len == 0) {
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d110      	bne.n	8003766 <fp2_dlog_2e_rec+0x36>
        // *a = 0;
        for (int i = 0; i < NWORDS_ORDER; i++) {
 8003744:	2300      	movs	r3, #0
 8003746:	677b      	str	r3, [r7, #116]	@ 0x74
 8003748:	e008      	b.n	800375c <fp2_dlog_2e_rec+0x2c>
            a[i] = 0;
 800374a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < NWORDS_ORDER; i++) {
 8003756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003758:	3301      	adds	r3, #1
 800375a:	677b      	str	r3, [r7, #116]	@ 0x74
 800375c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800375e:	2b07      	cmp	r3, #7
 8003760:	ddf3      	ble.n	800374a <fp2_dlog_2e_rec+0x1a>
        }
        return true;
 8003762:	2301      	movs	r3, #1
 8003764:	e15d      	b.n	8003a22 <fp2_dlog_2e_rec+0x2f2>
    } else if (len == 1) {
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 80a7 	bne.w	80038bc <fp2_dlog_2e_rec+0x18c>
        if (fp2_is_one(&pows_f[stacklen - 1])) {
 800376e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	3b48      	subs	r3, #72	@ 0x48
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f00f f93b 	bl	80129fc <fp2_is_one>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02f      	beq.n	80037ec <fp2_dlog_2e_rec+0xbc>
            // a = 0;
            for (int i = 0; i < NWORDS_ORDER; i++) {
 800378c:	2300      	movs	r3, #0
 800378e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003790:	e008      	b.n	80037a4 <fp2_dlog_2e_rec+0x74>
                a[i] = 0;
 8003792:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < NWORDS_ORDER; i++) {
 800379e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037a0:	3301      	adds	r3, #1
 80037a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80037a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	ddf3      	ble.n	8003792 <fp2_dlog_2e_rec+0x62>
            }
            for (int i = 0; i < stacklen - 1; ++i) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037ae:	e015      	b.n	80037dc <fp2_dlog_2e_rec+0xac>
                fp2_sqr(&pows_g[i], &pows_g[i]); // new_g = g^2
 80037b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	461a      	mov	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	1898      	adds	r0, r3, r2
 80037c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	461a      	mov	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	f00f f9fb 	bl	8012bcc <fp2_sqr>
            for (int i = 0; i < stacklen - 1; ++i) {
 80037d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d8:	3301      	adds	r3, #1
 80037da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037e0:	3b01      	subs	r3, #1
 80037e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dbe3      	blt.n	80037b0 <fp2_dlog_2e_rec+0x80>
            }
            return true;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e11a      	b.n	8003a22 <fp2_dlog_2e_rec+0x2f2>
        } else if (fp2_is_equal(&pows_f[stacklen - 1], &pows_g[stacklen - 1])) {
 80037ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	3b48      	subs	r3, #72	@ 0x48
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	18d0      	adds	r0, r2, r3
 80037fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	3b48      	subs	r3, #72	@ 0x48
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	4413      	add	r3, r2
 8003810:	4619      	mov	r1, r3
 8003812:	f00f f8d7 	bl	80129c4 <fp2_is_equal>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d04d      	beq.n	80038b8 <fp2_dlog_2e_rec+0x188>
            // a = 1;
            a[0] = 1;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
            for (int i = 1; i < NWORDS_ORDER; i++) {
 8003822:	2301      	movs	r3, #1
 8003824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003826:	e008      	b.n	800383a <fp2_dlog_2e_rec+0x10a>
                a[i] = 0;
 8003828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
            for (int i = 1; i < NWORDS_ORDER; i++) {
 8003834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003836:	3301      	adds	r3, #1
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800383c:	2b07      	cmp	r3, #7
 800383e:	ddf3      	ble.n	8003828 <fp2_dlog_2e_rec+0xf8>
            }
            for (int i = 0; i < stacklen - 1; ++i) {
 8003840:	2300      	movs	r3, #0
 8003842:	667b      	str	r3, [r7, #100]	@ 0x64
 8003844:	e030      	b.n	80038a8 <fp2_dlog_2e_rec+0x178>
                fp2_mul(&pows_f[i], &pows_f[i], &pows_g[i]); // new_f = f*g
 8003846:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	461a      	mov	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1898      	adds	r0, r3, r2
 8003856:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	461a      	mov	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	1899      	adds	r1, r3, r2
 8003866:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	461a      	mov	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	4413      	add	r3, r2
 8003876:	461a      	mov	r2, r3
 8003878:	f00f f959 	bl	8012b2e <fp2_mul>
                fp2_sqr(&pows_g[i], &pows_g[i]);             // new_g = g^2
 800387c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	461a      	mov	r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	1898      	adds	r0, r3, r2
 800388c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	461a      	mov	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4413      	add	r3, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f00f f995 	bl	8012bcc <fp2_sqr>
            for (int i = 0; i < stacklen - 1; ++i) {
 80038a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038a4:	3301      	adds	r3, #1
 80038a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038ac:	3b01      	subs	r3, #1
 80038ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80038b0:	429a      	cmp	r2, r3
 80038b2:	dbc8      	blt.n	8003846 <fp2_dlog_2e_rec+0x116>
            }
            return true;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b4      	b.n	8003a22 <fp2_dlog_2e_rec+0x2f2>
        } else {
            return false;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e0b2      	b.n	8003a22 <fp2_dlog_2e_rec+0x2f2>
        }
    } else {
        long right = (double)len * 0.5;
 80038bc:	68b8      	ldr	r0, [r7, #8]
 80038be:	f7fc fe39 	bl	8000534 <__aeabi_i2d>
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	4b59      	ldr	r3, [pc, #356]	@ (8003a2c <fp2_dlog_2e_rec+0x2fc>)
 80038c8:	f7fc fe9e 	bl	8000608 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7fd f948 	bl	8000b68 <__aeabi_d2iz>
 80038d8:	4603      	mov	r3, r0
 80038da:	65fb      	str	r3, [r7, #92]	@ 0x5c
        long left = len - right;
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	65bb      	str	r3, [r7, #88]	@ 0x58
        pows_f[stacklen] = pows_f[stacklen - 1];
 80038e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	3b48      	subs	r3, #72	@ 0x48
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	18d1      	adds	r1, r2, r3
 80038f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	461a      	mov	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	4618      	mov	r0, r3
 800390a:	2348      	movs	r3, #72	@ 0x48
 800390c:	461a      	mov	r2, r3
 800390e:	f032 fa46 	bl	8035d9e <memcpy>
        pows_g[stacklen] = pows_g[stacklen - 1];
 8003912:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	3b48      	subs	r3, #72	@ 0x48
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	18d1      	adds	r1, r2, r3
 8003924:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	461a      	mov	r2, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	4413      	add	r3, r2
 8003936:	4618      	mov	r0, r3
 8003938:	2348      	movs	r3, #72	@ 0x48
 800393a:	461a      	mov	r2, r3
 800393c:	f032 fa2f 	bl	8035d9e <memcpy>
        for (int i = 0; i < left; i++) {
 8003940:	2300      	movs	r3, #0
 8003942:	663b      	str	r3, [r7, #96]	@ 0x60
 8003944:	e02c      	b.n	80039a0 <fp2_dlog_2e_rec+0x270>
            fp2_sqr(&pows_f[stacklen], &pows_f[stacklen]);
 8003946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	461a      	mov	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1898      	adds	r0, r3, r2
 8003958:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	461a      	mov	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f00f f92e 	bl	8012bcc <fp2_sqr>
            fp2_sqr(&pows_g[stacklen], &pows_g[stacklen]);
 8003970:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	461a      	mov	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	1898      	adds	r0, r3, r2
 8003982:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	461a      	mov	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4413      	add	r3, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f00f f919 	bl	8012bcc <fp2_sqr>
        for (int i = 0; i < left; i++) {
 800399a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800399c:	3301      	adds	r3, #1
 800399e:	663b      	str	r3, [r7, #96]	@ 0x60
 80039a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a4:	429a      	cmp	r2, r3
 80039a6:	dbce      	blt.n	8003946 <fp2_dlog_2e_rec+0x216>
        }
        // uint32_t dlp1 = 0, dlp2 = 0;
        digit_t dlp1[NWORDS_ORDER], dlp2[NWORDS_ORDER];
        bool ok;
        ok = fp2_dlog_2e_rec(dlp1, right, pows_f, pows_g, stacklen + 1);
 80039a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039ac:	3301      	adds	r3, #1
 80039ae:	f107 0014 	add.w	r0, r7, #20
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80039ba:	f7ff feb9 	bl	8003730 <fp2_dlog_2e_rec>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (!ok)
 80039c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80039c8:	f083 0301 	eor.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <fp2_dlog_2e_rec+0x2a6>
            return false;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e025      	b.n	8003a22 <fp2_dlog_2e_rec+0x2f2>
        ok = fp2_dlog_2e_rec(dlp2, left, pows_f, pows_g, stacklen);
 80039d6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80039da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80039e6:	f7ff fea3 	bl	8003730 <fp2_dlog_2e_rec>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (!ok)
 80039f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <fp2_dlog_2e_rec+0x2d2>
            return false;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e00f      	b.n	8003a22 <fp2_dlog_2e_rec+0x2f2>
        // a = dlp1 + 2^right * dlp2
        multiple_mp_shiftl(dlp2, right, NWORDS_ORDER);
 8003a02:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a08:	2208      	movs	r2, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f024 f962 	bl	8027cd4 <sqisign_gen_multiple_mp_shiftl>
        mp_add(a, dlp2, dlp1, NWORDS_ORDER);
 8003a10:	f107 0214 	add.w	r2, r7, #20
 8003a14:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003a18:	2308      	movs	r3, #8
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f024 f89f 	bl	8027b5e <sqisign_gen_mp_add>

        return true;
 8003a20:	2301      	movs	r3, #1
    }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3778      	adds	r7, #120	@ 0x78
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	3fe00000 	.word	0x3fe00000

08003a30 <fp2_dlog_2e>:

// compute DLP: compute scal such that f = g^scal with f, 1/g as input
static bool
fp2_dlog_2e(digit_t *scal, const fp2_t *f, const fp2_t *g_inverse, int e)
{
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	b09b      	sub	sp, #108	@ 0x6c
 8003a36:	af02      	add	r7, sp, #8
 8003a38:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003a3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a3c:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a40:	466b      	mov	r3, sp
 8003a42:	607b      	str	r3, [r7, #4]
    long log, len = e;
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	65bb      	str	r3, [r7, #88]	@ 0x58
    for (log = 0; len > 1; len >>= 1)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a4c:	e005      	b.n	8003a5a <fp2_dlog_2e+0x2a>
        log++;
 8003a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a50:	3301      	adds	r3, #1
 8003a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (log = 0; len > 1; len >>= 1)
 8003a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a56:	105b      	asrs	r3, r3, #1
 8003a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	dcf6      	bgt.n	8003a4e <fp2_dlog_2e+0x1e>
    log += 1;
 8003a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a62:	3301      	adds	r3, #1
 8003a64:	65fb      	str	r3, [r7, #92]	@ 0x5c

    fp2_t pows_f[log], pows_g[log];
 8003a66:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 8003a68:	1e73      	subs	r3, r6, #1
 8003a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	2300      	movs	r3, #0
 8003a70:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a78:	f04f 0000 	mov.w	r0, #0
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	00d9      	lsls	r1, r3, #3
 8003a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a86:	00d0      	lsls	r0, r2, #3
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a8e:	1854      	adds	r4, r2, r1
 8003a90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a92:	eb43 0101 	adc.w	r1, r3, r1
 8003a96:	460d      	mov	r5, r1
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	01ab      	lsls	r3, r5, #6
 8003aa2:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8003aa6:	01a2      	lsls	r2, r4, #6
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623a      	str	r2, [r7, #32]
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	f04f 0000 	mov.w	r0, #0
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	00d9      	lsls	r1, r3, #3
 8003ac2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ac6:	00d0      	lsls	r0, r2, #3
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4621      	mov	r1, r4
 8003ace:	eb12 0801 	adds.w	r8, r2, r1
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	eb43 0901 	adc.w	r9, r3, r1
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ae4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ae8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003aec:	4632      	mov	r2, r6
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	3307      	adds	r3, #7
 8003af8:	08db      	lsrs	r3, r3, #3
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	ebad 0d03 	sub.w	sp, sp, r3
 8003b00:	ab02      	add	r3, sp, #8
 8003b02:	3303      	adds	r3, #3
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b0a:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8003b0c:	1e63      	subs	r3, r4, #1
 8003b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b10:	4622      	mov	r2, r4
 8003b12:	2300      	movs	r3, #0
 8003b14:	61ba      	str	r2, [r7, #24]
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	4633      	mov	r3, r6
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	00d9      	lsls	r1, r3, #3
 8003b2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b2e:	00d0      	lsls	r0, r2, #3
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4629      	mov	r1, r5
 8003b36:	1851      	adds	r1, r2, r1
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	eb43 0101 	adc.w	r1, r3, r1
 8003b40:	60f9      	str	r1, [r7, #12]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8003b4e:	4631      	mov	r1, r6
 8003b50:	018b      	lsls	r3, r1, #6
 8003b52:	4629      	mov	r1, r5
 8003b54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b58:	4629      	mov	r1, r5
 8003b5a:	018a      	lsls	r2, r1, #6
 8003b5c:	4622      	mov	r2, r4
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613a      	str	r2, [r7, #16]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8003b68:	462a      	mov	r2, r5
 8003b6a:	4633      	mov	r3, r6
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	00d9      	lsls	r1, r3, #3
 8003b76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b7a:	00d0      	lsls	r0, r2, #3
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4629      	mov	r1, r5
 8003b82:	eb12 0a01 	adds.w	sl, r2, r1
 8003b86:	4631      	mov	r1, r6
 8003b88:	eb43 0b01 	adc.w	fp, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	3307      	adds	r3, #7
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	ebad 0d03 	sub.w	sp, sp, r3
 8003bb4:	ab02      	add	r3, sp, #8
 8003bb6:	3303      	adds	r3, #3
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
    pows_f[0] = *f;
 8003bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	2348      	movs	r3, #72	@ 0x48
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f032 f8e8 	bl	8035d9e <memcpy>
    pows_g[0] = *g_inverse;
 8003bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	2348      	movs	r3, #72	@ 0x48
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f032 f8e0 	bl	8035d9e <memcpy>

    for (int i = 0; i < NWORDS_ORDER; i++) {
 8003bde:	2300      	movs	r3, #0
 8003be0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be2:	e008      	b.n	8003bf6 <fp2_dlog_2e+0x1c6>
        scal[i] = 0;
 8003be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bea:	4413      	add	r3, r2
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NWORDS_ORDER; i++) {
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf8:	2b07      	cmp	r3, #7
 8003bfa:	ddf3      	ble.n	8003be4 <fp2_dlog_2e+0x1b4>
    }

    bool ok = fp2_dlog_2e_rec(scal, e, pows_f, pows_g, 1);
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c06:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c08:	f7ff fd92 	bl	8003730 <fp2_dlog_2e_rec>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    assert(ok);
 8003c12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <fp2_dlog_2e+0x1f8>
 8003c1a:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <fp2_dlog_2e+0x20c>)
 8003c1c:	4a08      	ldr	r2, [pc, #32]	@ (8003c40 <fp2_dlog_2e+0x210>)
 8003c1e:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8003c22:	4808      	ldr	r0, [pc, #32]	@ (8003c44 <fp2_dlog_2e+0x214>)
 8003c24:	f031 fb08 	bl	8035238 <__assert_func>

    return ok;
 8003c28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003c2c:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3764      	adds	r7, #100	@ 0x64
 8003c34:	46bd      	mov	sp, r7
 8003c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08036a24 	.word	0x08036a24
 8003c40:	080369e0 	.word	0x080369e0
 8003c44:	080369e4 	.word	0x080369e4

08003c48 <cubical_normalization_dlog>:

// Normalize the bases (P, Q), (R, S) and store their inverse
// and additionally normalise the curve to (A/C : 1)
static void
cubical_normalization_dlog(pairing_dlog_params_t *pairing_dlog_data, ec_curve_t *curve)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003c54:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8003c58:	6018      	str	r0, [r3, #0]
 8003c5a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003c5e:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003c62:	6019      	str	r1, [r3, #0]
    fp2_t t[11];
    ec_basis_t *PQ = &pairing_dlog_data->PQ;
 8003c64:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003c68:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
    ec_basis_t *RS = &pairing_dlog_data->RS;
 8003c74:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003c78:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8003c82:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
    fp2_copy(&t[0], &PQ->P.x);
 8003c86:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8003c8a:	f107 0308 	add.w	r3, r7, #8
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f00e fecb 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[1], &PQ->P.z);
 8003c96:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003c9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003c9e:	f107 0308 	add.w	r3, r7, #8
 8003ca2:	3348      	adds	r3, #72	@ 0x48
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f00e fec0 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[2], &PQ->Q.x);
 8003cac:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003cb0:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	3390      	adds	r3, #144	@ 0x90
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f00e feb5 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[3], &PQ->Q.z);
 8003cc2:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003cc6:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	33d8      	adds	r3, #216	@ 0xd8
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f00e feaa 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[4], &PQ->PmQ.x);
 8003cd8:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003cdc:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8003ce0:	f107 0308 	add.w	r3, r7, #8
 8003ce4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f00e fe9e 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[5], &PQ->PmQ.z);
 8003cf0:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003cf4:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8003cf8:	f107 0308 	add.w	r3, r7, #8
 8003cfc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f00e fe92 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[6], &RS->P.x);
 8003d08:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f00e fe88 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[7], &RS->P.z);
 8003d1c:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003d20:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003d24:	f107 0308 	add.w	r3, r7, #8
 8003d28:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f00e fe7c 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[8], &RS->Q.x);
 8003d34:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003d38:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f00e fe70 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[9], &RS->Q.z);
 8003d4c:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003d50:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f00e fe64 	bl	8012a2c <fp2_copy>
    fp2_copy(&t[10], &curve->C);
 8003d64:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003d68:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f00e fe55 	bl	8012a2c <fp2_copy>

    fp2_batched_inv(t, 11);
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	210b      	movs	r1, #11
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f00f f8eb 	bl	8012f64 <fp2_batched_inv>

    fp2_mul(&pairing_dlog_data->ixP, &PQ->P.z, &t[0]);
 8003d8e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003d92:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f203 50a4 	addw	r0, r3, #1444	@ 0x5a4
 8003d9c:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003da0:	3348      	adds	r3, #72	@ 0x48
 8003da2:	f107 0208 	add.w	r2, r7, #8
 8003da6:	4619      	mov	r1, r3
 8003da8:	f00e fec1 	bl	8012b2e <fp2_mul>
    fp2_mul(&PQ->P.x, &PQ->P.x, &t[1]);
 8003dac:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8003db0:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	3348      	adds	r3, #72	@ 0x48
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f00e feb7 	bl	8012b2e <fp2_mul>
    fp2_set_one(&PQ->P.z);
 8003dc0:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003dc4:	3348      	adds	r3, #72	@ 0x48
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00e fdc6 	bl	8012958 <fp2_set_one>

    fp2_mul(&pairing_dlog_data->ixQ, &PQ->Q.z, &t[2]);
 8003dcc:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003dd0:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f203 50ec 	addw	r0, r3, #1516	@ 0x5ec
 8003dda:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003dde:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	3390      	adds	r3, #144	@ 0x90
 8003de8:	461a      	mov	r2, r3
 8003dea:	f00e fea0 	bl	8012b2e <fp2_mul>
    fp2_mul(&PQ->Q.x, &PQ->Q.x, &t[3]);
 8003dee:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003df2:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8003df6:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003dfa:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	33d8      	adds	r3, #216	@ 0xd8
 8003e04:	461a      	mov	r2, r3
 8003e06:	f00e fe92 	bl	8012b2e <fp2_mul>
    fp2_set_one(&PQ->Q.z);
 8003e0a:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003e0e:	33d8      	adds	r3, #216	@ 0xd8
 8003e10:	4618      	mov	r0, r3
 8003e12:	f00e fda1 	bl	8012958 <fp2_set_one>

    fp2_mul(&PQ->PmQ.x, &PQ->PmQ.x, &t[5]);
 8003e16:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003e1a:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8003e1e:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003e22:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f00e fe7d 	bl	8012b2e <fp2_mul>
    fp2_set_one(&PQ->PmQ.z);
 8003e34:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8003e38:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f00e fd8b 	bl	8012958 <fp2_set_one>

    fp2_mul(&pairing_dlog_data->ixR, &RS->P.z, &t[6]);
 8003e42:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003e46:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f203 6034 	addw	r0, r3, #1588	@ 0x634
 8003e50:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003e54:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8003e58:	f107 0308 	add.w	r3, r7, #8
 8003e5c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8003e60:	461a      	mov	r2, r3
 8003e62:	f00e fe64 	bl	8012b2e <fp2_mul>
    fp2_mul(&RS->P.x, &RS->P.x, &t[7]);
 8003e66:	f8d7 0320 	ldr.w	r0, [r7, #800]	@ 0x320
 8003e6a:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 8003e6e:	f107 0308 	add.w	r3, r7, #8
 8003e72:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003e76:	461a      	mov	r2, r3
 8003e78:	f00e fe59 	bl	8012b2e <fp2_mul>
    fp2_set_one(&RS->P.z);
 8003e7c:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003e80:	3348      	adds	r3, #72	@ 0x48
 8003e82:	4618      	mov	r0, r3
 8003e84:	f00e fd68 	bl	8012958 <fp2_set_one>

    fp2_mul(&pairing_dlog_data->ixS, &RS->Q.z, &t[8]);
 8003e88:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003e8c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f203 607c 	addw	r0, r3, #1660	@ 0x67c
 8003e96:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003e9a:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8003e9e:	f107 0308 	add.w	r3, r7, #8
 8003ea2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f00e fe41 	bl	8012b2e <fp2_mul>
    fp2_mul(&RS->Q.x, &RS->Q.x, &t[9]);
 8003eac:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003eb0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8003eb4:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003eb8:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f00e fe32 	bl	8012b2e <fp2_mul>
    fp2_set_one(&RS->Q.z);
 8003eca:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8003ece:	33d8      	adds	r3, #216	@ 0xd8
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f00e fd41 	bl	8012958 <fp2_set_one>

    fp2_mul(&curve->A, &curve->A, &t[10]);
 8003ed6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003eda:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003ee4:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f00e fe1b 	bl	8012b2e <fp2_mul>
    fp2_set_one(&curve->C);
 8003ef8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003efc:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3348      	adds	r3, #72	@ 0x48
 8003f04:	4618      	mov	r0, r3
 8003f06:	f00e fd27 	bl	8012958 <fp2_set_one>
}
 8003f0a:	bf00      	nop
 8003f0c:	f507 774a 	add.w	r7, r7, #808	@ 0x328
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <compute_difference_points>:

// Given two bases <P, Q> and basis = <R, S> compute
// x(P - R), x(P - S), x(R - Q), x(S - Q)
static void
compute_difference_points(pairing_dlog_params_t *pairing_dlog_data, ec_curve_t *curve)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003f20:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003f24:	6018      	str	r0, [r3, #0]
 8003f26:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003f2a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8003f2e:	6019      	str	r1, [r3, #0]
    jac_point_t xyP, xyQ, xyR, xyS, temp;

    // lifting the two basis points, assumes that x(P) and x(R)
    // and the curve itself are normalised to (X : 1)
    lift_basis_normalized(&xyP, &xyQ, &pairing_dlog_data->PQ, curve);
 8003f30:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003f34:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003f40:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8003f44:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8003f48:	f507 705a 	add.w	r0, r7, #872	@ 0x368
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f7fd ff47 	bl	8001de0 <lift_basis_normalized>
    lift_basis_normalized(&xyR, &xyS, &pairing_dlog_data->RS, curve);
 8003f52:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003f56:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f503 72da 	add.w	r2, r3, #436	@ 0x1b4
 8003f60:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003f64:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8003f68:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8003f6c:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f7fd ff35 	bl	8001de0 <lift_basis_normalized>

    // computation of the differences
    // x(P - R)
    jac_neg(&temp, &xyR);
 8003f76:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f009 f870 	bl	800d066 <jac_neg>
    ADD(&temp, &temp, &xyP, curve);
 8003f86:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003f8a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8003f8e:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8003f92:	f107 0108 	add.w	r1, r7, #8
 8003f96:	f107 0008 	add.w	r0, r7, #8
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f009 fbe1 	bl	800d762 <ADD>
    jac_to_xz(&pairing_dlog_data->diff.PmR, &temp);
 8003fa0:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003fa4:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 8003fae:	f107 0208 	add.w	r2, r7, #8
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f008 ff5b 	bl	800ce70 <jac_to_xz>

    // x(P - S)
    jac_neg(&temp, &xyS);
 8003fba:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f009 f84e 	bl	800d066 <jac_neg>
    ADD(&temp, &temp, &xyP, curve);
 8003fca:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003fce:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8003fd2:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8003fd6:	f107 0108 	add.w	r1, r7, #8
 8003fda:	f107 0008 	add.w	r0, r7, #8
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f009 fbbf 	bl	800d762 <ADD>
    jac_to_xz(&pairing_dlog_data->diff.PmS, &temp);
 8003fe4:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003fe8:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8003ff2:	f107 0208 	add.w	r2, r7, #8
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f008 ff39 	bl	800ce70 <jac_to_xz>

    // x(R - Q)
    jac_neg(&temp, &xyQ);
 8003ffe:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f009 f82c 	bl	800d066 <jac_neg>
    ADD(&temp, &temp, &xyR, curve);
 800400e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8004012:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8004016:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800401a:	f107 0108 	add.w	r1, r7, #8
 800401e:	f107 0008 	add.w	r0, r7, #8
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f009 fb9d 	bl	800d762 <ADD>
    jac_to_xz(&pairing_dlog_data->diff.RmQ, &temp);
 8004028:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800402c:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8004036:	f107 0208 	add.w	r2, r7, #8
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f008 ff17 	bl	800ce70 <jac_to_xz>

    // x(S - Q)
    jac_neg(&temp, &xyQ);
 8004042:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	4611      	mov	r1, r2
 800404c:	4618      	mov	r0, r3
 800404e:	f009 f80a 	bl	800d066 <jac_neg>
    ADD(&temp, &temp, &xyS, curve);
 8004052:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8004056:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 800405a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800405e:	f107 0108 	add.w	r1, r7, #8
 8004062:	f107 0008 	add.w	r0, r7, #8
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f009 fb7b 	bl	800d762 <ADD>
    jac_to_xz(&pairing_dlog_data->diff.SmQ, &temp);
 800406c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8004070:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 800407a:	f107 0208 	add.w	r2, r7, #8
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f008 fef5 	bl	800ce70 <jac_to_xz>
}
 8004086:	bf00      	nop
 8004088:	f507 6788 	add.w	r7, r7, #1088	@ 0x440
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <tate_dlog_partial>:
// Inline all the Tate pairing computations needed for ec_dlog_2_weil
// including reduction, assumes a bases PQ of full E[2^e_full] torsion
// and a bases RS of smaller E[2^e] torsion
static void
tate_dlog_partial(digit_t *r1, digit_t *r2, digit_t *s1, digit_t *s2, pairing_dlog_params_t *pairing_dlog_data)
{
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	f6ad 1d38 	subw	sp, sp, #2360	@ 0x938
 8004096:	af02      	add	r7, sp, #8
 8004098:	f507 6413 	add.w	r4, r7, #2352	@ 0x930
 800409c:	f6a4 1424 	subw	r4, r4, #2340	@ 0x924
 80040a0:	6020      	str	r0, [r4, #0]
 80040a2:	f507 6013 	add.w	r0, r7, #2352	@ 0x930
 80040a6:	f6a0 1028 	subw	r0, r0, #2344	@ 0x928
 80040aa:	6001      	str	r1, [r0, #0]
 80040ac:	f507 6113 	add.w	r1, r7, #2352	@ 0x930
 80040b0:	f6a1 112c 	subw	r1, r1, #2348	@ 0x92c
 80040b4:	600a      	str	r2, [r1, #0]
 80040b6:	f507 6213 	add.w	r2, r7, #2352	@ 0x930
 80040ba:	f5a2 6213 	sub.w	r2, r2, #2352	@ 0x930
 80040be:	6013      	str	r3, [r2, #0]

    uint32_t e_full = TORSION_EVEN_POWER;
 80040c0:	23f8      	movs	r3, #248	@ 0xf8
 80040c2:	f8c7 3914 	str.w	r3, [r7, #2324]	@ 0x914
    uint32_t e_diff = e_full - pairing_dlog_data->e;
 80040c6:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8d7 2914 	ldr.w	r2, [r7, #2324]	@ 0x914
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f8c7 3910 	str.w	r3, [r7, #2320]	@ 0x910

    ec_point_t nP, nQ, nR, nS, nPQ, PnR, PnS, nRQ, nSQ;

    copy_point(&nP, &pairing_dlog_data->PQ.P);
 80040d6:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fd12 	bl	8002b0c <copy_point>
    copy_point(&nQ, &pairing_dlog_data->PQ.Q);
 80040e8:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80040ec:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 80040f0:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fd08 	bl	8002b0c <copy_point>
    copy_point(&nR, &pairing_dlog_data->RS.P);
 80040fc:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004100:	f503 72da 	add.w	r2, r3, #436	@ 0x1b4
 8004104:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fcfe 	bl	8002b0c <copy_point>
    copy_point(&nS, &pairing_dlog_data->RS.Q);
 8004110:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004114:	f503 7211 	add.w	r2, r3, #580	@ 0x244
 8004118:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fcf4 	bl	8002b0c <copy_point>
    copy_point(&nPQ, &pairing_dlog_data->PQ.PmQ);
 8004124:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004128:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 800412c:	f507 63c8 	add.w	r3, r7, #1600	@ 0x640
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fcea 	bl	8002b0c <copy_point>
    copy_point(&PnR, &pairing_dlog_data->diff.PmR);
 8004138:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 800413c:	f503 7259 	add.w	r2, r3, #868	@ 0x364
 8004140:	f507 63b6 	add.w	r3, r7, #1456	@ 0x5b0
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fce0 	bl	8002b0c <copy_point>
    copy_point(&PnS, &pairing_dlog_data->diff.PmS);
 800414c:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004150:	f503 727d 	add.w	r2, r3, #1012	@ 0x3f4
 8004154:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fcd6 	bl	8002b0c <copy_point>
    copy_point(&nRQ, &pairing_dlog_data->diff.RmQ);
 8004160:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004164:	f203 4284 	addw	r2, r3, #1156	@ 0x484
 8004168:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fccc 	bl	8002b0c <copy_point>
    copy_point(&nSQ, &pairing_dlog_data->diff.SmQ);
 8004174:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004178:	f203 5214 	addw	r2, r3, #1300	@ 0x514
 800417c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fcc2 	bl	8002b0c <copy_point>

    for (uint32_t i = 0; i < e_full - 1; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 800418e:	e01a      	b.n	80041c6 <tate_dlog_partial+0x136>
        cubicalDBLADD(&nPQ, &nP, &nPQ, &nP, &pairing_dlog_data->ixQ, &pairing_dlog_data->A24);
 8004190:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004194:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8004198:	f8d7 2940 	ldr.w	r2, [r7, #2368]	@ 0x940
 800419c:	f202 62c4 	addw	r2, r2, #1732	@ 0x6c4
 80041a0:	f507 6508 	add.w	r5, r7, #2176	@ 0x880
 80041a4:	f507 64c8 	add.w	r4, r7, #1600	@ 0x640
 80041a8:	f507 6108 	add.w	r1, r7, #2176	@ 0x880
 80041ac:	f507 60c8 	add.w	r0, r7, #1600	@ 0x640
 80041b0:	9201      	str	r2, [sp, #4]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	462b      	mov	r3, r5
 80041b6:	4622      	mov	r2, r4
 80041b8:	f7fe fe12 	bl	8002de0 <cubicalDBLADD>
    for (uint32_t i = 0; i < e_full - 1; i++) {
 80041bc:	f8d7 392c 	ldr.w	r3, [r7, #2348]	@ 0x92c
 80041c0:	3301      	adds	r3, #1
 80041c2:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 80041c6:	f8d7 3914 	ldr.w	r3, [r7, #2324]	@ 0x914
 80041ca:	3b01      	subs	r3, #1
 80041cc:	f8d7 292c 	ldr.w	r2, [r7, #2348]	@ 0x92c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3dd      	bcc.n	8004190 <tate_dlog_partial+0x100>
    }

    for (uint32_t i = 0; i < pairing_dlog_data->e - 1; i++) {
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3928 	str.w	r3, [r7, #2344]	@ 0x928
 80041da:	e048      	b.n	800426e <tate_dlog_partial+0x1de>
        cubicalADD(&PnR, &PnR, &nR, &pairing_dlog_data->ixP);
 80041dc:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80041e0:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 80041e4:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80041e8:	f507 61b6 	add.w	r1, r7, #1456	@ 0x5b0
 80041ec:	f507 60b6 	add.w	r0, r7, #1456	@ 0x5b0
 80041f0:	f7fe fd50 	bl	8002c94 <cubicalADD>
        cubicalDBLADD(&nRQ, &nR, &nRQ, &nR, &pairing_dlog_data->ixQ, &pairing_dlog_data->A24);
 80041f4:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80041f8:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 80041fc:	f8d7 2940 	ldr.w	r2, [r7, #2368]	@ 0x940
 8004200:	f202 62c4 	addw	r2, r2, #1732	@ 0x6c4
 8004204:	f507 65ec 	add.w	r5, r7, #1888	@ 0x760
 8004208:	f507 6492 	add.w	r4, r7, #1168	@ 0x490
 800420c:	f507 61ec 	add.w	r1, r7, #1888	@ 0x760
 8004210:	f507 6092 	add.w	r0, r7, #1168	@ 0x490
 8004214:	9201      	str	r2, [sp, #4]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	462b      	mov	r3, r5
 800421a:	4622      	mov	r2, r4
 800421c:	f7fe fde0 	bl	8002de0 <cubicalDBLADD>

        cubicalADD(&PnS, &PnS, &nS, &pairing_dlog_data->ixP);
 8004220:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004224:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 8004228:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800422c:	f507 61a4 	add.w	r1, r7, #1312	@ 0x520
 8004230:	f507 60a4 	add.w	r0, r7, #1312	@ 0x520
 8004234:	f7fe fd2e 	bl	8002c94 <cubicalADD>
        cubicalDBLADD(&nSQ, &nS, &nSQ, &nS, &pairing_dlog_data->ixQ, &pairing_dlog_data->A24);
 8004238:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 800423c:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8004240:	f8d7 2940 	ldr.w	r2, [r7, #2368]	@ 0x940
 8004244:	f202 62c4 	addw	r2, r2, #1732	@ 0x6c4
 8004248:	f507 65da 	add.w	r5, r7, #1744	@ 0x6d0
 800424c:	f507 6480 	add.w	r4, r7, #1024	@ 0x400
 8004250:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8004254:	f507 6080 	add.w	r0, r7, #1024	@ 0x400
 8004258:	9201      	str	r2, [sp, #4]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	462b      	mov	r3, r5
 800425e:	4622      	mov	r2, r4
 8004260:	f7fe fdbe 	bl	8002de0 <cubicalDBLADD>
    for (uint32_t i = 0; i < pairing_dlog_data->e - 1; i++) {
 8004264:	f8d7 3928 	ldr.w	r3, [r7, #2344]	@ 0x928
 8004268:	3301      	adds	r3, #1
 800426a:	f8c7 3928 	str.w	r3, [r7, #2344]	@ 0x928
 800426e:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3b01      	subs	r3, #1
 8004276:	f8d7 2928 	ldr.w	r2, [r7, #2344]	@ 0x928
 800427a:	429a      	cmp	r2, r3
 800427c:	d3ae      	bcc.n	80041dc <tate_dlog_partial+0x14c>
    }

    translate(&nPQ, &nP);
 800427e:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8004282:	f507 63c8 	add.w	r3, r7, #1600	@ 0x640
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7fe ff2f 	bl	80030ec <translate>
    translate(&PnR, &nR);
 800428e:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8004292:	f507 63b6 	add.w	r3, r7, #1456	@ 0x5b0
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe ff27 	bl	80030ec <translate>
    translate(&nRQ, &nR);
 800429e:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80042a2:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe ff1f 	bl	80030ec <translate>
    translate(&PnS, &nS);
 80042ae:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80042b2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe ff17 	bl	80030ec <translate>
    translate(&nSQ, &nS);
 80042be:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80042c2:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe ff0f 	bl	80030ec <translate>

    translate(&nP, &nP);
 80042ce:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 80042d2:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe ff07 	bl	80030ec <translate>
    translate(&nQ, &nQ);
 80042de:	f507 62fe 	add.w	r2, r7, #2032	@ 0x7f0
 80042e2:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe feff 	bl	80030ec <translate>
    translate(&nR, &nR);
 80042ee:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80042f2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe fef7 	bl	80030ec <translate>
    translate(&nS, &nS);
 80042fe:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 8004302:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe feef 	bl	80030ec <translate>
    // computation of the reference Tate pairing
    ec_point_t T0;
    fp2_t w1[5], w2[5];

    // t(P, Q)^(2^e_diff) = w0
    point_ratio(&T0, &nPQ, &nP, &pairing_dlog_data->PQ.Q);
 800430e:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004312:	3394      	adds	r3, #148	@ 0x94
 8004314:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8004318:	f507 61c8 	add.w	r1, r7, #1600	@ 0x640
 800431c:	f507 705c 	add.w	r0, r7, #880	@ 0x370
 8004320:	f7fe feaa 	bl	8003078 <point_ratio>
    fp2_copy(&w1[0], &T0.x);
 8004324:	f507 725c 	add.w	r2, r7, #880	@ 0x370
 8004328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f00e fb7c 	bl	8012a2c <fp2_copy>
    fp2_copy(&w2[0], &T0.z);
 8004334:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8004338:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800433c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f00e fb72 	bl	8012a2c <fp2_copy>

    // t(R,P) = w0^r2
    point_ratio(&T0, &PnR, &nR, &pairing_dlog_data->PQ.P);
 8004348:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 800434c:	3304      	adds	r3, #4
 800434e:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8004352:	f507 61b6 	add.w	r1, r7, #1456	@ 0x5b0
 8004356:	f507 705c 	add.w	r0, r7, #880	@ 0x370
 800435a:	f7fe fe8d 	bl	8003078 <point_ratio>
    fp2_copy(&w1[1], &T0.x);
 800435e:	f507 725c 	add.w	r2, r7, #880	@ 0x370
 8004362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004366:	3348      	adds	r3, #72	@ 0x48
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f00e fb5e 	bl	8012a2c <fp2_copy>
    fp2_copy(&w2[1], &T0.z);
 8004370:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8004374:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004378:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800437c:	3348      	adds	r3, #72	@ 0x48
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f00e fb53 	bl	8012a2c <fp2_copy>

    // t(R,Q) = w0^r1
    point_ratio(&T0, &nRQ, &nR, &pairing_dlog_data->PQ.Q);
 8004386:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 800438a:	3394      	adds	r3, #148	@ 0x94
 800438c:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8004390:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8004394:	f507 705c 	add.w	r0, r7, #880	@ 0x370
 8004398:	f7fe fe6e 	bl	8003078 <point_ratio>
    fp2_copy(&w2[2], &T0.x);
 800439c:	f507 725c 	add.w	r2, r7, #880	@ 0x370
 80043a0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80043a4:	3390      	adds	r3, #144	@ 0x90
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f00e fb3f 	bl	8012a2c <fp2_copy>
    fp2_copy(&w1[2], &T0.z);
 80043ae:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 80043b2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80043b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043ba:	3390      	adds	r3, #144	@ 0x90
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f00e fb34 	bl	8012a2c <fp2_copy>

    // t(S,P) = w0^s2
    point_ratio(&T0, &PnS, &nS, &pairing_dlog_data->PQ.P);
 80043c4:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80043c8:	3304      	adds	r3, #4
 80043ca:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80043ce:	f507 61a4 	add.w	r1, r7, #1312	@ 0x520
 80043d2:	f507 705c 	add.w	r0, r7, #880	@ 0x370
 80043d6:	f7fe fe4f 	bl	8003078 <point_ratio>
    fp2_copy(&w1[3], &T0.x);
 80043da:	f507 725c 	add.w	r2, r7, #880	@ 0x370
 80043de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043e2:	33d8      	adds	r3, #216	@ 0xd8
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f00e fb20 	bl	8012a2c <fp2_copy>
    fp2_copy(&w2[3], &T0.z);
 80043ec:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 80043f0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80043f4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80043f8:	33d8      	adds	r3, #216	@ 0xd8
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f00e fb15 	bl	8012a2c <fp2_copy>

    // t(S,Q) = w0^s1
    point_ratio(&T0, &nSQ, &nS, &pairing_dlog_data->PQ.Q);
 8004402:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004406:	3394      	adds	r3, #148	@ 0x94
 8004408:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 800440c:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 8004410:	f507 705c 	add.w	r0, r7, #880	@ 0x370
 8004414:	f7fe fe30 	bl	8003078 <point_ratio>
    fp2_copy(&w2[4], &T0.x);
 8004418:	f507 725c 	add.w	r2, r7, #880	@ 0x370
 800441c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004420:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f00e fb00 	bl	8012a2c <fp2_copy>
    fp2_copy(&w1[4], &T0.z);
 800442c:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 8004430:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004438:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f00e faf4 	bl	8012a2c <fp2_copy>

    // batched reduction using projective representation
    for (int i = 0; i < 5; i++) {
 8004444:	2300      	movs	r3, #0
 8004446:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 800444a:	e058      	b.n	80044fe <tate_dlog_partial+0x46e>
        fp2_t frob, tmp;
        fp2_copy(&tmp, &w1[i]);
 800444c:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8004450:	f8d7 2924 	ldr.w	r2, [r7, #2340]	@ 0x924
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	18ca      	adds	r2, r1, r3
 800445e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f00e fae1 	bl	8012a2c <fp2_copy>
        // inline frobenius for ^p
        // multiply by inverse to get ^(p-1)
        fp2_frob(&frob, &w1[i]);
 800446a:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 800446e:	f8d7 2924 	ldr.w	r2, [r7, #2340]	@ 0x924
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	18ca      	adds	r2, r1, r3
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff f93c 	bl	8003700 <fp2_frob>
        fp2_mul(&w1[i], &w2[i], &frob);
 8004488:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 800448c:	f8d7 2924 	ldr.w	r2, [r7, #2340]	@ 0x924
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	18c8      	adds	r0, r1, r3
 800449a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800449e:	f8d7 2924 	ldr.w	r2, [r7, #2340]	@ 0x924
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	f107 0210 	add.w	r2, r7, #16
 80044b0:	4619      	mov	r1, r3
 80044b2:	f00e fb3c 	bl	8012b2e <fp2_mul>

        // repeat for denom
        fp2_frob(&frob, &w2[i]);
 80044b6:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80044ba:	f8d7 2924 	ldr.w	r2, [r7, #2340]	@ 0x924
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	18ca      	adds	r2, r1, r3
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff f916 	bl	8003700 <fp2_frob>
        fp2_mul(&w2[i], &tmp, &frob);
 80044d4:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80044d8:	f8d7 2924 	ldr.w	r2, [r7, #2340]	@ 0x924
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	f107 0210 	add.w	r2, r7, #16
 80044ea:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80044ee:	4618      	mov	r0, r3
 80044f0:	f00e fb1d 	bl	8012b2e <fp2_mul>
    for (int i = 0; i < 5; i++) {
 80044f4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	@ 0x924
 80044f8:	3301      	adds	r3, #1
 80044fa:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 80044fe:	f8d7 3924 	ldr.w	r3, [r7, #2340]	@ 0x924
 8004502:	2b04      	cmp	r3, #4
 8004504:	dda2      	ble.n	800444c <tate_dlog_partial+0x3bc>
    }

    // batched normalization
    fp2_batched_inv(w2, 5);
 8004506:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800450a:	2105      	movs	r1, #5
 800450c:	4618      	mov	r0, r3
 800450e:	f00e fd29 	bl	8012f64 <fp2_batched_inv>
    for (int i = 0; i < 5; i++) {
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 3920 	str.w	r3, [r7, #2336]	@ 0x920
 8004518:	e023      	b.n	8004562 <tate_dlog_partial+0x4d2>
        fp2_mul(&w1[i], &w1[i], &w2[i]);
 800451a:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 800451e:	f8d7 2920 	ldr.w	r2, [r7, #2336]	@ 0x920
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	18c8      	adds	r0, r1, r3
 800452c:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8004530:	f8d7 2920 	ldr.w	r2, [r7, #2336]	@ 0x920
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	18cc      	adds	r4, r1, r3
 800453e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8004542:	f8d7 2920 	ldr.w	r2, [r7, #2336]	@ 0x920
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	461a      	mov	r2, r3
 8004552:	4621      	mov	r1, r4
 8004554:	f00e faeb 	bl	8012b2e <fp2_mul>
    for (int i = 0; i < 5; i++) {
 8004558:	f8d7 3920 	ldr.w	r3, [r7, #2336]	@ 0x920
 800455c:	3301      	adds	r3, #1
 800455e:	f8c7 3920 	str.w	r3, [r7, #2336]	@ 0x920
 8004562:	f8d7 3920 	ldr.w	r3, [r7, #2336]	@ 0x920
 8004566:	2b04      	cmp	r3, #4
 8004568:	ddd7      	ble.n	800451a <tate_dlog_partial+0x48a>
    }

    for (int i = 0; i < 5; i++) {
 800456a:	2300      	movs	r3, #0
 800456c:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 8004570:	e03d      	b.n	80045ee <tate_dlog_partial+0x55e>
        clear_cofac(&w1[i], &w1[i]);
 8004572:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8004576:	f8d7 291c 	ldr.w	r2, [r7, #2332]	@ 0x91c
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	18c8      	adds	r0, r1, r3
 8004584:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8004588:	f8d7 291c 	ldr.w	r2, [r7, #2332]	@ 0x91c
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	440b      	add	r3, r1
 8004596:	4619      	mov	r1, r3
 8004598:	f7ff f87e 	bl	8003698 <clear_cofac>

        // removes 2^e_diff
        for (uint32_t j = 0; j < e_diff; j++) {
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 3918 	str.w	r3, [r7, #2328]	@ 0x918
 80045a2:	e019      	b.n	80045d8 <tate_dlog_partial+0x548>
            fp2_sqr(&w1[i], &w1[i]);
 80045a4:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 80045a8:	f8d7 291c 	ldr.w	r2, [r7, #2332]	@ 0x91c
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	18c8      	adds	r0, r1, r3
 80045b6:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 80045ba:	f8d7 291c 	ldr.w	r2, [r7, #2332]	@ 0x91c
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	440b      	add	r3, r1
 80045c8:	4619      	mov	r1, r3
 80045ca:	f00e faff 	bl	8012bcc <fp2_sqr>
        for (uint32_t j = 0; j < e_diff; j++) {
 80045ce:	f8d7 3918 	ldr.w	r3, [r7, #2328]	@ 0x918
 80045d2:	3301      	adds	r3, #1
 80045d4:	f8c7 3918 	str.w	r3, [r7, #2328]	@ 0x918
 80045d8:	f8d7 2918 	ldr.w	r2, [r7, #2328]	@ 0x918
 80045dc:	f8d7 3910 	ldr.w	r3, [r7, #2320]	@ 0x910
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3df      	bcc.n	80045a4 <tate_dlog_partial+0x514>
    for (int i = 0; i < 5; i++) {
 80045e4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	@ 0x91c
 80045e8:	3301      	adds	r3, #1
 80045ea:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 80045ee:	f8d7 391c 	ldr.w	r3, [r7, #2332]	@ 0x91c
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	ddbd      	ble.n	8004572 <tate_dlog_partial+0x4e2>
        }
    }

    fp2_dlog_2e(r2, &w1[1], &w1[0], pairing_dlog_data->e);
 80045f6:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461c      	mov	r4, r3
 80045fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004606:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800460a:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 800460e:	f6a3 1028 	subw	r0, r3, #2344	@ 0x928
 8004612:	4623      	mov	r3, r4
 8004614:	6800      	ldr	r0, [r0, #0]
 8004616:	f7ff fa0b 	bl	8003a30 <fp2_dlog_2e>
    fp2_dlog_2e(r1, &w1[2], &w1[0], pairing_dlog_data->e);
 800461a:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461c      	mov	r4, r3
 8004622:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800462a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800462e:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8004632:	f6a3 1024 	subw	r0, r3, #2340	@ 0x924
 8004636:	4623      	mov	r3, r4
 8004638:	6800      	ldr	r0, [r0, #0]
 800463a:	f7ff f9f9 	bl	8003a30 <fp2_dlog_2e>
    fp2_dlog_2e(s2, &w1[3], &w1[0], pairing_dlog_data->e);
 800463e:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461c      	mov	r4, r3
 8004646:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800464a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800464e:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8004652:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8004656:	f5a3 6013 	sub.w	r0, r3, #2352	@ 0x930
 800465a:	4623      	mov	r3, r4
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f7ff f9e7 	bl	8003a30 <fp2_dlog_2e>
    fp2_dlog_2e(s1, &w1[4], &w1[0], pairing_dlog_data->e);
 8004662:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461c      	mov	r4, r3
 800466a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800466e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004672:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 8004676:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 800467a:	f6a3 102c 	subw	r0, r3, #2348	@ 0x92c
 800467e:	4623      	mov	r3, r4
 8004680:	6800      	ldr	r0, [r0, #0]
 8004682:	f7ff f9d5 	bl	8003a30 <fp2_dlog_2e>
}
 8004686:	bf00      	nop
 8004688:	f507 6713 	add.w	r7, r7, #2352	@ 0x930
 800468c:	46bd      	mov	sp, r7
 800468e:	bdb0      	pop	{r4, r5, r7, pc}

08004690 <ec_dlog_2_tate>:
               digit_t *s2,
               const ec_basis_t *PQ,
               const ec_basis_t *RS,
               ec_curve_t *curve,
               int e)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	f6ad 0d0c 	subw	sp, sp, #2060	@ 0x80c
 8004696:	af02      	add	r7, sp, #8
 8004698:	f507 6400 	add.w	r4, r7, #2048	@ 0x800
 800469c:	f2a4 74f4 	subw	r4, r4, #2036	@ 0x7f4
 80046a0:	6020      	str	r0, [r4, #0]
 80046a2:	f507 6000 	add.w	r0, r7, #2048	@ 0x800
 80046a6:	f5a0 60ff 	sub.w	r0, r0, #2040	@ 0x7f8
 80046aa:	6001      	str	r1, [r0, #0]
 80046ac:	f507 6100 	add.w	r1, r7, #2048	@ 0x800
 80046b0:	f2a1 71fc 	subw	r1, r1, #2044	@ 0x7fc
 80046b4:	600a      	str	r2, [r1, #0]
 80046b6:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 80046ba:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80046be:	6013      	str	r3, [r2, #0]
    // assume PQ is a full torsion basis
    // returns a, b, c, d such that R = [a]P + [b]Q, S = [c]P + [d]Q

#ifndef NDEBUG
    int e_full = TORSION_EVEN_POWER;
 80046c0:	23f8      	movs	r3, #248	@ 0xf8
 80046c2:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    int e_diff = e_full - e;
 80046c6:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80046ca:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
#endif
    assert(test_basis_order_twof(PQ, curve, e_full));
 80046d4:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80046d8:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 80046dc:	f8d7 0810 	ldr.w	r0, [r7, #2064]	@ 0x810
 80046e0:	f7fe fab1 	bl	8002c46 <test_basis_order_twof>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <ec_dlog_2_tate+0x68>
 80046ea:	4b66      	ldr	r3, [pc, #408]	@ (8004884 <ec_dlog_2_tate+0x1f4>)
 80046ec:	4a66      	ldr	r2, [pc, #408]	@ (8004888 <ec_dlog_2_tate+0x1f8>)
 80046ee:	f240 21e7 	movw	r1, #743	@ 0x2e7
 80046f2:	4866      	ldr	r0, [pc, #408]	@ (800488c <ec_dlog_2_tate+0x1fc>)
 80046f4:	f030 fda0 	bl	8035238 <__assert_func>

    // precomputing the correct curve data
    ec_curve_normalize_A24(curve);
 80046f8:	f8d7 0818 	ldr.w	r0, [r7, #2072]	@ 0x818
 80046fc:	f006 ff10 	bl	800b520 <ec_curve_normalize_A24>

    pairing_dlog_params_t pairing_dlog_data;
    pairing_dlog_data.e = e;
 8004700:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8004704:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8004708:	f2a3 735c 	subw	r3, r3, #1884	@ 0x75c
 800470c:	601a      	str	r2, [r3, #0]
    pairing_dlog_data.PQ = *PQ;
 800470e:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8004712:	f2a3 735c 	subw	r3, r3, #1884	@ 0x75c
 8004716:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 800471a:	3304      	adds	r3, #4
 800471c:	4611      	mov	r1, r2
 800471e:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8004722:	4618      	mov	r0, r3
 8004724:	f031 fb3b 	bl	8035d9e <memcpy>
    pairing_dlog_data.RS = *RS;
 8004728:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800472c:	f2a3 735c 	subw	r3, r3, #1884	@ 0x75c
 8004730:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8004734:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8004738:	4611      	mov	r1, r2
 800473a:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800473e:	4618      	mov	r0, r3
 8004740:	f031 fb2d 	bl	8035d9e <memcpy>
    pairing_dlog_data.A24 = curve->A24;
 8004744:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8004748:	f2a3 725c 	subw	r2, r3, #1884	@ 0x75c
 800474c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8004750:	f202 60c4 	addw	r0, r2, #1732	@ 0x6c4
 8004754:	3390      	adds	r3, #144	@ 0x90
 8004756:	2290      	movs	r2, #144	@ 0x90
 8004758:	4619      	mov	r1, r3
 800475a:	f031 fb20 	bl	8035d9e <memcpy>

    cubical_normalization_dlog(&pairing_dlog_data, curve);
 800475e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004762:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fa6e 	bl	8003c48 <cubical_normalization_dlog>
    compute_difference_points(&pairing_dlog_data, curve);
 800476c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004770:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fbcd 	bl	8003f14 <compute_difference_points>
    tate_dlog_partial(r1, r2, s1, s2, &pairing_dlog_data);
 800477a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800477e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8004782:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 8004786:	f2a2 72fc 	subw	r2, r2, #2044	@ 0x7fc
 800478a:	f507 6100 	add.w	r1, r7, #2048	@ 0x800
 800478e:	f5a1 61ff 	sub.w	r1, r1, #2040	@ 0x7f8
 8004792:	f507 6000 	add.w	r0, r7, #2048	@ 0x800
 8004796:	f2a0 70f4 	subw	r0, r0, #2036	@ 0x7f4
 800479a:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800479e:	9400      	str	r4, [sp, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	6809      	ldr	r1, [r1, #0]
 80047a6:	6800      	ldr	r0, [r0, #0]
 80047a8:	f7ff fc72 	bl	8004090 <tate_dlog_partial>

#ifndef NDEBUG
    ec_point_t test;
    ec_biscalar_mul(&test, r1, r2, e, PQ, curve);
 80047ac:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80047b0:	f5a3 62ff 	sub.w	r2, r3, #2040	@ 0x7f8
 80047b4:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80047b8:	f2a3 71f4 	subw	r1, r3, #2036	@ 0x7f4
 80047bc:	f107 0014 	add.w	r0, r7, #20
 80047c0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	6809      	ldr	r1, [r1, #0]
 80047d4:	f008 fa4c 	bl	800cc70 <ec_biscalar_mul>
    ec_dbl_iter(&test, e_diff, &test, curve);
 80047d8:	f107 0214 	add.w	r2, r7, #20
 80047dc:	f107 0014 	add.w	r0, r7, #20
 80047e0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80047e4:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	@ 0x7f8
 80047e8:	f008 f992 	bl	800cb10 <ec_dbl_iter>
    // R = [r1]P + [r2]Q
    assert(ec_is_equal(&test, &RS->P));
 80047ec:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f006 ff37 	bl	800b66a <ec_is_equal>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <ec_dlog_2_tate+0x180>
 8004802:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <ec_dlog_2_tate+0x200>)
 8004804:	4a20      	ldr	r2, [pc, #128]	@ (8004888 <ec_dlog_2_tate+0x1f8>)
 8004806:	f240 21fb 	movw	r1, #763	@ 0x2fb
 800480a:	4820      	ldr	r0, [pc, #128]	@ (800488c <ec_dlog_2_tate+0x1fc>)
 800480c:	f030 fd14 	bl	8035238 <__assert_func>

    ec_biscalar_mul(&test, s1, s2, e, PQ, curve);
 8004810:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8004814:	f5a3 6200 	sub.w	r2, r3, #2048	@ 0x800
 8004818:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800481c:	f2a3 71fc 	subw	r1, r3, #2044	@ 0x7fc
 8004820:	f107 0014 	add.w	r0, r7, #20
 8004824:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	6809      	ldr	r1, [r1, #0]
 8004838:	f008 fa1a 	bl	800cc70 <ec_biscalar_mul>
    ec_dbl_iter(&test, e_diff, &test, curve);
 800483c:	f107 0214 	add.w	r2, r7, #20
 8004840:	f107 0014 	add.w	r0, r7, #20
 8004844:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8004848:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	@ 0x7f8
 800484c:	f008 f960 	bl	800cb10 <ec_dbl_iter>
    // S = [s1]P + [s2]Q
    assert(ec_is_equal(&test, &RS->Q));
 8004850:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8004854:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8004858:	f107 0314 	add.w	r3, r7, #20
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f006 ff03 	bl	800b66a <ec_is_equal>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <ec_dlog_2_tate+0x1e8>
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <ec_dlog_2_tate+0x204>)
 800486c:	4a06      	ldr	r2, [pc, #24]	@ (8004888 <ec_dlog_2_tate+0x1f8>)
 800486e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004872:	4806      	ldr	r0, [pc, #24]	@ (800488c <ec_dlog_2_tate+0x1fc>)
 8004874:	f030 fce0 	bl	8035238 <__assert_func>
#endif
}
 8004878:	bf00      	nop
 800487a:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 800487e:	46bd      	mov	sp, r7
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	bf00      	nop
 8004884:	08036a88 	.word	0x08036a88
 8004888:	080369e0 	.word	0x080369e0
 800488c:	080369e4 	.word	0x080369e4
 8004890:	08036a50 	.word	0x08036a50
 8004894:	08036a6c 	.word	0x08036a6c

08004898 <hash_to_challenge>:
hash_to_challenge(scalar_t *scalar,
                  const public_key_t *pk,
                  const ec_curve_t *com_curve,
                  const unsigned char *message,
                  size_t length)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b0f1      	sub	sp, #452	@ 0x1c4
 800489c:	af00      	add	r7, sp, #0
 800489e:	f507 74e0 	add.w	r4, r7, #448	@ 0x1c0
 80048a2:	f5a4 74da 	sub.w	r4, r4, #436	@ 0x1b4
 80048a6:	6020      	str	r0, [r4, #0]
 80048a8:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80048ac:	f5a0 70dc 	sub.w	r0, r0, #440	@ 0x1b8
 80048b0:	6001      	str	r1, [r0, #0]
 80048b2:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80048b6:	f5a1 71de 	sub.w	r1, r1, #444	@ 0x1bc
 80048ba:	600a      	str	r2, [r1, #0]
 80048bc:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80048c0:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 80048c4:	6013      	str	r3, [r2, #0]
    unsigned char buf[2 * FP2_ENCODED_BYTES];
    {
        fp2_t j1, j2;
        ec_j_inv(&j1, &pk->curve);
 80048c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80048ca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	f107 0310 	add.w	r3, r7, #16
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f007 f84b 	bl	800b972 <ec_j_inv>
        ec_j_inv(&j2, com_curve);
 80048dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80048e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80048e4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	4610      	mov	r0, r2
 80048ec:	f007 f841 	bl	800b972 <ec_j_inv>
        fp2_encode(buf, &j1);
 80048f0:	f107 0210 	add.w	r2, r7, #16
 80048f4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f00e fcf2 	bl	80132e4 <fp2_encode>
        fp2_encode(buf + FP2_ENCODED_BYTES, &j2);
 8004900:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004904:	3340      	adds	r3, #64	@ 0x40
 8004906:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f00e fce9 	bl	80132e4 <fp2_encode>
        // security level. Thus, the variable scalar should have enough memory
        // for the values produced by SHAKE256 in the intermediate iterations.

        shake256incctx ctx;

        size_t hash_bytes = ((2 * SECURITY_BITS) + 7) / 8;
 8004912:	2320      	movs	r3, #32
 8004914:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
        size_t limbs = (hash_bytes + sizeof(digit_t) - 1) / sizeof(digit_t);
 8004918:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800491c:	3303      	adds	r3, #3
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
        size_t bits = (2 * SECURITY_BITS) % RADIX;
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
        digit_t mask = ((digit_t)-1) >> ((RADIX - bits) % RADIX);
 800492a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800492e:	425b      	negs	r3, r3
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
 800493c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
#ifdef TARGET_BIG_ENDIAN
        mask = BSWAP_DIGIT(mask);
#endif

        shake256_inc_init(&ctx);
 8004940:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004944:	4618      	mov	r0, r3
 8004946:	f00d ff73 	bl	8012830 <shake256_inc_init>
        shake256_inc_absorb(&ctx, buf, 2 * FP2_ENCODED_BYTES);
 800494a:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 800494e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004952:	2280      	movs	r2, #128	@ 0x80
 8004954:	4618      	mov	r0, r3
 8004956:	f00d ff77 	bl	8012848 <shake256_inc_absorb>
        shake256_inc_absorb(&ctx, message, length);
 800495a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800495e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004962:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8004966:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	f00d ff6c 	bl	8012848 <shake256_inc_absorb>
        shake256_inc_finalize(&ctx);
 8004970:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004974:	4618      	mov	r0, r3
 8004976:	f00d ff77 	bl	8012868 <shake256_inc_finalize>
        shake256_inc_squeeze((void *)(*scalar), hash_bytes, &ctx);
 800497a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800497e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004982:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004986:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	f00d ff7a 	bl	8012884 <shake256_inc_squeeze>
        (*scalar)[limbs - 1] &= mask;
 8004990:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800499a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80049a8:	1e5a      	subs	r2, r3, #1
 80049aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80049ae:	4019      	ands	r1, r3
 80049b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80049b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 2; i < HASH_ITERATIONS; i++) {
 80049be:	2302      	movs	r3, #2
 80049c0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80049c4:	e03b      	b.n	8004a3e <hash_to_challenge+0x1a6>
            shake256_inc_init(&ctx);
 80049c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80049ca:	4618      	mov	r0, r3
 80049cc:	f00d ff30 	bl	8012830 <shake256_inc_init>
            shake256_inc_absorb(&ctx, (void *)(*scalar), hash_bytes);
 80049d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80049d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80049d8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80049dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	f00d ff31 	bl	8012848 <shake256_inc_absorb>
            shake256_inc_finalize(&ctx);
 80049e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80049ea:	4618      	mov	r0, r3
 80049ec:	f00d ff3c 	bl	8012868 <shake256_inc_finalize>
            shake256_inc_squeeze((void *)(*scalar), hash_bytes, &ctx);
 80049f0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80049f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80049f8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80049fc:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f00d ff3f 	bl	8012884 <shake256_inc_squeeze>
            (*scalar)[limbs - 1] &= mask;
 8004a06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004a0a:	1e5a      	subs	r2, r3, #1
 8004a0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004a10:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004a24:	4019      	ands	r1, r3
 8004a26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004a2a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 2; i < HASH_ITERATIONS; i++) {
 8004a34:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004a3e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8004a42:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a44:	ddbf      	ble.n	80049c6 <hash_to_challenge+0x12e>
        }
        shake256_inc_init(&ctx);
 8004a46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00d fef0 	bl	8012830 <shake256_inc_init>
        shake256_inc_absorb(&ctx, (void *)(*scalar), hash_bytes);
 8004a50:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004a54:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a58:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8004a5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	f00d fef1 	bl	8012848 <shake256_inc_absorb>
        shake256_inc_finalize(&ctx);
 8004a66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f00d fefc 	bl	8012868 <shake256_inc_finalize>

        hash_bytes = ((TORSION_EVEN_POWER - SQIsign_response_length) + 7) / 8;
 8004a70:	2310      	movs	r3, #16
 8004a72:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
        limbs = (hash_bytes + sizeof(digit_t) - 1) / sizeof(digit_t);
 8004a76:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8004a7a:	3303      	adds	r3, #3
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
        bits = (TORSION_EVEN_POWER - SQIsign_response_length) % RADIX;
 8004a82:	231a      	movs	r3, #26
 8004a84:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
        mask = ((digit_t)-1) >> ((RADIX - bits) % RADIX);
 8004a88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004a8c:	425b      	negs	r3, r3
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295
 8004a96:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
#ifdef TARGET_BIG_ENDIAN
        mask = BSWAP_DIGIT(mask);
#endif

        memset(*scalar, 0, NWORDS_ORDER * sizeof(digit_t));
 8004a9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004aa2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	f031 f8a8 	bl	8035c00 <memset>
        shake256_inc_squeeze((void *)(*scalar), hash_bytes, &ctx);
 8004ab0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8004ab4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004ab8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004abc:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	f00d fedf 	bl	8012884 <shake256_inc_squeeze>
        (*scalar)[limbs - 1] &= mask;
 8004ac6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004aca:	1e5a      	subs	r2, r3, #1
 8004acc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004ad0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ada:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ae4:	4019      	ands	r1, r3
 8004ae6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004aea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
#ifdef TARGET_BIG_ENDIAN
        for (int i = 0; i < NWORDS_ORDER; i++)
            (*scalar)[i] = BSWAP_DIGIT((*scalar)[i]);
#endif

        mp_mod_2exp(*scalar, SECURITY_BITS, NWORDS_ORDER);
 8004af4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8004af8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004afc:	2208      	movs	r2, #8
 8004afe:	2180      	movs	r1, #128	@ 0x80
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f023 fb12 	bl	802812a <sqisign_gen_mp_mod_2exp>
    }
}
 8004b06:	bf00      	nop
 8004b08:	f507 77e2 	add.w	r7, r7, #452	@ 0x1c4
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}

08004b10 <sqisign_gen_ibz_mat_2x2_det_from_ibz>:
    ibz_add(&((*sum)[1][1]), &((*a)[1][1]), &((*b)[1][1]));
}

void
ibz_mat_2x2_det_from_ibz(ibz_t *det, const ibz_t *a11, const ibz_t *a12, const ibz_t *a21, const ibz_t *a22)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
    ibz_t prod;
    ibz_init(&prod);
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	4618      	mov	r0, r3
 8004b24:	f018 fa6f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mul(&prod, a12, a21);
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f018 fa9c 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(det, a11, a22);
 8004b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f018 fa97 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(det, det, &prod);
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	461a      	mov	r2, r3
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f018 fa81 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_finalize(&prod);
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	4618      	mov	r0, r3
 8004b54:	f018 fa62 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8004b58:	bf00      	nop
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <sqisign_gen_ibz_mat_2x2_eval>:

void
ibz_mat_2x2_eval(ibz_vec_2_t *res, const ibz_mat_2x2_t *mat, const ibz_vec_2_t *vec)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08e      	sub	sp, #56	@ 0x38
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
    ibz_t prod;
    ibz_vec_2_t matvec;
    ibz_init(&prod);
 8004b6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b70:	4618      	mov	r0, r3
 8004b72:	f018 fa48 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_2_init(&matvec);
 8004b76:	f107 0314 	add.w	r3, r7, #20
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f00a f927 	bl	800edce <sqisign_gen_ibz_vec_2_init>
    ibz_mul(&prod, &((*mat)[0][0]), &((*vec)[0]));
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f018 fa70 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_copy(&(matvec[0]), &prod);
 8004b8e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004b92:	f107 0314 	add.w	r3, r7, #20
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f018 fb6f 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_mul(&prod, &((*mat)[0][1]), &((*vec)[1]));
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f103 010c 	add.w	r1, r3, #12
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f103 020c 	add.w	r2, r3, #12
 8004baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f018 fa5d 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(matvec[0]), &(matvec[0]), &prod);
 8004bb4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004bb8:	f107 0114 	add.w	r1, r7, #20
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f018 fa36 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_mul(&prod, &((*mat)[1][0]), &((*vec)[0]));
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f103 0118 	add.w	r1, r3, #24
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f018 fa4b 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_copy(&(matvec[1]), &prod);
 8004bd8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	330c      	adds	r3, #12
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f018 fb49 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_mul(&prod, &((*mat)[1][1]), &((*vec)[1]));
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f103 020c 	add.w	r2, r3, #12
 8004bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f018 fa37 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&(matvec[1]), &(matvec[1]), &prod);
 8004c00:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	f103 010c 	add.w	r1, r3, #12
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	330c      	adds	r3, #12
 8004c12:	4618      	mov	r0, r3
 8004c14:	f018 fa0d 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_copy(&((*res)[0]), &(matvec[0]));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f107 0214 	add.w	r2, r7, #20
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f018 fb2b 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*res)[1]), &(matvec[1]));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f103 020c 	add.w	r2, r3, #12
 8004c2c:	f107 0314 	add.w	r3, r7, #20
 8004c30:	330c      	adds	r3, #12
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f018 fb21 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_finalize(&prod);
 8004c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f018 f9ec 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_2_finalize(&matvec);
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f00a f8d1 	bl	800edf0 <sqisign_gen_ibz_vec_2_finalize>
}
 8004c4e:	bf00      	nop
 8004c50:	3738      	adds	r7, #56	@ 0x38
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <sqisign_gen_ibz_mat_2x2_inv_mod>:
    ibz_mat_2x2_finalize(&sums);
}

int
ibz_mat_2x2_inv_mod(ibz_mat_2x2_t *inv, const ibz_mat_2x2_t *mat, const ibz_t *m)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b08e      	sub	sp, #56	@ 0x38
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
    ibz_t det, prod;
    ibz_init(&det);
 8004c62:	f107 0320 	add.w	r3, r7, #32
 8004c66:	4618      	mov	r0, r3
 8004c68:	f018 f9cd 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&prod);
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4618      	mov	r0, r3
 8004c72:	f018 f9c8 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mul(&det, &((*mat)[0][0]), &((*mat)[1][1]));
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8004c7e:	f107 0320 	add.w	r3, r7, #32
 8004c82:	4618      	mov	r0, r3
 8004c84:	f018 f9f3 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mod(&det, &det, m);
 8004c88:	f107 0120 	add.w	r1, r7, #32
 8004c8c:	f107 0320 	add.w	r3, r7, #32
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f018 fa45 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_mul(&prod, &((*mat)[0][1]), &((*mat)[1][0]));
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f103 010c 	add.w	r1, r3, #12
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f103 0218 	add.w	r2, r3, #24
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f018 f9e0 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&det, &det, &prod);
 8004cae:	f107 0214 	add.w	r2, r7, #20
 8004cb2:	f107 0120 	add.w	r1, r7, #32
 8004cb6:	f107 0320 	add.w	r3, r7, #32
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f018 f9c8 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mod(&det, &det, m);
 8004cc0:	f107 0120 	add.w	r1, r7, #32
 8004cc4:	f107 0320 	add.w	r3, r7, #32
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f018 fa29 	bl	801d122 <sqisign_gen_ibz_mod>
    int res = ibz_invmod(&det, &det, m);
 8004cd0:	f107 0120 	add.w	r1, r7, #32
 8004cd4:	f107 0320 	add.w	r3, r7, #32
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f018 fc97 	bl	801d60e <sqisign_gen_ibz_invmod>
 8004ce0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    // return 0 matrix if non invertible determinant
    ibz_set(&prod, res);
 8004ce2:	f107 0314 	add.w	r3, r7, #20
 8004ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f018 faba 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_mul(&det, &det, &prod);
 8004cee:	f107 0214 	add.w	r2, r7, #20
 8004cf2:	f107 0120 	add.w	r1, r7, #32
 8004cf6:	f107 0320 	add.w	r3, r7, #32
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f018 f9b7 	bl	801d06e <sqisign_gen_ibz_mul>
    // compute inverse
    ibz_copy(&prod, &((*mat)[0][0]));
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	f107 0314 	add.w	r3, r7, #20
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f018 fab7 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*inv)[0][0]), &((*mat)[1][1]));
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	3324      	adds	r3, #36	@ 0x24
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f018 fab0 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*inv)[1][1]), &prod);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3324      	adds	r3, #36	@ 0x24
 8004d20:	f107 0214 	add.w	r2, r7, #20
 8004d24:	4611      	mov	r1, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f018 faa8 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_neg(&((*inv)[1][0]), &((*mat)[1][0]));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f103 0218 	add.w	r2, r3, #24
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3318      	adds	r3, #24
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f018 f9a7 	bl	801d08c <sqisign_gen_ibz_neg>
    ibz_neg(&((*inv)[0][1]), &((*mat)[0][1]));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f103 020c 	add.w	r2, r3, #12
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	330c      	adds	r3, #12
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f018 f99e 	bl	801d08c <sqisign_gen_ibz_neg>
    for (int i = 0; i < 2; i++) {
 8004d50:	2300      	movs	r3, #0
 8004d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d54:	e04c      	b.n	8004df0 <sqisign_gen_ibz_mat_2x2_inv_mod+0x19a>
        for (int j = 0; j < 2; j++) {
 8004d56:	2300      	movs	r3, #0
 8004d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5a:	e043      	b.n	8004de4 <sqisign_gen_ibz_mat_2x2_inv_mod+0x18e>
            ibz_mul(&((*inv)[i][j]), &((*inv)[i][j]), &det);
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	461a      	mov	r2, r3
 8004d60:	0052      	lsls	r2, r2, #1
 8004d62:	441a      	add	r2, r3
 8004d64:	0093      	lsls	r3, r2, #2
 8004d66:	461a      	mov	r2, r3
 8004d68:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	440b      	add	r3, r1
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	4413      	add	r3, r2
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	18d0      	adds	r0, r2, r3
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	0052      	lsls	r2, r2, #1
 8004d7e:	441a      	add	r2, r3
 8004d80:	0093      	lsls	r3, r2, #2
 8004d82:	461a      	mov	r2, r3
 8004d84:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d86:	460b      	mov	r3, r1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	440b      	add	r3, r1
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f107 0220 	add.w	r2, r7, #32
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f018 f968 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mod(&((*inv)[i][j]), &((*inv)[i][j]), m);
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	461a      	mov	r2, r3
 8004da2:	0052      	lsls	r2, r2, #1
 8004da4:	441a      	add	r2, r3
 8004da6:	0093      	lsls	r3, r2, #2
 8004da8:	461a      	mov	r2, r3
 8004daa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004dac:	460b      	mov	r3, r1
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	440b      	add	r3, r1
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4413      	add	r3, r2
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	18d0      	adds	r0, r2, r3
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	0052      	lsls	r2, r2, #1
 8004dc0:	441a      	add	r2, r3
 8004dc2:	0093      	lsls	r3, r2, #2
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004dc8:	460b      	mov	r3, r1
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	440b      	add	r3, r1
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f018 f9a2 	bl	801d122 <sqisign_gen_ibz_mod>
        for (int j = 0; j < 2; j++) {
 8004dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de0:	3301      	adds	r3, #1
 8004de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	ddb8      	ble.n	8004d5c <sqisign_gen_ibz_mat_2x2_inv_mod+0x106>
    for (int i = 0; i < 2; i++) {
 8004dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dec:	3301      	adds	r3, #1
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	ddaf      	ble.n	8004d56 <sqisign_gen_ibz_mat_2x2_inv_mod+0x100>
        }
    }
    ibz_finalize(&det);
 8004df6:	f107 0320 	add.w	r3, r7, #32
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f018 f90e 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&prod);
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4618      	mov	r0, r3
 8004e06:	f018 f909 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (res);
 8004e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3738      	adds	r7, #56	@ 0x38
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <copy_point>:
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f00d fe01 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	3348      	adds	r3, #72	@ 0x48
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f00d fdf8 	bl	8012a2c <fp2_copy>
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <copy_basis>:
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
    copy_point(&B1->P, &B0->P);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ffdd 	bl	8004e14 <copy_point>
    copy_point(&B1->Q, &B0->Q);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	3390      	adds	r3, #144	@ 0x90
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7ff ffd4 	bl	8004e14 <copy_point>
    copy_point(&B1->PmQ, &B0->PmQ);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f7ff ffca 	bl	8004e14 <copy_point>
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <copy_curve>:
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	4611      	mov	r1, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f00d fdc7 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	3348      	adds	r3, #72	@ 0x48
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f00d fdbe 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	3390      	adds	r3, #144	@ 0x90
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7ff ffa3 	bl	8004e14 <copy_point>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <test_point_order_twof>:
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b0f2      	sub	sp, #456	@ 0x1c8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004ee0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004ee4:	6018      	str	r0, [r3, #0]
 8004ee6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004eea:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004eee:	6019      	str	r1, [r3, #0]
 8004ef0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004ef4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004ef8:	601a      	str	r2, [r3, #0]
    test = *P;
 8004efa:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004efe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f08:	4611      	mov	r1, r2
 8004f0a:	2290      	movs	r2, #144	@ 0x90
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f030 ff46 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 8004f12:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004f16:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f1a:	f107 0214 	add.w	r2, r7, #20
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7ff ffb1 	bl	8004e88 <copy_curve>
    if (ec_is_zero(&test))
 8004f26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f006 fb7b 	bl	800b626 <ec_is_zero>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <test_point_order_twof+0x64>
        return 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e026      	b.n	8004f88 <test_point_order_twof+0xb2>
    ec_dbl_iter(&test, t - 1, &test, &curve);
 8004f3a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8004f3e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	1e59      	subs	r1, r3, #1
 8004f46:	f107 0314 	add.w	r3, r7, #20
 8004f4a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004f4e:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8004f52:	f007 fddd 	bl	800cb10 <ec_dbl_iter>
    if (ec_is_zero(&test))
 8004f56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f006 fb63 	bl	800b626 <ec_is_zero>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <test_point_order_twof+0x94>
        return 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e00e      	b.n	8004f88 <test_point_order_twof+0xb2>
    ec_dbl(&test, &test, &curve);
 8004f6a:	f107 0214 	add.w	r2, r7, #20
 8004f6e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8004f72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f76:	4618      	mov	r0, r3
 8004f78:	f007 fd98 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 8004f7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f80:	4618      	mov	r0, r3
 8004f82:	f006 fb50 	bl	800b626 <ec_is_zero>
 8004f86:	4603      	mov	r3, r0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <test_basis_order_twof>:
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
    int check_P = test_point_order_twof(&B->P, E, t);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff96 	bl	8004ed6 <test_point_order_twof>
 8004faa:	61f8      	str	r0, [r7, #28]
    int check_Q = test_point_order_twof(&B->Q, E, t);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3390      	adds	r3, #144	@ 0x90
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ff8e 	bl	8004ed6 <test_point_order_twof>
 8004fba:	61b8      	str	r0, [r7, #24]
    int check_PmQ = test_point_order_twof(&B->PmQ, E, t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ff85 	bl	8004ed6 <test_point_order_twof>
 8004fcc:	6178      	str	r0, [r7, #20]
    return check_P & check_Q & check_PmQ;
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4013      	ands	r3, r2
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_fixed_degree_isogeny_impl>:
                           bool small,
                           theta_couple_curve_t *E34,
                           theta_couple_point_t *P12,
                           size_t numP,
                           const int index_alternate_order)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	f6ad 7d7c 	subw	sp, sp, #3964	@ 0xf7c
 8004fe6:	af04      	add	r7, sp, #16
 8004fe8:	f607 7468 	addw	r4, r7, #3944	@ 0xf68
 8004fec:	f6a4 745c 	subw	r4, r4, #3932	@ 0xf5c
 8004ff0:	6020      	str	r0, [r4, #0]
 8004ff2:	f607 7068 	addw	r0, r7, #3944	@ 0xf68
 8004ff6:	f5a0 6076 	sub.w	r0, r0, #3936	@ 0xf60
 8004ffa:	6001      	str	r1, [r0, #0]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	f607 7268 	addw	r2, r7, #3944	@ 0xf68
 8005002:	f6a2 7268 	subw	r2, r2, #3944	@ 0xf68
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 800500c:	f6a3 7361 	subw	r3, r3, #3937	@ 0xf61
 8005010:	460a      	mov	r2, r1
 8005012:	701a      	strb	r2, [r3, #0]
    int ret;
    ibz_t two_pow, tmp;
    quat_alg_elem_t theta;

    ec_curve_t E0;
    copy_curve(&E0, &CURVES_WITH_ENDOMORPHISMS[index_alternate_order].curve);
 8005014:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 8005018:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	4ac8      	ldr	r2, [pc, #800]	@ (8005344 <_fixed_degree_isogeny_impl+0x364>)
 8005022:	441a      	add	r2, r3
 8005024:	f607 53e4 	addw	r3, r7, #3556	@ 0xde4
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ff2c 	bl	8004e88 <copy_curve>
    ec_curve_normalize_A24(&E0);
 8005030:	f607 53e4 	addw	r3, r7, #3556	@ 0xde4
 8005034:	4618      	mov	r0, r3
 8005036:	f006 fa73 	bl	800b520 <ec_curve_normalize_A24>

    unsigned length;

    int u_bitsize = ibz_bitsize(u);
 800503a:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 800503e:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	f018 fa88 	bl	801d558 <sqisign_gen_ibz_bitsize>
 8005048:	f8c7 0f5c 	str.w	r0, [r7, #3932]	@ 0xf5c

    // deciding the power of 2 of the dim2 isogeny we use for this
    // the smaller the faster, but if it set too low there is a risk that
    // RepresentInteger will fail
    if (!small) {
 800504c:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005050:	f6a3 7361 	subw	r3, r3, #3937	@ 0xf61
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f083 0301 	eor.w	r3, r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <_fixed_degree_isogeny_impl+0x88>
        // in that case, we just set it to be the biggest value possible
        length = TORSION_EVEN_POWER - HD_extra_torsion;
 8005060:	23f6      	movs	r3, #246	@ 0xf6
 8005062:	f8c7 3f60 	str.w	r3, [r7, #3936]	@ 0xf60
 8005066:	e020      	b.n	80050aa <_fixed_degree_isogeny_impl+0xca>
    } else {
        length = ibz_bitsize(&QUATALG_PINFTY.p) + QUAT_repres_bound_input - u_bitsize;
 8005068:	48b7      	ldr	r0, [pc, #732]	@ (8005348 <_fixed_degree_isogeny_impl+0x368>)
 800506a:	f018 fa75 	bl	801d558 <sqisign_gen_ibz_bitsize>
 800506e:	4603      	mov	r3, r0
 8005070:	f103 0214 	add.w	r2, r3, #20
 8005074:	f8d7 3f5c 	ldr.w	r3, [r7, #3932]	@ 0xf5c
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f8c7 3f60 	str.w	r3, [r7, #3936]	@ 0xf60
        assert(u_bitsize < (int)length);
 800507e:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 8005082:	f8d7 2f5c 	ldr.w	r2, [r7, #3932]	@ 0xf5c
 8005086:	429a      	cmp	r2, r3
 8005088:	db05      	blt.n	8005096 <_fixed_degree_isogeny_impl+0xb6>
 800508a:	4bb0      	ldr	r3, [pc, #704]	@ (800534c <_fixed_degree_isogeny_impl+0x36c>)
 800508c:	4ab0      	ldr	r2, [pc, #704]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 800508e:	212a      	movs	r1, #42	@ 0x2a
 8005090:	48b0      	ldr	r0, [pc, #704]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 8005092:	f030 f8d1 	bl	8035238 <__assert_func>
        assert(length < TORSION_EVEN_POWER - HD_extra_torsion);
 8005096:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 800509a:	2bf5      	cmp	r3, #245	@ 0xf5
 800509c:	d905      	bls.n	80050aa <_fixed_degree_isogeny_impl+0xca>
 800509e:	4bae      	ldr	r3, [pc, #696]	@ (8005358 <_fixed_degree_isogeny_impl+0x378>)
 80050a0:	4aab      	ldr	r2, [pc, #684]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 80050a2:	212b      	movs	r1, #43	@ 0x2b
 80050a4:	48ab      	ldr	r0, [pc, #684]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 80050a6:	f030 f8c7 	bl	8035238 <__assert_func>
    }
    assert(length);
 80050aa:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <_fixed_degree_isogeny_impl+0xde>
 80050b2:	4baa      	ldr	r3, [pc, #680]	@ (800535c <_fixed_degree_isogeny_impl+0x37c>)
 80050b4:	4aa6      	ldr	r2, [pc, #664]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 80050b6:	212d      	movs	r1, #45	@ 0x2d
 80050b8:	48a6      	ldr	r0, [pc, #664]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 80050ba:	f030 f8bd 	bl	8035238 <__assert_func>

    // var init
    ibz_init(&two_pow);
 80050be:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 80050c2:	4618      	mov	r0, r3
 80050c4:	f017 ff9f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&tmp);
 80050c8:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 80050cc:	4618      	mov	r0, r3
 80050ce:	f017 ff9a 	bl	801d006 <sqisign_gen_ibz_init>
    quat_alg_elem_init(&theta);
 80050d2:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80050d6:	4618      	mov	r0, r3
 80050d8:	f009 fe52 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>

    ibz_pow(&two_pow, &ibz_const_two, length);
 80050dc:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 80050e0:	f8d7 2f60 	ldr.w	r2, [r7, #3936]	@ 0xf60
 80050e4:	499e      	ldr	r1, [pc, #632]	@ (8005360 <_fixed_degree_isogeny_impl+0x380>)
 80050e6:	4618      	mov	r0, r3
 80050e8:	f018 f846 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_copy(&tmp, u);
 80050ec:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 80050f0:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 80050f4:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	4610      	mov	r0, r2
 80050fc:	f018 f8be 	bl	801d27c <sqisign_gen_ibz_copy>
    assert(ibz_cmp(&two_pow, &tmp) > 0);
 8005100:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 8005104:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f018 f850 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	dc05      	bgt.n	8005122 <_fixed_degree_isogeny_impl+0x142>
 8005116:	4b93      	ldr	r3, [pc, #588]	@ (8005364 <_fixed_degree_isogeny_impl+0x384>)
 8005118:	4a8d      	ldr	r2, [pc, #564]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 800511a:	2136      	movs	r1, #54	@ 0x36
 800511c:	488d      	ldr	r0, [pc, #564]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 800511e:	f030 f88b 	bl	8035238 <__assert_func>
    assert(!ibz_is_even(&tmp));
 8005122:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 8005126:	4618      	mov	r0, r3
 8005128:	f018 f879 	bl	801d21e <sqisign_gen_ibz_is_even>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <_fixed_degree_isogeny_impl+0x15e>
 8005132:	4b8d      	ldr	r3, [pc, #564]	@ (8005368 <_fixed_degree_isogeny_impl+0x388>)
 8005134:	4a86      	ldr	r2, [pc, #536]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 8005136:	2137      	movs	r1, #55	@ 0x37
 8005138:	4886      	ldr	r0, [pc, #536]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 800513a:	f030 f87d 	bl	8035238 <__assert_func>

    // computing the endomorphism theta of norm u * (2^(length) - u)
    ibz_sub(&tmp, &two_pow, &tmp);
 800513e:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 8005142:	f507 6175 	add.w	r1, r7, #3920	@ 0xf50
 8005146:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 800514a:	4618      	mov	r0, r3
 800514c:	f017 ff80 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&tmp, &tmp, u);
 8005150:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005154:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 8005158:	f607 7144 	addw	r1, r7, #3908	@ 0xf44
 800515c:	f607 7044 	addw	r0, r7, #3908	@ 0xf44
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	f017 ff84 	bl	801d06e <sqisign_gen_ibz_mul>
    assert(!ibz_is_even(&tmp));
 8005166:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 800516a:	4618      	mov	r0, r3
 800516c:	f018 f857 	bl	801d21e <sqisign_gen_ibz_is_even>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <_fixed_degree_isogeny_impl+0x1a2>
 8005176:	4b7c      	ldr	r3, [pc, #496]	@ (8005368 <_fixed_degree_isogeny_impl+0x388>)
 8005178:	4a75      	ldr	r2, [pc, #468]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 800517a:	213c      	movs	r1, #60	@ 0x3c
 800517c:	4875      	ldr	r0, [pc, #468]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 800517e:	f030 f85b 	bl	8035238 <__assert_func>

    // setting-up the quat_represent_integer_params
    quat_represent_integer_params_t ri_params;
    ri_params.primality_test_iterations = QUAT_represent_integer_params.primality_test_iterations;
 8005182:	2220      	movs	r2, #32
 8005184:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005188:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800518c:	601a      	str	r2, [r3, #0]

    quat_p_extremal_maximal_order_t order_hnf;
    quat_alg_elem_init(&order_hnf.z);
 800518e:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 8005192:	33cc      	adds	r3, #204	@ 0xcc
 8005194:	4618      	mov	r0, r3
 8005196:	f009 fdf3 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    quat_alg_elem_copy(&order_hnf.z, &EXTREMAL_ORDERS[index_alternate_order].z);
 800519a:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 800519e:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	33c8      	adds	r3, #200	@ 0xc8
 80051a8:	4a70      	ldr	r2, [pc, #448]	@ (800536c <_fixed_degree_isogeny_impl+0x38c>)
 80051aa:	4413      	add	r3, r2
 80051ac:	1d1a      	adds	r2, r3, #4
 80051ae:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80051b2:	33cc      	adds	r3, #204	@ 0xcc
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fc fae9 	bl	800178e <sqisign_gen_quat_alg_elem_copy>
    quat_alg_elem_init(&order_hnf.t);
 80051bc:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80051c0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80051c4:	4618      	mov	r0, r3
 80051c6:	f009 fddb 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    quat_alg_elem_copy(&order_hnf.t, &EXTREMAL_ORDERS[index_alternate_order].t);
 80051ca:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 80051ce:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80051da:	4a64      	ldr	r2, [pc, #400]	@ (800536c <_fixed_degree_isogeny_impl+0x38c>)
 80051dc:	441a      	add	r2, r3
 80051de:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80051e2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fc fad0 	bl	800178e <sqisign_gen_quat_alg_elem_copy>
    quat_lattice_init(&order_hnf.order);
 80051ee:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80051f2:	4618      	mov	r0, r3
 80051f4:	f009 fef5 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    ibz_copy(&order_hnf.order.denom, &EXTREMAL_ORDERS[index_alternate_order].order.denom);
 80051f8:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 80051fc:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	4a59      	ldr	r2, [pc, #356]	@ (800536c <_fixed_degree_isogeny_impl+0x38c>)
 8005206:	441a      	add	r2, r3
 8005208:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f018 f834 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_mat_4x4_copy(&order_hnf.order.basis, &EXTREMAL_ORDERS[index_alternate_order].order.basis);
 8005214:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 8005218:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	3308      	adds	r3, #8
 8005222:	4a52      	ldr	r2, [pc, #328]	@ (800536c <_fixed_degree_isogeny_impl+0x38c>)
 8005224:	4413      	add	r3, r2
 8005226:	1d1a      	adds	r2, r3, #4
 8005228:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 800522c:	330c      	adds	r3, #12
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f004 ffb6 	bl	800a1a2 <sqisign_gen_ibz_mat_4x4_copy>
    order_hnf.q = EXTREMAL_ORDERS[index_alternate_order].q;
 8005236:	4a4d      	ldr	r2, [pc, #308]	@ (800536c <_fixed_degree_isogeny_impl+0x38c>)
 8005238:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 800523c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	4413      	add	r3, r2
 8005246:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005250:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8005254:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    ri_params.order = &order_hnf;
 8005258:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 800525c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005260:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 8005264:	605a      	str	r2, [r3, #4]
    ri_params.algebra = &QUATALG_PINFTY;
 8005266:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 800526a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800526e:	4a36      	ldr	r2, [pc, #216]	@ (8005348 <_fixed_degree_isogeny_impl+0x368>)
 8005270:	609a      	str	r2, [r3, #8]

#ifndef NDEBUG
    assert(quat_lattice_contains(NULL, &ri_params.order->order, &ri_params.order->z));
 8005272:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005276:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4619      	mov	r1, r3
 800527e:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005282:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	33cc      	adds	r3, #204	@ 0xcc
 800528a:	461a      	mov	r2, r3
 800528c:	2000      	movs	r0, #0
 800528e:	f01c f82b 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <_fixed_degree_isogeny_impl+0x2c4>
 8005298:	4b35      	ldr	r3, [pc, #212]	@ (8005370 <_fixed_degree_isogeny_impl+0x390>)
 800529a:	4a2d      	ldr	r2, [pc, #180]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 800529c:	214f      	movs	r1, #79	@ 0x4f
 800529e:	482d      	ldr	r0, [pc, #180]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 80052a0:	f02f ffca 	bl	8035238 <__assert_func>
    assert(quat_lattice_contains(NULL, &ri_params.order->order, &ri_params.order->t));
 80052a4:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 80052a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4619      	mov	r1, r3
 80052b0:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 80052b4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80052be:	461a      	mov	r2, r3
 80052c0:	2000      	movs	r0, #0
 80052c2:	f01c f811 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <_fixed_degree_isogeny_impl+0x2f8>
 80052cc:	4b29      	ldr	r3, [pc, #164]	@ (8005374 <_fixed_degree_isogeny_impl+0x394>)
 80052ce:	4a20      	ldr	r2, [pc, #128]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 80052d0:	2150      	movs	r1, #80	@ 0x50
 80052d2:	4820      	ldr	r0, [pc, #128]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 80052d4:	f02f ffb0 	bl	8035238 <__assert_func>
#endif

    ret = quat_represent_integer(&theta, &tmp, 1, &ri_params);
 80052d8:	f607 53d8 	addw	r3, r7, #3544	@ 0xdd8
 80052dc:	f607 7144 	addw	r1, r7, #3908	@ 0xf44
 80052e0:	f607 7008 	addw	r0, r7, #3848	@ 0xf08
 80052e4:	2201      	movs	r2, #1
 80052e6:	f023 fb83 	bl	80289f0 <sqisign_gen_quat_represent_integer>
 80052ea:	f8c7 0f64 	str.w	r0, [r7, #3940]	@ 0xf64

    assert(!ibz_is_even(&tmp));
 80052ee:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 80052f2:	4618      	mov	r0, r3
 80052f4:	f017 ff93 	bl	801d21e <sqisign_gen_ibz_is_even>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <_fixed_degree_isogeny_impl+0x32a>
 80052fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005368 <_fixed_degree_isogeny_impl+0x388>)
 8005300:	4a13      	ldr	r2, [pc, #76]	@ (8005350 <_fixed_degree_isogeny_impl+0x370>)
 8005302:	2155      	movs	r1, #85	@ 0x55
 8005304:	4813      	ldr	r0, [pc, #76]	@ (8005354 <_fixed_degree_isogeny_impl+0x374>)
 8005306:	f02f ff97 	bl	8035238 <__assert_func>

    if (!ret) {
 800530a:	f8d7 3f64 	ldr.w	r3, [r7, #3940]	@ 0xf64
 800530e:	2b00      	cmp	r3, #0
 8005310:	d134      	bne.n	800537c <_fixed_degree_isogeny_impl+0x39c>
        printf("represent integer failed for the alternate order number %d and for "
 8005312:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 8005316:	4618      	mov	r0, r3
 8005318:	f018 f91e 	bl	801d558 <sqisign_gen_ibz_bitsize>
 800531c:	4604      	mov	r4, r0
 800531e:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005322:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	f018 f916 	bl	801d558 <sqisign_gen_ibz_bitsize>
 800532c:	4602      	mov	r2, r0
 800532e:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	4622      	mov	r2, r4
 8005338:	f8d7 1f80 	ldr.w	r1, [r7, #3968]	@ 0xf80
 800533c:	480e      	ldr	r0, [pc, #56]	@ (8005378 <_fixed_degree_isogeny_impl+0x398>)
 800533e:	f030 fafd 	bl	803593c <iprintf>
               "%u \n",
               index_alternate_order,
               ibz_bitsize(&tmp),
               ibz_bitsize(u),
               length);
        goto cleanup;
 8005342:	e1fa      	b.n	800573a <_fixed_degree_isogeny_impl+0x75a>
 8005344:	08039740 	.word	0x08039740
 8005348:	0803bf30 	.word	0x0803bf30
 800534c:	08036ac0 	.word	0x08036ac0
 8005350:	08036ad8 	.word	0x08036ad8
 8005354:	08036adc 	.word	0x08036adc
 8005358:	08036af8 	.word	0x08036af8
 800535c:	08036b28 	.word	0x08036b28
 8005360:	0803b90c 	.word	0x0803b90c
 8005364:	08036b30 	.word	0x08036b30
 8005368:	08036b4c 	.word	0x08036b4c
 800536c:	0803bf3c 	.word	0x0803bf3c
 8005370:	08036b60 	.word	0x08036b60
 8005374:	08036bac 	.word	0x08036bac
 8005378:	08036bf8 	.word	0x08036bf8
    }
    quat_lideal_create(lideal, &theta, u, &order_hnf.order, &QUATALG_PINFTY);
 800537c:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 8005380:	f607 7268 	addw	r2, r7, #3944	@ 0xf68
 8005384:	f5a2 6276 	sub.w	r2, r2, #3936	@ 0xf60
 8005388:	f607 7108 	addw	r1, r7, #3848	@ 0xf08
 800538c:	f607 7068 	addw	r0, r7, #3944	@ 0xf68
 8005390:	f6a0 705c 	subw	r0, r0, #3932	@ 0xf5c
 8005394:	4cda      	ldr	r4, [pc, #872]	@ (8005700 <_fixed_degree_isogeny_impl+0x720>)
 8005396:	9400      	str	r4, [sp, #0]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	f017 f92c 	bl	801c5f8 <sqisign_gen_quat_lideal_create>

    quat_alg_elem_finalize(&order_hnf.z);
 80053a0:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80053a4:	33cc      	adds	r3, #204	@ 0xcc
 80053a6:	4618      	mov	r0, r3
 80053a8:	f009 fd00 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    quat_alg_elem_finalize(&order_hnf.t);
 80053ac:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80053b0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80053b4:	4618      	mov	r0, r3
 80053b6:	f009 fcf9 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    quat_lattice_finalize(&order_hnf.order);
 80053ba:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80053be:	4618      	mov	r0, r3
 80053c0:	f009 fe25 	bl	800f00e <sqisign_gen_quat_lattice_finalize>

#ifndef NDEBUG
    ibz_t test_norm, test_denom;
    ibz_init(&test_denom);
 80053c4:	f607 4378 	addw	r3, r7, #3192	@ 0xc78
 80053c8:	4618      	mov	r0, r3
 80053ca:	f017 fe1c 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&test_norm);
 80053ce:	f607 4384 	addw	r3, r7, #3204	@ 0xc84
 80053d2:	4618      	mov	r0, r3
 80053d4:	f017 fe17 	bl	801d006 <sqisign_gen_ibz_init>
    quat_alg_norm(&test_norm, &test_denom, &theta, &QUATALG_PINFTY);
 80053d8:	f607 7208 	addw	r2, r7, #3848	@ 0xf08
 80053dc:	f607 4178 	addw	r1, r7, #3192	@ 0xc78
 80053e0:	f607 4084 	addw	r0, r7, #3204	@ 0xc84
 80053e4:	4bc6      	ldr	r3, [pc, #792]	@ (8005700 <_fixed_degree_isogeny_impl+0x720>)
 80053e6:	f7fc f839 	bl	800145c <sqisign_gen_quat_alg_norm>
    assert(ibz_is_one(&test_denom));
 80053ea:	f607 4378 	addw	r3, r7, #3192	@ 0xc78
 80053ee:	4618      	mov	r0, r3
 80053f0:	f017 ff01 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <_fixed_degree_isogeny_impl+0x426>
 80053fa:	4bc2      	ldr	r3, [pc, #776]	@ (8005704 <_fixed_degree_isogeny_impl+0x724>)
 80053fc:	4ac2      	ldr	r2, [pc, #776]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 80053fe:	216d      	movs	r1, #109	@ 0x6d
 8005400:	48c2      	ldr	r0, [pc, #776]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 8005402:	f02f ff19 	bl	8035238 <__assert_func>
    assert(ibz_cmp(&test_norm, &tmp) == 0);
 8005406:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 800540a:	f607 4384 	addw	r3, r7, #3204	@ 0xc84
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f017 fecd 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <_fixed_degree_isogeny_impl+0x448>
 800541c:	4bbc      	ldr	r3, [pc, #752]	@ (8005710 <_fixed_degree_isogeny_impl+0x730>)
 800541e:	4aba      	ldr	r2, [pc, #744]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 8005420:	216e      	movs	r1, #110	@ 0x6e
 8005422:	48ba      	ldr	r0, [pc, #744]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 8005424:	f02f ff08 	bl	8035238 <__assert_func>
    assert(!ibz_is_even(&tmp));
 8005428:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 800542c:	4618      	mov	r0, r3
 800542e:	f017 fef6 	bl	801d21e <sqisign_gen_ibz_is_even>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <_fixed_degree_isogeny_impl+0x464>
 8005438:	4bb6      	ldr	r3, [pc, #728]	@ (8005714 <_fixed_degree_isogeny_impl+0x734>)
 800543a:	4ab3      	ldr	r2, [pc, #716]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 800543c:	216f      	movs	r1, #111	@ 0x6f
 800543e:	48b3      	ldr	r0, [pc, #716]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 8005440:	f02f fefa 	bl	8035238 <__assert_func>
    assert(quat_lattice_contains(NULL, &EXTREMAL_ORDERS[index_alternate_order].order, &theta));
 8005444:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 8005448:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800544c:	fb02 f303 	mul.w	r3, r2, r3
 8005450:	4ab1      	ldr	r2, [pc, #708]	@ (8005718 <_fixed_degree_isogeny_impl+0x738>)
 8005452:	4413      	add	r3, r2
 8005454:	f607 7208 	addw	r2, r7, #3848	@ 0xf08
 8005458:	4619      	mov	r1, r3
 800545a:	2000      	movs	r0, #0
 800545c:	f01b ff44 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <_fixed_degree_isogeny_impl+0x492>
 8005466:	4bad      	ldr	r3, [pc, #692]	@ (800571c <_fixed_degree_isogeny_impl+0x73c>)
 8005468:	4aa7      	ldr	r2, [pc, #668]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 800546a:	2170      	movs	r1, #112	@ 0x70
 800546c:	48a7      	ldr	r0, [pc, #668]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 800546e:	f02f fee3 	bl	8035238 <__assert_func>
    ibz_finalize(&test_norm);
 8005472:	f607 4384 	addw	r3, r7, #3204	@ 0xc84
 8005476:	4618      	mov	r0, r3
 8005478:	f017 fdd0 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&test_denom);
 800547c:	f607 4378 	addw	r3, r7, #3192	@ 0xc78
 8005480:	4618      	mov	r0, r3
 8005482:	f017 fdcb 	bl	801d01c <sqisign_gen_ibz_finalize>
#endif

    ec_basis_t B0_two;
    // copying the basis
    copy_basis(&B0_two, &CURVES_WITH_ENDOMORPHISMS[index_alternate_order].basis_even);
 8005486:	f8d7 3f80 	ldr.w	r3, [r7, #3968]	@ 0xf80
 800548a:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005496:	4aa2      	ldr	r2, [pc, #648]	@ (8005720 <_fixed_degree_isogeny_impl+0x740>)
 8005498:	4413      	add	r3, r2
 800549a:	1d1a      	adds	r2, r3, #4
 800549c:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fcce 	bl	8004e44 <copy_basis>
    assert(test_basis_order_twof(&B0_two, &E0, TORSION_EVEN_POWER));
 80054a8:	f607 51e4 	addw	r1, r7, #3556	@ 0xde4
 80054ac:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80054b0:	22f8      	movs	r2, #248	@ 0xf8
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fd6d 	bl	8004f92 <test_basis_order_twof>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <_fixed_degree_isogeny_impl+0x4ea>
 80054be:	4b99      	ldr	r3, [pc, #612]	@ (8005724 <_fixed_degree_isogeny_impl+0x744>)
 80054c0:	4a91      	ldr	r2, [pc, #580]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 80054c2:	2178      	movs	r1, #120	@ 0x78
 80054c4:	4891      	ldr	r0, [pc, #580]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 80054c6:	f02f feb7 	bl	8035238 <__assert_func>
    ec_dbl_iter_basis(&B0_two, TORSION_EVEN_POWER - length - HD_extra_torsion, &B0_two, &E0);
 80054ca:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 80054ce:	f1c3 03f6 	rsb	r3, r3, #246	@ 0xf6
 80054d2:	4619      	mov	r1, r3
 80054d4:	f607 53e4 	addw	r3, r7, #3556	@ 0xde4
 80054d8:	f607 22c8 	addw	r2, r7, #2760	@ 0xac8
 80054dc:	f607 20c8 	addw	r0, r7, #2760	@ 0xac8
 80054e0:	f007 fb88 	bl	800cbf4 <ec_dbl_iter_basis>

    assert(test_basis_order_twof(&B0_two, &E0, length + HD_extra_torsion));
 80054e4:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 80054e8:	3302      	adds	r3, #2
 80054ea:	461a      	mov	r2, r3
 80054ec:	f607 51e4 	addw	r1, r7, #3556	@ 0xde4
 80054f0:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fd4c 	bl	8004f92 <test_basis_order_twof>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <_fixed_degree_isogeny_impl+0x52c>
 8005500:	4b89      	ldr	r3, [pc, #548]	@ (8005728 <_fixed_degree_isogeny_impl+0x748>)
 8005502:	4a81      	ldr	r2, [pc, #516]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 8005504:	217b      	movs	r1, #123	@ 0x7b
 8005506:	4881      	ldr	r0, [pc, #516]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 8005508:	f02f fe96 	bl	8035238 <__assert_func>

    // now we set-up the kernel
    theta_couple_point_t T1;
    theta_couple_point_t T2, T1m2;

    copy_point(&T1.P1, &B0_two.P);
 800550c:	f607 22c8 	addw	r2, r7, #2760	@ 0xac8
 8005510:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8005514:	4611      	mov	r1, r2
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fc7c 	bl	8004e14 <copy_point>
    copy_point(&T2.P1, &B0_two.Q);
 800551c:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8005520:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8005524:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fc72 	bl	8004e14 <copy_point>
    copy_point(&T1m2.P1, &B0_two.PmQ);
 8005530:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8005534:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8005538:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fc68 	bl	8004e14 <copy_point>

    // multiplication of theta by (u)^-1 mod 2^(length+2)
    ibz_mul(&two_pow, &two_pow, &ibz_const_two);
 8005544:	f507 6175 	add.w	r1, r7, #3920	@ 0xf50
 8005548:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 800554c:	4a77      	ldr	r2, [pc, #476]	@ (800572c <_fixed_degree_isogeny_impl+0x74c>)
 800554e:	4618      	mov	r0, r3
 8005550:	f017 fd8d 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&two_pow, &two_pow, &ibz_const_two);
 8005554:	f507 6175 	add.w	r1, r7, #3920	@ 0xf50
 8005558:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 800555c:	4a73      	ldr	r2, [pc, #460]	@ (800572c <_fixed_degree_isogeny_impl+0x74c>)
 800555e:	4618      	mov	r0, r3
 8005560:	f017 fd85 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_copy(&tmp, u);
 8005564:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005568:	f5a3 6376 	sub.w	r3, r3, #3936	@ 0xf60
 800556c:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	4610      	mov	r0, r2
 8005574:	f017 fe82 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_invmod(&tmp, &tmp, &two_pow);
 8005578:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 800557c:	f607 7144 	addw	r1, r7, #3908	@ 0xf44
 8005580:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 8005584:	4618      	mov	r0, r3
 8005586:	f018 f842 	bl	801d60e <sqisign_gen_ibz_invmod>
    assert(!ibz_is_even(&tmp));
 800558a:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 800558e:	4618      	mov	r0, r3
 8005590:	f017 fe45 	bl	801d21e <sqisign_gen_ibz_is_even>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <_fixed_degree_isogeny_impl+0x5c6>
 800559a:	4b5e      	ldr	r3, [pc, #376]	@ (8005714 <_fixed_degree_isogeny_impl+0x734>)
 800559c:	4a5a      	ldr	r2, [pc, #360]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 800559e:	218a      	movs	r1, #138	@ 0x8a
 80055a0:	485a      	ldr	r0, [pc, #360]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 80055a2:	f02f fe49 	bl	8035238 <__assert_func>

    ibz_mul(&theta.coord[0], &theta.coord[0], &tmp);
 80055a6:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 80055aa:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055ae:	f103 010c 	add.w	r1, r3, #12
 80055b2:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055b6:	330c      	adds	r3, #12
 80055b8:	4618      	mov	r0, r3
 80055ba:	f017 fd58 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&theta.coord[1], &theta.coord[1], &tmp);
 80055be:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 80055c2:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055c6:	f103 0118 	add.w	r1, r3, #24
 80055ca:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055ce:	3318      	adds	r3, #24
 80055d0:	4618      	mov	r0, r3
 80055d2:	f017 fd4c 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&theta.coord[2], &theta.coord[2], &tmp);
 80055d6:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 80055da:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055de:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80055e2:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055e6:	3324      	adds	r3, #36	@ 0x24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f017 fd40 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&theta.coord[3], &theta.coord[3], &tmp);
 80055ee:	f607 7244 	addw	r2, r7, #3908	@ 0xf44
 80055f2:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80055fa:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 80055fe:	3330      	adds	r3, #48	@ 0x30
 8005600:	4618      	mov	r0, r3
 8005602:	f017 fd34 	bl	801d06e <sqisign_gen_ibz_mul>

    // applying theta to the basis
    ec_basis_t B0_two_theta;
    copy_basis(&B0_two_theta, &B0_two);
 8005606:	f607 22c8 	addw	r2, r7, #2760	@ 0xac8
 800560a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fc17 	bl	8004e44 <copy_basis>
    endomorphism_application_even_basis(&B0_two_theta, index_alternate_order, &E0, &theta, length + HD_extra_torsion);
 8005616:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 800561a:	3302      	adds	r3, #2
 800561c:	4619      	mov	r1, r3
 800561e:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 8005622:	f607 52e4 	addw	r2, r7, #3556	@ 0xde4
 8005626:	f507 60b7 	add.w	r0, r7, #1464	@ 0x5b8
 800562a:	9100      	str	r1, [sp, #0]
 800562c:	f8d7 1f80 	ldr.w	r1, [r7, #3968]	@ 0xf80
 8005630:	f016 f9a8 	bl	801b984 <endomorphism_application_even_basis>

    // Ensure the basis we're using has the expected order
    assert(test_basis_order_twof(&B0_two_theta, &E0, length + HD_extra_torsion));
 8005634:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 8005638:	3302      	adds	r3, #2
 800563a:	461a      	mov	r2, r3
 800563c:	f607 51e4 	addw	r1, r7, #3556	@ 0xde4
 8005640:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fca4 	bl	8004f92 <test_basis_order_twof>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <_fixed_degree_isogeny_impl+0x67c>
 8005650:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <_fixed_degree_isogeny_impl+0x750>)
 8005652:	4a2d      	ldr	r2, [pc, #180]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 8005654:	2197      	movs	r1, #151	@ 0x97
 8005656:	482d      	ldr	r0, [pc, #180]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 8005658:	f02f fdee 	bl	8035238 <__assert_func>

    // Set-up the domain E0 x E0
    theta_couple_curve_t E00;
    E00.E1 = E0;
 800565c:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005660:	f6a3 32f8 	subw	r2, r3, #3064	@ 0xbf8
 8005664:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8005668:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800566c:	4610      	mov	r0, r2
 800566e:	4619      	mov	r1, r3
 8005670:	f44f 7392 	mov.w	r3, #292	@ 0x124
 8005674:	461a      	mov	r2, r3
 8005676:	f030 fb92 	bl	8035d9e <memcpy>
    E00.E2 = E0;
 800567a:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 800567e:	f6a3 33f8 	subw	r3, r3, #3064	@ 0xbf8
 8005682:	f607 7268 	addw	r2, r7, #3944	@ 0xf68
 8005686:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 800568a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800568e:	4611      	mov	r1, r2
 8005690:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8005694:	4618      	mov	r0, r3
 8005696:	f030 fb82 	bl	8035d9e <memcpy>

    // Set-up the kernel from the bases
    theta_kernel_couple_points_t dim_two_ker;
    copy_bases_to_kernel(&dim_two_ker, &B0_two, &B0_two_theta);
 800569a:	f507 62b7 	add.w	r2, r7, #1464	@ 0x5b8
 800569e:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 80056a2:	f107 0310 	add.w	r3, r7, #16
 80056a6:	4618      	mov	r0, r3
 80056a8:	f014 fb90 	bl	8019dcc <copy_bases_to_kernel>

    ret = theta_chain_compute_and_eval(length, &E00, &dim_two_ker, true, E34, P12, numP);
 80056ac:	f107 0210 	add.w	r2, r7, #16
 80056b0:	f507 715c 	add.w	r1, r7, #880	@ 0x370
 80056b4:	f8d7 3f7c 	ldr.w	r3, [r7, #3964]	@ 0xf7c
 80056b8:	9302      	str	r3, [sp, #8]
 80056ba:	f8d7 3f78 	ldr.w	r3, [r7, #3960]	@ 0xf78
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 80056c4:	f6a3 7368 	subw	r3, r3, #3944	@ 0xf68
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2301      	movs	r3, #1
 80056ce:	f8d7 0f60 	ldr.w	r0, [r7, #3936]	@ 0xf60
 80056d2:	f02a ffed 	bl	80306b0 <theta_chain_compute_and_eval>
 80056d6:	f8c7 0f64 	str.w	r0, [r7, #3940]	@ 0xf64
    if (!ret)
 80056da:	f8d7 3f64 	ldr.w	r3, [r7, #3940]	@ 0xf64
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02a      	beq.n	8005738 <_fixed_degree_isogeny_impl+0x758>
        goto cleanup;

    assert(length);
 80056e2:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <_fixed_degree_isogeny_impl+0x716>
 80056ea:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <_fixed_degree_isogeny_impl+0x754>)
 80056ec:	4a06      	ldr	r2, [pc, #24]	@ (8005708 <_fixed_degree_isogeny_impl+0x728>)
 80056ee:	21a6      	movs	r1, #166	@ 0xa6
 80056f0:	4806      	ldr	r0, [pc, #24]	@ (800570c <_fixed_degree_isogeny_impl+0x72c>)
 80056f2:	f02f fda1 	bl	8035238 <__assert_func>
    ret = (int)length;
 80056f6:	f8d7 3f60 	ldr.w	r3, [r7, #3936]	@ 0xf60
 80056fa:	f8c7 3f64 	str.w	r3, [r7, #3940]	@ 0xf64
 80056fe:	e01c      	b.n	800573a <_fixed_degree_isogeny_impl+0x75a>
 8005700:	0803bf30 	.word	0x0803bf30
 8005704:	08036c78 	.word	0x08036c78
 8005708:	08036ad8 	.word	0x08036ad8
 800570c:	08036adc 	.word	0x08036adc
 8005710:	08036c90 	.word	0x08036c90
 8005714:	08036b4c 	.word	0x08036b4c
 8005718:	0803bf3c 	.word	0x0803bf3c
 800571c:	08036cb0 	.word	0x08036cb0
 8005720:	08039740 	.word	0x08039740
 8005724:	08036d04 	.word	0x08036d04
 8005728:	08036d3c 	.word	0x08036d3c
 800572c:	0803b90c 	.word	0x0803b90c
 8005730:	08036d7c 	.word	0x08036d7c
 8005734:	08036b28 	.word	0x08036b28
        goto cleanup;
 8005738:	bf00      	nop

cleanup:
    // var finalize
    ibz_finalize(&two_pow);
 800573a:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 800573e:	4618      	mov	r0, r3
 8005740:	f017 fc6c 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&tmp);
 8005744:	f607 7344 	addw	r3, r7, #3908	@ 0xf44
 8005748:	4618      	mov	r0, r3
 800574a:	f017 fc67 	bl	801d01c <sqisign_gen_ibz_finalize>
    quat_alg_elem_finalize(&theta);
 800574e:	f607 7308 	addw	r3, r7, #3848	@ 0xf08
 8005752:	4618      	mov	r0, r3
 8005754:	f009 fb2a 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>

    return ret;
 8005758:	f8d7 3f64 	ldr.w	r3, [r7, #3940]	@ 0xf64
}
 800575c:	4618      	mov	r0, r3
 800575e:	f607 776c 	addw	r7, r7, #3948	@ 0xf6c
 8005762:	46bd      	mov	sp, r7
 8005764:	bd90      	pop	{r4, r7, pc}
 8005766:	bf00      	nop

08005768 <fixed_degree_isogeny_and_eval>:
                              bool small,
                              theta_couple_curve_t *E34,
                              theta_couple_point_t *P12,
                              size_t numP,
                              const int index_alternate_order)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af04      	add	r7, sp, #16
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	71fb      	strb	r3, [r7, #7]
    return _fixed_degree_isogeny_impl(lideal, u, small, E34, P12, numP, index_alternate_order);
 8005778:	79fa      	ldrb	r2, [r7, #7]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	9302      	str	r3, [sp, #8]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff fc28 	bl	8004fe0 <_fixed_degree_isogeny_impl>
 8005790:	4603      	mov	r3, r0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <post_LLL_basis_treatment>:
// takes the output of LLL and apply some small treatment on the basis
// reordering vectors and switching some signs if needed to make it in a nicer
// shape
static void
post_LLL_basis_treatment(ibz_mat_4x4_t *gram, ibz_mat_4x4_t *reduced, const ibz_t *norm, bool is_special_order)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b08a      	sub	sp, #40	@ 0x28
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	70fb      	strb	r3, [r7, #3]
    // if the left order is the special one, then we apply some additional post
    // treatment
    if (is_special_order) {
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 8197 	beq.w	8005ade <post_LLL_basis_treatment+0x344>
        // reordering the basis if needed
        if (ibz_cmp(&(*gram)[0][0], &(*gram)[2][2]) == 0) {
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3378      	adds	r3, #120	@ 0x78
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f017 fcf9 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d149      	bne.n	8005858 <post_LLL_basis_treatment+0xbe>
            for (int i = 0; i < 4; i++) {
 80057c4:	2300      	movs	r3, #0
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c8:	e015      	b.n	80057f6 <post_LLL_basis_treatment+0x5c>
                ibz_swap(&(*reduced)[i][1], &(*reduced)[i][2]);
 80057ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	330c      	adds	r3, #12
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	18d0      	adds	r0, r2, r3
 80057da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	3318      	adds	r3, #24
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4413      	add	r3, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	f017 fd53 	bl	801d296 <sqisign_gen_ibz_swap>
            for (int i = 0; i < 4; i++) {
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	3301      	adds	r3, #1
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	dde6      	ble.n	80057ca <post_LLL_basis_treatment+0x30>
            }
            ibz_swap(&(*gram)[0][2], &(*gram)[0][1]);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f103 0218 	add.w	r2, r3, #24
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	330c      	adds	r3, #12
 8005806:	4619      	mov	r1, r3
 8005808:	4610      	mov	r0, r2
 800580a:	f017 fd44 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[2][0], &(*gram)[1][0]);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3330      	adds	r3, #48	@ 0x30
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f017 fd3b 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[3][2], &(*gram)[3][1]);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	339c      	adds	r3, #156	@ 0x9c
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f017 fd32 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[2][3], &(*gram)[1][3]);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3354      	adds	r3, #84	@ 0x54
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f017 fd29 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[2][2], &(*gram)[1][1]);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	333c      	adds	r3, #60	@ 0x3c
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f017 fd20 	bl	801d296 <sqisign_gen_ibz_swap>
 8005856:	e0a8      	b.n	80059aa <post_LLL_basis_treatment+0x210>
        } else if (ibz_cmp(&(*gram)[0][0], &(*gram)[3][3]) == 0) {
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	33b4      	adds	r3, #180	@ 0xb4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f017 fca5 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d149      	bne.n	8005900 <post_LLL_basis_treatment+0x166>
            for (int i = 0; i < 4; i++) {
 800586c:	2300      	movs	r3, #0
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	e015      	b.n	800589e <post_LLL_basis_treatment+0x104>
                ibz_swap(&(*reduced)[i][1], &(*reduced)[i][3]);
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	330c      	adds	r3, #12
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	18d0      	adds	r0, r2, r3
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	3324      	adds	r3, #36	@ 0x24
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4413      	add	r3, r2
 8005892:	4619      	mov	r1, r3
 8005894:	f017 fcff 	bl	801d296 <sqisign_gen_ibz_swap>
            for (int i = 0; i < 4; i++) {
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	3301      	adds	r3, #1
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	dde6      	ble.n	8005872 <post_LLL_basis_treatment+0xd8>
            }
            ibz_swap(&(*gram)[0][3], &(*gram)[0][1]);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	330c      	adds	r3, #12
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f017 fcf0 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[3][0], &(*gram)[1][0]);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3330      	adds	r3, #48	@ 0x30
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f017 fce7 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[2][3], &(*gram)[2][1]);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	336c      	adds	r3, #108	@ 0x6c
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f017 fcde 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[3][2], &(*gram)[1][2]);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3348      	adds	r3, #72	@ 0x48
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f017 fcd5 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[3][3], &(*gram)[1][1]);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	333c      	adds	r3, #60	@ 0x3c
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f017 fccc 	bl	801d296 <sqisign_gen_ibz_swap>
 80058fe:	e054      	b.n	80059aa <post_LLL_basis_treatment+0x210>
        } else if (ibz_cmp(&(*gram)[1][1], &(*gram)[3][3]) == 0) {
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	33b4      	adds	r3, #180	@ 0xb4
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f017 fc4f 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d148      	bne.n	80059aa <post_LLL_basis_treatment+0x210>
            // in this case it seems that we need to swap the second and third
            // element, and then recompute entirely the second element from the first
            // first we swap the second and third element
            for (int i = 0; i < 4; i++) {
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e015      	b.n	800594a <post_LLL_basis_treatment+0x1b0>
                ibz_swap(&(*reduced)[i][1], &(*reduced)[i][2]);
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	4613      	mov	r3, r2
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	4413      	add	r3, r2
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	330c      	adds	r3, #12
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	18d0      	adds	r0, r2, r3
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	3318      	adds	r3, #24
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4413      	add	r3, r2
 800593e:	4619      	mov	r1, r3
 8005940:	f017 fca9 	bl	801d296 <sqisign_gen_ibz_swap>
            for (int i = 0; i < 4; i++) {
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b03      	cmp	r3, #3
 800594e:	dde6      	ble.n	800591e <post_LLL_basis_treatment+0x184>
            }
            ibz_swap(&(*gram)[0][2], &(*gram)[0][1]);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f103 0218 	add.w	r2, r3, #24
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	330c      	adds	r3, #12
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f017 fc9a 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[2][0], &(*gram)[1][0]);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3330      	adds	r3, #48	@ 0x30
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f017 fc91 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[3][2], &(*gram)[3][1]);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	339c      	adds	r3, #156	@ 0x9c
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f017 fc88 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[2][3], &(*gram)[1][3]);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3354      	adds	r3, #84	@ 0x54
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f017 fc7f 	bl	801d296 <sqisign_gen_ibz_swap>
            ibz_swap(&(*gram)[2][2], &(*gram)[1][1]);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	333c      	adds	r3, #60	@ 0x3c
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f017 fc76 	bl	801d296 <sqisign_gen_ibz_swap>
        }

        // adjusting the sign if needed
        if (ibz_cmp(&(*reduced)[0][0], &(*reduced)[1][1]) != 0) {
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	333c      	adds	r3, #60	@ 0x3c
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f017 fbfc 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d041      	beq.n	8005a42 <post_LLL_basis_treatment+0x2a8>
            for (int i = 0; i < 4; i++) {
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e03b      	b.n	8005a3c <post_LLL_basis_treatment+0x2a2>
                ibz_neg(&(*reduced)[i][1], &(*reduced)[i][1]);
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	330c      	adds	r3, #12
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	18d0      	adds	r0, r2, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	330c      	adds	r3, #12
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	4413      	add	r3, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	f017 fb51 	bl	801d08c <sqisign_gen_ibz_neg>
                ibz_neg(&(*gram)[i][1], &(*gram)[i][1]);
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4613      	mov	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4413      	add	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	330c      	adds	r3, #12
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	18d0      	adds	r0, r2, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4613      	mov	r3, r2
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	4413      	add	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	330c      	adds	r3, #12
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f017 fb3e 	bl	801d08c <sqisign_gen_ibz_neg>
                ibz_neg(&(*gram)[1][i], &(*gram)[1][i]);
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	3330      	adds	r3, #48	@ 0x30
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	18d0      	adds	r0, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	3330      	adds	r3, #48	@ 0x30
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f017 fb2b 	bl	801d08c <sqisign_gen_ibz_neg>
            for (int i = 0; i < 4; i++) {
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	ddc0      	ble.n	80059c4 <post_LLL_basis_treatment+0x22a>
            }
        }
        if (ibz_cmp(&(*reduced)[0][2], &(*reduced)[1][3]) != 0) {
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f103 0218 	add.w	r2, r3, #24
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	3354      	adds	r3, #84	@ 0x54
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f017 fbae 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d041      	beq.n	8005ade <post_LLL_basis_treatment+0x344>
            for (int i = 0; i < 4; i++) {
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	e03b      	b.n	8005ad8 <post_LLL_basis_treatment+0x33e>
                ibz_neg(&(*reduced)[i][3], &(*reduced)[i][3]);
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4613      	mov	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	3324      	adds	r3, #36	@ 0x24
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	18d0      	adds	r0, r2, r3
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4613      	mov	r3, r2
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	4413      	add	r3, r2
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3324      	adds	r3, #36	@ 0x24
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	4413      	add	r3, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	f017 fb03 	bl	801d08c <sqisign_gen_ibz_neg>
                ibz_neg(&(*gram)[i][3], &(*gram)[i][3]);
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4413      	add	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	3324      	adds	r3, #36	@ 0x24
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	18d0      	adds	r0, r2, r3
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4413      	add	r3, r2
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	3324      	adds	r3, #36	@ 0x24
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f017 faf0 	bl	801d08c <sqisign_gen_ibz_neg>
                ibz_neg(&(*gram)[3][i], &(*gram)[3][i]);
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	3390      	adds	r3, #144	@ 0x90
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	18d0      	adds	r0, r2, r3
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	3390      	adds	r3, #144	@ 0x90
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	4619      	mov	r1, r3
 8005ace:	f017 fadd 	bl	801d08c <sqisign_gen_ibz_neg>
            for (int i = 0; i < 4; i++) {
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	ddc0      	ble.n	8005a60 <post_LLL_basis_treatment+0x2c6>
            }
            // assert(ibz_cmp(&(*reduced)[0][2],&(*reduced)[1][3])==0);
        }
    }
}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	@ 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <enumerate_hypercube>:
// with respect to a basis whose gram matrix is given by gram
// Returns an int `count`, the number of vectors found with the desired
// properties
static int
enumerate_hypercube(ibz_vec_4_t *vecs, ibz_t *norms, int m, const ibz_mat_4x4_t *gram, const ibz_t *adjusted_norm)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b0a2      	sub	sp, #136	@ 0x88
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]

    ibz_t remain, norm;
    ibz_vec_4_t point;

    ibz_init(&remain);
 8005af6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005afa:	4618      	mov	r0, r3
 8005afc:	f017 fa83 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm);
 8005b00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b04:	4618      	mov	r0, r3
 8005b06:	f017 fa7e 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&point);
 8005b0a:	f107 0310 	add.w	r3, r7, #16
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f009 f97f 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>

    assert(m > 0);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dc06      	bgt.n	8005b28 <enumerate_hypercube+0x40>
 8005b1a:	4ba2      	ldr	r3, [pc, #648]	@ (8005da4 <enumerate_hypercube+0x2bc>)
 8005b1c:	4aa2      	ldr	r2, [pc, #648]	@ (8005da8 <enumerate_hypercube+0x2c0>)
 8005b1e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005b22:	48a2      	ldr	r0, [pc, #648]	@ (8005dac <enumerate_hypercube+0x2c4>)
 8005b24:	f02f fb88 	bl	8035238 <__assert_func>

    int count = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    int dim = 2 * m + 1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	3301      	adds	r3, #1
 8005b34:	673b      	str	r3, [r7, #112]	@ 0x70
    int dim2 = dim * dim;
 8005b36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b38:	fb03 f303 	mul.w	r3, r3, r3
 8005b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int dim3 = dim2 * dim;
 8005b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b40:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	66bb      	str	r3, [r7, #104]	@ 0x68

    // if the basis is of the form alpha, i*alpha, beta, i*beta
    // we can remove some values due to symmetry of the basis that
    bool need_remove_symmetry =
        (ibz_cmp(&(*gram)[0][0], &(*gram)[1][1]) == 0 && ibz_cmp(&(*gram)[3][3], &(*gram)[2][2]) == 0);
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	333c      	adds	r3, #60	@ 0x3c
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f017 fb2d 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10d      	bne.n	8005b78 <enumerate_hypercube+0x90>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	3378      	adds	r3, #120	@ 0x78
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f017 fb21 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <enumerate_hypercube+0x90>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <enumerate_hypercube+0x92>
 8005b78:	2300      	movs	r3, #0
    bool need_remove_symmetry =
 8005b7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005b7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    int check1, check2, check3;

    // Enumerate over points in a hypercube with coordinates (x, y, z, w)
    for (int x = -m; x <= 0; x++) { // We only check non-positive x-values
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	425b      	negs	r3, r3
 8005b8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b92:	e18d      	b.n	8005eb0 <enumerate_hypercube+0x3c8>
        for (int y = -m; y < m + 1; y++) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	425b      	negs	r3, r3
 8005b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b9a:	e17d      	b.n	8005e98 <enumerate_hypercube+0x3b0>
            // Once x = 0 we only consider non-positive y values
            if (x == 0 && y > 0) {
 8005b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d103      	bne.n	8005bac <enumerate_hypercube+0xc4>
 8005ba4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f300 817c 	bgt.w	8005ea4 <enumerate_hypercube+0x3bc>
                break;
            }
            for (int z = -m; z < m + 1; z++) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	425b      	negs	r3, r3
 8005bb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bb2:	e167      	b.n	8005e84 <enumerate_hypercube+0x39c>
                // If x and y are both zero, we only consider non-positive z values
                if (x == 0 && y == 0 && z > 0) {
 8005bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <enumerate_hypercube+0xe2>
 8005bbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d103      	bne.n	8005bca <enumerate_hypercube+0xe2>
 8005bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f300 8163 	bgt.w	8005e90 <enumerate_hypercube+0x3a8>
                    break;
                }
                for (int w = -m; w < m + 1; w++) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	425b      	negs	r3, r3
 8005bce:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bd0:	e14e      	b.n	8005e70 <enumerate_hypercube+0x388>
                    // If x, y, z are all zero, we only consider negative w values
                    if (x == 0 && y == 0 && z == 0 && w >= 0) {
 8005bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <enumerate_hypercube+0x106>
 8005bda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <enumerate_hypercube+0x106>
 8005be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <enumerate_hypercube+0x106>
 8005be6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f280 8147 	bge.w	8005e7c <enumerate_hypercube+0x394>
                    // action
                    //    of a group of order four generated by i for a basis expected to
                    //    be of the form: [gamma, i gamma, beta, i beta ].

                    // Ensure that not all values are even
                    if (!((x | y | z | w) & 1)) {
 8005bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 812e 	beq.w	8005e64 <enumerate_hypercube+0x37c>
                        continue;
                    }
                    // Ensure that not all values are multiples of three
                    if (x % 3 == 0 && y % 3 == 0 && z % 3 == 0 && w % 3 == 0) {
 8005c08:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8005c0c:	4b68      	ldr	r3, [pc, #416]	@ (8005db0 <enumerate_hypercube+0x2c8>)
 8005c0e:	fb83 3201 	smull	r3, r2, r3, r1
 8005c12:	17cb      	asrs	r3, r1, #31
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	4613      	mov	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	1aca      	subs	r2, r1, r3
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	d124      	bne.n	8005c6c <enumerate_hypercube+0x184>
 8005c22:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c24:	4b62      	ldr	r3, [pc, #392]	@ (8005db0 <enumerate_hypercube+0x2c8>)
 8005c26:	fb83 3201 	smull	r3, r2, r3, r1
 8005c2a:	17cb      	asrs	r3, r1, #31
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	4613      	mov	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	1aca      	subs	r2, r1, r3
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	d118      	bne.n	8005c6c <enumerate_hypercube+0x184>
 8005c3a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005db0 <enumerate_hypercube+0x2c8>)
 8005c3e:	fb83 3201 	smull	r3, r2, r3, r1
 8005c42:	17cb      	asrs	r3, r1, #31
 8005c44:	1ad2      	subs	r2, r2, r3
 8005c46:	4613      	mov	r3, r2
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	4413      	add	r3, r2
 8005c4c:	1aca      	subs	r2, r1, r3
 8005c4e:	2a00      	cmp	r2, #0
 8005c50:	d10c      	bne.n	8005c6c <enumerate_hypercube+0x184>
 8005c52:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8005c54:	4b56      	ldr	r3, [pc, #344]	@ (8005db0 <enumerate_hypercube+0x2c8>)
 8005c56:	fb83 3201 	smull	r3, r2, r3, r1
 8005c5a:	17cb      	asrs	r3, r1, #31
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	4613      	mov	r3, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	4413      	add	r3, r2
 8005c64:	1aca      	subs	r2, r1, r3
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	f000 80fe 	beq.w	8005e68 <enumerate_hypercube+0x380>
                        continue;
                    }

                    check1 = (m + w) + dim * (m + z) + dim2 * (m + y) + dim3 * (m + x);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c70:	441a      	add	r2, r3
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c76:	440b      	add	r3, r1
 8005c78:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	441a      	add	r2, r3
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c84:	440b      	add	r3, r1
 8005c86:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	441a      	add	r2, r3
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c94:	440b      	add	r3, r1
 8005c96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	663b      	str	r3, [r7, #96]	@ 0x60
                    check2 = (m - z) + dim * (m + w) + dim2 * (m - x) + dim3 * (m + y);
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005caa:	440b      	add	r3, r1
 8005cac:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005cae:	fb01 f303 	mul.w	r3, r1, r3
 8005cb2:	441a      	add	r2, r3
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005cba:	1acb      	subs	r3, r1, r3
 8005cbc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	441a      	add	r2, r3
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cc8:	440b      	add	r3, r1
 8005cca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    check3 = (m + z) + dim * (m - w) + dim2 * (m + x) + dim3 * (m - y);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cd8:	441a      	add	r2, r3
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cde:	1acb      	subs	r3, r1, r3
 8005ce0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	441a      	add	r2, r3
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005cee:	440b      	add	r3, r1
 8005cf0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	441a      	add	r2, r3
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cfc:	1acb      	subs	r3, r1, r3
 8005cfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	4413      	add	r3, r2
 8005d06:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // either the basis does not have symmetry and we are good,
                    // or there is a special symmetry that we can exploit
                    // and we ensure that we don't record the same norm in the list
                    if (!need_remove_symmetry || (check1 <= check2 && check1 <= check3)) {
 8005d08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005d0c:	f083 0301 	eor.w	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <enumerate_hypercube+0x242>
 8005d16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	f300 80a5 	bgt.w	8005e6a <enumerate_hypercube+0x382>
 8005d20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d24:	429a      	cmp	r2, r3
 8005d26:	f300 80a0 	bgt.w	8005e6a <enumerate_hypercube+0x382>
                        // Set the point as a vector (x, y, z, w)
                        ibz_set(&point[0], x);
 8005d2a:	f107 0310 	add.w	r3, r7, #16
 8005d2e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8005d32:	4618      	mov	r0, r3
 8005d34:	f017 fa95 	bl	801d262 <sqisign_gen_ibz_set>
                        ibz_set(&point[1], y);
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d40:	4618      	mov	r0, r3
 8005d42:	f017 fa8e 	bl	801d262 <sqisign_gen_ibz_set>
                        ibz_set(&point[2], z);
 8005d46:	f107 0310 	add.w	r3, r7, #16
 8005d4a:	3318      	adds	r3, #24
 8005d4c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f017 fa87 	bl	801d262 <sqisign_gen_ibz_set>
                        ibz_set(&point[3], w);
 8005d54:	f107 0310 	add.w	r3, r7, #16
 8005d58:	3324      	adds	r3, #36	@ 0x24
 8005d5a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f017 fa80 	bl	801d262 <sqisign_gen_ibz_set>

                        // Evaluate this through the gram matrix and divide out by the
                        // adjusted_norm
                        quat_qf_eval(&norm, gram, &point);
 8005d62:	f107 0210 	add.w	r2, r7, #16
 8005d66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f005 fa76 	bl	800b25e <sqisign_gen_quat_qf_eval>
                        ibz_div(&norm, &remain, &norm, adjusted_norm);
 8005d72:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005d76:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005d7a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8005d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d82:	f017 f99d 	bl	801d0c0 <sqisign_gen_ibz_div>
                        assert(ibz_is_zero(&remain));
 8005d86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f017 fa1f 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <enumerate_hypercube+0x2d0>
 8005d96:	4b07      	ldr	r3, [pc, #28]	@ (8005db4 <enumerate_hypercube+0x2cc>)
 8005d98:	4a03      	ldr	r2, [pc, #12]	@ (8005da8 <enumerate_hypercube+0x2c0>)
 8005d9a:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8005d9e:	4803      	ldr	r0, [pc, #12]	@ (8005dac <enumerate_hypercube+0x2c4>)
 8005da0:	f02f fa4a 	bl	8035238 <__assert_func>
 8005da4:	08036dc4 	.word	0x08036dc4
 8005da8:	08036ad8 	.word	0x08036ad8
 8005dac:	08036adc 	.word	0x08036adc
 8005db0:	55555556 	.word	0x55555556
 8005db4:	08036dcc 	.word	0x08036dcc

                        if (ibz_mod_ui(&norm, 2) == 1) {
 8005db8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f017 f9be 	bl	801d140 <sqisign_gen_ibz_mod_ui>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d14f      	bne.n	8005e6a <enumerate_hypercube+0x382>
                            ibz_set(&vecs[count][0], x);
 8005dca:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005dce:	4613      	mov	r3, r2
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8005de0:	4618      	mov	r0, r3
 8005de2:	f017 fa3e 	bl	801d262 <sqisign_gen_ibz_set>
                            ibz_set(&vecs[count][1], y);
 8005de6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	330c      	adds	r3, #12
 8005dfa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f017 fa30 	bl	801d262 <sqisign_gen_ibz_set>
                            ibz_set(&vecs[count][2], z);
 8005e02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	3318      	adds	r3, #24
 8005e16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f017 fa22 	bl	801d262 <sqisign_gen_ibz_set>
                            ibz_set(&vecs[count][3], w);
 8005e1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005e22:	4613      	mov	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	3324      	adds	r3, #36	@ 0x24
 8005e32:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8005e34:	4618      	mov	r0, r3
 8005e36:	f017 fa14 	bl	801d262 <sqisign_gen_ibz_set>
                            ibz_copy(&norms[count], &norm);
 8005e3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	461a      	mov	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f017 fa12 	bl	801d27c <sqisign_gen_ibz_copy>
                            count++;
 8005e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e62:	e002      	b.n	8005e6a <enumerate_hypercube+0x382>
                        continue;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <enumerate_hypercube+0x382>
                        continue;
 8005e68:	bf00      	nop
                for (int w = -m; w < m + 1; w++) {
 8005e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e74:	429a      	cmp	r2, r3
 8005e76:	f6bf aeac 	bge.w	8005bd2 <enumerate_hypercube+0xea>
 8005e7a:	e000      	b.n	8005e7e <enumerate_hypercube+0x396>
                        break;
 8005e7c:	bf00      	nop
            for (int z = -m; z < m + 1; z++) {
 8005e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e80:	3301      	adds	r3, #1
 8005e82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	f6bf ae93 	bge.w	8005bb4 <enumerate_hypercube+0xcc>
 8005e8e:	e000      	b.n	8005e92 <enumerate_hypercube+0x3aa>
                    break;
 8005e90:	bf00      	nop
        for (int y = -m; y < m + 1; y++) {
 8005e92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e94:	3301      	adds	r3, #1
 8005e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	f6bf ae7d 	bge.w	8005b9c <enumerate_hypercube+0xb4>
 8005ea2:	e000      	b.n	8005ea6 <enumerate_hypercube+0x3be>
                break;
 8005ea4:	bf00      	nop
    for (int x = -m; x <= 0; x++) { // We only check non-positive x-values
 8005ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005eaa:	3301      	adds	r3, #1
 8005eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f77f ae6d 	ble.w	8005b94 <enumerate_hypercube+0xac>
                }
            }
        }
    }

    ibz_finalize(&remain);
 8005eba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f017 f8ac 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm);
 8005ec4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f017 f8a7 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&point);
 8005ece:	f107 0310 	add.w	r3, r7, #16
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f008 ffb9 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>

    return count - 1;
 8005ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005edc:	3b01      	subs	r3, #1
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3788      	adds	r7, #136	@ 0x88
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop

08005ee8 <find_uv_from_lists>:
                   const ibz_t *quotients,
                   const int index1,
                   const int index2,
                   const int is_diagonal,
                   const int number_sum_square)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b092      	sub	sp, #72	@ 0x48
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]

    ibz_t n, remain, adjusted_norm;
    ibz_init(&n);
 8005ef6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005efa:	4618      	mov	r0, r3
 8005efc:	f017 f883 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&remain);
 8005f00:	f107 031c 	add.w	r3, r7, #28
 8005f04:	4618      	mov	r0, r3
 8005f06:	f017 f87e 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&adjusted_norm);
 8005f0a:	f107 0310 	add.w	r3, r7, #16
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f017 f879 	bl	801d006 <sqisign_gen_ibz_init>

    int found = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	647b      	str	r3, [r7, #68]	@ 0x44
    int cmp;
    ibz_copy(&n, target);
 8005f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005f1c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f017 f9ac 	bl	801d27c <sqisign_gen_ibz_copy>

    // enumerating through the list
    for (int i1 = 0; i1 < index1; i1++) {
 8005f24:	2300      	movs	r3, #0
 8005f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f28:	e108      	b.n	800613c <find_uv_from_lists+0x254>
        ibz_mod(&adjusted_norm, &n, &small_norms1[i1]);
 8005f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	461a      	mov	r2, r3
 8005f36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f38:	441a      	add	r2, r3
 8005f3a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005f3e:	f107 0310 	add.w	r3, r7, #16
 8005f42:	4618      	mov	r0, r3
 8005f44:	f017 f8ed 	bl	801d122 <sqisign_gen_ibz_mod>
        int starting_index2;
        if (is_diagonal) {
 8005f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <find_uv_from_lists+0x6c>
            starting_index2 = i1;
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f52:	e001      	b.n	8005f58 <find_uv_from_lists+0x70>
        } else {
            starting_index2 = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	63bb      	str	r3, [r7, #56]	@ 0x38
        }
        for (int i2 = starting_index2; i2 < index2; i2++) {
 8005f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f5c:	e0e3      	b.n	8006126 <find_uv_from_lists+0x23e>
            // u = target / d1 mod d2
            if (!ibz_invmod(&remain, &small_norms2[i2], &small_norms1[i1])) {
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f6c:	1899      	adds	r1, r3, r2
 8005f6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f70:	4613      	mov	r3, r2
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f7c:	441a      	add	r2, r3
 8005f7e:	f107 031c 	add.w	r3, r7, #28
 8005f82:	4618      	mov	r0, r3
 8005f84:	f017 fb43 	bl	801d60e <sqisign_gen_ibz_invmod>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80c7 	beq.w	800611e <find_uv_from_lists+0x236>
                continue;
            }
            ibz_mul(v, &remain, &adjusted_norm);
 8005f90:	f107 0210 	add.w	r2, r7, #16
 8005f94:	f107 031c 	add.w	r3, r7, #28
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005f9c:	f017 f867 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mod(v, v, &small_norms1[i1]);
 8005fa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	461a      	mov	r2, r3
 8005fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fae:	4413      	add	r3, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fb4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005fb6:	f017 f8b4 	bl	801d122 <sqisign_gen_ibz_mod>
            cmp = ibz_cmp(v, &quotients[i2]);
 8005fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fc8:	4413      	add	r3, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005fce:	f017 f8ef 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8005fd2:	6438      	str	r0, [r7, #64]	@ 0x40
            while (!found && cmp < 0) {
 8005fd4:	e092      	b.n	80060fc <find_uv_from_lists+0x214>
                if (number_sum_square > 0) {
 8005fd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dd07      	ble.n	8005fec <find_uv_from_lists+0x104>
                    found = ibz_cornacchia_prime(av, bv, &ibz_const_one, v);
 8005fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fde:	4a65      	ldr	r2, [pc, #404]	@ (8006174 <find_uv_from_lists+0x28c>)
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f017 fdb4 	bl	801db50 <sqisign_gen_ibz_cornacchia_prime>
 8005fe8:	6478      	str	r0, [r7, #68]	@ 0x44
 8005fea:	e004      	b.n	8005ff6 <find_uv_from_lists+0x10e>
                } else if (number_sum_square == 0) {
 8005fec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <find_uv_from_lists+0x10e>
                    found = 1;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	647b      	str	r3, [r7, #68]	@ 0x44
                }
                if (found) {
 8005ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d062      	beq.n	80060c2 <find_uv_from_lists+0x1da>
                    ibz_mul(&remain, v, &small_norms2[i2]);
 8005ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800600a:	441a      	add	r2, r3
 800600c:	f107 031c 	add.w	r3, r7, #28
 8006010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006012:	4618      	mov	r0, r3
 8006014:	f017 f82b 	bl	801d06e <sqisign_gen_ibz_mul>
                    ibz_copy(au, &n);
 8006018:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800601c:	4619      	mov	r1, r3
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f017 f92c 	bl	801d27c <sqisign_gen_ibz_copy>
                    ibz_sub(u, au, &remain);
 8006024:	f107 031c 	add.w	r3, r7, #28
 8006028:	461a      	mov	r2, r3
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800602e:	f017 f80f 	bl	801d050 <sqisign_gen_ibz_sub>
                    assert(ibz_cmp(u, &ibz_const_zero) > 0);
 8006032:	4951      	ldr	r1, [pc, #324]	@ (8006178 <find_uv_from_lists+0x290>)
 8006034:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006036:	f017 f8bb 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	dc06      	bgt.n	800604e <find_uv_from_lists+0x166>
 8006040:	4b4e      	ldr	r3, [pc, #312]	@ (800617c <find_uv_from_lists+0x294>)
 8006042:	4a4f      	ldr	r2, [pc, #316]	@ (8006180 <find_uv_from_lists+0x298>)
 8006044:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8006048:	484e      	ldr	r0, [pc, #312]	@ (8006184 <find_uv_from_lists+0x29c>)
 800604a:	f02f f8f5 	bl	8035238 <__assert_func>
                    ibz_div(u, &remain, u, &small_norms1[i1]);
 800604e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	461a      	mov	r2, r3
 800605a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800605c:	4413      	add	r3, r2
 800605e:	f107 011c 	add.w	r1, r7, #28
 8006062:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006064:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006066:	f017 f82b 	bl	801d0c0 <sqisign_gen_ibz_div>
                    assert(ibz_is_zero(&remain));
 800606a:	f107 031c 	add.w	r3, r7, #28
 800606e:	4618      	mov	r0, r3
 8006070:	f017 f8ad 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <find_uv_from_lists+0x1a0>
 800607a:	4b43      	ldr	r3, [pc, #268]	@ (8006188 <find_uv_from_lists+0x2a0>)
 800607c:	4a40      	ldr	r2, [pc, #256]	@ (8006180 <find_uv_from_lists+0x298>)
 800607e:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8006082:	4840      	ldr	r0, [pc, #256]	@ (8006184 <find_uv_from_lists+0x29c>)
 8006084:	f02f f8d8 	bl	8035238 <__assert_func>
                    // we want to remove weird cases where u,v have big power of two
                    found = found && (ibz_get(u) != 0 && ibz_get(v) != 0);
 8006088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00d      	beq.n	80060aa <find_uv_from_lists+0x1c2>
 800608e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006090:	f017 f90e 	bl	801d2b0 <sqisign_gen_ibz_get>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <find_uv_from_lists+0x1c2>
 800609a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800609c:	f017 f908 	bl	801d2b0 <sqisign_gen_ibz_get>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <find_uv_from_lists+0x1c2>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <find_uv_from_lists+0x1c4>
 80060aa:	2300      	movs	r3, #0
 80060ac:	647b      	str	r3, [r7, #68]	@ 0x44
                    if (number_sum_square == 2) {
 80060ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d106      	bne.n	80060c2 <find_uv_from_lists+0x1da>
                        found = ibz_cornacchia_prime(au, bu, &ibz_const_one, u);
 80060b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006174 <find_uv_from_lists+0x28c>)
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f017 fd48 	bl	801db50 <sqisign_gen_ibz_cornacchia_prime>
 80060c0:	6478      	str	r0, [r7, #68]	@ 0x44
                    }
                }
                if (!found) {
 80060c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d119      	bne.n	80060fc <find_uv_from_lists+0x214>
                    ibz_add(v, v, &small_norms1[i1]);
 80060c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060ca:	4613      	mov	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	461a      	mov	r2, r3
 80060d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060d6:	4413      	add	r3, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060dc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80060de:	f016 ffa8 	bl	801d032 <sqisign_gen_ibz_add>
                    cmp = ibz_cmp(v, &quotients[i2]);
 80060e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	461a      	mov	r2, r3
 80060ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f0:	4413      	add	r3, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80060f6:	f017 f85b 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80060fa:	6438      	str	r0, [r7, #64]	@ 0x40
            while (!found && cmp < 0) {
 80060fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <find_uv_from_lists+0x222>
 8006102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	f6ff af66 	blt.w	8005fd6 <find_uv_from_lists+0xee>
                }
            }

            if (found) {
 800610a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <find_uv_from_lists+0x238>
                // copying the indices
                *index_sol1 = i1;
 8006110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006112:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006114:	601a      	str	r2, [r3, #0]
                *index_sol2 = i2;
 8006116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800611a:	601a      	str	r2, [r3, #0]
                break;
 800611c:	e008      	b.n	8006130 <find_uv_from_lists+0x248>
                continue;
 800611e:	bf00      	nop
        for (int i2 = starting_index2; i2 < index2; i2++) {
 8006120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006122:	3301      	adds	r3, #1
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
 8006126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800612a:	429a      	cmp	r2, r3
 800612c:	f6ff af17 	blt.w	8005f5e <find_uv_from_lists+0x76>
            }
        }
        if (found) {
 8006130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006132:	2b00      	cmp	r3, #0
 8006134:	d108      	bne.n	8006148 <find_uv_from_lists+0x260>
    for (int i1 = 0; i1 < index1; i1++) {
 8006136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006138:	3301      	adds	r3, #1
 800613a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800613c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800613e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006140:	429a      	cmp	r2, r3
 8006142:	f6ff aef2 	blt.w	8005f2a <find_uv_from_lists+0x42>
 8006146:	e000      	b.n	800614a <find_uv_from_lists+0x262>
            break;
 8006148:	bf00      	nop
        }
    }

    ibz_finalize(&n);
 800614a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800614e:	4618      	mov	r0, r3
 8006150:	f016 ff64 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&remain);
 8006154:	f107 031c 	add.w	r3, r7, #28
 8006158:	4618      	mov	r0, r3
 800615a:	f016 ff5f 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&adjusted_norm);
 800615e:	f107 0310 	add.w	r3, r7, #16
 8006162:	4618      	mov	r0, r3
 8006164:	f016 ff5a 	bl	801d01c <sqisign_gen_ibz_finalize>

    return found;
 8006168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800616a:	4618      	mov	r0, r3
 800616c:	3748      	adds	r7, #72	@ 0x48
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	0803b900 	.word	0x0803b900
 8006178:	0803b8f4 	.word	0x0803b8f4
 800617c:	08036de4 	.word	0x08036de4
 8006180:	08036ad8 	.word	0x08036ad8
 8006184:	08036adc 	.word	0x08036adc
 8006188:	08036dcc 	.word	0x08036dcc

0800618c <compare_vec_by_norm>:
    int idx;
};

static int
compare_vec_by_norm(const void *_first, const void *_second)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
    const struct vec_and_norm *first = _first, *second = _second;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	613b      	str	r3, [r7, #16]
    int res = ibz_cmp(&first->norm, &second->norm);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	3330      	adds	r3, #48	@ 0x30
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f017 f800 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80061b0:	60f8      	str	r0, [r7, #12]
    if (res != 0)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <compare_vec_by_norm+0x30>
        return res;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	e004      	b.n	80061c6 <compare_vec_by_norm+0x3a>
    else
        return first->idx - second->idx;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c4:	1ad3      	subs	r3, r2, r3
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <find_uv>:
        const ibz_t *target,
        const quat_left_ideal_t *lideal,
        const quat_alg_t *Bpoo,
        int num_alternate_order)

{
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	f6ad 0dc4 	subw	sp, sp, #2244	@ 0x8c4
 80061d8:	af0c      	add	r7, sp, #48	@ 0x30
 80061da:	f507 6409 	add.w	r4, r7, #2192	@ 0x890
 80061de:	f2a4 54ac 	subw	r4, r4, #1452	@ 0x5ac
 80061e2:	6020      	str	r0, [r4, #0]
 80061e4:	f507 6009 	add.w	r0, r7, #2192	@ 0x890
 80061e8:	f5a0 60b6 	sub.w	r0, r0, #1456	@ 0x5b0
 80061ec:	6001      	str	r1, [r0, #0]
 80061ee:	f507 6109 	add.w	r1, r7, #2192	@ 0x890
 80061f2:	f2a1 51b4 	subw	r1, r1, #1460	@ 0x5b4
 80061f6:	600a      	str	r2, [r1, #0]
 80061f8:	f507 6209 	add.w	r2, r7, #2192	@ 0x890
 80061fc:	f5a2 62b7 	sub.w	r2, r2, #1464	@ 0x5b8
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	466b      	mov	r3, sp
 8006204:	607b      	str	r3, [r7, #4]
    ibz_vec_4_t vec;
    ibz_t n;
    ibz_t au, bu, av, bv;
    ibz_t norm_d;
    ibz_t remain;
    ibz_init(&au);
 8006206:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 800620a:	4618      	mov	r0, r3
 800620c:	f016 fefb 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&bu);
 8006210:	f207 738c 	addw	r3, r7, #1932	@ 0x78c
 8006214:	4618      	mov	r0, r3
 8006216:	f016 fef6 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&av);
 800621a:	f507 63f0 	add.w	r3, r7, #1920	@ 0x780
 800621e:	4618      	mov	r0, r3
 8006220:	f016 fef1 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&bv);
 8006224:	f207 7374 	addw	r3, r7, #1908	@ 0x774
 8006228:	4618      	mov	r0, r3
 800622a:	f016 feec 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm_d);
 800622e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8006232:	4618      	mov	r0, r3
 8006234:	f016 fee7 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&n);
 8006238:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 800623c:	4618      	mov	r0, r3
 800623e:	f016 fee2 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&vec);
 8006242:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8006246:	4618      	mov	r0, r3
 8006248:	f008 fde3 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_init(&remain);
 800624c:	f207 735c 	addw	r3, r7, #1884	@ 0x75c
 8006250:	4618      	mov	r0, r3
 8006252:	f016 fed8 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_copy(&n, target);
 8006256:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 800625a:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	@ 0x8c8
 800625e:	4618      	mov	r0, r3
 8006260:	f017 f80c 	bl	801d27c <sqisign_gen_ibz_copy>

    ibz_t adjusted_norm[num_alternate_order + 1];
 8006264:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	1e4b      	subs	r3, r1, #1
 800626c:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
 8006270:	460a      	mov	r2, r1
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 22d0 	str.w	r2, [r7, #720]	@ 0x2d0
 8006278:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800627c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 8006280:	1890      	adds	r0, r2, r2
 8006282:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
 8006286:	415b      	adcs	r3, r3
 8006288:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800628c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8006290:	f8d7 02d0 	ldr.w	r0, [r7, #720]	@ 0x2d0
 8006294:	eb12 0800 	adds.w	r8, r2, r0
 8006298:	f8d7 02d4 	ldr.w	r0, [r7, #724]	@ 0x2d4
 800629c:	eb43 0900 	adc.w	r9, r3, r0
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80062ac:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80062b0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80062b4:	460a      	mov	r2, r1
 80062b6:	2300      	movs	r3, #0
 80062b8:	f8c7 2238 	str.w	r2, [r7, #568]	@ 0x238
 80062bc:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80062c0:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 80062c4:	4642      	mov	r2, r8
 80062c6:	464b      	mov	r3, r9
 80062c8:	1890      	adds	r0, r2, r2
 80062ca:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
 80062ce:	415b      	adcs	r3, r3
 80062d0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80062d4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80062d8:	4640      	mov	r0, r8
 80062da:	eb12 0a00 	adds.w	sl, r2, r0
 80062de:	4648      	mov	r0, r9
 80062e0:	eb43 0b00 	adc.w	fp, r3, r0
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80062f0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80062f4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80062f8:	460a      	mov	r2, r1
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	3307      	adds	r3, #7
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	ebad 0d03 	sub.w	sp, sp, r3
 800630c:	ab0c      	add	r3, sp, #48	@ 0x30
 800630e:	3303      	adds	r3, #3
 8006310:	089b      	lsrs	r3, r3, #2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	f8c7 3850 	str.w	r3, [r7, #2128]	@ 0x850
    ibz_mat_4x4_t gram[num_alternate_order + 1], reduced[num_alternate_order + 1];
 8006318:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 800631c:	1c59      	adds	r1, r3, #1
 800631e:	1e4b      	subs	r3, r1, #1
 8006320:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
 8006324:	460a      	mov	r2, r1
 8006326:	2300      	movs	r3, #0
 8006328:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 800632c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8006330:	e9d7 898c 	ldrd	r8, r9, [r7, #560]	@ 0x230
 8006334:	4642      	mov	r2, r8
 8006336:	464b      	mov	r3, r9
 8006338:	1890      	adds	r0, r2, r2
 800633a:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
 800633e:	415b      	adcs	r3, r3
 8006340:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8006344:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8006348:	4640      	mov	r0, r8
 800634a:	1815      	adds	r5, r2, r0
 800634c:	4648      	mov	r0, r9
 800634e:	eb43 0000 	adc.w	r0, r3, r0
 8006352:	4606      	mov	r6, r0
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	0273      	lsls	r3, r6, #9
 800635e:	ea43 53d5 	orr.w	r3, r3, r5, lsr #23
 8006362:	026a      	lsls	r2, r5, #9
 8006364:	460a      	mov	r2, r1
 8006366:	2300      	movs	r3, #0
 8006368:	f8c7 2228 	str.w	r2, [r7, #552]	@ 0x228
 800636c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8006370:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 8006374:	4622      	mov	r2, r4
 8006376:	462b      	mov	r3, r5
 8006378:	1890      	adds	r0, r2, r2
 800637a:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
 800637e:	415b      	adcs	r3, r3
 8006380:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006384:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8006388:	4620      	mov	r0, r4
 800638a:	1810      	adds	r0, r2, r0
 800638c:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
 8006390:	4628      	mov	r0, r5
 8006392:	eb43 0000 	adc.w	r0, r3, r0
 8006396:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 80063a6:	4628      	mov	r0, r5
 80063a8:	0243      	lsls	r3, r0, #9
 80063aa:	4620      	mov	r0, r4
 80063ac:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80063b0:	4620      	mov	r0, r4
 80063b2:	0242      	lsls	r2, r0, #9
 80063b4:	460a      	mov	r2, r1
 80063b6:	4613      	mov	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	019b      	lsls	r3, r3, #6
 80063be:	3307      	adds	r3, #7
 80063c0:	08db      	lsrs	r3, r3, #3
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	ebad 0d03 	sub.w	sp, sp, r3
 80063c8:	ab0c      	add	r3, sp, #48	@ 0x30
 80063ca:	3303      	adds	r3, #3
 80063cc:	089b      	lsrs	r3, r3, #2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 80063d4:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 80063d8:	1c59      	adds	r1, r3, #1
 80063da:	1e4b      	subs	r3, r1, #1
 80063dc:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 80063e0:	460a      	mov	r2, r1
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 2220 	str.w	r2, [r7, #544]	@ 0x220
 80063e8:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80063ec:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	@ 0x220
 80063f0:	4622      	mov	r2, r4
 80063f2:	462b      	mov	r3, r5
 80063f4:	1890      	adds	r0, r2, r2
 80063f6:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
 80063fa:	415b      	adcs	r3, r3
 80063fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006400:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8006404:	4620      	mov	r0, r4
 8006406:	1810      	adds	r0, r2, r0
 8006408:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 800640c:	4628      	mov	r0, r5
 800640e:	eb43 0000 	adc.w	r0, r3, r0
 8006412:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8006422:	4628      	mov	r0, r5
 8006424:	0243      	lsls	r3, r0, #9
 8006426:	4620      	mov	r0, r4
 8006428:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800642c:	4620      	mov	r0, r4
 800642e:	0242      	lsls	r2, r0, #9
 8006430:	460a      	mov	r2, r1
 8006432:	2300      	movs	r3, #0
 8006434:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8006438:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800643c:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8006440:	4622      	mov	r2, r4
 8006442:	462b      	mov	r3, r5
 8006444:	1890      	adds	r0, r2, r2
 8006446:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
 800644a:	415b      	adcs	r3, r3
 800644c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006450:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8006454:	4620      	mov	r0, r4
 8006456:	1810      	adds	r0, r2, r0
 8006458:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 800645c:	4628      	mov	r0, r5
 800645e:	eb43 0000 	adc.w	r0, r3, r0
 8006462:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8006472:	4628      	mov	r0, r5
 8006474:	0243      	lsls	r3, r0, #9
 8006476:	4620      	mov	r0, r4
 8006478:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800647c:	4620      	mov	r0, r4
 800647e:	0242      	lsls	r2, r0, #9
 8006480:	460a      	mov	r2, r1
 8006482:	4613      	mov	r3, r2
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4413      	add	r3, r2
 8006488:	019b      	lsls	r3, r3, #6
 800648a:	3307      	adds	r3, #7
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	ebad 0d03 	sub.w	sp, sp, r3
 8006494:	ab0c      	add	r3, sp, #48	@ 0x30
 8006496:	3303      	adds	r3, #3
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
    quat_left_ideal_t ideal[num_alternate_order + 1];
 80064a0:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 80064a4:	1c5c      	adds	r4, r3, #1
 80064a6:	1e63      	subs	r3, r4, #1
 80064a8:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 80064ac:	4622      	mov	r2, r4
 80064ae:	2300      	movs	r3, #0
 80064b0:	f8c7 2210 	str.w	r2, [r7, #528]	@ 0x210
 80064b4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80064b8:	e9d7 5684 	ldrd	r5, r6, [r7, #528]	@ 0x210
 80064bc:	462a      	mov	r2, r5
 80064be:	4633      	mov	r3, r6
 80064c0:	f04f 0000 	mov.w	r0, #0
 80064c4:	f04f 0100 	mov.w	r1, #0
 80064c8:	00d9      	lsls	r1, r3, #3
 80064ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ce:	00d0      	lsls	r0, r2, #3
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4629      	mov	r1, r5
 80064d6:	1a51      	subs	r1, r2, r1
 80064d8:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80064dc:	4631      	mov	r1, r6
 80064de:	eb63 0301 	sbc.w	r3, r3, r1
 80064e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 8944 	ldrd	r8, r9, [r7, #272]	@ 0x110
 80064f2:	4649      	mov	r1, r9
 80064f4:	00cb      	lsls	r3, r1, #3
 80064f6:	4641      	mov	r1, r8
 80064f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fc:	4641      	mov	r1, r8
 80064fe:	00ca      	lsls	r2, r1, #3
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	4603      	mov	r3, r0
 8006506:	462a      	mov	r2, r5
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800650e:	460b      	mov	r3, r1
 8006510:	4632      	mov	r2, r6
 8006512:	eb63 0302 	sbc.w	r3, r3, r2
 8006516:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 5642 	ldrd	r5, r6, [r7, #264]	@ 0x108
 8006526:	4631      	mov	r1, r6
 8006528:	014b      	lsls	r3, r1, #5
 800652a:	4629      	mov	r1, r5
 800652c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8006530:	4629      	mov	r1, r5
 8006532:	014a      	lsls	r2, r1, #5
 8006534:	4622      	mov	r2, r4
 8006536:	2300      	movs	r3, #0
 8006538:	f8c7 2208 	str.w	r2, [r7, #520]	@ 0x208
 800653c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8006540:	e9d7 5682 	ldrd	r5, r6, [r7, #520]	@ 0x208
 8006544:	462a      	mov	r2, r5
 8006546:	4633      	mov	r3, r6
 8006548:	f04f 0000 	mov.w	r0, #0
 800654c:	f04f 0100 	mov.w	r1, #0
 8006550:	00d9      	lsls	r1, r3, #3
 8006552:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006556:	00d0      	lsls	r0, r2, #3
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4629      	mov	r1, r5
 800655e:	1a51      	subs	r1, r2, r1
 8006560:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8006564:	4631      	mov	r1, r6
 8006566:	eb63 0301 	sbc.w	r3, r3, r1
 800656a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 800657a:	4649      	mov	r1, r9
 800657c:	00cb      	lsls	r3, r1, #3
 800657e:	4641      	mov	r1, r8
 8006580:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006584:	4641      	mov	r1, r8
 8006586:	00ca      	lsls	r2, r1, #3
 8006588:	4610      	mov	r0, r2
 800658a:	4619      	mov	r1, r3
 800658c:	4603      	mov	r3, r0
 800658e:	462a      	mov	r2, r5
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006596:	460b      	mov	r3, r1
 8006598:	4632      	mov	r2, r6
 800659a:	eb63 0302 	sbc.w	r3, r3, r2
 800659e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 80065ae:	4631      	mov	r1, r6
 80065b0:	014b      	lsls	r3, r1, #5
 80065b2:	4629      	mov	r1, r5
 80065b4:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80065b8:	4629      	mov	r1, r5
 80065ba:	014a      	lsls	r2, r1, #5
 80065bc:	4622      	mov	r2, r4
 80065be:	23dc      	movs	r3, #220	@ 0xdc
 80065c0:	fb02 f303 	mul.w	r3, r2, r3
 80065c4:	3307      	adds	r3, #7
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	ebad 0d03 	sub.w	sp, sp, r3
 80065ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80065d0:	3303      	adds	r3, #3
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	f8c7 3838 	str.w	r3, [r7, #2104]	@ 0x838

    for (int i = 0; i < num_alternate_order + 1; i++) {
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 80065e0:	e036      	b.n	8006650 <find_uv+0x480>
        ibz_init(&adjusted_norm[i]);
 80065e2:	f8d7 388c 	ldr.w	r3, [r7, #2188]	@ 0x88c
 80065e6:	461a      	mov	r2, r3
 80065e8:	0052      	lsls	r2, r2, #1
 80065ea:	441a      	add	r2, r3
 80065ec:	0093      	lsls	r3, r2, #2
 80065ee:	461a      	mov	r2, r3
 80065f0:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 80065f4:	4413      	add	r3, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f016 fd05 	bl	801d006 <sqisign_gen_ibz_init>
        ibz_mat_4x4_init(&gram[i]);
 80065fc:	f8d7 388c 	ldr.w	r3, [r7, #2188]	@ 0x88c
 8006600:	461a      	mov	r2, r3
 8006602:	0052      	lsls	r2, r2, #1
 8006604:	441a      	add	r2, r3
 8006606:	0193      	lsls	r3, r2, #6
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 800660e:	4413      	add	r3, r2
 8006610:	4618      	mov	r0, r3
 8006612:	f008 fc8e 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
        ibz_mat_4x4_init(&reduced[i]);
 8006616:	f8d7 388c 	ldr.w	r3, [r7, #2188]	@ 0x88c
 800661a:	461a      	mov	r2, r3
 800661c:	0052      	lsls	r2, r2, #1
 800661e:	441a      	add	r2, r3
 8006620:	0193      	lsls	r3, r2, #6
 8006622:	461a      	mov	r2, r3
 8006624:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 8006628:	4413      	add	r3, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f008 fc81 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
        quat_left_ideal_init(&ideal[i]);
 8006630:	f8d7 288c 	ldr.w	r2, [r7, #2188]	@ 0x88c
 8006634:	23dc      	movs	r3, #220	@ 0xdc
 8006636:	fb03 f202 	mul.w	r2, r3, r2
 800663a:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 800663e:	4413      	add	r3, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f008 fcf5 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    for (int i = 0; i < num_alternate_order + 1; i++) {
 8006646:	f8d7 388c 	ldr.w	r3, [r7, #2188]	@ 0x88c
 800664a:	3301      	adds	r3, #1
 800664c:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 8006650:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 8006654:	f8d7 388c 	ldr.w	r3, [r7, #2188]	@ 0x88c
 8006658:	429a      	cmp	r2, r3
 800665a:	dac2      	bge.n	80065e2 <find_uv+0x412>
    }

    // first we reduce the ideal given in input
    quat_lideal_copy(&ideal[0], lideal);
 800665c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8006660:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	@ 0x8cc
 8006664:	4618      	mov	r0, r3
 8006666:	f015 ff00 	bl	801c46a <sqisign_gen_quat_lideal_copy>
    quat_lideal_reduce_basis(&reduced[0], &gram[0], &ideal[0], Bpoo);
 800666a:	f8d7 0840 	ldr.w	r0, [r7, #2112]	@ 0x840
 800666e:	f8d7 1848 	ldr.w	r1, [r7, #2120]	@ 0x848
 8006672:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 8006676:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 800667a:	f01b f90d 	bl	8021898 <sqisign_gen_quat_lideal_reduce_basis>

    ibz_mat_4x4_copy(&ideal[0].lattice.basis, &reduced[0]);
 800667e:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8006682:	f103 020c 	add.w	r2, r3, #12
 8006686:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f003 fd88 	bl	800a1a2 <sqisign_gen_ibz_mat_4x4_copy>
    ibz_set(&adjusted_norm[0], 1);
 8006692:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 8006696:	2101      	movs	r1, #1
 8006698:	4618      	mov	r0, r3
 800669a:	f016 fde2 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_mul(&adjusted_norm[0], &adjusted_norm[0], &ideal[0].lattice.denom);
 800669e:	f8d7 0850 	ldr.w	r0, [r7, #2128]	@ 0x850
 80066a2:	f8d7 1850 	ldr.w	r1, [r7, #2128]	@ 0x850
 80066a6:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 80066aa:	461a      	mov	r2, r3
 80066ac:	f016 fcdf 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&adjusted_norm[0], &adjusted_norm[0], &ideal[0].lattice.denom);
 80066b0:	f8d7 0850 	ldr.w	r0, [r7, #2128]	@ 0x850
 80066b4:	f8d7 1850 	ldr.w	r1, [r7, #2128]	@ 0x850
 80066b8:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 80066bc:	461a      	mov	r2, r3
 80066be:	f016 fcd6 	bl	801d06e <sqisign_gen_ibz_mul>
    post_LLL_basis_treatment(&gram[0], &reduced[0], &ideal[0].norm, true);
 80066c2:	f8d7 0848 	ldr.w	r0, [r7, #2120]	@ 0x848
 80066c6:	f8d7 1840 	ldr.w	r1, [r7, #2112]	@ 0x840
 80066ca:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 80066ce:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80066d2:	2301      	movs	r3, #1
 80066d4:	f7ff f861 	bl	800579a <post_LLL_basis_treatment>

    // for efficient lattice reduction, we replace ideal[0] by the equivalent
    // ideal of smallest norm
    quat_left_ideal_t reduced_id;
    quat_left_ideal_init(&reduced_id);
 80066d8:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 80066dc:	4618      	mov	r0, r3
 80066de:	f008 fca7 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    quat_lideal_copy(&reduced_id, &ideal[0]);
 80066e2:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 80066e6:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f015 febc 	bl	801c46a <sqisign_gen_quat_lideal_copy>
    quat_alg_elem_t delta;
    // delta will be the element of smallest norm
    quat_alg_elem_init(&delta);
 80066f2:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 80066f6:	4618      	mov	r0, r3
 80066f8:	f008 fb42 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    ibz_set(&delta.coord[0], 1);
 80066fc:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 8006700:	330c      	adds	r3, #12
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f016 fdac 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&delta.coord[1], 0);
 800670a:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 800670e:	3318      	adds	r3, #24
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f016 fda5 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&delta.coord[2], 0);
 8006718:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 800671c:	3324      	adds	r3, #36	@ 0x24
 800671e:	2100      	movs	r1, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f016 fd9e 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&delta.coord[3], 0);
 8006726:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 800672a:	3330      	adds	r3, #48	@ 0x30
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f016 fd97 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_copy(&delta.denom, &reduced_id.lattice.denom);
 8006734:	f507 62d0 	add.w	r2, r7, #1664	@ 0x680
 8006738:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f016 fd9c 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_mat_4x4_eval(&delta.coord, &reduced[0], &delta.coord);
 8006744:	f8d7 1840 	ldr.w	r1, [r7, #2112]	@ 0x840
 8006748:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 800674c:	f103 020c 	add.w	r2, r3, #12
 8006750:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 8006754:	330c      	adds	r3, #12
 8006756:	4618      	mov	r0, r3
 8006758:	f004 fcb7 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
    assert(quat_lattice_contains(NULL, &reduced_id.lattice, &delta));
 800675c:	f207 6244 	addw	r2, r7, #1604	@ 0x644
 8006760:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 8006764:	4619      	mov	r1, r3
 8006766:	2000      	movs	r0, #0
 8006768:	f01a fdbe 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <find_uv+0x5b0>
 8006772:	4b32      	ldr	r3, [pc, #200]	@ (800683c <find_uv+0x66c>)
 8006774:	4a32      	ldr	r2, [pc, #200]	@ (8006840 <find_uv+0x670>)
 8006776:	f240 211b 	movw	r1, #539	@ 0x21b
 800677a:	4832      	ldr	r0, [pc, #200]	@ (8006844 <find_uv+0x674>)
 800677c:	f02e fd5c 	bl	8035238 <__assert_func>

    // reduced_id = ideal[0] * \overline{delta}/n(ideal[0])
    quat_alg_conj(&delta, &delta);
 8006780:	f207 6244 	addw	r2, r7, #1604	@ 0x644
 8006784:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 8006788:	4611      	mov	r1, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f7fa ff01 	bl	8001592 <sqisign_gen_quat_alg_conj>
    ibz_mul(&delta.denom, &delta.denom, &ideal[0].norm);
 8006790:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8006794:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8006798:	f207 6144 	addw	r1, r7, #1604	@ 0x644
 800679c:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 80067a0:	4618      	mov	r0, r3
 80067a2:	f016 fc64 	bl	801d06e <sqisign_gen_ibz_mul>
    quat_lattice_alg_elem_mul(&reduced_id.lattice, &reduced_id.lattice, &delta, Bpoo);
 80067a6:	f207 6244 	addw	r2, r7, #1604	@ 0x644
 80067aa:	f507 61d0 	add.w	r1, r7, #1664	@ 0x680
 80067ae:	f507 60d0 	add.w	r0, r7, #1664	@ 0x680
 80067b2:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 80067b6:	f01a fbb7 	bl	8020f28 <sqisign_gen_quat_lattice_alg_elem_mul>
    ibz_copy(&reduced_id.norm, &gram[0][0][0]);
 80067ba:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 80067be:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 80067c2:	33cc      	adds	r3, #204	@ 0xcc
 80067c4:	4611      	mov	r1, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f016 fd58 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_div(&reduced_id.norm, &remain, &reduced_id.norm, &adjusted_norm[0]);
 80067cc:	f8d7 4850 	ldr.w	r4, [r7, #2128]	@ 0x850
 80067d0:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 80067d4:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80067d8:	f207 715c 	addw	r1, r7, #1884	@ 0x75c
 80067dc:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 80067e0:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 80067e4:	4623      	mov	r3, r4
 80067e6:	f016 fc6b 	bl	801d0c0 <sqisign_gen_ibz_div>
    assert(ibz_cmp(&remain, &ibz_const_zero) == 0);
 80067ea:	f207 735c 	addw	r3, r7, #1884	@ 0x75c
 80067ee:	4916      	ldr	r1, [pc, #88]	@ (8006848 <find_uv+0x678>)
 80067f0:	4618      	mov	r0, r3
 80067f2:	f016 fcdd 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <find_uv+0x63a>
 80067fc:	4b13      	ldr	r3, [pc, #76]	@ (800684c <find_uv+0x67c>)
 80067fe:	4a10      	ldr	r2, [pc, #64]	@ (8006840 <find_uv+0x670>)
 8006800:	f240 2123 	movw	r1, #547	@ 0x223
 8006804:	480f      	ldr	r0, [pc, #60]	@ (8006844 <find_uv+0x674>)
 8006806:	f02e fd17 	bl	8035238 <__assert_func>

    // and conj_ideal is the conjugate of reduced_id
    // init the right order;
    quat_lattice_t right_order;
    quat_lattice_init(&right_order);
 800680a:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 800680e:	4618      	mov	r0, r3
 8006810:	f008 fbe7 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    // computing the conjugate
    quat_left_ideal_t conj_ideal;
    quat_left_ideal_init(&conj_ideal);
 8006814:	f207 439c 	addw	r3, r7, #1180	@ 0x49c
 8006818:	4618      	mov	r0, r3
 800681a:	f008 fc09 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    quat_lideal_conjugate_without_hnf(&conj_ideal, &right_order, &reduced_id, Bpoo);
 800681e:	f507 62d0 	add.w	r2, r7, #1664	@ 0x680
 8006822:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 8006826:	f207 409c 	addw	r0, r7, #1180	@ 0x49c
 800682a:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 800682e:	f016 faaf 	bl	801cd90 <sqisign_gen_quat_lideal_conjugate_without_hnf>

    // computing all the other connecting ideals and reducing them
    for (int i = 1; i < num_alternate_order + 1; i++) {
 8006832:	2301      	movs	r3, #1
 8006834:	f8c7 3888 	str.w	r3, [r7, #2184]	@ 0x888
 8006838:	e0bc      	b.n	80069b4 <find_uv+0x7e4>
 800683a:	bf00      	nop
 800683c:	08036e04 	.word	0x08036e04
 8006840:	08036ad8 	.word	0x08036ad8
 8006844:	08036adc 	.word	0x08036adc
 8006848:	0803b8f4 	.word	0x0803b8f4
 800684c:	08036e40 	.word	0x08036e40
        quat_lideal_lideal_mul_reduced(&ideal[i], &gram[i], &conj_ideal, &ALTERNATE_CONNECTING_IDEALS[i - 1], Bpoo);
 8006850:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 8006854:	23dc      	movs	r3, #220	@ 0xdc
 8006856:	fb03 f202 	mul.w	r2, r3, r2
 800685a:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 800685e:	189c      	adds	r4, r3, r2
 8006860:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 8006864:	461a      	mov	r2, r3
 8006866:	0052      	lsls	r2, r2, #1
 8006868:	441a      	add	r2, r3
 800686a:	0193      	lsls	r3, r2, #6
 800686c:	461a      	mov	r2, r3
 800686e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 8006872:	1898      	adds	r0, r3, r2
 8006874:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 8006878:	23dc      	movs	r3, #220	@ 0xdc
 800687a:	fb03 f202 	mul.w	r2, r3, r2
 800687e:	4b4c      	ldr	r3, [pc, #304]	@ (80069b0 <find_uv+0x7e0>)
 8006880:	18d1      	adds	r1, r2, r3
 8006882:	f207 429c 	addw	r2, r7, #1180	@ 0x49c
 8006886:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	460b      	mov	r3, r1
 800688e:	4601      	mov	r1, r0
 8006890:	4620      	mov	r0, r4
 8006892:	f01b f881 	bl	8021998 <sqisign_gen_quat_lideal_lideal_mul_reduced>
        ibz_mat_4x4_copy(&reduced[i], &ideal[i].lattice.basis);
 8006896:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 800689a:	461a      	mov	r2, r3
 800689c:	0052      	lsls	r2, r2, #1
 800689e:	441a      	add	r2, r3
 80068a0:	0193      	lsls	r3, r2, #6
 80068a2:	461a      	mov	r2, r3
 80068a4:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 80068a8:	1898      	adds	r0, r3, r2
 80068aa:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 80068ae:	23dc      	movs	r3, #220	@ 0xdc
 80068b0:	fb02 f303 	mul.w	r3, r2, r3
 80068b4:	f103 0208 	add.w	r2, r3, #8
 80068b8:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 80068bc:	4413      	add	r3, r2
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	f003 fc6e 	bl	800a1a2 <sqisign_gen_ibz_mat_4x4_copy>
        ibz_set(&adjusted_norm[i], 1);
 80068c6:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 80068ca:	461a      	mov	r2, r3
 80068cc:	0052      	lsls	r2, r2, #1
 80068ce:	441a      	add	r2, r3
 80068d0:	0093      	lsls	r3, r2, #2
 80068d2:	461a      	mov	r2, r3
 80068d4:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 80068d8:	4413      	add	r3, r2
 80068da:	2101      	movs	r1, #1
 80068dc:	4618      	mov	r0, r3
 80068de:	f016 fcc0 	bl	801d262 <sqisign_gen_ibz_set>
        ibz_mul(&adjusted_norm[i], &adjusted_norm[i], &ideal[i].lattice.denom);
 80068e2:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 80068e6:	461a      	mov	r2, r3
 80068e8:	0052      	lsls	r2, r2, #1
 80068ea:	441a      	add	r2, r3
 80068ec:	0093      	lsls	r3, r2, #2
 80068ee:	461a      	mov	r2, r3
 80068f0:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 80068f4:	1898      	adds	r0, r3, r2
 80068f6:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 80068fa:	461a      	mov	r2, r3
 80068fc:	0052      	lsls	r2, r2, #1
 80068fe:	441a      	add	r2, r3
 8006900:	0093      	lsls	r3, r2, #2
 8006902:	461a      	mov	r2, r3
 8006904:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 8006908:	1899      	adds	r1, r3, r2
 800690a:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 800690e:	23dc      	movs	r3, #220	@ 0xdc
 8006910:	fb03 f202 	mul.w	r2, r3, r2
 8006914:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8006918:	4413      	add	r3, r2
 800691a:	461a      	mov	r2, r3
 800691c:	f016 fba7 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&adjusted_norm[i], &adjusted_norm[i], &ideal[i].lattice.denom);
 8006920:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 8006924:	461a      	mov	r2, r3
 8006926:	0052      	lsls	r2, r2, #1
 8006928:	441a      	add	r2, r3
 800692a:	0093      	lsls	r3, r2, #2
 800692c:	461a      	mov	r2, r3
 800692e:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 8006932:	1898      	adds	r0, r3, r2
 8006934:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 8006938:	461a      	mov	r2, r3
 800693a:	0052      	lsls	r2, r2, #1
 800693c:	441a      	add	r2, r3
 800693e:	0093      	lsls	r3, r2, #2
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 8006946:	1899      	adds	r1, r3, r2
 8006948:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 800694c:	23dc      	movs	r3, #220	@ 0xdc
 800694e:	fb03 f202 	mul.w	r2, r3, r2
 8006952:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8006956:	4413      	add	r3, r2
 8006958:	461a      	mov	r2, r3
 800695a:	f016 fb88 	bl	801d06e <sqisign_gen_ibz_mul>
        post_LLL_basis_treatment(&gram[i], &reduced[i], &ideal[i].norm, false);
 800695e:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 8006962:	461a      	mov	r2, r3
 8006964:	0052      	lsls	r2, r2, #1
 8006966:	441a      	add	r2, r3
 8006968:	0193      	lsls	r3, r2, #6
 800696a:	461a      	mov	r2, r3
 800696c:	f8d7 3848 	ldr.w	r3, [r7, #2120]	@ 0x848
 8006970:	1898      	adds	r0, r3, r2
 8006972:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 8006976:	461a      	mov	r2, r3
 8006978:	0052      	lsls	r2, r2, #1
 800697a:	441a      	add	r2, r3
 800697c:	0193      	lsls	r3, r2, #6
 800697e:	461a      	mov	r2, r3
 8006980:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 8006984:	1899      	adds	r1, r3, r2
 8006986:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 800698a:	23dc      	movs	r3, #220	@ 0xdc
 800698c:	fb02 f303 	mul.w	r3, r2, r3
 8006990:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8006994:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8006998:	4413      	add	r3, r2
 800699a:	1d1a      	adds	r2, r3, #4
 800699c:	2300      	movs	r3, #0
 800699e:	f7fe fefc 	bl	800579a <post_LLL_basis_treatment>
    for (int i = 1; i < num_alternate_order + 1; i++) {
 80069a2:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 80069a6:	3301      	adds	r3, #1
 80069a8:	f8c7 3888 	str.w	r3, [r7, #2184]	@ 0x888
 80069ac:	e002      	b.n	80069b4 <find_uv+0x7e4>
 80069ae:	bf00      	nop
 80069b0:	0803c834 	.word	0x0803c834
 80069b4:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 80069b8:	f8d7 3888 	ldr.w	r3, [r7, #2184]	@ 0x888
 80069bc:	429a      	cmp	r2, r3
 80069be:	f6bf af47 	bge.w	8006850 <find_uv+0x680>
    }

    // enumerating small vectors

    // global parameters for the enumeration
    int m = FINDUV_box_size;
 80069c2:	2302      	movs	r3, #2
 80069c4:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
    int m4 = FINDUV_cube_size;
 80069c8:	f44f 731c 	mov.w	r3, #624	@ 0x270
 80069cc:	f8c7 3830 	str.w	r3, [r7, #2096]	@ 0x830

    ibz_vec_4_t small_vecs[num_alternate_order + 1][m4];
 80069d0:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 80069d4:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 80069d8:	1c58      	adds	r0, r3, #1
 80069da:	1e4b      	subs	r3, r1, #1
 80069dc:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80069e0:	460a      	mov	r2, r1
 80069e2:	2300      	movs	r3, #0
 80069e4:	f8c7 2200 	str.w	r2, [r7, #512]	@ 0x200
 80069e8:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80069ec:	e9d7 5680 	ldrd	r5, r6, [r7, #512]	@ 0x200
 80069f0:	462a      	mov	r2, r5
 80069f2:	4633      	mov	r3, r6
 80069f4:	1894      	adds	r4, r2, r2
 80069f6:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80069fa:	415b      	adcs	r3, r3
 80069fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a00:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8006a04:	462c      	mov	r4, r5
 8006a06:	1914      	adds	r4, r2, r4
 8006a08:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8006a0c:	4634      	mov	r4, r6
 8006a0e:	eb43 0404 	adc.w	r4, r3, r4
 8006a12:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 8006a22:	4634      	mov	r4, r6
 8006a24:	01e3      	lsls	r3, r4, #7
 8006a26:	462c      	mov	r4, r5
 8006a28:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8006a2c:	462c      	mov	r4, r5
 8006a2e:	01e2      	lsls	r2, r4, #7
 8006a30:	460a      	mov	r2, r1
 8006a32:	4613      	mov	r3, r2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4413      	add	r3, r2
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	469b      	mov	fp, r3
 8006a3c:	1e43      	subs	r3, r0, #1
 8006a3e:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8006a42:	460a      	mov	r2, r1
 8006a44:	2300      	movs	r3, #0
 8006a46:	f8c7 21f8 	str.w	r2, [r7, #504]	@ 0x1f8
 8006a4a:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8006a4e:	4602      	mov	r2, r0
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 8006a56:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8006a5a:	e9d7 567e 	ldrd	r5, r6, [r7, #504]	@ 0x1f8
 8006a5e:	4633      	mov	r3, r6
 8006a60:	e9d7 897c 	ldrd	r8, r9, [r7, #496]	@ 0x1f0
 8006a64:	4642      	mov	r2, r8
 8006a66:	fb02 f203 	mul.w	r2, r2, r3
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	462c      	mov	r4, r5
 8006a6e:	fb04 f303 	mul.w	r3, r4, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	462a      	mov	r2, r5
 8006a76:	4644      	mov	r4, r8
 8006a78:	fba2 4204 	umull	r4, r2, r2, r4
 8006a7c:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8006a80:	4622      	mov	r2, r4
 8006a82:	f8c7 22c8 	str.w	r2, [r7, #712]	@ 0x2c8
 8006a86:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8006a90:	e9d7 56b2 	ldrd	r5, r6, [r7, #712]	@ 0x2c8
 8006a94:	462a      	mov	r2, r5
 8006a96:	4633      	mov	r3, r6
 8006a98:	1894      	adds	r4, r2, r2
 8006a9a:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006aa4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8006aa8:	462c      	mov	r4, r5
 8006aaa:	1914      	adds	r4, r2, r4
 8006aac:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8006ab0:	4634      	mov	r4, r6
 8006ab2:	eb43 0404 	adc.w	r4, r3, r4
 8006ab6:	f8c7 40dc 	str.w	r4, [r7, #220]	@ 0xdc
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 5636 	ldrd	r5, r6, [r7, #216]	@ 0xd8
 8006ac6:	4634      	mov	r4, r6
 8006ac8:	01e3      	lsls	r3, r4, #7
 8006aca:	462c      	mov	r4, r5
 8006acc:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8006ad0:	462c      	mov	r4, r5
 8006ad2:	01e2      	lsls	r2, r4, #7
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f8c7 21e8 	str.w	r2, [r7, #488]	@ 0x1e8
 8006adc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f8c7 21e0 	str.w	r2, [r7, #480]	@ 0x1e0
 8006ae8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8006aec:	e9d7 567a 	ldrd	r5, r6, [r7, #488]	@ 0x1e8
 8006af0:	4633      	mov	r3, r6
 8006af2:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8006af6:	4642      	mov	r2, r8
 8006af8:	fb02 f203 	mul.w	r2, r2, r3
 8006afc:	464b      	mov	r3, r9
 8006afe:	462c      	mov	r4, r5
 8006b00:	fb04 f303 	mul.w	r3, r4, r3
 8006b04:	4413      	add	r3, r2
 8006b06:	462a      	mov	r2, r5
 8006b08:	4644      	mov	r4, r8
 8006b0a:	fba2 4204 	umull	r4, r2, r2, r4
 8006b0e:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8006b12:	4622      	mov	r2, r4
 8006b14:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 8006b18:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8006b22:	e9d7 56b0 	ldrd	r5, r6, [r7, #704]	@ 0x2c0
 8006b26:	462a      	mov	r2, r5
 8006b28:	4633      	mov	r3, r6
 8006b2a:	1894      	adds	r4, r2, r2
 8006b2c:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8006b30:	415b      	adcs	r3, r3
 8006b32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b36:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8006b3a:	462c      	mov	r4, r5
 8006b3c:	1914      	adds	r4, r2, r4
 8006b3e:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8006b42:	4634      	mov	r4, r6
 8006b44:	eb43 0404 	adc.w	r4, r3, r4
 8006b48:	f8c7 40cc 	str.w	r4, [r7, #204]	@ 0xcc
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	e9d7 5632 	ldrd	r5, r6, [r7, #200]	@ 0xc8
 8006b58:	4634      	mov	r4, r6
 8006b5a:	01e3      	lsls	r3, r4, #7
 8006b5c:	462c      	mov	r4, r5
 8006b5e:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8006b62:	462c      	mov	r4, r5
 8006b64:	01e2      	lsls	r2, r4, #7
 8006b66:	460a      	mov	r2, r1
 8006b68:	4603      	mov	r3, r0
 8006b6a:	fb03 f202 	mul.w	r2, r3, r2
 8006b6e:	4613      	mov	r3, r2
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	4413      	add	r3, r2
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	3307      	adds	r3, #7
 8006b78:	08db      	lsrs	r3, r3, #3
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	ebad 0d03 	sub.w	sp, sp, r3
 8006b80:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b82:	3303      	adds	r3, #3
 8006b84:	089b      	lsrs	r3, r3, #2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
    ibz_t small_norms[num_alternate_order + 1][m4];
 8006b8c:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 8006b90:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 8006b94:	1c58      	adds	r0, r3, #1
 8006b96:	1e4b      	subs	r3, r1, #1
 8006b98:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8006ba4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8006ba8:	e9d7 5676 	ldrd	r5, r6, [r7, #472]	@ 0x1d8
 8006bac:	462a      	mov	r2, r5
 8006bae:	4633      	mov	r3, r6
 8006bb0:	1894      	adds	r4, r2, r2
 8006bb2:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 8006bb6:	415b      	adcs	r3, r3
 8006bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bbc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8006bc0:	462c      	mov	r4, r5
 8006bc2:	1914      	adds	r4, r2, r4
 8006bc4:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8006bc8:	4634      	mov	r4, r6
 8006bca:	eb43 0404 	adc.w	r4, r3, r4
 8006bce:	f8c7 40bc 	str.w	r4, [r7, #188]	@ 0xbc
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	e9d7 562e 	ldrd	r5, r6, [r7, #184]	@ 0xb8
 8006bde:	4634      	mov	r4, r6
 8006be0:	0163      	lsls	r3, r4, #5
 8006be2:	462c      	mov	r4, r5
 8006be4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006be8:	462c      	mov	r4, r5
 8006bea:	0162      	lsls	r2, r4, #5
 8006bec:	460a      	mov	r2, r1
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4699      	mov	r9, r3
 8006bf8:	1e43      	subs	r3, r0, #1
 8006bfa:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8006bfe:	460a      	mov	r2, r1
 8006c00:	2300      	movs	r3, #0
 8006c02:	f8c7 21d0 	str.w	r2, [r7, #464]	@ 0x1d0
 8006c06:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f8c7 22b8 	str.w	r2, [r7, #696]	@ 0x2b8
 8006c12:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8006c16:	e9d7 5674 	ldrd	r5, r6, [r7, #464]	@ 0x1d0
 8006c1a:	4633      	mov	r3, r6
 8006c1c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8006c20:	fb02 f203 	mul.w	r2, r2, r3
 8006c24:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8006c28:	462c      	mov	r4, r5
 8006c2a:	fb04 f303 	mul.w	r3, r4, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	462a      	mov	r2, r5
 8006c32:	f8d7 42b8 	ldr.w	r4, [r7, #696]	@ 0x2b8
 8006c36:	fba2 4204 	umull	r4, r2, r2, r4
 8006c3a:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8006c3e:	4622      	mov	r2, r4
 8006c40:	f8c7 22b0 	str.w	r2, [r7, #688]	@ 0x2b0
 8006c44:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8006c48:	4413      	add	r3, r2
 8006c4a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8006c4e:	e9d7 56ac 	ldrd	r5, r6, [r7, #688]	@ 0x2b0
 8006c52:	462a      	mov	r2, r5
 8006c54:	4633      	mov	r3, r6
 8006c56:	1894      	adds	r4, r2, r2
 8006c58:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
 8006c5c:	415b      	adcs	r3, r3
 8006c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c62:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8006c66:	462c      	mov	r4, r5
 8006c68:	1914      	adds	r4, r2, r4
 8006c6a:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8006c6e:	4634      	mov	r4, r6
 8006c70:	eb43 0404 	adc.w	r4, r3, r4
 8006c74:	f8c7 40ac 	str.w	r4, [r7, #172]	@ 0xac
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	e9d7 562a 	ldrd	r5, r6, [r7, #168]	@ 0xa8
 8006c84:	4634      	mov	r4, r6
 8006c86:	0163      	lsls	r3, r4, #5
 8006c88:	462c      	mov	r4, r5
 8006c8a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006c8e:	462c      	mov	r4, r5
 8006c90:	0162      	lsls	r2, r4, #5
 8006c92:	460a      	mov	r2, r1
 8006c94:	2300      	movs	r3, #0
 8006c96:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 8006c9a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f8c7 22a8 	str.w	r2, [r7, #680]	@ 0x2a8
 8006ca6:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8006caa:	e9d7 5672 	ldrd	r5, r6, [r7, #456]	@ 0x1c8
 8006cae:	4633      	mov	r3, r6
 8006cb0:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8006cb4:	fb02 f203 	mul.w	r2, r2, r3
 8006cb8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8006cbc:	462c      	mov	r4, r5
 8006cbe:	fb04 f303 	mul.w	r3, r4, r3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	462a      	mov	r2, r5
 8006cc6:	f8d7 42a8 	ldr.w	r4, [r7, #680]	@ 0x2a8
 8006cca:	fba2 4204 	umull	r4, r2, r2, r4
 8006cce:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	f8c7 22a0 	str.w	r2, [r7, #672]	@ 0x2a0
 8006cd8:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8006cdc:	4413      	add	r3, r2
 8006cde:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8006ce2:	e9d7 56a8 	ldrd	r5, r6, [r7, #672]	@ 0x2a0
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	4633      	mov	r3, r6
 8006cea:	1894      	adds	r4, r2, r2
 8006cec:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8006cf0:	415b      	adcs	r3, r3
 8006cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006cf6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8006cfa:	462c      	mov	r4, r5
 8006cfc:	1914      	adds	r4, r2, r4
 8006cfe:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8006d02:	4634      	mov	r4, r6
 8006d04:	eb43 0404 	adc.w	r4, r3, r4
 8006d08:	f8c7 409c 	str.w	r4, [r7, #156]	@ 0x9c
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	e9d7 5626 	ldrd	r5, r6, [r7, #152]	@ 0x98
 8006d18:	4634      	mov	r4, r6
 8006d1a:	0163      	lsls	r3, r4, #5
 8006d1c:	462c      	mov	r4, r5
 8006d1e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006d22:	462c      	mov	r4, r5
 8006d24:	0162      	lsls	r2, r4, #5
 8006d26:	460a      	mov	r2, r1
 8006d28:	4603      	mov	r3, r0
 8006d2a:	fb03 f202 	mul.w	r2, r3, r2
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	3307      	adds	r3, #7
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8006d40:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d42:	3303      	adds	r3, #3
 8006d44:	089b      	lsrs	r3, r3, #2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
    ibz_vec_4_t alternate_small_vecs[num_alternate_order + 1][m4];
 8006d4c:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 8006d50:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 8006d54:	1c58      	adds	r0, r3, #1
 8006d56:	1e4b      	subs	r3, r1, #1
 8006d58:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 8006d5c:	460a      	mov	r2, r1
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 21c0 	str.w	r2, [r7, #448]	@ 0x1c0
 8006d64:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006d68:	e9d7 5670 	ldrd	r5, r6, [r7, #448]	@ 0x1c0
 8006d6c:	462a      	mov	r2, r5
 8006d6e:	4633      	mov	r3, r6
 8006d70:	1894      	adds	r4, r2, r2
 8006d72:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8006d76:	415b      	adcs	r3, r3
 8006d78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d7c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006d80:	462c      	mov	r4, r5
 8006d82:	1914      	adds	r4, r2, r4
 8006d84:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006d88:	4634      	mov	r4, r6
 8006d8a:	eb43 0404 	adc.w	r4, r3, r4
 8006d8e:	f8c7 408c 	str.w	r4, [r7, #140]	@ 0x8c
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	e9d7 5622 	ldrd	r5, r6, [r7, #136]	@ 0x88
 8006d9e:	4634      	mov	r4, r6
 8006da0:	01e3      	lsls	r3, r4, #7
 8006da2:	462c      	mov	r4, r5
 8006da4:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8006da8:	462c      	mov	r4, r5
 8006daa:	01e2      	lsls	r2, r4, #7
 8006dac:	460a      	mov	r2, r1
 8006dae:	4613      	mov	r3, r2
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	4413      	add	r3, r2
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8006dba:	1e43      	subs	r3, r0, #1
 8006dbc:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 8006dc0:	460a      	mov	r2, r1
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8006dc8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8006dcc:	4602      	mov	r2, r0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 8006dd4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8006dd8:	e9d7 566e 	ldrd	r5, r6, [r7, #440]	@ 0x1b8
 8006ddc:	4633      	mov	r3, r6
 8006dde:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8006de2:	fb02 f203 	mul.w	r2, r2, r3
 8006de6:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8006dea:	462c      	mov	r4, r5
 8006dec:	fb04 f303 	mul.w	r3, r4, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	462a      	mov	r2, r5
 8006df4:	f8d7 4298 	ldr.w	r4, [r7, #664]	@ 0x298
 8006df8:	fba2 4204 	umull	r4, r2, r2, r4
 8006dfc:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8006e00:	4622      	mov	r2, r4
 8006e02:	f8c7 2290 	str.w	r2, [r7, #656]	@ 0x290
 8006e06:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8006e10:	e9d7 56a4 	ldrd	r5, r6, [r7, #656]	@ 0x290
 8006e14:	462a      	mov	r2, r5
 8006e16:	4633      	mov	r3, r6
 8006e18:	1894      	adds	r4, r2, r2
 8006e1a:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8006e1e:	415b      	adcs	r3, r3
 8006e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e24:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8006e28:	462c      	mov	r4, r5
 8006e2a:	1914      	adds	r4, r2, r4
 8006e2c:	67bc      	str	r4, [r7, #120]	@ 0x78
 8006e2e:	4634      	mov	r4, r6
 8006e30:	eb43 0404 	adc.w	r4, r3, r4
 8006e34:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	e9d7 561e 	ldrd	r5, r6, [r7, #120]	@ 0x78
 8006e42:	4634      	mov	r4, r6
 8006e44:	01e3      	lsls	r3, r4, #7
 8006e46:	462c      	mov	r4, r5
 8006e48:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8006e4c:	462c      	mov	r4, r5
 8006e4e:	01e2      	lsls	r2, r4, #7
 8006e50:	460a      	mov	r2, r1
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8006e58:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f8c7 2288 	str.w	r2, [r7, #648]	@ 0x288
 8006e64:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8006e68:	e9d7 566c 	ldrd	r5, r6, [r7, #432]	@ 0x1b0
 8006e6c:	4633      	mov	r3, r6
 8006e6e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8006e72:	fb02 f203 	mul.w	r2, r2, r3
 8006e76:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8006e7a:	462c      	mov	r4, r5
 8006e7c:	fb04 f303 	mul.w	r3, r4, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	462a      	mov	r2, r5
 8006e84:	f8d7 4288 	ldr.w	r4, [r7, #648]	@ 0x288
 8006e88:	fba2 4204 	umull	r4, r2, r2, r4
 8006e8c:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8006e90:	4622      	mov	r2, r4
 8006e92:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8006e96:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8006ea0:	e9d7 56a0 	ldrd	r5, r6, [r7, #640]	@ 0x280
 8006ea4:	462a      	mov	r2, r5
 8006ea6:	4633      	mov	r3, r6
 8006ea8:	1894      	adds	r4, r2, r2
 8006eaa:	673c      	str	r4, [r7, #112]	@ 0x70
 8006eac:	415b      	adcs	r3, r3
 8006eae:	677b      	str	r3, [r7, #116]	@ 0x74
 8006eb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006eb4:	462c      	mov	r4, r5
 8006eb6:	1914      	adds	r4, r2, r4
 8006eb8:	66bc      	str	r4, [r7, #104]	@ 0x68
 8006eba:	4634      	mov	r4, r6
 8006ebc:	eb43 0404 	adc.w	r4, r3, r4
 8006ec0:	66fc      	str	r4, [r7, #108]	@ 0x6c
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	e9d7 561a 	ldrd	r5, r6, [r7, #104]	@ 0x68
 8006ece:	4634      	mov	r4, r6
 8006ed0:	01e3      	lsls	r3, r4, #7
 8006ed2:	462c      	mov	r4, r5
 8006ed4:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8006ed8:	462c      	mov	r4, r5
 8006eda:	01e2      	lsls	r2, r4, #7
 8006edc:	460a      	mov	r2, r1
 8006ede:	4603      	mov	r3, r0
 8006ee0:	fb03 f202 	mul.w	r2, r3, r2
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	4413      	add	r3, r2
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	3307      	adds	r3, #7
 8006eee:	08db      	lsrs	r3, r3, #3
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	ebad 0d03 	sub.w	sp, sp, r3
 8006ef6:	ab0c      	add	r3, sp, #48	@ 0x30
 8006ef8:	3303      	adds	r3, #3
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
    ibz_t alternate_small_norms[num_alternate_order + 1][m4];
 8006f02:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 8006f06:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 8006f0a:	1c58      	adds	r0, r3, #1
 8006f0c:	1e4b      	subs	r3, r1, #1
 8006f0e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8006f12:	460a      	mov	r2, r1
 8006f14:	2300      	movs	r3, #0
 8006f16:	f8c7 21a8 	str.w	r2, [r7, #424]	@ 0x1a8
 8006f1a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8006f1e:	e9d7 566a 	ldrd	r5, r6, [r7, #424]	@ 0x1a8
 8006f22:	462a      	mov	r2, r5
 8006f24:	4633      	mov	r3, r6
 8006f26:	1894      	adds	r4, r2, r2
 8006f28:	663c      	str	r4, [r7, #96]	@ 0x60
 8006f2a:	415b      	adcs	r3, r3
 8006f2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006f32:	462c      	mov	r4, r5
 8006f34:	1914      	adds	r4, r2, r4
 8006f36:	65bc      	str	r4, [r7, #88]	@ 0x58
 8006f38:	4634      	mov	r4, r6
 8006f3a:	eb43 0404 	adc.w	r4, r3, r4
 8006f3e:	65fc      	str	r4, [r7, #92]	@ 0x5c
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	@ 0x58
 8006f4c:	4634      	mov	r4, r6
 8006f4e:	0163      	lsls	r3, r4, #5
 8006f50:	462c      	mov	r4, r5
 8006f52:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006f56:	462c      	mov	r4, r5
 8006f58:	0162      	lsls	r2, r4, #5
 8006f5a:	460a      	mov	r2, r1
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8006f68:	1e43      	subs	r3, r0, #1
 8006f6a:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8006f6e:	460a      	mov	r2, r1
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 21a0 	str.w	r2, [r7, #416]	@ 0x1a0
 8006f76:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f8c7 2278 	str.w	r2, [r7, #632]	@ 0x278
 8006f82:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006f86:	e9d7 5668 	ldrd	r5, r6, [r7, #416]	@ 0x1a0
 8006f8a:	4633      	mov	r3, r6
 8006f8c:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8006f90:	fb02 f203 	mul.w	r2, r2, r3
 8006f94:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006f98:	462c      	mov	r4, r5
 8006f9a:	fb04 f303 	mul.w	r3, r4, r3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	f8d7 4278 	ldr.w	r4, [r7, #632]	@ 0x278
 8006fa6:	fba2 4204 	umull	r4, r2, r2, r4
 8006faa:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8006fae:	4622      	mov	r2, r4
 8006fb0:	f8c7 2270 	str.w	r2, [r7, #624]	@ 0x270
 8006fb4:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8006fb8:	4413      	add	r3, r2
 8006fba:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8006fbe:	e9d7 569c 	ldrd	r5, r6, [r7, #624]	@ 0x270
 8006fc2:	462a      	mov	r2, r5
 8006fc4:	4633      	mov	r3, r6
 8006fc6:	1894      	adds	r4, r2, r2
 8006fc8:	653c      	str	r4, [r7, #80]	@ 0x50
 8006fca:	415b      	adcs	r3, r3
 8006fcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fd2:	462c      	mov	r4, r5
 8006fd4:	1914      	adds	r4, r2, r4
 8006fd6:	64bc      	str	r4, [r7, #72]	@ 0x48
 8006fd8:	4634      	mov	r4, r6
 8006fda:	eb43 0404 	adc.w	r4, r3, r4
 8006fde:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	@ 0x48
 8006fec:	4634      	mov	r4, r6
 8006fee:	0163      	lsls	r3, r4, #5
 8006ff0:	462c      	mov	r4, r5
 8006ff2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006ff6:	462c      	mov	r4, r5
 8006ff8:	0162      	lsls	r2, r4, #5
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8007002:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8007006:	4602      	mov	r2, r0
 8007008:	2300      	movs	r3, #0
 800700a:	f8c7 2268 	str.w	r2, [r7, #616]	@ 0x268
 800700e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8007012:	e9d7 5666 	ldrd	r5, r6, [r7, #408]	@ 0x198
 8007016:	4633      	mov	r3, r6
 8007018:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800701c:	fb02 f203 	mul.w	r2, r2, r3
 8007020:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8007024:	462c      	mov	r4, r5
 8007026:	fb04 f303 	mul.w	r3, r4, r3
 800702a:	4413      	add	r3, r2
 800702c:	462a      	mov	r2, r5
 800702e:	f8d7 4268 	ldr.w	r4, [r7, #616]	@ 0x268
 8007032:	fba2 4204 	umull	r4, r2, r2, r4
 8007036:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 800703a:	4622      	mov	r2, r4
 800703c:	f8c7 2260 	str.w	r2, [r7, #608]	@ 0x260
 8007040:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8007044:	4413      	add	r3, r2
 8007046:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800704a:	e9d7 5698 	ldrd	r5, r6, [r7, #608]	@ 0x260
 800704e:	462a      	mov	r2, r5
 8007050:	4633      	mov	r3, r6
 8007052:	1894      	adds	r4, r2, r2
 8007054:	643c      	str	r4, [r7, #64]	@ 0x40
 8007056:	415b      	adcs	r3, r3
 8007058:	647b      	str	r3, [r7, #68]	@ 0x44
 800705a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800705e:	462c      	mov	r4, r5
 8007060:	1914      	adds	r4, r2, r4
 8007062:	63bc      	str	r4, [r7, #56]	@ 0x38
 8007064:	4634      	mov	r4, r6
 8007066:	eb43 0404 	adc.w	r4, r3, r4
 800706a:	63fc      	str	r4, [r7, #60]	@ 0x3c
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 8007078:	4634      	mov	r4, r6
 800707a:	0163      	lsls	r3, r4, #5
 800707c:	462c      	mov	r4, r5
 800707e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8007082:	462c      	mov	r4, r5
 8007084:	0162      	lsls	r2, r4, #5
 8007086:	460a      	mov	r2, r1
 8007088:	4603      	mov	r3, r0
 800708a:	fb03 f202 	mul.w	r2, r3, r2
 800708e:	4613      	mov	r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	3307      	adds	r3, #7
 8007098:	08db      	lsrs	r3, r3, #3
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	ebad 0d03 	sub.w	sp, sp, r3
 80070a0:	ab0c      	add	r3, sp, #48	@ 0x30
 80070a2:	3303      	adds	r3, #3
 80070a4:	089b      	lsrs	r3, r3, #2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
    ibz_t quotients[num_alternate_order + 1][m4];
 80070ac:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 80070b0:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 80070b4:	1c58      	adds	r0, r3, #1
 80070b6:	1e4b      	subs	r3, r1, #1
 80070b8:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 80070bc:	460a      	mov	r2, r1
 80070be:	2300      	movs	r3, #0
 80070c0:	f8c7 2190 	str.w	r2, [r7, #400]	@ 0x190
 80070c4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80070c8:	e9d7 5664 	ldrd	r5, r6, [r7, #400]	@ 0x190
 80070cc:	462a      	mov	r2, r5
 80070ce:	4633      	mov	r3, r6
 80070d0:	1894      	adds	r4, r2, r2
 80070d2:	633c      	str	r4, [r7, #48]	@ 0x30
 80070d4:	415b      	adcs	r3, r3
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80070dc:	462c      	mov	r4, r5
 80070de:	1914      	adds	r4, r2, r4
 80070e0:	62bc      	str	r4, [r7, #40]	@ 0x28
 80070e2:	4634      	mov	r4, r6
 80070e4:	eb43 0404 	adc.w	r4, r3, r4
 80070e8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	@ 0x28
 80070f6:	4634      	mov	r4, r6
 80070f8:	0163      	lsls	r3, r4, #5
 80070fa:	462c      	mov	r4, r5
 80070fc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8007100:	462c      	mov	r4, r5
 8007102:	0162      	lsls	r2, r4, #5
 8007104:	460a      	mov	r2, r1
 8007106:	4613      	mov	r3, r2
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	469a      	mov	sl, r3
 8007110:	1e43      	subs	r3, r0, #1
 8007112:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8007116:	460a      	mov	r2, r1
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 800711e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8007122:	4602      	mov	r2, r0
 8007124:	2300      	movs	r3, #0
 8007126:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 800712a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800712e:	e9d7 5662 	ldrd	r5, r6, [r7, #392]	@ 0x188
 8007132:	4633      	mov	r3, r6
 8007134:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8007138:	fb02 f203 	mul.w	r2, r2, r3
 800713c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8007140:	462c      	mov	r4, r5
 8007142:	fb04 f303 	mul.w	r3, r4, r3
 8007146:	4413      	add	r3, r2
 8007148:	462a      	mov	r2, r5
 800714a:	f8d7 4258 	ldr.w	r4, [r7, #600]	@ 0x258
 800714e:	fba2 4204 	umull	r4, r2, r2, r4
 8007152:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8007156:	4622      	mov	r2, r4
 8007158:	f8c7 2250 	str.w	r2, [r7, #592]	@ 0x250
 800715c:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8007160:	4413      	add	r3, r2
 8007162:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8007166:	e9d7 5694 	ldrd	r5, r6, [r7, #592]	@ 0x250
 800716a:	462a      	mov	r2, r5
 800716c:	4633      	mov	r3, r6
 800716e:	1894      	adds	r4, r2, r2
 8007170:	623c      	str	r4, [r7, #32]
 8007172:	415b      	adcs	r3, r3
 8007174:	627b      	str	r3, [r7, #36]	@ 0x24
 8007176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800717a:	462c      	mov	r4, r5
 800717c:	1914      	adds	r4, r2, r4
 800717e:	61bc      	str	r4, [r7, #24]
 8007180:	4634      	mov	r4, r6
 8007182:	eb43 0404 	adc.w	r4, r3, r4
 8007186:	61fc      	str	r4, [r7, #28]
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8007194:	4634      	mov	r4, r6
 8007196:	0163      	lsls	r3, r4, #5
 8007198:	462c      	mov	r4, r5
 800719a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800719e:	462c      	mov	r4, r5
 80071a0:	0162      	lsls	r2, r4, #5
 80071a2:	460a      	mov	r2, r1
 80071a4:	2300      	movs	r3, #0
 80071a6:	f8c7 2180 	str.w	r2, [r7, #384]	@ 0x180
 80071aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80071ae:	4602      	mov	r2, r0
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c7 2248 	str.w	r2, [r7, #584]	@ 0x248
 80071b6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80071ba:	e9d7 5660 	ldrd	r5, r6, [r7, #384]	@ 0x180
 80071be:	4633      	mov	r3, r6
 80071c0:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80071c4:	fb02 f203 	mul.w	r2, r2, r3
 80071c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80071cc:	462c      	mov	r4, r5
 80071ce:	fb04 f303 	mul.w	r3, r4, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	462a      	mov	r2, r5
 80071d6:	f8d7 4248 	ldr.w	r4, [r7, #584]	@ 0x248
 80071da:	fba2 4204 	umull	r4, r2, r2, r4
 80071de:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 80071e2:	4622      	mov	r2, r4
 80071e4:	f8c7 2240 	str.w	r2, [r7, #576]	@ 0x240
 80071e8:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80071ec:	4413      	add	r3, r2
 80071ee:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80071f2:	e9d7 5690 	ldrd	r5, r6, [r7, #576]	@ 0x240
 80071f6:	462a      	mov	r2, r5
 80071f8:	4633      	mov	r3, r6
 80071fa:	1894      	adds	r4, r2, r2
 80071fc:	613c      	str	r4, [r7, #16]
 80071fe:	415b      	adcs	r3, r3
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007206:	462c      	mov	r4, r5
 8007208:	1914      	adds	r4, r2, r4
 800720a:	60bc      	str	r4, [r7, #8]
 800720c:	4634      	mov	r4, r6
 800720e:	eb43 0404 	adc.w	r4, r3, r4
 8007212:	60fc      	str	r4, [r7, #12]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8007220:	4634      	mov	r4, r6
 8007222:	0163      	lsls	r3, r4, #5
 8007224:	462c      	mov	r4, r5
 8007226:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800722a:	462c      	mov	r4, r5
 800722c:	0162      	lsls	r2, r4, #5
 800722e:	460a      	mov	r2, r1
 8007230:	4603      	mov	r3, r0
 8007232:	fb03 f202 	mul.w	r2, r3, r2
 8007236:	4613      	mov	r3, r2
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	3307      	adds	r3, #7
 8007240:	08db      	lsrs	r3, r3, #3
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	ebad 0d03 	sub.w	sp, sp, r3
 8007248:	ab0c      	add	r3, sp, #48	@ 0x30
 800724a:	3303      	adds	r3, #3
 800724c:	089b      	lsrs	r3, r3, #2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
    int indices[num_alternate_order + 1];
 8007254:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	@ 0x8d4
 8007258:	1c59      	adds	r1, r3, #1
 800725a:	1e4b      	subs	r3, r1, #1
 800725c:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8007260:	460a      	mov	r2, r1
 8007262:	2300      	movs	r3, #0
 8007264:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8007268:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	@ 0x178
 8007278:	4628      	mov	r0, r5
 800727a:	0143      	lsls	r3, r0, #5
 800727c:	4620      	mov	r0, r4
 800727e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007282:	4620      	mov	r0, r4
 8007284:	0142      	lsls	r2, r0, #5
 8007286:	460a      	mov	r2, r1
 8007288:	2300      	movs	r3, #0
 800728a:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 800728e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800729e:	4628      	mov	r0, r5
 80072a0:	0143      	lsls	r3, r0, #5
 80072a2:	4620      	mov	r0, r4
 80072a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072a8:	4620      	mov	r0, r4
 80072aa:	0142      	lsls	r2, r0, #5
 80072ac:	460b      	mov	r3, r1
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	3307      	adds	r3, #7
 80072b2:	08db      	lsrs	r3, r3, #3
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	ebad 0d03 	sub.w	sp, sp, r3
 80072ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80072bc:	3303      	adds	r3, #3
 80072be:	089b      	lsrs	r3, r3, #2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec

    for (int j = 0; j < num_alternate_order + 1; j++) {
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 80072cc:	e20e      	b.n	80076ec <find_uv+0x151c>
        for (int i = 0; i < m4; i++) {
 80072ce:	2300      	movs	r3, #0
 80072d0:	f8c7 3880 	str.w	r3, [r7, #2176]	@ 0x880
 80072d4:	e067      	b.n	80073a6 <find_uv+0x11d6>
            ibz_init(&small_norms[j][i]);
 80072d6:	ea4f 0199 	mov.w	r1, r9, lsr #2
 80072da:	f8d7 2880 	ldr.w	r2, [r7, #2176]	@ 0x880
 80072de:	4613      	mov	r3, r2
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	4413      	add	r3, r2
 80072e4:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 80072e8:	fb01 f202 	mul.w	r2, r1, r2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 80072f4:	4413      	add	r3, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f015 fe85 	bl	801d006 <sqisign_gen_ibz_init>
            ibz_vec_4_init(&small_vecs[j][i]);
 80072fc:	ea4f 019b 	mov.w	r1, fp, lsr #2
 8007300:	f8d7 2880 	ldr.w	r2, [r7, #2176]	@ 0x880
 8007304:	4613      	mov	r3, r2
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007310:	fb01 f202 	mul.w	r2, r1, r2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 800731c:	4413      	add	r3, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f007 fd77 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
            ibz_init(&alternate_small_norms[j][i]);
 8007324:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8007328:	0899      	lsrs	r1, r3, #2
 800732a:	f8d7 2880 	ldr.w	r2, [r7, #2176]	@ 0x880
 800732e:	4613      	mov	r3, r2
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4413      	add	r3, r2
 8007334:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007338:	fb01 f202 	mul.w	r2, r1, r2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 8007344:	4413      	add	r3, r2
 8007346:	4618      	mov	r0, r3
 8007348:	f015 fe5d 	bl	801d006 <sqisign_gen_ibz_init>
            ibz_init(&quotients[j][i]);
 800734c:	ea4f 019a 	mov.w	r1, sl, lsr #2
 8007350:	f8d7 2880 	ldr.w	r2, [r7, #2176]	@ 0x880
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 800735e:	fb01 f202 	mul.w	r2, r1, r2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 800736a:	4413      	add	r3, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f015 fe4a 	bl	801d006 <sqisign_gen_ibz_init>
            ibz_vec_4_init(&alternate_small_vecs[j][i]);
 8007372:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8007376:	0899      	lsrs	r1, r3, #2
 8007378:	f8d7 2880 	ldr.w	r2, [r7, #2176]	@ 0x880
 800737c:	4613      	mov	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007388:	fb01 f202 	mul.w	r2, r1, r2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8007394:	4413      	add	r3, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f007 fd3b 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
        for (int i = 0; i < m4; i++) {
 800739c:	f8d7 3880 	ldr.w	r3, [r7, #2176]	@ 0x880
 80073a0:	3301      	adds	r3, #1
 80073a2:	f8c7 3880 	str.w	r3, [r7, #2176]	@ 0x880
 80073a6:	f8d7 2880 	ldr.w	r2, [r7, #2176]	@ 0x880
 80073aa:	f8d7 3830 	ldr.w	r3, [r7, #2096]	@ 0x830
 80073ae:	429a      	cmp	r2, r3
 80073b0:	db91      	blt.n	80072d6 <find_uv+0x1106>
        }
        // enumeration in the hypercube of norm m
        indices[j] = enumerate_hypercube(small_vecs[j], small_norms[j], m, &gram[j], &adjusted_norm[j]);
 80073b2:	ea4f 039b 	mov.w	r3, fp, lsr #2
 80073b6:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80073c4:	18d4      	adds	r4, r2, r3
 80073c6:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80073ca:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 80073d8:	18d0      	adds	r0, r2, r3
 80073da:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	019b      	lsls	r3, r3, #6
 80073e6:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 80073ea:	18d1      	adds	r1, r2, r3
 80073ec:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 80073f0:	4613      	mov	r3, r2
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 80073fc:	4413      	add	r3, r2
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	460b      	mov	r3, r1
 8007402:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 8007406:	4601      	mov	r1, r0
 8007408:	4620      	mov	r0, r4
 800740a:	f7fe fb6d 	bl	8005ae8 <enumerate_hypercube>
 800740e:	4601      	mov	r1, r0
 8007410:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8007414:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // sorting the list
        {
 800741c:	466b      	mov	r3, sp
 800741e:	461c      	mov	r4, r3
            struct vec_and_norm small_vecs_and_norms[indices[j]];
 8007420:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8007424:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800742c:	1e4b      	subs	r3, r1, #1
 800742e:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 8007432:	460a      	mov	r2, r1
 8007434:	2300      	movs	r3, #0
 8007436:	f8c7 2168 	str.w	r2, [r7, #360]	@ 0x168
 800743a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	e9d7 565a 	ldrd	r5, r6, [r7, #360]	@ 0x168
 800744a:	4630      	mov	r0, r6
 800744c:	0243      	lsls	r3, r0, #9
 800744e:	4628      	mov	r0, r5
 8007450:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8007454:	4628      	mov	r0, r5
 8007456:	0242      	lsls	r2, r0, #9
 8007458:	460a      	mov	r2, r1
 800745a:	2300      	movs	r3, #0
 800745c:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 8007460:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e9d7 5658 	ldrd	r5, r6, [r7, #352]	@ 0x160
 8007470:	4630      	mov	r0, r6
 8007472:	0243      	lsls	r3, r0, #9
 8007474:	4628      	mov	r0, r5
 8007476:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800747a:	4628      	mov	r0, r5
 800747c:	0242      	lsls	r2, r0, #9
 800747e:	460b      	mov	r3, r1
 8007480:	019b      	lsls	r3, r3, #6
 8007482:	3307      	adds	r3, #7
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	ebad 0d03 	sub.w	sp, sp, r3
 800748c:	ab0c      	add	r3, sp, #48	@ 0x30
 800748e:	3303      	adds	r3, #3
 8007490:	089b      	lsrs	r3, r3, #2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
            for (int i = 0; i < indices[j]; ++i) {
 8007498:	2300      	movs	r3, #0
 800749a:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 800749e:	e045      	b.n	800752c <find_uv+0x135c>
                memcpy(&small_vecs_and_norms[i].vec, &small_vecs[j][i], sizeof(ibz_vec_4_t));
 80074a0:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 80074a4:	019b      	lsls	r3, r3, #6
 80074a6:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 80074aa:	18d0      	adds	r0, r2, r3
 80074ac:	ea4f 019b 	mov.w	r1, fp, lsr #2
 80074b0:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 80074b4:	461a      	mov	r2, r3
 80074b6:	0052      	lsls	r2, r2, #1
 80074b8:	441a      	add	r2, r3
 80074ba:	0093      	lsls	r3, r2, #2
 80074bc:	461a      	mov	r2, r3
 80074be:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 80074c2:	fb01 f303 	mul.w	r3, r1, r3
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80074ce:	4413      	add	r3, r2
 80074d0:	2230      	movs	r2, #48	@ 0x30
 80074d2:	4619      	mov	r1, r3
 80074d4:	f02e fc63 	bl	8035d9e <memcpy>
                memcpy(&small_vecs_and_norms[i].norm, &small_norms[j][i], sizeof(ibz_t));
 80074d8:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 80074dc:	019b      	lsls	r3, r3, #6
 80074de:	3330      	adds	r3, #48	@ 0x30
 80074e0:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 80074e4:	18d0      	adds	r0, r2, r3
 80074e6:	ea4f 0199 	mov.w	r1, r9, lsr #2
 80074ea:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 80074ee:	461a      	mov	r2, r3
 80074f0:	0052      	lsls	r2, r2, #1
 80074f2:	441a      	add	r2, r3
 80074f4:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 8007504:	4413      	add	r3, r2
 8007506:	220c      	movs	r2, #12
 8007508:	4619      	mov	r1, r3
 800750a:	f02e fc48 	bl	8035d9e <memcpy>
                small_vecs_and_norms[i].idx = i;
 800750e:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 8007512:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 8007516:	019b      	lsls	r3, r3, #6
 8007518:	4413      	add	r3, r2
 800751a:	333c      	adds	r3, #60	@ 0x3c
 800751c:	f8d7 287c 	ldr.w	r2, [r7, #2172]	@ 0x87c
 8007520:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < indices[j]; ++i) {
 8007522:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 8007526:	3301      	adds	r3, #1
 8007528:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 800752c:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8007530:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	f8d7 287c 	ldr.w	r2, [r7, #2172]	@ 0x87c
 800753c:	429a      	cmp	r2, r3
 800753e:	dbaf      	blt.n	80074a0 <find_uv+0x12d0>
            }
            qsort(small_vecs_and_norms, indices[j], sizeof(*small_vecs_and_norms), compare_vec_by_norm);
 8007540:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8007544:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	4619      	mov	r1, r3
 800754e:	4b71      	ldr	r3, [pc, #452]	@ (8007714 <find_uv+0x1544>)
 8007550:	2240      	movs	r2, #64	@ 0x40
 8007552:	f8d7 07e0 	ldr.w	r0, [r7, #2016]	@ 0x7e0
 8007556:	f02d ffd6 	bl	8035506 <qsort>
            for (int i = 0; i < indices[j]; ++i) {
 800755a:	2300      	movs	r3, #0
 800755c:	f8c7 3878 	str.w	r3, [r7, #2168]	@ 0x878
 8007560:	e03a      	b.n	80075d8 <find_uv+0x1408>
                memcpy(&small_vecs[j][i], &small_vecs_and_norms[i].vec, sizeof(ibz_vec_4_t));
 8007562:	ea4f 019b 	mov.w	r1, fp, lsr #2
 8007566:	f8d7 2878 	ldr.w	r2, [r7, #2168]	@ 0x878
 800756a:	4613      	mov	r3, r2
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007576:	fb01 f202 	mul.w	r2, r1, r2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8007582:	18d0      	adds	r0, r2, r3
 8007584:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 8007588:	019b      	lsls	r3, r3, #6
 800758a:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 800758e:	4413      	add	r3, r2
 8007590:	2230      	movs	r2, #48	@ 0x30
 8007592:	4619      	mov	r1, r3
 8007594:	f02e fc03 	bl	8035d9e <memcpy>
                memcpy(&small_norms[j][i], &small_vecs_and_norms[i].norm, sizeof(ibz_t));
 8007598:	ea4f 0199 	mov.w	r1, r9, lsr #2
 800759c:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 80075a0:	461a      	mov	r2, r3
 80075a2:	0052      	lsls	r2, r2, #1
 80075a4:	441a      	add	r2, r3
 80075a6:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 80075b6:	18d0      	adds	r0, r2, r3
 80075b8:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 80075bc:	019b      	lsls	r3, r3, #6
 80075be:	3330      	adds	r3, #48	@ 0x30
 80075c0:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 80075c4:	4413      	add	r3, r2
 80075c6:	220c      	movs	r2, #12
 80075c8:	4619      	mov	r1, r3
 80075ca:	f02e fbe8 	bl	8035d9e <memcpy>
            for (int i = 0; i < indices[j]; ++i) {
 80075ce:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 80075d2:	3301      	adds	r3, #1
 80075d4:	f8c7 3878 	str.w	r3, [r7, #2168]	@ 0x878
 80075d8:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 80075dc:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	f8d7 2878 	ldr.w	r2, [r7, #2168]	@ 0x878
 80075e8:	429a      	cmp	r2, r3
 80075ea:	dbba      	blt.n	8007562 <find_uv+0x1392>
            }
#ifndef NDEBUG
            for (int i = 1; i < indices[j]; ++i)
 80075ec:	2301      	movs	r3, #1
 80075ee:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 80075f2:	e032      	b.n	800765a <find_uv+0x148a>
                assert(ibz_cmp(&small_norms[j][i - 1], &small_norms[j][i]) <= 0);
 80075f4:	ea4f 0199 	mov.w	r1, r9, lsr #2
 80075f8:	f8d7 3874 	ldr.w	r3, [r7, #2164]	@ 0x874
 80075fc:	3b01      	subs	r3, #1
 80075fe:	461a      	mov	r2, r3
 8007600:	0052      	lsls	r2, r2, #1
 8007602:	441a      	add	r2, r3
 8007604:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 8007614:	18d0      	adds	r0, r2, r3
 8007616:	ea4f 0199 	mov.w	r1, r9, lsr #2
 800761a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	@ 0x874
 800761e:	461a      	mov	r2, r3
 8007620:	0052      	lsls	r2, r2, #1
 8007622:	441a      	add	r2, r3
 8007624:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	4413      	add	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 8007634:	4413      	add	r3, r2
 8007636:	4619      	mov	r1, r3
 8007638:	f015 fdba 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	dd06      	ble.n	8007650 <find_uv+0x1480>
 8007642:	4b35      	ldr	r3, [pc, #212]	@ (8007718 <find_uv+0x1548>)
 8007644:	4a35      	ldr	r2, [pc, #212]	@ (800771c <find_uv+0x154c>)
 8007646:	f240 215f 	movw	r1, #607	@ 0x25f
 800764a:	4835      	ldr	r0, [pc, #212]	@ (8007720 <find_uv+0x1550>)
 800764c:	f02d fdf4 	bl	8035238 <__assert_func>
            for (int i = 1; i < indices[j]; ++i)
 8007650:	f8d7 3874 	ldr.w	r3, [r7, #2164]	@ 0x874
 8007654:	3301      	adds	r3, #1
 8007656:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 800765a:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 800765e:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	f8d7 2874 	ldr.w	r2, [r7, #2164]	@ 0x874
 800766a:	429a      	cmp	r2, r3
 800766c:	dbc2      	blt.n	80075f4 <find_uv+0x1424>
 800766e:	46a5      	mov	sp, r4
#endif
        }

        for (int i = 0; i < indices[j]; i++) {
 8007670:	2300      	movs	r3, #0
 8007672:	f8c7 3870 	str.w	r3, [r7, #2160]	@ 0x870
 8007676:	e02a      	b.n	80076ce <find_uv+0x14fe>
            ibz_div(&quotients[j][i], &remain, &n, &small_norms[j][i]);
 8007678:	ea4f 019a 	mov.w	r1, sl, lsr #2
 800767c:	f8d7 2870 	ldr.w	r2, [r7, #2160]	@ 0x870
 8007680:	4613      	mov	r3, r2
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	4413      	add	r3, r2
 8007686:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 800768a:	fb01 f202 	mul.w	r2, r1, r2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8007696:	18d0      	adds	r0, r2, r3
 8007698:	ea4f 0199 	mov.w	r1, r9, lsr #2
 800769c:	f8d7 3870 	ldr.w	r3, [r7, #2160]	@ 0x870
 80076a0:	461a      	mov	r2, r3
 80076a2:	0052      	lsls	r2, r2, #1
 80076a4:	441a      	add	r2, r3
 80076a6:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 80076b6:	4413      	add	r3, r2
 80076b8:	f207 72a4 	addw	r2, r7, #1956	@ 0x7a4
 80076bc:	f207 715c 	addw	r1, r7, #1884	@ 0x75c
 80076c0:	f015 fcfe 	bl	801d0c0 <sqisign_gen_ibz_div>
        for (int i = 0; i < indices[j]; i++) {
 80076c4:	f8d7 3870 	ldr.w	r3, [r7, #2160]	@ 0x870
 80076c8:	3301      	adds	r3, #1
 80076ca:	f8c7 3870 	str.w	r3, [r7, #2160]	@ 0x870
 80076ce:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 80076d2:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 80076d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076da:	f8d7 2870 	ldr.w	r2, [r7, #2160]	@ 0x870
 80076de:	429a      	cmp	r2, r3
 80076e0:	dbca      	blt.n	8007678 <find_uv+0x14a8>
    for (int j = 0; j < num_alternate_order + 1; j++) {
 80076e2:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 80076e6:	3301      	adds	r3, #1
 80076e8:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 80076ec:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 80076f0:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 80076f4:	429a      	cmp	r2, r3
 80076f6:	f6bf adea 	bge.w	80072ce <find_uv+0x10fe>
        }
    }

    int found = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
    int i1;
    int i2;
    for (int j1 = 0; j1 < num_alternate_order + 1; j1++) {
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 3868 	str.w	r3, [r7, #2152]	@ 0x868
 8007706:	e351      	b.n	8007dac <find_uv+0x1bdc>
        for (int j2 = j1; j2 < num_alternate_order + 1; j2++) {
 8007708:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 800770c:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 8007710:	e33c      	b.n	8007d8c <find_uv+0x1bbc>
 8007712:	bf00      	nop
 8007714:	0800618d 	.word	0x0800618d
 8007718:	08036e68 	.word	0x08036e68
 800771c:	08036ad8 	.word	0x08036ad8
 8007720:	08036adc 	.word	0x08036adc
            // in this case, there are some small adjustements to make
            int is_diago = (j1 == j2);
 8007724:	f8d7 2868 	ldr.w	r2, [r7, #2152]	@ 0x868
 8007728:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 800772c:	429a      	cmp	r2, r3
 800772e:	bf0c      	ite	eq
 8007730:	2301      	moveq	r3, #1
 8007732:	2300      	movne	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	f8c7 37e8 	str.w	r3, [r7, #2024]	@ 0x7e8
                                       u,
                                       v,
                                       &i1,
                                       &i2,
                                       target,
                                       small_norms[j1],
 800773a:	ea4f 0399 	mov.w	r3, r9, lsr #2
 800773e:	f8d7 2868 	ldr.w	r2, [r7, #2152]	@ 0x868
 8007742:	fb02 f303 	mul.w	r3, r2, r3
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 800774c:	18d1      	adds	r1, r2, r3
                                       small_norms[j2],
 800774e:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8007752:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 8007756:	fb02 f303 	mul.w	r3, r2, r3
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 8007760:	18d4      	adds	r4, r2, r3
                                       quotients[j2],
 8007762:	ea4f 039a 	mov.w	r3, sl, lsr #2
 8007766:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 800776a:	fb02 f303 	mul.w	r3, r2, r3
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8007774:	18d5      	adds	r5, r2, r3
            found = find_uv_from_lists(&au,
 8007776:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 800777a:	f8d7 2868 	ldr.w	r2, [r7, #2152]	@ 0x868
 800777e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8007782:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8007786:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 800778a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800778e:	f207 7874 	addw	r8, r7, #1908	@ 0x774
 8007792:	f507 6ef0 	add.w	lr, r7, #1920	@ 0x780
 8007796:	f207 7c8c 	addw	ip, r7, #1932	@ 0x78c
 800779a:	f507 60f3 	add.w	r0, r7, #1944	@ 0x798
 800779e:	2300      	movs	r3, #0
 80077a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077a2:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 80077a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80077aa:	9608      	str	r6, [sp, #32]
 80077ac:	9507      	str	r5, [sp, #28]
 80077ae:	9406      	str	r4, [sp, #24]
 80077b0:	9105      	str	r1, [sp, #20]
 80077b2:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	@ 0x8c8
 80077b6:	9304      	str	r3, [sp, #16]
 80077b8:	f207 4394 	addw	r3, r7, #1172	@ 0x494
 80077bc:	9303      	str	r3, [sp, #12]
 80077be:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80077c2:	9302      	str	r3, [sp, #8]
 80077c4:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 80077c8:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 80077d4:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4643      	mov	r3, r8
 80077de:	4672      	mov	r2, lr
 80077e0:	4661      	mov	r1, ip
 80077e2:	f7fe fb81 	bl	8005ee8 <find_uv_from_lists>
 80077e6:	f8c7 086c 	str.w	r0, [r7, #2156]	@ 0x86c
                                       indices[j2],
                                       is_diago,
                                       0);
            // }

            if (found) {
 80077ea:	f8d7 386c 	ldr.w	r3, [r7, #2156]	@ 0x86c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 82c7 	beq.w	8007d82 <find_uv+0x1bb2>
                // recording the solutions that we found
                ibz_copy(&beta1->denom, &ideal[j1].lattice.denom);
 80077f4:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 80077f8:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007802:	22dc      	movs	r2, #220	@ 0xdc
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 800780c:	4413      	add	r3, r2
 800780e:	4619      	mov	r1, r3
 8007810:	f015 fd34 	bl	801d27c <sqisign_gen_ibz_copy>
                ibz_copy(&beta2->denom, &ideal[j2].lattice.denom);
 8007814:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007818:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007822:	22dc      	movs	r2, #220	@ 0xdc
 8007824:	fb02 f303 	mul.w	r3, r2, r3
 8007828:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 800782c:	4413      	add	r3, r2
 800782e:	4619      	mov	r1, r3
 8007830:	f015 fd24 	bl	801d27c <sqisign_gen_ibz_copy>
                ibz_copy(d1, &small_norms[j1][i1]);
 8007834:	ea4f 0199 	mov.w	r1, r9, lsr #2
 8007838:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 800783c:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4613      	mov	r3, r2
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	4413      	add	r3, r2
 8007848:	f8d7 2868 	ldr.w	r2, [r7, #2152]	@ 0x868
 800784c:	fb01 f202 	mul.w	r2, r1, r2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 8007858:	4413      	add	r3, r2
 800785a:	4619      	mov	r1, r3
 800785c:	f8d7 08b8 	ldr.w	r0, [r7, #2232]	@ 0x8b8
 8007860:	f015 fd0c 	bl	801d27c <sqisign_gen_ibz_copy>
                ibz_copy(d2, &small_norms[j2][i2]);
 8007864:	ea4f 0199 	mov.w	r1, r9, lsr #2
 8007868:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 800786c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4613      	mov	r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4413      	add	r3, r2
 8007878:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 800787c:	fb01 f202 	mul.w	r2, r1, r2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 8007888:	4413      	add	r3, r2
 800788a:	4619      	mov	r1, r3
 800788c:	f8d7 08bc 	ldr.w	r0, [r7, #2236]	@ 0x8bc
 8007890:	f015 fcf4 	bl	801d27c <sqisign_gen_ibz_copy>
                ibz_mat_4x4_eval(&beta1->coord, &reduced[j1], &small_vecs[j1][i1]);
 8007894:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007898:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f103 000c 	add.w	r0, r3, #12
 80078a2:	f8d7 2868 	ldr.w	r2, [r7, #2152]	@ 0x868
 80078a6:	4613      	mov	r3, r2
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	4413      	add	r3, r2
 80078ac:	019b      	lsls	r3, r3, #6
 80078ae:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 80078b2:	18d4      	adds	r4, r2, r3
 80078b4:	ea4f 019b 	mov.w	r1, fp, lsr #2
 80078b8:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 80078bc:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	f8d7 2868 	ldr.w	r2, [r7, #2152]	@ 0x868
 80078ce:	fb01 f202 	mul.w	r2, r1, r2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80078da:	4413      	add	r3, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	4621      	mov	r1, r4
 80078e0:	f003 fbf3 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
                ibz_mat_4x4_eval(&beta2->coord, &reduced[j2], &small_vecs[j2][i2]);
 80078e4:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 80078e8:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f103 000c 	add.w	r0, r3, #12
 80078f2:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 80078f6:	4613      	mov	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	4413      	add	r3, r2
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 8007902:	18d4      	adds	r4, r2, r3
 8007904:	ea4f 019b 	mov.w	r1, fp, lsr #2
 8007908:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 800790c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4613      	mov	r3, r2
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 800791e:	fb01 f202 	mul.w	r2, r1, r2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 800792a:	4413      	add	r3, r2
 800792c:	461a      	mov	r2, r3
 800792e:	4621      	mov	r1, r4
 8007930:	f003 fbcb 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
                assert(quat_lattice_contains(NULL, &ideal[j1].lattice, beta1));
 8007934:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007938:	22dc      	movs	r2, #220	@ 0xdc
 800793a:	fb02 f303 	mul.w	r3, r2, r3
 800793e:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 8007942:	18d1      	adds	r1, r2, r3
 8007944:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007948:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	2000      	movs	r0, #0
 8007950:	f019 fcca 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <find_uv+0x1798>
 800795a:	4bb2      	ldr	r3, [pc, #712]	@ (8007c24 <find_uv+0x1a54>)
 800795c:	4ab2      	ldr	r2, [pc, #712]	@ (8007c28 <find_uv+0x1a58>)
 800795e:	f240 2189 	movw	r1, #649	@ 0x289
 8007962:	48b2      	ldr	r0, [pc, #712]	@ (8007c2c <find_uv+0x1a5c>)
 8007964:	f02d fc68 	bl	8035238 <__assert_func>
                assert(quat_lattice_contains(NULL, &ideal[j2].lattice, beta2));
 8007968:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 800796c:	22dc      	movs	r2, #220	@ 0xdc
 800796e:	fb02 f303 	mul.w	r3, r2, r3
 8007972:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 8007976:	18d1      	adds	r1, r2, r3
 8007978:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 800797c:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	2000      	movs	r0, #0
 8007984:	f019 fcb0 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <find_uv+0x17cc>
 800798e:	4ba8      	ldr	r3, [pc, #672]	@ (8007c30 <find_uv+0x1a60>)
 8007990:	4aa5      	ldr	r2, [pc, #660]	@ (8007c28 <find_uv+0x1a58>)
 8007992:	f240 218a 	movw	r1, #650	@ 0x28a
 8007996:	48a5      	ldr	r0, [pc, #660]	@ (8007c2c <find_uv+0x1a5c>)
 8007998:	f02d fc4e 	bl	8035238 <__assert_func>
                if (j1 != 0 || j2 != 0) {
 800799c:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <find_uv+0x17dc>
 80079a4:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d025      	beq.n	80079f8 <find_uv+0x1828>
                    ibz_div(&delta.denom, &remain, &delta.denom, &lideal->norm);
 80079ac:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	@ 0x8cc
 80079b0:	33cc      	adds	r3, #204	@ 0xcc
 80079b2:	f207 6244 	addw	r2, r7, #1604	@ 0x644
 80079b6:	f207 715c 	addw	r1, r7, #1884	@ 0x75c
 80079ba:	f207 6044 	addw	r0, r7, #1604	@ 0x644
 80079be:	f015 fb7f 	bl	801d0c0 <sqisign_gen_ibz_div>
                    assert(ibz_cmp(&remain, &ibz_const_zero) == 0);
 80079c2:	f207 735c 	addw	r3, r7, #1884	@ 0x75c
 80079c6:	499b      	ldr	r1, [pc, #620]	@ (8007c34 <find_uv+0x1a64>)
 80079c8:	4618      	mov	r0, r3
 80079ca:	f015 fbf1 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <find_uv+0x1812>
 80079d4:	4b98      	ldr	r3, [pc, #608]	@ (8007c38 <find_uv+0x1a68>)
 80079d6:	4a94      	ldr	r2, [pc, #592]	@ (8007c28 <find_uv+0x1a58>)
 80079d8:	f240 218d 	movw	r1, #653	@ 0x28d
 80079dc:	4893      	ldr	r0, [pc, #588]	@ (8007c2c <find_uv+0x1a5c>)
 80079de:	f02d fc2b 	bl	8035238 <__assert_func>
                    ibz_mul(&delta.denom, &delta.denom, &conj_ideal.norm);
 80079e2:	f207 439c 	addw	r3, r7, #1180	@ 0x49c
 80079e6:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80079ea:	f207 6144 	addw	r1, r7, #1604	@ 0x644
 80079ee:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 80079f2:	4618      	mov	r0, r3
 80079f4:	f015 fb3b 	bl	801d06e <sqisign_gen_ibz_mul>
                }
                if (j1 != 0) {
 80079f8:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d016      	beq.n	8007a2e <find_uv+0x185e>
                    // we send back beta1 to the original ideal
                    quat_alg_mul(beta1, &delta, beta1, Bpoo);
 8007a00:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a04:	f2a3 52b4 	subw	r2, r3, #1460	@ 0x5b4
 8007a08:	f207 6144 	addw	r1, r7, #1604	@ 0x644
 8007a0c:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a10:	f2a3 50b4 	subw	r0, r3, #1460	@ 0x5b4
 8007a14:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	6800      	ldr	r0, [r0, #0]
 8007a1c:	f7f9 fd01 	bl	8001422 <sqisign_gen_quat_alg_mul>
                    quat_alg_normalize(beta1);
 8007a20:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a24:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	f7f9 fe31 	bl	8001690 <sqisign_gen_quat_alg_normalize>
                }
                if (j2 != 0) {
 8007a2e:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <find_uv+0x1894>
                    // we send back beta2 to the original ideal
                    quat_alg_mul(beta2, &delta, beta2, Bpoo);
 8007a36:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a3a:	f5a3 62b7 	sub.w	r2, r3, #1464	@ 0x5b8
 8007a3e:	f207 6144 	addw	r1, r7, #1604	@ 0x644
 8007a42:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a46:	f5a3 60b7 	sub.w	r0, r3, #1464	@ 0x5b8
 8007a4a:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	6800      	ldr	r0, [r0, #0]
 8007a52:	f7f9 fce6 	bl	8001422 <sqisign_gen_quat_alg_mul>
                    quat_alg_normalize(beta2);
 8007a56:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a5a:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	f7f9 fe16 	bl	8001690 <sqisign_gen_quat_alg_normalize>
                }

                // if the selected element belong to an alternate order, we conjugate it
                if (j1 != 0) {
 8007a64:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <find_uv+0x18b4>
                    quat_alg_conj(beta1, beta1);
 8007a6c:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a70:	f2a3 52b4 	subw	r2, r3, #1460	@ 0x5b4
 8007a74:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a78:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	f7f9 fd87 	bl	8001592 <sqisign_gen_quat_alg_conj>
                }
                if (j2 != 0) {
 8007a84:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <find_uv+0x18d4>
                    quat_alg_conj(beta2, beta2);
 8007a8c:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a90:	f5a3 62b7 	sub.w	r2, r3, #1464	@ 0x5b8
 8007a94:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007a98:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 8007a9c:	6811      	ldr	r1, [r2, #0]
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	f7f9 fd77 	bl	8001592 <sqisign_gen_quat_alg_conj>
                }

#ifndef NDEBUG
                quat_alg_norm(&remain, &norm_d, beta1, &QUATALG_PINFTY);
 8007aa4:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007aa8:	f2a3 52b4 	subw	r2, r3, #1460	@ 0x5b4
 8007aac:	f507 61ed 	add.w	r1, r7, #1896	@ 0x768
 8007ab0:	f207 705c 	addw	r0, r7, #1884	@ 0x75c
 8007ab4:	4b61      	ldr	r3, [pc, #388]	@ (8007c3c <find_uv+0x1a6c>)
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	f7f9 fcd0 	bl	800145c <sqisign_gen_quat_alg_norm>
                assert(ibz_is_one(&norm_d));
 8007abc:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f015 fb98 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <find_uv+0x190a>
 8007acc:	4b5c      	ldr	r3, [pc, #368]	@ (8007c40 <find_uv+0x1a70>)
 8007ace:	4a56      	ldr	r2, [pc, #344]	@ (8007c28 <find_uv+0x1a58>)
 8007ad0:	f240 21a5 	movw	r1, #677	@ 0x2a5
 8007ad4:	4855      	ldr	r0, [pc, #340]	@ (8007c2c <find_uv+0x1a5c>)
 8007ad6:	f02d fbaf 	bl	8035238 <__assert_func>
                ibz_mul(&n, d1, &ideal->norm);
 8007ada:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8007ade:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8007ae2:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8007ae6:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	@ 0x8b8
 8007aea:	4618      	mov	r0, r3
 8007aec:	f015 fabf 	bl	801d06e <sqisign_gen_ibz_mul>
                if (j1 > 0) {
 8007af0:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd0f      	ble.n	8007b18 <find_uv+0x1948>
                    ibz_mul(&n, &n, &ALTERNATE_CONNECTING_IDEALS[j1 - 1].norm);
 8007af8:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007afc:	22dc      	movs	r2, #220	@ 0xdc
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	4a50      	ldr	r2, [pc, #320]	@ (8007c44 <find_uv+0x1a74>)
 8007b04:	4413      	add	r3, r2
 8007b06:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8007b0a:	f207 71a4 	addw	r1, r7, #1956	@ 0x7a4
 8007b0e:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f015 faab 	bl	801d06e <sqisign_gen_ibz_mul>
                }
                assert(ibz_cmp(&n, &remain) == 0);
 8007b18:	f207 725c 	addw	r2, r7, #1884	@ 0x75c
 8007b1c:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f015 fb44 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <find_uv+0x196c>
 8007b2e:	4b46      	ldr	r3, [pc, #280]	@ (8007c48 <find_uv+0x1a78>)
 8007b30:	4a3d      	ldr	r2, [pc, #244]	@ (8007c28 <find_uv+0x1a58>)
 8007b32:	f240 21aa 	movw	r1, #682	@ 0x2aa
 8007b36:	483d      	ldr	r0, [pc, #244]	@ (8007c2c <find_uv+0x1a5c>)
 8007b38:	f02d fb7e 	bl	8035238 <__assert_func>
                quat_alg_norm(&remain, &norm_d, beta2, &QUATALG_PINFTY);
 8007b3c:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007b40:	f5a3 62b7 	sub.w	r2, r3, #1464	@ 0x5b8
 8007b44:	f507 61ed 	add.w	r1, r7, #1896	@ 0x768
 8007b48:	f207 705c 	addw	r0, r7, #1884	@ 0x75c
 8007b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c3c <find_uv+0x1a6c>)
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	f7f9 fc84 	bl	800145c <sqisign_gen_quat_alg_norm>
                assert(ibz_is_one(&norm_d));
 8007b54:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f015 fb4c 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d106      	bne.n	8007b72 <find_uv+0x19a2>
 8007b64:	4b36      	ldr	r3, [pc, #216]	@ (8007c40 <find_uv+0x1a70>)
 8007b66:	4a30      	ldr	r2, [pc, #192]	@ (8007c28 <find_uv+0x1a58>)
 8007b68:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8007b6c:	482f      	ldr	r0, [pc, #188]	@ (8007c2c <find_uv+0x1a5c>)
 8007b6e:	f02d fb63 	bl	8035238 <__assert_func>
                ibz_mul(&n, d2, &ideal->norm);
 8007b72:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8007b76:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8007b7a:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8007b7e:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	@ 0x8bc
 8007b82:	4618      	mov	r0, r3
 8007b84:	f015 fa73 	bl	801d06e <sqisign_gen_ibz_mul>
                if (j2 > 0) {
 8007b88:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd0f      	ble.n	8007bb0 <find_uv+0x19e0>
                    ibz_mul(&n, &n, &ALTERNATE_CONNECTING_IDEALS[j2 - 1].norm);
 8007b90:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007b94:	22dc      	movs	r2, #220	@ 0xdc
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8007c44 <find_uv+0x1a74>)
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8007ba2:	f207 71a4 	addw	r1, r7, #1956	@ 0x7a4
 8007ba6:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8007baa:	4618      	mov	r0, r3
 8007bac:	f015 fa5f 	bl	801d06e <sqisign_gen_ibz_mul>
                }
                assert(ibz_cmp(&n, &remain) == 0);
 8007bb0:	f207 725c 	addw	r2, r7, #1884	@ 0x75c
 8007bb4:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f015 faf8 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d006      	beq.n	8007bd4 <find_uv+0x1a04>
 8007bc6:	4b20      	ldr	r3, [pc, #128]	@ (8007c48 <find_uv+0x1a78>)
 8007bc8:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <find_uv+0x1a58>)
 8007bca:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8007bce:	4817      	ldr	r0, [pc, #92]	@ (8007c2c <find_uv+0x1a5c>)
 8007bd0:	f02d fb32 	bl	8035238 <__assert_func>
                assert(quat_lattice_contains(NULL, &ideal->lattice, beta1));
 8007bd4:	f8d7 1838 	ldr.w	r1, [r7, #2104]	@ 0x838
 8007bd8:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007bdc:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	2000      	movs	r0, #0
 8007be4:	f019 fb80 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <find_uv+0x1a2c>
 8007bee:	4b17      	ldr	r3, [pc, #92]	@ (8007c4c <find_uv+0x1a7c>)
 8007bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8007c28 <find_uv+0x1a58>)
 8007bf2:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8007bf6:	480d      	ldr	r0, [pc, #52]	@ (8007c2c <find_uv+0x1a5c>)
 8007bf8:	f02d fb1e 	bl	8035238 <__assert_func>
                assert(quat_lattice_contains(NULL, &ideal->lattice, beta2));
 8007bfc:	f8d7 1838 	ldr.w	r1, [r7, #2104]	@ 0x838
 8007c00:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007c04:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	f019 fb6c 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d11e      	bne.n	8007c54 <find_uv+0x1a84>
 8007c16:	4b0e      	ldr	r3, [pc, #56]	@ (8007c50 <find_uv+0x1a80>)
 8007c18:	4a03      	ldr	r2, [pc, #12]	@ (8007c28 <find_uv+0x1a58>)
 8007c1a:	f240 21b3 	movw	r1, #691	@ 0x2b3
 8007c1e:	4803      	ldr	r0, [pc, #12]	@ (8007c2c <find_uv+0x1a5c>)
 8007c20:	f02d fb0a 	bl	8035238 <__assert_func>
 8007c24:	08036ea4 	.word	0x08036ea4
 8007c28:	08036ad8 	.word	0x08036ad8
 8007c2c:	08036adc 	.word	0x08036adc
 8007c30:	08036edc 	.word	0x08036edc
 8007c34:	0803b8f4 	.word	0x0803b8f4
 8007c38:	08036e40 	.word	0x08036e40
 8007c3c:	0803bf30 	.word	0x0803bf30
 8007c40:	08036f14 	.word	0x08036f14
 8007c44:	0803c834 	.word	0x0803c834
 8007c48:	08036f28 	.word	0x08036f28
 8007c4c:	08036f44 	.word	0x08036f44
 8007c50:	08036f78 	.word	0x08036f78

                quat_left_ideal_t ideal_test;
                quat_lattice_t ro;
                quat_left_ideal_init(&ideal_test);
 8007c54:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f007 f9e9 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
                quat_lattice_init(&ro);
 8007c5e:	f507 733b 	add.w	r3, r7, #748	@ 0x2ec
 8007c62:	4618      	mov	r0, r3
 8007c64:	f007 f9bd 	bl	800efe2 <sqisign_gen_quat_lattice_init>
                if (j1 > 0) {
 8007c68:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dd37      	ble.n	8007ce0 <find_uv+0x1b10>
                    quat_lideal_copy(&ideal_test, &ALTERNATE_CONNECTING_IDEALS[j1 - 1]);
 8007c70:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007c74:	22dc      	movs	r2, #220	@ 0xdc
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	4ad3      	ldr	r2, [pc, #844]	@ (8007fc8 <find_uv+0x1df8>)
 8007c7c:	441a      	add	r2, r3
 8007c7e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f014 fbf0 	bl	801c46a <sqisign_gen_quat_lideal_copy>
                    quat_lideal_conjugate_without_hnf(&ideal_test, &ro, &ideal_test, Bpoo);
 8007c8a:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 8007c8e:	f507 713b 	add.w	r1, r7, #748	@ 0x2ec
 8007c92:	f507 706e 	add.w	r0, r7, #952	@ 0x3b8
 8007c96:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 8007c9a:	f015 f879 	bl	801cd90 <sqisign_gen_quat_lideal_conjugate_without_hnf>
                    quat_lideal_lideal_mul_reduced(&ideal_test, &gram[0], &ideal_test, ideal, Bpoo);
 8007c9e:	f8d7 1848 	ldr.w	r1, [r7, #2120]	@ 0x848
 8007ca2:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 8007ca6:	f507 706e 	add.w	r0, r7, #952	@ 0x3b8
 8007caa:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8007cb4:	f019 fe70 	bl	8021998 <sqisign_gen_quat_lideal_lideal_mul_reduced>
                    assert(quat_lattice_contains(NULL, &ideal_test.lattice, beta1));
 8007cb8:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007cbc:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 8007cc0:	f507 716e 	add.w	r1, r7, #952	@ 0x3b8
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f019 fb0e 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <find_uv+0x1b10>
 8007cd2:	4bbe      	ldr	r3, [pc, #760]	@ (8007fcc <find_uv+0x1dfc>)
 8007cd4:	4abe      	ldr	r2, [pc, #760]	@ (8007fd0 <find_uv+0x1e00>)
 8007cd6:	f240 21bd 	movw	r1, #701	@ 0x2bd
 8007cda:	48be      	ldr	r0, [pc, #760]	@ (8007fd4 <find_uv+0x1e04>)
 8007cdc:	f02d faac 	bl	8035238 <__assert_func>
                }
                if (j2 > 0) {
 8007ce0:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dd37      	ble.n	8007d58 <find_uv+0x1b88>
                    quat_lideal_copy(&ideal_test, &ALTERNATE_CONNECTING_IDEALS[j2 - 1]);
 8007ce8:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007cec:	22dc      	movs	r2, #220	@ 0xdc
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	4ab5      	ldr	r2, [pc, #724]	@ (8007fc8 <find_uv+0x1df8>)
 8007cf4:	441a      	add	r2, r3
 8007cf6:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f014 fbb4 	bl	801c46a <sqisign_gen_quat_lideal_copy>
                    quat_lideal_conjugate_without_hnf(&ideal_test, &ro, &ideal_test, Bpoo);
 8007d02:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 8007d06:	f507 713b 	add.w	r1, r7, #748	@ 0x2ec
 8007d0a:	f507 706e 	add.w	r0, r7, #952	@ 0x3b8
 8007d0e:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 8007d12:	f015 f83d 	bl	801cd90 <sqisign_gen_quat_lideal_conjugate_without_hnf>
                    quat_lideal_lideal_mul_reduced(&ideal_test, &gram[0], &ideal_test, ideal, Bpoo);
 8007d16:	f8d7 1848 	ldr.w	r1, [r7, #2120]	@ 0x848
 8007d1a:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 8007d1e:	f507 706e 	add.w	r0, r7, #952	@ 0x3b8
 8007d22:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	@ 0x8d0
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8007d2c:	f019 fe34 	bl	8021998 <sqisign_gen_quat_lideal_lideal_mul_reduced>
                    assert(quat_lattice_contains(NULL, &ideal_test.lattice, beta2));
 8007d30:	f507 6309 	add.w	r3, r7, #2192	@ 0x890
 8007d34:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 8007d38:	f507 716e 	add.w	r1, r7, #952	@ 0x3b8
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f019 fad2 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <find_uv+0x1b88>
 8007d4a:	4ba3      	ldr	r3, [pc, #652]	@ (8007fd8 <find_uv+0x1e08>)
 8007d4c:	4aa0      	ldr	r2, [pc, #640]	@ (8007fd0 <find_uv+0x1e00>)
 8007d4e:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8007d52:	48a0      	ldr	r0, [pc, #640]	@ (8007fd4 <find_uv+0x1e04>)
 8007d54:	f02d fa70 	bl	8035238 <__assert_func>
                }

                quat_lattice_finalize(&ro);
 8007d58:	f507 733b 	add.w	r3, r7, #748	@ 0x2ec
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f007 f956 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
                quat_left_ideal_finalize(&ideal_test);
 8007d62:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f007 f977 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
#endif

                *index_alternate_order_1 = j1;
 8007d6c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	@ 0x8c0
 8007d70:	f8d7 2868 	ldr.w	r2, [r7, #2152]	@ 0x868
 8007d74:	601a      	str	r2, [r3, #0]
                *index_alternate_order_2 = j2;
 8007d76:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	@ 0x8c4
 8007d7a:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 8007d7e:	601a      	str	r2, [r3, #0]
                break;
 8007d80:	e00b      	b.n	8007d9a <find_uv+0x1bca>
        for (int j2 = j1; j2 < num_alternate_order + 1; j2++) {
 8007d82:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007d86:	3301      	adds	r3, #1
 8007d88:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 8007d8c:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 8007d90:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8007d94:	429a      	cmp	r2, r3
 8007d96:	f6bf acc5 	bge.w	8007724 <find_uv+0x1554>
            }
        }
        if (found) {
 8007d9a:	f8d7 386c 	ldr.w	r3, [r7, #2156]	@ 0x86c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10c      	bne.n	8007dbc <find_uv+0x1bec>
    for (int j1 = 0; j1 < num_alternate_order + 1; j1++) {
 8007da2:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007da6:	3301      	adds	r3, #1
 8007da8:	f8c7 3868 	str.w	r3, [r7, #2152]	@ 0x868
 8007dac:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 8007db0:	f8d7 3868 	ldr.w	r3, [r7, #2152]	@ 0x868
 8007db4:	429a      	cmp	r2, r3
 8007db6:	f6bf aca7 	bge.w	8007708 <find_uv+0x1538>
 8007dba:	e000      	b.n	8007dbe <find_uv+0x1bee>
            break;
 8007dbc:	bf00      	nop
        }
    }

    for (int j = 0; j < num_alternate_order + 1; j++) {
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f8c7 3860 	str.w	r3, [r7, #2144]	@ 0x860
 8007dc4:	e076      	b.n	8007eb4 <find_uv+0x1ce4>
        for (int i = 0; i < m4; i++) {
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
 8007dcc:	e067      	b.n	8007e9e <find_uv+0x1cce>
            ibz_finalize(&small_norms[j][i]);
 8007dce:	ea4f 0199 	mov.w	r1, r9, lsr #2
 8007dd2:	f8d7 285c 	ldr.w	r2, [r7, #2140]	@ 0x85c
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	4413      	add	r3, r2
 8007ddc:	f8d7 2860 	ldr.w	r2, [r7, #2144]	@ 0x860
 8007de0:	fb01 f202 	mul.w	r2, r1, r2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 8007dec:	4413      	add	r3, r2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f015 f914 	bl	801d01c <sqisign_gen_ibz_finalize>
            ibz_vec_4_finalize(&small_vecs[j][i]);
 8007df4:	ea4f 019b 	mov.w	r1, fp, lsr #2
 8007df8:	f8d7 285c 	ldr.w	r2, [r7, #2140]	@ 0x85c
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	f8d7 2860 	ldr.w	r2, [r7, #2144]	@ 0x860
 8007e08:	fb01 f202 	mul.w	r2, r1, r2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8007e14:	4413      	add	r3, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f007 f817 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
            ibz_finalize(&alternate_small_norms[j][i]);
 8007e1c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8007e20:	0899      	lsrs	r1, r3, #2
 8007e22:	f8d7 285c 	ldr.w	r2, [r7, #2140]	@ 0x85c
 8007e26:	4613      	mov	r3, r2
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f8d7 2860 	ldr.w	r2, [r7, #2144]	@ 0x860
 8007e30:	fb01 f202 	mul.w	r2, r1, r2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 8007e3c:	4413      	add	r3, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f015 f8ec 	bl	801d01c <sqisign_gen_ibz_finalize>
            ibz_finalize(&quotients[j][i]);
 8007e44:	ea4f 019a 	mov.w	r1, sl, lsr #2
 8007e48:	f8d7 285c 	ldr.w	r2, [r7, #2140]	@ 0x85c
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	4413      	add	r3, r2
 8007e52:	f8d7 2860 	ldr.w	r2, [r7, #2144]	@ 0x860
 8007e56:	fb01 f202 	mul.w	r2, r1, r2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8007e62:	4413      	add	r3, r2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f015 f8d9 	bl	801d01c <sqisign_gen_ibz_finalize>
            ibz_vec_4_finalize(&alternate_small_vecs[j][i]);
 8007e6a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8007e6e:	0899      	lsrs	r1, r3, #2
 8007e70:	f8d7 285c 	ldr.w	r2, [r7, #2140]	@ 0x85c
 8007e74:	4613      	mov	r3, r2
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	f8d7 2860 	ldr.w	r2, [r7, #2144]	@ 0x860
 8007e80:	fb01 f202 	mul.w	r2, r1, r2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8007e8c:	4413      	add	r3, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f006 ffdb 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
        for (int i = 0; i < m4; i++) {
 8007e94:	f8d7 385c 	ldr.w	r3, [r7, #2140]	@ 0x85c
 8007e98:	3301      	adds	r3, #1
 8007e9a:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
 8007e9e:	f8d7 285c 	ldr.w	r2, [r7, #2140]	@ 0x85c
 8007ea2:	f8d7 3830 	ldr.w	r3, [r7, #2096]	@ 0x830
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	db91      	blt.n	8007dce <find_uv+0x1bfe>
    for (int j = 0; j < num_alternate_order + 1; j++) {
 8007eaa:	f8d7 3860 	ldr.w	r3, [r7, #2144]	@ 0x860
 8007eae:	3301      	adds	r3, #1
 8007eb0:	f8c7 3860 	str.w	r3, [r7, #2144]	@ 0x860
 8007eb4:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 8007eb8:	f8d7 3860 	ldr.w	r3, [r7, #2144]	@ 0x860
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	da82      	bge.n	8007dc6 <find_uv+0x1bf6>
        }
    }

    // var finalize
    for (int i = 0; i < num_alternate_order + 1; i++) {
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f8c7 3858 	str.w	r3, [r7, #2136]	@ 0x858
 8007ec6:	e033      	b.n	8007f30 <find_uv+0x1d60>
        ibz_mat_4x4_finalize(&gram[i]);
 8007ec8:	f8d7 2858 	ldr.w	r2, [r7, #2136]	@ 0x858
 8007ecc:	4613      	mov	r3, r2
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	4413      	add	r3, r2
 8007ed2:	019b      	lsls	r3, r3, #6
 8007ed4:	f8d7 2848 	ldr.w	r2, [r7, #2120]	@ 0x848
 8007ed8:	4413      	add	r3, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f007 f855 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
        ibz_mat_4x4_finalize(&reduced[i]);
 8007ee0:	f8d7 2858 	ldr.w	r2, [r7, #2136]	@ 0x858
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	019b      	lsls	r3, r3, #6
 8007eec:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 8007ef0:	4413      	add	r3, r2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f007 f849 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
        quat_left_ideal_finalize(&ideal[i]);
 8007ef8:	f8d7 3858 	ldr.w	r3, [r7, #2136]	@ 0x858
 8007efc:	22dc      	movs	r2, #220	@ 0xdc
 8007efe:	fb02 f303 	mul.w	r3, r2, r3
 8007f02:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 8007f06:	4413      	add	r3, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f007 f8a6 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
        ibz_finalize(&adjusted_norm[i]);
 8007f0e:	f8d7 2858 	ldr.w	r2, [r7, #2136]	@ 0x858
 8007f12:	4613      	mov	r3, r2
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	f8d7 2850 	ldr.w	r2, [r7, #2128]	@ 0x850
 8007f1e:	4413      	add	r3, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f015 f87b 	bl	801d01c <sqisign_gen_ibz_finalize>
    for (int i = 0; i < num_alternate_order + 1; i++) {
 8007f26:	f8d7 3858 	ldr.w	r3, [r7, #2136]	@ 0x858
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f8c7 3858 	str.w	r3, [r7, #2136]	@ 0x858
 8007f30:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 8007f34:	f8d7 3858 	ldr.w	r3, [r7, #2136]	@ 0x858
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	dac5      	bge.n	8007ec8 <find_uv+0x1cf8>
    }

    ibz_finalize(&n);
 8007f3c:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 8007f40:	4618      	mov	r0, r3
 8007f42:	f015 f86b 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&vec);
 8007f46:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f006 ff7d 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_finalize(&au);
 8007f50:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8007f54:	4618      	mov	r0, r3
 8007f56:	f015 f861 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&bu);
 8007f5a:	f207 738c 	addw	r3, r7, #1932	@ 0x78c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f015 f85c 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&av);
 8007f64:	f507 63f0 	add.w	r3, r7, #1920	@ 0x780
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f015 f857 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&bv);
 8007f6e:	f207 7374 	addw	r3, r7, #1908	@ 0x774
 8007f72:	4618      	mov	r0, r3
 8007f74:	f015 f852 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&remain);
 8007f78:	f207 735c 	addw	r3, r7, #1884	@ 0x75c
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f015 f84d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm_d);
 8007f82:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8007f86:	4618      	mov	r0, r3
 8007f88:	f015 f848 	bl	801d01c <sqisign_gen_ibz_finalize>
    quat_lattice_finalize(&right_order);
 8007f8c:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 8007f90:	4618      	mov	r0, r3
 8007f92:	f007 f83c 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
    quat_left_ideal_finalize(&conj_ideal);
 8007f96:	f207 439c 	addw	r3, r7, #1180	@ 0x49c
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f007 f85d 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
    quat_left_ideal_finalize(&reduced_id);
 8007fa0:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f007 f858 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
    quat_alg_elem_finalize(&delta);
 8007faa:	f207 6344 	addw	r3, r7, #1604	@ 0x644
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f006 fefc 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>

    return found;
 8007fb4:	f8d7 386c 	ldr.w	r3, [r7, #2156]	@ 0x86c
 8007fb8:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f607 0794 	addw	r7, r7, #2196	@ 0x894
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc8:	0803c834 	.word	0x0803c834
 8007fcc:	08036fac 	.word	0x08036fac
 8007fd0:	08036ad8 	.word	0x08036ad8
 8007fd4:	08036adc 	.word	0x08036adc
 8007fd8:	08036fe4 	.word	0x08036fe4

08007fdc <dim2id2iso_ideal_to_isogeny_clapotis>:
                                     ibz_t *d2,
                                     ec_curve_t *codomain,
                                     ec_basis_t *basis,
                                     const quat_left_ideal_t *lideal,
                                     const quat_alg_t *Bpoo)
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	f5ad 5d37 	sub.w	sp, sp, #11712	@ 0x2dc0
 8007fe2:	b08d      	sub	sp, #52	@ 0x34
 8007fe4:	af08      	add	r7, sp, #32
 8007fe6:	f507 645d 	add.w	r4, r7, #3536	@ 0xdd0
 8007fea:	f6a4 54c4 	subw	r4, r4, #3524	@ 0xdc4
 8007fee:	6020      	str	r0, [r4, #0]
 8007ff0:	f507 605d 	add.w	r0, r7, #3536	@ 0xdd0
 8007ff4:	f6a0 50c8 	subw	r0, r0, #3528	@ 0xdc8
 8007ff8:	6001      	str	r1, [r0, #0]
 8007ffa:	f507 615d 	add.w	r1, r7, #3536	@ 0xdd0
 8007ffe:	f6a1 51cc 	subw	r1, r1, #3532	@ 0xdcc
 8008002:	600a      	str	r2, [r1, #0]
 8008004:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 8008008:	f5a2 625d 	sub.w	r2, r2, #3536	@ 0xdd0
 800800c:	6013      	str	r3, [r2, #0]
    ibz_t target, tmp, two_pow;
    ;
    quat_alg_elem_t theta;

    ibz_t norm_d;
    ibz_init(&norm_d);
 800800e:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008012:	f103 0304 	add.w	r3, r3, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f014 fff5 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_t test1, test2;
    ibz_init(&test1);
 800801c:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008020:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8008024:	4618      	mov	r0, r3
 8008026:	f014 ffee 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&test2);
 800802a:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800802e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8008032:	4618      	mov	r0, r3
 8008034:	f014 ffe7 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_init(&target);
 8008038:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 800803c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008040:	4618      	mov	r0, r3
 8008042:	f014 ffe0 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&tmp);
 8008046:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 800804a:	f103 0318 	add.w	r3, r3, #24
 800804e:	4618      	mov	r0, r3
 8008050:	f014 ffd9 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&two_pow);
 8008054:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008058:	f103 030c 	add.w	r3, r3, #12
 800805c:	4618      	mov	r0, r3
 800805e:	f014 ffd2 	bl	801d006 <sqisign_gen_ibz_init>
    int exp = TORSION_EVEN_POWER;
 8008062:	23f8      	movs	r3, #248	@ 0xf8
 8008064:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 8008068:	f102 0208 	add.w	r2, r2, #8
 800806c:	6013      	str	r3, [r2, #0]
    quat_alg_elem_init(&theta);
 800806e:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008072:	f103 0310 	add.w	r3, r3, #16
 8008076:	4618      	mov	r0, r3
 8008078:	f006 fe82 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    // first, we find u,v,d1,d2,beta1,beta2
    // such that u*d1 + v*d2 = 2^TORSION_EVEN_POWER and there are ideals of
    // norm d1,d2 equivalent to ideal beta1 and beta2 are elements of norm nd1,
    // nd2 where n=n(lideal)
    int ret;
    int index_order1 = 0, index_order2 = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	f507 5234 	add.w	r2, r7, #11520	@ 0x2d00
 8008082:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	2300      	movs	r3, #0
 800808a:	f507 5234 	add.w	r2, r7, #11520	@ 0x2d00
 800808e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8008092:	6013      	str	r3, [r2, #0]
#ifndef NDEBUG
    unsigned int Fu_length, Fv_length;
#endif
    ret = find_uv(u,
 8008094:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008098:	f6a3 53c8 	subw	r3, r3, #3528	@ 0xdc8
 800809c:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 80080a0:	f6a2 52c4 	subw	r2, r2, #3524	@ 0xdc4
 80080a4:	f507 615d 	add.w	r1, r7, #3536	@ 0xdd0
 80080a8:	f5a1 615d 	sub.w	r1, r1, #3536	@ 0xdd0
 80080ac:	f507 605d 	add.w	r0, r7, #3536	@ 0xdd0
 80080b0:	f6a0 50cc 	subw	r0, r0, #3532	@ 0xdcc
 80080b4:	2406      	movs	r4, #6
 80080b6:	9407      	str	r4, [sp, #28]
 80080b8:	f507 5437 	add.w	r4, r7, #11712	@ 0x2dc0
 80080bc:	f104 0434 	add.w	r4, r4, #52	@ 0x34
 80080c0:	6824      	ldr	r4, [r4, #0]
 80080c2:	9406      	str	r4, [sp, #24]
 80080c4:	f507 5437 	add.w	r4, r7, #11712	@ 0x2dc0
 80080c8:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 80080cc:	6824      	ldr	r4, [r4, #0]
 80080ce:	9405      	str	r4, [sp, #20]
 80080d0:	4c9b      	ldr	r4, [pc, #620]	@ (8008340 <dim2id2iso_ideal_to_isogeny_clapotis+0x364>)
 80080d2:	9404      	str	r4, [sp, #16]
 80080d4:	f507 5434 	add.w	r4, r7, #11520	@ 0x2d00
 80080d8:	f104 0424 	add.w	r4, r4, #36	@ 0x24
 80080dc:	9403      	str	r4, [sp, #12]
 80080de:	f507 5434 	add.w	r4, r7, #11520	@ 0x2d00
 80080e2:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 80080e6:	9402      	str	r4, [sp, #8]
 80080e8:	f507 5437 	add.w	r4, r7, #11712	@ 0x2dc0
 80080ec:	f104 0424 	add.w	r4, r4, #36	@ 0x24
 80080f0:	6824      	ldr	r4, [r4, #0]
 80080f2:	9401      	str	r4, [sp, #4]
 80080f4:	f507 5437 	add.w	r4, r7, #11712	@ 0x2dc0
 80080f8:	f104 0420 	add.w	r4, r4, #32
 80080fc:	6824      	ldr	r4, [r4, #0]
 80080fe:	9400      	str	r4, [sp, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	6809      	ldr	r1, [r1, #0]
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	f7fe f862 	bl	80061d0 <find_uv>
 800810c:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008110:	f103 030c 	add.w	r3, r3, #12
 8008114:	6018      	str	r0, [r3, #0]
                  &index_order2,
                  &TORSION_PLUS_2POWER,
                  lideal,
                  Bpoo,
                  NUM_ALTERNATE_EXTREMAL_ORDERS);
    if (!ret) {
 8008116:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800811a:	f103 030c 	add.w	r3, r3, #12
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f001 84e7 	beq.w	8009af4 <dim2id2iso_ideal_to_isogeny_clapotis+0x1b18>
        goto cleanup;
    }

    assert(ibz_is_odd(d1) && ibz_is_odd(d2));
 8008126:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800812a:	f103 0320 	add.w	r3, r3, #32
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	f015 f889 	bl	801d246 <sqisign_gen_ibz_is_odd>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <dim2id2iso_ideal_to_isogeny_clapotis+0x172>
 800813a:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800813e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008142:	6818      	ldr	r0, [r3, #0]
 8008144:	f015 f87f 	bl	801d246 <sqisign_gen_ibz_is_odd>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <dim2id2iso_ideal_to_isogeny_clapotis+0x180>
 800814e:	4b7d      	ldr	r3, [pc, #500]	@ (8008344 <dim2id2iso_ideal_to_isogeny_clapotis+0x368>)
 8008150:	4a7d      	ldr	r2, [pc, #500]	@ (8008348 <dim2id2iso_ideal_to_isogeny_clapotis+0x36c>)
 8008152:	f240 312b 	movw	r1, #811	@ 0x32b
 8008156:	487d      	ldr	r0, [pc, #500]	@ (800834c <dim2id2iso_ideal_to_isogeny_clapotis+0x370>)
 8008158:	f02d f86e 	bl	8035238 <__assert_func>
    // compute the valuation of the GCD of u,v
    ibz_gcd(&tmp, u, v);
 800815c:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008160:	f5a3 625d 	sub.w	r2, r3, #3536	@ 0xdd0
 8008164:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008168:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 800816c:	f507 5036 	add.w	r0, r7, #11648	@ 0x2d80
 8008170:	f100 0018 	add.w	r0, r0, #24
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	6819      	ldr	r1, [r3, #0]
 8008178:	f015 fa3a 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    assert(ibz_cmp(&tmp, &ibz_const_zero) != 0);
 800817c:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008180:	f103 0318 	add.w	r3, r3, #24
 8008184:	4972      	ldr	r1, [pc, #456]	@ (8008350 <dim2id2iso_ideal_to_isogeny_clapotis+0x374>)
 8008186:	4618      	mov	r0, r3
 8008188:	f015 f812 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <dim2id2iso_ideal_to_isogeny_clapotis+0x1c4>
 8008192:	4b70      	ldr	r3, [pc, #448]	@ (8008354 <dim2id2iso_ideal_to_isogeny_clapotis+0x378>)
 8008194:	4a6c      	ldr	r2, [pc, #432]	@ (8008348 <dim2id2iso_ideal_to_isogeny_clapotis+0x36c>)
 8008196:	f240 312e 	movw	r1, #814	@ 0x32e
 800819a:	486c      	ldr	r0, [pc, #432]	@ (800834c <dim2id2iso_ideal_to_isogeny_clapotis+0x370>)
 800819c:	f02d f84c 	bl	8035238 <__assert_func>
    int exp_gcd = ibz_two_adic(&tmp);
 80081a0:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 80081a4:	f103 0318 	add.w	r3, r3, #24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f014 fff4 	bl	801d196 <sqisign_gen_ibz_two_adic>
 80081ae:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80081b2:	f103 0304 	add.w	r3, r3, #4
 80081b6:	6018      	str	r0, [r3, #0]
    exp = TORSION_EVEN_POWER - exp_gcd;
 80081b8:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80081bc:	f103 0304 	add.w	r3, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 80081c6:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 80081ca:	f102 0208 	add.w	r2, r2, #8
 80081ce:	6013      	str	r3, [r2, #0]
    // removing the power of 2 from u and v
    ibz_div(u, &test1, u, &tmp);
 80081d0:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 80081d4:	f103 0318 	add.w	r3, r3, #24
 80081d8:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 80081dc:	f6a2 52cc 	subw	r2, r2, #3532	@ 0xdcc
 80081e0:	f507 5134 	add.w	r1, r7, #11520	@ 0x2d00
 80081e4:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80081e8:	f507 605d 	add.w	r0, r7, #3536	@ 0xdd0
 80081ec:	f6a0 50cc 	subw	r0, r0, #3532	@ 0xdcc
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	6800      	ldr	r0, [r0, #0]
 80081f4:	f014 ff64 	bl	801d0c0 <sqisign_gen_ibz_div>
    assert(ibz_cmp(&test1, &ibz_const_zero) == 0);
 80081f8:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 80081fc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8008200:	4953      	ldr	r1, [pc, #332]	@ (8008350 <dim2id2iso_ideal_to_isogeny_clapotis+0x374>)
 8008202:	4618      	mov	r0, r3
 8008204:	f014 ffd4 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d006      	beq.n	800821c <dim2id2iso_ideal_to_isogeny_clapotis+0x240>
 800820e:	4b52      	ldr	r3, [pc, #328]	@ (8008358 <dim2id2iso_ideal_to_isogeny_clapotis+0x37c>)
 8008210:	4a4d      	ldr	r2, [pc, #308]	@ (8008348 <dim2id2iso_ideal_to_isogeny_clapotis+0x36c>)
 8008212:	f240 3133 	movw	r1, #819	@ 0x333
 8008216:	484d      	ldr	r0, [pc, #308]	@ (800834c <dim2id2iso_ideal_to_isogeny_clapotis+0x370>)
 8008218:	f02d f80e 	bl	8035238 <__assert_func>
    ibz_div(v, &test1, v, &tmp);
 800821c:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008220:	f103 0318 	add.w	r3, r3, #24
 8008224:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 8008228:	f5a2 625d 	sub.w	r2, r2, #3536	@ 0xdd0
 800822c:	f507 5134 	add.w	r1, r7, #11520	@ 0x2d00
 8008230:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8008234:	f507 605d 	add.w	r0, r7, #3536	@ 0xdd0
 8008238:	f5a0 605d 	sub.w	r0, r0, #3536	@ 0xdd0
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	f014 ff3e 	bl	801d0c0 <sqisign_gen_ibz_div>
    assert(ibz_cmp(&test1, &ibz_const_zero) == 0);
 8008244:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008248:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800824c:	4940      	ldr	r1, [pc, #256]	@ (8008350 <dim2id2iso_ideal_to_isogeny_clapotis+0x374>)
 800824e:	4618      	mov	r0, r3
 8008250:	f014 ffae 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <dim2id2iso_ideal_to_isogeny_clapotis+0x28c>
 800825a:	4b3f      	ldr	r3, [pc, #252]	@ (8008358 <dim2id2iso_ideal_to_isogeny_clapotis+0x37c>)
 800825c:	4a3a      	ldr	r2, [pc, #232]	@ (8008348 <dim2id2iso_ideal_to_isogeny_clapotis+0x36c>)
 800825e:	f240 3135 	movw	r1, #821	@ 0x335
 8008262:	483a      	ldr	r0, [pc, #232]	@ (800834c <dim2id2iso_ideal_to_isogeny_clapotis+0x370>)
 8008264:	f02c ffe8 	bl	8035238 <__assert_func>

#ifndef NDEBUG
    // checking that ud1+vd2 = 2^exp
    ibz_t pow_check, tmp_check;
    ibz_init(&pow_check);
 8008268:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800826c:	f103 0318 	add.w	r3, r3, #24
 8008270:	4618      	mov	r0, r3
 8008272:	f014 fec8 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&tmp_check);
 8008276:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800827a:	f103 030c 	add.w	r3, r3, #12
 800827e:	4618      	mov	r0, r3
 8008280:	f014 fec1 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_pow(&pow_check, &ibz_const_two, exp);
 8008284:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008288:	f103 0308 	add.w	r3, r3, #8
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008292:	f103 0318 	add.w	r3, r3, #24
 8008296:	4931      	ldr	r1, [pc, #196]	@ (800835c <dim2id2iso_ideal_to_isogeny_clapotis+0x380>)
 8008298:	4618      	mov	r0, r3
 800829a:	f014 ff6d 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_mul(&tmp_check, d1, u);
 800829e:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80082a2:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 80082a6:	f507 5034 	add.w	r0, r7, #11520	@ 0x2d00
 80082aa:	f100 000c 	add.w	r0, r0, #12
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80082b4:	f103 0320 	add.w	r3, r3, #32
 80082b8:	6819      	ldr	r1, [r3, #0]
 80082ba:	f014 fed8 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&pow_check, &pow_check, &tmp_check);
 80082be:	f507 5234 	add.w	r2, r7, #11520	@ 0x2d00
 80082c2:	f102 020c 	add.w	r2, r2, #12
 80082c6:	f507 5134 	add.w	r1, r7, #11520	@ 0x2d00
 80082ca:	f101 0118 	add.w	r1, r1, #24
 80082ce:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 80082d2:	f103 0318 	add.w	r3, r3, #24
 80082d6:	4618      	mov	r0, r3
 80082d8:	f014 feba 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&tmp_check, v, d2);
 80082dc:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80082e0:	f5a3 635d 	sub.w	r3, r3, #3536	@ 0xdd0
 80082e4:	f507 5034 	add.w	r0, r7, #11520	@ 0x2d00
 80082e8:	f100 000c 	add.w	r0, r0, #12
 80082ec:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 80082f0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	6819      	ldr	r1, [r3, #0]
 80082f8:	f014 feb9 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&pow_check, &pow_check, &tmp_check);
 80082fc:	f507 5234 	add.w	r2, r7, #11520	@ 0x2d00
 8008300:	f102 020c 	add.w	r2, r2, #12
 8008304:	f507 5134 	add.w	r1, r7, #11520	@ 0x2d00
 8008308:	f101 0118 	add.w	r1, r1, #24
 800830c:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008310:	f103 0318 	add.w	r3, r3, #24
 8008314:	4618      	mov	r0, r3
 8008316:	f014 fe9b 	bl	801d050 <sqisign_gen_ibz_sub>
    assert(ibz_cmp(&pow_check, &ibz_const_zero) == 0);
 800831a:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800831e:	f103 0318 	add.w	r3, r3, #24
 8008322:	490b      	ldr	r1, [pc, #44]	@ (8008350 <dim2id2iso_ideal_to_isogeny_clapotis+0x374>)
 8008324:	4618      	mov	r0, r3
 8008326:	f014 ff43 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d019      	beq.n	8008364 <dim2id2iso_ideal_to_isogeny_clapotis+0x388>
 8008330:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <dim2id2iso_ideal_to_isogeny_clapotis+0x384>)
 8008332:	4a05      	ldr	r2, [pc, #20]	@ (8008348 <dim2id2iso_ideal_to_isogeny_clapotis+0x36c>)
 8008334:	f240 3141 	movw	r1, #833	@ 0x341
 8008338:	4804      	ldr	r0, [pc, #16]	@ (800834c <dim2id2iso_ideal_to_isogeny_clapotis+0x370>)
 800833a:	f02c ff7d 	bl	8035238 <__assert_func>
 800833e:	bf00      	nop
 8008340:	0803ce5c 	.word	0x0803ce5c
 8008344:	0803701c 	.word	0x0803701c
 8008348:	08036ad8 	.word	0x08036ad8
 800834c:	08036adc 	.word	0x08036adc
 8008350:	0803b8f4 	.word	0x0803b8f4
 8008354:	08037040 	.word	0x08037040
 8008358:	08037064 	.word	0x08037064
 800835c:	0803b90c 	.word	0x0803b90c
 8008360:	0803708c 	.word	0x0803708c
    ibz_finalize(&tmp_check);
 8008364:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008368:	f103 030c 	add.w	r3, r3, #12
 800836c:	4618      	mov	r0, r3
 800836e:	f014 fe55 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&pow_check);
 8008372:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008376:	f103 0318 	add.w	r3, r3, #24
 800837a:	4618      	mov	r0, r3
 800837c:	f014 fe4e 	bl	801d01c <sqisign_gen_ibz_finalize>
    // hat{phiu} (Q)) where P,Q is a basis of E0[2e]

    // now we set-up the kernel
    // ec_curve_t E0 = CURVE_E0;
    ec_curve_t E1;
    copy_curve(&E1, &CURVES_WITH_ENDOMORPHISMS[index_order1].curve);
 8008380:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008384:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 800838e:	fb02 f303 	mul.w	r3, r2, r3
 8008392:	4ac5      	ldr	r2, [pc, #788]	@ (80086a8 <dim2id2iso_ideal_to_isogeny_clapotis+0x6cc>)
 8008394:	441a      	add	r2, r3
 8008396:	f507 532f 	add.w	r3, r7, #11200	@ 0x2bc0
 800839a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fc fd71 	bl	8004e88 <copy_curve>
    ec_curve_t E2;
    copy_curve(&E2, &CURVES_WITH_ENDOMORPHISMS[index_order2].curve);
 80083a6:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 80083aa:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
 80083b8:	4abb      	ldr	r2, [pc, #748]	@ (80086a8 <dim2id2iso_ideal_to_isogeny_clapotis+0x6cc>)
 80083ba:	441a      	add	r2, r3
 80083bc:	f507 532b 	add.w	r3, r7, #10944	@ 0x2ac0
 80083c0:	f103 0304 	add.w	r3, r3, #4
 80083c4:	4611      	mov	r1, r2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fc fd5e 	bl	8004e88 <copy_curve>
    ec_basis_t bas1, bas2;
    theta_couple_curve_t E01;
    theta_kernel_couple_points_t ker;

    ec_basis_t bas_u;
    copy_basis(&bas1, &CURVES_WITH_ENDOMORPHISMS[index_order1].basis_even);
 80083cc:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 80083d0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80083e2:	4ab1      	ldr	r2, [pc, #708]	@ (80086a8 <dim2id2iso_ideal_to_isogeny_clapotis+0x6cc>)
 80083e4:	4413      	add	r3, r2
 80083e6:	1d1a      	adds	r2, r3, #4
 80083e8:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80083ec:	f103 0314 	add.w	r3, r3, #20
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fc fd26 	bl	8004e44 <copy_basis>
    copy_basis(&bas2, &CURVES_WITH_ENDOMORPHISMS[index_order2].basis_even);
 80083f8:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 80083fc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800840e:	4aa6      	ldr	r2, [pc, #664]	@ (80086a8 <dim2id2iso_ideal_to_isogeny_clapotis+0x6cc>)
 8008410:	4413      	add	r3, r2
 8008412:	1d1a      	adds	r2, r3, #4
 8008414:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008418:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800841c:	4611      	mov	r1, r2
 800841e:	4618      	mov	r0, r3
 8008420:	f7fc fd10 	bl	8004e44 <copy_basis>

    // we start by computing theta = beta2 \hat{beta1}/n
    ibz_set(&theta.denom, 1);
 8008424:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008428:	f103 0310 	add.w	r3, r3, #16
 800842c:	2101      	movs	r1, #1
 800842e:	4618      	mov	r0, r3
 8008430:	f014 ff17 	bl	801d262 <sqisign_gen_ibz_set>
    quat_alg_conj(&theta, beta1);
 8008434:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008438:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 800843c:	f507 5235 	add.w	r2, r7, #11584	@ 0x2d40
 8008440:	f102 0210 	add.w	r2, r2, #16
 8008444:	6819      	ldr	r1, [r3, #0]
 8008446:	4610      	mov	r0, r2
 8008448:	f7f9 f8a3 	bl	8001592 <sqisign_gen_quat_alg_conj>
    quat_alg_mul(&theta, beta2, &theta, &QUATALG_PINFTY);
 800844c:	f507 5235 	add.w	r2, r7, #11584	@ 0x2d40
 8008450:	f102 0210 	add.w	r2, r2, #16
 8008454:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008458:	f6a3 51c8 	subw	r1, r3, #3528	@ 0xdc8
 800845c:	f507 5035 	add.w	r0, r7, #11584	@ 0x2d40
 8008460:	f100 0010 	add.w	r0, r0, #16
 8008464:	4b91      	ldr	r3, [pc, #580]	@ (80086ac <dim2id2iso_ideal_to_isogeny_clapotis+0x6d0>)
 8008466:	6809      	ldr	r1, [r1, #0]
 8008468:	f7f8 ffdb 	bl	8001422 <sqisign_gen_quat_alg_mul>
    ibz_mul(&theta.denom, &theta.denom, &lideal->norm);
 800846c:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008470:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800847a:	f507 5135 	add.w	r1, r7, #11584	@ 0x2d40
 800847e:	f101 0110 	add.w	r1, r1, #16
 8008482:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008486:	f103 0310 	add.w	r3, r3, #16
 800848a:	4618      	mov	r0, r3
 800848c:	f014 fdef 	bl	801d06e <sqisign_gen_ibz_mul>

    // now we perform the actual computation
    quat_left_ideal_t idealu, idealv;
    quat_left_ideal_init(&idealu);
 8008490:	f507 53f9 	add.w	r3, r7, #7968	@ 0x1f20
 8008494:	f103 0310 	add.w	r3, r3, #16
 8008498:	4618      	mov	r0, r3
 800849a:	f006 fdc9 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    quat_left_ideal_init(&idealv);
 800849e:	f507 53f2 	add.w	r3, r7, #7744	@ 0x1e40
 80084a2:	f103 0314 	add.w	r3, r3, #20
 80084a6:	4618      	mov	r0, r3
 80084a8:	f006 fdc2 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    theta_couple_curve_t Fu_codomain, Fv_codomain;
    theta_couple_point_t pushed_points[3];
    theta_couple_point_t *const V1 = pushed_points + 0, *const V2 = pushed_points + 1, *const V1m2 = pushed_points + 2;
 80084ac:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 80084b0:	f103 0310 	add.w	r3, r3, #16
 80084b4:	3b0c      	subs	r3, #12
 80084b6:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 80084c0:	f103 0310 	add.w	r3, r3, #16
 80084c4:	3b0c      	subs	r3, #12
 80084c6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80084ca:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 80084ce:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 80084d8:	f103 0310 	add.w	r3, r3, #16
 80084dc:	3b0c      	subs	r3, #12
 80084de:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80084e2:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 80084e6:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80084ea:	6013      	str	r3, [r2, #0]
    theta_couple_point_t P, Q, PmQ;

    copy_point(&P.P1, &bas1.P);
 80084ec:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80084f0:	f102 0214 	add.w	r2, r2, #20
 80084f4:	f507 53aa 	add.w	r3, r7, #5440	@ 0x1540
 80084f8:	f103 0310 	add.w	r3, r3, #16
 80084fc:	3b0c      	subs	r3, #12
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f7fc fc87 	bl	8004e14 <copy_point>
    copy_point(&PmQ.P1, &bas1.PmQ);
 8008506:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800850a:	f103 0314 	add.w	r3, r3, #20
 800850e:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8008512:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8008516:	f103 0310 	add.w	r3, r3, #16
 800851a:	3b0c      	subs	r3, #12
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f7fc fc78 	bl	8004e14 <copy_point>
    copy_point(&Q.P1, &bas1.Q);
 8008524:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8008528:	f103 0314 	add.w	r3, r3, #20
 800852c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8008530:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8008534:	f103 0310 	add.w	r3, r3, #16
 8008538:	3b0c      	subs	r3, #12
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f7fc fc69 	bl	8004e14 <copy_point>
    // Set points to zero
    ec_point_init(&P.P2);
 8008542:	f507 53aa 	add.w	r3, r7, #5440	@ 0x1540
 8008546:	f103 0310 	add.w	r3, r3, #16
 800854a:	3b0c      	subs	r3, #12
 800854c:	3390      	adds	r3, #144	@ 0x90
 800854e:	4618      	mov	r0, r3
 8008550:	f002 ff52 	bl	800b3f8 <ec_point_init>
    ec_point_init(&Q.P2);
 8008554:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8008558:	f103 0310 	add.w	r3, r3, #16
 800855c:	3b0c      	subs	r3, #12
 800855e:	3390      	adds	r3, #144	@ 0x90
 8008560:	4618      	mov	r0, r3
 8008562:	f002 ff49 	bl	800b3f8 <ec_point_init>
    ec_point_init(&PmQ.P2);
 8008566:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800856a:	f103 0310 	add.w	r3, r3, #16
 800856e:	3b0c      	subs	r3, #12
 8008570:	3390      	adds	r3, #144	@ 0x90
 8008572:	4618      	mov	r0, r3
 8008574:	f002 ff40 	bl	800b3f8 <ec_point_init>

    pushed_points[0] = P;
 8008578:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 800857c:	f103 0310 	add.w	r3, r3, #16
 8008580:	f2a3 726c 	subw	r2, r3, #1900	@ 0x76c
 8008584:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 8008588:	f103 0310 	add.w	r3, r3, #16
 800858c:	f6a3 038c 	subw	r3, r3, #2188	@ 0x88c
 8008590:	4610      	mov	r0, r2
 8008592:	4619      	mov	r1, r3
 8008594:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8008598:	461a      	mov	r2, r3
 800859a:	f02d fc00 	bl	8035d9e <memcpy>
    pushed_points[1] = Q;
 800859e:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 80085a2:	f103 0310 	add.w	r3, r3, #16
 80085a6:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80085aa:	f507 52ee 	add.w	r2, r7, #7616	@ 0x1dc0
 80085ae:	f102 0210 	add.w	r2, r2, #16
 80085b2:	f6a2 12ac 	subw	r2, r2, #2476	@ 0x9ac
 80085b6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80085ba:	4611      	mov	r1, r2
 80085bc:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80085c0:	4618      	mov	r0, r3
 80085c2:	f02d fbec 	bl	8035d9e <memcpy>
    pushed_points[2] = PmQ;
 80085c6:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 80085ca:	f103 0310 	add.w	r3, r3, #16
 80085ce:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80085d2:	f507 52ee 	add.w	r2, r7, #7616	@ 0x1dc0
 80085d6:	f102 0210 	add.w	r2, r2, #16
 80085da:	f6a2 22cc 	subw	r2, r2, #2764	@ 0xacc
 80085de:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80085e2:	4611      	mov	r1, r2
 80085e4:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80085e8:	4618      	mov	r0, r3
 80085ea:	f02d fbd8 	bl	8035d9e <memcpy>
    // we perform the computation of phiu with a fixed degree isogeny
    ret = fixed_degree_isogeny_and_eval(
 80085ee:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 80085f2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 80085fc:	f102 0210 	add.w	r2, r2, #16
 8008600:	3a04      	subs	r2, #4
 8008602:	f507 615d 	add.w	r1, r7, #3536	@ 0xdd0
 8008606:	f6a1 51cc 	subw	r1, r1, #3532	@ 0xdcc
 800860a:	f507 50f9 	add.w	r0, r7, #7968	@ 0x1f20
 800860e:	f100 0010 	add.w	r0, r0, #16
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	2303      	movs	r3, #3
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 800861c:	f103 0310 	add.w	r3, r3, #16
 8008620:	3b0c      	subs	r3, #12
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	2201      	movs	r2, #1
 8008628:	6809      	ldr	r1, [r1, #0]
 800862a:	f7fd f89d 	bl	8005768 <fixed_degree_isogeny_and_eval>
 800862e:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008632:	f103 030c 	add.w	r3, r3, #12
 8008636:	6018      	str	r0, [r3, #0]
        &idealu, u, true, &Fu_codomain, pushed_points, sizeof(pushed_points) / sizeof(*pushed_points), index_order1);

    if (!ret) {
 8008638:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800863c:	f103 030c 	add.w	r3, r3, #12
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f001 8258 	beq.w	8009af8 <dim2id2iso_ideal_to_isogeny_clapotis+0x1b1c>
        goto cleanup;
    }
    assert(test_point_order_twof(&V1->P1, &Fu_codomain.E1, TORSION_EVEN_POWER));
 8008648:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 8008652:	f103 0310 	add.w	r3, r3, #16
 8008656:	3b04      	subs	r3, #4
 8008658:	22f8      	movs	r2, #248	@ 0xf8
 800865a:	4619      	mov	r1, r3
 800865c:	f7fc fc3b 	bl	8004ed6 <test_point_order_twof>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <dim2id2iso_ideal_to_isogeny_clapotis+0x698>
 8008666:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <dim2id2iso_ideal_to_isogeny_clapotis+0x6d4>)
 8008668:	4a12      	ldr	r2, [pc, #72]	@ (80086b4 <dim2id2iso_ideal_to_isogeny_clapotis+0x6d8>)
 800866a:	f240 317f 	movw	r1, #895	@ 0x37f
 800866e:	4812      	ldr	r0, [pc, #72]	@ (80086b8 <dim2id2iso_ideal_to_isogeny_clapotis+0x6dc>)
 8008670:	f02c fde2 	bl	8035238 <__assert_func>
    assert(test_point_order_twof(&V1->P2, &Fu_codomain.E2, TORSION_EVEN_POWER));
 8008674:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800867e:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 8008682:	f103 0310 	add.w	r3, r3, #16
 8008686:	3b04      	subs	r3, #4
 8008688:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800868c:	22f8      	movs	r2, #248	@ 0xf8
 800868e:	4619      	mov	r1, r3
 8008690:	f7fc fc21 	bl	8004ed6 <test_point_order_twof>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d112      	bne.n	80086c0 <dim2id2iso_ideal_to_isogeny_clapotis+0x6e4>
 800869a:	4b08      	ldr	r3, [pc, #32]	@ (80086bc <dim2id2iso_ideal_to_isogeny_clapotis+0x6e0>)
 800869c:	4a05      	ldr	r2, [pc, #20]	@ (80086b4 <dim2id2iso_ideal_to_isogeny_clapotis+0x6d8>)
 800869e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80086a2:	4805      	ldr	r0, [pc, #20]	@ (80086b8 <dim2id2iso_ideal_to_isogeny_clapotis+0x6dc>)
 80086a4:	f02c fdc8 	bl	8035238 <__assert_func>
 80086a8:	08039740 	.word	0x08039740
 80086ac:	0803bf30 	.word	0x0803bf30
 80086b0:	080370b8 	.word	0x080370b8
 80086b4:	08036ad8 	.word	0x08036ad8
 80086b8:	08036adc 	.word	0x08036adc
 80086bc:	080370fc 	.word	0x080370fc

#ifndef NDEBUG
    Fu_length = (unsigned int)ret;
 80086c0:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80086c4:	f103 030c 	add.w	r3, r3, #12
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 80086ce:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80086d2:	6013      	str	r3, [r2, #0]
    // presumably the correct curve is the first one, we check this
    fp2_t w0a, w1a, w2a;
    ec_curve_t E1_tmp, Fu_codomain_E1_tmp, Fu_codomain_E2_tmp;
    copy_curve(&E1_tmp, &E1);
 80086d4:	f507 522f 	add.w	r2, r7, #11200	@ 0x2bc0
 80086d8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80086dc:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80086e0:	f103 0310 	add.w	r3, r3, #16
 80086e4:	3b08      	subs	r3, #8
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fc fbcd 	bl	8004e88 <copy_curve>
    copy_curve(&Fu_codomain_E1_tmp, &Fu_codomain.E1);
 80086ee:	f507 52e0 	add.w	r2, r7, #7168	@ 0x1c00
 80086f2:	f102 0210 	add.w	r2, r2, #16
 80086f6:	3a04      	subs	r2, #4
 80086f8:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 80086fc:	3b0c      	subs	r3, #12
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7fc fbc1 	bl	8004e88 <copy_curve>
    copy_curve(&Fu_codomain_E2_tmp, &Fu_codomain.E2);
 8008706:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 800870a:	f103 0310 	add.w	r3, r3, #16
 800870e:	3b04      	subs	r3, #4
 8008710:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8008714:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8008718:	3b10      	subs	r3, #16
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f7fc fbb3 	bl	8004e88 <copy_curve>
    weil(&w0a, TORSION_EVEN_POWER, &bas1.P, &bas1.Q, &bas1.PmQ, &E1_tmp);
 8008722:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8008726:	f103 0314 	add.w	r3, r3, #20
 800872a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800872e:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8008732:	f102 0214 	add.w	r2, r2, #20
 8008736:	f507 5096 	add.w	r0, r7, #4800	@ 0x12c0
 800873a:	f100 0010 	add.w	r0, r0, #16
 800873e:	3814      	subs	r0, #20
 8008740:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8008744:	f103 0310 	add.w	r3, r3, #16
 8008748:	3b08      	subs	r3, #8
 800874a:	9301      	str	r3, [sp, #4]
 800874c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8008750:	f103 0314 	add.w	r3, r3, #20
 8008754:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	460b      	mov	r3, r1
 800875c:	21f8      	movs	r1, #248	@ 0xf8
 800875e:	f7fa ff43 	bl	80035e8 <weil>
    weil(&w1a, TORSION_EVEN_POWER, &V1->P1, &V2->P1, &V1m2->P1, &Fu_codomain_E1_tmp);
 8008762:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008766:	6819      	ldr	r1, [r3, #0]
 8008768:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 800876c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008770:	681c      	ldr	r4, [r3, #0]
 8008772:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008776:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f507 5094 	add.w	r0, r7, #4736	@ 0x1280
 8008780:	f100 0010 	add.w	r0, r0, #16
 8008784:	381c      	subs	r0, #28
 8008786:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 800878a:	3b0c      	subs	r3, #12
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	9200      	str	r2, [sp, #0]
 8008790:	4623      	mov	r3, r4
 8008792:	460a      	mov	r2, r1
 8008794:	21f8      	movs	r1, #248	@ 0xf8
 8008796:	f7fa ff27 	bl	80035e8 <weil>
    weil(&w2a, TORSION_EVEN_POWER, &V1->P2, &V2->P2, &V1m2->P2, &Fu_codomain_E2_tmp);
 800879a:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80087a4:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 80087a8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 80087b2:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 80087b6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80087c0:	f507 5091 	add.w	r0, r7, #4640	@ 0x1220
 80087c4:	f100 0010 	add.w	r0, r0, #16
 80087c8:	3804      	subs	r0, #4
 80087ca:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 80087ce:	3b10      	subs	r3, #16
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	9200      	str	r2, [sp, #0]
 80087d4:	4623      	mov	r3, r4
 80087d6:	460a      	mov	r2, r1
 80087d8:	21f8      	movs	r1, #248	@ 0xf8
 80087da:	f7fa ff05 	bl	80035e8 <weil>
    ibz_pow(&two_pow, &ibz_const_two, Fu_length);
 80087de:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 80087e2:	f103 030c 	add.w	r3, r3, #12
 80087e6:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 80087ea:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80087ee:	6812      	ldr	r2, [r2, #0]
 80087f0:	49d8      	ldr	r1, [pc, #864]	@ (8008b54 <dim2id2iso_ideal_to_isogeny_clapotis+0xb78>)
 80087f2:	4618      	mov	r0, r3
 80087f4:	f014 fcc0 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_sub(&two_pow, &two_pow, u);
 80087f8:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80087fc:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 8008800:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 8008804:	f101 010c 	add.w	r1, r1, #12
 8008808:	f507 5036 	add.w	r0, r7, #11648	@ 0x2d80
 800880c:	f100 000c 	add.w	r0, r0, #12
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	f014 fc1d 	bl	801d050 <sqisign_gen_ibz_sub>

    // now we are checking that the weil pairings are equal to the correct value
    digit_t digit_u[NWORDS_ORDER] = { 0 };
 8008816:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 800881a:	f103 0310 	add.w	r3, r3, #16
 800881e:	f5a3 6373 	sub.w	r3, r3, #3888	@ 0xf30
 8008822:	4618      	mov	r0, r3
 8008824:	2320      	movs	r3, #32
 8008826:	461a      	mov	r2, r3
 8008828:	2100      	movs	r1, #0
 800882a:	f02d f9e9 	bl	8035c00 <memset>
    ibz_to_digit_array(digit_u, u);
 800882e:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 8008832:	3b10      	subs	r3, #16
 8008834:	2220      	movs	r2, #32
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f02d f9e1 	bl	8035c00 <memset>
 800883e:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008842:	f6a3 52cc 	subw	r2, r3, #3532	@ 0xdcc
 8008846:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 800884a:	3b10      	subs	r3, #16
 800884c:	6811      	ldr	r1, [r2, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f014 fea6 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    fp2_t test_powa;
    fp2_pow_vartime(&test_powa, &w0a, digit_u, NWORDS_ORDER);
 8008854:	f507 626b 	add.w	r2, r7, #3760	@ 0xeb0
 8008858:	3a10      	subs	r2, #16
 800885a:	f507 5196 	add.w	r1, r7, #4800	@ 0x12c0
 800885e:	f101 0110 	add.w	r1, r1, #16
 8008862:	3914      	subs	r1, #20
 8008864:	f507 6067 	add.w	r0, r7, #3696	@ 0xe70
 8008868:	3818      	subs	r0, #24
 800886a:	2308      	movs	r3, #8
 800886c:	f00a fcf5 	bl	801325a <fp2_pow_vartime>

    assert(fp2_is_equal(&test_powa, &w1a));
 8008870:	f507 5294 	add.w	r2, r7, #4736	@ 0x1280
 8008874:	f102 0210 	add.w	r2, r2, #16
 8008878:	3a1c      	subs	r2, #28
 800887a:	f507 6367 	add.w	r3, r7, #3696	@ 0xe70
 800887e:	3b18      	subs	r3, #24
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f00a f89e 	bl	80129c4 <fp2_is_equal>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <dim2id2iso_ideal_to_isogeny_clapotis+0x8c0>
 800888e:	4bb2      	ldr	r3, [pc, #712]	@ (8008b58 <dim2id2iso_ideal_to_isogeny_clapotis+0xb7c>)
 8008890:	4ab2      	ldr	r2, [pc, #712]	@ (8008b5c <dim2id2iso_ideal_to_isogeny_clapotis+0xb80>)
 8008892:	f240 3196 	movw	r1, #918	@ 0x396
 8008896:	48b2      	ldr	r0, [pc, #712]	@ (8008b60 <dim2id2iso_ideal_to_isogeny_clapotis+0xb84>)
 8008898:	f02c fcce 	bl	8035238 <__assert_func>
    ibz_to_digit_array(digit_u, &two_pow);
 800889c:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 80088a0:	3b10      	subs	r3, #16
 80088a2:	2220      	movs	r2, #32
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f02d f9aa 	bl	8035c00 <memset>
 80088ac:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 80088b0:	f102 020c 	add.w	r2, r2, #12
 80088b4:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 80088b8:	3b10      	subs	r3, #16
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f014 fe6f 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    fp2_pow_vartime(&test_powa, &w0a, digit_u, NWORDS_ORDER);
 80088c2:	f507 626b 	add.w	r2, r7, #3760	@ 0xeb0
 80088c6:	3a10      	subs	r2, #16
 80088c8:	f507 5196 	add.w	r1, r7, #4800	@ 0x12c0
 80088cc:	f101 0110 	add.w	r1, r1, #16
 80088d0:	3914      	subs	r1, #20
 80088d2:	f507 6067 	add.w	r0, r7, #3696	@ 0xe70
 80088d6:	3818      	subs	r0, #24
 80088d8:	2308      	movs	r3, #8
 80088da:	f00a fcbe 	bl	801325a <fp2_pow_vartime>
    assert(fp2_is_equal(&test_powa, &w2a));
 80088de:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80088e2:	f102 0210 	add.w	r2, r2, #16
 80088e6:	3a04      	subs	r2, #4
 80088e8:	f507 6367 	add.w	r3, r7, #3696	@ 0xe70
 80088ec:	3b18      	subs	r3, #24
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f00a f867 	bl	80129c4 <fp2_is_equal>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <dim2id2iso_ideal_to_isogeny_clapotis+0x92e>
 80088fc:	4b99      	ldr	r3, [pc, #612]	@ (8008b64 <dim2id2iso_ideal_to_isogeny_clapotis+0xb88>)
 80088fe:	4a97      	ldr	r2, [pc, #604]	@ (8008b5c <dim2id2iso_ideal_to_isogeny_clapotis+0xb80>)
 8008900:	f240 3199 	movw	r1, #921	@ 0x399
 8008904:	4896      	ldr	r0, [pc, #600]	@ (8008b60 <dim2id2iso_ideal_to_isogeny_clapotis+0xb84>)
 8008906:	f02c fc97 	bl	8035238 <__assert_func>
#endif

    // copying the basis images
    copy_point(&bas_u.P, &V1->P1);
 800890a:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8008914:	f103 030c 	add.w	r3, r3, #12
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f7fc fa7a 	bl	8004e14 <copy_point>
    copy_point(&bas_u.Q, &V2->P1);
 8008920:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008924:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800892e:	f103 030c 	add.w	r3, r3, #12
 8008932:	3390      	adds	r3, #144	@ 0x90
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f7fc fa6c 	bl	8004e14 <copy_point>
    copy_point(&bas_u.PmQ, &V1m2->P1);
 800893c:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008940:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800894a:	f103 030c 	add.w	r3, r3, #12
 800894e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8008952:	4611      	mov	r1, r2
 8008954:	4618      	mov	r0, r3
 8008956:	f7fc fa5d 	bl	8004e14 <copy_point>

    // copying the points to the first part of the kernel
    copy_point(&ker.T1.P1, &bas_u.P);
 800895a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800895e:	f102 020c 	add.w	r2, r2, #12
 8008962:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8008966:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f7fc fa51 	bl	8004e14 <copy_point>
    copy_point(&ker.T2.P1, &bas_u.Q);
 8008972:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8008976:	f103 030c 	add.w	r3, r3, #12
 800897a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800897e:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8008982:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008986:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800898a:	4611      	mov	r1, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f7fc fa41 	bl	8004e14 <copy_point>
    copy_point(&ker.T1m2.P1, &bas_u.PmQ);
 8008992:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8008996:	f103 030c 	add.w	r3, r3, #12
 800899a:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800899e:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 80089a2:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80089a6:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80089aa:	4611      	mov	r1, r2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fc fa31 	bl	8004e14 <copy_point>
    copy_curve(&E01.E1, &Fu_codomain.E1);
 80089b2:	f507 53e0 	add.w	r3, r7, #7168	@ 0x1c00
 80089b6:	f103 0310 	add.w	r3, r3, #16
 80089ba:	3b04      	subs	r3, #4
 80089bc:	f507 5214 	add.w	r2, r7, #9472	@ 0x2500
 80089c0:	f102 021c 	add.w	r2, r2, #28
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fc fa5e 	bl	8004e88 <copy_curve>

    copy_point(&P.P1, &bas2.P);
 80089cc:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 80089d0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80089d4:	f507 53aa 	add.w	r3, r7, #5440	@ 0x1540
 80089d8:	f103 0310 	add.w	r3, r3, #16
 80089dc:	3b0c      	subs	r3, #12
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fc fa17 	bl	8004e14 <copy_point>
    copy_point(&PmQ.P1, &bas2.PmQ);
 80089e6:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 80089ea:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80089ee:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80089f2:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80089f6:	f103 0310 	add.w	r3, r3, #16
 80089fa:	3b0c      	subs	r3, #12
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fc fa08 	bl	8004e14 <copy_point>
    copy_point(&Q.P1, &bas2.Q);
 8008a04:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008a08:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008a0c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8008a10:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8008a14:	f103 0310 	add.w	r3, r3, #16
 8008a18:	3b0c      	subs	r3, #12
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fc f9f9 	bl	8004e14 <copy_point>
    pushed_points[0] = P;
 8008a22:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 8008a26:	f103 0310 	add.w	r3, r3, #16
 8008a2a:	f2a3 726c 	subw	r2, r3, #1900	@ 0x76c
 8008a2e:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 8008a32:	f103 0310 	add.w	r3, r3, #16
 8008a36:	f6a3 038c 	subw	r3, r3, #2188	@ 0x88c
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8008a42:	461a      	mov	r2, r3
 8008a44:	f02d f9ab 	bl	8035d9e <memcpy>
    pushed_points[1] = Q;
 8008a48:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 8008a4c:	f103 0310 	add.w	r3, r3, #16
 8008a50:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8008a54:	f507 52ee 	add.w	r2, r7, #7616	@ 0x1dc0
 8008a58:	f102 0210 	add.w	r2, r2, #16
 8008a5c:	f6a2 12ac 	subw	r2, r2, #2476	@ 0x9ac
 8008a60:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8008a64:	4611      	mov	r1, r2
 8008a66:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f02d f997 	bl	8035d9e <memcpy>
    pushed_points[2] = PmQ;
 8008a70:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 8008a74:	f103 0310 	add.w	r3, r3, #16
 8008a78:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8008a7c:	f507 52ee 	add.w	r2, r7, #7616	@ 0x1dc0
 8008a80:	f102 0210 	add.w	r2, r2, #16
 8008a84:	f6a2 22cc 	subw	r2, r2, #2764	@ 0xacc
 8008a88:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8008a92:	4618      	mov	r0, r3
 8008a94:	f02d f983 	bl	8035d9e <memcpy>

    // computation of phiv
    ret = fixed_degree_isogeny_and_eval(
 8008a98:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008a9c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f507 52ce 	add.w	r2, r7, #6592	@ 0x19c0
 8008aa6:	f102 0210 	add.w	r2, r2, #16
 8008aaa:	3a0c      	subs	r2, #12
 8008aac:	f507 615d 	add.w	r1, r7, #3536	@ 0xdd0
 8008ab0:	f5a1 615d 	sub.w	r1, r1, #3536	@ 0xdd0
 8008ab4:	f507 50f2 	add.w	r0, r7, #7744	@ 0x1e40
 8008ab8:	f100 0014 	add.w	r0, r0, #20
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	2303      	movs	r3, #3
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 8008ac6:	f103 0310 	add.w	r3, r3, #16
 8008aca:	3b0c      	subs	r3, #12
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	6809      	ldr	r1, [r1, #0]
 8008ad4:	f7fc fe48 	bl	8005768 <fixed_degree_isogeny_and_eval>
 8008ad8:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008adc:	f103 030c 	add.w	r3, r3, #12
 8008ae0:	6018      	str	r0, [r3, #0]
        &idealv, v, true, &Fv_codomain, pushed_points, sizeof(pushed_points) / sizeof(*pushed_points), index_order2);
    if (!ret) {
 8008ae2:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008ae6:	f103 030c 	add.w	r3, r3, #12
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f001 8005 	beq.w	8009afc <dim2id2iso_ideal_to_isogeny_clapotis+0x1b20>
        goto cleanup;
    }

    assert(test_point_order_twof(&V1->P1, &Fv_codomain.E1, TORSION_EVEN_POWER));
 8008af2:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	f507 53ce 	add.w	r3, r7, #6592	@ 0x19c0
 8008afc:	f103 0310 	add.w	r3, r3, #16
 8008b00:	3b0c      	subs	r3, #12
 8008b02:	22f8      	movs	r2, #248	@ 0xf8
 8008b04:	4619      	mov	r1, r3
 8008b06:	f7fc f9e6 	bl	8004ed6 <test_point_order_twof>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <dim2id2iso_ideal_to_isogeny_clapotis+0xb42>
 8008b10:	4b15      	ldr	r3, [pc, #84]	@ (8008b68 <dim2id2iso_ideal_to_isogeny_clapotis+0xb8c>)
 8008b12:	4a12      	ldr	r2, [pc, #72]	@ (8008b5c <dim2id2iso_ideal_to_isogeny_clapotis+0xb80>)
 8008b14:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8008b18:	4811      	ldr	r0, [pc, #68]	@ (8008b60 <dim2id2iso_ideal_to_isogeny_clapotis+0xb84>)
 8008b1a:	f02c fb8d 	bl	8035238 <__assert_func>
    assert(test_point_order_twof(&V1->P2, &Fv_codomain.E2, TORSION_EVEN_POWER));
 8008b1e:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8008b28:	f507 53ce 	add.w	r3, r7, #6592	@ 0x19c0
 8008b2c:	f103 0310 	add.w	r3, r3, #16
 8008b30:	3b0c      	subs	r3, #12
 8008b32:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8008b36:	22f8      	movs	r2, #248	@ 0xf8
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f7fc f9cc 	bl	8004ed6 <test_point_order_twof>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d115      	bne.n	8008b70 <dim2id2iso_ideal_to_isogeny_clapotis+0xb94>
 8008b44:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <dim2id2iso_ideal_to_isogeny_clapotis+0xb90>)
 8008b46:	4a05      	ldr	r2, [pc, #20]	@ (8008b5c <dim2id2iso_ideal_to_isogeny_clapotis+0xb80>)
 8008b48:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8008b4c:	4804      	ldr	r0, [pc, #16]	@ (8008b60 <dim2id2iso_ideal_to_isogeny_clapotis+0xb84>)
 8008b4e:	f02c fb73 	bl	8035238 <__assert_func>
 8008b52:	bf00      	nop
 8008b54:	0803b90c 	.word	0x0803b90c
 8008b58:	08037140 	.word	0x08037140
 8008b5c:	08036ad8 	.word	0x08036ad8
 8008b60:	08036adc 	.word	0x08036adc
 8008b64:	08037160 	.word	0x08037160
 8008b68:	08037180 	.word	0x08037180
 8008b6c:	080371c4 	.word	0x080371c4

#ifndef NDEBUG
    Fv_length = (unsigned int)ret;
 8008b70:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008b74:	f103 030c 	add.w	r3, r3, #12
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008b7e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8008b82:	6013      	str	r3, [r2, #0]
    ec_curve_t E2_tmp, Fv_codomain_E1_tmp, Fv_codomain_E2_tmp;
    copy_curve(&E2_tmp, &E2);
 8008b84:	f507 522b 	add.w	r2, r7, #10944	@ 0x2ac0
 8008b88:	f102 0204 	add.w	r2, r2, #4
 8008b8c:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8008b90:	3b1c      	subs	r3, #28
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fc f977 	bl	8004e88 <copy_curve>
    copy_curve(&Fv_codomain_E1_tmp, &Fv_codomain.E1);
 8008b9a:	f507 53ce 	add.w	r3, r7, #6592	@ 0x19c0
 8008b9e:	f103 0310 	add.w	r3, r3, #16
 8008ba2:	3b0c      	subs	r3, #12
 8008ba4:	f507 6241 	add.w	r2, r7, #3088	@ 0xc10
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fc f96c 	bl	8004e88 <copy_curve>
    copy_curve(&Fv_codomain_E2_tmp, &Fv_codomain.E2);
 8008bb0:	f507 53ce 	add.w	r3, r7, #6592	@ 0x19c0
 8008bb4:	f103 0310 	add.w	r3, r3, #16
 8008bb8:	3b0c      	subs	r3, #12
 8008bba:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8008bbe:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8008bc2:	3b24      	subs	r3, #36	@ 0x24
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fc f95e 	bl	8004e88 <copy_curve>
    // presumably the correct curve is the first one, we check this
    weil(&w0a, TORSION_EVEN_POWER, &bas2.P, &bas2.Q, &bas2.PmQ, &E2_tmp);
 8008bcc:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008bd0:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008bd4:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8008bd8:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 8008bdc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8008be0:	f507 5096 	add.w	r0, r7, #4800	@ 0x12c0
 8008be4:	f100 0010 	add.w	r0, r0, #16
 8008be8:	3814      	subs	r0, #20
 8008bea:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8008bee:	3b1c      	subs	r3, #28
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008bf6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008bfa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	460b      	mov	r3, r1
 8008c02:	21f8      	movs	r1, #248	@ 0xf8
 8008c04:	f7fa fcf0 	bl	80035e8 <weil>
    weil(&w1a, TORSION_EVEN_POWER, &V1->P1, &V2->P1, &V1m2->P1, &Fv_codomain_E1_tmp);
 8008c08:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008c0c:	6819      	ldr	r1, [r3, #0]
 8008c0e:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008c12:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008c16:	681c      	ldr	r4, [r3, #0]
 8008c18:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008c1c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f507 5094 	add.w	r0, r7, #4736	@ 0x1280
 8008c26:	f100 0010 	add.w	r0, r0, #16
 8008c2a:	381c      	subs	r0, #28
 8008c2c:	f507 6241 	add.w	r2, r7, #3088	@ 0xc10
 8008c30:	9201      	str	r2, [sp, #4]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	4623      	mov	r3, r4
 8008c36:	460a      	mov	r2, r1
 8008c38:	21f8      	movs	r1, #248	@ 0xf8
 8008c3a:	f7fa fcd5 	bl	80035e8 <weil>
    weil(&w2a, TORSION_EVEN_POWER, &V1->P2, &V2->P2, &V1m2->P2, &Fv_codomain_E2_tmp);
 8008c3e:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8008c48:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008c4c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 8008c56:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008c5a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8008c64:	f507 5091 	add.w	r0, r7, #4640	@ 0x1220
 8008c68:	f100 0010 	add.w	r0, r0, #16
 8008c6c:	3804      	subs	r0, #4
 8008c6e:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8008c72:	3b24      	subs	r3, #36	@ 0x24
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	9200      	str	r2, [sp, #0]
 8008c78:	4623      	mov	r3, r4
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	21f8      	movs	r1, #248	@ 0xf8
 8008c7e:	f7fa fcb3 	bl	80035e8 <weil>
    if (Fv_length == 0) {
 8008c82:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008c86:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d110      	bne.n	8008cb2 <dim2id2iso_ideal_to_isogeny_clapotis+0xcd6>
        ibz_set(&tmp, 1);
 8008c90:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008c94:	f103 0318 	add.w	r3, r3, #24
 8008c98:	2101      	movs	r1, #1
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f014 fae1 	bl	801d262 <sqisign_gen_ibz_set>
        ibz_set(&two_pow, 1);
 8008ca0:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008ca4:	f103 030c 	add.w	r3, r3, #12
 8008ca8:	2101      	movs	r1, #1
 8008caa:	4618      	mov	r0, r3
 8008cac:	f014 fad9 	bl	801d262 <sqisign_gen_ibz_set>
 8008cb0:	e01b      	b.n	8008cea <dim2id2iso_ideal_to_isogeny_clapotis+0xd0e>
    } else {
        ibz_pow(&two_pow, &ibz_const_two, Fv_length);
 8008cb2:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008cb6:	f103 030c 	add.w	r3, r3, #12
 8008cba:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008cbe:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	49ae      	ldr	r1, [pc, #696]	@ (8008f80 <dim2id2iso_ideal_to_isogeny_clapotis+0xfa4>)
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f014 fa56 	bl	801d178 <sqisign_gen_ibz_pow>
        ibz_sub(&two_pow, &two_pow, v);
 8008ccc:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008cd0:	f5a3 635d 	sub.w	r3, r3, #3536	@ 0xdd0
 8008cd4:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 8008cd8:	f101 010c 	add.w	r1, r1, #12
 8008cdc:	f507 5036 	add.w	r0, r7, #11648	@ 0x2d80
 8008ce0:	f100 000c 	add.w	r0, r0, #12
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	f014 f9b3 	bl	801d050 <sqisign_gen_ibz_sub>
    }

    // now we are checking that one of the two is equal to the correct value
    ibz_to_digit_array(digit_u, v);
 8008cea:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 8008cee:	3b10      	subs	r3, #16
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f02c ff83 	bl	8035c00 <memset>
 8008cfa:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8008cfe:	f5a3 625d 	sub.w	r2, r3, #3536	@ 0xdd0
 8008d02:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 8008d06:	3b10      	subs	r3, #16
 8008d08:	6811      	ldr	r1, [r2, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f014 fc48 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    fp2_pow_vartime(&test_powa, &w0a, digit_u, NWORDS_ORDER);
 8008d10:	f507 626b 	add.w	r2, r7, #3760	@ 0xeb0
 8008d14:	3a10      	subs	r2, #16
 8008d16:	f507 5196 	add.w	r1, r7, #4800	@ 0x12c0
 8008d1a:	f101 0110 	add.w	r1, r1, #16
 8008d1e:	3914      	subs	r1, #20
 8008d20:	f507 6067 	add.w	r0, r7, #3696	@ 0xe70
 8008d24:	3818      	subs	r0, #24
 8008d26:	2308      	movs	r3, #8
 8008d28:	f00a fa97 	bl	801325a <fp2_pow_vartime>
    assert(fp2_is_equal(&test_powa, &w1a));
 8008d2c:	f507 5294 	add.w	r2, r7, #4736	@ 0x1280
 8008d30:	f102 0210 	add.w	r2, r2, #16
 8008d34:	3a1c      	subs	r2, #28
 8008d36:	f507 6367 	add.w	r3, r7, #3696	@ 0xe70
 8008d3a:	3b18      	subs	r3, #24
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f009 fe40 	bl	80129c4 <fp2_is_equal>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <dim2id2iso_ideal_to_isogeny_clapotis+0xd7c>
 8008d4a:	4b8e      	ldr	r3, [pc, #568]	@ (8008f84 <dim2id2iso_ideal_to_isogeny_clapotis+0xfa8>)
 8008d4c:	4a8e      	ldr	r2, [pc, #568]	@ (8008f88 <dim2id2iso_ideal_to_isogeny_clapotis+0xfac>)
 8008d4e:	f240 31cd 	movw	r1, #973	@ 0x3cd
 8008d52:	488e      	ldr	r0, [pc, #568]	@ (8008f8c <dim2id2iso_ideal_to_isogeny_clapotis+0xfb0>)
 8008d54:	f02c fa70 	bl	8035238 <__assert_func>
    ibz_to_digit_array(digit_u, &two_pow);
 8008d58:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 8008d5c:	3b10      	subs	r3, #16
 8008d5e:	2220      	movs	r2, #32
 8008d60:	2100      	movs	r1, #0
 8008d62:	4618      	mov	r0, r3
 8008d64:	f02c ff4c 	bl	8035c00 <memset>
 8008d68:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008d6c:	f102 020c 	add.w	r2, r2, #12
 8008d70:	f507 636b 	add.w	r3, r7, #3760	@ 0xeb0
 8008d74:	3b10      	subs	r3, #16
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f014 fc11 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    fp2_pow_vartime(&test_powa, &w0a, digit_u, NWORDS_ORDER);
 8008d7e:	f507 626b 	add.w	r2, r7, #3760	@ 0xeb0
 8008d82:	3a10      	subs	r2, #16
 8008d84:	f507 5196 	add.w	r1, r7, #4800	@ 0x12c0
 8008d88:	f101 0110 	add.w	r1, r1, #16
 8008d8c:	3914      	subs	r1, #20
 8008d8e:	f507 6067 	add.w	r0, r7, #3696	@ 0xe70
 8008d92:	3818      	subs	r0, #24
 8008d94:	2308      	movs	r3, #8
 8008d96:	f00a fa60 	bl	801325a <fp2_pow_vartime>
    assert(fp2_is_equal(&test_powa, &w2a));
 8008d9a:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8008d9e:	f102 0210 	add.w	r2, r2, #16
 8008da2:	3a04      	subs	r2, #4
 8008da4:	f507 6367 	add.w	r3, r7, #3696	@ 0xe70
 8008da8:	3b18      	subs	r3, #24
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f009 fe09 	bl	80129c4 <fp2_is_equal>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <dim2id2iso_ideal_to_isogeny_clapotis+0xdea>
 8008db8:	4b75      	ldr	r3, [pc, #468]	@ (8008f90 <dim2id2iso_ideal_to_isogeny_clapotis+0xfb4>)
 8008dba:	4a73      	ldr	r2, [pc, #460]	@ (8008f88 <dim2id2iso_ideal_to_isogeny_clapotis+0xfac>)
 8008dbc:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 8008dc0:	4872      	ldr	r0, [pc, #456]	@ (8008f8c <dim2id2iso_ideal_to_isogeny_clapotis+0xfb0>)
 8008dc2:	f02c fa39 	bl	8035238 <__assert_func>

#endif

    copy_point(&bas2.P, &V1->P1);
 8008dc6:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008dd0:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fc f81c 	bl	8004e14 <copy_point>
    copy_point(&bas2.Q, &V2->P1);
 8008ddc:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008de0:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008dea:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008dee:	3390      	adds	r3, #144	@ 0x90
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fc f80e 	bl	8004e14 <copy_point>
    copy_point(&bas2.PmQ, &V1m2->P1);
 8008df8:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008dfc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008e06:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008e0a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fb ffff 	bl	8004e14 <copy_point>

    // multiplying theta by 1 / (d1 * n(connecting_ideal2))
    ibz_pow(&two_pow, &ibz_const_two, TORSION_EVEN_POWER);
 8008e16:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008e1a:	f103 030c 	add.w	r3, r3, #12
 8008e1e:	22f8      	movs	r2, #248	@ 0xf8
 8008e20:	4957      	ldr	r1, [pc, #348]	@ (8008f80 <dim2id2iso_ideal_to_isogeny_clapotis+0xfa4>)
 8008e22:	4618      	mov	r0, r3
 8008e24:	f014 f9a8 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_copy(&tmp, d1);
 8008e28:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008e2c:	f103 0318 	add.w	r3, r3, #24
 8008e30:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 8008e34:	f102 0220 	add.w	r2, r2, #32
 8008e38:	6811      	ldr	r1, [r2, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f014 fa1e 	bl	801d27c <sqisign_gen_ibz_copy>
    if (index_order2 > 0) {
 8008e40:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008e44:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	dd17      	ble.n	8008e7e <dim2id2iso_ideal_to_isogeny_clapotis+0xea2>
        ibz_mul(&tmp, &tmp, &ALTERNATE_CONNECTING_IDEALS[index_order2 - 1].norm);
 8008e4e:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8008e52:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	23dc      	movs	r3, #220	@ 0xdc
 8008e5c:	fb02 f303 	mul.w	r3, r2, r3
 8008e60:	4a4c      	ldr	r2, [pc, #304]	@ (8008f94 <dim2id2iso_ideal_to_isogeny_clapotis+0xfb8>)
 8008e62:	4413      	add	r3, r2
 8008e64:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8008e68:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 8008e6c:	f101 0118 	add.w	r1, r1, #24
 8008e70:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008e74:	f103 0318 	add.w	r3, r3, #24
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f014 f8f8 	bl	801d06e <sqisign_gen_ibz_mul>
    }
    ibz_invmod(&tmp, &tmp, &two_pow);
 8008e7e:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008e82:	f102 020c 	add.w	r2, r2, #12
 8008e86:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 8008e8a:	f101 0118 	add.w	r1, r1, #24
 8008e8e:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8008e92:	f103 0318 	add.w	r3, r3, #24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f014 fbb9 	bl	801d60e <sqisign_gen_ibz_invmod>

    ibz_mul(&theta.coord[0], &theta.coord[0], &tmp);
 8008e9c:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008ea0:	f102 0218 	add.w	r2, r2, #24
 8008ea4:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008ea8:	f103 0310 	add.w	r3, r3, #16
 8008eac:	f103 010c 	add.w	r1, r3, #12
 8008eb0:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008eb4:	f103 0310 	add.w	r3, r3, #16
 8008eb8:	330c      	adds	r3, #12
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f014 f8d7 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&theta.coord[1], &theta.coord[1], &tmp);
 8008ec0:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008ec4:	f102 0218 	add.w	r2, r2, #24
 8008ec8:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008ecc:	f103 0310 	add.w	r3, r3, #16
 8008ed0:	f103 0118 	add.w	r1, r3, #24
 8008ed4:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008ed8:	f103 0310 	add.w	r3, r3, #16
 8008edc:	3318      	adds	r3, #24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f014 f8c5 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&theta.coord[2], &theta.coord[2], &tmp);
 8008ee4:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008ee8:	f102 0218 	add.w	r2, r2, #24
 8008eec:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008ef0:	f103 0310 	add.w	r3, r3, #16
 8008ef4:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008ef8:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008efc:	f103 0310 	add.w	r3, r3, #16
 8008f00:	3324      	adds	r3, #36	@ 0x24
 8008f02:	4618      	mov	r0, r3
 8008f04:	f014 f8b3 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&theta.coord[3], &theta.coord[3], &tmp);
 8008f08:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8008f0c:	f102 0218 	add.w	r2, r2, #24
 8008f10:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008f14:	f103 0310 	add.w	r3, r3, #16
 8008f18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f1c:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008f20:	f103 0310 	add.w	r3, r3, #16
 8008f24:	3330      	adds	r3, #48	@ 0x30
 8008f26:	4618      	mov	r0, r3
 8008f28:	f014 f8a1 	bl	801d06e <sqisign_gen_ibz_mul>

    // applying theta
    endomorphism_application_even_basis(&bas2, 0, &Fv_codomain.E1, &theta, TORSION_EVEN_POWER);
 8008f2c:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8008f30:	f103 0310 	add.w	r3, r3, #16
 8008f34:	f507 52ce 	add.w	r2, r7, #6592	@ 0x19c0
 8008f38:	f102 0210 	add.w	r2, r2, #16
 8008f3c:	3a0c      	subs	r2, #12
 8008f3e:	f507 501d 	add.w	r0, r7, #10048	@ 0x2740
 8008f42:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 8008f46:	21f8      	movs	r1, #248	@ 0xf8
 8008f48:	9100      	str	r1, [sp, #0]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f012 fd1a 	bl	801b984 <endomorphism_application_even_basis>

    assert(test_basis_order_twof(&bas2, &Fv_codomain.E1, TORSION_EVEN_POWER));
 8008f50:	f507 53ce 	add.w	r3, r7, #6592	@ 0x19c0
 8008f54:	f103 0310 	add.w	r3, r3, #16
 8008f58:	3b0c      	subs	r3, #12
 8008f5a:	f507 501d 	add.w	r0, r7, #10048	@ 0x2740
 8008f5e:	f100 0024 	add.w	r0, r0, #36	@ 0x24
 8008f62:	22f8      	movs	r2, #248	@ 0xf8
 8008f64:	4619      	mov	r1, r3
 8008f66:	f7fc f814 	bl	8004f92 <test_basis_order_twof>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d115      	bne.n	8008f9c <dim2id2iso_ideal_to_isogeny_clapotis+0xfc0>
 8008f70:	4b09      	ldr	r3, [pc, #36]	@ (8008f98 <dim2id2iso_ideal_to_isogeny_clapotis+0xfbc>)
 8008f72:	4a05      	ldr	r2, [pc, #20]	@ (8008f88 <dim2id2iso_ideal_to_isogeny_clapotis+0xfac>)
 8008f74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008f78:	4804      	ldr	r0, [pc, #16]	@ (8008f8c <dim2id2iso_ideal_to_isogeny_clapotis+0xfb0>)
 8008f7a:	f02c f95d 	bl	8035238 <__assert_func>
 8008f7e:	bf00      	nop
 8008f80:	0803b90c 	.word	0x0803b90c
 8008f84:	08037140 	.word	0x08037140
 8008f88:	08036ad8 	.word	0x08036ad8
 8008f8c:	08036adc 	.word	0x08036adc
 8008f90:	08037160 	.word	0x08037160
 8008f94:	0803c834 	.word	0x0803c834
 8008f98:	08037208 	.word	0x08037208

    // copying points to the second part of the kernel
    copy_point(&ker.T1.P2, &bas2.P);
 8008f9c:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 8008fa0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8008fa4:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8008fa8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008fac:	3390      	adds	r3, #144	@ 0x90
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fb ff2f 	bl	8004e14 <copy_point>
    copy_point(&ker.T2.P2, &bas2.Q);
 8008fb6:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008fba:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008fbe:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8008fc2:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8008fc6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008fca:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fb ff1f 	bl	8004e14 <copy_point>
    copy_point(&ker.T1m2.P2, &bas2.PmQ);
 8008fd6:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8008fda:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8008fde:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8008fe2:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8008fe6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8008fea:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fb ff0f 	bl	8004e14 <copy_point>
    copy_curve(&E01.E2, &Fv_codomain.E1);
 8008ff6:	f507 53ce 	add.w	r3, r7, #6592	@ 0x19c0
 8008ffa:	f103 0310 	add.w	r3, r3, #16
 8008ffe:	3b0c      	subs	r3, #12
 8009000:	f507 5214 	add.w	r2, r7, #9472	@ 0x2500
 8009004:	f102 021c 	add.w	r2, r2, #28
 8009008:	f502 7292 	add.w	r2, r2, #292	@ 0x124
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fb ff3a 	bl	8004e88 <copy_curve>

    // copying the points to the first part of the kernel
    quat_left_ideal_finalize(&idealu);
 8009014:	f507 53f9 	add.w	r3, r7, #7968	@ 0x1f20
 8009018:	f103 0310 	add.w	r3, r3, #16
 800901c:	4618      	mov	r0, r3
 800901e:	f006 f81c 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
    quat_left_ideal_finalize(&idealv);
 8009022:	f507 53f2 	add.w	r3, r7, #7744	@ 0x1e40
 8009026:	f103 0314 	add.w	r3, r3, #20
 800902a:	4618      	mov	r0, r3
 800902c:	f006 f815 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>

    double_couple_point_iter(&ker.T1, TORSION_EVEN_POWER - exp, &ker.T1, &E01);
 8009030:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009034:	f103 0308 	add.w	r3, r3, #8
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 800903e:	4619      	mov	r1, r3
 8009040:	f507 5314 	add.w	r3, r7, #9472	@ 0x2500
 8009044:	f103 031c 	add.w	r3, r3, #28
 8009048:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 800904c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8009050:	f507 5006 	add.w	r0, r7, #8576	@ 0x2180
 8009054:	f100 003c 	add.w	r0, r0, #60	@ 0x3c
 8009058:	f010 fd51 	bl	8019afe <double_couple_point_iter>
    double_couple_point_iter(&ker.T2, TORSION_EVEN_POWER - exp, &ker.T2, &E01);
 800905c:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009060:	f103 0308 	add.w	r3, r3, #8
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 800906a:	461c      	mov	r4, r3
 800906c:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 8009070:	f101 011c 	add.w	r1, r1, #28
 8009074:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8009078:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800907c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8009080:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8009084:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8009088:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 800908c:	460b      	mov	r3, r1
 800908e:	4621      	mov	r1, r4
 8009090:	f010 fd35 	bl	8019afe <double_couple_point_iter>
    double_couple_point_iter(&ker.T1m2, TORSION_EVEN_POWER - exp, &ker.T1m2, &E01);
 8009094:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009098:	f103 0308 	add.w	r3, r3, #8
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 80090a2:	461c      	mov	r4, r3
 80090a4:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 80090a8:	f101 011c 	add.w	r1, r1, #28
 80090ac:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 80090b0:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80090b4:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 80090b8:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 80090bc:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80090c0:	f503 7010 	add.w	r0, r3, #576	@ 0x240
 80090c4:	460b      	mov	r3, r1
 80090c6:	4621      	mov	r1, r4
 80090c8:	f010 fd19 	bl	8019afe <double_couple_point_iter>

    assert(test_point_order_twof(&ker.T1.P1, &E01.E1, exp));
 80090cc:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 80090d0:	f101 011c 	add.w	r1, r1, #28
 80090d4:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 80090d8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80090dc:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 80090e0:	f102 0208 	add.w	r2, r2, #8
 80090e4:	6812      	ldr	r2, [r2, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fb fef5 	bl	8004ed6 <test_point_order_twof>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <dim2id2iso_ideal_to_isogeny_clapotis+0x1124>
 80090f2:	4b9c      	ldr	r3, [pc, #624]	@ (8009364 <dim2id2iso_ideal_to_isogeny_clapotis+0x1388>)
 80090f4:	4a9c      	ldr	r2, [pc, #624]	@ (8009368 <dim2id2iso_ideal_to_isogeny_clapotis+0x138c>)
 80090f6:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 80090fa:	489c      	ldr	r0, [pc, #624]	@ (800936c <dim2id2iso_ideal_to_isogeny_clapotis+0x1390>)
 80090fc:	f02c f89c 	bl	8035238 <__assert_func>
    assert(test_point_order_twof(&ker.T1m2.P2, &E01.E2, exp));
 8009100:	f507 5314 	add.w	r3, r7, #9472	@ 0x2500
 8009104:	f103 031c 	add.w	r3, r3, #28
 8009108:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800910c:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8009110:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8009114:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8009118:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 800911c:	f102 0208 	add.w	r2, r2, #8
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f7fb fed7 	bl	8004ed6 <test_point_order_twof>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <dim2id2iso_ideal_to_isogeny_clapotis+0x1160>
 800912e:	4b90      	ldr	r3, [pc, #576]	@ (8009370 <dim2id2iso_ideal_to_isogeny_clapotis+0x1394>)
 8009130:	4a8d      	ldr	r2, [pc, #564]	@ (8009368 <dim2id2iso_ideal_to_isogeny_clapotis+0x138c>)
 8009132:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 8009136:	488d      	ldr	r0, [pc, #564]	@ (800936c <dim2id2iso_ideal_to_isogeny_clapotis+0x1390>)
 8009138:	f02c f87e 	bl	8035238 <__assert_func>

    assert(ibz_is_odd(u));
 800913c:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009140:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	f014 f87e 	bl	801d246 <sqisign_gen_ibz_is_odd>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <dim2id2iso_ideal_to_isogeny_clapotis+0x1182>
 8009150:	4b88      	ldr	r3, [pc, #544]	@ (8009374 <dim2id2iso_ideal_to_isogeny_clapotis+0x1398>)
 8009152:	4a85      	ldr	r2, [pc, #532]	@ (8009368 <dim2id2iso_ideal_to_isogeny_clapotis+0x138c>)
 8009154:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 8009158:	4884      	ldr	r0, [pc, #528]	@ (800936c <dim2id2iso_ideal_to_isogeny_clapotis+0x1390>)
 800915a:	f02c f86d 	bl	8035238 <__assert_func>

    // now we evaluate the basis points through the isogeny
    assert(test_basis_order_twof(&bas_u, &E01.E1, TORSION_EVEN_POWER));
 800915e:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 8009162:	f101 011c 	add.w	r1, r1, #28
 8009166:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800916a:	f103 030c 	add.w	r3, r3, #12
 800916e:	22f8      	movs	r2, #248	@ 0xf8
 8009170:	4618      	mov	r0, r3
 8009172:	f7fb ff0e 	bl	8004f92 <test_basis_order_twof>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <dim2id2iso_ideal_to_isogeny_clapotis+0x11ae>
 800917c:	4b7e      	ldr	r3, [pc, #504]	@ (8009378 <dim2id2iso_ideal_to_isogeny_clapotis+0x139c>)
 800917e:	4a7a      	ldr	r2, [pc, #488]	@ (8009368 <dim2id2iso_ideal_to_isogeny_clapotis+0x138c>)
 8009180:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8009184:	4879      	ldr	r0, [pc, #484]	@ (800936c <dim2id2iso_ideal_to_isogeny_clapotis+0x1390>)
 8009186:	f02c f857 	bl	8035238 <__assert_func>

    // evaluating the basis through the isogeny of degree u*d1
    copy_point(&pushed_points[0].P1, &bas_u.P);
 800918a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800918e:	f102 020c 	add.w	r2, r2, #12
 8009192:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 8009196:	f103 0310 	add.w	r3, r3, #16
 800919a:	3b0c      	subs	r3, #12
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fb fe38 	bl	8004e14 <copy_point>
    copy_point(&pushed_points[2].P1, &bas_u.PmQ);
 80091a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80091a8:	f103 030c 	add.w	r3, r3, #12
 80091ac:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80091b0:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 80091b4:	f103 0310 	add.w	r3, r3, #16
 80091b8:	3b0c      	subs	r3, #12
 80091ba:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fb fe27 	bl	8004e14 <copy_point>
    copy_point(&pushed_points[1].P1, &bas_u.Q);
 80091c6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80091ca:	f103 030c 	add.w	r3, r3, #12
 80091ce:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80091d2:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 80091d6:	f103 0310 	add.w	r3, r3, #16
 80091da:	3b0c      	subs	r3, #12
 80091dc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fb fe16 	bl	8004e14 <copy_point>
    // Set points to zero
    ec_point_init(&pushed_points[0].P2);
 80091e8:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 80091ec:	f103 0310 	add.w	r3, r3, #16
 80091f0:	3b0c      	subs	r3, #12
 80091f2:	3390      	adds	r3, #144	@ 0x90
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 f8ff 	bl	800b3f8 <ec_point_init>
    ec_point_init(&pushed_points[1].P2);
 80091fa:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 80091fe:	f103 0310 	add.w	r3, r3, #16
 8009202:	3b0c      	subs	r3, #12
 8009204:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8009208:	4618      	mov	r0, r3
 800920a:	f002 f8f5 	bl	800b3f8 <ec_point_init>
    ec_point_init(&pushed_points[2].P2);
 800920e:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 8009212:	f103 0310 	add.w	r3, r3, #16
 8009216:	3b0c      	subs	r3, #12
 8009218:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800921c:	4618      	mov	r0, r3
 800921e:	f002 f8eb 	bl	800b3f8 <ec_point_init>

    theta_couple_curve_t theta_codomain;

    ret = theta_chain_compute_and_eval_randomized(
 8009222:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009226:	f103 0308 	add.w	r3, r3, #8
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8009230:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8009234:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 8009238:	f101 011c 	add.w	r1, r1, #28
 800923c:	2303      	movs	r3, #3
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	f507 53b3 	add.w	r3, r7, #5728	@ 0x1660
 8009244:	f103 0310 	add.w	r3, r3, #16
 8009248:	3b0c      	subs	r3, #12
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	f507 630d 	add.w	r3, r7, #2256	@ 0x8d0
 8009250:	3b2c      	subs	r3, #44	@ 0x2c
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	2300      	movs	r3, #0
 8009256:	f027 fa65 	bl	8030724 <theta_chain_compute_and_eval_randomized>
 800925a:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800925e:	f103 030c 	add.w	r3, r3, #12
 8009262:	6018      	str	r0, [r3, #0]
        exp, &E01, &ker, false, &theta_codomain, pushed_points, sizeof(pushed_points) / sizeof(*pushed_points));
    if (!ret) {
 8009264:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009268:	f103 030c 	add.w	r3, r3, #12
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 8446 	beq.w	8009b00 <dim2id2iso_ideal_to_isogeny_clapotis+0x1b24>
        goto cleanup;
    }

    theta_couple_point_t T1, T2, T1m2;
    T1 = pushed_points[0];
 8009274:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009278:	f2a3 624c 	subw	r2, r3, #1612	@ 0x64c
 800927c:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 8009280:	f103 0310 	add.w	r3, r3, #16
 8009284:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8009288:	4610      	mov	r0, r2
 800928a:	4619      	mov	r1, r3
 800928c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8009290:	461a      	mov	r2, r3
 8009292:	f02c fd84 	bl	8035d9e <memcpy>
    T2 = pushed_points[1];
 8009296:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800929a:	f2a3 726c 	subw	r2, r3, #1900	@ 0x76c
 800929e:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 80092a2:	f103 0310 	add.w	r3, r3, #16
 80092a6:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80092aa:	4610      	mov	r0, r2
 80092ac:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80092b0:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80092b4:	4619      	mov	r1, r3
 80092b6:	f02c fd72 	bl	8035d9e <memcpy>
    T1m2 = pushed_points[2];
 80092ba:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80092be:	f6a3 028c 	subw	r2, r3, #2188	@ 0x88c
 80092c2:	f507 53ee 	add.w	r3, r7, #7616	@ 0x1dc0
 80092c6:	f103 0310 	add.w	r3, r3, #16
 80092ca:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80092ce:	4610      	mov	r0, r2
 80092d0:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80092d4:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80092d8:	4619      	mov	r1, r3
 80092da:	f02c fd60 	bl	8035d9e <memcpy>

    assert(test_point_order_twof(&T1.P2, &theta_codomain.E2, TORSION_EVEN_POWER));
 80092de:	f507 630d 	add.w	r3, r7, #2256	@ 0x8d0
 80092e2:	3b2c      	subs	r3, #44	@ 0x2c
 80092e4:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 80092e8:	f507 63f2 	add.w	r3, r7, #1936	@ 0x790
 80092ec:	3b0c      	subs	r3, #12
 80092ee:	3390      	adds	r3, #144	@ 0x90
 80092f0:	22f8      	movs	r2, #248	@ 0xf8
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fb fdef 	bl	8004ed6 <test_point_order_twof>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <dim2id2iso_ideal_to_isogeny_clapotis+0x1330>
 80092fe:	4b1f      	ldr	r3, [pc, #124]	@ (800937c <dim2id2iso_ideal_to_isogeny_clapotis+0x13a0>)
 8009300:	4a19      	ldr	r2, [pc, #100]	@ (8009368 <dim2id2iso_ideal_to_isogeny_clapotis+0x138c>)
 8009302:	f240 4116 	movw	r1, #1046	@ 0x416
 8009306:	4819      	ldr	r0, [pc, #100]	@ (800936c <dim2id2iso_ideal_to_isogeny_clapotis+0x1390>)
 8009308:	f02b ff96 	bl	8035238 <__assert_func>
    assert(test_point_order_twof(&T1.P1, &theta_codomain.E1, TORSION_EVEN_POWER));
 800930c:	f507 610d 	add.w	r1, r7, #2256	@ 0x8d0
 8009310:	392c      	subs	r1, #44	@ 0x2c
 8009312:	f507 63f2 	add.w	r3, r7, #1936	@ 0x790
 8009316:	3b0c      	subs	r3, #12
 8009318:	22f8      	movs	r2, #248	@ 0xf8
 800931a:	4618      	mov	r0, r3
 800931c:	f7fb fddb 	bl	8004ed6 <test_point_order_twof>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <dim2id2iso_ideal_to_isogeny_clapotis+0x1358>
 8009326:	4b16      	ldr	r3, [pc, #88]	@ (8009380 <dim2id2iso_ideal_to_isogeny_clapotis+0x13a4>)
 8009328:	4a0f      	ldr	r2, [pc, #60]	@ (8009368 <dim2id2iso_ideal_to_isogeny_clapotis+0x138c>)
 800932a:	f240 4117 	movw	r1, #1047	@ 0x417
 800932e:	480f      	ldr	r0, [pc, #60]	@ (800936c <dim2id2iso_ideal_to_isogeny_clapotis+0x1390>)
 8009330:	f02b ff82 	bl	8035238 <__assert_func>
    assert(test_point_order_twof(&T1m2.P2, &theta_codomain.E2, TORSION_EVEN_POWER));
 8009334:	f507 630d 	add.w	r3, r7, #2256	@ 0x8d0
 8009338:	3b2c      	subs	r3, #44	@ 0x2c
 800933a:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800933e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 8009342:	3b0c      	subs	r3, #12
 8009344:	3390      	adds	r3, #144	@ 0x90
 8009346:	22f8      	movs	r2, #248	@ 0xf8
 8009348:	4618      	mov	r0, r3
 800934a:	f7fb fdc4 	bl	8004ed6 <test_point_order_twof>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d119      	bne.n	8009388 <dim2id2iso_ideal_to_isogeny_clapotis+0x13ac>
 8009354:	4b0b      	ldr	r3, [pc, #44]	@ (8009384 <dim2id2iso_ideal_to_isogeny_clapotis+0x13a8>)
 8009356:	4a04      	ldr	r2, [pc, #16]	@ (8009368 <dim2id2iso_ideal_to_isogeny_clapotis+0x138c>)
 8009358:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 800935c:	4803      	ldr	r0, [pc, #12]	@ (800936c <dim2id2iso_ideal_to_isogeny_clapotis+0x1390>)
 800935e:	f02b ff6b 	bl	8035238 <__assert_func>
 8009362:	bf00      	nop
 8009364:	0803724c 	.word	0x0803724c
 8009368:	08036ad8 	.word	0x08036ad8
 800936c:	08036adc 	.word	0x08036adc
 8009370:	0803727c 	.word	0x0803727c
 8009374:	080372b0 	.word	0x080372b0
 8009378:	080372c0 	.word	0x080372c0
 800937c:	080372fc 	.word	0x080372fc
 8009380:	08037344 	.word	0x08037344
 8009384:	0803738c 	.word	0x0803738c

    copy_point(&basis->P, &T1.P1);
 8009388:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800938c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	f507 63f2 	add.w	r3, r7, #1936	@ 0x790
 8009396:	3b0c      	subs	r3, #12
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7fb fd3a 	bl	8004e14 <copy_point>
    copy_point(&basis->Q, &T2.P1);
 80093a0:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80093a4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80093ae:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 80093b2:	3b2c      	subs	r3, #44	@ 0x2c
 80093b4:	4619      	mov	r1, r3
 80093b6:	4610      	mov	r0, r2
 80093b8:	f7fb fd2c 	bl	8004e14 <copy_point>
    copy_point(&basis->PmQ, &T1m2.P1);
 80093bc:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80093c0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80093ca:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 80093ce:	3b0c      	subs	r3, #12
 80093d0:	4619      	mov	r1, r3
 80093d2:	4610      	mov	r0, r2
 80093d4:	f7fb fd1e 	bl	8004e14 <copy_point>
    copy_curve(codomain, &theta_codomain.E1);
 80093d8:	f507 630d 	add.w	r3, r7, #2256	@ 0x8d0
 80093dc:	3b2c      	subs	r3, #44	@ 0x2c
 80093de:	4619      	mov	r1, r3
 80093e0:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80093e4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f7fb fd4d 	bl	8004e88 <copy_curve>

    // using weil pairing to verify that we selected the correct curve
    fp2_t w0, w1;
    // ec_curve_t E0 = CURVE_E0;
    // ec_basis_t bas0 = BASIS_EVEN;
    weil(&w0, TORSION_EVEN_POWER, &bas1.P, &bas1.Q, &bas1.PmQ, &E1);
 80093ee:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80093f2:	f103 0314 	add.w	r3, r3, #20
 80093f6:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80093fa:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80093fe:	f102 0214 	add.w	r2, r2, #20
 8009402:	f507 60a2 	add.w	r0, r7, #1296	@ 0x510
 8009406:	3814      	subs	r0, #20
 8009408:	f507 532f 	add.w	r3, r7, #11200	@ 0x2bc0
 800940c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8009416:	f103 0314 	add.w	r3, r3, #20
 800941a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	460b      	mov	r3, r1
 8009422:	21f8      	movs	r1, #248	@ 0xf8
 8009424:	f7fa f8e0 	bl	80035e8 <weil>
    weil(&w1, TORSION_EVEN_POWER, &basis->P, &basis->Q, &basis->PmQ, codomain);
 8009428:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800942c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009430:	6819      	ldr	r1, [r3, #0]
 8009432:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009436:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 8009440:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009444:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800944e:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 8009452:	381c      	subs	r0, #28
 8009454:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 8009458:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	9201      	str	r2, [sp, #4]
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	4623      	mov	r3, r4
 8009464:	460a      	mov	r2, r1
 8009466:	21f8      	movs	r1, #248	@ 0xf8
 8009468:	f7fa f8be 	bl	80035e8 <weil>

    digit_t digit_d[NWORDS_ORDER] = { 0 };
 800946c:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009470:	f6a3 133c 	subw	r3, r3, #2364	@ 0x93c
 8009474:	4618      	mov	r0, r3
 8009476:	2320      	movs	r3, #32
 8009478:	461a      	mov	r2, r3
 800947a:	2100      	movs	r1, #0
 800947c:	f02c fbc0 	bl	8035c00 <memset>
    ibz_mul(&tmp, d1, u);
 8009480:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009484:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 8009488:	f507 5036 	add.w	r0, r7, #11648	@ 0x2d80
 800948c:	f100 0018 	add.w	r0, r0, #24
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009496:	f103 0320 	add.w	r3, r3, #32
 800949a:	6819      	ldr	r1, [r3, #0]
 800949c:	f013 fde7 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&tmp, &tmp, u);
 80094a0:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80094a4:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 80094a8:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 80094ac:	f101 0118 	add.w	r1, r1, #24
 80094b0:	f507 5036 	add.w	r0, r7, #11648	@ 0x2d80
 80094b4:	f100 0018 	add.w	r0, r0, #24
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	f013 fdd8 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mod(&tmp, &tmp, &TORSION_PLUS_2POWER);
 80094be:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 80094c2:	f101 0118 	add.w	r1, r1, #24
 80094c6:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 80094ca:	f103 0318 	add.w	r3, r3, #24
 80094ce:	4a5a      	ldr	r2, [pc, #360]	@ (8009638 <dim2id2iso_ideal_to_isogeny_clapotis+0x165c>)
 80094d0:	4618      	mov	r0, r3
 80094d2:	f013 fe26 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_to_digit_array(digit_d, &tmp);
 80094d6:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80094da:	3b3c      	subs	r3, #60	@ 0x3c
 80094dc:	2220      	movs	r2, #32
 80094de:	2100      	movs	r1, #0
 80094e0:	4618      	mov	r0, r3
 80094e2:	f02c fb8d 	bl	8035c00 <memset>
 80094e6:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 80094ea:	f102 0218 	add.w	r2, r2, #24
 80094ee:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80094f2:	3b3c      	subs	r3, #60	@ 0x3c
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f014 f852 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    fp2_t test_pow;
    fp2_pow_vartime(&test_pow, &w0, digit_d, NWORDS_ORDER);
 80094fc:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8009500:	3a3c      	subs	r2, #60	@ 0x3c
 8009502:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 8009506:	3914      	subs	r1, #20
 8009508:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 800950c:	3804      	subs	r0, #4
 800950e:	2308      	movs	r3, #8
 8009510:	f009 fea3 	bl	801325a <fp2_pow_vartime>

    // then we have selected the wrong one
    if (!fp2_is_equal(&w1, &test_pow)) {
 8009514:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8009518:	3a04      	subs	r2, #4
 800951a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800951e:	3b1c      	subs	r3, #28
 8009520:	4611      	mov	r1, r2
 8009522:	4618      	mov	r0, r3
 8009524:	f009 fa4e 	bl	80129c4 <fp2_is_equal>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	f040 808c 	bne.w	8009648 <dim2id2iso_ideal_to_isogeny_clapotis+0x166c>
        copy_point(&basis->P, &T1.P2);
 8009530:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009534:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	f507 63f2 	add.w	r3, r7, #1936	@ 0x790
 800953e:	3b0c      	subs	r3, #12
 8009540:	3390      	adds	r3, #144	@ 0x90
 8009542:	4619      	mov	r1, r3
 8009544:	4610      	mov	r0, r2
 8009546:	f7fb fc65 	bl	8004e14 <copy_point>
        copy_point(&basis->Q, &T2.P2);
 800954a:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800954e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8009558:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 800955c:	3b2c      	subs	r3, #44	@ 0x2c
 800955e:	3390      	adds	r3, #144	@ 0x90
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f7fb fc56 	bl	8004e14 <copy_point>
        copy_point(&basis->PmQ, &T1m2.P2);
 8009568:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800956c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8009576:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800957a:	3b0c      	subs	r3, #12
 800957c:	3390      	adds	r3, #144	@ 0x90
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f7fb fc47 	bl	8004e14 <copy_point>
        copy_curve(codomain, &theta_codomain.E2);
 8009586:	f507 630d 	add.w	r3, r7, #2256	@ 0x8d0
 800958a:	3b2c      	subs	r3, #44	@ 0x2c
 800958c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8009590:	4619      	mov	r1, r3
 8009592:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009596:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	f7fb fc74 	bl	8004e88 <copy_curve>

// verifying that the other one is the good one
#ifndef NDEBUG
        ec_curve_t codomain_tmp;
        copy_curve(&codomain_tmp, codomain);
 80095a0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80095a4:	3b34      	subs	r3, #52	@ 0x34
 80095a6:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 80095aa:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80095ae:	6811      	ldr	r1, [r2, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fb fc69 	bl	8004e88 <copy_curve>
        weil(&w1, TORSION_EVEN_POWER, &basis->P, &basis->Q, &basis->PmQ, &codomain_tmp);
 80095b6:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80095ba:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80095be:	6819      	ldr	r1, [r3, #0]
 80095c0:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80095c4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 80095ce:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 80095d2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80095dc:	f507 609a 	add.w	r0, r7, #1232	@ 0x4d0
 80095e0:	381c      	subs	r0, #28
 80095e2:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80095e6:	3b34      	subs	r3, #52	@ 0x34
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	9200      	str	r2, [sp, #0]
 80095ec:	4623      	mov	r3, r4
 80095ee:	460a      	mov	r2, r1
 80095f0:	21f8      	movs	r1, #248	@ 0xf8
 80095f2:	f7f9 fff9 	bl	80035e8 <weil>
        fp2_pow_vartime(&test_pow, &w0, digit_d, NWORDS_ORDER);
 80095f6:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 80095fa:	3a3c      	subs	r2, #60	@ 0x3c
 80095fc:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 8009600:	3914      	subs	r1, #20
 8009602:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 8009606:	3804      	subs	r0, #4
 8009608:	2308      	movs	r3, #8
 800960a:	f009 fe26 	bl	801325a <fp2_pow_vartime>
        assert(fp2_is_equal(&test_pow, &w1));
 800960e:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8009612:	3a1c      	subs	r2, #28
 8009614:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8009618:	3b04      	subs	r3, #4
 800961a:	4611      	mov	r1, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f009 f9d1 	bl	80129c4 <fp2_is_equal>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10f      	bne.n	8009648 <dim2id2iso_ideal_to_isogeny_clapotis+0x166c>
 8009628:	4b04      	ldr	r3, [pc, #16]	@ (800963c <dim2id2iso_ideal_to_isogeny_clapotis+0x1660>)
 800962a:	4a05      	ldr	r2, [pc, #20]	@ (8009640 <dim2id2iso_ideal_to_isogeny_clapotis+0x1664>)
 800962c:	f240 413b 	movw	r1, #1083	@ 0x43b
 8009630:	4804      	ldr	r0, [pc, #16]	@ (8009644 <dim2id2iso_ideal_to_isogeny_clapotis+0x1668>)
 8009632:	f02b fe01 	bl	8035238 <__assert_func>
 8009636:	bf00      	nop
 8009638:	0803ce5c 	.word	0x0803ce5c
 800963c:	080373d4 	.word	0x080373d4
 8009640:	08036ad8 	.word	0x08036ad8
 8009644:	08036adc 	.word	0x08036adc
    }

    // now we apply M / (u * d1) where M is the matrix corresponding to the
    // endomorphism beta1 = phi o dual(phi1) we multiply beta1 by the inverse of
    // (u*d1) mod 2^TORSION_EVEN_POWER
    ibz_mul(&tmp, u, d1);
 8009648:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800964c:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 8009650:	f507 5036 	add.w	r0, r7, #11648	@ 0x2d80
 8009654:	f100 0018 	add.w	r0, r0, #24
 8009658:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 800965c:	f102 0220 	add.w	r2, r2, #32
 8009660:	6812      	ldr	r2, [r2, #0]
 8009662:	6819      	ldr	r1, [r3, #0]
 8009664:	f013 fd03 	bl	801d06e <sqisign_gen_ibz_mul>
    if (index_order1 != 0) {
 8009668:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800966c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d016      	beq.n	80096a4 <dim2id2iso_ideal_to_isogeny_clapotis+0x16c8>
        ibz_mul(&tmp, &tmp, &CONNECTING_IDEALS[index_order1].norm);
 8009676:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800967a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	22dc      	movs	r2, #220	@ 0xdc
 8009682:	fb02 f303 	mul.w	r3, r2, r3
 8009686:	33c8      	adds	r3, #200	@ 0xc8
 8009688:	4abc      	ldr	r2, [pc, #752]	@ (800997c <dim2id2iso_ideal_to_isogeny_clapotis+0x19a0>)
 800968a:	4413      	add	r3, r2
 800968c:	1d1a      	adds	r2, r3, #4
 800968e:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 8009692:	f101 0118 	add.w	r1, r1, #24
 8009696:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 800969a:	f103 0318 	add.w	r3, r3, #24
 800969e:	4618      	mov	r0, r3
 80096a0:	f013 fce5 	bl	801d06e <sqisign_gen_ibz_mul>
    }
    ibz_invmod(&tmp, &tmp, &TORSION_PLUS_2POWER);
 80096a4:	f507 5136 	add.w	r1, r7, #11648	@ 0x2d80
 80096a8:	f101 0118 	add.w	r1, r1, #24
 80096ac:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 80096b0:	f103 0318 	add.w	r3, r3, #24
 80096b4:	4ab2      	ldr	r2, [pc, #712]	@ (8009980 <dim2id2iso_ideal_to_isogeny_clapotis+0x19a4>)
 80096b6:	4618      	mov	r0, r3
 80096b8:	f013 ffa9 	bl	801d60e <sqisign_gen_ibz_invmod>
    ibz_mul(&beta1->coord[0], &beta1->coord[0], &tmp);
 80096bc:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80096c0:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f103 000c 	add.w	r0, r3, #12
 80096ca:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80096ce:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	330c      	adds	r3, #12
 80096d6:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 80096da:	f102 0218 	add.w	r2, r2, #24
 80096de:	4619      	mov	r1, r3
 80096e0:	f013 fcc5 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&beta1->coord[1], &beta1->coord[1], &tmp);
 80096e4:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80096e8:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f103 0018 	add.w	r0, r3, #24
 80096f2:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80096f6:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3318      	adds	r3, #24
 80096fe:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8009702:	f102 0218 	add.w	r2, r2, #24
 8009706:	4619      	mov	r1, r3
 8009708:	f013 fcb1 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&beta1->coord[2], &beta1->coord[2], &tmp);
 800970c:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009710:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800971a:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800971e:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3324      	adds	r3, #36	@ 0x24
 8009726:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 800972a:	f102 0218 	add.w	r2, r2, #24
 800972e:	4619      	mov	r1, r3
 8009730:	f013 fc9d 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&beta1->coord[3], &beta1->coord[3], &tmp);
 8009734:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009738:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009742:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009746:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3330      	adds	r3, #48	@ 0x30
 800974e:	f507 5236 	add.w	r2, r7, #11648	@ 0x2d80
 8009752:	f102 0218 	add.w	r2, r2, #24
 8009756:	4619      	mov	r1, r3
 8009758:	f013 fc89 	bl	801d06e <sqisign_gen_ibz_mul>

    endomorphism_application_even_basis(basis, 0, codomain, beta1, TORSION_EVEN_POWER);
 800975c:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009760:	f6a3 53c4 	subw	r3, r3, #3524	@ 0xdc4
 8009764:	22f8      	movs	r2, #248	@ 0xf8
 8009766:	9200      	str	r2, [sp, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 800976e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8009772:	6812      	ldr	r2, [r2, #0]
 8009774:	2100      	movs	r1, #0
 8009776:	f507 5037 	add.w	r0, r7, #11712	@ 0x2dc0
 800977a:	f100 002c 	add.w	r0, r0, #44	@ 0x2c
 800977e:	6800      	ldr	r0, [r0, #0]
 8009780:	f012 f900 	bl	801b984 <endomorphism_application_even_basis>

#ifndef NDEBUG
    {
        ec_curve_t E0 = CURVE_E0;
 8009784:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8009788:	f6a3 537c 	subw	r3, r3, #3452	@ 0xd7c
 800978c:	4a7d      	ldr	r2, [pc, #500]	@ (8009984 <dim2id2iso_ideal_to_isogeny_clapotis+0x19a8>)
 800978e:	4618      	mov	r0, r3
 8009790:	4611      	mov	r1, r2
 8009792:	f44f 7392 	mov.w	r3, #292	@ 0x124
 8009796:	461a      	mov	r2, r3
 8009798:	f02c fb01 	bl	8035d9e <memcpy>
        ec_curve_t codomain_tmp;
        ec_basis_t bas0 = CURVES_WITH_ENDOMORPHISMS[0].basis_even;
 800979c:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80097a0:	f6a3 3234 	subw	r2, r3, #2868	@ 0xb34
 80097a4:	4b77      	ldr	r3, [pc, #476]	@ (8009984 <dim2id2iso_ideal_to_isogeny_clapotis+0x19a8>)
 80097a6:	4610      	mov	r0, r2
 80097a8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80097ac:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80097b0:	4619      	mov	r1, r3
 80097b2:	f02c faf4 	bl	8035d9e <memcpy>
        copy_curve(&codomain_tmp, codomain);
 80097b6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80097ba:	3b18      	subs	r3, #24
 80097bc:	f507 5237 	add.w	r2, r7, #11712	@ 0x2dc0
 80097c0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80097c4:	6811      	ldr	r1, [r2, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fb fb5e 	bl	8004e88 <copy_curve>
        copy_curve(&E1_tmp, &E1);
 80097cc:	f507 522f 	add.w	r2, r7, #11200	@ 0x2bc0
 80097d0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80097d4:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80097d8:	f103 0310 	add.w	r3, r3, #16
 80097dc:	3b08      	subs	r3, #8
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fb fb51 	bl	8004e88 <copy_curve>
        copy_curve(&E2_tmp, &E2);
 80097e6:	f507 522b 	add.w	r2, r7, #10944	@ 0x2ac0
 80097ea:	f102 0204 	add.w	r2, r2, #4
 80097ee:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 80097f2:	3b1c      	subs	r3, #28
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fb fb46 	bl	8004e88 <copy_curve>
        weil(&w0a, TORSION_EVEN_POWER, &bas0.P, &bas0.Q, &bas0.PmQ, &E0);
 80097fc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8009800:	3b34      	subs	r3, #52	@ 0x34
 8009802:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8009806:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 800980a:	3a34      	subs	r2, #52	@ 0x34
 800980c:	f507 5096 	add.w	r0, r7, #4800	@ 0x12c0
 8009810:	f100 0010 	add.w	r0, r0, #16
 8009814:	3814      	subs	r0, #20
 8009816:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800981a:	3b3c      	subs	r3, #60	@ 0x3c
 800981c:	9301      	str	r3, [sp, #4]
 800981e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8009822:	3b34      	subs	r3, #52	@ 0x34
 8009824:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	460b      	mov	r3, r1
 800982c:	21f8      	movs	r1, #248	@ 0xf8
 800982e:	f7f9 fedb 	bl	80035e8 <weil>
        weil(&w1a, TORSION_EVEN_POWER, &basis->P, &basis->Q, &basis->PmQ, &codomain_tmp);
 8009832:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009836:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800983a:	6819      	ldr	r1, [r3, #0]
 800983c:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009840:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 800984a:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 800984e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8009858:	f507 5094 	add.w	r0, r7, #4736	@ 0x1280
 800985c:	f100 0010 	add.w	r0, r0, #16
 8009860:	381c      	subs	r0, #28
 8009862:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009866:	3b18      	subs	r3, #24
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	9200      	str	r2, [sp, #0]
 800986c:	4623      	mov	r3, r4
 800986e:	460a      	mov	r2, r1
 8009870:	21f8      	movs	r1, #248	@ 0xf8
 8009872:	f7f9 feb9 	bl	80035e8 <weil>
        digit_t tmp_d[2 * NWORDS_ORDER] = { 0 };
 8009876:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800987a:	f6a3 53bc 	subw	r3, r3, #3516	@ 0xdbc
 800987e:	4618      	mov	r0, r3
 8009880:	2340      	movs	r3, #64	@ 0x40
 8009882:	461a      	mov	r2, r3
 8009884:	2100      	movs	r1, #0
 8009886:	f02c f9bb 	bl	8035c00 <memset>
        if (index_order1 != 0) {
 800988a:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800988e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d07d      	beq.n	8009994 <dim2id2iso_ideal_to_isogeny_clapotis+0x19b8>
            copy_basis(&bas1, &CURVES_WITH_ENDOMORPHISMS[index_order1].basis_even);
 8009898:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 800989c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80098a6:	fb02 f303 	mul.w	r3, r2, r3
 80098aa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80098ae:	4a35      	ldr	r2, [pc, #212]	@ (8009984 <dim2id2iso_ideal_to_isogeny_clapotis+0x19a8>)
 80098b0:	4413      	add	r3, r2
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80098b8:	f103 0314 	add.w	r3, r3, #20
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fb fac0 	bl	8004e44 <copy_basis>
            weil(&w0, TORSION_EVEN_POWER, &bas1.P, &bas1.Q, &bas1.PmQ, &E1_tmp);
 80098c4:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80098c8:	f103 0314 	add.w	r3, r3, #20
 80098cc:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80098d0:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80098d4:	f102 0214 	add.w	r2, r2, #20
 80098d8:	f507 60a2 	add.w	r0, r7, #1296	@ 0x510
 80098dc:	3814      	subs	r0, #20
 80098de:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80098e2:	f103 0310 	add.w	r3, r3, #16
 80098e6:	3b08      	subs	r3, #8
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80098ee:	f103 0314 	add.w	r3, r3, #20
 80098f2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	460b      	mov	r3, r1
 80098fa:	21f8      	movs	r1, #248	@ 0xf8
 80098fc:	f7f9 fe74 	bl	80035e8 <weil>
            ibz_to_digit_array(tmp_d, &CONNECTING_IDEALS[index_order1].norm);
 8009900:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009904:	3b3c      	subs	r3, #60	@ 0x3c
 8009906:	2240      	movs	r2, #64	@ 0x40
 8009908:	2100      	movs	r1, #0
 800990a:	4618      	mov	r0, r3
 800990c:	f02c f978 	bl	8035c00 <memset>
 8009910:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8009914:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	22dc      	movs	r2, #220	@ 0xdc
 800991c:	fb02 f303 	mul.w	r3, r2, r3
 8009920:	33c8      	adds	r3, #200	@ 0xc8
 8009922:	4a16      	ldr	r2, [pc, #88]	@ (800997c <dim2id2iso_ideal_to_isogeny_clapotis+0x19a0>)
 8009924:	4413      	add	r3, r2
 8009926:	1d1a      	adds	r2, r3, #4
 8009928:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800992c:	3b3c      	subs	r3, #60	@ 0x3c
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f013 fe35 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
            fp2_pow_vartime(&test_pow, &w0a, tmp_d, 2 * NWORDS_ORDER);
 8009936:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800993a:	3a3c      	subs	r2, #60	@ 0x3c
 800993c:	f507 5196 	add.w	r1, r7, #4800	@ 0x12c0
 8009940:	f101 0110 	add.w	r1, r1, #16
 8009944:	3914      	subs	r1, #20
 8009946:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 800994a:	3804      	subs	r0, #4
 800994c:	2310      	movs	r3, #16
 800994e:	f009 fc84 	bl	801325a <fp2_pow_vartime>
            assert(fp2_is_equal(&test_pow, &w0));
 8009952:	f507 62a2 	add.w	r2, r7, #1296	@ 0x510
 8009956:	3a14      	subs	r2, #20
 8009958:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800995c:	3b04      	subs	r3, #4
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f009 f82f 	bl	80129c4 <fp2_is_equal>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d113      	bne.n	8009994 <dim2id2iso_ideal_to_isogeny_clapotis+0x19b8>
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <dim2id2iso_ideal_to_isogeny_clapotis+0x19ac>)
 800996e:	4a07      	ldr	r2, [pc, #28]	@ (800998c <dim2id2iso_ideal_to_isogeny_clapotis+0x19b0>)
 8009970:	f240 415e 	movw	r1, #1118	@ 0x45e
 8009974:	4806      	ldr	r0, [pc, #24]	@ (8009990 <dim2id2iso_ideal_to_isogeny_clapotis+0x19b4>)
 8009976:	f02b fc5f 	bl	8035238 <__assert_func>
 800997a:	bf00      	nop
 800997c:	0803c834 	.word	0x0803c834
 8009980:	0803ce5c 	.word	0x0803ce5c
 8009984:	08039740 	.word	0x08039740
 8009988:	080373f4 	.word	0x080373f4
 800998c:	08036ad8 	.word	0x08036ad8
 8009990:	08036adc 	.word	0x08036adc
        }
        if (index_order2 != 0) {
 8009994:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8009998:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d06e      	beq.n	8009a80 <dim2id2iso_ideal_to_isogeny_clapotis+0x1aa4>
            copy_basis(&bas2, &CURVES_WITH_ENDOMORPHISMS[index_order2].basis_even);
 80099a2:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 80099a6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80099b8:	4a70      	ldr	r2, [pc, #448]	@ (8009b7c <dim2id2iso_ideal_to_isogeny_clapotis+0x1ba0>)
 80099ba:	4413      	add	r3, r2
 80099bc:	1d1a      	adds	r2, r3, #4
 80099be:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 80099c2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80099c6:	4611      	mov	r1, r2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fb fa3b 	bl	8004e44 <copy_basis>
            weil(&w0, TORSION_EVEN_POWER, &bas2.P, &bas2.Q, &bas2.PmQ, &E2_tmp);
 80099ce:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 80099d2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80099d6:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80099da:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 80099de:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80099e2:	f507 60a2 	add.w	r0, r7, #1296	@ 0x510
 80099e6:	3814      	subs	r0, #20
 80099e8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 80099ec:	3b1c      	subs	r3, #28
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 80099f4:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80099f8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	460b      	mov	r3, r1
 8009a00:	21f8      	movs	r1, #248	@ 0xf8
 8009a02:	f7f9 fdf1 	bl	80035e8 <weil>
            ibz_to_digit_array(tmp_d, &CONNECTING_IDEALS[index_order2].norm);
 8009a06:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009a0a:	3b3c      	subs	r3, #60	@ 0x3c
 8009a0c:	2240      	movs	r2, #64	@ 0x40
 8009a0e:	2100      	movs	r1, #0
 8009a10:	4618      	mov	r0, r3
 8009a12:	f02c f8f5 	bl	8035c00 <memset>
 8009a16:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8009a1a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	22dc      	movs	r2, #220	@ 0xdc
 8009a22:	fb02 f303 	mul.w	r3, r2, r3
 8009a26:	33c8      	adds	r3, #200	@ 0xc8
 8009a28:	4a55      	ldr	r2, [pc, #340]	@ (8009b80 <dim2id2iso_ideal_to_isogeny_clapotis+0x1ba4>)
 8009a2a:	4413      	add	r3, r2
 8009a2c:	1d1a      	adds	r2, r3, #4
 8009a2e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009a32:	3b3c      	subs	r3, #60	@ 0x3c
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f013 fdb2 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
            fp2_pow_vartime(&test_pow, &w0a, tmp_d, 2 * NWORDS_ORDER);
 8009a3c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8009a40:	3a3c      	subs	r2, #60	@ 0x3c
 8009a42:	f507 5196 	add.w	r1, r7, #4800	@ 0x12c0
 8009a46:	f101 0110 	add.w	r1, r1, #16
 8009a4a:	3914      	subs	r1, #20
 8009a4c:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 8009a50:	3804      	subs	r0, #4
 8009a52:	2310      	movs	r3, #16
 8009a54:	f009 fc01 	bl	801325a <fp2_pow_vartime>
            assert(fp2_is_equal(&test_pow, &w0));
 8009a58:	f507 62a2 	add.w	r2, r7, #1296	@ 0x510
 8009a5c:	3a14      	subs	r2, #20
 8009a5e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8009a62:	3b04      	subs	r3, #4
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f008 ffac 	bl	80129c4 <fp2_is_equal>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <dim2id2iso_ideal_to_isogeny_clapotis+0x1aa4>
 8009a72:	4b44      	ldr	r3, [pc, #272]	@ (8009b84 <dim2id2iso_ideal_to_isogeny_clapotis+0x1ba8>)
 8009a74:	4a44      	ldr	r2, [pc, #272]	@ (8009b88 <dim2id2iso_ideal_to_isogeny_clapotis+0x1bac>)
 8009a76:	f240 4165 	movw	r1, #1125	@ 0x465
 8009a7a:	4844      	ldr	r0, [pc, #272]	@ (8009b8c <dim2id2iso_ideal_to_isogeny_clapotis+0x1bb0>)
 8009a7c:	f02b fbdc 	bl	8035238 <__assert_func>
        }
        ibz_to_digit_array(tmp_d, &lideal->norm);
 8009a80:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009a84:	3b3c      	subs	r3, #60	@ 0x3c
 8009a86:	2240      	movs	r2, #64	@ 0x40
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f02c f8b8 	bl	8035c00 <memset>
 8009a90:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009a94:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8009a9e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009aa2:	3b3c      	subs	r3, #60	@ 0x3c
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f013 fd7a 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
        fp2_pow_vartime(&test_pow, &w0a, tmp_d, 2 * NWORDS_ORDER);
 8009aac:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8009ab0:	3a3c      	subs	r2, #60	@ 0x3c
 8009ab2:	f507 5196 	add.w	r1, r7, #4800	@ 0x12c0
 8009ab6:	f101 0110 	add.w	r1, r1, #16
 8009aba:	3914      	subs	r1, #20
 8009abc:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 8009ac0:	3804      	subs	r0, #4
 8009ac2:	2310      	movs	r3, #16
 8009ac4:	f009 fbc9 	bl	801325a <fp2_pow_vartime>
        assert(fp2_is_equal(&test_pow, &w1a));
 8009ac8:	f507 5294 	add.w	r2, r7, #4736	@ 0x1280
 8009acc:	f102 0210 	add.w	r2, r2, #16
 8009ad0:	3a1c      	subs	r2, #28
 8009ad2:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8009ad6:	3b04      	subs	r3, #4
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f008 ff72 	bl	80129c4 <fp2_is_equal>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10d      	bne.n	8009b02 <dim2id2iso_ideal_to_isogeny_clapotis+0x1b26>
 8009ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8009b90 <dim2id2iso_ideal_to_isogeny_clapotis+0x1bb4>)
 8009ae8:	4a27      	ldr	r2, [pc, #156]	@ (8009b88 <dim2id2iso_ideal_to_isogeny_clapotis+0x1bac>)
 8009aea:	f240 4169 	movw	r1, #1129	@ 0x469
 8009aee:	4827      	ldr	r0, [pc, #156]	@ (8009b8c <dim2id2iso_ideal_to_isogeny_clapotis+0x1bb0>)
 8009af0:	f02b fba2 	bl	8035238 <__assert_func>
        goto cleanup;
 8009af4:	bf00      	nop
 8009af6:	e004      	b.n	8009b02 <dim2id2iso_ideal_to_isogeny_clapotis+0x1b26>
        goto cleanup;
 8009af8:	bf00      	nop
 8009afa:	e002      	b.n	8009b02 <dim2id2iso_ideal_to_isogeny_clapotis+0x1b26>
        goto cleanup;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <dim2id2iso_ideal_to_isogeny_clapotis+0x1b26>
        goto cleanup;
 8009b00:	bf00      	nop
    }
#endif

cleanup:
    ibz_finalize(&norm_d);
 8009b02:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8009b06:	f103 0304 	add.w	r3, r3, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f013 fa86 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&test1);
 8009b10:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8009b14:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f013 fa7f 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&test2);
 8009b1e:	f507 5334 	add.w	r3, r7, #11520	@ 0x2d00
 8009b22:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8009b26:	4618      	mov	r0, r3
 8009b28:	f013 fa78 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&target);
 8009b2c:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8009b30:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8009b34:	4618      	mov	r0, r3
 8009b36:	f013 fa71 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&tmp);
 8009b3a:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8009b3e:	f103 0318 	add.w	r3, r3, #24
 8009b42:	4618      	mov	r0, r3
 8009b44:	f013 fa6a 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&two_pow);
 8009b48:	f507 5336 	add.w	r3, r7, #11648	@ 0x2d80
 8009b4c:	f103 030c 	add.w	r3, r3, #12
 8009b50:	4618      	mov	r0, r3
 8009b52:	f013 fa63 	bl	801d01c <sqisign_gen_ibz_finalize>
    quat_alg_elem_finalize(&theta);
 8009b56:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8009b5a:	f103 0310 	add.w	r3, r3, #16
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f005 f924 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    return ret;
 8009b64:	f507 5337 	add.w	r3, r7, #11712	@ 0x2dc0
 8009b68:	f103 030c 	add.w	r3, r3, #12
 8009b6c:	681b      	ldr	r3, [r3, #0]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f507 5737 	add.w	r7, r7, #11712	@ 0x2dc0
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd90      	pop	{r4, r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	08039740 	.word	0x08039740
 8009b80:	0803c834 	.word	0x0803c834
 8009b84:	080373f4 	.word	0x080373f4
 8009b88:	08036ad8 	.word	0x08036ad8
 8009b8c:	08036adc 	.word	0x08036adc
 8009b90:	08037414 	.word	0x08037414

08009b94 <dim2id2iso_arbitrary_isogeny_evaluation>:

int
dim2id2iso_arbitrary_isogeny_evaluation(ec_basis_t *basis, ec_curve_t *codomain, const quat_left_ideal_t *lideal)
{
 8009b94:	b590      	push	{r4, r7, lr}
 8009b96:	b0b7      	sub	sp, #220	@ 0xdc
 8009b98:	af06      	add	r7, sp, #24
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
    int ret;

    quat_alg_elem_t beta1, beta2;
    ibz_t u, v, d1, d2;

    quat_alg_elem_init(&beta1);
 8009ba0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f005 f8eb 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    quat_alg_elem_init(&beta2);
 8009baa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f005 f8e6 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>

    ibz_init(&u);
 8009bb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f013 fa24 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&v);
 8009bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f013 fa1f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&d1);
 8009bc8:	f107 0320 	add.w	r3, r7, #32
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f013 fa1a 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&d2);
 8009bd2:	f107 0314 	add.w	r3, r7, #20
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f013 fa15 	bl	801d006 <sqisign_gen_ibz_init>

    ret = dim2id2iso_ideal_to_isogeny_clapotis(
 8009bdc:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8009be0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8009be4:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8009be8:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8009bec:	4b1b      	ldr	r3, [pc, #108]	@ (8009c5c <dim2id2iso_arbitrary_isogeny_evaluation+0xc8>)
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	9303      	str	r3, [sp, #12]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	9302      	str	r3, [sp, #8]
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	f107 0320 	add.w	r3, r7, #32
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4623      	mov	r3, r4
 8009c0a:	f7fe f9e7 	bl	8007fdc <dim2id2iso_ideal_to_isogeny_clapotis>
 8009c0e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
        &beta1, &beta2, &u, &v, &d1, &d2, codomain, basis, lideal, &QUATALG_PINFTY);

    quat_alg_elem_finalize(&beta1);
 8009c12:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8009c16:	4618      	mov	r0, r3
 8009c18:	f005 f8c8 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    quat_alg_elem_finalize(&beta2);
 8009c1c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009c20:	4618      	mov	r0, r3
 8009c22:	f005 f8c3 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>

    ibz_finalize(&u);
 8009c26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f013 f9f6 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&v);
 8009c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009c34:	4618      	mov	r0, r3
 8009c36:	f013 f9f1 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&d1);
 8009c3a:	f107 0320 	add.w	r3, r7, #32
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f013 f9ec 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&d2);
 8009c44:	f107 0314 	add.w	r3, r7, #20
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f013 f9e7 	bl	801d01c <sqisign_gen_ibz_finalize>

    return ret;
 8009c4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	37c4      	adds	r7, #196	@ 0xc4
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd90      	pop	{r4, r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	0803bf30 	.word	0x0803bf30

08009c60 <sqisign_gen_ibz_mat_4x4_mul>:
#include "internal.h"

// internal helper functions
void
ibz_mat_4x4_mul(ibz_mat_4x4_t *res, const ibz_mat_4x4_t *a, const ibz_mat_4x4_t *b)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b0bd      	sub	sp, #244	@ 0xf4
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
    ibz_mat_4x4_t mat;
    ibz_t prod;
    ibz_init(&prod);
 8009c6c:	f107 0310 	add.w	r3, r7, #16
 8009c70:	4618      	mov	r0, r3
 8009c72:	f013 f9c8 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mat_4x4_init(&mat);
 8009c76:	f107 031c 	add.w	r3, r7, #28
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f005 f959 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    for (int i = 0; i < 4; i++) {
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c86:	e081      	b.n	8009d8c <sqisign_gen_ibz_mat_4x4_mul+0x12c>
        for (int j = 0; j < 4; j++) {
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c8e:	e074      	b.n	8009d7a <sqisign_gen_ibz_mat_4x4_mul+0x11a>
            ibz_set(&(mat[i][j]), 0);
 8009c90:	f107 001c 	add.w	r0, r7, #28
 8009c94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009c98:	461a      	mov	r2, r3
 8009c9a:	0052      	lsls	r2, r2, #1
 8009c9c:	441a      	add	r2, r3
 8009c9e:	0093      	lsls	r3, r2, #2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	440b      	add	r3, r1
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	4413      	add	r3, r2
 8009cb0:	4403      	add	r3, r0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f013 fad4 	bl	801d262 <sqisign_gen_ibz_set>
            for (int k = 0; k < 4; k++) {
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cc0:	e052      	b.n	8009d68 <sqisign_gen_ibz_mat_4x4_mul+0x108>
                ibz_mul(&prod, &((*a)[i][k]), &((*b)[k][j]));
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	0052      	lsls	r2, r2, #1
 8009cca:	441a      	add	r2, r3
 8009ccc:	0093      	lsls	r3, r2, #2
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	440b      	add	r3, r1
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	4413      	add	r3, r2
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	18d0      	adds	r0, r2, r3
 8009ce2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	0052      	lsls	r2, r2, #1
 8009cea:	441a      	add	r2, r3
 8009cec:	0093      	lsls	r3, r2, #2
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	005b      	lsls	r3, r3, #1
 8009cf8:	440b      	add	r3, r1
 8009cfa:	011b      	lsls	r3, r3, #4
 8009cfc:	4413      	add	r3, r2
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	441a      	add	r2, r3
 8009d02:	f107 0310 	add.w	r3, r7, #16
 8009d06:	4601      	mov	r1, r0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f013 f9b0 	bl	801d06e <sqisign_gen_ibz_mul>
                ibz_add(&(mat[i][j]), &(mat[i][j]), &prod);
 8009d0e:	f107 001c 	add.w	r0, r7, #28
 8009d12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d16:	461a      	mov	r2, r3
 8009d18:	0052      	lsls	r2, r2, #1
 8009d1a:	441a      	add	r2, r3
 8009d1c:	0093      	lsls	r3, r2, #2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8009d24:	460b      	mov	r3, r1
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	440b      	add	r3, r1
 8009d2a:	011b      	lsls	r3, r3, #4
 8009d2c:	4413      	add	r3, r2
 8009d2e:	18c4      	adds	r4, r0, r3
 8009d30:	f107 001c 	add.w	r0, r7, #28
 8009d34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d38:	461a      	mov	r2, r3
 8009d3a:	0052      	lsls	r2, r2, #1
 8009d3c:	441a      	add	r2, r3
 8009d3e:	0093      	lsls	r3, r2, #2
 8009d40:	461a      	mov	r2, r3
 8009d42:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8009d46:	460b      	mov	r3, r1
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	440b      	add	r3, r1
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	4413      	add	r3, r2
 8009d50:	4403      	add	r3, r0
 8009d52:	f107 0210 	add.w	r2, r7, #16
 8009d56:	4619      	mov	r1, r3
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f013 f96a 	bl	801d032 <sqisign_gen_ibz_add>
            for (int k = 0; k < 4; k++) {
 8009d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d62:	3301      	adds	r3, #1
 8009d64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d6c:	2b03      	cmp	r3, #3
 8009d6e:	dda8      	ble.n	8009cc2 <sqisign_gen_ibz_mat_4x4_mul+0x62>
        for (int j = 0; j < 4; j++) {
 8009d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d74:	3301      	adds	r3, #1
 8009d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	dd86      	ble.n	8009c90 <sqisign_gen_ibz_mat_4x4_mul+0x30>
    for (int i = 0; i < 4; i++) {
 8009d82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009d86:	3301      	adds	r3, #1
 8009d88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009d8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	f77f af79 	ble.w	8009c88 <sqisign_gen_ibz_mat_4x4_mul+0x28>
            }
        }
    }
    for (int i = 0; i < 4; i++) {
 8009d96:	2300      	movs	r3, #0
 8009d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d9c:	e036      	b.n	8009e0c <sqisign_gen_ibz_mat_4x4_mul+0x1ac>
        for (int j = 0; j < 4; j++) {
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009da4:	e029      	b.n	8009dfa <sqisign_gen_ibz_mat_4x4_mul+0x19a>
            ibz_copy(&((*res)[i][j]), &(mat[i][j]));
 8009da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009daa:	461a      	mov	r2, r3
 8009dac:	0052      	lsls	r2, r2, #1
 8009dae:	441a      	add	r2, r3
 8009db0:	0093      	lsls	r3, r2, #2
 8009db2:	461a      	mov	r2, r3
 8009db4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8009db8:	460b      	mov	r3, r1
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	440b      	add	r3, r1
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	4413      	add	r3, r2
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	18d4      	adds	r4, r2, r3
 8009dc6:	f107 001c 	add.w	r0, r7, #28
 8009dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dce:	461a      	mov	r2, r3
 8009dd0:	0052      	lsls	r2, r2, #1
 8009dd2:	441a      	add	r2, r3
 8009dd4:	0093      	lsls	r3, r2, #2
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	440b      	add	r3, r1
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	4413      	add	r3, r2
 8009de6:	4403      	add	r3, r0
 8009de8:	4619      	mov	r1, r3
 8009dea:	4620      	mov	r0, r4
 8009dec:	f013 fa46 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j < 4; j++) {
 8009df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009df4:	3301      	adds	r3, #1
 8009df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	ddd1      	ble.n	8009da6 <sqisign_gen_ibz_mat_4x4_mul+0x146>
    for (int i = 0; i < 4; i++) {
 8009e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e06:	3301      	adds	r3, #1
 8009e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	ddc4      	ble.n	8009d9e <sqisign_gen_ibz_mat_4x4_mul+0x13e>
        }
    }
    ibz_mat_4x4_finalize(&mat);
 8009e14:	f107 031c 	add.w	r3, r7, #28
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f005 f8b6 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_finalize(&prod);
 8009e1e:	f107 0310 	add.w	r3, r7, #16
 8009e22:	4618      	mov	r0, r3
 8009e24:	f013 f8fa 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8009e28:	bf00      	nop
 8009e2a:	37f4      	adds	r7, #244	@ 0xf4
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd90      	pop	{r4, r7, pc}

08009e30 <sqisign_gen_ibz_vec_4_set>:

// helper functions for lattices
void
ibz_vec_4_set(ibz_vec_4_t *vec, int32_t coord0, int32_t coord1, int32_t coord2, int32_t coord3)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	603b      	str	r3, [r7, #0]
    ibz_set(&((*vec)[0]), coord0);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	68b9      	ldr	r1, [r7, #8]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f013 fa0d 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&((*vec)[1]), coord1);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	330c      	adds	r3, #12
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f013 fa07 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&((*vec)[2]), coord2);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3318      	adds	r3, #24
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f013 fa01 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&((*vec)[3]), coord3);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3324      	adds	r3, #36	@ 0x24
 8009e64:	69b9      	ldr	r1, [r7, #24]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f013 f9fb 	bl	801d262 <sqisign_gen_ibz_set>
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <sqisign_gen_ibz_vec_4_copy>:

void
ibz_vec_4_copy(ibz_vec_4_t *new, const ibz_vec_4_t *vec)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	e013      	b.n	8009eac <sqisign_gen_ibz_vec_4_copy+0x38>
        ibz_copy(&((*new)[i]), &((*vec)[i]));
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4613      	mov	r3, r2
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	18d0      	adds	r0, r2, r3
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	4613      	mov	r3, r2
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f013 f9eb 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	dde8      	ble.n	8009e84 <sqisign_gen_ibz_vec_4_copy+0x10>
    }
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <sqisign_gen_ibz_vec_4_copy_ibz>:

void
ibz_vec_4_copy_ibz(ibz_vec_4_t *res, const ibz_t *coord0, const ibz_t *coord1, const ibz_t *coord2, const ibz_t *coord3)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
    ibz_copy(&((*res)[0]), coord0);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f013 f9d4 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*res)[1]), coord1);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	330c      	adds	r3, #12
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f013 f9ce 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*res)[2]), coord2);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3318      	adds	r3, #24
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f013 f9c8 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&((*res)[3]), coord3);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3324      	adds	r3, #36	@ 0x24
 8009ef0:	69b9      	ldr	r1, [r7, #24]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f013 f9c2 	bl	801d27c <sqisign_gen_ibz_copy>
}
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <sqisign_gen_ibz_vec_4_content>:

void
ibz_vec_4_content(ibz_t *content, const ibz_vec_4_t *v)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
    ibz_gcd(content, &((*v)[0]), &((*v)[1]));
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	330c      	adds	r3, #12
 8009f10:	461a      	mov	r2, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f013 fb6c 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    ibz_gcd(content, &((*v)[2]), content);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	3318      	adds	r3, #24
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f013 fb65 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    ibz_gcd(content, &((*v)[3]), content);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	3324      	adds	r3, #36	@ 0x24
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f013 fb5e 	bl	801d5f0 <sqisign_gen_ibz_gcd>
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <sqisign_gen_ibz_vec_4_add>:
    }
}

void
ibz_vec_4_add(ibz_vec_4_t *res, const ibz_vec_4_t *a, const ibz_vec_4_t *b)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
    ibz_add(&((*res)[0]), &((*a)[0]), &((*b)[0]));
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68b9      	ldr	r1, [r7, #8]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f013 f86f 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_add(&((*res)[1]), &((*a)[1]), &((*b)[1]));
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f103 000c 	add.w	r0, r3, #12
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f103 010c 	add.w	r1, r3, #12
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	330c      	adds	r3, #12
 8009f64:	461a      	mov	r2, r3
 8009f66:	f013 f864 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_add(&((*res)[2]), &((*a)[2]), &((*b)[2]));
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f103 0018 	add.w	r0, r3, #24
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f103 0118 	add.w	r1, r3, #24
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3318      	adds	r3, #24
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f013 f859 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_add(&((*res)[3]), &((*a)[3]), &((*b)[3]));
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3324      	adds	r3, #36	@ 0x24
 8009f90:	461a      	mov	r2, r3
 8009f92:	f013 f84e 	bl	801d032 <sqisign_gen_ibz_add>
}
 8009f96:	bf00      	nop
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <sqisign_gen_ibz_vec_4_is_zero>:
    ibz_sub(&((*res)[3]), &((*a)[3]), &((*b)[3]));
}

int
ibz_vec_4_is_zero(const ibz_vec_4_t *x)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
    int res = 1;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 4; i++) {
 8009faa:	2300      	movs	r3, #0
 8009fac:	60bb      	str	r3, [r7, #8]
 8009fae:	e010      	b.n	8009fd2 <sqisign_gen_ibz_vec_4_is_zero+0x34>
        res &= ibz_is_zero(&((*x)[i]));
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f013 f905 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 4; i++) {
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60bb      	str	r3, [r7, #8]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	ddeb      	ble.n	8009fb0 <sqisign_gen_ibz_vec_4_is_zero+0x12>
    }
    return (res);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <sqisign_gen_ibz_vec_4_linear_combination>:
ibz_vec_4_linear_combination(ibz_vec_4_t *lc,
                             const ibz_t *coeff_a,
                             const ibz_vec_4_t *vec_a,
                             const ibz_t *coeff_b,
                             const ibz_vec_4_t *vec_b)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b096      	sub	sp, #88	@ 0x58
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	603b      	str	r3, [r7, #0]
    ibz_t prod;
    ibz_vec_4_t sums;
    ibz_vec_4_init(&sums);
 8009ff0:	f107 0314 	add.w	r3, r7, #20
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f004 ff0c 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_init(&prod);
 8009ffa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009ffe:	4618      	mov	r0, r3
 800a000:	f013 f801 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 4; i++) {
 800a004:	2300      	movs	r3, #0
 800a006:	657b      	str	r3, [r7, #84]	@ 0x54
 800a008:	e037      	b.n	800a07a <sqisign_gen_ibz_vec_4_linear_combination+0x98>
        ibz_mul(&(sums[i]), coeff_a, &((*vec_a)[i]));
 800a00a:	f107 0114 	add.w	r1, r7, #20
 800a00e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a010:	4613      	mov	r3, r2
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	4413      	add	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	18c8      	adds	r0, r1, r3
 800a01a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a01c:	4613      	mov	r3, r2
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	4413      	add	r3, r2
 800a028:	461a      	mov	r2, r3
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	f013 f81f 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&prod, coeff_b, &((*vec_b)[i]));
 800a030:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a032:	4613      	mov	r3, r2
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a03c:	441a      	add	r2, r3
 800a03e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	4618      	mov	r0, r3
 800a046:	f013 f812 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_add(&(sums[i]), &(sums[i]), &prod);
 800a04a:	f107 0114 	add.w	r1, r7, #20
 800a04e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a050:	4613      	mov	r3, r2
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	18c8      	adds	r0, r1, r3
 800a05a:	f107 0114 	add.w	r1, r7, #20
 800a05e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a060:	4613      	mov	r3, r2
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a06e:	4619      	mov	r1, r3
 800a070:	f012 ffdf 	bl	801d032 <sqisign_gen_ibz_add>
    for (int i = 0; i < 4; i++) {
 800a074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a076:	3301      	adds	r3, #1
 800a078:	657b      	str	r3, [r7, #84]	@ 0x54
 800a07a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	ddc4      	ble.n	800a00a <sqisign_gen_ibz_vec_4_linear_combination+0x28>
    }
    for (int i = 0; i < 4; i++) {
 800a080:	2300      	movs	r3, #0
 800a082:	653b      	str	r3, [r7, #80]	@ 0x50
 800a084:	e014      	b.n	800a0b0 <sqisign_gen_ibz_vec_4_linear_combination+0xce>
        ibz_copy(&((*lc)[i]), &(sums[i]));
 800a086:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a088:	4613      	mov	r3, r2
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	18d0      	adds	r0, r2, r3
 800a094:	f107 0114 	add.w	r1, r7, #20
 800a098:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a09a:	4613      	mov	r3, r2
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	4413      	add	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	440b      	add	r3, r1
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	f013 f8e9 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 800a0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	dde7      	ble.n	800a086 <sqisign_gen_ibz_vec_4_linear_combination+0xa4>
    }
    ibz_finalize(&prod);
 800a0b6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f012 ffae 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&sums);
 800a0c0:	f107 0314 	add.w	r3, r7, #20
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f004 fec0 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 800a0ca:	bf00      	nop
 800a0cc:	3758      	adds	r7, #88	@ 0x58
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <sqisign_gen_ibz_vec_4_scalar_mul>:

void
ibz_vec_4_scalar_mul(ibz_vec_4_t *prod, const ibz_t *scalar, const ibz_vec_4_t *vec)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
 800a0e2:	e014      	b.n	800a10e <sqisign_gen_ibz_vec_4_scalar_mul+0x3c>
        ibz_mul(&((*prod)[i]), &((*vec)[i]), scalar);
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	4413      	add	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	18d0      	adds	r0, r2, r3
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	4413      	add	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	4413      	add	r3, r2
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4619      	mov	r1, r3
 800a104:	f012 ffb3 	bl	801d06e <sqisign_gen_ibz_mul>
    for (int i = 0; i < 4; i++) {
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	3301      	adds	r3, #1
 800a10c:	617b      	str	r3, [r7, #20]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b03      	cmp	r3, #3
 800a112:	dde7      	ble.n	800a0e4 <sqisign_gen_ibz_vec_4_scalar_mul+0x12>
    }
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <sqisign_gen_ibz_vec_4_scalar_div>:

int
ibz_vec_4_scalar_div(ibz_vec_4_t *quot, const ibz_t *scalar, const ibz_vec_4_t *vec)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b08a      	sub	sp, #40	@ 0x28
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
    int res = 1;
 800a12a:	2301      	movs	r3, #1
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
    ibz_t r;
    ibz_init(&r);
 800a12e:	f107 0314 	add.w	r3, r7, #20
 800a132:	4618      	mov	r0, r3
 800a134:	f012 ff67 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 4; i++) {
 800a138:	2300      	movs	r3, #0
 800a13a:	623b      	str	r3, [r7, #32]
 800a13c:	e024      	b.n	800a188 <sqisign_gen_ibz_vec_4_scalar_div+0x6a>
        ibz_div(&((*quot)[i]), &r, &((*vec)[i]), scalar);
 800a13e:	6a3a      	ldr	r2, [r7, #32]
 800a140:	4613      	mov	r3, r2
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	18d0      	adds	r0, r2, r3
 800a14c:	6a3a      	ldr	r2, [r7, #32]
 800a14e:	4613      	mov	r3, r2
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	441a      	add	r2, r3
 800a15a:	f107 0114 	add.w	r1, r7, #20
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	f012 ffae 	bl	801d0c0 <sqisign_gen_ibz_div>
        res = res && ibz_is_zero(&r);
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <sqisign_gen_ibz_vec_4_scalar_div+0x60>
 800a16a:	f107 0314 	add.w	r3, r7, #20
 800a16e:	4618      	mov	r0, r3
 800a170:	f013 f82d 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <sqisign_gen_ibz_vec_4_scalar_div+0x60>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e000      	b.n	800a180 <sqisign_gen_ibz_vec_4_scalar_div+0x62>
 800a17e:	2300      	movs	r3, #0
 800a180:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 4; i++) {
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	3301      	adds	r3, #1
 800a186:	623b      	str	r3, [r7, #32]
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	ddd7      	ble.n	800a13e <sqisign_gen_ibz_vec_4_scalar_div+0x20>
    }
    ibz_finalize(&r);
 800a18e:	f107 0314 	add.w	r3, r7, #20
 800a192:	4618      	mov	r0, r3
 800a194:	f012 ff42 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (res);
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3728      	adds	r7, #40	@ 0x28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <sqisign_gen_ibz_mat_4x4_copy>:

void
ibz_mat_4x4_copy(ibz_mat_4x4_t *new, const ibz_mat_4x4_t *mat)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	e02a      	b.n	800a208 <sqisign_gen_ibz_mat_4x4_copy+0x66>
        for (int j = 0; j < 4; j++) {
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60bb      	str	r3, [r7, #8]
 800a1b6:	e021      	b.n	800a1fc <sqisign_gen_ibz_mat_4x4_copy+0x5a>
            ibz_copy(&((*new)[i][j]), &((*mat)[i][j]));
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	0052      	lsls	r2, r2, #1
 800a1be:	441a      	add	r2, r3
 800a1c0:	0093      	lsls	r3, r2, #2
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	68f9      	ldr	r1, [r7, #12]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	005b      	lsls	r3, r3, #1
 800a1ca:	440b      	add	r3, r1
 800a1cc:	011b      	lsls	r3, r3, #4
 800a1ce:	4413      	add	r3, r2
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	18d0      	adds	r0, r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	0052      	lsls	r2, r2, #1
 800a1da:	441a      	add	r2, r3
 800a1dc:	0093      	lsls	r3, r2, #2
 800a1de:	461a      	mov	r2, r3
 800a1e0:	68f9      	ldr	r1, [r7, #12]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	440b      	add	r3, r1
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	4413      	add	r3, r2
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f013 f843 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j < 4; j++) {
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	60bb      	str	r3, [r7, #8]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	ddda      	ble.n	800a1b8 <sqisign_gen_ibz_mat_4x4_copy+0x16>
    for (int i = 0; i < 4; i++) {
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	ddd1      	ble.n	800a1b2 <sqisign_gen_ibz_mat_4x4_copy+0x10>
        }
    }
}
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <sqisign_gen_ibz_mat_4x4_transpose>:
    }
}

void
ibz_mat_4x4_transpose(ibz_mat_4x4_t *transposed, const ibz_mat_4x4_t *mat)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b0b4      	sub	sp, #208	@ 0xd0
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
    ibz_mat_4x4_t work;
    ibz_mat_4x4_init(&work);
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4618      	mov	r0, r3
 800a228:	f004 fe83 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    for (int i = 0; i < 4; i++) {
 800a22c:	2300      	movs	r3, #0
 800a22e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a232:	e035      	b.n	800a2a0 <sqisign_gen_ibz_mat_4x4_transpose+0x88>
        for (int j = 0; j < 4; j++) {
 800a234:	2300      	movs	r3, #0
 800a236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a23a:	e028      	b.n	800a28e <sqisign_gen_ibz_mat_4x4_transpose+0x76>
            ibz_copy(&(work[i][j]), &((*mat)[j][i]));
 800a23c:	f107 0008 	add.w	r0, r7, #8
 800a240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a244:	461a      	mov	r2, r3
 800a246:	0052      	lsls	r2, r2, #1
 800a248:	441a      	add	r2, r3
 800a24a:	0093      	lsls	r3, r2, #2
 800a24c:	461a      	mov	r2, r3
 800a24e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 800a252:	460b      	mov	r3, r1
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	440b      	add	r3, r1
 800a258:	011b      	lsls	r3, r3, #4
 800a25a:	4413      	add	r3, r2
 800a25c:	4418      	add	r0, r3
 800a25e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a262:	461a      	mov	r2, r3
 800a264:	0052      	lsls	r2, r2, #1
 800a266:	441a      	add	r2, r3
 800a268:	0093      	lsls	r3, r2, #2
 800a26a:	461a      	mov	r2, r3
 800a26c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800a270:	460b      	mov	r3, r1
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	440b      	add	r3, r1
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	4413      	add	r3, r2
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4413      	add	r3, r2
 800a27e:	4619      	mov	r1, r3
 800a280:	f012 fffc 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j < 4; j++) {
 800a284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a288:	3301      	adds	r3, #1
 800a28a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a28e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a292:	2b03      	cmp	r3, #3
 800a294:	ddd2      	ble.n	800a23c <sqisign_gen_ibz_mat_4x4_transpose+0x24>
    for (int i = 0; i < 4; i++) {
 800a296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a29a:	3301      	adds	r3, #1
 800a29c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a2a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	ddc5      	ble.n	800a234 <sqisign_gen_ibz_mat_4x4_transpose+0x1c>
        }
    }
    ibz_mat_4x4_copy(transposed, &work);
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff ff77 	bl	800a1a2 <sqisign_gen_ibz_mat_4x4_copy>
    ibz_mat_4x4_finalize(&work);
 800a2b4:	f107 0308 	add.w	r3, r7, #8
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f004 fe66 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
}
 800a2be:	bf00      	nop
 800a2c0:	37d0      	adds	r7, #208	@ 0xd0
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <sqisign_gen_ibz_mat_4x4_identity>:
    }
}

void
ibz_mat_4x4_identity(ibz_mat_4x4_t *id)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	e028      	b.n	800a326 <sqisign_gen_ibz_mat_4x4_identity+0x60>
        for (int j = 0; j < 4; j++) {
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60bb      	str	r3, [r7, #8]
 800a2d8:	e014      	b.n	800a304 <sqisign_gen_ibz_mat_4x4_identity+0x3e>
            ibz_set(&((*id)[i][j]), 0);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	0052      	lsls	r2, r2, #1
 800a2e0:	441a      	add	r2, r3
 800a2e2:	0093      	lsls	r3, r2, #2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	440b      	add	r3, r1
 800a2ee:	011b      	lsls	r3, r3, #4
 800a2f0:	4413      	add	r3, r2
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f012 ffb2 	bl	801d262 <sqisign_gen_ibz_set>
        for (int j = 0; j < 4; j++) {
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	3301      	adds	r3, #1
 800a302:	60bb      	str	r3, [r7, #8]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b03      	cmp	r3, #3
 800a308:	dde7      	ble.n	800a2da <sqisign_gen_ibz_mat_4x4_identity+0x14>
        }
        ibz_set(&((*id)[i][i]), 1);
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4613      	mov	r3, r2
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	4413      	add	r3, r2
 800a318:	2101      	movs	r1, #1
 800a31a:	4618      	mov	r0, r3
 800a31c:	f012 ffa1 	bl	801d262 <sqisign_gen_ibz_set>
    for (int i = 0; i < 4; i++) {
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3301      	adds	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b03      	cmp	r3, #3
 800a32a:	ddd3      	ble.n	800a2d4 <sqisign_gen_ibz_mat_4x4_identity+0xe>
    }
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>:
    return (!res);
}

void
ibz_mat_4x4_scalar_mul(ibz_mat_4x4_t *prod, const ibz_t *scalar, const ibz_mat_4x4_t *mat)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]
 800a346:	e02b      	b.n	800a3a0 <sqisign_gen_ibz_mat_4x4_scalar_mul+0x6a>
        for (int j = 0; j < 4; j++) {
 800a348:	2300      	movs	r3, #0
 800a34a:	613b      	str	r3, [r7, #16]
 800a34c:	e022      	b.n	800a394 <sqisign_gen_ibz_mat_4x4_scalar_mul+0x5e>
            ibz_mul(&((*prod)[i][j]), &((*mat)[i][j]), scalar);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	461a      	mov	r2, r3
 800a352:	0052      	lsls	r2, r2, #1
 800a354:	441a      	add	r2, r3
 800a356:	0093      	lsls	r3, r2, #2
 800a358:	461a      	mov	r2, r3
 800a35a:	6979      	ldr	r1, [r7, #20]
 800a35c:	460b      	mov	r3, r1
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	440b      	add	r3, r1
 800a362:	011b      	lsls	r3, r3, #4
 800a364:	4413      	add	r3, r2
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	18d0      	adds	r0, r2, r3
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	461a      	mov	r2, r3
 800a36e:	0052      	lsls	r2, r2, #1
 800a370:	441a      	add	r2, r3
 800a372:	0093      	lsls	r3, r2, #2
 800a374:	461a      	mov	r2, r3
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	460b      	mov	r3, r1
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	440b      	add	r3, r1
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	4413      	add	r3, r2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4413      	add	r3, r2
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4619      	mov	r1, r3
 800a38a:	f012 fe70 	bl	801d06e <sqisign_gen_ibz_mul>
        for (int j = 0; j < 4; j++) {
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	3301      	adds	r3, #1
 800a392:	613b      	str	r3, [r7, #16]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	2b03      	cmp	r3, #3
 800a398:	ddd9      	ble.n	800a34e <sqisign_gen_ibz_mat_4x4_scalar_mul+0x18>
    for (int i = 0; i < 4; i++) {
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	3301      	adds	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	ddd0      	ble.n	800a348 <sqisign_gen_ibz_mat_4x4_scalar_mul+0x12>
        }
    }
}
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <sqisign_gen_ibz_mat_4x4_gcd>:

void
ibz_mat_4x4_gcd(ibz_t *gcd, const ibz_mat_4x4_t *mat)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
    ibz_t d;
    ibz_init(&d);
 800a3ba:	f107 030c 	add.w	r3, r7, #12
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f012 fe21 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_copy(&d, &((*mat)[0][0]));
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f012 ff55 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61fb      	str	r3, [r7, #28]
 800a3d6:	e020      	b.n	800a41a <sqisign_gen_ibz_mat_4x4_gcd+0x6a>
        for (int j = 0; j < 4; j++) {
 800a3d8:	2300      	movs	r3, #0
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	e017      	b.n	800a40e <sqisign_gen_ibz_mat_4x4_gcd+0x5e>
            ibz_gcd(&d, &d, &((*mat)[i][j]));
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	0052      	lsls	r2, r2, #1
 800a3e4:	441a      	add	r2, r3
 800a3e6:	0093      	lsls	r3, r2, #2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	69f9      	ldr	r1, [r7, #28]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	440b      	add	r3, r1
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	4413      	add	r3, r2
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	441a      	add	r2, r3
 800a3fa:	f107 010c 	add.w	r1, r7, #12
 800a3fe:	f107 030c 	add.w	r3, r7, #12
 800a402:	4618      	mov	r0, r3
 800a404:	f013 f8f4 	bl	801d5f0 <sqisign_gen_ibz_gcd>
        for (int j = 0; j < 4; j++) {
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	3301      	adds	r3, #1
 800a40c:	61bb      	str	r3, [r7, #24]
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	2b03      	cmp	r3, #3
 800a412:	dde4      	ble.n	800a3de <sqisign_gen_ibz_mat_4x4_gcd+0x2e>
    for (int i = 0; i < 4; i++) {
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	3301      	adds	r3, #1
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	dddb      	ble.n	800a3d8 <sqisign_gen_ibz_mat_4x4_gcd+0x28>
        }
    }
    ibz_copy(gcd, &d);
 800a420:	f107 030c 	add.w	r3, r7, #12
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f012 ff28 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_finalize(&d);
 800a42c:	f107 030c 	add.w	r3, r7, #12
 800a430:	4618      	mov	r0, r3
 800a432:	f012 fdf3 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 800a436:	bf00      	nop
 800a438:	3720      	adds	r7, #32
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <sqisign_gen_ibz_mat_4x4_scalar_div>:

int
ibz_mat_4x4_scalar_div(ibz_mat_4x4_t *quot, const ibz_t *scalar, const ibz_mat_4x4_t *mat)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b08a      	sub	sp, #40	@ 0x28
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	607a      	str	r2, [r7, #4]
    int res = 1;
 800a44a:	2301      	movs	r3, #1
 800a44c:	627b      	str	r3, [r7, #36]	@ 0x24
    ibz_t r;
    ibz_init(&r);
 800a44e:	f107 0310 	add.w	r3, r7, #16
 800a452:	4618      	mov	r0, r3
 800a454:	f012 fdd7 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 4; i++) {
 800a458:	2300      	movs	r3, #0
 800a45a:	623b      	str	r3, [r7, #32]
 800a45c:	e03b      	b.n	800a4d6 <sqisign_gen_ibz_mat_4x4_scalar_div+0x98>
        for (int j = 0; j < 4; j++) {
 800a45e:	2300      	movs	r3, #0
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	e032      	b.n	800a4ca <sqisign_gen_ibz_mat_4x4_scalar_div+0x8c>
            ibz_div(&((*quot)[i][j]), &r, &((*mat)[i][j]), scalar);
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	461a      	mov	r2, r3
 800a468:	0052      	lsls	r2, r2, #1
 800a46a:	441a      	add	r2, r3
 800a46c:	0093      	lsls	r3, r2, #2
 800a46e:	461a      	mov	r2, r3
 800a470:	6a39      	ldr	r1, [r7, #32]
 800a472:	460b      	mov	r3, r1
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	440b      	add	r3, r1
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	4413      	add	r3, r2
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	18d0      	adds	r0, r2, r3
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	461a      	mov	r2, r3
 800a484:	0052      	lsls	r2, r2, #1
 800a486:	441a      	add	r2, r3
 800a488:	0093      	lsls	r3, r2, #2
 800a48a:	461a      	mov	r2, r3
 800a48c:	6a39      	ldr	r1, [r7, #32]
 800a48e:	460b      	mov	r3, r1
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	440b      	add	r3, r1
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	4413      	add	r3, r2
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	441a      	add	r2, r3
 800a49c:	f107 0110 	add.w	r1, r7, #16
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f012 fe0d 	bl	801d0c0 <sqisign_gen_ibz_div>
            res = res && ibz_is_zero(&r);
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d009      	beq.n	800a4c0 <sqisign_gen_ibz_mat_4x4_scalar_div+0x82>
 800a4ac:	f107 0310 	add.w	r3, r7, #16
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f012 fe8c 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <sqisign_gen_ibz_mat_4x4_scalar_div+0x82>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e000      	b.n	800a4c2 <sqisign_gen_ibz_mat_4x4_scalar_div+0x84>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int j = 0; j < 4; j++) {
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	ddc9      	ble.n	800a464 <sqisign_gen_ibz_mat_4x4_scalar_div+0x26>
    for (int i = 0; i < 4; i++) {
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	623b      	str	r3, [r7, #32]
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	ddc0      	ble.n	800a45e <sqisign_gen_ibz_mat_4x4_scalar_div+0x20>
        }
    }
    ibz_finalize(&r);
 800a4dc:	f107 0310 	add.w	r3, r7, #16
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f012 fd9b 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (res);
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3728      	adds	r7, #40	@ 0x28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <sqisign_gen_ibz_inv_dim4_make_coeff_pmp>:
                            const ibz_t *a2,
                            const ibz_t *b1,
                            const ibz_t *b2,
                            const ibz_t *c1,
                            const ibz_t *c2)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08a      	sub	sp, #40	@ 0x28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
    ibz_t prod, sum;
    ibz_init(&prod);
 800a4fe:	f107 031c 	add.w	r3, r7, #28
 800a502:	4618      	mov	r0, r3
 800a504:	f012 fd7f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&sum);
 800a508:	f107 0310 	add.w	r3, r7, #16
 800a50c:	4618      	mov	r0, r3
 800a50e:	f012 fd7a 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mul(&sum, a1, a2);
 800a512:	f107 0310 	add.w	r3, r7, #16
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f012 fda7 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&prod, b1, b2);
 800a520:	f107 031c 	add.w	r3, r7, #28
 800a524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	4618      	mov	r0, r3
 800a52a:	f012 fda0 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&sum, &sum, &prod);
 800a52e:	f107 021c 	add.w	r2, r7, #28
 800a532:	f107 0110 	add.w	r1, r7, #16
 800a536:	f107 0310 	add.w	r3, r7, #16
 800a53a:	4618      	mov	r0, r3
 800a53c:	f012 fd88 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&prod, c1, c2);
 800a540:	f107 031c 	add.w	r3, r7, #28
 800a544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a546:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a548:	4618      	mov	r0, r3
 800a54a:	f012 fd90 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(coeff, &sum, &prod);
 800a54e:	f107 021c 	add.w	r2, r7, #28
 800a552:	f107 0310 	add.w	r3, r7, #16
 800a556:	4619      	mov	r1, r3
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f012 fd6a 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_finalize(&prod);
 800a55e:	f107 031c 	add.w	r3, r7, #28
 800a562:	4618      	mov	r0, r3
 800a564:	f012 fd5a 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&sum);
 800a568:	f107 0310 	add.w	r3, r7, #16
 800a56c:	4618      	mov	r0, r3
 800a56e:	f012 fd55 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 800a572:	bf00      	nop
 800a574:	3728      	adds	r7, #40	@ 0x28
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <sqisign_gen_ibz_inv_dim4_make_coeff_mpm>:
                            const ibz_t *a2,
                            const ibz_t *b1,
                            const ibz_t *b2,
                            const ibz_t *c1,
                            const ibz_t *c2)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b08a      	sub	sp, #40	@ 0x28
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	603b      	str	r3, [r7, #0]
    ibz_t prod, sum;
    ibz_init(&prod);
 800a588:	f107 031c 	add.w	r3, r7, #28
 800a58c:	4618      	mov	r0, r3
 800a58e:	f012 fd3a 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&sum);
 800a592:	f107 0310 	add.w	r3, r7, #16
 800a596:	4618      	mov	r0, r3
 800a598:	f012 fd35 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mul(&sum, b1, b2);
 800a59c:	f107 0310 	add.w	r3, r7, #16
 800a5a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f012 fd62 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&prod, a1, a2);
 800a5aa:	f107 031c 	add.w	r3, r7, #28
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f012 fd5b 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(&sum, &sum, &prod);
 800a5b8:	f107 021c 	add.w	r2, r7, #28
 800a5bc:	f107 0110 	add.w	r1, r7, #16
 800a5c0:	f107 0310 	add.w	r3, r7, #16
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f012 fd43 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&prod, c1, c2);
 800a5ca:	f107 031c 	add.w	r3, r7, #28
 800a5ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f012 fd4b 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(coeff, &sum, &prod);
 800a5d8:	f107 021c 	add.w	r2, r7, #28
 800a5dc:	f107 0310 	add.w	r3, r7, #16
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f012 fd34 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_finalize(&prod);
 800a5e8:	f107 031c 	add.w	r3, r7, #28
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f012 fd15 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&sum);
 800a5f2:	f107 0310 	add.w	r3, r7, #16
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f012 fd10 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 800a5fc:	bf00      	nop
 800a5fe:	3728      	adds	r7, #40	@ 0x28
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>:

// Method from https://www.geometrictools.com/Documentation/LaplaceExpansionTheorem.pdf 3rd of May
// 2023, 16h15 CEST
int
ibz_mat_4x4_inv_with_det_as_denom(ibz_mat_4x4_t *inv, ibz_t *det, const ibz_mat_4x4_t *mat)
{
 800a604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a606:	b0eb      	sub	sp, #428	@ 0x1ac
 800a608:	af04      	add	r7, sp, #16
 800a60a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a60e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800a612:	6018      	str	r0, [r3, #0]
 800a614:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a618:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a61c:	6019      	str	r1, [r3, #0]
 800a61e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a622:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a626:	601a      	str	r2, [r3, #0]
    ibz_t prod, work_det;
    ibz_mat_4x4_t work;
    ibz_t s[6];
    ibz_t c[6];
    for (int i = 0; i < 6; i++) {
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800a62e:	e01c      	b.n	800a66a <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x66>
        ibz_init(&(s[i]));
 800a630:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800a634:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800a638:	4613      	mov	r3, r2
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	4413      	add	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	440b      	add	r3, r1
 800a642:	4618      	mov	r0, r3
 800a644:	f012 fcdf 	bl	801d006 <sqisign_gen_ibz_init>
        ibz_init(&(c[i]));
 800a648:	f107 0110 	add.w	r1, r7, #16
 800a64c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800a650:	4613      	mov	r3, r2
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	4413      	add	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	440b      	add	r3, r1
 800a65a:	4618      	mov	r0, r3
 800a65c:	f012 fcd3 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 6; i++) {
 800a660:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800a664:	3301      	adds	r3, #1
 800a666:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800a66a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800a66e:	2b05      	cmp	r3, #5
 800a670:	ddde      	ble.n	800a630 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x2c>
    }
    ibz_mat_4x4_init(&work);
 800a672:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a676:	4618      	mov	r0, r3
 800a678:	f004 fc5b 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_init(&prod);
 800a67c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a680:	4618      	mov	r0, r3
 800a682:	f012 fcc0 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&work_det);
 800a686:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a68a:	4618      	mov	r0, r3
 800a68c:	f012 fcbb 	bl	801d006 <sqisign_gen_ibz_init>

    // compute some 2x2 minors, store them in s and c
    for (int i = 0; i < 3; i++) {
 800a690:	2300      	movs	r3, #0
 800a692:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800a696:	e073      	b.n	800a780 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x17c>
        ibz_mat_2x2_det_from_ibz(&(s[i]), &((*mat)[0][0]), &((*mat)[0][i + 1]), &((*mat)[1][0]), &((*mat)[1][i + 1]));
 800a698:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800a69c:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	4413      	add	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	18c8      	adds	r0, r1, r3
 800a6aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a6ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a6b2:	681c      	ldr	r4, [r3, #0]
 800a6b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a6be:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	680a      	ldr	r2, [r1, #0]
 800a6cc:	18d5      	adds	r5, r2, r3
 800a6ce:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a6d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f103 0630 	add.w	r6, r3, #48	@ 0x30
 800a6dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a6e6:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	3330      	adds	r3, #48	@ 0x30
 800a6f4:	680a      	ldr	r2, [r1, #0]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4633      	mov	r3, r6
 800a6fc:	462a      	mov	r2, r5
 800a6fe:	4621      	mov	r1, r4
 800a700:	f7fa fa06 	bl	8004b10 <sqisign_gen_ibz_mat_2x2_det_from_ibz>
        ibz_mat_2x2_det_from_ibz(&(c[i]), &((*mat)[2][0]), &((*mat)[2][i + 1]), &((*mat)[3][0]), &((*mat)[3][i + 1]));
 800a704:	f107 0110 	add.w	r1, r7, #16
 800a708:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800a70c:	4613      	mov	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	18c8      	adds	r0, r1, r3
 800a716:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a71a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 800a724:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a72e:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a732:	4613      	mov	r3, r2
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	3360      	adds	r3, #96	@ 0x60
 800a73c:	680a      	ldr	r2, [r1, #0]
 800a73e:	18d5      	adds	r5, r2, r3
 800a740:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a744:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f103 0690 	add.w	r6, r3, #144	@ 0x90
 800a74e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a758:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a75c:	4613      	mov	r3, r2
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	3390      	adds	r3, #144	@ 0x90
 800a766:	680a      	ldr	r2, [r1, #0]
 800a768:	4413      	add	r3, r2
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4633      	mov	r3, r6
 800a76e:	462a      	mov	r2, r5
 800a770:	4621      	mov	r1, r4
 800a772:	f7fa f9cd 	bl	8004b10 <sqisign_gen_ibz_mat_2x2_det_from_ibz>
    for (int i = 0; i < 3; i++) {
 800a776:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a77a:	3301      	adds	r3, #1
 800a77c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800a780:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a784:	2b02      	cmp	r3, #2
 800a786:	dd87      	ble.n	800a698 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x94>
    }
    for (int i = 0; i < 2; i++) {
 800a788:	2300      	movs	r3, #0
 800a78a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800a78e:	e077      	b.n	800a880 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x27c>
        ibz_mat_2x2_det_from_ibz(
            &(s[3 + i]), &((*mat)[0][1]), &((*mat)[0][2 + i]), &((*mat)[1][1]), &((*mat)[1][2 + i]));
 800a790:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a794:	1cda      	adds	r2, r3, #3
        ibz_mat_2x2_det_from_ibz(
 800a796:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800a79a:	4613      	mov	r3, r2
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	18c8      	adds	r0, r1, r3
 800a7a4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a7a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f103 040c 	add.w	r4, r3, #12
            &(s[3 + i]), &((*mat)[0][1]), &((*mat)[0][2 + i]), &((*mat)[1][1]), &((*mat)[1][2 + i]));
 800a7b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a7b6:	1c9a      	adds	r2, r3, #2
        ibz_mat_2x2_det_from_ibz(
 800a7b8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a7bc:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	4413      	add	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	680a      	ldr	r2, [r1, #0]
 800a7ca:	18d5      	adds	r5, r2, r3
 800a7cc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a7d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f103 063c 	add.w	r6, r3, #60	@ 0x3c
            &(s[3 + i]), &((*mat)[0][1]), &((*mat)[0][2 + i]), &((*mat)[1][1]), &((*mat)[1][2 + i]));
 800a7da:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a7de:	1c9a      	adds	r2, r3, #2
        ibz_mat_2x2_det_from_ibz(
 800a7e0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a7e4:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	3330      	adds	r3, #48	@ 0x30
 800a7f2:	680a      	ldr	r2, [r1, #0]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	4633      	mov	r3, r6
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f7fa f987 	bl	8004b10 <sqisign_gen_ibz_mat_2x2_det_from_ibz>
        ibz_mat_2x2_det_from_ibz(
            &(c[3 + i]), &((*mat)[2][1]), &((*mat)[2][2 + i]), &((*mat)[3][1]), &((*mat)[3][2 + i]));
 800a802:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a806:	1cda      	adds	r2, r3, #3
        ibz_mat_2x2_det_from_ibz(
 800a808:	f107 0110 	add.w	r1, r7, #16
 800a80c:	4613      	mov	r3, r2
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	18c8      	adds	r0, r1, r3
 800a816:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a81a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
            &(c[3 + i]), &((*mat)[2][1]), &((*mat)[2][2 + i]), &((*mat)[3][1]), &((*mat)[3][2 + i]));
 800a824:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a828:	1c9a      	adds	r2, r3, #2
        ibz_mat_2x2_det_from_ibz(
 800a82a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a82e:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a832:	4613      	mov	r3, r2
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	4413      	add	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	3360      	adds	r3, #96	@ 0x60
 800a83c:	680a      	ldr	r2, [r1, #0]
 800a83e:	18d5      	adds	r5, r2, r3
 800a840:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a844:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f103 069c 	add.w	r6, r3, #156	@ 0x9c
            &(c[3 + i]), &((*mat)[2][1]), &((*mat)[2][2 + i]), &((*mat)[3][1]), &((*mat)[3][2 + i]));
 800a84e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a852:	1c9a      	adds	r2, r3, #2
        ibz_mat_2x2_det_from_ibz(
 800a854:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a858:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800a85c:	4613      	mov	r3, r2
 800a85e:	005b      	lsls	r3, r3, #1
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	3390      	adds	r3, #144	@ 0x90
 800a866:	680a      	ldr	r2, [r1, #0]
 800a868:	4413      	add	r3, r2
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	4633      	mov	r3, r6
 800a86e:	462a      	mov	r2, r5
 800a870:	4621      	mov	r1, r4
 800a872:	f7fa f94d 	bl	8004b10 <sqisign_gen_ibz_mat_2x2_det_from_ibz>
    for (int i = 0; i < 2; i++) {
 800a876:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a87a:	3301      	adds	r3, #1
 800a87c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800a880:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a884:	2b01      	cmp	r3, #1
 800a886:	dd83      	ble.n	800a790 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x18c>
    }
    ibz_mat_2x2_det_from_ibz(&(s[5]), &((*mat)[0][2]), &((*mat)[0][3]), &((*mat)[1][2]), &((*mat)[1][3]));
 800a888:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a88c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f103 0118 	add.w	r1, r3, #24
 800a896:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a89a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800a8a4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a8a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f103 0548 	add.w	r5, r3, #72	@ 0x48
 800a8b2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a8b6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3354      	adds	r3, #84	@ 0x54
 800a8be:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a8c2:	f102 003c 	add.w	r0, r2, #60	@ 0x3c
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	f7fa f920 	bl	8004b10 <sqisign_gen_ibz_mat_2x2_det_from_ibz>
    ibz_mat_2x2_det_from_ibz(&(c[5]), &((*mat)[2][2]), &((*mat)[2][3]), &((*mat)[3][2]), &((*mat)[3][3]));
 800a8d0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a8d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800a8de:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a8e2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 800a8ec:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a8f0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f103 05a8 	add.w	r5, r3, #168	@ 0xa8
 800a8fa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a8fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	33b4      	adds	r3, #180	@ 0xb4
 800a906:	f107 0210 	add.w	r2, r7, #16
 800a90a:	f102 003c 	add.w	r0, r2, #60	@ 0x3c
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	462b      	mov	r3, r5
 800a912:	4622      	mov	r2, r4
 800a914:	f7fa f8fc 	bl	8004b10 <sqisign_gen_ibz_mat_2x2_det_from_ibz>

    // compute det
    ibz_set(&work_det, 0);
 800a918:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a91c:	2100      	movs	r1, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f012 fc9f 	bl	801d262 <sqisign_gen_ibz_set>
    for (int i = 0; i < 6; i++) {
 800a924:	2300      	movs	r3, #0
 800a926:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800a92a:	e039      	b.n	800a9a0 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x39c>
        ibz_mul(&prod, &(s[i]), &(c[5 - i]));
 800a92c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800a930:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 800a934:	4613      	mov	r3, r2
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	18c8      	adds	r0, r1, r3
 800a93e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800a942:	f1c3 0205 	rsb	r2, r3, #5
 800a946:	f107 0110 	add.w	r1, r7, #16
 800a94a:	4613      	mov	r3, r2
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	18ca      	adds	r2, r1, r3
 800a954:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a958:	4601      	mov	r1, r0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f012 fb87 	bl	801d06e <sqisign_gen_ibz_mul>
        if ((i != 1) && (i != 4)) {
 800a960:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800a964:	2b01      	cmp	r3, #1
 800a966:	d00d      	beq.n	800a984 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x380>
 800a968:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800a96c:	2b04      	cmp	r3, #4
 800a96e:	d009      	beq.n	800a984 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x380>
            ibz_add(&work_det, &work_det, &prod);
 800a970:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800a974:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800a978:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a97c:	4618      	mov	r0, r3
 800a97e:	f012 fb58 	bl	801d032 <sqisign_gen_ibz_add>
 800a982:	e008      	b.n	800a996 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x392>
        } else {
            ibz_sub(&work_det, &work_det, &prod);
 800a984:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800a988:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800a98c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a990:	4618      	mov	r0, r3
 800a992:	f012 fb5d 	bl	801d050 <sqisign_gen_ibz_sub>
    for (int i = 0; i < 6; i++) {
 800a996:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800a99a:	3301      	adds	r3, #1
 800a99c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800a9a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800a9a4:	2b05      	cmp	r3, #5
 800a9a6:	ddc1      	ble.n	800a92c <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x328>
        }
    }
    // compute transposed adjugate
    for (int j = 0; j < 4; j++) {
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800a9ae:	e30c      	b.n	800afca <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x9c6>
        for (int k = 0; k < 2; k++) {
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800a9b6:	e171      	b.n	800ac9c <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x698>
            if ((k + j + 1) % 2 == 1) {
 800a9b8:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800a9bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	bfb8      	it	lt
 800a9cc:	425b      	neglt	r3, r3
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	f040 80b0 	bne.w	800ab34 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x530>
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800a9d4:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 800a9d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800a9dc:	461a      	mov	r2, r3
 800a9de:	0052      	lsls	r2, r2, #1
 800a9e0:	441a      	add	r2, r3
 800a9e2:	0093      	lsls	r3, r2, #2
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	440b      	add	r3, r1
 800a9f0:	011b      	lsls	r3, r3, #4
 800a9f2:	4413      	add	r3, r2
 800a9f4:	18c5      	adds	r5, r0, r3
                                            &((*mat)[1 - k][(j == 0)]),
 800a9f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800a9fa:	f1c3 0101 	rsb	r1, r3, #1
 800a9fe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bf0c      	ite	eq
 800aa06:	2301      	moveq	r3, #1
 800aa08:	2300      	movne	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	461c      	mov	r4, r3
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800aa0e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800aa12:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 800aa16:	4622      	mov	r2, r4
 800aa18:	0052      	lsls	r2, r2, #1
 800aa1a:	4422      	add	r2, r4
 800aa1c:	0093      	lsls	r3, r2, #2
 800aa1e:	461a      	mov	r2, r3
 800aa20:	460b      	mov	r3, r1
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	440b      	add	r3, r1
 800aa26:	011b      	lsls	r3, r3, #4
 800aa28:	4413      	add	r3, r2
 800aa2a:	6802      	ldr	r2, [r0, #0]
 800aa2c:	18d6      	adds	r6, r2, r3
                                            &(c[6 - j - (j == 0)]),
 800aa2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aa32:	f1c3 0306 	rsb	r3, r3, #6
 800aa36:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	bf0c      	ite	eq
 800aa3e:	2201      	moveq	r2, #1
 800aa40:	2200      	movne	r2, #0
 800aa42:	b2d2      	uxtb	r2, r2
 800aa44:	1a9a      	subs	r2, r3, r2
 800aa46:	f107 0110 	add.w	r1, r7, #16
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	005b      	lsls	r3, r3, #1
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	eb01 0c03 	add.w	ip, r1, r3
                                            &((*mat)[1 - k][2 - (j > 1)]),
 800aa56:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800aa5a:	f1c3 0101 	rsb	r1, r3, #1
 800aa5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	dd01      	ble.n	800aa6a <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x466>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x468>
 800aa6a:	2302      	movs	r3, #2
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800aa6c:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800aa70:	f5a2 70ca 	sub.w	r0, r2, #404	@ 0x194
 800aa74:	461a      	mov	r2, r3
 800aa76:	0052      	lsls	r2, r2, #1
 800aa78:	441a      	add	r2, r3
 800aa7a:	0093      	lsls	r3, r2, #2
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	460b      	mov	r3, r1
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	440b      	add	r3, r1
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	4413      	add	r3, r2
 800aa88:	6802      	ldr	r2, [r0, #0]
 800aa8a:	eb02 0e03 	add.w	lr, r2, r3
                                            &(c[4 - j - (j == 1)]),
 800aa8e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aa92:	f1c3 0304 	rsb	r3, r3, #4
 800aa96:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800aa9a:	2a01      	cmp	r2, #1
 800aa9c:	bf0c      	ite	eq
 800aa9e:	2201      	moveq	r2, #1
 800aaa0:	2200      	movne	r2, #0
 800aaa2:	b2d2      	uxtb	r2, r2
 800aaa4:	1a9a      	subs	r2, r3, r2
 800aaa6:	f107 0110 	add.w	r1, r7, #16
 800aaaa:	4613      	mov	r3, r2
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	18c8      	adds	r0, r1, r3
                                            &((*mat)[1 - k][3 - (j == 3)]),
 800aab4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800aab8:	f1c3 0101 	rsb	r1, r3, #1
 800aabc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d101      	bne.n	800aac8 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x4c4>
 800aac4:	2302      	movs	r3, #2
 800aac6:	e000      	b.n	800aaca <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x4c6>
 800aac8:	2303      	movs	r3, #3
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800aaca:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800aace:	f5a2 74ca 	sub.w	r4, r2, #404	@ 0x194
 800aad2:	461a      	mov	r2, r3
 800aad4:	0052      	lsls	r2, r2, #1
 800aad6:	441a      	add	r2, r3
 800aad8:	0093      	lsls	r3, r2, #2
 800aada:	461a      	mov	r2, r3
 800aadc:	460b      	mov	r3, r1
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	440b      	add	r3, r1
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	4413      	add	r3, r2
 800aae6:	6822      	ldr	r2, [r4, #0]
 800aae8:	18d1      	adds	r1, r2, r3
                                            &(c[3 - j - (j == 1) - (j == 2)]));
 800aaea:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aaee:	f1c3 0303 	rsb	r3, r3, #3
 800aaf2:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800aaf6:	2a01      	cmp	r2, #1
 800aaf8:	bf0c      	ite	eq
 800aafa:	2201      	moveq	r2, #1
 800aafc:	2200      	movne	r2, #0
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	1a9b      	subs	r3, r3, r2
 800ab02:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800ab06:	2a02      	cmp	r2, #2
 800ab08:	bf0c      	ite	eq
 800ab0a:	2201      	moveq	r2, #1
 800ab0c:	2200      	movne	r2, #0
 800ab0e:	b2d2      	uxtb	r2, r2
 800ab10:	1a9a      	subs	r2, r3, r2
 800ab12:	f107 0410 	add.w	r4, r7, #16
 800ab16:	4613      	mov	r3, r2
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4423      	add	r3, r4
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800ab20:	9302      	str	r3, [sp, #8]
 800ab22:	9101      	str	r1, [sp, #4]
 800ab24:	9000      	str	r0, [sp, #0]
 800ab26:	4673      	mov	r3, lr
 800ab28:	4662      	mov	r2, ip
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7ff fcdf 	bl	800a4f0 <sqisign_gen_ibz_inv_dim4_make_coeff_pmp>
 800ab32:	e0ae      	b.n	800ac92 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x68e>
            } else {
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800ab34:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 800ab38:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	0052      	lsls	r2, r2, #1
 800ab40:	441a      	add	r2, r3
 800ab42:	0093      	lsls	r3, r2, #2
 800ab44:	461a      	mov	r2, r3
 800ab46:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	440b      	add	r3, r1
 800ab50:	011b      	lsls	r3, r3, #4
 800ab52:	4413      	add	r3, r2
 800ab54:	18c5      	adds	r5, r0, r3
                                            &((*mat)[1 - k][(j == 0)]),
 800ab56:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800ab5a:	f1c3 0101 	rsb	r1, r3, #1
 800ab5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	bf0c      	ite	eq
 800ab66:	2301      	moveq	r3, #1
 800ab68:	2300      	movne	r3, #0
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	461c      	mov	r4, r3
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800ab6e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800ab72:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 800ab76:	4622      	mov	r2, r4
 800ab78:	0052      	lsls	r2, r2, #1
 800ab7a:	4422      	add	r2, r4
 800ab7c:	0093      	lsls	r3, r2, #2
 800ab7e:	461a      	mov	r2, r3
 800ab80:	460b      	mov	r3, r1
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	440b      	add	r3, r1
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	4413      	add	r3, r2
 800ab8a:	6802      	ldr	r2, [r0, #0]
 800ab8c:	18d6      	adds	r6, r2, r3
                                            &(c[6 - j - (j == 0)]),
 800ab8e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ab92:	f1c3 0306 	rsb	r3, r3, #6
 800ab96:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800ab9a:	2a00      	cmp	r2, #0
 800ab9c:	bf0c      	ite	eq
 800ab9e:	2201      	moveq	r2, #1
 800aba0:	2200      	movne	r2, #0
 800aba2:	b2d2      	uxtb	r2, r2
 800aba4:	1a9a      	subs	r2, r3, r2
 800aba6:	f107 0110 	add.w	r1, r7, #16
 800abaa:	4613      	mov	r3, r2
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	eb01 0c03 	add.w	ip, r1, r3
                                            &((*mat)[1 - k][2 - (j > 1)]),
 800abb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800abba:	f1c3 0101 	rsb	r1, r3, #1
 800abbe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	dd01      	ble.n	800abca <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x5c6>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e000      	b.n	800abcc <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x5c8>
 800abca:	2302      	movs	r3, #2
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800abcc:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800abd0:	f5a2 70ca 	sub.w	r0, r2, #404	@ 0x194
 800abd4:	461a      	mov	r2, r3
 800abd6:	0052      	lsls	r2, r2, #1
 800abd8:	441a      	add	r2, r3
 800abda:	0093      	lsls	r3, r2, #2
 800abdc:	461a      	mov	r2, r3
 800abde:	460b      	mov	r3, r1
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	440b      	add	r3, r1
 800abe4:	011b      	lsls	r3, r3, #4
 800abe6:	4413      	add	r3, r2
 800abe8:	6802      	ldr	r2, [r0, #0]
 800abea:	eb02 0e03 	add.w	lr, r2, r3
                                            &(c[4 - j - (j == 1)]),
 800abee:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800abf2:	f1c3 0304 	rsb	r3, r3, #4
 800abf6:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800abfa:	2a01      	cmp	r2, #1
 800abfc:	bf0c      	ite	eq
 800abfe:	2201      	moveq	r2, #1
 800ac00:	2200      	movne	r2, #0
 800ac02:	b2d2      	uxtb	r2, r2
 800ac04:	1a9a      	subs	r2, r3, r2
 800ac06:	f107 0110 	add.w	r1, r7, #16
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	18c8      	adds	r0, r1, r3
                                            &((*mat)[1 - k][3 - (j == 3)]),
 800ac14:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800ac18:	f1c3 0101 	rsb	r1, r3, #1
 800ac1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d101      	bne.n	800ac28 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x624>
 800ac24:	2302      	movs	r3, #2
 800ac26:	e000      	b.n	800ac2a <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x626>
 800ac28:	2303      	movs	r3, #3
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800ac2a:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800ac2e:	f5a2 74ca 	sub.w	r4, r2, #404	@ 0x194
 800ac32:	461a      	mov	r2, r3
 800ac34:	0052      	lsls	r2, r2, #1
 800ac36:	441a      	add	r2, r3
 800ac38:	0093      	lsls	r3, r2, #2
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	440b      	add	r3, r1
 800ac42:	011b      	lsls	r3, r3, #4
 800ac44:	4413      	add	r3, r2
 800ac46:	6822      	ldr	r2, [r4, #0]
 800ac48:	18d1      	adds	r1, r2, r3
                                            &(c[3 - j - (j == 1) - (j == 2)]));
 800ac4a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ac4e:	f1c3 0303 	rsb	r3, r3, #3
 800ac52:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800ac56:	2a01      	cmp	r2, #1
 800ac58:	bf0c      	ite	eq
 800ac5a:	2201      	moveq	r2, #1
 800ac5c:	2200      	movne	r2, #0
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	1a9b      	subs	r3, r3, r2
 800ac62:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800ac66:	2a02      	cmp	r2, #2
 800ac68:	bf0c      	ite	eq
 800ac6a:	2201      	moveq	r2, #1
 800ac6c:	2200      	movne	r2, #0
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	1a9a      	subs	r2, r3, r2
 800ac72:	f107 0410 	add.w	r4, r7, #16
 800ac76:	4613      	mov	r3, r2
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4423      	add	r3, r4
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800ac80:	9302      	str	r3, [sp, #8]
 800ac82:	9101      	str	r1, [sp, #4]
 800ac84:	9000      	str	r0, [sp, #0]
 800ac86:	4673      	mov	r3, lr
 800ac88:	4662      	mov	r2, ip
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f7ff fc74 	bl	800a57a <sqisign_gen_ibz_inv_dim4_make_coeff_mpm>
        for (int k = 0; k < 2; k++) {
 800ac92:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800ac96:	3301      	adds	r3, #1
 800ac98:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800ac9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	f77f ae89 	ble.w	800a9b8 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x3b4>
            }
        }
        for (int k = 2; k < 4; k++) {
 800aca6:	2302      	movs	r3, #2
 800aca8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800acac:	e183      	b.n	800afb6 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x9b2>
            if ((k + j + 1) % 2 == 1) {
 800acae:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800acb2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800acb6:	4413      	add	r3, r2
 800acb8:	3301      	adds	r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	bfb8      	it	lt
 800acc2:	425b      	neglt	r3, r3
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	f040 80b9 	bne.w	800ae3c <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x838>
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800acca:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 800acce:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800acd2:	461a      	mov	r2, r3
 800acd4:	0052      	lsls	r2, r2, #1
 800acd6:	441a      	add	r2, r3
 800acd8:	0093      	lsls	r3, r2, #2
 800acda:	461a      	mov	r2, r3
 800acdc:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800ace0:	460b      	mov	r3, r1
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	440b      	add	r3, r1
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	4413      	add	r3, r2
 800acea:	18c5      	adds	r5, r0, r3
                                            &((*mat)[3 - (k == 3)][(j == 0)]),
 800acec:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d101      	bne.n	800acf8 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x6f4>
 800acf4:	2102      	movs	r1, #2
 800acf6:	e000      	b.n	800acfa <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x6f6>
 800acf8:	2103      	movs	r1, #3
 800acfa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	bf0c      	ite	eq
 800ad02:	2301      	moveq	r3, #1
 800ad04:	2300      	movne	r3, #0
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	461c      	mov	r4, r3
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800ad0a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800ad0e:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 800ad12:	4622      	mov	r2, r4
 800ad14:	0052      	lsls	r2, r2, #1
 800ad16:	4422      	add	r2, r4
 800ad18:	0093      	lsls	r3, r2, #2
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	440b      	add	r3, r1
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	4413      	add	r3, r2
 800ad26:	6802      	ldr	r2, [r0, #0]
 800ad28:	18d6      	adds	r6, r2, r3
                                            &(s[6 - j - (j == 0)]),
 800ad2a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ad2e:	f1c3 0306 	rsb	r3, r3, #6
 800ad32:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	bf0c      	ite	eq
 800ad3a:	2201      	moveq	r2, #1
 800ad3c:	2200      	movne	r2, #0
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	1a9a      	subs	r2, r3, r2
 800ad42:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800ad46:	4613      	mov	r3, r2
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	eb01 0c03 	add.w	ip, r1, r3
                                            &((*mat)[3 - (k == 3)][2 - (j > 1)]),
 800ad52:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	d101      	bne.n	800ad5e <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x75a>
 800ad5a:	2102      	movs	r1, #2
 800ad5c:	e000      	b.n	800ad60 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x75c>
 800ad5e:	2103      	movs	r1, #3
 800ad60:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	dd01      	ble.n	800ad6c <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x768>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e000      	b.n	800ad6e <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x76a>
 800ad6c:	2302      	movs	r3, #2
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800ad6e:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800ad72:	f5a2 70ca 	sub.w	r0, r2, #404	@ 0x194
 800ad76:	461a      	mov	r2, r3
 800ad78:	0052      	lsls	r2, r2, #1
 800ad7a:	441a      	add	r2, r3
 800ad7c:	0093      	lsls	r3, r2, #2
 800ad7e:	461a      	mov	r2, r3
 800ad80:	460b      	mov	r3, r1
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	440b      	add	r3, r1
 800ad86:	011b      	lsls	r3, r3, #4
 800ad88:	4413      	add	r3, r2
 800ad8a:	6802      	ldr	r2, [r0, #0]
 800ad8c:	eb02 0e03 	add.w	lr, r2, r3
                                            &(s[4 - j - (j == 1)]),
 800ad90:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ad94:	f1c3 0304 	rsb	r3, r3, #4
 800ad98:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800ad9c:	2a01      	cmp	r2, #1
 800ad9e:	bf0c      	ite	eq
 800ada0:	2201      	moveq	r2, #1
 800ada2:	2200      	movne	r2, #0
 800ada4:	b2d2      	uxtb	r2, r2
 800ada6:	1a9a      	subs	r2, r3, r2
 800ada8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800adac:	4613      	mov	r3, r2
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	18c8      	adds	r0, r1, r3
                                            &((*mat)[3 - (k == 3)][3 - (j == 3)]),
 800adb6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d101      	bne.n	800adc2 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x7be>
 800adbe:	2102      	movs	r1, #2
 800adc0:	e000      	b.n	800adc4 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x7c0>
 800adc2:	2103      	movs	r1, #3
 800adc4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d101      	bne.n	800add0 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x7cc>
 800adcc:	2302      	movs	r3, #2
 800adce:	e000      	b.n	800add2 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x7ce>
 800add0:	2303      	movs	r3, #3
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800add2:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800add6:	f5a2 74ca 	sub.w	r4, r2, #404	@ 0x194
 800adda:	461a      	mov	r2, r3
 800addc:	0052      	lsls	r2, r2, #1
 800adde:	441a      	add	r2, r3
 800ade0:	0093      	lsls	r3, r2, #2
 800ade2:	461a      	mov	r2, r3
 800ade4:	460b      	mov	r3, r1
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	440b      	add	r3, r1
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	4413      	add	r3, r2
 800adee:	6822      	ldr	r2, [r4, #0]
 800adf0:	18d1      	adds	r1, r2, r3
                                            &(s[3 - j - (j == 1) - (j == 2)]));
 800adf2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800adf6:	f1c3 0303 	rsb	r3, r3, #3
 800adfa:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800adfe:	2a01      	cmp	r2, #1
 800ae00:	bf0c      	ite	eq
 800ae02:	2201      	moveq	r2, #1
 800ae04:	2200      	movne	r2, #0
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800ae0e:	2a02      	cmp	r2, #2
 800ae10:	bf0c      	ite	eq
 800ae12:	2201      	moveq	r2, #1
 800ae14:	2200      	movne	r2, #0
 800ae16:	b2d2      	uxtb	r2, r2
 800ae18:	1a9a      	subs	r2, r3, r2
 800ae1a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ae1e:	4613      	mov	r3, r2
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4423      	add	r3, r4
                ibz_inv_dim4_make_coeff_pmp(&(work[j][k]),
 800ae28:	9302      	str	r3, [sp, #8]
 800ae2a:	9101      	str	r1, [sp, #4]
 800ae2c:	9000      	str	r0, [sp, #0]
 800ae2e:	4673      	mov	r3, lr
 800ae30:	4662      	mov	r2, ip
 800ae32:	4631      	mov	r1, r6
 800ae34:	4628      	mov	r0, r5
 800ae36:	f7ff fb5b 	bl	800a4f0 <sqisign_gen_ibz_inv_dim4_make_coeff_pmp>
 800ae3a:	e0b7      	b.n	800afac <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x9a8>
            } else {
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800ae3c:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 800ae40:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800ae44:	461a      	mov	r2, r3
 800ae46:	0052      	lsls	r2, r2, #1
 800ae48:	441a      	add	r2, r3
 800ae4a:	0093      	lsls	r3, r2, #2
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800ae52:	460b      	mov	r3, r1
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	440b      	add	r3, r1
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	4413      	add	r3, r2
 800ae5c:	18c5      	adds	r5, r0, r3
                                            &((*mat)[3 - (k == 3)][(j == 0)]),
 800ae5e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d101      	bne.n	800ae6a <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x866>
 800ae66:	2102      	movs	r1, #2
 800ae68:	e000      	b.n	800ae6c <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x868>
 800ae6a:	2103      	movs	r1, #3
 800ae6c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bf0c      	ite	eq
 800ae74:	2301      	moveq	r3, #1
 800ae76:	2300      	movne	r3, #0
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	461c      	mov	r4, r3
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800ae7c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800ae80:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 800ae84:	4622      	mov	r2, r4
 800ae86:	0052      	lsls	r2, r2, #1
 800ae88:	4422      	add	r2, r4
 800ae8a:	0093      	lsls	r3, r2, #2
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	460b      	mov	r3, r1
 800ae90:	005b      	lsls	r3, r3, #1
 800ae92:	440b      	add	r3, r1
 800ae94:	011b      	lsls	r3, r3, #4
 800ae96:	4413      	add	r3, r2
 800ae98:	6802      	ldr	r2, [r0, #0]
 800ae9a:	18d6      	adds	r6, r2, r3
                                            &(s[6 - j - (j == 0)]),
 800ae9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aea0:	f1c3 0306 	rsb	r3, r3, #6
 800aea4:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	bf0c      	ite	eq
 800aeac:	2201      	moveq	r2, #1
 800aeae:	2200      	movne	r2, #0
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	1a9a      	subs	r2, r3, r2
 800aeb4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800aeb8:	4613      	mov	r3, r2
 800aeba:	005b      	lsls	r3, r3, #1
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	eb01 0c03 	add.w	ip, r1, r3
                                            &((*mat)[3 - (k == 3)][2 - (j > 1)]),
 800aec4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d101      	bne.n	800aed0 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x8cc>
 800aecc:	2102      	movs	r1, #2
 800aece:	e000      	b.n	800aed2 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x8ce>
 800aed0:	2103      	movs	r1, #3
 800aed2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	dd01      	ble.n	800aede <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x8da>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e000      	b.n	800aee0 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x8dc>
 800aede:	2302      	movs	r3, #2
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800aee0:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800aee4:	f5a2 70ca 	sub.w	r0, r2, #404	@ 0x194
 800aee8:	461a      	mov	r2, r3
 800aeea:	0052      	lsls	r2, r2, #1
 800aeec:	441a      	add	r2, r3
 800aeee:	0093      	lsls	r3, r2, #2
 800aef0:	461a      	mov	r2, r3
 800aef2:	460b      	mov	r3, r1
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	440b      	add	r3, r1
 800aef8:	011b      	lsls	r3, r3, #4
 800aefa:	4413      	add	r3, r2
 800aefc:	6802      	ldr	r2, [r0, #0]
 800aefe:	eb02 0e03 	add.w	lr, r2, r3
                                            &(s[4 - j - (j == 1)]),
 800af02:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800af06:	f1c3 0304 	rsb	r3, r3, #4
 800af0a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800af0e:	2a01      	cmp	r2, #1
 800af10:	bf0c      	ite	eq
 800af12:	2201      	moveq	r2, #1
 800af14:	2200      	movne	r2, #0
 800af16:	b2d2      	uxtb	r2, r2
 800af18:	1a9a      	subs	r2, r3, r2
 800af1a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800af1e:	4613      	mov	r3, r2
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	18c8      	adds	r0, r1, r3
                                            &((*mat)[3 - (k == 3)][3 - (j == 3)]),
 800af28:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d101      	bne.n	800af34 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x930>
 800af30:	2102      	movs	r1, #2
 800af32:	e000      	b.n	800af36 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x932>
 800af34:	2103      	movs	r1, #3
 800af36:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d101      	bne.n	800af42 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x93e>
 800af3e:	2302      	movs	r3, #2
 800af40:	e000      	b.n	800af44 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x940>
 800af42:	2303      	movs	r3, #3
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800af44:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800af48:	f5a2 74ca 	sub.w	r4, r2, #404	@ 0x194
 800af4c:	461a      	mov	r2, r3
 800af4e:	0052      	lsls	r2, r2, #1
 800af50:	441a      	add	r2, r3
 800af52:	0093      	lsls	r3, r2, #2
 800af54:	461a      	mov	r2, r3
 800af56:	460b      	mov	r3, r1
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	440b      	add	r3, r1
 800af5c:	011b      	lsls	r3, r3, #4
 800af5e:	4413      	add	r3, r2
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	18d1      	adds	r1, r2, r3
                                            &(s[3 - j - (j == 1) - (j == 2)]));
 800af64:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800af68:	f1c3 0303 	rsb	r3, r3, #3
 800af6c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800af70:	2a01      	cmp	r2, #1
 800af72:	bf0c      	ite	eq
 800af74:	2201      	moveq	r2, #1
 800af76:	2200      	movne	r2, #0
 800af78:	b2d2      	uxtb	r2, r2
 800af7a:	1a9b      	subs	r3, r3, r2
 800af7c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800af80:	2a02      	cmp	r2, #2
 800af82:	bf0c      	ite	eq
 800af84:	2201      	moveq	r2, #1
 800af86:	2200      	movne	r2, #0
 800af88:	b2d2      	uxtb	r2, r2
 800af8a:	1a9a      	subs	r2, r3, r2
 800af8c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800af90:	4613      	mov	r3, r2
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4423      	add	r3, r4
                ibz_inv_dim4_make_coeff_mpm(&(work[j][k]),
 800af9a:	9302      	str	r3, [sp, #8]
 800af9c:	9101      	str	r1, [sp, #4]
 800af9e:	9000      	str	r0, [sp, #0]
 800afa0:	4673      	mov	r3, lr
 800afa2:	4662      	mov	r2, ip
 800afa4:	4631      	mov	r1, r6
 800afa6:	4628      	mov	r0, r5
 800afa8:	f7ff fae7 	bl	800a57a <sqisign_gen_ibz_inv_dim4_make_coeff_mpm>
        for (int k = 2; k < 4; k++) {
 800afac:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800afb0:	3301      	adds	r3, #1
 800afb2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800afb6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800afba:	2b03      	cmp	r3, #3
 800afbc:	f77f ae77 	ble.w	800acae <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x6aa>
    for (int j = 0; j < 4; j++) {
 800afc0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800afc4:	3301      	adds	r3, #1
 800afc6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800afca:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800afce:	2b03      	cmp	r3, #3
 800afd0:	f77f acee 	ble.w	800a9b0 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0x3ac>
            }
        }
    }
    if (inv != NULL) {
 800afd4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800afd8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d01c      	beq.n	800b01c <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0xa18>
        // put transposed adjugate in result, or 0 if no inverse
        ibz_set(&prod, !ibz_is_zero(&work_det));
 800afe2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800afe6:	4618      	mov	r0, r3
 800afe8:	f012 f8f1 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bf0c      	ite	eq
 800aff2:	2301      	moveq	r3, #1
 800aff4:	2300      	movne	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800affe:	4611      	mov	r1, r2
 800b000:	4618      	mov	r0, r3
 800b002:	f012 f92e 	bl	801d262 <sqisign_gen_ibz_set>
        ibz_mat_4x4_scalar_mul(inv, &prod, &work);
 800b006:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800b00a:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 800b00e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800b012:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	f7ff f98d 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
    }
    // output det
    if (det != NULL)
 800b01c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800b020:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d009      	beq.n	800b03e <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0xa3a>
        ibz_copy(det, &work_det);
 800b02a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800b02e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800b032:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800b036:	4611      	mov	r1, r2
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	f012 f91f 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 6; i++) {
 800b03e:	2300      	movs	r3, #0
 800b040:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800b044:	e01c      	b.n	800b080 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0xa7c>
        ibz_finalize(&s[i]);
 800b046:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800b04a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800b04e:	4613      	mov	r3, r2
 800b050:	005b      	lsls	r3, r3, #1
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	4618      	mov	r0, r3
 800b05a:	f011 ffdf 	bl	801d01c <sqisign_gen_ibz_finalize>
        ibz_finalize(&c[i]);
 800b05e:	f107 0110 	add.w	r1, r7, #16
 800b062:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800b066:	4613      	mov	r3, r2
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	4618      	mov	r0, r3
 800b072:	f011 ffd3 	bl	801d01c <sqisign_gen_ibz_finalize>
    for (int i = 0; i < 6; i++) {
 800b076:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800b07a:	3301      	adds	r3, #1
 800b07c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800b080:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800b084:	2b05      	cmp	r3, #5
 800b086:	ddde      	ble.n	800b046 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom+0xa42>
    }
    ibz_mat_4x4_finalize(&work);
 800b088:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f003 ff7c 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_finalize(&work_det);
 800b092:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b096:	4618      	mov	r0, r3
 800b098:	f011 ffc0 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&prod);
 800b09c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f011 ffbb 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (!ibz_is_zero(det));
 800b0a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800b0aa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	f012 f88d 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	bf0c      	ite	eq
 800b0ba:	2301      	moveq	r3, #1
 800b0bc:	2300      	movne	r3, #0
 800b0be:	b2db      	uxtb	r3, r3
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0ca <sqisign_gen_ibz_mat_4x4_eval>:

// matrix evaluation

void
ibz_mat_4x4_eval(ibz_vec_4_t *res, const ibz_mat_4x4_t *mat, const ibz_vec_4_t *vec)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b096      	sub	sp, #88	@ 0x58
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	607a      	str	r2, [r7, #4]
    ibz_vec_4_t sum;
    ibz_t prod;
    ibz_init(&prod);
 800b0d6:	f107 0314 	add.w	r3, r7, #20
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f011 ff93 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&sum);
 800b0e0:	f107 0320 	add.w	r3, r7, #32
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f003 fe94 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    // assume initialization to 0
    for (int i = 0; i < 4; i++) {
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0ee:	e03a      	b.n	800b166 <sqisign_gen_ibz_mat_4x4_eval+0x9c>
        for (int j = 0; j < 4; j++) {
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0f4:	e031      	b.n	800b15a <sqisign_gen_ibz_mat_4x4_eval+0x90>
            ibz_mul(&prod, &(*mat)[i][j], &(*vec)[j]);
 800b0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	0052      	lsls	r2, r2, #1
 800b0fc:	441a      	add	r2, r3
 800b0fe:	0093      	lsls	r3, r2, #2
 800b100:	461a      	mov	r2, r3
 800b102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b104:	460b      	mov	r3, r1
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	440b      	add	r3, r1
 800b10a:	011b      	lsls	r3, r3, #4
 800b10c:	4413      	add	r3, r2
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	18d1      	adds	r1, r2, r3
 800b112:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b114:	4613      	mov	r3, r2
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	441a      	add	r2, r3
 800b120:	f107 0314 	add.w	r3, r7, #20
 800b124:	4618      	mov	r0, r3
 800b126:	f011 ffa2 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&(sum[i]), &(sum[i]), &prod);
 800b12a:	f107 0120 	add.w	r1, r7, #32
 800b12e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b130:	4613      	mov	r3, r2
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	18c8      	adds	r0, r1, r3
 800b13a:	f107 0120 	add.w	r1, r7, #32
 800b13e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b140:	4613      	mov	r3, r2
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	f107 0214 	add.w	r2, r7, #20
 800b14e:	4619      	mov	r1, r3
 800b150:	f011 ff6f 	bl	801d032 <sqisign_gen_ibz_add>
        for (int j = 0; j < 4; j++) {
 800b154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b156:	3301      	adds	r3, #1
 800b158:	653b      	str	r3, [r7, #80]	@ 0x50
 800b15a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	ddca      	ble.n	800b0f6 <sqisign_gen_ibz_mat_4x4_eval+0x2c>
    for (int i = 0; i < 4; i++) {
 800b160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b162:	3301      	adds	r3, #1
 800b164:	657b      	str	r3, [r7, #84]	@ 0x54
 800b166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b168:	2b03      	cmp	r3, #3
 800b16a:	ddc1      	ble.n	800b0f0 <sqisign_gen_ibz_mat_4x4_eval+0x26>
        }
    }
    ibz_vec_4_copy(res, &sum);
 800b16c:	f107 0320 	add.w	r3, r7, #32
 800b170:	4619      	mov	r1, r3
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f7fe fe7e 	bl	8009e74 <sqisign_gen_ibz_vec_4_copy>
    ibz_finalize(&prod);
 800b178:	f107 0314 	add.w	r3, r7, #20
 800b17c:	4618      	mov	r0, r3
 800b17e:	f011 ff4d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&sum);
 800b182:	f107 0320 	add.w	r3, r7, #32
 800b186:	4618      	mov	r0, r3
 800b188:	f003 fe5f 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 800b18c:	bf00      	nop
 800b18e:	3758      	adds	r7, #88	@ 0x58
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <sqisign_gen_ibz_mat_4x4_eval_t>:

void
ibz_mat_4x4_eval_t(ibz_vec_4_t *res, const ibz_vec_4_t *vec, const ibz_mat_4x4_t *mat)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b096      	sub	sp, #88	@ 0x58
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
    ibz_vec_4_t sum;
    ibz_t prod;
    ibz_init(&prod);
 800b1a0:	f107 0314 	add.w	r3, r7, #20
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f011 ff2e 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&sum);
 800b1aa:	f107 0320 	add.w	r3, r7, #32
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f003 fe2f 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    // assume initialization to 0
    for (int i = 0; i < 4; i++) {
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1b8:	e03a      	b.n	800b230 <sqisign_gen_ibz_mat_4x4_eval_t+0x9c>
        for (int j = 0; j < 4; j++) {
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1be:	e031      	b.n	800b224 <sqisign_gen_ibz_mat_4x4_eval_t+0x90>
            ibz_mul(&prod, &(*mat)[j][i], &(*vec)[j]);
 800b1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	0052      	lsls	r2, r2, #1
 800b1c6:	441a      	add	r2, r3
 800b1c8:	0093      	lsls	r3, r2, #2
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	440b      	add	r3, r1
 800b1d4:	011b      	lsls	r3, r3, #4
 800b1d6:	4413      	add	r3, r2
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	18d1      	adds	r1, r2, r3
 800b1dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1de:	4613      	mov	r3, r2
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	441a      	add	r2, r3
 800b1ea:	f107 0314 	add.w	r3, r7, #20
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f011 ff3d 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&(sum[i]), &(sum[i]), &prod);
 800b1f4:	f107 0120 	add.w	r1, r7, #32
 800b1f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	18c8      	adds	r0, r1, r3
 800b204:	f107 0120 	add.w	r1, r7, #32
 800b208:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b20a:	4613      	mov	r3, r2
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	440b      	add	r3, r1
 800b214:	f107 0214 	add.w	r2, r7, #20
 800b218:	4619      	mov	r1, r3
 800b21a:	f011 ff0a 	bl	801d032 <sqisign_gen_ibz_add>
        for (int j = 0; j < 4; j++) {
 800b21e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b220:	3301      	adds	r3, #1
 800b222:	653b      	str	r3, [r7, #80]	@ 0x50
 800b224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b226:	2b03      	cmp	r3, #3
 800b228:	ddca      	ble.n	800b1c0 <sqisign_gen_ibz_mat_4x4_eval_t+0x2c>
    for (int i = 0; i < 4; i++) {
 800b22a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b22c:	3301      	adds	r3, #1
 800b22e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b232:	2b03      	cmp	r3, #3
 800b234:	ddc1      	ble.n	800b1ba <sqisign_gen_ibz_mat_4x4_eval_t+0x26>
        }
    }
    ibz_vec_4_copy(res, &sum);
 800b236:	f107 0320 	add.w	r3, r7, #32
 800b23a:	4619      	mov	r1, r3
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f7fe fe19 	bl	8009e74 <sqisign_gen_ibz_vec_4_copy>
    ibz_finalize(&prod);
 800b242:	f107 0314 	add.w	r3, r7, #20
 800b246:	4618      	mov	r0, r3
 800b248:	f011 fee8 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&sum);
 800b24c:	f107 0320 	add.w	r3, r7, #32
 800b250:	4618      	mov	r0, r3
 800b252:	f003 fdfa 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 800b256:	bf00      	nop
 800b258:	3758      	adds	r7, #88	@ 0x58
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <sqisign_gen_quat_qf_eval>:

// quadratic forms

void
quat_qf_eval(ibz_t *res, const ibz_mat_4x4_t *qf, const ibz_vec_4_t *coord)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b094      	sub	sp, #80	@ 0x50
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
    ibz_vec_4_t sum;
    ibz_t prod;
    ibz_init(&prod);
 800b26a:	f107 0310 	add.w	r3, r7, #16
 800b26e:	4618      	mov	r0, r3
 800b270:	f011 fec9 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&sum);
 800b274:	f107 031c 	add.w	r3, r7, #28
 800b278:	4618      	mov	r0, r3
 800b27a:	f003 fdca 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_mat_4x4_eval(&sum, qf, coord);
 800b27e:	f107 031c 	add.w	r3, r7, #28
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	68b9      	ldr	r1, [r7, #8]
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff ff1f 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
    for (int i = 0; i < 4; i++) {
 800b28c:	2300      	movs	r3, #0
 800b28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b290:	e02b      	b.n	800b2ea <sqisign_gen_quat_qf_eval+0x8c>
        ibz_mul(&prod, &(sum[i]), &(*coord)[i]);
 800b292:	f107 011c 	add.w	r1, r7, #28
 800b296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b298:	4613      	mov	r3, r2
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	4413      	add	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4419      	add	r1, r3
 800b2a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	441a      	add	r2, r3
 800b2b0:	f107 0310 	add.w	r3, r7, #16
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f011 feda 	bl	801d06e <sqisign_gen_ibz_mul>
        if (i > 0) {
 800b2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dd09      	ble.n	800b2d4 <sqisign_gen_quat_qf_eval+0x76>
            ibz_add(&(sum[0]), &(sum[0]), &prod);
 800b2c0:	f107 0210 	add.w	r2, r7, #16
 800b2c4:	f107 011c 	add.w	r1, r7, #28
 800b2c8:	f107 031c 	add.w	r3, r7, #28
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f011 feb0 	bl	801d032 <sqisign_gen_ibz_add>
 800b2d2:	e007      	b.n	800b2e4 <sqisign_gen_quat_qf_eval+0x86>
        } else {
            ibz_copy(&sum[0], &prod);
 800b2d4:	f107 0210 	add.w	r2, r7, #16
 800b2d8:	f107 031c 	add.w	r3, r7, #28
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f011 ffcc 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 800b2e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	ddd0      	ble.n	800b292 <sqisign_gen_quat_qf_eval+0x34>
        }
    }
    ibz_copy(res, &sum[0]);
 800b2f0:	f107 031c 	add.w	r3, r7, #28
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f011 ffc0 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_finalize(&prod);
 800b2fc:	f107 0310 	add.w	r3, r7, #16
 800b300:	4618      	mov	r0, r3
 800b302:	f011 fe8b 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&sum);
 800b306:	f107 031c 	add.w	r3, r7, #28
 800b30a:	4618      	mov	r0, r3
 800b30c:	f003 fd9d 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 800b310:	bf00      	nop
 800b312:	3750      	adds	r7, #80	@ 0x50
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <copy_point>:
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	4611      	mov	r1, r2
 800b328:	4618      	mov	r0, r3
 800b32a:	f007 fb7f 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	3348      	adds	r3, #72	@ 0x48
 800b338:	4619      	mov	r1, r3
 800b33a:	4610      	mov	r0, r2
 800b33c:	f007 fb76 	bl	8012a2c <fp2_copy>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <copy_curve>:
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	4611      	mov	r1, r2
 800b358:	4618      	mov	r0, r3
 800b35a:	f007 fb67 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	3348      	adds	r3, #72	@ 0x48
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f007 fb5e 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	3390      	adds	r3, #144	@ 0x90
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7ff ffc5 	bl	800b318 <copy_point>
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <AC_to_A24>:
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
    if (E->is_A24_computed_and_normalized) {
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d006      	beq.n	800b3b8 <AC_to_A24+0x22>
        copy_point(A24, &E->A24);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	3390      	adds	r3, #144	@ 0x90
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ffb1 	bl	800b318 <copy_point>
        return;
 800b3b6:	e01c      	b.n	800b3f2 <AC_to_A24+0x5c>
    fp2_add(&A24->z, &E->C, &E->C);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	3348      	adds	r3, #72	@ 0x48
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	f007 fb47 	bl	8012a5c <fp2_add>
    fp2_add(&A24->x, &E->A, &A24->z);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3348      	adds	r3, #72	@ 0x48
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f007 fb40 	bl	8012a5c <fp2_add>
    fp2_add(&A24->z, &A24->z, &A24->z);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3348      	adds	r3, #72	@ 0x48
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f007 fb35 	bl	8012a5c <fp2_add>
}
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <ec_point_init>:
#include "mp.h"
#include "ec.h"

void
ec_point_init(ec_point_t *P)
{ // Initialize point as identity element (1:0)
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
    fp2_set_one(&(P->x));
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4618      	mov	r0, r3
 800b404:	f007 faa8 	bl	8012958 <fp2_set_one>
    fp2_set_zero(&(P->z));
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3348      	adds	r3, #72	@ 0x48
 800b40c:	4618      	mov	r0, r3
 800b40e:	f007 fab4 	bl	801297a <fp2_set_zero>
}
 800b412:	bf00      	nop
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <ec_curve_init>:

void
ec_curve_init(ec_curve_t *E)
{ // Initialize the curve struct
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
    // Initialize the constants
    fp2_set_zero(&(E->A));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	f007 faa8 	bl	801297a <fp2_set_zero>
    fp2_set_one(&(E->C));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3348      	adds	r3, #72	@ 0x48
 800b42e:	4618      	mov	r0, r3
 800b430:	f007 fa92 	bl	8012958 <fp2_set_one>

    // Initialize the point (A+2 : 4C)
    ec_point_init(&(E->A24));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3390      	adds	r3, #144	@ 0x90
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff ffdd 	bl	800b3f8 <ec_point_init>

    // Set the bool to be false by default
    E->is_A24_computed_and_normalized = false;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
}
 800b446:	bf00      	nop
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <select_point>:

void
select_point(ec_point_t *Q, const ec_point_t *P1, const ec_point_t *P2, const digit_t option)
{ // Select points in constant time
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
 800b45a:	603b      	str	r3, [r7, #0]
  // If option = 0 then Q <- P1, else if option = 0xFF...FF then Q <- P2
    fp2_select(&(Q->x), &(P1->x), &(P2->x), option);
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	68b9      	ldr	r1, [r7, #8]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	f007 ff75 	bl	8013352 <fp2_select>
    fp2_select(&(Q->z), &(P1->z), &(P2->z), option);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	f007 ff69 	bl	8013352 <fp2_select>
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <cswap_points>:

void
cswap_points(ec_point_t *P, ec_point_t *Q, const digit_t option)
{ // Swap points in constant time
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
  // If option = 0 then P <- P and Q <- Q, else if option = 0xFF...FF then P <- Q and Q <- P
    fp2_cswap(&(P->x), &(Q->x), option);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	68b9      	ldr	r1, [r7, #8]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f007 ff76 	bl	801338c <fp2_cswap>
    fp2_cswap(&(P->z), &(Q->z), option);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	3348      	adds	r3, #72	@ 0x48
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	f007 ff6d 	bl	801338c <fp2_cswap>
}
 800b4b2:	bf00      	nop
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <ec_normalize_point>:

void
ec_normalize_point(ec_point_t *P)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
    fp2_inv(&P->z);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	3348      	adds	r3, #72	@ 0x48
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f007 fbb7 	bl	8012c3a <fp2_inv>
    fp2_mul(&P->x, &P->x, &P->z);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	6879      	ldr	r1, [r7, #4]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3348      	adds	r3, #72	@ 0x48
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	f007 fb2a 	bl	8012b2e <fp2_mul>
    fp2_set_one(&(P->z));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	3348      	adds	r3, #72	@ 0x48
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f007 fa3a 	bl	8012958 <fp2_set_one>
}
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <ec_normalize_curve>:

void
ec_normalize_curve(ec_curve_t *E)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
    fp2_inv(&E->C);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3348      	adds	r3, #72	@ 0x48
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f007 fb9e 	bl	8012c3a <fp2_inv>
    fp2_mul(&E->A, &E->A, &E->C);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3348      	adds	r3, #72	@ 0x48
 800b506:	461a      	mov	r2, r3
 800b508:	f007 fb11 	bl	8012b2e <fp2_mul>
    fp2_set_one(&E->C);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	3348      	adds	r3, #72	@ 0x48
 800b510:	4618      	mov	r0, r3
 800b512:	f007 fa21 	bl	8012958 <fp2_set_one>
}
 800b516:	bf00      	nop
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <ec_curve_normalize_A24>:

void
ec_curve_normalize_A24(ec_curve_t *E)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
    if (!E->is_A24_computed_and_normalized) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800b52e:	f083 0301 	eor.w	r3, r3, #1
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00e      	beq.n	800b556 <ec_curve_normalize_A24+0x36>
        AC_to_A24(&E->A24, E);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	3390      	adds	r3, #144	@ 0x90
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff ff29 	bl	800b396 <AC_to_A24>
        ec_normalize_point(&E->A24);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3390      	adds	r3, #144	@ 0x90
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff ffb6 	bl	800b4ba <ec_normalize_point>
        E->is_A24_computed_and_normalized = true;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }
    assert(fp2_is_one(&E->A24.z));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	33d8      	adds	r3, #216	@ 0xd8
 800b55a:	4618      	mov	r0, r3
 800b55c:	f007 fa4e 	bl	80129fc <fp2_is_one>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d105      	bne.n	800b572 <ec_curve_normalize_A24+0x52>
 800b566:	4b05      	ldr	r3, [pc, #20]	@ (800b57c <ec_curve_normalize_A24+0x5c>)
 800b568:	4a05      	ldr	r2, [pc, #20]	@ (800b580 <ec_curve_normalize_A24+0x60>)
 800b56a:	2143      	movs	r1, #67	@ 0x43
 800b56c:	4805      	ldr	r0, [pc, #20]	@ (800b584 <ec_curve_normalize_A24+0x64>)
 800b56e:	f029 fe63 	bl	8035238 <__assert_func>
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	08037440 	.word	0x08037440
 800b580:	08037458 	.word	0x08037458
 800b584:	0803745c 	.word	0x0803745c

0800b588 <ec_normalize_curve_and_A24>:

void
ec_normalize_curve_and_A24(ec_curve_t *E)
{ // Neither the curve or A24 are guaranteed to be normalized.
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  // First we normalize (A/C : 1) and conditionally compute
    if (!fp2_is_one(&E->C)) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3348      	adds	r3, #72	@ 0x48
 800b594:	4618      	mov	r0, r3
 800b596:	f007 fa31 	bl	80129fc <fp2_is_one>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <ec_normalize_curve_and_A24+0x1e>
        ec_normalize_curve(E);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7ff ffa3 	bl	800b4ec <ec_normalize_curve>
    }

    if (!E->is_A24_computed_and_normalized) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800b5ac:	f083 0301 	eor.w	r3, r3, #1
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d033      	beq.n	800b61e <ec_normalize_curve_and_A24+0x96>
        // Now compute A24 = ((A + 2) / 4 : 1)
        fp2_add_one(&E->A24.x, &E->A);     // re(A24.x) = re(A) + 1
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3390      	adds	r3, #144	@ 0x90
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f007 fa68 	bl	8012a94 <fp2_add_one>
        fp2_add_one(&E->A24.x, &E->A24.x); // re(A24.x) = re(A) + 2
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3390      	adds	r3, #144	@ 0x90
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	f007 fa5f 	bl	8012a94 <fp2_add_one>
        fp_copy(&E->A24.x.im, &E->A.im);   // im(A24.x) = im(A)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3324      	adds	r3, #36	@ 0x24
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f00e f928 	bl	8019838 <fp_copy>

        fp2_half(&E->A24.x, &E->A24.x); // (A + 2) / 2
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3390      	adds	r3, #144	@ 0x90
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	f007 fc9d 	bl	8012f34 <fp2_half>
        fp2_half(&E->A24.x, &E->A24.x); // (A + 2) / 4
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3390      	adds	r3, #144	@ 0x90
 800b604:	4619      	mov	r1, r3
 800b606:	4610      	mov	r0, r2
 800b608:	f007 fc94 	bl	8012f34 <fp2_half>
        fp2_set_one(&E->A24.z);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	33d8      	adds	r3, #216	@ 0xd8
 800b610:	4618      	mov	r0, r3
 800b612:	f007 f9a1 	bl	8012958 <fp2_set_one>

        E->is_A24_computed_and_normalized = true;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }
}
 800b61e:	bf00      	nop
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <ec_is_zero>:

uint32_t
ec_is_zero(const ec_point_t *P)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b082      	sub	sp, #8
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
    return fp2_is_zero(&P->z);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3348      	adds	r3, #72	@ 0x48
 800b632:	4618      	mov	r0, r3
 800b634:	f007 f9b2 	bl	801299c <fp2_is_zero>
 800b638:	4603      	mov	r3, r0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <ec_has_zero_coordinate>:

uint32_t
ec_has_zero_coordinate(const ec_point_t *P)
{
 800b642:	b590      	push	{r4, r7, lr}
 800b644:	b083      	sub	sp, #12
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
    return fp2_is_zero(&P->x) | fp2_is_zero(&P->z);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f007 f9a5 	bl	801299c <fp2_is_zero>
 800b652:	4604      	mov	r4, r0
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3348      	adds	r3, #72	@ 0x48
 800b658:	4618      	mov	r0, r3
 800b65a:	f007 f99f 	bl	801299c <fp2_is_zero>
 800b65e:	4603      	mov	r3, r0
 800b660:	4323      	orrs	r3, r4
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	bd90      	pop	{r4, r7, pc}

0800b66a <ec_is_equal>:

uint32_t
ec_is_equal(const ec_point_t *P, const ec_point_t *Q)
{ // Evaluate if two points in Montgomery coordinates (X:Z) are equal
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b0aa      	sub	sp, #168	@ 0xa8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	6039      	str	r1, [r7, #0]
  // Returns 0xFFFFFFFF (true) if P=Q, 0 (false) otherwise
    fp2_t t0, t1;

    // Check if P, Q are the points at infinity
    uint32_t l_zero = ec_is_zero(P);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff ffd6 	bl	800b626 <ec_is_zero>
 800b67a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    uint32_t r_zero = ec_is_zero(Q);
 800b67e:	6838      	ldr	r0, [r7, #0]
 800b680:	f7ff ffd1 	bl	800b626 <ec_is_zero>
 800b684:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    // Check if PX * QZ = QX * PZ
    fp2_mul(&t0, &P->x, &Q->z);
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b690:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800b694:	4618      	mov	r0, r3
 800b696:	f007 fa4a 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &P->z, &Q->x);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	f107 030c 	add.w	r3, r7, #12
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f007 fa41 	bl	8012b2e <fp2_mul>
    uint32_t lr_equal = fp2_is_equal(&t0, &t1);
 800b6ac:	f107 020c 	add.w	r2, r7, #12
 800b6b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f007 f984 	bl	80129c4 <fp2_is_equal>
 800b6bc:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    // Points are equal if
    // - Both are zero, or
    // - neither are zero AND PX * QZ = QX * PZ
    return (l_zero & r_zero) | (~l_zero & ~r_zero * lr_equal);
 800b6c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b6c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b6c8:	401a      	ands	r2, r3
 800b6ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b6ce:	43d9      	mvns	r1, r3
 800b6d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b6d4:	43db      	mvns	r3, r3
 800b6d6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800b6da:	fb00 f303 	mul.w	r3, r0, r3
 800b6de:	400b      	ands	r3, r1
 800b6e0:	4313      	orrs	r3, r2
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	37a8      	adds	r7, #168	@ 0xa8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <ec_is_two_torsion>:

uint32_t
ec_is_two_torsion(const ec_point_t *P, const ec_curve_t *E)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b0ba      	sub	sp, #232	@ 0xe8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
    if (ec_is_zero(P))
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff ff96 	bl	800b626 <ec_is_zero>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <ec_is_two_torsion+0x1a>
        return 0;
 800b700:	2300      	movs	r3, #0
 800b702:	e069      	b.n	800b7d8 <ec_is_two_torsion+0xee>

    uint32_t x_is_zero, tmp_is_zero;
    fp2_t t0, t1, t2;
    fp2_add(&t0, &P->x, &P->z);
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b70c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b710:	4618      	mov	r0, r3
 800b712:	f007 f9a3 	bl	8012a5c <fp2_add>
    fp2_sqr(&t0, &t0);
 800b716:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800b71a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b71e:	4611      	mov	r1, r2
 800b720:	4618      	mov	r0, r3
 800b722:	f007 fa53 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t1, &P->x, &P->z);
 800b726:	6879      	ldr	r1, [r7, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b72e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b732:	4618      	mov	r0, r3
 800b734:	f007 f9c8 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t1, &t1);
 800b738:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800b73c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b740:	4611      	mov	r1, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f007 fa42 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t2, &t0, &t1);
 800b748:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800b74c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800b750:	f107 0308 	add.w	r3, r7, #8
 800b754:	4618      	mov	r0, r3
 800b756:	f007 f9b7 	bl	8012ac8 <fp2_sub>
    fp2_add(&t1, &t0, &t1);
 800b75a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800b75e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800b762:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b766:	4618      	mov	r0, r3
 800b768:	f007 f978 	bl	8012a5c <fp2_add>
    fp2_mul(&t2, &t2, &E->A);
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	f107 0108 	add.w	r1, r7, #8
 800b772:	f107 0308 	add.w	r3, r7, #8
 800b776:	4618      	mov	r0, r3
 800b778:	f007 f9d9 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &t1, &E->C);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b782:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800b786:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b78a:	4618      	mov	r0, r3
 800b78c:	f007 f9cf 	bl	8012b2e <fp2_mul>
    fp2_add(&t1, &t1, &t1);
 800b790:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800b794:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800b798:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b79c:	4618      	mov	r0, r3
 800b79e:	f007 f95d 	bl	8012a5c <fp2_add>
    fp2_add(&t0, &t1, &t2); // 4 (CX^2+CZ^2+AXZ)
 800b7a2:	f107 0208 	add.w	r2, r7, #8
 800b7a6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800b7aa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f007 f954 	bl	8012a5c <fp2_add>

    x_is_zero = fp2_is_zero(&P->x);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f007 f8f0 	bl	801299c <fp2_is_zero>
 800b7bc:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    tmp_is_zero = fp2_is_zero(&t0);
 800b7c0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f007 f8e9 	bl	801299c <fp2_is_zero>
 800b7ca:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0

    // two torsion if x or x^2 + Ax + 1 is zero
    return x_is_zero | tmp_is_zero;
 800b7ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7d6:	4313      	orrs	r3, r2
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	37e8      	adds	r7, #232	@ 0xe8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <ec_is_four_torsion>:

uint32_t
ec_is_four_torsion(const ec_point_t *P, const ec_curve_t *E)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b0a6      	sub	sp, #152	@ 0x98
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
    ec_point_t test;
    xDBL_A24(&test, P, &E->A24, E->is_A24_computed_and_normalized);
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800b7f6:	f107 0008 	add.w	r0, r7, #8
 800b7fa:	6879      	ldr	r1, [r7, #4]
 800b7fc:	f000 fa46 	bl	800bc8c <xDBL_A24>
    return ec_is_two_torsion(&test, E);
 800b800:	f107 0308 	add.w	r3, r7, #8
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff ff6f 	bl	800b6ea <ec_is_two_torsion>
 800b80c:	4603      	mov	r3, r0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3798      	adds	r7, #152	@ 0x98
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <ec_is_basis_four_torsion>:

uint32_t
ec_is_basis_four_torsion(const ec_basis_t *B, const ec_curve_t *E)
{ // Check if basis points (P, Q) form a full 2^t-basis
 800b816:	b590      	push	{r4, r7, lr}
 800b818:	b0cb      	sub	sp, #300	@ 0x12c
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b820:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b824:	6018      	str	r0, [r3, #0]
 800b826:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b82a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b82e:	6019      	str	r1, [r3, #0]
    ec_point_t P2, Q2;
    xDBL_A24(&P2, &B->P, &E->A24, E->is_A24_computed_and_normalized);
 800b830:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b834:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b838:	6819      	ldr	r1, [r3, #0]
 800b83a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b83e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800b848:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b84c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800b856:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800b85a:	f000 fa17 	bl	800bc8c <xDBL_A24>
    xDBL_A24(&Q2, &B->Q, &E->A24, E->is_A24_computed_and_normalized);
 800b85e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b862:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800b86c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b870:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800b87a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b87e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800b888:	f107 0008 	add.w	r0, r7, #8
 800b88c:	f000 f9fe 	bl	800bc8c <xDBL_A24>
    return (ec_is_two_torsion(&P2, E) & ec_is_two_torsion(&Q2, E) & ~ec_is_equal(&P2, &Q2));
 800b890:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b894:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b898:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800b89c:	6819      	ldr	r1, [r3, #0]
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f7ff ff23 	bl	800b6ea <ec_is_two_torsion>
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800b8aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b8ae:	f107 0208 	add.w	r2, r7, #8
 800b8b2:	6819      	ldr	r1, [r3, #0]
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	f7ff ff18 	bl	800b6ea <ec_is_two_torsion>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	401c      	ands	r4, r3
 800b8be:	f107 0208 	add.w	r2, r7, #8
 800b8c2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff fece 	bl	800b66a <ec_is_equal>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	43db      	mvns	r3, r3
 800b8d2:	4023      	ands	r3, r4
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd90      	pop	{r4, r7, pc}

0800b8de <ec_curve_verify_A>:

int
ec_curve_verify_A(const fp2_t *A)
{ // Verify the Montgomery coefficient A is valid (A^2-4 \ne 0)
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b094      	sub	sp, #80	@ 0x50
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
  // Return 1 if curve is valid, 0 otherwise
    fp2_t t;
    fp2_set_one(&t);
 800b8e6:	f107 0308 	add.w	r3, r7, #8
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f007 f834 	bl	8012958 <fp2_set_one>
    fp_add(&t.re, &t.re, &t.re); // t=2
 800b8f0:	f107 0208 	add.w	r2, r7, #8
 800b8f4:	f107 0108 	add.w	r1, r7, #8
 800b8f8:	f107 0308 	add.w	r3, r7, #8
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f00d ffba 	bl	8019876 <fp_add>
    if (fp2_is_equal(A, &t))
 800b902:	f107 0308 	add.w	r3, r7, #8
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f007 f85b 	bl	80129c4 <fp2_is_equal>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <ec_curve_verify_A+0x3a>
        return 0;
 800b914:	2300      	movs	r3, #0
 800b916:	e013      	b.n	800b940 <ec_curve_verify_A+0x62>
    fp_neg(&t.re, &t.re); // t=-2
 800b918:	f107 0208 	add.w	r2, r7, #8
 800b91c:	f107 0308 	add.w	r3, r7, #8
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f00d ffc5 	bl	80198b2 <fp_neg>
    if (fp2_is_equal(A, &t))
 800b928:	f107 0308 	add.w	r3, r7, #8
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f007 f848 	bl	80129c4 <fp2_is_equal>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <ec_curve_verify_A+0x60>
        return 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e000      	b.n	800b940 <ec_curve_verify_A+0x62>
    return 1;
 800b93e:	2301      	movs	r3, #1
}
 800b940:	4618      	mov	r0, r3
 800b942:	3750      	adds	r7, #80	@ 0x50
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <ec_curve_init_from_A>:

int
ec_curve_init_from_A(ec_curve_t *E, const fp2_t *A)
{ // Initialize the curve from the A coefficient and check it is valid
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  // Return 1 if curve is valid, 0 otherwise
    ec_curve_init(E);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff fd61 	bl	800b41a <ec_curve_init>
    fp2_copy(&E->A, A); // Set A
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f007 f865 	bl	8012a2c <fp2_copy>
    return ec_curve_verify_A(A);
 800b962:	6838      	ldr	r0, [r7, #0]
 800b964:	f7ff ffbb 	bl	800b8de <ec_curve_verify_A>
 800b968:	4603      	mov	r3, r0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <ec_j_inv>:

void
ec_j_inv(fp2_t *j_inv, const ec_curve_t *curve)
{ // j-invariant computation for Montgommery coefficient A2=(A+2C:4C)
 800b972:	b580      	push	{r7, lr}
 800b974:	b0a6      	sub	sp, #152	@ 0x98
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
 800b97a:	6039      	str	r1, [r7, #0]
    fp2_t t0, t1;

    fp2_sqr(&t1, &curve->C);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b982:	f107 0308 	add.w	r3, r7, #8
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f007 f91f 	bl	8012bcc <fp2_sqr>
    fp2_sqr(j_inv, &curve->A);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f007 f91a 	bl	8012bcc <fp2_sqr>
    fp2_add(&t0, &t1, &t1);
 800b998:	f107 0208 	add.w	r2, r7, #8
 800b99c:	f107 0108 	add.w	r1, r7, #8
 800b9a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f007 f859 	bl	8012a5c <fp2_add>
    fp2_sub(&t0, j_inv, &t0);
 800b9aa:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800b9ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f007 f887 	bl	8012ac8 <fp2_sub>
    fp2_sub(&t0, &t0, &t1);
 800b9ba:	f107 0208 	add.w	r2, r7, #8
 800b9be:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800b9c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f007 f87e 	bl	8012ac8 <fp2_sub>
    fp2_sub(j_inv, &t0, &t1);
 800b9cc:	f107 0208 	add.w	r2, r7, #8
 800b9d0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f007 f876 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t1, &t1);
 800b9dc:	f107 0208 	add.w	r2, r7, #8
 800b9e0:	f107 0308 	add.w	r3, r7, #8
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f007 f8f0 	bl	8012bcc <fp2_sqr>
    fp2_mul(j_inv, j_inv, &t1);
 800b9ec:	f107 0308 	add.w	r3, r7, #8
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	6879      	ldr	r1, [r7, #4]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f007 f89a 	bl	8012b2e <fp2_mul>
    fp2_add(&t0, &t0, &t0);
 800b9fa:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800b9fe:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800ba02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ba06:	4618      	mov	r0, r3
 800ba08:	f007 f828 	bl	8012a5c <fp2_add>
    fp2_add(&t0, &t0, &t0);
 800ba0c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ba10:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800ba14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f007 f81f 	bl	8012a5c <fp2_add>
    fp2_sqr(&t1, &t0);
 800ba1e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ba22:	f107 0308 	add.w	r3, r7, #8
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f007 f8cf 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t0, &t0, &t1);
 800ba2e:	f107 0208 	add.w	r2, r7, #8
 800ba32:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800ba36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f007 f877 	bl	8012b2e <fp2_mul>
    fp2_add(&t0, &t0, &t0);
 800ba40:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ba44:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800ba48:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f007 f805 	bl	8012a5c <fp2_add>
    fp2_add(&t0, &t0, &t0);
 800ba52:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ba56:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800ba5a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f006 fffc 	bl	8012a5c <fp2_add>
    fp2_inv(j_inv);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f007 f8e8 	bl	8012c3a <fp2_inv>
    fp2_mul(j_inv, &t0, j_inv);
 800ba6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f007 f85b 	bl	8012b2e <fp2_mul>
}
 800ba78:	bf00      	nop
 800ba7a:	3798      	adds	r7, #152	@ 0x98
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <xDBL_E0>:

void
xDBL_E0(ec_point_t *Q, const ec_point_t *P)
{ // Doubling of a Montgomery point in projective coordinates (X:Z) on the curve E0 with (A:C) = (0:1).
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b0b8      	sub	sp, #224	@ 0xe0
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  // Input: projective Montgomery x-coordinates P = (XP:ZP), where xP=XP/ZP, and Montgomery curve constants (A:C) = (0:1). 
  // Output: projective Montgomery x-coordinates Q <- 2*P = (XQ:ZQ) such that x(2P)=XQ/ZQ.
    fp2_t t0, t1, t2;

    fp2_add(&t0, &P->x, &P->z);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ba92:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800ba96:	4618      	mov	r0, r3
 800ba98:	f006 ffe0 	bl	8012a5c <fp2_add>
    fp2_sqr(&t0, &t0);
 800ba9c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800baa0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f007 f890 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t1, &P->x, &P->z);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bab4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800bab8:	4618      	mov	r0, r3
 800baba:	f007 f805 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t1, &t1);
 800babe:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800bac2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800bac6:	4611      	mov	r1, r2
 800bac8:	4618      	mov	r0, r3
 800baca:	f007 f87f 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t2, &t0, &t1);
 800bace:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800bad2:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800bad6:	f107 0308 	add.w	r3, r7, #8
 800bada:	4618      	mov	r0, r3
 800badc:	f006 fff4 	bl	8012ac8 <fp2_sub>
    fp2_add(&t1, &t1, &t1);
 800bae0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800bae4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800bae8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800baec:	4618      	mov	r0, r3
 800baee:	f006 ffb5 	bl	8012a5c <fp2_add>
    fp2_mul(&Q->x, &t0, &t1);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800baf8:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800bafc:	4618      	mov	r0, r3
 800bafe:	f007 f816 	bl	8012b2e <fp2_mul>
    fp2_add(&Q->z, &t1, &t2);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3348      	adds	r3, #72	@ 0x48
 800bb06:	f107 0208 	add.w	r2, r7, #8
 800bb0a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f006 ffa4 	bl	8012a5c <fp2_add>
    fp2_mul(&Q->z, &Q->z, &t2);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3348      	adds	r3, #72	@ 0x48
 800bb1e:	f107 0208 	add.w	r2, r7, #8
 800bb22:	4619      	mov	r1, r3
 800bb24:	f007 f803 	bl	8012b2e <fp2_mul>
}
 800bb28:	bf00      	nop
 800bb2a:	37e0      	adds	r7, #224	@ 0xe0
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <xDBL>:

void
xDBL(ec_point_t *Q, const ec_point_t *P, const ec_point_t *AC)
{ // Doubling of a Montgomery point in projective coordinates (X:Z). Computation of coefficient values A+2C and 4C
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b0cc      	sub	sp, #304	@ 0x130
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb3a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800bb3e:	6018      	str	r0, [r3, #0]
 800bb40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb44:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bb48:	6019      	str	r1, [r3, #0]
 800bb4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bb52:	601a      	str	r2, [r3, #0]
  // on-the-fly. 
  // Input: projective Montgomery x-coordinates P = (XP:ZP), where xP=XP/ZP, and Montgomery curve constants (A:C). 
  // Output: projective Montgomery x-coordinates Q <- 2*P = (XQ:ZQ) such that x(2P)=XQ/ZQ.
    fp2_t t0, t1, t2, t3;

    fp2_add(&t0, &P->x, &P->z);
 800bb54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb58:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bb6c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800bb70:	4618      	mov	r0, r3
 800bb72:	f006 ff73 	bl	8012a5c <fp2_add>
    fp2_sqr(&t0, &t0);
 800bb76:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800bb7a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800bb7e:	4611      	mov	r1, r2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f007 f823 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t1, &P->x, &P->z);
 800bb86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bb8e:	6819      	ldr	r1, [r3, #0]
 800bb90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb94:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bb9e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bba2:	4618      	mov	r0, r3
 800bba4:	f006 ff90 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t1, &t1);
 800bba8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800bbac:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f007 f80a 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t2, &t0, &t1);
 800bbb8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800bbbc:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800bbc0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f006 ff7f 	bl	8012ac8 <fp2_sub>
    fp2_add(&t3, &AC->z, &AC->z);
 800bbca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bbce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800bbd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bbdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bbe6:	f107 0310 	add.w	r3, r7, #16
 800bbea:	4618      	mov	r0, r3
 800bbec:	f006 ff36 	bl	8012a5c <fp2_add>
    fp2_mul(&t1, &t1, &t3);
 800bbf0:	f107 0210 	add.w	r2, r7, #16
 800bbf4:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bbf8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f006 ff96 	bl	8012b2e <fp2_mul>
    fp2_add(&t1, &t1, &t1);
 800bc02:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800bc06:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bc0a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f006 ff24 	bl	8012a5c <fp2_add>
    fp2_mul(&Q->x, &t0, &t1);
 800bc14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bc18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800bc22:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800bc26:	4618      	mov	r0, r3
 800bc28:	f006 ff81 	bl	8012b2e <fp2_mul>
    fp2_add(&t0, &t3, &AC->x);
 800bc2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bc30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	f107 0110 	add.w	r1, r7, #16
 800bc3a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f006 ff0c 	bl	8012a5c <fp2_add>
    fp2_mul(&t0, &t0, &t2);
 800bc44:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bc48:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800bc4c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800bc50:	4618      	mov	r0, r3
 800bc52:	f006 ff6c 	bl	8012b2e <fp2_mul>
    fp2_add(&t0, &t0, &t1);
 800bc56:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800bc5a:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800bc5e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800bc62:	4618      	mov	r0, r3
 800bc64:	f006 fefa 	bl	8012a5c <fp2_add>
    fp2_mul(&Q->z, &t0, &t2);
 800bc68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bc6c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3348      	adds	r3, #72	@ 0x48
 800bc74:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bc78:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f006 ff56 	bl	8012b2e <fp2_mul>
}
 800bc82:	bf00      	nop
 800bc84:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <xDBL_A24>:

void
xDBL_A24(ec_point_t *Q, const ec_point_t *P, const ec_point_t *A24, const bool A24_normalized)
{ // Doubling of a Montgomery point in projective coordinates (X:Z).
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b0ba      	sub	sp, #232	@ 0xe8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
 800bc98:	70fb      	strb	r3, [r7, #3]
  // Input: projective Montgomery x-coordinates P = (XP:ZP), where xP=XP/ZP, and
  //        the Montgomery curve constants A24 = (A+2C:4C) (or A24 = (A+2C/4C:1) if normalized).
  // Output: projective Montgomery x-coordinates Q <- 2*P = (XQ:ZQ) such that x(2P)=XQ/ZQ.
    fp2_t t0, t1, t2;

    fp2_add(&t0, &P->x, &P->z);
 800bc9a:	68b9      	ldr	r1, [r7, #8]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bca2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bca6:	4618      	mov	r0, r3
 800bca8:	f006 fed8 	bl	8012a5c <fp2_add>
    fp2_sqr(&t0, &t0);
 800bcac:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800bcb0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f006 ff88 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t1, &P->x, &P->z);
 800bcbc:	68b9      	ldr	r1, [r7, #8]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bcc4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f006 fefd 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t1, &t1);
 800bcce:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bcd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f006 ff77 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t2, &t0, &t1);
 800bcde:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bce2:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bce6:	f107 0310 	add.w	r3, r7, #16
 800bcea:	4618      	mov	r0, r3
 800bcec:	f006 feec 	bl	8012ac8 <fp2_sub>
    if (!A24_normalized)
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	f083 0301 	eor.w	r3, r3, #1
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d009      	beq.n	800bd10 <xDBL_A24+0x84>
        fp2_mul(&t1, &t1, &A24->z);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bd02:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bd06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f006 ff0f 	bl	8012b2e <fp2_mul>
    fp2_mul(&Q->x, &t0, &t1);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bd16:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f006 ff07 	bl	8012b2e <fp2_mul>
    fp2_mul(&t0, &t2, &A24->x);
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	f107 0110 	add.w	r1, r7, #16
 800bd26:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f006 feff 	bl	8012b2e <fp2_mul>
    fp2_add(&t0, &t0, &t1);
 800bd30:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bd34:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bd38:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f006 fe8d 	bl	8012a5c <fp2_add>
    fp2_mul(&Q->z, &t0, &t2);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3348      	adds	r3, #72	@ 0x48
 800bd46:	f107 0210 	add.w	r2, r7, #16
 800bd4a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f006 feed 	bl	8012b2e <fp2_mul>
}
 800bd54:	bf00      	nop
 800bd56:	37e8      	adds	r7, #232	@ 0xe8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <xADD>:

void
xADD(ec_point_t *R, const ec_point_t *P, const ec_point_t *Q, const ec_point_t *PQ)
{ // Differential addition of Montgomery points in projective coordinates (X:Z).
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b0cd      	sub	sp, #308	@ 0x134
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800bd66:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800bd6a:	6020      	str	r0, [r4, #0]
 800bd6c:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800bd70:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800bd74:	6001      	str	r1, [r0, #0]
 800bd76:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800bd7a:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800bd7e:	600a      	str	r2, [r1, #0]
 800bd80:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bd84:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800bd88:	6013      	str	r3, [r2, #0]
  // Input: projective Montgomery points P=(XP:ZP) and Q=(XQ:ZQ) such that xP=XP/ZP and xQ=XQ/ZQ, and difference
  //        PQ=P-Q=(XPQ:ZPQ).
  // Output: projective Montgomery point R <- P+Q = (XR:ZR) such that x(P+Q)=XR/ZR.
    fp2_t t0, t1, t2, t3;

    fp2_add(&t0, &P->x, &P->z);
 800bd8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bd92:	6819      	ldr	r1, [r3, #0]
 800bd94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd98:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bda2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800bda6:	4618      	mov	r0, r3
 800bda8:	f006 fe58 	bl	8012a5c <fp2_add>
    fp2_sub(&t1, &P->x, &P->z);
 800bdac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bdb0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bdb4:	6819      	ldr	r1, [r3, #0]
 800bdb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bdba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bdc4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f006 fe7d 	bl	8012ac8 <fp2_sub>
    fp2_add(&t2, &Q->x, &Q->z);
 800bdce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bdd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bdd6:	6819      	ldr	r1, [r3, #0]
 800bdd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bddc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bde6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bdea:	4618      	mov	r0, r3
 800bdec:	f006 fe36 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &Q->x, &Q->z);
 800bdf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bdf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bdf8:	6819      	ldr	r1, [r3, #0]
 800bdfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bdfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800be08:	f107 0310 	add.w	r3, r7, #16
 800be0c:	4618      	mov	r0, r3
 800be0e:	f006 fe5b 	bl	8012ac8 <fp2_sub>
    fp2_mul(&t0, &t0, &t3);
 800be12:	f107 0210 	add.w	r2, r7, #16
 800be16:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800be1a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800be1e:	4618      	mov	r0, r3
 800be20:	f006 fe85 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &t1, &t2);
 800be24:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800be28:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800be2c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800be30:	4618      	mov	r0, r3
 800be32:	f006 fe7c 	bl	8012b2e <fp2_mul>
    fp2_add(&t2, &t0, &t1);
 800be36:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800be3a:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800be3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800be42:	4618      	mov	r0, r3
 800be44:	f006 fe0a 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &t0, &t1);
 800be48:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800be4c:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800be50:	f107 0310 	add.w	r3, r7, #16
 800be54:	4618      	mov	r0, r3
 800be56:	f006 fe37 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t2, &t2);
 800be5a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800be5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800be62:	4611      	mov	r1, r2
 800be64:	4618      	mov	r0, r3
 800be66:	f006 feb1 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&t3, &t3);
 800be6a:	f107 0210 	add.w	r2, r7, #16
 800be6e:	f107 0310 	add.w	r3, r7, #16
 800be72:	4611      	mov	r1, r2
 800be74:	4618      	mov	r0, r3
 800be76:	f006 fea9 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t2, &PQ->z, &t2);
 800be7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be7e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800be88:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800be8c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800be90:	4618      	mov	r0, r3
 800be92:	f006 fe4c 	bl	8012b2e <fp2_mul>
    fp2_mul(&R->z, &PQ->x, &t3);
 800be96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be9a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800bea4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bea8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f107 0210 	add.w	r2, r7, #16
 800beb2:	4619      	mov	r1, r3
 800beb4:	f006 fe3b 	bl	8012b2e <fp2_mul>
    fp2_copy(&R->x, &t2);
 800beb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bebc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bec6:	4611      	mov	r1, r2
 800bec8:	4618      	mov	r0, r3
 800beca:	f006 fdaf 	bl	8012a2c <fp2_copy>
}
 800bece:	bf00      	nop
 800bed0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd90      	pop	{r4, r7, pc}

0800bed8 <xDBLADD>:
        const ec_point_t *P,
        const ec_point_t *Q,
        const ec_point_t *PQ,
        const ec_point_t *A24,
        const bool A24_normalized)
{ // Simultaneous doubling and differential addition.
 800bed8:	b580      	push	{r7, lr}
 800beda:	b0ba      	sub	sp, #232	@ 0xe8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	603b      	str	r3, [r7, #0]
  //         PQ=P-Q=(XPQ:ZPQ), and the Montgomery curve constants A24 = (A+2C:4C) (or A24 = (A+2C/4C:1) if normalized).
  // Output: projective Montgomery points R <- 2*P = (XR:ZR) such that x(2P)=XR/ZR, and S <- P+Q = (XS:ZS) such that =
  //         x(Q+P)=XS/ZS.
    fp2_t t0, t1, t2;

    fp2_add(&t0, &P->x, &P->z);
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800beee:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bef2:	4618      	mov	r0, r3
 800bef4:	f006 fdb2 	bl	8012a5c <fp2_add>
    fp2_sub(&t1, &P->x, &P->z);
 800bef8:	6879      	ldr	r1, [r7, #4]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bf00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bf04:	4618      	mov	r0, r3
 800bf06:	f006 fddf 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&R->x, &t0);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f006 fe5a 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t2, &Q->x, &Q->z);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bf20:	f107 0310 	add.w	r3, r7, #16
 800bf24:	4618      	mov	r0, r3
 800bf26:	f006 fdcf 	bl	8012ac8 <fp2_sub>
    fp2_add(&S->x, &Q->x, &Q->z);
 800bf2a:	68b8      	ldr	r0, [r7, #8]
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	3348      	adds	r3, #72	@ 0x48
 800bf32:	461a      	mov	r2, r3
 800bf34:	f006 fd92 	bl	8012a5c <fp2_add>
    fp2_mul(&t0, &t0, &t2);
 800bf38:	f107 0210 	add.w	r2, r7, #16
 800bf3c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bf40:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800bf44:	4618      	mov	r0, r3
 800bf46:	f006 fdf2 	bl	8012b2e <fp2_mul>
    fp2_sqr(&R->z, &t1);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3348      	adds	r3, #72	@ 0x48
 800bf4e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bf52:	4611      	mov	r1, r2
 800bf54:	4618      	mov	r0, r3
 800bf56:	f006 fe39 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t1, &t1, &S->x);
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bf60:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bf64:	4618      	mov	r0, r3
 800bf66:	f006 fde2 	bl	8012b2e <fp2_mul>
    fp2_sub(&t2, &R->x, &R->z);
 800bf6a:	68f9      	ldr	r1, [r7, #12]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bf72:	f107 0310 	add.w	r3, r7, #16
 800bf76:	4618      	mov	r0, r3
 800bf78:	f006 fda6 	bl	8012ac8 <fp2_sub>
    if (!A24_normalized)
 800bf7c:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800bf80:	f083 0301 	eor.w	r3, r3, #1
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <xDBLADD+0xca>
        fp2_mul(&R->z, &R->z, &A24->z);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800bf96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf9a:	3348      	adds	r3, #72	@ 0x48
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	f006 fdc6 	bl	8012b2e <fp2_mul>
    fp2_mul(&R->x, &R->x, &R->z);
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	68f9      	ldr	r1, [r7, #12]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3348      	adds	r3, #72	@ 0x48
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f006 fdbf 	bl	8012b2e <fp2_mul>
    fp2_mul(&S->x, &A24->x, &t2);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 800bfb6:	f107 0210 	add.w	r2, r7, #16
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f006 fdb7 	bl	8012b2e <fp2_mul>
    fp2_sub(&S->z, &t0, &t1);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	3348      	adds	r3, #72	@ 0x48
 800bfc4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bfc8:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f006 fd7b 	bl	8012ac8 <fp2_sub>
    fp2_add(&R->z, &R->z, &S->x);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3348      	adds	r3, #72	@ 0x48
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	f006 fd3c 	bl	8012a5c <fp2_add>
    fp2_add(&S->x, &t0, &t1);
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bfea:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f006 fd34 	bl	8012a5c <fp2_add>
    fp2_mul(&R->z, &R->z, &t2);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3348      	adds	r3, #72	@ 0x48
 800bffe:	f107 0210 	add.w	r2, r7, #16
 800c002:	4619      	mov	r1, r3
 800c004:	f006 fd93 	bl	8012b2e <fp2_mul>
    fp2_sqr(&S->z, &S->z);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	3348      	adds	r3, #72	@ 0x48
 800c012:	4619      	mov	r1, r3
 800c014:	4610      	mov	r0, r2
 800c016:	f006 fdd9 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&S->x, &S->x);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	4611      	mov	r1, r2
 800c020:	4618      	mov	r0, r3
 800c022:	f006 fdd3 	bl	8012bcc <fp2_sqr>
    fp2_mul(&S->z, &S->z, &PQ->x);
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	3348      	adds	r3, #72	@ 0x48
 800c030:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800c034:	4619      	mov	r1, r3
 800c036:	f006 fd7a 	bl	8012b2e <fp2_mul>
    fp2_mul(&S->x, &S->x, &PQ->z);
 800c03a:	68b8      	ldr	r0, [r7, #8]
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c042:	3348      	adds	r3, #72	@ 0x48
 800c044:	461a      	mov	r2, r3
 800c046:	f006 fd72 	bl	8012b2e <fp2_mul>
}
 800c04a:	bf00      	nop
 800c04c:	37e8      	adds	r7, #232	@ 0xe8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <xMUL>:

void
xMUL(ec_point_t *Q, const ec_point_t *P, const digit_t *k, const int kbits, const ec_curve_t *curve)
{ // The Montgomery ladder
 800c054:	b590      	push	{r4, r7, lr}
 800c056:	b0fb      	sub	sp, #492	@ 0x1ec
 800c058:	af04      	add	r7, sp, #16
 800c05a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800c05e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 800c062:	6020      	str	r0, [r4, #0]
 800c064:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 800c068:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 800c06c:	6001      	str	r1, [r0, #0]
 800c06e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 800c072:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 800c076:	600a      	str	r2, [r1, #0]
 800c078:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800c07c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 800c080:	6013      	str	r3, [r2, #0]
  // Input: projective Montgomery point P=(XP:ZP) such that xP=XP/ZP, a scalar k of bitlength kbits, and
  //        the Montgomery curve constants (A:C) (or A24 = (A+2C/4C:1) if normalized).
  // Output: projective Montgomery points Q <- k*P = (XQ:ZQ) such that x(k*P)=XQ/ZQ.
    ec_point_t R0, R1, A24;
    digit_t mask;
    unsigned int bit, prevbit = 0, swap;
 800c082:	2300      	movs	r3, #0
 800c084:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

    if (!curve->is_A24_computed_and_normalized) {
 800c088:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800c08c:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800c090:	f083 0301 	eor.w	r3, r3, #1
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d020      	beq.n	800c0dc <xMUL+0x88>
        // Computation of A24=(A+2C:4C)
        fp2_add(&A24.x, &curve->C, &curve->C);
 800c09a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800c09e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800c0a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800c0a6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800c0aa:	f107 0314 	add.w	r3, r7, #20
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f006 fcd4 	bl	8012a5c <fp2_add>
        fp2_add(&A24.z, &A24.x, &A24.x);
 800c0b4:	f107 0214 	add.w	r2, r7, #20
 800c0b8:	f107 0114 	add.w	r1, r7, #20
 800c0bc:	f107 0314 	add.w	r3, r7, #20
 800c0c0:	3348      	adds	r3, #72	@ 0x48
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f006 fcca 	bl	8012a5c <fp2_add>
        fp2_add(&A24.x, &A24.x, &curve->A);
 800c0c8:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 800c0cc:	f107 0114 	add.w	r1, r7, #20
 800c0d0:	f107 0314 	add.w	r3, r7, #20
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f006 fcc1 	bl	8012a5c <fp2_add>
 800c0da:	e024      	b.n	800c126 <xMUL+0xd2>
    } else {
        fp2_copy(&A24.x, &curve->A24.x);
 800c0dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800c0e0:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800c0e4:	f107 0314 	add.w	r3, r7, #20
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f006 fc9e 	bl	8012a2c <fp2_copy>
        fp2_copy(&A24.z, &curve->A24.z);
 800c0f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800c0f4:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 800c0f8:	f107 0314 	add.w	r3, r7, #20
 800c0fc:	3348      	adds	r3, #72	@ 0x48
 800c0fe:	4611      	mov	r1, r2
 800c100:	4618      	mov	r0, r3
 800c102:	f006 fc93 	bl	8012a2c <fp2_copy>
        // Assert A24 has been normalised
        assert(fp2_is_one(&A24.z));
 800c106:	f107 0314 	add.w	r3, r7, #20
 800c10a:	3348      	adds	r3, #72	@ 0x48
 800c10c:	4618      	mov	r0, r3
 800c10e:	f006 fc75 	bl	80129fc <fp2_is_one>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d106      	bne.n	800c126 <xMUL+0xd2>
 800c118:	4b55      	ldr	r3, [pc, #340]	@ (800c270 <xMUL+0x21c>)
 800c11a:	4a56      	ldr	r2, [pc, #344]	@ (800c274 <xMUL+0x220>)
 800c11c:	f240 1165 	movw	r1, #357	@ 0x165
 800c120:	4855      	ldr	r0, [pc, #340]	@ (800c278 <xMUL+0x224>)
 800c122:	f029 f889 	bl	8035238 <__assert_func>
    }

    // R0 <- (1:0), R1 <- P
    ec_point_init(&R0);
 800c126:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff f964 	bl	800b3f8 <ec_point_init>
    fp2_copy(&R1.x, &P->x);
 800c130:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800c134:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f006 fc73 	bl	8012a2c <fp2_copy>
    fp2_copy(&R1.z, &P->z);
 800c146:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800c14a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800c154:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c158:	3348      	adds	r3, #72	@ 0x48
 800c15a:	4611      	mov	r1, r2
 800c15c:	4618      	mov	r0, r3
 800c15e:	f006 fc65 	bl	8012a2c <fp2_copy>

    // Main loop
    for (int i = kbits - 1; i >= 0; i--) {
 800c162:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800c166:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800c172:	e048      	b.n	800c206 <xMUL+0x1b2>
        bit = (k[i >> LOG2RADIX] >> (i & (RADIX - 1))) & 1;
 800c174:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800c178:	115b      	asrs	r3, r3, #5
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800c180:	f5a2 72ea 	sub.w	r2, r2, #468	@ 0x1d4
 800c184:	6812      	ldr	r2, [r2, #0]
 800c186:	4413      	add	r3, r2
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800c18e:	f003 031f 	and.w	r3, r3, #31
 800c192:	fa22 f303 	lsr.w	r3, r2, r3
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        swap = bit ^ prevbit;
 800c19e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800c1a2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800c1a6:	4053      	eors	r3, r2
 800c1a8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        prevbit = bit;
 800c1ac:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800c1b0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
        mask = 0 - (digit_t)swap;
 800c1b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800c1b8:	425b      	negs	r3, r3
 800c1ba:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

        cswap_points(&R0, &R1, mask);
 800c1be:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800c1c2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800c1c6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7ff f95c 	bl	800b488 <cswap_points>
        xDBLADD(&R0, &R1, &R0, &R1, P, &A24, true);
 800c1d0:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800c1d4:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800c1d8:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800c1dc:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	9302      	str	r3, [sp, #8]
 800c1e4:	f107 0314 	add.w	r3, r7, #20
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800c1ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	4623      	mov	r3, r4
 800c1f8:	f7ff fe6e 	bl	800bed8 <xDBLADD>
    for (int i = kbits - 1; i >= 0; i--) {
 800c1fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800c200:	3b01      	subs	r3, #1
 800c202:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800c206:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	dab2      	bge.n	800c174 <xMUL+0x120>
    }
    swap = 0 ^ prevbit;
 800c20e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800c212:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    mask = 0 - (digit_t)swap;
 800c216:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800c21a:	425b      	negs	r3, r3
 800c21c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    cswap_points(&R0, &R1, mask);
 800c220:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800c224:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800c228:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff f92b 	bl	800b488 <cswap_points>

    fp2_copy(&Q->x, &R0.x);
 800c232:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800c236:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800c240:	4611      	mov	r1, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f006 fbf2 	bl	8012a2c <fp2_copy>
    fp2_copy(&Q->z, &R0.z);
 800c248:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800c24c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800c256:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800c25a:	3348      	adds	r3, #72	@ 0x48
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f006 fbe4 	bl	8012a2c <fp2_copy>
}
 800c264:	bf00      	nop
 800c266:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd90      	pop	{r4, r7, pc}
 800c26e:	bf00      	nop
 800c270:	08037470 	.word	0x08037470
 800c274:	08037458 	.word	0x08037458
 800c278:	0803745c 	.word	0x0803745c

0800c27c <xDBLMUL>:
        const ec_point_t *Q,
        const digit_t *l,
        const ec_point_t *PQ,
        const int kbits,
        const ec_curve_t *curve)
{ // The Montgomery biladder
 800c27c:	b590      	push	{r4, r7, lr}
 800c27e:	f6ad 6d64 	subw	sp, sp, #3684	@ 0xe64
 800c282:	af02      	add	r7, sp, #8
 800c284:	f607 6458 	addw	r4, r7, #3672	@ 0xe58
 800c288:	f6a4 644c 	subw	r4, r4, #3660	@ 0xe4c
 800c28c:	6020      	str	r0, [r4, #0]
 800c28e:	f607 6058 	addw	r0, r7, #3672	@ 0xe58
 800c292:	f5a0 6065 	sub.w	r0, r0, #3664	@ 0xe50
 800c296:	6001      	str	r1, [r0, #0]
 800c298:	f607 6158 	addw	r1, r7, #3672	@ 0xe58
 800c29c:	f6a1 6154 	subw	r1, r1, #3668	@ 0xe54
 800c2a0:	600a      	str	r2, [r1, #0]
 800c2a2:	f607 6258 	addw	r2, r7, #3672	@ 0xe58
 800c2a6:	f6a2 6258 	subw	r2, r2, #3672	@ 0xe58
 800c2aa:	6013      	str	r3, [r2, #0]
  //         bitlength kbits, the difference PQ=P-Q=(XPQ:ZPQ), and the Montgomery curve constants (A:C).
  // Output: projective Montgomery point S <- k*P + l*Q = (XS:ZS) such that x(k*P + l*Q)=XS/ZS.

    int i, A_is_zero;
    digit_t evens, mevens, bitk0, bitl0, maskk, maskl, temp, bs1_ip1, bs2_ip1, bs1_i, bs2_i, h;
    digit_t sigma[2] = { 0 }, pre_sigma = 0;
 800c2ac:	f607 6314 	addw	r3, r7, #3604	@ 0xe14
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	605a      	str	r2, [r3, #4]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f8c7 3e48 	str.w	r3, [r7, #3656]	@ 0xe48
    digit_t k_t[NWORDS_ORDER], l_t[NWORDS_ORDER], one[NWORDS_ORDER] = { 0 }, r[2 * BITS] = { 0 };
 800c2bc:	f607 53b4 	addw	r3, r7, #3508	@ 0xdb4
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f029 fc9b 	bl	8035c00 <memset>
 800c2ca:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c2ce:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2d8:	461a      	mov	r2, r3
 800c2da:	2100      	movs	r1, #0
 800c2dc:	f029 fc90 	bl	8035c00 <memset>
    ec_point_t DIFF1a, DIFF1b, DIFF2a, DIFF2b, R[3] = { 0 }, T[3];
 800c2e0:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c2e4:	f6a3 4394 	subw	r3, r3, #3220	@ 0xc94
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	f029 fc85 	bl	8035c00 <memset>

    // differential additions formulas are invalid in this case
    if (ec_has_zero_coordinate(P) | ec_has_zero_coordinate(Q) | ec_has_zero_coordinate(PQ))
 800c2f6:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c2fa:	f5a3 6365 	sub.w	r3, r3, #3664	@ 0xe50
 800c2fe:	6818      	ldr	r0, [r3, #0]
 800c300:	f7ff f99f 	bl	800b642 <ec_has_zero_coordinate>
 800c304:	4604      	mov	r4, r0
 800c306:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c30a:	f6a3 6358 	subw	r3, r3, #3672	@ 0xe58
 800c30e:	6818      	ldr	r0, [r3, #0]
 800c310:	f7ff f997 	bl	800b642 <ec_has_zero_coordinate>
 800c314:	4603      	mov	r3, r0
 800c316:	431c      	orrs	r4, r3
 800c318:	f8d7 0e6c 	ldr.w	r0, [r7, #3692]	@ 0xe6c
 800c31c:	f7ff f991 	bl	800b642 <ec_has_zero_coordinate>
 800c320:	4603      	mov	r3, r0
 800c322:	4323      	orrs	r3, r4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <xDBLMUL+0xb0>
        return 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	e2dd      	b.n	800c8e8 <xDBLMUL+0x66c>

    // Derive sigma according to parity
    bitk0 = (k[0] & 1);
 800c32c:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c330:	f6a3 6354 	subw	r3, r3, #3668	@ 0xe54
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	f8c7 3e44 	str.w	r3, [r7, #3652]	@ 0xe44
    bitl0 = (l[0] & 1);
 800c340:	f8d7 3e68 	ldr.w	r3, [r7, #3688]	@ 0xe68
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f003 0301 	and.w	r3, r3, #1
 800c34a:	f8c7 3e40 	str.w	r3, [r7, #3648]	@ 0xe40
    maskk = 0 - bitk0; // Parity masks: 0 if even, otherwise 1...1
 800c34e:	f8d7 3e44 	ldr.w	r3, [r7, #3652]	@ 0xe44
 800c352:	425b      	negs	r3, r3
 800c354:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
    maskl = 0 - bitl0;
 800c358:	f8d7 3e40 	ldr.w	r3, [r7, #3648]	@ 0xe40
 800c35c:	425b      	negs	r3, r3
 800c35e:	f8c7 3e38 	str.w	r3, [r7, #3640]	@ 0xe38
    sigma[0] = (bitk0 ^ 1);
 800c362:	f8d7 3e44 	ldr.w	r3, [r7, #3652]	@ 0xe44
 800c366:	f083 0301 	eor.w	r3, r3, #1
 800c36a:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
    sigma[1] = (bitl0 ^ 1);
 800c36e:	f8d7 3e40 	ldr.w	r3, [r7, #3648]	@ 0xe40
 800c372:	f083 0301 	eor.w	r3, r3, #1
 800c376:	f8c7 3e18 	str.w	r3, [r7, #3608]	@ 0xe18
    evens = sigma[0] + sigma[1]; // Count number of even scalars
 800c37a:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 800c37e:	f8d7 3e18 	ldr.w	r3, [r7, #3608]	@ 0xe18
 800c382:	4413      	add	r3, r2
 800c384:	f8c7 3e34 	str.w	r3, [r7, #3636]	@ 0xe34
    mevens = 0 - (evens & 1);    // Mask mevens <- 0 if # even of scalars = 0 or 2, otherwise mevens = 1...1
 800c388:	f8d7 3e34 	ldr.w	r3, [r7, #3636]	@ 0xe34
 800c38c:	f003 0301 	and.w	r3, r3, #1
 800c390:	425b      	negs	r3, r3
 800c392:	f8c7 3e30 	str.w	r3, [r7, #3632]	@ 0xe30

    // If k and l are both even or both odd, pick sigma = (0,1)
    sigma[0] = (sigma[0] & mevens);
 800c396:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 800c39a:	f8d7 3e30 	ldr.w	r3, [r7, #3632]	@ 0xe30
 800c39e:	4013      	ands	r3, r2
 800c3a0:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
    sigma[1] = (sigma[1] & mevens) | (1 & ~mevens);
 800c3a4:	f8d7 2e18 	ldr.w	r2, [r7, #3608]	@ 0xe18
 800c3a8:	f8d7 3e30 	ldr.w	r3, [r7, #3632]	@ 0xe30
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	f8d7 2e30 	ldr.w	r2, [r7, #3632]	@ 0xe30
 800c3b2:	f002 0201 	and.w	r2, r2, #1
 800c3b6:	2a00      	cmp	r2, #0
 800c3b8:	bf0c      	ite	eq
 800c3ba:	2201      	moveq	r2, #1
 800c3bc:	2200      	movne	r2, #0
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	f8c7 3e18 	str.w	r3, [r7, #3608]	@ 0xe18

    // Convert even scalars to odd
    one[0] = 1;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f8c7 3db4 	str.w	r3, [r7, #3508]	@ 0xdb4
    mp_sub(k_t, k, one, NWORDS_ORDER);
 800c3cc:	f607 52b4 	addw	r2, r7, #3508	@ 0xdb4
 800c3d0:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c3d4:	f6a3 6154 	subw	r1, r3, #3668	@ 0xe54
 800c3d8:	f607 50f4 	addw	r0, r7, #3572	@ 0xdf4
 800c3dc:	2308      	movs	r3, #8
 800c3de:	6809      	ldr	r1, [r1, #0]
 800c3e0:	f01b fc96 	bl	8027d10 <sqisign_gen_mp_sub>
    mp_sub(l_t, l, one, NWORDS_ORDER);
 800c3e4:	f607 52b4 	addw	r2, r7, #3508	@ 0xdb4
 800c3e8:	f607 50d4 	addw	r0, r7, #3540	@ 0xdd4
 800c3ec:	2308      	movs	r3, #8
 800c3ee:	f8d7 1e68 	ldr.w	r1, [r7, #3688]	@ 0xe68
 800c3f2:	f01b fc8d 	bl	8027d10 <sqisign_gen_mp_sub>
    select_ct(k_t, k_t, k, maskk, NWORDS_ORDER);
 800c3f6:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c3fa:	f6a3 6254 	subw	r2, r3, #3668	@ 0xe54
 800c3fe:	f607 51f4 	addw	r1, r7, #3572	@ 0xdf4
 800c402:	f607 50f4 	addw	r0, r7, #3572	@ 0xdf4
 800c406:	2308      	movs	r3, #8
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c40e:	6812      	ldr	r2, [r2, #0]
 800c410:	f01b fcc2 	bl	8027d98 <sqisign_gen_select_ct>
    select_ct(l_t, l_t, l, maskl, NWORDS_ORDER);
 800c414:	f607 51d4 	addw	r1, r7, #3540	@ 0xdd4
 800c418:	f607 50d4 	addw	r0, r7, #3540	@ 0xdd4
 800c41c:	2308      	movs	r3, #8
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800c424:	f8d7 2e68 	ldr.w	r2, [r7, #3688]	@ 0xe68
 800c428:	f01b fcb6 	bl	8027d98 <sqisign_gen_select_ct>

    // Scalar recoding
    for (i = 0; i < kbits; i++) {
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c7 3e54 	str.w	r3, [r7, #3668]	@ 0xe54
 800c432:	e08e      	b.n	800c552 <xDBLMUL+0x2d6>
        // If sigma[0] = 1 swap k_t and l_t
        maskk = 0 - (sigma[0] ^ pre_sigma);
 800c434:	f8d7 2e14 	ldr.w	r2, [r7, #3604]	@ 0xe14
 800c438:	f8d7 3e48 	ldr.w	r3, [r7, #3656]	@ 0xe48
 800c43c:	4053      	eors	r3, r2
 800c43e:	425b      	negs	r3, r3
 800c440:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
        swap_ct(k_t, l_t, maskk, NWORDS_ORDER);
 800c444:	f607 51d4 	addw	r1, r7, #3540	@ 0xdd4
 800c448:	f607 50f4 	addw	r0, r7, #3572	@ 0xdf4
 800c44c:	2308      	movs	r3, #8
 800c44e:	f8d7 2e3c 	ldr.w	r2, [r7, #3644]	@ 0xe3c
 800c452:	f01b fcd2 	bl	8027dfa <sqisign_gen_swap_ct>

        if (i == kbits - 1) {
 800c456:	f8d7 3e70 	ldr.w	r3, [r7, #3696]	@ 0xe70
 800c45a:	3b01      	subs	r3, #1
 800c45c:	f8d7 2e54 	ldr.w	r2, [r7, #3668]	@ 0xe54
 800c460:	429a      	cmp	r2, r3
 800c462:	d106      	bne.n	800c472 <xDBLMUL+0x1f6>
            bs1_ip1 = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	f8c7 3e50 	str.w	r3, [r7, #3664]	@ 0xe50
            bs2_ip1 = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	f8c7 3e4c 	str.w	r3, [r7, #3660]	@ 0xe4c
 800c470:	e011      	b.n	800c496 <xDBLMUL+0x21a>
        } else {
            bs1_ip1 = mp_shiftr(k_t, 1, NWORDS_ORDER);
 800c472:	f607 53f4 	addw	r3, r7, #3572	@ 0xdf4
 800c476:	2208      	movs	r2, #8
 800c478:	2101      	movs	r1, #1
 800c47a:	4618      	mov	r0, r3
 800c47c:	f01b fbac 	bl	8027bd8 <sqisign_gen_mp_shiftr>
 800c480:	f8c7 0e50 	str.w	r0, [r7, #3664]	@ 0xe50
            bs2_ip1 = mp_shiftr(l_t, 1, NWORDS_ORDER);
 800c484:	f607 53d4 	addw	r3, r7, #3540	@ 0xdd4
 800c488:	2208      	movs	r2, #8
 800c48a:	2101      	movs	r1, #1
 800c48c:	4618      	mov	r0, r3
 800c48e:	f01b fba3 	bl	8027bd8 <sqisign_gen_mp_shiftr>
 800c492:	f8c7 0e4c 	str.w	r0, [r7, #3660]	@ 0xe4c
        }
        bs1_i = k_t[0] & 1;
 800c496:	f8d7 3df4 	ldr.w	r3, [r7, #3572]	@ 0xdf4
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	f8c7 3e24 	str.w	r3, [r7, #3620]	@ 0xe24
        bs2_i = l_t[0] & 1;
 800c4a2:	f8d7 3dd4 	ldr.w	r3, [r7, #3540]	@ 0xdd4
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	f8c7 3e20 	str.w	r3, [r7, #3616]	@ 0xe20

        r[2 * i] = bs1_i ^ bs1_ip1;
 800c4ae:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c4b2:	005a      	lsls	r2, r3, #1
 800c4b4:	f8d7 1e24 	ldr.w	r1, [r7, #3620]	@ 0xe24
 800c4b8:	f8d7 3e50 	ldr.w	r3, [r7, #3664]	@ 0xe50
 800c4bc:	4059      	eors	r1, r3
 800c4be:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c4c2:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 800c4c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        r[2 * i + 1] = bs2_i ^ bs2_ip1;
 800c4ca:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	f8d7 1e20 	ldr.w	r1, [r7, #3616]	@ 0xe20
 800c4d6:	f8d7 3e4c 	ldr.w	r3, [r7, #3660]	@ 0xe4c
 800c4da:	4059      	eors	r1, r3
 800c4dc:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c4e0:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 800c4e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // Revert sigma if second bit, r_(2i+1), is 1
        pre_sigma = sigma[0];
 800c4e8:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 800c4ec:	f8c7 3e48 	str.w	r3, [r7, #3656]	@ 0xe48
        maskk = 0 - r[2 * i + 1];
 800c4f0:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c4fc:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 800c500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c504:	425b      	negs	r3, r3
 800c506:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
        select_ct(&temp, &sigma[0], &sigma[1], maskk, 1);
 800c50a:	f607 6314 	addw	r3, r7, #3604	@ 0xe14
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	f607 6114 	addw	r1, r7, #3604	@ 0xe14
 800c514:	f607 601c 	addw	r0, r7, #3612	@ 0xe1c
 800c518:	2301      	movs	r3, #1
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c520:	f01b fc3a 	bl	8027d98 <sqisign_gen_select_ct>
        select_ct(&sigma[1], &sigma[1], &sigma[0], maskk, 1);
 800c524:	f607 6214 	addw	r2, r7, #3604	@ 0xe14
 800c528:	f607 6314 	addw	r3, r7, #3604	@ 0xe14
 800c52c:	1d19      	adds	r1, r3, #4
 800c52e:	f607 6314 	addw	r3, r7, #3604	@ 0xe14
 800c532:	1d18      	adds	r0, r3, #4
 800c534:	2301      	movs	r3, #1
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c53c:	f01b fc2c 	bl	8027d98 <sqisign_gen_select_ct>
        sigma[0] = temp;
 800c540:	f8d7 3e1c 	ldr.w	r3, [r7, #3612]	@ 0xe1c
 800c544:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
    for (i = 0; i < kbits; i++) {
 800c548:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c54c:	3301      	adds	r3, #1
 800c54e:	f8c7 3e54 	str.w	r3, [r7, #3668]	@ 0xe54
 800c552:	f8d7 2e54 	ldr.w	r2, [r7, #3668]	@ 0xe54
 800c556:	f8d7 3e70 	ldr.w	r3, [r7, #3696]	@ 0xe70
 800c55a:	429a      	cmp	r2, r3
 800c55c:	f6ff af6a 	blt.w	800c434 <xDBLMUL+0x1b8>
    }

    // Point initialization
    ec_point_init(&R[0]);
 800c560:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c564:	4618      	mov	r0, r3
 800c566:	f7fe ff47 	bl	800b3f8 <ec_point_init>
    maskk = 0 - sigma[0];
 800c56a:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 800c56e:	425b      	negs	r3, r3
 800c570:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
    select_point(&R[1], P, Q, maskk);
 800c574:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c578:	f6a3 6258 	subw	r2, r3, #3672	@ 0xe58
 800c57c:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c580:	f5a3 6165 	sub.w	r1, r3, #3664	@ 0xe50
 800c584:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c588:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800c58c:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	6809      	ldr	r1, [r1, #0]
 800c594:	f7fe ff5b 	bl	800b44e <select_point>
    select_point(&R[2], Q, P, maskk);
 800c598:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c59c:	f5a3 6265 	sub.w	r2, r3, #3664	@ 0xe50
 800c5a0:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c5a4:	f6a3 6158 	subw	r1, r3, #3672	@ 0xe58
 800c5a8:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c5ac:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 800c5b0:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c5b4:	6812      	ldr	r2, [r2, #0]
 800c5b6:	6809      	ldr	r1, [r1, #0]
 800c5b8:	f7fe ff49 	bl	800b44e <select_point>

    fp2_copy(&DIFF1a.x, &R[1].x);
 800c5bc:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c5c0:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800c5c4:	f207 5324 	addw	r3, r7, #1316	@ 0x524
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f006 fa2e 	bl	8012a2c <fp2_copy>
    fp2_copy(&DIFF1a.z, &R[1].z);
 800c5d0:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c5d4:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 800c5d8:	f207 5324 	addw	r3, r7, #1316	@ 0x524
 800c5dc:	3348      	adds	r3, #72	@ 0x48
 800c5de:	4611      	mov	r1, r2
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f006 fa23 	bl	8012a2c <fp2_copy>
    fp2_copy(&DIFF1b.x, &R[2].x);
 800c5e6:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c5ea:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c5ee:	f207 4394 	addw	r3, r7, #1172	@ 0x494
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f006 fa19 	bl	8012a2c <fp2_copy>
    fp2_copy(&DIFF1b.z, &R[2].z);
 800c5fa:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c5fe:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800c602:	f207 4394 	addw	r3, r7, #1172	@ 0x494
 800c606:	3348      	adds	r3, #72	@ 0x48
 800c608:	4611      	mov	r1, r2
 800c60a:	4618      	mov	r0, r3
 800c60c:	f006 fa0e 	bl	8012a2c <fp2_copy>

    // Initialize DIFF2a <- P+Q, DIFF2b <- P-Q
    xADD(&R[2], &R[1], &R[2], PQ);
 800c610:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c614:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c618:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c61c:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800c620:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c624:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 800c628:	f8d7 3e6c 	ldr.w	r3, [r7, #3692]	@ 0xe6c
 800c62c:	f7ff fb96 	bl	800bd5c <xADD>
    if (ec_has_zero_coordinate(&R[2]))
 800c630:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c634:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff f802 	bl	800b642 <ec_has_zero_coordinate>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <xDBLMUL+0x3cc>
        return 0; // non valid formulas
 800c644:	2300      	movs	r3, #0
 800c646:	e14f      	b.n	800c8e8 <xDBLMUL+0x66c>

    fp2_copy(&DIFF2a.x, &R[2].x);
 800c648:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c64c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c650:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800c654:	4611      	mov	r1, r2
 800c656:	4618      	mov	r0, r3
 800c658:	f006 f9e8 	bl	8012a2c <fp2_copy>
    fp2_copy(&DIFF2a.z, &R[2].z);
 800c65c:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c660:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800c664:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800c668:	3348      	adds	r3, #72	@ 0x48
 800c66a:	4611      	mov	r1, r2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f006 f9dd 	bl	8012a2c <fp2_copy>
    fp2_copy(&DIFF2b.x, &PQ->x);
 800c672:	f8d7 2e6c 	ldr.w	r2, [r7, #3692]	@ 0xe6c
 800c676:	f507 735d 	add.w	r3, r7, #884	@ 0x374
 800c67a:	4611      	mov	r1, r2
 800c67c:	4618      	mov	r0, r3
 800c67e:	f006 f9d5 	bl	8012a2c <fp2_copy>
    fp2_copy(&DIFF2b.z, &PQ->z);
 800c682:	f8d7 3e6c 	ldr.w	r3, [r7, #3692]	@ 0xe6c
 800c686:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800c68a:	f507 735d 	add.w	r3, r7, #884	@ 0x374
 800c68e:	3348      	adds	r3, #72	@ 0x48
 800c690:	4611      	mov	r1, r2
 800c692:	4618      	mov	r0, r3
 800c694:	f006 f9ca 	bl	8012a2c <fp2_copy>

    A_is_zero = fp2_is_zero(&curve->A);
 800c698:	f8d7 3e74 	ldr.w	r3, [r7, #3700]	@ 0xe74
 800c69c:	4618      	mov	r0, r3
 800c69e:	f006 f97d 	bl	801299c <fp2_is_zero>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f8c7 3e2c 	str.w	r3, [r7, #3628]	@ 0xe2c

    // Main loop
    for (i = kbits - 1; i >= 0; i--) {
 800c6a8:	f8d7 3e70 	ldr.w	r3, [r7, #3696]	@ 0xe70
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	f8c7 3e54 	str.w	r3, [r7, #3668]	@ 0xe54
 800c6b2:	e0ea      	b.n	800c88a <xDBLMUL+0x60e>
        h = r[2 * i] + r[2 * i + 1]; // in {0, 1, 2}
 800c6b4:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c6b8:	005a      	lsls	r2, r3, #1
 800c6ba:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c6be:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 800c6c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c6c6:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	1c59      	adds	r1, r3, #1
 800c6ce:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c6d2:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 800c6d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6da:	4413      	add	r3, r2
 800c6dc:	f8c7 3e28 	str.w	r3, [r7, #3624]	@ 0xe28
        maskk = 0 - (h & 1);
 800c6e0:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	@ 0xe28
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	425b      	negs	r3, r3
 800c6ea:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
        select_point(&T[0], &R[0], &R[1], maskk);
 800c6ee:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c6f2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800c6f6:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800c6fa:	f107 0014 	add.w	r0, r7, #20
 800c6fe:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c702:	f7fe fea4 	bl	800b44e <select_point>
        maskk = 0 - (h >> 1);
 800c706:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	@ 0xe28
 800c70a:	085b      	lsrs	r3, r3, #1
 800c70c:	425b      	negs	r3, r3
 800c70e:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
        select_point(&T[0], &T[0], &R[2], maskk);
 800c712:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c716:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c71a:	f107 0114 	add.w	r1, r7, #20
 800c71e:	f107 0014 	add.w	r0, r7, #20
 800c722:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c726:	f7fe fe92 	bl	800b44e <select_point>
        if (A_is_zero) {
 800c72a:	f8d7 3e2c 	ldr.w	r3, [r7, #3628]	@ 0xe2c
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d008      	beq.n	800c744 <xDBLMUL+0x4c8>
            xDBL_E0(&T[0], &T[0]);
 800c732:	f107 0214 	add.w	r2, r7, #20
 800c736:	f107 0314 	add.w	r3, r7, #20
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff f99f 	bl	800ba80 <xDBL_E0>
 800c742:	e01a      	b.n	800c77a <xDBLMUL+0x4fe>
        } else {
            assert(fp2_is_one(&curve->A24.z));
 800c744:	f8d7 3e74 	ldr.w	r3, [r7, #3700]	@ 0xe74
 800c748:	33d8      	adds	r3, #216	@ 0xd8
 800c74a:	4618      	mov	r0, r3
 800c74c:	f006 f956 	bl	80129fc <fp2_is_one>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <xDBLMUL+0x4e8>
 800c756:	4b67      	ldr	r3, [pc, #412]	@ (800c8f4 <xDBLMUL+0x678>)
 800c758:	4a67      	ldr	r2, [pc, #412]	@ (800c8f8 <xDBLMUL+0x67c>)
 800c75a:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800c75e:	4867      	ldr	r0, [pc, #412]	@ (800c8fc <xDBLMUL+0x680>)
 800c760:	f028 fd6a 	bl	8035238 <__assert_func>
            xDBL_A24(&T[0], &T[0], &curve->A24, true);
 800c764:	f8d7 3e74 	ldr.w	r3, [r7, #3700]	@ 0xe74
 800c768:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800c76c:	f107 0114 	add.w	r1, r7, #20
 800c770:	f107 0014 	add.w	r0, r7, #20
 800c774:	2301      	movs	r3, #1
 800c776:	f7ff fa89 	bl	800bc8c <xDBL_A24>
        }

        maskk = 0 - r[2 * i + 1]; // in {0, 1}
 800c77a:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	1c5a      	adds	r2, r3, #1
 800c782:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c786:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 800c78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78e:	425b      	negs	r3, r3
 800c790:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
        select_point(&T[1], &R[0], &R[1], maskk);
 800c794:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c798:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800c79c:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800c7a0:	f107 0314 	add.w	r3, r7, #20
 800c7a4:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800c7a8:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c7ac:	f7fe fe4f 	bl	800b44e <select_point>
        select_point(&T[2], &R[1], &R[2], maskk);
 800c7b0:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c7b4:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c7b8:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c7bc:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800c7c0:	f107 0314 	add.w	r3, r7, #20
 800c7c4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 800c7c8:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c7cc:	f7fe fe3f 	bl	800b44e <select_point>

        cswap_points(&DIFF1a, &DIFF1b, maskk);
 800c7d0:	f207 4194 	addw	r1, r7, #1172	@ 0x494
 800c7d4:	f207 5324 	addw	r3, r7, #1316	@ 0x524
 800c7d8:	f8d7 2e3c 	ldr.w	r2, [r7, #3644]	@ 0xe3c
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe fe53 	bl	800b488 <cswap_points>
        xADD(&T[1], &T[1], &T[2], &DIFF1a);
 800c7e2:	f207 5424 	addw	r4, r7, #1316	@ 0x524
 800c7e6:	f107 0314 	add.w	r3, r7, #20
 800c7ea:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c7ee:	f107 0314 	add.w	r3, r7, #20
 800c7f2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800c7f6:	f107 0314 	add.w	r3, r7, #20
 800c7fa:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800c7fe:	4623      	mov	r3, r4
 800c800:	f7ff faac 	bl	800bd5c <xADD>
        xADD(&T[2], &R[0], &R[2], &DIFF2a);
 800c804:	f207 4404 	addw	r4, r7, #1028	@ 0x404
 800c808:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c80c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c810:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800c814:	f107 0314 	add.w	r3, r7, #20
 800c818:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 800c81c:	4623      	mov	r3, r4
 800c81e:	f7ff fa9d 	bl	800bd5c <xADD>

        // If hw (mod 2) = 1 then swap DIFF2a and DIFF2b
        maskk = 0 - (h & 1);
 800c822:	f8d7 3e28 	ldr.w	r3, [r7, #3624]	@ 0xe28
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	425b      	negs	r3, r3
 800c82c:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
        cswap_points(&DIFF2a, &DIFF2b, maskk);
 800c830:	f507 715d 	add.w	r1, r7, #884	@ 0x374
 800c834:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800c838:	f8d7 2e3c 	ldr.w	r2, [r7, #3644]	@ 0xe3c
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fe fe23 	bl	800b488 <cswap_points>

        // R <- T
        copy_point(&R[0], &T[0]);
 800c842:	f107 0214 	add.w	r2, r7, #20
 800c846:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c84a:	4611      	mov	r1, r2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe fd63 	bl	800b318 <copy_point>
        copy_point(&R[1], &T[1]);
 800c852:	f107 0314 	add.w	r3, r7, #20
 800c856:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800c85a:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c85e:	3390      	adds	r3, #144	@ 0x90
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe fd58 	bl	800b318 <copy_point>
        copy_point(&R[2], &T[2]);
 800c868:	f107 0314 	add.w	r3, r7, #20
 800c86c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c870:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c874:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe fd4c 	bl	800b318 <copy_point>
    for (i = kbits - 1; i >= 0; i--) {
 800c880:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c884:	3b01      	subs	r3, #1
 800c886:	f8c7 3e54 	str.w	r3, [r7, #3668]	@ 0xe54
 800c88a:	f8d7 3e54 	ldr.w	r3, [r7, #3668]	@ 0xe54
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f6bf af10 	bge.w	800c6b4 <xDBLMUL+0x438>
    }

    // Output R[evens]
    select_point(S, &R[0], &R[1], mevens);
 800c894:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c898:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800c89c:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800c8a0:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c8a4:	f6a3 604c 	subw	r0, r3, #3660	@ 0xe4c
 800c8a8:	f8d7 3e30 	ldr.w	r3, [r7, #3632]	@ 0xe30
 800c8ac:	6800      	ldr	r0, [r0, #0]
 800c8ae:	f7fe fdce 	bl	800b44e <select_point>

    maskk = 0 - (bitk0 & bitl0);
 800c8b2:	f8d7 2e44 	ldr.w	r2, [r7, #3652]	@ 0xe44
 800c8b6:	f8d7 3e40 	ldr.w	r3, [r7, #3648]	@ 0xe40
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	425b      	negs	r3, r3
 800c8be:	f8c7 3e3c 	str.w	r3, [r7, #3644]	@ 0xe3c
    select_point(S, S, &R[2], maskk);
 800c8c2:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800c8c6:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800c8ca:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c8ce:	f6a3 614c 	subw	r1, r3, #3660	@ 0xe4c
 800c8d2:	f607 6358 	addw	r3, r7, #3672	@ 0xe58
 800c8d6:	f6a3 604c 	subw	r0, r3, #3660	@ 0xe4c
 800c8da:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	@ 0xe3c
 800c8de:	6809      	ldr	r1, [r1, #0]
 800c8e0:	6800      	ldr	r0, [r0, #0]
 800c8e2:	f7fe fdb4 	bl	800b44e <select_point>
    return 1;
 800c8e6:	2301      	movs	r3, #1
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f607 675c 	addw	r7, r7, #3676	@ 0xe5c
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd90      	pop	{r4, r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	08037484 	.word	0x08037484
 800c8f8:	08037458 	.word	0x08037458
 800c8fc:	0803745c 	.word	0x0803745c

0800c900 <ec_ladder3pt>:
             const digit_t *m,
             const ec_point_t *P,
             const ec_point_t *Q,
             const ec_point_t *PQ,
             const ec_curve_t *E)
{ // The 3-point Montgomery ladder
 800c900:	b5b0      	push	{r4, r5, r7, lr}
 800c902:	b0f8      	sub	sp, #480	@ 0x1e0
 800c904:	af04      	add	r7, sp, #16
 800c906:	f507 74e8 	add.w	r4, r7, #464	@ 0x1d0
 800c90a:	f5a4 74e2 	sub.w	r4, r4, #452	@ 0x1c4
 800c90e:	6020      	str	r0, [r4, #0]
 800c910:	f507 70e8 	add.w	r0, r7, #464	@ 0x1d0
 800c914:	f5a0 70e4 	sub.w	r0, r0, #456	@ 0x1c8
 800c918:	6001      	str	r1, [r0, #0]
 800c91a:	f507 71e8 	add.w	r1, r7, #464	@ 0x1d0
 800c91e:	f5a1 71e6 	sub.w	r1, r1, #460	@ 0x1cc
 800c922:	600a      	str	r2, [r1, #0]
 800c924:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 800c928:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800c92c:	6013      	str	r3, [r2, #0]
  // Input:  projective Montgomery points P=(XP:ZP) and Q=(XQ:ZQ) such that xP=XP/ZP and xQ=XQ/ZQ, a scalar k of
  //         bitlength kbits, the difference PQ=P-Q=(XPQ:ZPQ), and the Montgomery curve constants A24 = (A+2C/4C:1).
  // Output: projective Montgomery point R <- P + m*Q = (XR:ZR) such that x(P + m*Q)=XR/ZR.
    assert(E->is_A24_computed_and_normalized);
 800c92e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800c932:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800c936:	2b00      	cmp	r3, #0
 800c938:	d106      	bne.n	800c948 <ec_ladder3pt+0x48>
 800c93a:	4b59      	ldr	r3, [pc, #356]	@ (800caa0 <ec_ladder3pt+0x1a0>)
 800c93c:	4a59      	ldr	r2, [pc, #356]	@ (800caa4 <ec_ladder3pt+0x1a4>)
 800c93e:	f240 2111 	movw	r1, #529	@ 0x211
 800c942:	4859      	ldr	r0, [pc, #356]	@ (800caa8 <ec_ladder3pt+0x1a8>)
 800c944:	f028 fc78 	bl	8035238 <__assert_func>
    if (!fp2_is_one(&E->A24.z)) {
 800c948:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800c94c:	33d8      	adds	r3, #216	@ 0xd8
 800c94e:	4618      	mov	r0, r3
 800c950:	f006 f854 	bl	80129fc <fp2_is_one>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <ec_ladder3pt+0x5e>
        return 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	e09a      	b.n	800ca94 <ec_ladder3pt+0x194>
    }
    // Formulas are not valid in that case
    if (ec_has_zero_coordinate(PQ)) {
 800c95e:	f8d7 01e0 	ldr.w	r0, [r7, #480]	@ 0x1e0
 800c962:	f7fe fe6e 	bl	800b642 <ec_has_zero_coordinate>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <ec_ladder3pt+0x70>
        return 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	e091      	b.n	800ca94 <ec_ladder3pt+0x194>
    }

    ec_point_t X0, X1, X2;
    copy_point(&X0, Q);
 800c970:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800c974:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800c978:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800c97c:	6819      	ldr	r1, [r3, #0]
 800c97e:	4610      	mov	r0, r2
 800c980:	f7fe fcca 	bl	800b318 <copy_point>
    copy_point(&X1, P);
 800c984:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800c988:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c98c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800c990:	6819      	ldr	r1, [r3, #0]
 800c992:	4610      	mov	r0, r2
 800c994:	f7fe fcc0 	bl	800b318 <copy_point>
    copy_point(&X2, PQ);
 800c998:	f107 0314 	add.w	r3, r7, #20
 800c99c:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fe fcb9 	bl	800b318 <copy_point>

    int i, j;
    digit_t t;
    for (i = 0; i < NWORDS_ORDER; i++) {
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800c9ac:	e063      	b.n	800ca76 <ec_ladder3pt+0x176>
        t = 1;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        for (j = 0; j < RADIX; j++) {
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800c9ba:	e053      	b.n	800ca64 <ec_ladder3pt+0x164>
            cswap_points(&X1, &X2, -((t & m[i]) == 0));
 800c9bc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 800c9c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800c9ca:	6812      	ldr	r2, [r2, #0]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bf0c      	ite	eq
 800c9da:	2301      	moveq	r3, #1
 800c9dc:	2300      	movne	r3, #0
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	425b      	negs	r3, r3
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f107 0114 	add.w	r1, r7, #20
 800c9e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fe fd4b 	bl	800b488 <cswap_points>
            xDBLADD(&X0, &X1, &X0, &X1, &X2, &E->A24, true);
 800c9f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800c9f6:	3390      	adds	r3, #144	@ 0x90
 800c9f8:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800c9fc:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800ca00:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800ca04:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 800ca08:	2501      	movs	r5, #1
 800ca0a:	9502      	str	r5, [sp, #8]
 800ca0c:	9301      	str	r3, [sp, #4]
 800ca0e:	f107 0314 	add.w	r3, r7, #20
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	4623      	mov	r3, r4
 800ca16:	f7ff fa5f 	bl	800bed8 <xDBLADD>
            cswap_points(&X1, &X2, -((t & m[i]) == 0));
 800ca1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 800ca24:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800ca28:	6812      	ldr	r2, [r2, #0]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800ca32:	4013      	ands	r3, r2
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	bf0c      	ite	eq
 800ca38:	2301      	moveq	r3, #1
 800ca3a:	2300      	movne	r3, #0
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	425b      	negs	r3, r3
 800ca40:	461a      	mov	r2, r3
 800ca42:	f107 0114 	add.w	r1, r7, #20
 800ca46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fd1c 	bl	800b488 <cswap_points>
            t <<= 1;
 800ca50:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        for (j = 0; j < RADIX; j++) {
 800ca5a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800ca5e:	3301      	adds	r3, #1
 800ca60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800ca64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800ca68:	2b1f      	cmp	r3, #31
 800ca6a:	dda7      	ble.n	800c9bc <ec_ladder3pt+0xbc>
    for (i = 0; i < NWORDS_ORDER; i++) {
 800ca6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800ca70:	3301      	adds	r3, #1
 800ca72:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800ca76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800ca7a:	2b07      	cmp	r3, #7
 800ca7c:	dd97      	ble.n	800c9ae <ec_ladder3pt+0xae>
        };
    };
    copy_point(R, &X1);
 800ca7e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800ca82:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ca86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	6818      	ldr	r0, [r3, #0]
 800ca8e:	f7fe fc43 	bl	800b318 <copy_point>
    return 1;
 800ca92:	2301      	movs	r3, #1
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	080374a0 	.word	0x080374a0
 800caa4:	08037458 	.word	0x08037458
 800caa8:	0803745c 	.word	0x0803745c

0800caac <ec_dbl>:

// WRAPPERS to export

void
ec_dbl(ec_point_t *res, const ec_point_t *P, const ec_curve_t *curve)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
    // If A24 = ((A+2)/4 : 1) we save multiplications
    if (curve->is_A24_computed_and_normalized) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d017      	beq.n	800caf2 <ec_dbl+0x46>
        assert(fp2_is_one(&curve->A24.z));
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	33d8      	adds	r3, #216	@ 0xd8
 800cac6:	4618      	mov	r0, r3
 800cac8:	f005 ff98 	bl	80129fc <fp2_is_one>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d106      	bne.n	800cae0 <ec_dbl+0x34>
 800cad2:	4b0c      	ldr	r3, [pc, #48]	@ (800cb04 <ec_dbl+0x58>)
 800cad4:	4a0c      	ldr	r2, [pc, #48]	@ (800cb08 <ec_dbl+0x5c>)
 800cad6:	f240 2135 	movw	r1, #565	@ 0x235
 800cada:	480c      	ldr	r0, [pc, #48]	@ (800cb0c <ec_dbl+0x60>)
 800cadc:	f028 fbac 	bl	8035238 <__assert_func>
        xDBL_A24(res, P, &curve->A24, true);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800cae6:	2301      	movs	r3, #1
 800cae8:	68b9      	ldr	r1, [r7, #8]
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f7ff f8ce 	bl	800bc8c <xDBL_A24>
    } else {
        // Otherwise we compute A24 on the fly for doubling
        xDBL(res, P, (const ec_point_t *)curve);
    }
}
 800caf0:	e004      	b.n	800cafc <ec_dbl+0x50>
        xDBL(res, P, (const ec_point_t *)curve);
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	68b9      	ldr	r1, [r7, #8]
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7ff f81a 	bl	800bb30 <xDBL>
}
 800cafc:	bf00      	nop
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	08037484 	.word	0x08037484
 800cb08:	08037458 	.word	0x08037458
 800cb0c:	0803745c 	.word	0x0803745c

0800cb10 <ec_dbl_iter>:

void
ec_dbl_iter(ec_point_t *res, int n, const ec_point_t *P, ec_curve_t *curve)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	603b      	str	r3, [r7, #0]
    if (n == 0) {
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d104      	bne.n	800cb2e <ec_dbl_iter+0x1e>
        copy_point(res, P);
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7fe fbf6 	bl	800b318 <copy_point>
        return;
 800cb2c:	e059      	b.n	800cbe2 <ec_dbl_iter+0xd2>
    }

    // When the chain is long enough, we should normalise A24
    if (n > 50) {
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	2b32      	cmp	r3, #50	@ 0x32
 800cb32:	dd02      	ble.n	800cb3a <ec_dbl_iter+0x2a>
        ec_curve_normalize_A24(curve);
 800cb34:	6838      	ldr	r0, [r7, #0]
 800cb36:	f7fe fcf3 	bl	800b520 <ec_curve_normalize_A24>
    }

    // When A24 is normalized we can save some multiplications
    if (curve->is_A24_computed_and_normalized) {
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d039      	beq.n	800cbb8 <ec_dbl_iter+0xa8>
        assert(fp2_is_one(&curve->A24.z));
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	33d8      	adds	r3, #216	@ 0xd8
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f005 ff57 	bl	80129fc <fp2_is_one>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d106      	bne.n	800cb62 <ec_dbl_iter+0x52>
 800cb54:	4b24      	ldr	r3, [pc, #144]	@ (800cbe8 <ec_dbl_iter+0xd8>)
 800cb56:	4a25      	ldr	r2, [pc, #148]	@ (800cbec <ec_dbl_iter+0xdc>)
 800cb58:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800cb5c:	4824      	ldr	r0, [pc, #144]	@ (800cbf0 <ec_dbl_iter+0xe0>)
 800cb5e:	f028 fb6b 	bl	8035238 <__assert_func>
        xDBL_A24(res, P, &curve->A24, true);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800cb68:	2301      	movs	r3, #1
 800cb6a:	6879      	ldr	r1, [r7, #4]
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff f88d 	bl	800bc8c <xDBL_A24>
        for (int i = 0; i < n - 1; i++) {
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]
 800cb76:	e019      	b.n	800cbac <ec_dbl_iter+0x9c>
            assert(fp2_is_one(&curve->A24.z));
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	33d8      	adds	r3, #216	@ 0xd8
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f005 ff3d 	bl	80129fc <fp2_is_one>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d106      	bne.n	800cb96 <ec_dbl_iter+0x86>
 800cb88:	4b17      	ldr	r3, [pc, #92]	@ (800cbe8 <ec_dbl_iter+0xd8>)
 800cb8a:	4a18      	ldr	r2, [pc, #96]	@ (800cbec <ec_dbl_iter+0xdc>)
 800cb8c:	f240 214f 	movw	r1, #591	@ 0x24f
 800cb90:	4817      	ldr	r0, [pc, #92]	@ (800cbf0 <ec_dbl_iter+0xe0>)
 800cb92:	f028 fb51 	bl	8035238 <__assert_func>
            xDBL_A24(res, res, &curve->A24, true);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	68f9      	ldr	r1, [r7, #12]
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f7ff f873 	bl	800bc8c <xDBL_A24>
        for (int i = 0; i < n - 1; i++) {
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	617b      	str	r3, [r7, #20]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	dbe0      	blt.n	800cb78 <ec_dbl_iter+0x68>
 800cbb6:	e014      	b.n	800cbe2 <ec_dbl_iter+0xd2>
        }
    } else {
        // Otherwise we do normal doubling
        xDBL(res, P, (const ec_point_t *)curve);
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7fe ffb7 	bl	800bb30 <xDBL>
        for (int i = 0; i < n - 1; i++) {
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	613b      	str	r3, [r7, #16]
 800cbc6:	e007      	b.n	800cbd8 <ec_dbl_iter+0xc8>
            xDBL(res, res, (const ec_point_t *)curve);
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	68f9      	ldr	r1, [r7, #12]
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7fe ffaf 	bl	800bb30 <xDBL>
        for (int i = 0; i < n - 1; i++) {
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	613b      	str	r3, [r7, #16]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	dbf2      	blt.n	800cbc8 <ec_dbl_iter+0xb8>
        }
    }
}
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	08037484 	.word	0x08037484
 800cbec:	08037458 	.word	0x08037458
 800cbf0:	0803745c 	.word	0x0803745c

0800cbf4 <ec_dbl_iter_basis>:

void
ec_dbl_iter_basis(ec_basis_t *res, int n, const ec_basis_t *B, ec_curve_t *curve)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	603b      	str	r3, [r7, #0]
    ec_dbl_iter(&res->P, n, &B->P, curve);
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	68b9      	ldr	r1, [r7, #8]
 800cc0a:	f7ff ff81 	bl	800cb10 <ec_dbl_iter>
    ec_dbl_iter(&res->Q, n, &B->Q, curve);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	68b9      	ldr	r1, [r7, #8]
 800cc1e:	f7ff ff77 	bl	800cb10 <ec_dbl_iter>
    ec_dbl_iter(&res->PmQ, n, &B->PmQ, curve);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	68b9      	ldr	r1, [r7, #8]
 800cc32:	f7ff ff6d 	bl	800cb10 <ec_dbl_iter>
}
 800cc36:	bf00      	nop
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <ec_mul>:

void
ec_mul(ec_point_t *res, const digit_t *scalar, const int kbits, const ec_point_t *P, ec_curve_t *curve)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b086      	sub	sp, #24
 800cc42:	af02      	add	r7, sp, #8
 800cc44:	60f8      	str	r0, [r7, #12]
 800cc46:	60b9      	str	r1, [r7, #8]
 800cc48:	607a      	str	r2, [r7, #4]
 800cc4a:	603b      	str	r3, [r7, #0]
    // For large scalars it's worth normalising anyway
    if (kbits > 50) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b32      	cmp	r3, #50	@ 0x32
 800cc50:	dd02      	ble.n	800cc58 <ec_mul+0x1a>
        ec_curve_normalize_A24(curve);
 800cc52:	69b8      	ldr	r0, [r7, #24]
 800cc54:	f7fe fc64 	bl	800b520 <ec_curve_normalize_A24>
    }

    // When A24 is computed and normalized we save some Fp2 multiplications
    xMUL(res, P, scalar, kbits, curve);
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f7ff f9f6 	bl	800c054 <xMUL>
}
 800cc68:	bf00      	nop
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <ec_biscalar_mul>:
                const digit_t *scalarP,
                const digit_t *scalarQ,
                const int kbits,
                const ec_basis_t *PQ,
                const ec_curve_t *curve)
{
 800cc70:	b5b0      	push	{r4, r5, r7, lr}
 800cc72:	b0d4      	sub	sp, #336	@ 0x150
 800cc74:	af04      	add	r7, sp, #16
 800cc76:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800cc7a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800cc7e:	6020      	str	r0, [r4, #0]
 800cc80:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800cc84:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cc88:	6001      	str	r1, [r0, #0]
 800cc8a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800cc8e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800cc92:	600a      	str	r2, [r1, #0]
 800cc94:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cc98:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 800cc9c:	6013      	str	r3, [r2, #0]
    if (fp2_is_zero(&PQ->PmQ.z))
 800cc9e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cca2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800cca6:	4618      	mov	r0, r3
 800cca8:	f005 fe78 	bl	801299c <fp2_is_zero>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <ec_biscalar_mul+0x46>
        return 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e0d1      	b.n	800ce5a <ec_biscalar_mul+0x1ea>

    /* Differential additions behave badly when PmQ = (0:1), so we need to
     * treat this case specifically. Since we assume P, Q are a basis, this
     * can happen only if kbits==1 */
    if (kbits == 1) {
 800ccb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ccba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	f040 808d 	bne.w	800cde0 <ec_biscalar_mul+0x170>
        // Sanity check: our basis should be given by 2-torsion points
        if (!ec_is_two_torsion(&PQ->P, curve) || !ec_is_two_torsion(&PQ->Q, curve) ||
 800ccc6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ccca:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fd0b 	bl	800b6ea <ec_is_two_torsion>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d016      	beq.n	800cd08 <ec_biscalar_mul+0x98>
 800ccda:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ccde:	3390      	adds	r3, #144	@ 0x90
 800cce0:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fe fd00 	bl	800b6ea <ec_is_two_torsion>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <ec_biscalar_mul+0x98>
            !ec_is_two_torsion(&PQ->PmQ, curve))
 800ccf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ccf4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ccf8:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fcf4 	bl	800b6ea <ec_is_two_torsion>
 800cd02:	4603      	mov	r3, r0
        if (!ec_is_two_torsion(&PQ->P, curve) || !ec_is_two_torsion(&PQ->Q, curve) ||
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <ec_biscalar_mul+0x9c>
            return 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	e0a6      	b.n	800ce5a <ec_biscalar_mul+0x1ea>
        digit_t bP, bQ;
        bP = (scalarP[0] & 1);
 800cd0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd10:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
        bQ = (scalarQ[0] & 1);
 800cd20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        if (bP == 0 && bQ == 0)
 800cd34:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10b      	bne.n	800cd54 <ec_biscalar_mul+0xe4>
 800cd3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d107      	bne.n	800cd54 <ec_biscalar_mul+0xe4>
            ec_point_init(res); //(1: 0)
 800cd44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	f7fe fb53 	bl	800b3f8 <ec_point_init>
 800cd52:	e043      	b.n	800cddc <ec_biscalar_mul+0x16c>
        else if (bP == 1 && bQ == 0)
 800cd54:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d10e      	bne.n	800cd7a <ec_biscalar_mul+0x10a>
 800cd5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10a      	bne.n	800cd7a <ec_biscalar_mul+0x10a>
            copy_point(res, &PQ->P);
 800cd64:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800cd68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cd70:	4611      	mov	r1, r2
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	f7fe fad0 	bl	800b318 <copy_point>
 800cd78:	e030      	b.n	800cddc <ec_biscalar_mul+0x16c>
        else if (bP == 0 && bQ == 1)
 800cd7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d110      	bne.n	800cda4 <ec_biscalar_mul+0x134>
 800cd82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d10c      	bne.n	800cda4 <ec_biscalar_mul+0x134>
            copy_point(res, &PQ->Q);
 800cd8a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cd8e:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800cd92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	6818      	ldr	r0, [r3, #0]
 800cd9e:	f7fe fabb 	bl	800b318 <copy_point>
 800cda2:	e01b      	b.n	800cddc <ec_biscalar_mul+0x16c>
        else if (bP == 1 && bQ == 1)
 800cda4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d110      	bne.n	800cdce <ec_biscalar_mul+0x15e>
 800cdac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d10c      	bne.n	800cdce <ec_biscalar_mul+0x15e>
            copy_point(res, &PQ->PmQ);
 800cdb4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cdb8:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 800cdbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cdc0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	6818      	ldr	r0, [r3, #0]
 800cdc8:	f7fe faa6 	bl	800b318 <copy_point>
 800cdcc:	e006      	b.n	800cddc <ec_biscalar_mul+0x16c>
        else // should never happen
            assert(0);
 800cdce:	4b25      	ldr	r3, [pc, #148]	@ (800ce64 <ec_biscalar_mul+0x1f4>)
 800cdd0:	4a25      	ldr	r2, [pc, #148]	@ (800ce68 <ec_biscalar_mul+0x1f8>)
 800cdd2:	f240 218e 	movw	r1, #654	@ 0x28e
 800cdd6:	4825      	ldr	r0, [pc, #148]	@ (800ce6c <ec_biscalar_mul+0x1fc>)
 800cdd8:	f028 fa2e 	bl	8035238 <__assert_func>
        return 1;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e03c      	b.n	800ce5a <ec_biscalar_mul+0x1ea>
    } else {
        ec_curve_t E;
        copy_curve(&E, curve);
 800cde0:	f107 0314 	add.w	r3, r7, #20
 800cde4:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fe faad 	bl	800b348 <copy_curve>

        if (!fp2_is_zero(&curve->A)) { // If A is not zero normalize
 800cdee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f005 fdd2 	bl	801299c <fp2_is_zero>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d104      	bne.n	800ce08 <ec_biscalar_mul+0x198>
            ec_curve_normalize_A24(&E);
 800cdfe:	f107 0314 	add.w	r3, r7, #20
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe fb8c 	bl	800b520 <ec_curve_normalize_A24>
        }
        return xDBLMUL(res, &PQ->P, scalarP, &PQ->Q, scalarQ, &PQ->PmQ, kbits, (const ec_curve_t *)&E);
 800ce08:	f8d7 4150 	ldr.w	r4, [r7, #336]	@ 0x150
 800ce0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ce10:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 800ce14:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ce18:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ce1c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800ce20:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800ce24:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800ce28:	f5a1 709a 	sub.w	r0, r1, #308	@ 0x134
 800ce2c:	f107 0114 	add.w	r1, r7, #20
 800ce30:	9103      	str	r1, [sp, #12]
 800ce32:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800ce36:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 800ce3a:	6809      	ldr	r1, [r1, #0]
 800ce3c:	9102      	str	r1, [sp, #8]
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ce44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	6812      	ldr	r2, [r2, #0]
 800ce50:	4621      	mov	r1, r4
 800ce52:	6800      	ldr	r0, [r0, #0]
 800ce54:	f7ff fa12 	bl	800c27c <xDBLMUL>
 800ce58:	4603      	mov	r3, r0
    }
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bdb0      	pop	{r4, r5, r7, pc}
 800ce64:	080374c4 	.word	0x080374c4
 800ce68:	08037458 	.word	0x08037458
 800ce6c:	0803745c 	.word	0x0803745c

0800ce70 <jac_to_xz>:
    return fp2_is_zero(&t0) & fp2_is_zero(&t2);
}

void
jac_to_xz(ec_point_t *P, const jac_point_t *xyP)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b096      	sub	sp, #88	@ 0x58
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &xyP->x);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	4611      	mov	r1, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f005 fdd3 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &xyP->z);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	3390      	adds	r3, #144	@ 0x90
 800ce90:	4619      	mov	r1, r3
 800ce92:	4610      	mov	r0, r2
 800ce94:	f005 fdca 	bl	8012a2c <fp2_copy>
    fp2_sqr(&P->z, &P->z);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3348      	adds	r3, #72	@ 0x48
 800cea2:	4619      	mov	r1, r3
 800cea4:	4610      	mov	r0, r2
 800cea6:	f005 fe91 	bl	8012bcc <fp2_sqr>

    // If xyP = (0:1:0), we currently have P=(0 : 0) but we want to set P=(1:0)
    uint32_t c1, c2;
    fp2_t one;
    fp2_set_one(&one);
 800ceaa:	f107 0308 	add.w	r3, r7, #8
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f005 fd52 	bl	8012958 <fp2_set_one>

    c1 = fp2_is_zero(&P->x);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f005 fd70 	bl	801299c <fp2_is_zero>
 800cebc:	6578      	str	r0, [r7, #84]	@ 0x54
    c2 = fp2_is_zero(&P->z);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3348      	adds	r3, #72	@ 0x48
 800cec2:	4618      	mov	r0, r3
 800cec4:	f005 fd6a 	bl	801299c <fp2_is_zero>
 800cec8:	6538      	str	r0, [r7, #80]	@ 0x50
    fp2_select(&P->x, &P->x, &one, c1 & c2);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ced0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ced2:	4013      	ands	r3, r2
 800ced4:	f107 0208 	add.w	r2, r7, #8
 800ced8:	f006 fa3b 	bl	8013352 <fp2_select>
}
 800cedc:	bf00      	nop
 800cede:	3758      	adds	r7, #88	@ 0x58
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <jac_to_ws>:

void
jac_to_ws(jac_point_t *Q, fp2_t *t, fp2_t *ao3, const jac_point_t *P, const ec_curve_t *curve)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b0a0      	sub	sp, #128	@ 0x80
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
    // Cost of 3M + 2S when A != 0.
    fp_t one;
    fp2_t a;
    /* a = 1 - A^2/3, U = X + (A*Z^2)/3, V = Y, W = Z, T = a*Z^4*/
    fp_set_one(&one);
 800cef2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800cef6:	4618      	mov	r0, r3
 800cef8:	f00c fc77 	bl	80197ea <fp_set_one>
    if (!fp2_is_zero(&(curve->A))) {
 800cefc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf00:	4618      	mov	r0, r3
 800cf02:	f005 fd4b 	bl	801299c <fp2_is_zero>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d14a      	bne.n	800cfa2 <jac_to_ws+0xbe>
        fp_div3(&(ao3->re), &(curve->A.re));
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cf12:	4611      	mov	r1, r2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f00c fd3b 	bl	8019990 <fp_div3>
        fp_div3(&(ao3->im), &(curve->A.im));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800cf20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf24:	3324      	adds	r3, #36	@ 0x24
 800cf26:	4619      	mov	r1, r3
 800cf28:	4610      	mov	r0, r2
 800cf2a:	f00c fd31 	bl	8019990 <fp_div3>
        fp2_sqr(t, &P->z);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	3390      	adds	r3, #144	@ 0x90
 800cf32:	4619      	mov	r1, r3
 800cf34:	68b8      	ldr	r0, [r7, #8]
 800cf36:	f005 fe49 	bl	8012bcc <fp2_sqr>
        fp2_mul(&Q->x, ao3, t);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f005 fdf4 	bl	8012b2e <fp2_mul>
        fp2_add(&Q->x, &Q->x, &P->x);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68f9      	ldr	r1, [r7, #12]
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f005 fd85 	bl	8012a5c <fp2_add>
        fp2_sqr(t, t);
 800cf52:	68b9      	ldr	r1, [r7, #8]
 800cf54:	68b8      	ldr	r0, [r7, #8]
 800cf56:	f005 fe39 	bl	8012bcc <fp2_sqr>
        fp2_mul(&a, ao3, &(curve->A));
 800cf5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cf5e:	f107 0314 	add.w	r3, r7, #20
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f005 fde2 	bl	8012b2e <fp2_mul>
        fp_sub(&(a.re), &one, &(a.re));
 800cf6a:	f107 0214 	add.w	r2, r7, #20
 800cf6e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800cf72:	f107 0314 	add.w	r3, r7, #20
 800cf76:	4618      	mov	r0, r3
 800cf78:	f00c fc8c 	bl	8019894 <fp_sub>
        fp_neg(&(a.im), &(a.im));
 800cf7c:	f107 0314 	add.w	r3, r7, #20
 800cf80:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800cf84:	f107 0314 	add.w	r3, r7, #20
 800cf88:	3324      	adds	r3, #36	@ 0x24
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f00c fc90 	bl	80198b2 <fp_neg>
        fp2_mul(t, t, &a);
 800cf92:	f107 0314 	add.w	r3, r7, #20
 800cf96:	461a      	mov	r2, r3
 800cf98:	68b9      	ldr	r1, [r7, #8]
 800cf9a:	68b8      	ldr	r0, [r7, #8]
 800cf9c:	f005 fdc7 	bl	8012b2e <fp2_mul>
 800cfa0:	e00f      	b.n	800cfc2 <jac_to_ws+0xde>
    } else {
        fp2_copy(&Q->x, &P->x);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	683a      	ldr	r2, [r7, #0]
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f005 fd3f 	bl	8012a2c <fp2_copy>
        fp2_sqr(t, &P->z);
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	3390      	adds	r3, #144	@ 0x90
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	68b8      	ldr	r0, [r7, #8]
 800cfb6:	f005 fe09 	bl	8012bcc <fp2_sqr>
        fp2_sqr(t, t);
 800cfba:	68b9      	ldr	r1, [r7, #8]
 800cfbc:	68b8      	ldr	r0, [r7, #8]
 800cfbe:	f005 fe05 	bl	8012bcc <fp2_sqr>
    }
    fp2_copy(&Q->y, &P->y);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	3348      	adds	r3, #72	@ 0x48
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f005 fd2c 	bl	8012a2c <fp2_copy>
    fp2_copy(&Q->z, &P->z);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	3390      	adds	r3, #144	@ 0x90
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	f005 fd23 	bl	8012a2c <fp2_copy>
}
 800cfe6:	bf00      	nop
 800cfe8:	3780      	adds	r7, #128	@ 0x80
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <jac_from_ws>:

void
jac_from_ws(jac_point_t *Q, const jac_point_t *P, const fp2_t *ao3, const ec_curve_t *curve)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b096      	sub	sp, #88	@ 0x58
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
 800cffa:	603b      	str	r3, [r7, #0]
    // Cost of 1M + 1S when A != 0.
    fp2_t t;
    /* X = U - (A*W^2)/3, Y = V, Z = W. */
    if (!fp2_is_zero(&(curve->A))) {
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	4618      	mov	r0, r3
 800d000:	f005 fccc 	bl	801299c <fp2_is_zero>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d117      	bne.n	800d03a <jac_from_ws+0x4c>
        fp2_sqr(&t, &P->z);
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d010:	f107 0310 	add.w	r3, r7, #16
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f005 fdd8 	bl	8012bcc <fp2_sqr>
        fp2_mul(&t, &t, ao3);
 800d01c:	f107 0110 	add.w	r1, r7, #16
 800d020:	f107 0310 	add.w	r3, r7, #16
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	f005 fd81 	bl	8012b2e <fp2_mul>
        fp2_sub(&Q->x, &P->x, &t);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	68b9      	ldr	r1, [r7, #8]
 800d030:	f107 0210 	add.w	r2, r7, #16
 800d034:	4618      	mov	r0, r3
 800d036:	f005 fd47 	bl	8012ac8 <fp2_sub>
    }
    fp2_copy(&Q->y, &P->y);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	3348      	adds	r3, #72	@ 0x48
 800d044:	4619      	mov	r1, r3
 800d046:	4610      	mov	r0, r2
 800d048:	f005 fcf0 	bl	8012a2c <fp2_copy>
    fp2_copy(&Q->z, &P->z);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	3390      	adds	r3, #144	@ 0x90
 800d056:	4619      	mov	r1, r3
 800d058:	4610      	mov	r0, r2
 800d05a:	f005 fce7 	bl	8012a2c <fp2_copy>
}
 800d05e:	bf00      	nop
 800d060:	3758      	adds	r7, #88	@ 0x58
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <jac_neg>:
    fp2_copy(&(P->z), &(Q->z));
}

void
jac_neg(jac_point_t *Q, const jac_point_t *P)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b082      	sub	sp, #8
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
    fp2_copy(&Q->x, &P->x);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	4611      	mov	r1, r2
 800d076:	4618      	mov	r0, r3
 800d078:	f005 fcd8 	bl	8012a2c <fp2_copy>
    fp2_neg(&Q->y, &P->y);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	3348      	adds	r3, #72	@ 0x48
 800d086:	4619      	mov	r1, r3
 800d088:	4610      	mov	r0, r2
 800d08a:	f005 fd38 	bl	8012afe <fp2_neg>
    fp2_copy(&Q->z, &P->z);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	3390      	adds	r3, #144	@ 0x90
 800d098:	4619      	mov	r1, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	f005 fcc6 	bl	8012a2c <fp2_copy>
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <DBL>:

void
DBL(jac_point_t *Q, const jac_point_t *P, const ec_curve_t *AC)
{ // Cost of 6M + 6S.
 800d0a8:	b590      	push	{r4, r7, lr}
 800d0aa:	b0cf      	sub	sp, #316	@ 0x13c
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d0b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d0b6:	6018      	str	r0, [r3, #0]
 800d0b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d0bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d0c0:	6019      	str	r1, [r3, #0]
 800d0c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d0c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d0ca:	601a      	str	r2, [r3, #0]
  // Doubling on a Montgomery curve, representation in Jacobian coordinates (X:Y:Z) corresponding to
  // (X/Z^2,Y/Z^3) This version receives the coefficient value A
    fp2_t t0, t1, t2, t3;

    uint32_t flag = fp2_is_zero(&P->x) & fp2_is_zero(&P->z);
 800d0cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d0d0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f005 fc60 	bl	801299c <fp2_is_zero>
 800d0dc:	4604      	mov	r4, r0
 800d0de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d0e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3390      	adds	r3, #144	@ 0x90
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f005 fc56 	bl	801299c <fp2_is_zero>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	4023      	ands	r3, r4
 800d0f4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    fp2_sqr(&t0, &P->x); // t0 = x1^2
 800d0f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d0fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f005 fd5f 	bl	8012bcc <fp2_sqr>
    fp2_add(&t1, &t0, &t0);
 800d10e:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800d112:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800d116:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d11a:	4618      	mov	r0, r3
 800d11c:	f005 fc9e 	bl	8012a5c <fp2_add>
    fp2_add(&t0, &t0, &t1); // t0 = 3x1^2
 800d120:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d124:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800d128:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800d12c:	4618      	mov	r0, r3
 800d12e:	f005 fc95 	bl	8012a5c <fp2_add>
    fp2_sqr(&t1, &P->z);    // t1 = z1^2
 800d132:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d136:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d140:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d144:	4611      	mov	r1, r2
 800d146:	4618      	mov	r0, r3
 800d148:	f005 fd40 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t2, &P->x, &AC->A);
 800d14c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d150:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d154:	6819      	ldr	r1, [r3, #0]
 800d156:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d15a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d164:	4618      	mov	r0, r3
 800d166:	f005 fce2 	bl	8012b2e <fp2_mul>
    fp2_add(&t2, &t2, &t2); // t2 = 2Ax1
 800d16a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d16e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d172:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d176:	4618      	mov	r0, r3
 800d178:	f005 fc70 	bl	8012a5c <fp2_add>
    fp2_add(&t2, &t1, &t2); // t2 = 2Ax1+z1^2
 800d17c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d180:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800d184:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d188:	4618      	mov	r0, r3
 800d18a:	f005 fc67 	bl	8012a5c <fp2_add>
    fp2_mul(&t2, &t1, &t2); // t2 = z1^2(2Ax1+z1^2)
 800d18e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d192:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800d196:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d19a:	4618      	mov	r0, r3
 800d19c:	f005 fcc7 	bl	8012b2e <fp2_mul>
    fp2_add(&t2, &t0, &t2); // t2 = alpha = 3x1^2 + z1^2(2Ax1+z1^2)
 800d1a0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d1a4:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800d1a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f005 fc55 	bl	8012a5c <fp2_add>
    fp2_mul(&Q->z, &P->y, &P->z);
 800d1b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d1c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800d1ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3390      	adds	r3, #144	@ 0x90
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f005 fca7 	bl	8012b2e <fp2_mul>
    fp2_add(&Q->z, &Q->z, &Q->z); // z2 = 2y1z1
 800d1e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d1ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d1fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d200:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3390      	adds	r3, #144	@ 0x90
 800d208:	461a      	mov	r2, r3
 800d20a:	f005 fc27 	bl	8012a5c <fp2_add>
    fp2_sqr(&t0, &Q->z);
 800d20e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d212:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d21c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800d220:	4611      	mov	r1, r2
 800d222:	4618      	mov	r0, r3
 800d224:	f005 fcd2 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t0, &t0, &AC->A); // t0 = 4Ay1^2z1^2
 800d228:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d22c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800d236:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800d23a:	4618      	mov	r0, r3
 800d23c:	f005 fc77 	bl	8012b2e <fp2_mul>
    fp2_sqr(&t1, &P->y);
 800d240:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d244:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d24e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d252:	4611      	mov	r1, r2
 800d254:	4618      	mov	r0, r3
 800d256:	f005 fcb9 	bl	8012bcc <fp2_sqr>
    fp2_add(&t1, &t1, &t1);     // t1 = 2y1^2
 800d25a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d25e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800d262:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d266:	4618      	mov	r0, r3
 800d268:	f005 fbf8 	bl	8012a5c <fp2_add>
    fp2_add(&t3, &P->x, &P->x); // t3 = 2x1
 800d26c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d270:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d274:	6819      	ldr	r1, [r3, #0]
 800d276:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d27a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	f107 0314 	add.w	r3, r7, #20
 800d284:	4618      	mov	r0, r3
 800d286:	f005 fbe9 	bl	8012a5c <fp2_add>
    fp2_mul(&t3, &t1, &t3);     // t3 = 4x1y1^2
 800d28a:	f107 0214 	add.w	r2, r7, #20
 800d28e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800d292:	f107 0314 	add.w	r3, r7, #20
 800d296:	4618      	mov	r0, r3
 800d298:	f005 fc49 	bl	8012b2e <fp2_mul>
    fp2_sqr(&Q->x, &t2);        // x2 = alpha^2
 800d29c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d2a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f005 fc8d 	bl	8012bcc <fp2_sqr>
    fp2_sub(&Q->x, &Q->x, &t0); // x2 = alpha^2 - 4Ay1^2z1^2
 800d2b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d2b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d2ba:	6818      	ldr	r0, [r3, #0]
 800d2bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d2c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	f005 fbfc 	bl	8012ac8 <fp2_sub>
    fp2_sub(&Q->x, &Q->x, &t3);
 800d2d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d2d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d2d8:	6818      	ldr	r0, [r3, #0]
 800d2da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d2de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f107 0214 	add.w	r2, r7, #20
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	f005 fbed 	bl	8012ac8 <fp2_sub>
    fp2_sub(&Q->x, &Q->x, &t3); // x2 = alpha^2 - 4Ay1^2z1^2 - 8x1y1^2
 800d2ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d2f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d2fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f107 0214 	add.w	r2, r7, #20
 800d306:	4619      	mov	r1, r3
 800d308:	f005 fbde 	bl	8012ac8 <fp2_sub>
    fp2_sub(&Q->y, &t3, &Q->x); // y2 = 4x1y1^2 - x2
 800d30c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d31a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d31e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	f107 0314 	add.w	r3, r7, #20
 800d328:	4619      	mov	r1, r3
 800d32a:	f005 fbcd 	bl	8012ac8 <fp2_sub>
    fp2_mul(&Q->y, &Q->y, &t2); // y2 = alpha(4x1y1^2 - x2)
 800d32e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d332:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d33c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3348      	adds	r3, #72	@ 0x48
 800d348:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d34c:	4619      	mov	r1, r3
 800d34e:	f005 fbee 	bl	8012b2e <fp2_mul>
    fp2_sqr(&t1, &t1);          // t1 = 4y1^4
 800d352:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d356:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d35a:	4611      	mov	r1, r2
 800d35c:	4618      	mov	r0, r3
 800d35e:	f005 fc35 	bl	8012bcc <fp2_sqr>
    fp2_sub(&Q->y, &Q->y, &t1);
 800d362:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d366:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d370:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d374:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3348      	adds	r3, #72	@ 0x48
 800d37c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d380:	4619      	mov	r1, r3
 800d382:	f005 fba1 	bl	8012ac8 <fp2_sub>
    fp2_sub(&Q->y, &Q->y, &t1); // y2 = alpha(4x1y1^2 - x2) - 8y1^4
 800d386:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d38a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d394:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d398:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3348      	adds	r3, #72	@ 0x48
 800d3a0:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	f005 fb8f 	bl	8012ac8 <fp2_sub>

    fp2_select(&Q->x, &Q->x, &P->x, -flag);
 800d3aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d3ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3b2:	6818      	ldr	r0, [r3, #0]
 800d3b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d3b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3bc:	6819      	ldr	r1, [r3, #0]
 800d3be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d3c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d3cc:	425b      	negs	r3, r3
 800d3ce:	f005 ffc0 	bl	8013352 <fp2_select>
    fp2_select(&Q->z, &Q->z, &P->z, -flag);
 800d3d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d3d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d3e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d3e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d3ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d3f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d3fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d400:	425b      	negs	r3, r3
 800d402:	f005 ffa6 	bl	8013352 <fp2_select>
}
 800d406:	bf00      	nop
 800d408:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd90      	pop	{r4, r7, pc}

0800d410 <DBLW>:

void
DBLW(jac_point_t *Q, fp2_t *u, const jac_point_t *P, const fp2_t *t)
{ // Cost of 3M + 5S.
 800d410:	b590      	push	{r4, r7, lr}
 800d412:	b0f3      	sub	sp, #460	@ 0x1cc
 800d414:	af00      	add	r7, sp, #0
 800d416:	f507 74e4 	add.w	r4, r7, #456	@ 0x1c8
 800d41a:	f5a4 74de 	sub.w	r4, r4, #444	@ 0x1bc
 800d41e:	6020      	str	r0, [r4, #0]
 800d420:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 800d424:	f5a0 70e0 	sub.w	r0, r0, #448	@ 0x1c0
 800d428:	6001      	str	r1, [r0, #0]
 800d42a:	f507 71e4 	add.w	r1, r7, #456	@ 0x1c8
 800d42e:	f5a1 71e2 	sub.w	r1, r1, #452	@ 0x1c4
 800d432:	600a      	str	r2, [r1, #0]
 800d434:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800d438:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800d43c:	6013      	str	r3, [r2, #0]
  // Doubling on a Weierstrass curve, representation in modified Jacobian coordinates
  // (X:Y:Z:T=a*Z^4) corresponding to (X/Z^2,Y/Z^3), where a is the curve coefficient.
  // Formula from https://hyperelliptic.org/EFD/g1p/auto-shortw-modified.html

    uint32_t flag = fp2_is_zero(&P->x) & fp2_is_zero(&P->z);
 800d43e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d442:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4618      	mov	r0, r3
 800d44a:	f005 faa7 	bl	801299c <fp2_is_zero>
 800d44e:	4604      	mov	r4, r0
 800d450:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d454:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3390      	adds	r3, #144	@ 0x90
 800d45c:	4618      	mov	r0, r3
 800d45e:	f005 fa9d 	bl	801299c <fp2_is_zero>
 800d462:	4603      	mov	r3, r0
 800d464:	4023      	ands	r3, r4
 800d466:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4

    fp2_t xx, c, cc, r, s, m;
    // XX = X^2
    fp2_sqr(&xx, &P->x);
 800d46a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d46e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800d478:	4611      	mov	r1, r2
 800d47a:	4618      	mov	r0, r3
 800d47c:	f005 fba6 	bl	8012bcc <fp2_sqr>
    // A = 2*Y^2
    fp2_sqr(&c, &P->y);
 800d480:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d484:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d48e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800d492:	4611      	mov	r1, r2
 800d494:	4618      	mov	r0, r3
 800d496:	f005 fb99 	bl	8012bcc <fp2_sqr>
    fp2_add(&c, &c, &c);
 800d49a:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800d49e:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 800d4a2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f005 fad8 	bl	8012a5c <fp2_add>
    // AA = A^2
    fp2_sqr(&cc, &c);
 800d4ac:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800d4b0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f005 fb88 	bl	8012bcc <fp2_sqr>
    // R = 2*AA
    fp2_add(&r, &cc, &cc);
 800d4bc:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800d4c0:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800d4c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f005 fac7 	bl	8012a5c <fp2_add>
    // S = (X+A)^2-XX-AA
    fp2_add(&s, &P->x, &c);
 800d4ce:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d4d2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d4d6:	6819      	ldr	r1, [r3, #0]
 800d4d8:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800d4dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f005 fabb 	bl	8012a5c <fp2_add>
    fp2_sqr(&s, &s);
 800d4e6:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d4ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d4ee:	4611      	mov	r1, r2
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f005 fb6b 	bl	8012bcc <fp2_sqr>
    fp2_sub(&s, &s, &xx);
 800d4f6:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 800d4fa:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d4fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d502:	4618      	mov	r0, r3
 800d504:	f005 fae0 	bl	8012ac8 <fp2_sub>
    fp2_sub(&s, &s, &cc);
 800d508:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800d50c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d510:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d514:	4618      	mov	r0, r3
 800d516:	f005 fad7 	bl	8012ac8 <fp2_sub>
    // M = 3*XX+T1
    fp2_add(&m, &xx, &xx);
 800d51a:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 800d51e:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800d522:	f107 0314 	add.w	r3, r7, #20
 800d526:	4618      	mov	r0, r3
 800d528:	f005 fa98 	bl	8012a5c <fp2_add>
    fp2_add(&m, &m, &xx);
 800d52c:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 800d530:	f107 0114 	add.w	r1, r7, #20
 800d534:	f107 0314 	add.w	r3, r7, #20
 800d538:	4618      	mov	r0, r3
 800d53a:	f005 fa8f 	bl	8012a5c <fp2_add>
    fp2_add(&m, &m, t);
 800d53e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d542:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800d546:	f107 0114 	add.w	r1, r7, #20
 800d54a:	f107 0014 	add.w	r0, r7, #20
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	f005 fa84 	bl	8012a5c <fp2_add>
    // X3 = M^2-2*S
    fp2_sqr(&Q->x, &m);
 800d554:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d558:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f107 0214 	add.w	r2, r7, #20
 800d562:	4611      	mov	r1, r2
 800d564:	4618      	mov	r0, r3
 800d566:	f005 fb31 	bl	8012bcc <fp2_sqr>
    fp2_sub(&Q->x, &Q->x, &s);
 800d56a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d56e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d578:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d582:	4619      	mov	r1, r3
 800d584:	f005 faa0 	bl	8012ac8 <fp2_sub>
    fp2_sub(&Q->x, &Q->x, &s);
 800d588:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d58c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d590:	6818      	ldr	r0, [r3, #0]
 800d592:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d596:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f005 fa91 	bl	8012ac8 <fp2_sub>
    // Z3 = 2*Y*Z
    fp2_mul(&Q->z, &P->y, &P->z);
 800d5a6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d5aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d5b4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d5b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800d5c2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d5c6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3390      	adds	r3, #144	@ 0x90
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f005 faad 	bl	8012b2e <fp2_mul>
    fp2_add(&Q->z, &Q->z, &Q->z);
 800d5d4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d5d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d5e2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d5e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d5f0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d5f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3390      	adds	r3, #144	@ 0x90
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	f005 fa2d 	bl	8012a5c <fp2_add>
    // Y3 = M*(S-X3)-R
    fp2_sub(&Q->y, &s, &Q->x);
 800d602:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d606:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d610:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d614:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d61e:	4619      	mov	r1, r3
 800d620:	f005 fa52 	bl	8012ac8 <fp2_sub>
    fp2_mul(&Q->y, &Q->y, &m);
 800d624:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d628:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d632:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d636:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3348      	adds	r3, #72	@ 0x48
 800d63e:	f107 0214 	add.w	r2, r7, #20
 800d642:	4619      	mov	r1, r3
 800d644:	f005 fa73 	bl	8012b2e <fp2_mul>
    fp2_sub(&Q->y, &Q->y, &r);
 800d648:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d64c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d656:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d65a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3348      	adds	r3, #72	@ 0x48
 800d662:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d666:	4619      	mov	r1, r3
 800d668:	f005 fa2e 	bl	8012ac8 <fp2_sub>
    // T3 = 2*R*T1
    fp2_mul(u, t, &r);
 800d66c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d670:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d674:	f5a3 71e4 	sub.w	r1, r3, #456	@ 0x1c8
 800d678:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d67c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800d680:	6809      	ldr	r1, [r1, #0]
 800d682:	6818      	ldr	r0, [r3, #0]
 800d684:	f005 fa53 	bl	8012b2e <fp2_mul>
    fp2_add(u, u, u);
 800d688:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d68c:	f5a3 72e0 	sub.w	r2, r3, #448	@ 0x1c0
 800d690:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d694:	f5a3 71e0 	sub.w	r1, r3, #448	@ 0x1c0
 800d698:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d69c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800d6a0:	6812      	ldr	r2, [r2, #0]
 800d6a2:	6809      	ldr	r1, [r1, #0]
 800d6a4:	6818      	ldr	r0, [r3, #0]
 800d6a6:	f005 f9d9 	bl	8012a5c <fp2_add>

    fp2_select(&Q->x, &Q->x, &P->x, -flag);
 800d6aa:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d6ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d6b2:	6818      	ldr	r0, [r3, #0]
 800d6b4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d6b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d6bc:	6819      	ldr	r1, [r3, #0]
 800d6be:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d6c2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800d6cc:	425b      	negs	r3, r3
 800d6ce:	f005 fe40 	bl	8013352 <fp2_select>
    fp2_select(&Q->z, &Q->z, &P->z, -flag);
 800d6d2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d6d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d6e0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d6e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d6ee:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800d6f2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d6fc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800d700:	425b      	negs	r3, r3
 800d702:	f005 fe26 	bl	8013352 <fp2_select>
}
 800d706:	bf00      	nop
 800d708:	f507 77e6 	add.w	r7, r7, #460	@ 0x1cc
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd90      	pop	{r4, r7, pc}

0800d710 <select_jac_point>:

void
select_jac_point(jac_point_t *Q, const jac_point_t *P1, const jac_point_t *P2, const digit_t option)
{ // Select points
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	603b      	str	r3, [r7, #0]
  // If option = 0 then Q <- P1, else if option = 0xFF...FF then Q <- P2
    fp2_select(&(Q->x), &(P1->x), &(P2->x), option);
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	f005 fe14 	bl	8013352 <fp2_select>
    fp2_select(&(Q->y), &(P1->y), &(P2->y), option);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	f005 fe08 	bl	8013352 <fp2_select>
    fp2_select(&(Q->z), &(P1->z), &(P2->z), option);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	f005 fdfc 	bl	8013352 <fp2_select>
}
 800d75a:	bf00      	nop
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <ADD>:

void
ADD(jac_point_t *R, const jac_point_t *P, const jac_point_t *Q, const ec_curve_t *AC)
{
 800d762:	b590      	push	{r4, r7, lr}
 800d764:	f5ad 7d2b 	sub.w	sp, sp, #684	@ 0x2ac
 800d768:	af00      	add	r7, sp, #0
 800d76a:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 800d76e:	f5a4 7427 	sub.w	r4, r4, #668	@ 0x29c
 800d772:	6020      	str	r0, [r4, #0]
 800d774:	f507 702a 	add.w	r0, r7, #680	@ 0x2a8
 800d778:	f5a0 7028 	sub.w	r0, r0, #672	@ 0x2a0
 800d77c:	6001      	str	r1, [r0, #0]
 800d77e:	f507 712a 	add.w	r1, r7, #680	@ 0x2a8
 800d782:	f5a1 7129 	sub.w	r1, r1, #676	@ 0x2a4
 800d786:	600a      	str	r2, [r1, #0]
 800d788:	f507 722a 	add.w	r2, r7, #680	@ 0x2a8
 800d78c:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 800d790:	6013      	str	r3, [r2, #0]
    // Thought I'd get the ball rolling.
    // Cost 17M + 6S + 13a
    fp2_t t0, t1, t2, t3, u1, u2, v1, dx, dy;

    /* If P is zero or Q is zero we will conditionally swap before returning. */
    uint32_t ctl1 = fp2_is_zero(&P->z);
 800d792:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d796:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3390      	adds	r3, #144	@ 0x90
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f005 f8fc 	bl	801299c <fp2_is_zero>
 800d7a4:	f8c7 02a4 	str.w	r0, [r7, #676]	@ 0x2a4
    uint32_t ctl2 = fp2_is_zero(&Q->z);
 800d7a8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d7ac:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	3390      	adds	r3, #144	@ 0x90
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f005 f8f1 	bl	801299c <fp2_is_zero>
 800d7ba:	f8c7 02a0 	str.w	r0, [r7, #672]	@ 0x2a0

    /* Precompute some values */
    fp2_sqr(&t0, &P->z); // t0 = z1^2
 800d7be:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d7c2:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d7cc:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f005 f9fa 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&t1, &Q->z); // t1 = z2^2
 800d7d8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d7dc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d7e6:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f005 f9ed 	bl	8012bcc <fp2_sqr>

    /* Compute dy and dx for ordinary case */
    fp2_mul(&v1, &t1, &Q->z); // v1 = z2^3
 800d7f2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d7f6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d800:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800d804:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d808:	4618      	mov	r0, r3
 800d80a:	f005 f990 	bl	8012b2e <fp2_mul>
    fp2_mul(&t2, &t0, &P->z); // t2 = z1^3
 800d80e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d812:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d81c:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 800d820:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d824:	4618      	mov	r0, r3
 800d826:	f005 f982 	bl	8012b2e <fp2_mul>
    fp2_mul(&v1, &v1, &P->y); // v1 = y1z2^3
 800d82a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d82e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d838:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800d83c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d840:	4618      	mov	r0, r3
 800d842:	f005 f974 	bl	8012b2e <fp2_mul>
    fp2_mul(&t2, &t2, &Q->y); // t2 = y2z1^3
 800d846:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d84a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d854:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d858:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d85c:	4618      	mov	r0, r3
 800d85e:	f005 f966 	bl	8012b2e <fp2_mul>
    fp2_sub(&dy, &t2, &v1);   // dy = y2z1^3 - y1z2^3
 800d862:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800d866:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d86a:	f107 0314 	add.w	r3, r7, #20
 800d86e:	4618      	mov	r0, r3
 800d870:	f005 f92a 	bl	8012ac8 <fp2_sub>
    fp2_mul(&u2, &t0, &Q->x); // u2 = x2z1^2
 800d874:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d878:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 800d882:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800d886:	4618      	mov	r0, r3
 800d888:	f005 f951 	bl	8012b2e <fp2_mul>
    fp2_mul(&u1, &t1, &P->x); // u1 = x1z2^2
 800d88c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d890:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800d89a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f005 f945 	bl	8012b2e <fp2_mul>
    fp2_sub(&dx, &u2, &u1);   // dx = x2z1^2 - x1z2^2
 800d8a4:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800d8a8:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800d8ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f005 f909 	bl	8012ac8 <fp2_sub>

    /* Compute dy and dx for doubling case */
    fp2_add(&t1, &P->y, &P->y);   // dx_dbl = t1 = 2y1
 800d8b6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d8ba:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800d8c4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d8c8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800d8d2:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f005 f8c0 	bl	8012a5c <fp2_add>
    fp2_add(&t2, &AC->A, &AC->A); // t2 = 2A
 800d8dc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d8e0:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800d8e4:	6819      	ldr	r1, [r3, #0]
 800d8e6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d8ea:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f005 f8b1 	bl	8012a5c <fp2_add>
    fp2_mul(&t2, &t2, &P->x);     // t2 = 2Ax1
 800d8fa:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d8fe:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d908:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d90c:	4618      	mov	r0, r3
 800d90e:	f005 f90e 	bl	8012b2e <fp2_mul>
    fp2_add(&t2, &t2, &t0);       // t2 = 2Ax1 + z1^2
 800d912:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 800d916:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d91a:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d91e:	4618      	mov	r0, r3
 800d920:	f005 f89c 	bl	8012a5c <fp2_add>
    fp2_mul(&t2, &t2, &t0);       // t2 = z1^2 * (2Ax1 + z1^2)
 800d924:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 800d928:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d92c:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d930:	4618      	mov	r0, r3
 800d932:	f005 f8fc 	bl	8012b2e <fp2_mul>
    fp2_sqr(&t0, &P->x);          // t0 = x1^2
 800d936:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d93a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f005 f940 	bl	8012bcc <fp2_sqr>
    fp2_add(&t2, &t2, &t0);       // t2 = x1^2 + z1^2 * (2Ax1 + z1^2)
 800d94c:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 800d950:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d954:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d958:	4618      	mov	r0, r3
 800d95a:	f005 f87f 	bl	8012a5c <fp2_add>
    fp2_add(&t2, &t2, &t0);       // t2 = 2*x1^2 + z1^2 * (2Ax1 + z1^2)
 800d95e:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 800d962:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d966:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d96a:	4618      	mov	r0, r3
 800d96c:	f005 f876 	bl	8012a5c <fp2_add>
    fp2_add(&t2, &t2, &t0);       // t2 = 3*x1^2 + z1^2 * (2Ax1 + z1^2)
 800d970:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 800d974:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d978:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d97c:	4618      	mov	r0, r3
 800d97e:	f005 f86d 	bl	8012a5c <fp2_add>
    fp2_mul(&t2, &t2, &Q->z);     // dy_dbl = t2 = z2 * (3*x1^2 + z1^2 * (2Ax1 + z1^2))
 800d982:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d986:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d990:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800d994:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800d998:	4618      	mov	r0, r3
 800d99a:	f005 f8c8 	bl	8012b2e <fp2_mul>

    /* If dx is zero and dy is zero swap with double variables */
    uint32_t ctl = fp2_is_zero(&dx) & fp2_is_zero(&dy);
 800d99e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f004 fffa 	bl	801299c <fp2_is_zero>
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	f107 0314 	add.w	r3, r7, #20
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f004 fff4 	bl	801299c <fp2_is_zero>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	4023      	ands	r3, r4
 800d9b8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
    fp2_select(&dx, &dx, &t1, ctl);
 800d9bc:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 800d9c0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d9c4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800d9c8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800d9cc:	f005 fcc1 	bl	8013352 <fp2_select>
    fp2_select(&dy, &dy, &t2, ctl);
 800d9d0:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 800d9d4:	f107 0114 	add.w	r1, r7, #20
 800d9d8:	f107 0014 	add.w	r0, r7, #20
 800d9dc:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800d9e0:	f005 fcb7 	bl	8013352 <fp2_select>

    /* Some more precomputations */
    fp2_mul(&t0, &P->z, &Q->z); // t0 = z1z2
 800d9e4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d9e8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d9f2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800d9f6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800da00:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 800da04:	4618      	mov	r0, r3
 800da06:	f005 f892 	bl	8012b2e <fp2_mul>
    fp2_sqr(&t1, &t0);          // t1 = z1z2^2
 800da0a:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 800da0e:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800da12:	4611      	mov	r1, r2
 800da14:	4618      	mov	r0, r3
 800da16:	f005 f8d9 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&t2, &dx);          // t2 = dx^2
 800da1a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800da1e:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800da22:	4611      	mov	r1, r2
 800da24:	4618      	mov	r0, r3
 800da26:	f005 f8d1 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&t3, &dy);          // t3 = dy^2
 800da2a:	f107 0214 	add.w	r2, r7, #20
 800da2e:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800da32:	4611      	mov	r1, r2
 800da34:	4618      	mov	r0, r3
 800da36:	f005 f8c9 	bl	8012bcc <fp2_sqr>

    /* Compute x3 = dy**2 - dx**2 * (A*ZP^2*ZQ^2 + XP*ZQ^2 + XQ*ZP^2) */
    fp2_mul(&R->x, &AC->A, &t1); // x3 = A*(z1z2)^2
 800da3a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800da3e:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800da48:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 800da52:	4619      	mov	r1, r3
 800da54:	f005 f86b 	bl	8012b2e <fp2_mul>
    fp2_add(&R->x, &R->x, &u1);  // x3 = A*(z1z2)^2 + u1
 800da58:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800da5c:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800da60:	6818      	ldr	r0, [r3, #0]
 800da62:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800da66:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800da70:	4619      	mov	r1, r3
 800da72:	f004 fff3 	bl	8012a5c <fp2_add>
    fp2_add(&R->x, &R->x, &u2);  // x3 = A*(z1z2)^2 + u1 + u2
 800da76:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800da7a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800da7e:	6818      	ldr	r0, [r3, #0]
 800da80:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800da84:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800da8e:	4619      	mov	r1, r3
 800da90:	f004 ffe4 	bl	8012a5c <fp2_add>
    fp2_mul(&R->x, &R->x, &t2);  // x3 = dx^2 * (A*(z1z2)^2 + u1 + u2)
 800da94:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800da98:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800da9c:	6818      	ldr	r0, [r3, #0]
 800da9e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800daa2:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 800daac:	4619      	mov	r1, r3
 800daae:	f005 f83e 	bl	8012b2e <fp2_mul>
    fp2_sub(&R->x, &t3, &R->x);  // x3 = dy^2 - dx^2 * (A*(z1z2)^2 + u1 + u2)
 800dab2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dab6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800daba:	6818      	ldr	r0, [r3, #0]
 800dabc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dac0:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800daca:	4619      	mov	r1, r3
 800dacc:	f004 fffc 	bl	8012ac8 <fp2_sub>

    /* Compute y3 = dy * (XP*ZQ^2 * dx^2 - XR) - YP*ZQ^3 * dx^3*/
    fp2_mul(&R->y, &u1, &t2);     // y3 = u1 * dx^2
 800dad0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dad4:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3348      	adds	r3, #72	@ 0x48
 800dadc:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 800dae0:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 800dae4:	4618      	mov	r0, r3
 800dae6:	f005 f822 	bl	8012b2e <fp2_mul>
    fp2_sub(&R->y, &R->y, &R->x); // y3 = u1 * dx^2 - x3
 800daea:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800daee:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800daf8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dafc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800db06:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800db0a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	461a      	mov	r2, r3
 800db12:	f004 ffd9 	bl	8012ac8 <fp2_sub>
    fp2_mul(&R->y, &R->y, &dy);   // y3 = dy * (u1 * dx^2 - x3)
 800db16:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800db1a:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800db24:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800db28:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	3348      	adds	r3, #72	@ 0x48
 800db30:	f107 0214 	add.w	r2, r7, #20
 800db34:	4619      	mov	r1, r3
 800db36:	f004 fffa 	bl	8012b2e <fp2_mul>
    fp2_mul(&t3, &t2, &dx);       // t3 = dx^3
 800db3a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800db3e:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800db42:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800db46:	4618      	mov	r0, r3
 800db48:	f004 fff1 	bl	8012b2e <fp2_mul>
    fp2_mul(&t3, &t3, &v1);       // t3 = v1 * dx^3
 800db4c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800db50:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800db54:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800db58:	4618      	mov	r0, r3
 800db5a:	f004 ffe8 	bl	8012b2e <fp2_mul>
    fp2_sub(&R->y, &R->y, &t3);   // y3 = dy * (u1 * dx^2 - x3) - v1 * dx^3
 800db5e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800db62:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800db6c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800db70:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	3348      	adds	r3, #72	@ 0x48
 800db78:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 800db7c:	4619      	mov	r1, r3
 800db7e:	f004 ffa3 	bl	8012ac8 <fp2_sub>

    /* Compute z3 = dx * z1 * z2 */
    fp2_mul(&R->z, &dx, &t0);
 800db82:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800db86:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	3390      	adds	r3, #144	@ 0x90
 800db8e:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 800db92:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800db96:	4618      	mov	r0, r3
 800db98:	f004 ffc9 	bl	8012b2e <fp2_mul>

    /* Finally, we need to set R = P is Q.Z = 0 and R = Q if P.Z = 0 */
    select_jac_point(R, R, Q, ctl1);
 800db9c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dba0:	f5a3 7229 	sub.w	r2, r3, #676	@ 0x2a4
 800dba4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dba8:	f5a3 7127 	sub.w	r1, r3, #668	@ 0x29c
 800dbac:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dbb0:	f5a3 7027 	sub.w	r0, r3, #668	@ 0x29c
 800dbb4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800dbb8:	6812      	ldr	r2, [r2, #0]
 800dbba:	6809      	ldr	r1, [r1, #0]
 800dbbc:	6800      	ldr	r0, [r0, #0]
 800dbbe:	f7ff fda7 	bl	800d710 <select_jac_point>
    select_jac_point(R, R, P, ctl2);
 800dbc2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dbc6:	f5a3 7228 	sub.w	r2, r3, #672	@ 0x2a0
 800dbca:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dbce:	f5a3 7127 	sub.w	r1, r3, #668	@ 0x29c
 800dbd2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dbd6:	f5a3 7027 	sub.w	r0, r3, #668	@ 0x29c
 800dbda:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800dbde:	6812      	ldr	r2, [r2, #0]
 800dbe0:	6809      	ldr	r1, [r1, #0]
 800dbe2:	6800      	ldr	r0, [r0, #0]
 800dbe4:	f7ff fd94 	bl	800d710 <select_jac_point>
}
 800dbe8:	bf00      	nop
 800dbea:	f507 772b 	add.w	r7, r7, #684	@ 0x2ac
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd90      	pop	{r4, r7, pc}

0800dbf2 <jac_to_xz_add_components>:

void
jac_to_xz_add_components(add_components_t *add_comp, const jac_point_t *P, const jac_point_t *Q, const ec_curve_t *AC)
{
 800dbf2:	b590      	push	{r4, r7, lr}
 800dbf4:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	f507 7402 	add.w	r4, r7, #520	@ 0x208
 800dbfe:	f5a4 74fe 	sub.w	r4, r4, #508	@ 0x1fc
 800dc02:	6020      	str	r0, [r4, #0]
 800dc04:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 800dc08:	f5a0 7000 	sub.w	r0, r0, #512	@ 0x200
 800dc0c:	6001      	str	r1, [r0, #0]
 800dc0e:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 800dc12:	f5a1 7101 	sub.w	r1, r1, #516	@ 0x204
 800dc16:	600a      	str	r2, [r1, #0]
 800dc18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800dc1c:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 800dc20:	6013      	str	r3, [r2, #0]
    // Take P and Q in E distinct, two jac_point_t, return three components u,v and w in Fp2 such
    // that the xz coordinates of P+Q are (u-v:w) and of P-Q are (u+v:w)

    fp2_t t0, t1, t2, t3, t4, t5, t6;

    fp2_sqr(&t0, &P->z);             // t0 = z1^2
 800dc22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dc26:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800dc30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f004 ffc8 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&t1, &Q->z);             // t1 = z2^2
 800dc3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dc40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800dc4a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800dc4e:	4611      	mov	r1, r2
 800dc50:	4618      	mov	r0, r3
 800dc52:	f004 ffbb 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t2, &P->x, &t1);        // t2 = x1z2^2
 800dc56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dc5a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800dc5e:	6819      	ldr	r1, [r3, #0]
 800dc60:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800dc64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f004 ff60 	bl	8012b2e <fp2_mul>
    fp2_mul(&t3, &t0, &Q->x);        // t3 = z1^2x2
 800dc6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dc72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 800dc7c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800dc80:	4618      	mov	r0, r3
 800dc82:	f004 ff54 	bl	8012b2e <fp2_mul>
    fp2_mul(&t4, &P->y, &Q->z);      // t4 = y1z2
 800dc86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dc8a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800dc94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dc98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800dca2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800dca6:	4618      	mov	r0, r3
 800dca8:	f004 ff41 	bl	8012b2e <fp2_mul>
    fp2_mul(&t4, &t4, &t1);          // t4 = y1z2^3
 800dcac:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800dcb0:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800dcb4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f004 ff38 	bl	8012b2e <fp2_mul>
    fp2_mul(&t5, &P->z, &Q->y);      // t5 = z1y2
 800dcbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dcc2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800dccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dcd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800dcda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dcde:	4618      	mov	r0, r3
 800dce0:	f004 ff25 	bl	8012b2e <fp2_mul>
    fp2_mul(&t5, &t5, &t0);          // t5 = z1^3y2
 800dce4:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800dce8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800dcec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f004 ff1c 	bl	8012b2e <fp2_mul>
    fp2_mul(&t0, &t0, &t1);          // t0 = (z1z2)^2
 800dcf6:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800dcfa:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 800dcfe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f004 ff13 	bl	8012b2e <fp2_mul>
    fp2_mul(&t6, &t4, &t5);          // t6 = (z1z_2)^3y1y2
 800dd08:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800dd0c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800dd10:	f107 0310 	add.w	r3, r7, #16
 800dd14:	4618      	mov	r0, r3
 800dd16:	f004 ff0a 	bl	8012b2e <fp2_mul>
    fp2_add(&add_comp->v, &t6, &t6); // v  = 2(z1z_2)^3y1y2
 800dd1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800dd1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3348      	adds	r3, #72	@ 0x48
 800dd26:	f107 0210 	add.w	r2, r7, #16
 800dd2a:	f107 0110 	add.w	r1, r7, #16
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f004 fe94 	bl	8012a5c <fp2_add>
    fp2_sqr(&t4, &t4);               // t4 = y1^2z2^6
 800dd34:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800dd38:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f004 ff44 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&t5, &t5);               // t5 = z1^6y_2^2
 800dd44:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800dd48:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f004 ff3c 	bl	8012bcc <fp2_sqr>
    fp2_add(&t4, &t4, &t5);          // t4 = z1^6y_2^2 + y1^2z2^6
 800dd54:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800dd58:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800dd5c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800dd60:	4618      	mov	r0, r3
 800dd62:	f004 fe7b 	bl	8012a5c <fp2_add>
    fp2_add(&t5, &t2, &t3);          // t5 = x1z2^2 +z_1^2x2
 800dd66:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800dd6a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800dd6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dd72:	4618      	mov	r0, r3
 800dd74:	f004 fe72 	bl	8012a5c <fp2_add>
    fp2_add(&t6, &t3, &t3);          // t6 = 2z_1^2x2
 800dd78:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800dd7c:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800dd80:	f107 0310 	add.w	r3, r7, #16
 800dd84:	4618      	mov	r0, r3
 800dd86:	f004 fe69 	bl	8012a5c <fp2_add>
    fp2_sub(&t6, &t5, &t6);          // t6 = lambda = x1z2^2 - z_1^2x2
 800dd8a:	f107 0210 	add.w	r2, r7, #16
 800dd8e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800dd92:	f107 0310 	add.w	r3, r7, #16
 800dd96:	4618      	mov	r0, r3
 800dd98:	f004 fe96 	bl	8012ac8 <fp2_sub>
    fp2_sqr(&t6, &t6);               // t6 = lambda^2 = (x1z2^2 - z_1^2x2)^2
 800dd9c:	f107 0210 	add.w	r2, r7, #16
 800dda0:	f107 0310 	add.w	r3, r7, #16
 800dda4:	4611      	mov	r1, r2
 800dda6:	4618      	mov	r0, r3
 800dda8:	f004 ff10 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t1, &AC->A, &t0);       // t1 = A*(z1z2)^2
 800ddac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ddb0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800ddb4:	6819      	ldr	r1, [r3, #0]
 800ddb6:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800ddba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f004 feb5 	bl	8012b2e <fp2_mul>
    fp2_add(&t1, &t5, &t1);          // t1 = gamma =A*(z1z2)^2 + x1z2^2 +z_1^2x2
 800ddc4:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800ddc8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800ddcc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f004 fe43 	bl	8012a5c <fp2_add>
    fp2_mul(&t1, &t1, &t6);          // t1 = gamma*lambda^2
 800ddd6:	f107 0210 	add.w	r2, r7, #16
 800ddda:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 800ddde:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800dde2:	4618      	mov	r0, r3
 800dde4:	f004 fea3 	bl	8012b2e <fp2_mul>
    fp2_sub(&add_comp->u, &t4, &t1); // u  = z1^6y_2^2 + y1^2z2^6 - gamma*lambda^2
 800dde8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ddec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800ddf6:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f004 fe64 	bl	8012ac8 <fp2_sub>
    fp2_mul(&add_comp->w, &t6, &t0); // w  = (z1z2)^2(lambda)^2
 800de00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800de04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3390      	adds	r3, #144	@ 0x90
 800de0c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800de10:	f107 0110 	add.w	r1, r7, #16
 800de14:	4618      	mov	r0, r3
 800de16:	f004 fe8a 	bl	8012b2e <fp2_mul>
}
 800de1a:	bf00      	nop
 800de1c:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 800de20:	46bd      	mov	sp, r7
 800de22:	bd90      	pop	{r4, r7, pc}

0800de24 <encode_digits>:

// digits

static void
encode_digits(byte_t *enc, const digit_t *x, size_t nbytes)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
    if (rem) {
        digit_t ld = BSWAP_DIGIT(x[ndigits]);
        memcpy(enc + ndigits * sizeof(digit_t), (byte_t *)&ld, rem);
    }
#else
    memcpy(enc, (const byte_t *)x, nbytes);
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	68b9      	ldr	r1, [r7, #8]
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f027 ffb2 	bl	8035d9e <memcpy>
#endif
}
 800de3a:	bf00      	nop
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <decode_digits>:

static void
decode_digits(digit_t *x, const byte_t *enc, size_t nbytes, size_t ndigits)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	603b      	str	r3, [r7, #0]
    assert(nbytes <= ndigits * sizeof(digit_t));
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d905      	bls.n	800de68 <decode_digits+0x24>
 800de5c:	4b0c      	ldr	r3, [pc, #48]	@ (800de90 <decode_digits+0x4c>)
 800de5e:	4a0d      	ldr	r2, [pc, #52]	@ (800de94 <decode_digits+0x50>)
 800de60:	2123      	movs	r1, #35	@ 0x23
 800de62:	480d      	ldr	r0, [pc, #52]	@ (800de98 <decode_digits+0x54>)
 800de64:	f027 f9e8 	bl	8035238 <__assert_func>
    memcpy((byte_t *)x, enc, nbytes);
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	68b9      	ldr	r1, [r7, #8]
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f027 ff96 	bl	8035d9e <memcpy>
    memset((byte_t *)x + nbytes, 0, ndigits * sizeof(digit_t) - nbytes);
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	18d0      	adds	r0, r2, r3
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	009a      	lsls	r2, r3, #2
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	461a      	mov	r2, r3
 800de82:	2100      	movs	r1, #0
 800de84:	f027 febc 	bl	8035c00 <memset>

#ifdef TARGET_BIG_ENDIAN
    for (size_t i = 0; i < ndigits; i++)
        x[i] = BSWAP_DIGIT(x[i]);
#endif
}
 800de88:	bf00      	nop
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	080374d4 	.word	0x080374d4
 800de94:	080374f8 	.word	0x080374f8
 800de98:	080374fc 	.word	0x080374fc

0800de9c <ibz_to_bytes>:

// ibz_t

static byte_t *
ibz_to_bytes(byte_t *enc, const ibz_t *x, size_t nbytes, bool sgn)
{
 800de9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dea0:	b095      	sub	sp, #84	@ 0x54
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
 800deaa:	70fb      	strb	r3, [r7, #3]
 800deac:	466b      	mov	r3, sp
 800deae:	461e      	mov	r6, r3
#ifndef NDEBUG
    {
        // make sure there is enough space
        ibz_t abs, bnd;
        ibz_init(&bnd);
 800deb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800deb4:	4618      	mov	r0, r3
 800deb6:	f00f f8a6 	bl	801d006 <sqisign_gen_ibz_init>
        ibz_init(&abs);
 800deba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800debe:	4618      	mov	r0, r3
 800dec0:	f00f f8a1 	bl	801d006 <sqisign_gen_ibz_init>
        ibz_pow(&bnd, &ibz_const_two, 8 * nbytes - sgn);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	00da      	lsls	r2, r3, #3
 800dec8:	78fb      	ldrb	r3, [r7, #3]
 800deca:	1ad2      	subs	r2, r2, r3
 800decc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ded0:	4970      	ldr	r1, [pc, #448]	@ (800e094 <ibz_to_bytes+0x1f8>)
 800ded2:	4618      	mov	r0, r3
 800ded4:	f00f f950 	bl	801d178 <sqisign_gen_ibz_pow>
        ibz_abs(&abs, x);
 800ded8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dedc:	68b9      	ldr	r1, [r7, #8]
 800dede:	4618      	mov	r0, r3
 800dee0:	f00f f8e1 	bl	801d0a6 <sqisign_gen_ibz_abs>
        assert(ibz_cmp(&abs, &bnd) < 0);
 800dee4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800dee8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f00f f95e 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	db05      	blt.n	800df06 <ibz_to_bytes+0x6a>
 800defa:	4b67      	ldr	r3, [pc, #412]	@ (800e098 <ibz_to_bytes+0x1fc>)
 800defc:	4a67      	ldr	r2, [pc, #412]	@ (800e09c <ibz_to_bytes+0x200>)
 800defe:	213a      	movs	r1, #58	@ 0x3a
 800df00:	4867      	ldr	r0, [pc, #412]	@ (800e0a0 <ibz_to_bytes+0x204>)
 800df02:	f027 f999 	bl	8035238 <__assert_func>
        ibz_finalize(&bnd);
 800df06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800df0a:	4618      	mov	r0, r3
 800df0c:	f00f f886 	bl	801d01c <sqisign_gen_ibz_finalize>
        ibz_finalize(&abs);
 800df10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800df14:	4618      	mov	r0, r3
 800df16:	f00f f881 	bl	801d01c <sqisign_gen_ibz_finalize>
    }
#endif
    const size_t digits = (nbytes + sizeof(digit_t) - 1) / sizeof(digit_t);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	3303      	adds	r3, #3
 800df1e:	089b      	lsrs	r3, r3, #2
 800df20:	64bb      	str	r3, [r7, #72]	@ 0x48
    digit_t d[digits];
 800df22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df24:	3b01      	subs	r3, #1
 800df26:	647b      	str	r3, [r7, #68]	@ 0x44
 800df28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df2a:	2200      	movs	r2, #0
 800df2c:	4698      	mov	r8, r3
 800df2e:	4691      	mov	r9, r2
 800df30:	f04f 0200 	mov.w	r2, #0
 800df34:	f04f 0300 	mov.w	r3, #0
 800df38:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800df3c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800df40:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800df44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df46:	2200      	movs	r2, #0
 800df48:	461c      	mov	r4, r3
 800df4a:	4615      	mov	r5, r2
 800df4c:	f04f 0200 	mov.w	r2, #0
 800df50:	f04f 0300 	mov.w	r3, #0
 800df54:	016b      	lsls	r3, r5, #5
 800df56:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800df5a:	0162      	lsls	r2, r4, #5
 800df5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	3307      	adds	r3, #7
 800df62:	08db      	lsrs	r3, r3, #3
 800df64:	00db      	lsls	r3, r3, #3
 800df66:	ebad 0d03 	sub.w	sp, sp, r3
 800df6a:	466b      	mov	r3, sp
 800df6c:	3303      	adds	r3, #3
 800df6e:	089b      	lsrs	r3, r3, #2
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	643b      	str	r3, [r7, #64]	@ 0x40
    memset(d, 0, sizeof(d));
 800df74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	461a      	mov	r2, r3
 800df7a:	2100      	movs	r1, #0
 800df7c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800df7e:	f027 fe3f 	bl	8035c00 <memset>
    if (ibz_cmp(x, &ibz_const_zero) >= 0) {
 800df82:	4948      	ldr	r1, [pc, #288]	@ (800e0a4 <ibz_to_bytes+0x208>)
 800df84:	68b8      	ldr	r0, [r7, #8]
 800df86:	f00f f913 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	db04      	blt.n	800df9a <ibz_to_bytes+0xfe>
        // non-negative, straightforward.
        ibz_to_digits(d, x);
 800df90:	68b9      	ldr	r1, [r7, #8]
 800df92:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800df94:	f00f fb04 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
 800df98:	e06e      	b.n	800e078 <ibz_to_bytes+0x1dc>
    } else {
        assert(sgn);
 800df9a:	78fb      	ldrb	r3, [r7, #3]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d105      	bne.n	800dfac <ibz_to_bytes+0x110>
 800dfa0:	4b41      	ldr	r3, [pc, #260]	@ (800e0a8 <ibz_to_bytes+0x20c>)
 800dfa2:	4a3e      	ldr	r2, [pc, #248]	@ (800e09c <ibz_to_bytes+0x200>)
 800dfa4:	2146      	movs	r1, #70	@ 0x46
 800dfa6:	483e      	ldr	r0, [pc, #248]	@ (800e0a0 <ibz_to_bytes+0x204>)
 800dfa8:	f027 f946 	bl	8035238 <__assert_func>
        // negative; use two's complement.
        ibz_t tmp;
        ibz_init(&tmp);
 800dfac:	f107 031c 	add.w	r3, r7, #28
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f00f f828 	bl	801d006 <sqisign_gen_ibz_init>
        ibz_neg(&tmp, x);
 800dfb6:	f107 031c 	add.w	r3, r7, #28
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f00f f865 	bl	801d08c <sqisign_gen_ibz_neg>
        ibz_sub(&tmp, &tmp, &ibz_const_one);
 800dfc2:	f107 011c 	add.w	r1, r7, #28
 800dfc6:	f107 031c 	add.w	r3, r7, #28
 800dfca:	4a38      	ldr	r2, [pc, #224]	@ (800e0ac <ibz_to_bytes+0x210>)
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f00f f83f 	bl	801d050 <sqisign_gen_ibz_sub>
        ibz_to_digits(d, &tmp);
 800dfd2:	f107 031c 	add.w	r3, r7, #28
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dfda:	f00f fae1 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
        for (size_t i = 0; i < digits; ++i)
 800dfde:	2300      	movs	r3, #0
 800dfe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfe2:	e00b      	b.n	800dffc <ibz_to_bytes+0x160>
            d[i] = ~d[i];
 800dfe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfec:	43d9      	mvns	r1, r3
 800dfee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < digits; ++i)
 800dff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dff8:	3301      	adds	r3, #1
 800dffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e000:	429a      	cmp	r2, r3
 800e002:	d3ef      	bcc.n	800dfe4 <ibz_to_bytes+0x148>
#ifndef NDEBUG
        {
            // make sure the result is correct
            ibz_t chk;
            ibz_init(&chk);
 800e004:	f107 0310 	add.w	r3, r7, #16
 800e008:	4618      	mov	r0, r3
 800e00a:	f00e fffc 	bl	801d006 <sqisign_gen_ibz_init>
            ibz_copy_digit_array(&tmp, d);
 800e00e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	089b      	lsrs	r3, r3, #2
 800e014:	461a      	mov	r2, r3
 800e016:	f107 031c 	add.w	r3, r7, #28
 800e01a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e01c:	4618      	mov	r0, r3
 800e01e:	f00f faa8 	bl	801d572 <sqisign_gen_ibz_copy_digits>
            ibz_sub(&tmp, &tmp, x);
 800e022:	f107 011c 	add.w	r1, r7, #28
 800e026:	f107 031c 	add.w	r3, r7, #28
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f00f f80f 	bl	801d050 <sqisign_gen_ibz_sub>
            ibz_pow(&chk, &ibz_const_two, 8 * sizeof(d));
 800e032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e034:	015a      	lsls	r2, r3, #5
 800e036:	f107 0310 	add.w	r3, r7, #16
 800e03a:	4916      	ldr	r1, [pc, #88]	@ (800e094 <ibz_to_bytes+0x1f8>)
 800e03c:	4618      	mov	r0, r3
 800e03e:	f00f f89b 	bl	801d178 <sqisign_gen_ibz_pow>
            assert(!ibz_cmp(&tmp, &chk));
 800e042:	f107 0210 	add.w	r2, r7, #16
 800e046:	f107 031c 	add.w	r3, r7, #28
 800e04a:	4611      	mov	r1, r2
 800e04c:	4618      	mov	r0, r3
 800e04e:	f00f f8af 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <ibz_to_bytes+0x1c8>
 800e058:	4b15      	ldr	r3, [pc, #84]	@ (800e0b0 <ibz_to_bytes+0x214>)
 800e05a:	4a10      	ldr	r2, [pc, #64]	@ (800e09c <ibz_to_bytes+0x200>)
 800e05c:	2157      	movs	r1, #87	@ 0x57
 800e05e:	4810      	ldr	r0, [pc, #64]	@ (800e0a0 <ibz_to_bytes+0x204>)
 800e060:	f027 f8ea 	bl	8035238 <__assert_func>
            ibz_finalize(&chk);
 800e064:	f107 0310 	add.w	r3, r7, #16
 800e068:	4618      	mov	r0, r3
 800e06a:	f00e ffd7 	bl	801d01c <sqisign_gen_ibz_finalize>
        }
#endif
        ibz_finalize(&tmp);
 800e06e:	f107 031c 	add.w	r3, r7, #28
 800e072:	4618      	mov	r0, r3
 800e074:	f00e ffd2 	bl	801d01c <sqisign_gen_ibz_finalize>
    }
    encode_digits(enc, d, nbytes);
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e07c:	68f8      	ldr	r0, [r7, #12]
 800e07e:	f7ff fed1 	bl	800de24 <encode_digits>
    return enc + nbytes;
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4413      	add	r3, r2
 800e088:	46b5      	mov	sp, r6
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3754      	adds	r7, #84	@ 0x54
 800e08e:	46bd      	mov	sp, r7
 800e090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e094:	0803b90c 	.word	0x0803b90c
 800e098:	0803751c 	.word	0x0803751c
 800e09c:	080374f8 	.word	0x080374f8
 800e0a0:	080374fc 	.word	0x080374fc
 800e0a4:	0803b8f4 	.word	0x0803b8f4
 800e0a8:	08037534 	.word	0x08037534
 800e0ac:	0803b900 	.word	0x0803b900
 800e0b0:	08037538 	.word	0x08037538

0800e0b4 <ibz_from_bytes>:

static const byte_t *
ibz_from_bytes(ibz_t *x, const byte_t *enc, size_t nbytes, bool sgn)
{
 800e0b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0b8:	b08b      	sub	sp, #44	@ 0x2c
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	607a      	str	r2, [r7, #4]
 800e0c2:	70fb      	strb	r3, [r7, #3]
 800e0c4:	466b      	mov	r3, sp
 800e0c6:	461e      	mov	r6, r3
    assert(nbytes > 0);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d105      	bne.n	800e0da <ibz_from_bytes+0x26>
 800e0ce:	4b54      	ldr	r3, [pc, #336]	@ (800e220 <ibz_from_bytes+0x16c>)
 800e0d0:	4a54      	ldr	r2, [pc, #336]	@ (800e224 <ibz_from_bytes+0x170>)
 800e0d2:	2164      	movs	r1, #100	@ 0x64
 800e0d4:	4854      	ldr	r0, [pc, #336]	@ (800e228 <ibz_from_bytes+0x174>)
 800e0d6:	f027 f8af 	bl	8035238 <__assert_func>
    const size_t ndigits = (nbytes + sizeof(digit_t) - 1) / sizeof(digit_t);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	3303      	adds	r3, #3
 800e0de:	089b      	lsrs	r3, r3, #2
 800e0e0:	623b      	str	r3, [r7, #32]
    assert(ndigits > 0);
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d105      	bne.n	800e0f4 <ibz_from_bytes+0x40>
 800e0e8:	4b50      	ldr	r3, [pc, #320]	@ (800e22c <ibz_from_bytes+0x178>)
 800e0ea:	4a4e      	ldr	r2, [pc, #312]	@ (800e224 <ibz_from_bytes+0x170>)
 800e0ec:	2166      	movs	r1, #102	@ 0x66
 800e0ee:	484e      	ldr	r0, [pc, #312]	@ (800e228 <ibz_from_bytes+0x174>)
 800e0f0:	f027 f8a2 	bl	8035238 <__assert_func>
    digit_t d[ndigits];
 800e0f4:	6a3b      	ldr	r3, [r7, #32]
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	61fb      	str	r3, [r7, #28]
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	4698      	mov	r8, r3
 800e100:	4691      	mov	r9, r2
 800e102:	f04f 0200 	mov.w	r2, #0
 800e106:	f04f 0300 	mov.w	r3, #0
 800e10a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800e10e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800e112:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	2200      	movs	r2, #0
 800e11a:	461c      	mov	r4, r3
 800e11c:	4615      	mov	r5, r2
 800e11e:	f04f 0200 	mov.w	r2, #0
 800e122:	f04f 0300 	mov.w	r3, #0
 800e126:	016b      	lsls	r3, r5, #5
 800e128:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800e12c:	0162      	lsls	r2, r4, #5
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	3307      	adds	r3, #7
 800e134:	08db      	lsrs	r3, r3, #3
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	ebad 0d03 	sub.w	sp, sp, r3
 800e13c:	466b      	mov	r3, sp
 800e13e:	3303      	adds	r3, #3
 800e140:	089b      	lsrs	r3, r3, #2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	61bb      	str	r3, [r7, #24]
    memset(d, 0, sizeof(d));
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	461a      	mov	r2, r3
 800e14c:	2100      	movs	r1, #0
 800e14e:	69b8      	ldr	r0, [r7, #24]
 800e150:	f027 fd56 	bl	8035c00 <memset>
    decode_digits(d, enc, nbytes, ndigits);
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	68b9      	ldr	r1, [r7, #8]
 800e15a:	69b8      	ldr	r0, [r7, #24]
 800e15c:	f7ff fe72 	bl	800de44 <decode_digits>
    if (sgn && enc[nbytes - 1] >> 7) {
 800e160:	78fb      	ldrb	r3, [r7, #3]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d04d      	beq.n	800e202 <ibz_from_bytes+0x14e>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	3b01      	subs	r3, #1
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4413      	add	r3, r2
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	b25b      	sxtb	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	da45      	bge.n	800e202 <ibz_from_bytes+0x14e>
        // negative, decode two's complement
        const size_t s = sizeof(digit_t) - 1 - (sizeof(d) - nbytes);
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	3303      	adds	r3, #3
 800e180:	617b      	str	r3, [r7, #20]
        assert(s < sizeof(digit_t));
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	2b03      	cmp	r3, #3
 800e186:	d905      	bls.n	800e194 <ibz_from_bytes+0xe0>
 800e188:	4b29      	ldr	r3, [pc, #164]	@ (800e230 <ibz_from_bytes+0x17c>)
 800e18a:	4a26      	ldr	r2, [pc, #152]	@ (800e224 <ibz_from_bytes+0x170>)
 800e18c:	216d      	movs	r1, #109	@ 0x6d
 800e18e:	4826      	ldr	r0, [pc, #152]	@ (800e228 <ibz_from_bytes+0x174>)
 800e190:	f027 f852 	bl	8035238 <__assert_func>
        d[ndigits - 1] |= ((digit_t)-1) >> 8 * s << 8 * s;
 800e194:	6a3b      	ldr	r3, [r7, #32]
 800e196:	1e5a      	subs	r2, r3, #1
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a6:	40da      	lsrs	r2, r3
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b0:	6a3a      	ldr	r2, [r7, #32]
 800e1b2:	3a01      	subs	r2, #1
 800e1b4:	4319      	orrs	r1, r3
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < ndigits; ++i)
 800e1bc:	2300      	movs	r3, #0
 800e1be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1c0:	e00b      	b.n	800e1da <ibz_from_bytes+0x126>
            d[i] = ~d[i];
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ca:	43d9      	mvns	r1, r3
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < ndigits; ++i)
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d3ef      	bcc.n	800e1c2 <ibz_from_bytes+0x10e>
        ibz_copy_digits(x, d, ndigits);
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	69b9      	ldr	r1, [r7, #24]
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f00f f9c2 	bl	801d572 <sqisign_gen_ibz_copy_digits>
        ibz_add(x, x, &ibz_const_one);
 800e1ee:	4a11      	ldr	r2, [pc, #68]	@ (800e234 <ibz_from_bytes+0x180>)
 800e1f0:	68f9      	ldr	r1, [r7, #12]
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f00e ff1d 	bl	801d032 <sqisign_gen_ibz_add>
        ibz_neg(x, x);
 800e1f8:	68f9      	ldr	r1, [r7, #12]
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f00e ff46 	bl	801d08c <sqisign_gen_ibz_neg>
    if (sgn && enc[nbytes - 1] >> 7) {
 800e200:	e005      	b.n	800e20e <ibz_from_bytes+0x15a>
    } else {
        // non-negative
        ibz_copy_digits(x, d, ndigits);
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	461a      	mov	r2, r3
 800e206:	69b9      	ldr	r1, [r7, #24]
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f00f f9b2 	bl	801d572 <sqisign_gen_ibz_copy_digits>
    }
    return enc + nbytes;
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4413      	add	r3, r2
 800e214:	46b5      	mov	sp, r6
}
 800e216:	4618      	mov	r0, r3
 800e218:	372c      	adds	r7, #44	@ 0x2c
 800e21a:	46bd      	mov	sp, r7
 800e21c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e220:	08037550 	.word	0x08037550
 800e224:	080374f8 	.word	0x080374f8
 800e228:	080374fc 	.word	0x080374fc
 800e22c:	0803755c 	.word	0x0803755c
 800e230:	08037568 	.word	0x08037568
 800e234:	0803b900 	.word	0x0803b900

0800e238 <secret_key_to_bytes>:

// public API

void
secret_key_to_bytes(byte_t *enc, const secret_key_t *sk, const public_key_t *pk)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b0ae      	sub	sp, #184	@ 0xb8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
#ifndef NDEBUG
    byte_t *const start = enc;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
#endif

    enc = public_key_to_bytes(enc, pk);
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f000 fa7d 	bl	800e74c <public_key_to_bytes>
 800e252:	60f8      	str	r0, [r7, #12]

#ifndef NDEBUG
    {
        fp2_t lhs, rhs;
        fp2_mul(&lhs, &sk->curve.A, &pk->curve.C);
 800e254:	68b9      	ldr	r1, [r7, #8]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	4618      	mov	r0, r3
 800e262:	f004 fc64 	bl	8012b2e <fp2_mul>
        fp2_mul(&rhs, &sk->curve.C, &pk->curve.A);
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e272:	4618      	mov	r0, r3
 800e274:	f004 fc5b 	bl	8012b2e <fp2_mul>
        assert(fp2_is_equal(&lhs, &rhs));
 800e278:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800e27c:	f107 0314 	add.w	r3, r7, #20
 800e280:	4611      	mov	r1, r2
 800e282:	4618      	mov	r0, r3
 800e284:	f004 fb9e 	bl	80129c4 <fp2_is_equal>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d105      	bne.n	800e29a <secret_key_to_bytes+0x62>
 800e28e:	4b57      	ldr	r3, [pc, #348]	@ (800e3ec <secret_key_to_bytes+0x1b4>)
 800e290:	4a57      	ldr	r2, [pc, #348]	@ (800e3f0 <secret_key_to_bytes+0x1b8>)
 800e292:	218b      	movs	r1, #139	@ 0x8b
 800e294:	4857      	ldr	r0, [pc, #348]	@ (800e3f4 <secret_key_to_bytes+0x1bc>)
 800e296:	f026 ffcf 	bl	8035238 <__assert_func>
    }
#endif

    enc = ibz_to_bytes(enc, &sk->secret_ideal.norm, FP_ENCODED_BYTES, false);
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	f503 71f8 	add.w	r1, r3, #496	@ 0x1f0
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	2220      	movs	r2, #32
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7ff fdf9 	bl	800de9c <ibz_to_bytes>
 800e2aa:	60f8      	str	r0, [r7, #12]
    {
        quat_alg_elem_t gen;
        quat_alg_elem_init(&gen);
 800e2ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 fd65 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
        int ret UNUSED = quat_lideal_generator(&gen, &sk->secret_ideal, &QUATALG_PINFTY);
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800e2bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e2c0:	4a4d      	ldr	r2, [pc, #308]	@ (800e3f8 <secret_key_to_bytes+0x1c0>)
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f00e f9f6 	bl	801c6b4 <sqisign_gen_quat_lideal_generator>
 800e2c8:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        assert(ret);
 800e2cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d105      	bne.n	800e2e0 <secret_key_to_bytes+0xa8>
 800e2d4:	4b49      	ldr	r3, [pc, #292]	@ (800e3fc <secret_key_to_bytes+0x1c4>)
 800e2d6:	4a46      	ldr	r2, [pc, #280]	@ (800e3f0 <secret_key_to_bytes+0x1b8>)
 800e2d8:	2194      	movs	r1, #148	@ 0x94
 800e2da:	4846      	ldr	r0, [pc, #280]	@ (800e3f4 <secret_key_to_bytes+0x1bc>)
 800e2dc:	f026 ffac 	bl	8035238 <__assert_func>
        // we skip encoding the denominator since it won't change the generated ideal
#ifndef NDEBUG
        {
            // let's make sure that the denominator is indeed coprime to the norm of the ideal
            ibz_t gcd;
            ibz_init(&gcd);
 800e2e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f00e fe8e 	bl	801d006 <sqisign_gen_ibz_init>
            ibz_gcd(&gcd, &gen.denom, &sk->secret_ideal.norm);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f503 72f8 	add.w	r2, r3, #496	@ 0x1f0
 800e2f0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800e2f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f00f f979 	bl	801d5f0 <sqisign_gen_ibz_gcd>
            assert(!ibz_cmp(&gcd, &ibz_const_one));
 800e2fe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e302:	493f      	ldr	r1, [pc, #252]	@ (800e400 <secret_key_to_bytes+0x1c8>)
 800e304:	4618      	mov	r0, r3
 800e306:	f00e ff53 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d005      	beq.n	800e31c <secret_key_to_bytes+0xe4>
 800e310:	4b3c      	ldr	r3, [pc, #240]	@ (800e404 <secret_key_to_bytes+0x1cc>)
 800e312:	4a37      	ldr	r2, [pc, #220]	@ (800e3f0 <secret_key_to_bytes+0x1b8>)
 800e314:	219c      	movs	r1, #156	@ 0x9c
 800e316:	4837      	ldr	r0, [pc, #220]	@ (800e3f4 <secret_key_to_bytes+0x1bc>)
 800e318:	f026 ff8e 	bl	8035238 <__assert_func>
            ibz_finalize(&gcd);
 800e31c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e320:	4618      	mov	r0, r3
 800e322:	f00e fe7b 	bl	801d01c <sqisign_gen_ibz_finalize>
        }
#endif
        enc = ibz_to_bytes(enc, &gen.coord[0], FP_ENCODED_BYTES, true);
 800e326:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e32a:	f103 010c 	add.w	r1, r3, #12
 800e32e:	2301      	movs	r3, #1
 800e330:	2220      	movs	r2, #32
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f7ff fdb2 	bl	800de9c <ibz_to_bytes>
 800e338:	60f8      	str	r0, [r7, #12]
        enc = ibz_to_bytes(enc, &gen.coord[1], FP_ENCODED_BYTES, true);
 800e33a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e33e:	f103 0118 	add.w	r1, r3, #24
 800e342:	2301      	movs	r3, #1
 800e344:	2220      	movs	r2, #32
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f7ff fda8 	bl	800de9c <ibz_to_bytes>
 800e34c:	60f8      	str	r0, [r7, #12]
        enc = ibz_to_bytes(enc, &gen.coord[2], FP_ENCODED_BYTES, true);
 800e34e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e352:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e356:	2301      	movs	r3, #1
 800e358:	2220      	movs	r2, #32
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f7ff fd9e 	bl	800de9c <ibz_to_bytes>
 800e360:	60f8      	str	r0, [r7, #12]
        enc = ibz_to_bytes(enc, &gen.coord[3], FP_ENCODED_BYTES, true);
 800e362:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e366:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e36a:	2301      	movs	r3, #1
 800e36c:	2220      	movs	r2, #32
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f7ff fd94 	bl	800de9c <ibz_to_bytes>
 800e374:	60f8      	str	r0, [r7, #12]
        quat_alg_elem_finalize(&gen);
 800e376:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 fd16 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    }

    enc = ibz_to_bytes(enc, &sk->mat_BAcan_to_BA0_two[0][0], TORSION_2POWER_BYTES, false);
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	f503 7100 	add.w	r1, r3, #512	@ 0x200
 800e386:	2300      	movs	r3, #0
 800e388:	2220      	movs	r2, #32
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f7ff fd86 	bl	800de9c <ibz_to_bytes>
 800e390:	60f8      	str	r0, [r7, #12]
    enc = ibz_to_bytes(enc, &sk->mat_BAcan_to_BA0_two[0][1], TORSION_2POWER_BYTES, false);
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	f503 7103 	add.w	r1, r3, #524	@ 0x20c
 800e398:	2300      	movs	r3, #0
 800e39a:	2220      	movs	r2, #32
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7ff fd7d 	bl	800de9c <ibz_to_bytes>
 800e3a2:	60f8      	str	r0, [r7, #12]
    enc = ibz_to_bytes(enc, &sk->mat_BAcan_to_BA0_two[1][0], TORSION_2POWER_BYTES, false);
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	f503 7106 	add.w	r1, r3, #536	@ 0x218
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	2220      	movs	r2, #32
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f7ff fd74 	bl	800de9c <ibz_to_bytes>
 800e3b4:	60f8      	str	r0, [r7, #12]
    enc = ibz_to_bytes(enc, &sk->mat_BAcan_to_BA0_two[1][1], TORSION_2POWER_BYTES, false);
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	f503 7109 	add.w	r1, r3, #548	@ 0x224
 800e3bc:	2300      	movs	r3, #0
 800e3be:	2220      	movs	r2, #32
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f7ff fd6b 	bl	800de9c <ibz_to_bytes>
 800e3c6:	60f8      	str	r0, [r7, #12]

    assert(enc - start == SECRETKEY_BYTES);
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	f240 1261 	movw	r2, #353	@ 0x161
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d005      	beq.n	800e3e4 <secret_key_to_bytes+0x1ac>
 800e3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e408 <secret_key_to_bytes+0x1d0>)
 800e3da:	4a05      	ldr	r2, [pc, #20]	@ (800e3f0 <secret_key_to_bytes+0x1b8>)
 800e3dc:	21ac      	movs	r1, #172	@ 0xac
 800e3de:	4805      	ldr	r0, [pc, #20]	@ (800e3f4 <secret_key_to_bytes+0x1bc>)
 800e3e0:	f026 ff2a 	bl	8035238 <__assert_func>
}
 800e3e4:	bf00      	nop
 800e3e6:	37b8      	adds	r7, #184	@ 0xb8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	0803757c 	.word	0x0803757c
 800e3f0:	080374f8 	.word	0x080374f8
 800e3f4:	080374fc 	.word	0x080374fc
 800e3f8:	0803bf30 	.word	0x0803bf30
 800e3fc:	08037598 	.word	0x08037598
 800e400:	0803b900 	.word	0x0803b900
 800e404:	0803759c 	.word	0x0803759c
 800e408:	080375bc 	.word	0x080375bc

0800e40c <secret_key_from_bytes>:

void
secret_key_from_bytes(secret_key_t *sk, public_key_t *pk, const byte_t *enc)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b09a      	sub	sp, #104	@ 0x68
 800e410:	af02      	add	r7, sp, #8
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
#ifndef NDEBUG
    const byte_t *const start = enc;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

    enc = public_key_from_bytes(pk, enc);
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	68b8      	ldr	r0, [r7, #8]
 800e420:	f000 f9be 	bl	800e7a0 <public_key_from_bytes>
 800e424:	6078      	str	r0, [r7, #4]

    {
        ibz_t norm;
        ibz_init(&norm);
 800e426:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e42a:	4618      	mov	r0, r3
 800e42c:	f00e fdeb 	bl	801d006 <sqisign_gen_ibz_init>
        quat_alg_elem_t gen;
        quat_alg_elem_init(&gen);
 800e430:	f107 0314 	add.w	r3, r7, #20
 800e434:	4618      	mov	r0, r3
 800e436:	f000 fca3 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
        enc = ibz_from_bytes(&norm, enc, FP_ENCODED_BYTES, false);
 800e43a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800e43e:	2300      	movs	r3, #0
 800e440:	2220      	movs	r2, #32
 800e442:	6879      	ldr	r1, [r7, #4]
 800e444:	f7ff fe36 	bl	800e0b4 <ibz_from_bytes>
 800e448:	6078      	str	r0, [r7, #4]
        enc = ibz_from_bytes(&gen.coord[0], enc, FP_ENCODED_BYTES, true);
 800e44a:	f107 0314 	add.w	r3, r7, #20
 800e44e:	f103 000c 	add.w	r0, r3, #12
 800e452:	2301      	movs	r3, #1
 800e454:	2220      	movs	r2, #32
 800e456:	6879      	ldr	r1, [r7, #4]
 800e458:	f7ff fe2c 	bl	800e0b4 <ibz_from_bytes>
 800e45c:	6078      	str	r0, [r7, #4]
        enc = ibz_from_bytes(&gen.coord[1], enc, FP_ENCODED_BYTES, true);
 800e45e:	f107 0314 	add.w	r3, r7, #20
 800e462:	f103 0018 	add.w	r0, r3, #24
 800e466:	2301      	movs	r3, #1
 800e468:	2220      	movs	r2, #32
 800e46a:	6879      	ldr	r1, [r7, #4]
 800e46c:	f7ff fe22 	bl	800e0b4 <ibz_from_bytes>
 800e470:	6078      	str	r0, [r7, #4]
        enc = ibz_from_bytes(&gen.coord[2], enc, FP_ENCODED_BYTES, true);
 800e472:	f107 0314 	add.w	r3, r7, #20
 800e476:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e47a:	2301      	movs	r3, #1
 800e47c:	2220      	movs	r2, #32
 800e47e:	6879      	ldr	r1, [r7, #4]
 800e480:	f7ff fe18 	bl	800e0b4 <ibz_from_bytes>
 800e484:	6078      	str	r0, [r7, #4]
        enc = ibz_from_bytes(&gen.coord[3], enc, FP_ENCODED_BYTES, true);
 800e486:	f107 0314 	add.w	r3, r7, #20
 800e48a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e48e:	2301      	movs	r3, #1
 800e490:	2220      	movs	r2, #32
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	f7ff fe0e 	bl	800e0b4 <ibz_from_bytes>
 800e498:	6078      	str	r0, [r7, #4]
        quat_lideal_create(&sk->secret_ideal, &gen, &norm, &MAXORD_O0, &QUATALG_PINFTY);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800e4a0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e4a4:	f107 0114 	add.w	r1, r7, #20
 800e4a8:	4b2b      	ldr	r3, [pc, #172]	@ (800e558 <secret_key_from_bytes+0x14c>)
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e55c <secret_key_from_bytes+0x150>)
 800e4ae:	f00e f8a3 	bl	801c5f8 <sqisign_gen_quat_lideal_create>
        ibz_finalize(&norm);
 800e4b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f00e fdb0 	bl	801d01c <sqisign_gen_ibz_finalize>
        quat_alg_elem_finalize(&gen);
 800e4bc:	f107 0314 	add.w	r3, r7, #20
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 fc73 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    }

    enc = ibz_from_bytes(&sk->mat_BAcan_to_BA0_two[0][0], enc, TORSION_2POWER_BYTES, false);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	2220      	movs	r2, #32
 800e4d0:	6879      	ldr	r1, [r7, #4]
 800e4d2:	f7ff fdef 	bl	800e0b4 <ibz_from_bytes>
 800e4d6:	6078      	str	r0, [r7, #4]
    enc = ibz_from_bytes(&sk->mat_BAcan_to_BA0_two[0][1], enc, TORSION_2POWER_BYTES, false);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f503 7003 	add.w	r0, r3, #524	@ 0x20c
 800e4de:	2300      	movs	r3, #0
 800e4e0:	2220      	movs	r2, #32
 800e4e2:	6879      	ldr	r1, [r7, #4]
 800e4e4:	f7ff fde6 	bl	800e0b4 <ibz_from_bytes>
 800e4e8:	6078      	str	r0, [r7, #4]
    enc = ibz_from_bytes(&sk->mat_BAcan_to_BA0_two[1][0], enc, TORSION_2POWER_BYTES, false);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f503 7006 	add.w	r0, r3, #536	@ 0x218
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	6879      	ldr	r1, [r7, #4]
 800e4f6:	f7ff fddd 	bl	800e0b4 <ibz_from_bytes>
 800e4fa:	6078      	str	r0, [r7, #4]
    enc = ibz_from_bytes(&sk->mat_BAcan_to_BA0_two[1][1], enc, TORSION_2POWER_BYTES, false);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 800e502:	2300      	movs	r3, #0
 800e504:	2220      	movs	r2, #32
 800e506:	6879      	ldr	r1, [r7, #4]
 800e508:	f7ff fdd4 	bl	800e0b4 <ibz_from_bytes>
 800e50c:	6078      	str	r0, [r7, #4]

    assert(enc - start == SECRETKEY_BYTES);
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e512:	1ad3      	subs	r3, r2, r3
 800e514:	f240 1261 	movw	r2, #353	@ 0x161
 800e518:	4293      	cmp	r3, r2
 800e51a:	d005      	beq.n	800e528 <secret_key_from_bytes+0x11c>
 800e51c:	4b10      	ldr	r3, [pc, #64]	@ (800e560 <secret_key_from_bytes+0x154>)
 800e51e:	4a11      	ldr	r2, [pc, #68]	@ (800e564 <secret_key_from_bytes+0x158>)
 800e520:	21cc      	movs	r1, #204	@ 0xcc
 800e522:	4811      	ldr	r0, [pc, #68]	@ (800e568 <secret_key_from_bytes+0x15c>)
 800e524:	f026 fe88 	bl	8035238 <__assert_func>

    sk->curve = pk->curve;
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	4610      	mov	r0, r2
 800e52e:	4619      	mov	r1, r3
 800e530:	f44f 7392 	mov.w	r3, #292	@ 0x124
 800e534:	461a      	mov	r2, r3
 800e536:	f027 fc32 	bl	8035d9e <memcpy>
    ec_curve_to_basis_2f_from_hint(&sk->canonical_basis, &sk->curve, TORSION_EVEN_POWER, pk->hint_pk);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 800e540:	68f9      	ldr	r1, [r7, #12]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 800e548:	22f8      	movs	r2, #248	@ 0xf8
 800e54a:	f7f4 f981 	bl	8002850 <ec_curve_to_basis_2f_from_hint>
}
 800e54e:	bf00      	nop
 800e550:	3760      	adds	r7, #96	@ 0x60
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	0803bf30 	.word	0x0803bf30
 800e55c:	0803bf3c 	.word	0x0803bf3c
 800e560:	080375bc 	.word	0x080375bc
 800e564:	080374f8 	.word	0x080374f8
 800e568:	080374fc 	.word	0x080374fc

0800e56c <encode_digits>:

// digits

static void
encode_digits(byte_t *enc, const digit_t *x, size_t nbytes)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
    if (rem) {
        digit_t ld = BSWAP_DIGIT(x[ndigits]);
        memcpy(enc + ndigits * sizeof(digit_t), (byte_t *)&ld, rem);
    }
#else
    memcpy(enc, (const byte_t *)x, nbytes);
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	68b9      	ldr	r1, [r7, #8]
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f027 fc0e 	bl	8035d9e <memcpy>
#endif
}
 800e582:	bf00      	nop
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
	...

0800e58c <decode_digits>:

static void
decode_digits(digit_t *x, const byte_t *enc, size_t nbytes, size_t ndigits)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
 800e598:	603b      	str	r3, [r7, #0]
    assert(nbytes <= ndigits * sizeof(digit_t));
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d905      	bls.n	800e5b0 <decode_digits+0x24>
 800e5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d8 <decode_digits+0x4c>)
 800e5a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e5dc <decode_digits+0x50>)
 800e5a8:	2121      	movs	r1, #33	@ 0x21
 800e5aa:	480d      	ldr	r0, [pc, #52]	@ (800e5e0 <decode_digits+0x54>)
 800e5ac:	f026 fe44 	bl	8035238 <__assert_func>
    memcpy((byte_t *)x, enc, nbytes);
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	68b9      	ldr	r1, [r7, #8]
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f027 fbf2 	bl	8035d9e <memcpy>
    memset((byte_t *)x + nbytes, 0, ndigits * sizeof(digit_t) - nbytes);
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	18d0      	adds	r0, r2, r3
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	009a      	lsls	r2, r3, #2
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	f027 fb18 	bl	8035c00 <memset>

#ifdef TARGET_BIG_ENDIAN
    for (size_t i = 0; i < ndigits; i++)
        x[i] = BSWAP_DIGIT(x[i]);
#endif
}
 800e5d0:	bf00      	nop
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	080375e8 	.word	0x080375e8
 800e5dc:	0803760c 	.word	0x0803760c
 800e5e0:	08037610 	.word	0x08037610

0800e5e4 <fp2_to_bytes>:

// fp2_t

static byte_t *
fp2_to_bytes(byte_t *enc, const fp2_t *x)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
    fp2_encode(enc, x);
 800e5ee:	6839      	ldr	r1, [r7, #0]
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f004 fe77 	bl	80132e4 <fp2_encode>
    return enc + FP2_ENCODED_BYTES;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	3340      	adds	r3, #64	@ 0x40
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <fp2_from_bytes>:

static const byte_t *
fp2_from_bytes(fp2_t *x, const byte_t *enc)
{
 800e602:	b580      	push	{r7, lr}
 800e604:	b082      	sub	sp, #8
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
 800e60a:	6039      	str	r1, [r7, #0]
    fp2_decode(x, enc);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f004 fe81 	bl	8013316 <fp2_decode>
    return enc + FP2_ENCODED_BYTES;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	3340      	adds	r3, #64	@ 0x40
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <proj_to_bytes>:

// curves and points

static byte_t *
proj_to_bytes(byte_t *enc, const fp2_t *x, const fp2_t *z)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b0ba      	sub	sp, #232	@ 0xe8
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
    assert(!fp2_is_zero(z));
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f004 f9b5 	bl	801299c <fp2_is_zero>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <proj_to_bytes+0x24>
 800e638:	4b22      	ldr	r3, [pc, #136]	@ (800e6c4 <proj_to_bytes+0xa4>)
 800e63a:	4a23      	ldr	r2, [pc, #140]	@ (800e6c8 <proj_to_bytes+0xa8>)
 800e63c:	2140      	movs	r1, #64	@ 0x40
 800e63e:	4823      	ldr	r0, [pc, #140]	@ (800e6cc <proj_to_bytes+0xac>)
 800e640:	f026 fdfa 	bl	8035238 <__assert_func>
    fp2_t tmp = *z;
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800e64a:	4611      	mov	r1, r2
 800e64c:	2248      	movs	r2, #72	@ 0x48
 800e64e:	4618      	mov	r0, r3
 800e650:	f027 fba5 	bl	8035d9e <memcpy>
    fp2_inv(&tmp);
 800e654:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800e658:	4618      	mov	r0, r3
 800e65a:	f004 faee 	bl	8012c3a <fp2_inv>
#ifndef NDEBUG
    {
        fp2_t chk;
        fp2_mul(&chk, z, &tmp);
 800e65e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800e662:	f107 0310 	add.w	r3, r7, #16
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	4618      	mov	r0, r3
 800e66a:	f004 fa60 	bl	8012b2e <fp2_mul>
        fp2_t one;
        fp2_set_one(&one);
 800e66e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e672:	4618      	mov	r0, r3
 800e674:	f004 f970 	bl	8012958 <fp2_set_one>
        assert(fp2_is_equal(&chk, &one));
 800e678:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800e67c:	f107 0310 	add.w	r3, r7, #16
 800e680:	4611      	mov	r1, r2
 800e682:	4618      	mov	r0, r3
 800e684:	f004 f99e 	bl	80129c4 <fp2_is_equal>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <proj_to_bytes+0x7a>
 800e68e:	4b10      	ldr	r3, [pc, #64]	@ (800e6d0 <proj_to_bytes+0xb0>)
 800e690:	4a0d      	ldr	r2, [pc, #52]	@ (800e6c8 <proj_to_bytes+0xa8>)
 800e692:	2149      	movs	r1, #73	@ 0x49
 800e694:	480d      	ldr	r0, [pc, #52]	@ (800e6cc <proj_to_bytes+0xac>)
 800e696:	f026 fdcf 	bl	8035238 <__assert_func>
    }
#endif
    fp2_mul(&tmp, x, &tmp);
 800e69a:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800e69e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800e6a2:	68b9      	ldr	r1, [r7, #8]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f004 fa42 	bl	8012b2e <fp2_mul>
    enc = fp2_to_bytes(enc, &tmp);
 800e6aa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f7ff ff97 	bl	800e5e4 <fp2_to_bytes>
 800e6b6:	60f8      	str	r0, [r7, #12]
    return enc;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	37e8      	adds	r7, #232	@ 0xe8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	08037634 	.word	0x08037634
 800e6c8:	0803760c 	.word	0x0803760c
 800e6cc:	08037610 	.word	0x08037610
 800e6d0:	08037644 	.word	0x08037644

0800e6d4 <proj_from_bytes>:

static const byte_t *
proj_from_bytes(fp2_t *x, fp2_t *z, const byte_t *enc)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
    enc = fp2_from_bytes(x, enc);
 800e6e0:	6879      	ldr	r1, [r7, #4]
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f7ff ff8d 	bl	800e602 <fp2_from_bytes>
 800e6e8:	6078      	str	r0, [r7, #4]
    fp2_set_one(z);
 800e6ea:	68b8      	ldr	r0, [r7, #8]
 800e6ec:	f004 f934 	bl	8012958 <fp2_set_one>
    return enc;
 800e6f0:	687b      	ldr	r3, [r7, #4]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <ec_curve_to_bytes>:

static byte_t *
ec_curve_to_bytes(byte_t *enc, const ec_curve_t *curve)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b082      	sub	sp, #8
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	6039      	str	r1, [r7, #0]
    return proj_to_bytes(enc, &curve->A, &curve->C);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	3348      	adds	r3, #72	@ 0x48
 800e70a:	461a      	mov	r2, r3
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7ff ff87 	bl	800e620 <proj_to_bytes>
 800e712:	4603      	mov	r3, r0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <ec_curve_from_bytes>:

static const byte_t *
ec_curve_from_bytes(ec_curve_t *curve, const byte_t *enc)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
    memset(curve, 0, sizeof(*curve));
 800e726:	f44f 7292 	mov.w	r2, #292	@ 0x124
 800e72a:	2100      	movs	r1, #0
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f027 fa67 	bl	8035c00 <memset>
    return proj_from_bytes(&curve->A, &curve->C, enc);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	3348      	adds	r3, #72	@ 0x48
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	4619      	mov	r1, r3
 800e73c:	f7ff ffca 	bl	800e6d4 <proj_from_bytes>
 800e740:	4603      	mov	r3, r0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <public_key_to_bytes>:

// public API

byte_t *
public_key_to_bytes(byte_t *enc, const public_key_t *pk)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
#ifndef NDEBUG
    const byte_t *const start = enc;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	60fb      	str	r3, [r7, #12]
#endif
    enc = ec_curve_to_bytes(enc, &pk->curve);
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	4619      	mov	r1, r3
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff ffcb 	bl	800e6fa <ec_curve_to_bytes>
 800e764:	6078      	str	r0, [r7, #4]
    *enc++ = pk->hint_pk;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	1c5a      	adds	r2, r3, #1
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	683a      	ldr	r2, [r7, #0]
 800e76e:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 800e772:	701a      	strb	r2, [r3, #0]
    assert(enc - start == PUBLICKEY_BYTES);
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	2b41      	cmp	r3, #65	@ 0x41
 800e77c:	d005      	beq.n	800e78a <public_key_to_bytes+0x3e>
 800e77e:	4b05      	ldr	r3, [pc, #20]	@ (800e794 <public_key_to_bytes+0x48>)
 800e780:	4a05      	ldr	r2, [pc, #20]	@ (800e798 <public_key_to_bytes+0x4c>)
 800e782:	218e      	movs	r1, #142	@ 0x8e
 800e784:	4805      	ldr	r0, [pc, #20]	@ (800e79c <public_key_to_bytes+0x50>)
 800e786:	f026 fd57 	bl	8035238 <__assert_func>
    return enc;
 800e78a:	687b      	ldr	r3, [r7, #4]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	08037660 	.word	0x08037660
 800e798:	0803760c 	.word	0x0803760c
 800e79c:	08037610 	.word	0x08037610

0800e7a0 <public_key_from_bytes>:

const byte_t *
public_key_from_bytes(public_key_t *pk, const byte_t *enc)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
#ifndef NDEBUG
    const byte_t *const start = enc;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	60fb      	str	r3, [r7, #12]
#endif
    enc = ec_curve_from_bytes(&pk->curve, enc);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6839      	ldr	r1, [r7, #0]
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7ff ffb2 	bl	800e71c <ec_curve_from_bytes>
 800e7b8:	6038      	str	r0, [r7, #0]
    pk->hint_pk = *enc++;
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	1c5a      	adds	r2, r3, #1
 800e7be:	603a      	str	r2, [r7, #0]
 800e7c0:	781a      	ldrb	r2, [r3, #0]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
    assert(enc - start == PUBLICKEY_BYTES);
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	2b41      	cmp	r3, #65	@ 0x41
 800e7d0:	d005      	beq.n	800e7de <public_key_from_bytes+0x3e>
 800e7d2:	4b05      	ldr	r3, [pc, #20]	@ (800e7e8 <public_key_from_bytes+0x48>)
 800e7d4:	4a05      	ldr	r2, [pc, #20]	@ (800e7ec <public_key_from_bytes+0x4c>)
 800e7d6:	219a      	movs	r1, #154	@ 0x9a
 800e7d8:	4805      	ldr	r0, [pc, #20]	@ (800e7f0 <public_key_from_bytes+0x50>)
 800e7da:	f026 fd2d 	bl	8035238 <__assert_func>
    return enc;
 800e7de:	683b      	ldr	r3, [r7, #0]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3710      	adds	r7, #16
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	08037660 	.word	0x08037660
 800e7ec:	0803760c 	.word	0x0803760c
 800e7f0:	08037610 	.word	0x08037610

0800e7f4 <signature_to_bytes>:

void
signature_to_bytes(byte_t *enc, const signature_t *sig)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
#ifndef NDEBUG
    byte_t *const start = enc;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	60fb      	str	r3, [r7, #12]
#endif

    enc = fp2_to_bytes(enc, &sig->E_aux_A);
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff feec 	bl	800e5e4 <fp2_to_bytes>
 800e80c:	6078      	str	r0, [r7, #4]

    *enc++ = sig->backtracking;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	683a      	ldr	r2, [r7, #0]
 800e816:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800e81a:	701a      	strb	r2, [r3, #0]
    *enc++ = sig->two_resp_length;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	1c5a      	adds	r2, r3, #1
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	f892 2049 	ldrb.w	r2, [r2, #73]	@ 0x49
 800e828:	701a      	strb	r2, [r3, #0]

    size_t nbytes = (SQIsign_response_length + 9) / 8;
 800e82a:	2310      	movs	r3, #16
 800e82c:	60bb      	str	r3, [r7, #8]
    encode_digits(enc, sig->mat_Bchall_can_to_B_chall[0][0], nbytes);
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	334c      	adds	r3, #76	@ 0x4c
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	4619      	mov	r1, r3
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7ff fe98 	bl	800e56c <encode_digits>
    enc += nbytes;
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	4413      	add	r3, r2
 800e842:	607b      	str	r3, [r7, #4]
    encode_digits(enc, sig->mat_Bchall_can_to_B_chall[0][1], nbytes);
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	336c      	adds	r3, #108	@ 0x6c
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	4619      	mov	r1, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7ff fe8d 	bl	800e56c <encode_digits>
    enc += nbytes;
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4413      	add	r3, r2
 800e858:	607b      	str	r3, [r7, #4]
    encode_digits(enc, sig->mat_Bchall_can_to_B_chall[1][0], nbytes);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	338c      	adds	r3, #140	@ 0x8c
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	4619      	mov	r1, r3
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff fe82 	bl	800e56c <encode_digits>
    enc += nbytes;
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	4413      	add	r3, r2
 800e86e:	607b      	str	r3, [r7, #4]
    encode_digits(enc, sig->mat_Bchall_can_to_B_chall[1][1], nbytes);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	33ac      	adds	r3, #172	@ 0xac
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7ff fe77 	bl	800e56c <encode_digits>
    enc += nbytes;
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	4413      	add	r3, r2
 800e884:	607b      	str	r3, [r7, #4]

    nbytes = SECURITY_BITS / 8;
 800e886:	2310      	movs	r3, #16
 800e888:	60bb      	str	r3, [r7, #8]
    encode_digits(enc, sig->chall_coeff, nbytes);
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	33cc      	adds	r3, #204	@ 0xcc
 800e88e:	68ba      	ldr	r2, [r7, #8]
 800e890:	4619      	mov	r1, r3
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7ff fe6a 	bl	800e56c <encode_digits>
    enc += nbytes;
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	4413      	add	r3, r2
 800e89e:	607b      	str	r3, [r7, #4]

    *enc++ = sig->hint_aux;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	1c5a      	adds	r2, r3, #1
 800e8a4:	607a      	str	r2, [r7, #4]
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	f892 20ec 	ldrb.w	r2, [r2, #236]	@ 0xec
 800e8ac:	701a      	strb	r2, [r3, #0]
    *enc++ = sig->hint_chall;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	1c5a      	adds	r2, r3, #1
 800e8b2:	607a      	str	r2, [r7, #4]
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	f892 20ed 	ldrb.w	r2, [r2, #237]	@ 0xed
 800e8ba:	701a      	strb	r2, [r3, #0]

    assert(enc - start == SIGNATURE_BYTES);
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	2b94      	cmp	r3, #148	@ 0x94
 800e8c4:	d005      	beq.n	800e8d2 <signature_to_bytes+0xde>
 800e8c6:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <signature_to_bytes+0xe8>)
 800e8c8:	4a05      	ldr	r2, [pc, #20]	@ (800e8e0 <signature_to_bytes+0xec>)
 800e8ca:	21bb      	movs	r1, #187	@ 0xbb
 800e8cc:	4805      	ldr	r0, [pc, #20]	@ (800e8e4 <signature_to_bytes+0xf0>)
 800e8ce:	f026 fcb3 	bl	8035238 <__assert_func>
}
 800e8d2:	bf00      	nop
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	08037680 	.word	0x08037680
 800e8e0:	0803760c 	.word	0x0803760c
 800e8e4:	08037610 	.word	0x08037610

0800e8e8 <signature_from_bytes>:

void
signature_from_bytes(signature_t *sig, const byte_t *enc)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
#ifndef NDEBUG
    const byte_t *const start = enc;
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	60fb      	str	r3, [r7, #12]
#endif

    enc = fp2_from_bytes(&sig->E_aux_A, enc);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7ff fe81 	bl	800e602 <fp2_from_bytes>
 800e900:	6038      	str	r0, [r7, #0]

    sig->backtracking = *enc++;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	603a      	str	r2, [r7, #0]
 800e908:	781a      	ldrb	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    sig->two_resp_length = *enc++;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	603a      	str	r2, [r7, #0]
 800e916:	781a      	ldrb	r2, [r3, #0]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    size_t nbytes = (SQIsign_response_length + 9) / 8;
 800e91e:	2310      	movs	r3, #16
 800e920:	60bb      	str	r3, [r7, #8]
    decode_digits(sig->mat_Bchall_can_to_B_chall[0][0], enc, nbytes, NWORDS_ORDER);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800e928:	2308      	movs	r3, #8
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	f7ff fe2d 	bl	800e58c <decode_digits>
    enc += nbytes;
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	4413      	add	r3, r2
 800e938:	603b      	str	r3, [r7, #0]
    decode_digits(sig->mat_Bchall_can_to_B_chall[0][1], enc, nbytes, NWORDS_ORDER);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800e940:	2308      	movs	r3, #8
 800e942:	68ba      	ldr	r2, [r7, #8]
 800e944:	6839      	ldr	r1, [r7, #0]
 800e946:	f7ff fe21 	bl	800e58c <decode_digits>
    enc += nbytes;
 800e94a:	683a      	ldr	r2, [r7, #0]
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	4413      	add	r3, r2
 800e950:	603b      	str	r3, [r7, #0]
    decode_digits(sig->mat_Bchall_can_to_B_chall[1][0], enc, nbytes, NWORDS_ORDER);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 800e958:	2308      	movs	r3, #8
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	f7ff fe15 	bl	800e58c <decode_digits>
    enc += nbytes;
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	4413      	add	r3, r2
 800e968:	603b      	str	r3, [r7, #0]
    decode_digits(sig->mat_Bchall_can_to_B_chall[1][1], enc, nbytes, NWORDS_ORDER);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f103 00ac 	add.w	r0, r3, #172	@ 0xac
 800e970:	2308      	movs	r3, #8
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	6839      	ldr	r1, [r7, #0]
 800e976:	f7ff fe09 	bl	800e58c <decode_digits>
    enc += nbytes;
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	4413      	add	r3, r2
 800e980:	603b      	str	r3, [r7, #0]

    nbytes = SECURITY_BITS / 8;
 800e982:	2310      	movs	r3, #16
 800e984:	60bb      	str	r3, [r7, #8]
    decode_digits(sig->chall_coeff, enc, nbytes, NWORDS_ORDER);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800e98c:	2308      	movs	r3, #8
 800e98e:	68ba      	ldr	r2, [r7, #8]
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	f7ff fdfb 	bl	800e58c <decode_digits>
    enc += nbytes;
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	4413      	add	r3, r2
 800e99c:	603b      	str	r3, [r7, #0]

    sig->hint_aux = *enc++;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	1c5a      	adds	r2, r3, #1
 800e9a2:	603a      	str	r2, [r7, #0]
 800e9a4:	781a      	ldrb	r2, [r3, #0]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    sig->hint_chall = *enc++;
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	1c5a      	adds	r2, r3, #1
 800e9b0:	603a      	str	r2, [r7, #0]
 800e9b2:	781a      	ldrb	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

    assert(enc - start == SIGNATURE_BYTES);
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	2b94      	cmp	r3, #148	@ 0x94
 800e9c2:	d005      	beq.n	800e9d0 <signature_from_bytes+0xe8>
 800e9c4:	4b04      	ldr	r3, [pc, #16]	@ (800e9d8 <signature_from_bytes+0xf0>)
 800e9c6:	4a05      	ldr	r2, [pc, #20]	@ (800e9dc <signature_from_bytes+0xf4>)
 800e9c8:	21db      	movs	r1, #219	@ 0xdb
 800e9ca:	4805      	ldr	r0, [pc, #20]	@ (800e9e0 <signature_from_bytes+0xf8>)
 800e9cc:	f026 fc34 	bl	8035238 <__assert_func>
}
 800e9d0:	bf00      	nop
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	08037680 	.word	0x08037680
 800e9dc:	0803760c 	.word	0x0803760c
 800e9e0:	08037610 	.word	0x08037610

0800e9e4 <reset_cycle_counter>:

	#include "stm32f429xx.h"
	#include "core_cm4.h"
	extern uint8_t *__sbrk_heap_end;

	void reset_cycle_counter(void) {
 800e9e4:	b480      	push	{r7}
 800e9e6:	af00      	add	r7, sp, #0
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800e9e8:	4b09      	ldr	r3, [pc, #36]	@ (800ea10 <reset_cycle_counter+0x2c>)
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	4a08      	ldr	r2, [pc, #32]	@ (800ea10 <reset_cycle_counter+0x2c>)
 800e9ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e9f2:	60d3      	str	r3, [r2, #12]
		DWT->CYCCNT = 0;
 800e9f4:	4b07      	ldr	r3, [pc, #28]	@ (800ea14 <reset_cycle_counter+0x30>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	605a      	str	r2, [r3, #4]
		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800e9fa:	4b06      	ldr	r3, [pc, #24]	@ (800ea14 <reset_cycle_counter+0x30>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a05      	ldr	r2, [pc, #20]	@ (800ea14 <reset_cycle_counter+0x30>)
 800ea00:	f043 0301 	orr.w	r3, r3, #1
 800ea04:	6013      	str	r3, [r2, #0]
	}
 800ea06:	bf00      	nop
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr
 800ea10:	e000edf0 	.word	0xe000edf0
 800ea14:	e0001000 	.word	0xe0001000

0800ea18 <get_cycle_count>:


	uint32_t get_cycle_count(void) {
 800ea18:	b480      	push	{r7}
 800ea1a:	af00      	add	r7, sp, #0
	    return DWT->CYCCNT;
 800ea1c:	4b03      	ldr	r3, [pc, #12]	@ (800ea2c <get_cycle_count+0x14>)
 800ea1e:	685b      	ldr	r3, [r3, #4]
	}
 800ea20:	4618      	mov	r0, r3
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	e0001000 	.word	0xe0001000

0800ea30 <paint_stack>:

	void paint_stack(void) {
 800ea30:	b490      	push	{r4, r7}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
	    register uint32_t sp;
	    __asm volatile ("mrs %0, msp" : "=r" (sp));
 800ea36:	f3ef 8308 	mrs	r3, MSP
 800ea3a:	461c      	mov	r4, r3

	    uint8_t *p = __sbrk_heap_end;
 800ea3c:	4b08      	ldr	r3, [pc, #32]	@ (800ea60 <paint_stack+0x30>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	607b      	str	r3, [r7, #4]
	    while ((uint32_t)p < sp) {
 800ea42:	e004      	b.n	800ea4e <paint_stack+0x1e>
	        *p++ = STACK_PATTERN;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	607a      	str	r2, [r7, #4]
 800ea4a:	22ab      	movs	r2, #171	@ 0xab
 800ea4c:	701a      	strb	r2, [r3, #0]
	    while ((uint32_t)p < sp) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	429c      	cmp	r4, r3
 800ea52:	d8f7      	bhi.n	800ea44 <paint_stack+0x14>
	    }
	}
 800ea54:	bf00      	nop
 800ea56:	bf00      	nop
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bc90      	pop	{r4, r7}
 800ea5e:	4770      	bx	lr
 800ea60:	20002174 	.word	0x20002174

0800ea64 <measure_stack_usage>:

	uint32_t measure_stack_usage(void) {
 800ea64:	b490      	push	{r4, r7}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
	    register uint32_t sp;
	    __asm volatile ("mrs %0, msp" : "=r" (sp));
 800ea6a:	f3ef 8308 	mrs	r3, MSP
 800ea6e:	461c      	mov	r4, r3

	    uint8_t *p = __sbrk_heap_end;
 800ea70:	4b0a      	ldr	r3, [pc, #40]	@ (800ea9c <measure_stack_usage+0x38>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	607b      	str	r3, [r7, #4]
	    while ((uint32_t)p < sp && *p == STACK_PATTERN) {
 800ea76:	e002      	b.n	800ea7e <measure_stack_usage+0x1a>
	        p++;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	607b      	str	r3, [r7, #4]
	    while ((uint32_t)p < sp && *p == STACK_PATTERN) {
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	429c      	cmp	r4, r3
 800ea82:	d903      	bls.n	800ea8c <measure_stack_usage+0x28>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2bab      	cmp	r3, #171	@ 0xab
 800ea8a:	d0f5      	beq.n	800ea78 <measure_stack_usage+0x14>
	    }
	    return sp - (uint32_t)p;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	1ae3      	subs	r3, r4, r3
	}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bc90      	pop	{r4, r7}
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	20002174 	.word	0x20002174

0800eaa0 <rand_u32>:


#endif

static uint32_t rand_u32()
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
    unsigned char buf[4];
    if (randombytes(buf, sizeof(buf)))
 800eaa6:	1d39      	adds	r1, r7, #4
 800eaa8:	f04f 0204 	mov.w	r2, #4
 800eaac:	f04f 0300 	mov.w	r3, #0
 800eab0:	4608      	mov	r0, r1
 800eab2:	f01a fe61 	bl	8029778 <randombytes>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <rand_u32+0x20>
        abort();
 800eabc:	f026 fbb4 	bl	8035228 <abort>
    return ((uint32_t) buf[3] << 24)
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	061a      	lsls	r2, r3, #24
         | ((uint32_t) buf[2] << 16)
 800eac4:	79bb      	ldrb	r3, [r7, #6]
 800eac6:	041b      	lsls	r3, r3, #16
 800eac8:	431a      	orrs	r2, r3
         | ((uint32_t) buf[1] <<  8)
 800eaca:	797b      	ldrb	r3, [r7, #5]
 800eacc:	021b      	lsls	r3, r3, #8
 800eace:	4313      	orrs	r3, r2
         | ((uint32_t) buf[0] <<  0);
 800ead0:	793a      	ldrb	r2, [r7, #4]
 800ead2:	4313      	orrs	r3, r2
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <example_sqisign>:
 * - crypto_sign_open
 *
 * @return int return code
 */
int example_sqisign(void)
{
 800eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae0:	b09f      	sub	sp, #124	@ 0x7c
 800eae2:	af04      	add	r7, sp, #16
 800eae4:	466b      	mov	r3, sp
 800eae6:	607b      	str	r3, [r7, #4]

#if defined(STM32_BENCHMARK)
	uint8_t *heap_snapshot = NULL;
 800eae8:	2300      	movs	r3, #0
 800eaea:	667b      	str	r3, [r7, #100]	@ 0x64
	uint32_t used_heap;
	uint32_t used_stack;
	uint32_t heap_used;
#endif

    unsigned long long msglen = rand_u32() % 100;
 800eaec:	f7ff ffd8 	bl	800eaa0 <rand_u32>
 800eaf0:	4601      	mov	r1, r0
 800eaf2:	4b99      	ldr	r3, [pc, #612]	@ (800ed58 <example_sqisign+0x27c>)
 800eaf4:	fba3 2301 	umull	r2, r3, r3, r1
 800eaf8:	095a      	lsrs	r2, r3, #5
 800eafa:	2364      	movs	r3, #100	@ 0x64
 800eafc:	fb02 f303 	mul.w	r3, r2, r3
 800eb00:	1aca      	subs	r2, r1, r3
 800eb02:	2300      	movs	r3, #0
 800eb04:	613a      	str	r2, [r7, #16]
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eb0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    unsigned long long smlen = CRYPTO_BYTES + msglen;
 800eb10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800eb14:	f112 0194 	adds.w	r1, r2, #148	@ 0x94
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	f143 0300 	adc.w	r3, r3, #0
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eb24:	e9c7 2308 	strd	r2, r3, [r7, #32]

    unsigned char *sk = calloc(CRYPTO_SECRETKEYBYTES, 1);
 800eb28:	2101      	movs	r1, #1
 800eb2a:	f240 1061 	movw	r0, #353	@ 0x161
 800eb2e:	f026 fba1 	bl	8035274 <calloc>
 800eb32:	4603      	mov	r3, r0
 800eb34:	663b      	str	r3, [r7, #96]	@ 0x60
    unsigned char *pk = calloc(CRYPTO_PUBLICKEYBYTES, 1);
 800eb36:	2101      	movs	r1, #1
 800eb38:	2041      	movs	r0, #65	@ 0x41
 800eb3a:	f026 fb9b 	bl	8035274 <calloc>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	65fb      	str	r3, [r7, #92]	@ 0x5c

    unsigned char *sm = calloc(smlen, 1);
 800eb42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb46:	4613      	mov	r3, r2
 800eb48:	2101      	movs	r1, #1
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f026 fb92 	bl	8035274 <calloc>
 800eb50:	4603      	mov	r3, r0
 800eb52:	65bb      	str	r3, [r7, #88]	@ 0x58

#if defined(STM32_BENCHMARK)
    heap_snapshot = __sbrk_heap_end;
 800eb54:	4b81      	ldr	r3, [pc, #516]	@ (800ed5c <example_sqisign+0x280>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	667b      	str	r3, [r7, #100]	@ 0x64
#endif
    unsigned char msg[msglen], msg2[msglen];
 800eb5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800eb5e:	4603      	mov	r3, r0
 800eb60:	3b01      	subs	r3, #1
 800eb62:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb64:	4602      	mov	r2, r0
 800eb66:	2300      	movs	r3, #0
 800eb68:	61ba      	str	r2, [r7, #24]
 800eb6a:	61fb      	str	r3, [r7, #28]
 800eb6c:	f04f 0200 	mov.w	r2, #0
 800eb70:	f04f 0300 	mov.w	r3, #0
 800eb74:	69fe      	ldr	r6, [r7, #28]
 800eb76:	00f3      	lsls	r3, r6, #3
 800eb78:	69be      	ldr	r6, [r7, #24]
 800eb7a:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 800eb7e:	69be      	ldr	r6, [r7, #24]
 800eb80:	00f2      	lsls	r2, r6, #3
 800eb82:	4602      	mov	r2, r0
 800eb84:	2300      	movs	r3, #0
 800eb86:	4692      	mov	sl, r2
 800eb88:	469b      	mov	fp, r3
 800eb8a:	f04f 0200 	mov.w	r2, #0
 800eb8e:	f04f 0300 	mov.w	r3, #0
 800eb92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800eb96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800eb9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb9e:	4603      	mov	r3, r0
 800eba0:	3307      	adds	r3, #7
 800eba2:	08db      	lsrs	r3, r3, #3
 800eba4:	00db      	lsls	r3, r3, #3
 800eba6:	ebad 0d03 	sub.w	sp, sp, r3
 800ebaa:	ab04      	add	r3, sp, #16
 800ebac:	3300      	adds	r3, #0
 800ebae:	653b      	str	r3, [r7, #80]	@ 0x50
 800ebb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebba:	4602      	mov	r2, r0
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	4690      	mov	r8, r2
 800ebc0:	4699      	mov	r9, r3
 800ebc2:	f04f 0200 	mov.w	r2, #0
 800ebc6:	f04f 0300 	mov.w	r3, #0
 800ebca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ebce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ebd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	2300      	movs	r3, #0
 800ebda:	4614      	mov	r4, r2
 800ebdc:	461d      	mov	r5, r3
 800ebde:	f04f 0200 	mov.w	r2, #0
 800ebe2:	f04f 0300 	mov.w	r3, #0
 800ebe6:	00eb      	lsls	r3, r5, #3
 800ebe8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ebec:	00e2      	lsls	r2, r4, #3
 800ebee:	4603      	mov	r3, r0
 800ebf0:	3307      	adds	r3, #7
 800ebf2:	08db      	lsrs	r3, r3, #3
 800ebf4:	00db      	lsls	r3, r3, #3
 800ebf6:	ebad 0d03 	sub.w	sp, sp, r3
 800ebfa:	ab04      	add	r3, sp, #16
 800ebfc:	3300      	adds	r3, #0
 800ebfe:	64bb      	str	r3, [r7, #72]	@ 0x48
    printf("%s\n", CRYPTO_ALGNAME);
 800ec00:	4857      	ldr	r0, [pc, #348]	@ (800ed60 <example_sqisign+0x284>)
 800ec02:	f026 ff03 	bl	8035a0c <puts>


#if defined(STM32_BENCHMARK)
    printf("KEY GENERATION \n");
 800ec06:	4857      	ldr	r0, [pc, #348]	@ (800ed64 <example_sqisign+0x288>)
 800ec08:	f026 ff00 	bl	8035a0c <puts>
    paint_stack();
 800ec0c:	f7ff ff10 	bl	800ea30 <paint_stack>
    start = HAL_GetTick();
 800ec10:	f023 fc64 	bl	80324dc <HAL_GetTick>
 800ec14:	4603      	mov	r3, r0
 800ec16:	647b      	str	r3, [r7, #68]	@ 0x44
    reset_cycle_counter();
 800ec18:	f7ff fee4 	bl	800e9e4 <reset_cycle_counter>
#endif
    int res = crypto_sign_keypair(pk, sk);
 800ec1c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ec1e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ec20:	f7f2 fde8 	bl	80017f4 <crypto_sign_keypair>
 800ec24:	6438      	str	r0, [r7, #64]	@ 0x40
#if defined(STM32_BENCHMARK)
    cycles = get_cycle_count();
 800ec26:	f7ff fef7 	bl	800ea18 <get_cycle_count>
 800ec2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    end = HAL_GetTick();
 800ec2c:	f023 fc56 	bl	80324dc <HAL_GetTick>
 800ec30:	4603      	mov	r3, r0
 800ec32:	63bb      	str	r3, [r7, #56]	@ 0x38
    printf("TIME : %lu ms \n", end - start);
 800ec34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	484a      	ldr	r0, [pc, #296]	@ (800ed68 <example_sqisign+0x28c>)
 800ec3e:	f026 fe7d 	bl	803593c <iprintf>
    printf("NUMBER CYCLE : %lu cycles \n", cycles);
 800ec42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ec44:	4849      	ldr	r0, [pc, #292]	@ (800ed6c <example_sqisign+0x290>)
 800ec46:	f026 fe79 	bl	803593c <iprintf>

    used_stack = measure_stack_usage();
 800ec4a:	f7ff ff0b 	bl	800ea64 <measure_stack_usage>
 800ec4e:	6378      	str	r0, [r7, #52]	@ 0x34
    printf("STACK USED : %lu bytes\n", used_stack);
 800ec50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ec52:	4847      	ldr	r0, [pc, #284]	@ (800ed70 <example_sqisign+0x294>)
 800ec54:	f026 fe72 	bl	803593c <iprintf>
    for (size_t i = 0; i < msglen; ++i)
        msg[i] = rand_u32();
#endif

#if defined(STM32_BENCHMARK)
    printf("SIGN \n");
 800ec58:	4846      	ldr	r0, [pc, #280]	@ (800ed74 <example_sqisign+0x298>)
 800ec5a:	f026 fed7 	bl	8035a0c <puts>
    paint_stack();
 800ec5e:	f7ff fee7 	bl	800ea30 <paint_stack>
    start = HAL_GetTick();
 800ec62:	f023 fc3b 	bl	80324dc <HAL_GetTick>
 800ec66:	4603      	mov	r3, r0
 800ec68:	647b      	str	r3, [r7, #68]	@ 0x44
    reset_cycle_counter();
 800ec6a:	f7ff febb 	bl	800e9e4 <reset_cycle_counter>
#endif
    res = crypto_sign(sm, &smlen, msg, msglen, sk);
 800ec6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ec72:	f107 0020 	add.w	r0, r7, #32
 800ec76:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ec78:	9102      	str	r1, [sp, #8]
 800ec7a:	e9cd 2300 	strd	r2, r3, [sp]
 800ec7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec80:	4601      	mov	r1, r0
 800ec82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ec84:	f7f2 fdc4 	bl	8001810 <crypto_sign>
 800ec88:	6438      	str	r0, [r7, #64]	@ 0x40
#if defined(STM32_BENCHMARK)
    cycles = get_cycle_count();
 800ec8a:	f7ff fec5 	bl	800ea18 <get_cycle_count>
 800ec8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    end = HAL_GetTick();
 800ec90:	f023 fc24 	bl	80324dc <HAL_GetTick>
 800ec94:	4603      	mov	r3, r0
 800ec96:	63bb      	str	r3, [r7, #56]	@ 0x38
    printf("TIME : %lu ms \n", end - start);
 800ec98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	4619      	mov	r1, r3
 800eca0:	4831      	ldr	r0, [pc, #196]	@ (800ed68 <example_sqisign+0x28c>)
 800eca2:	f026 fe4b 	bl	803593c <iprintf>
    printf("NUMBER CYCLE : %lu cycles \n", cycles);
 800eca6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eca8:	4830      	ldr	r0, [pc, #192]	@ (800ed6c <example_sqisign+0x290>)
 800ecaa:	f026 fe47 	bl	803593c <iprintf>

    used_stack = measure_stack_usage();
 800ecae:	f7ff fed9 	bl	800ea64 <measure_stack_usage>
 800ecb2:	6378      	str	r0, [r7, #52]	@ 0x34
    printf("STACK USED : %lu bytes\n", used_stack);
 800ecb4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ecb6:	482e      	ldr	r0, [pc, #184]	@ (800ed70 <example_sqisign+0x294>)
 800ecb8:	f026 fe40 	bl	803593c <iprintf>
        printf("OK\n");
    }
#endif

#if defined(STM32_BENCHMARK)
    printf("VERIFICATION \n");
 800ecbc:	482e      	ldr	r0, [pc, #184]	@ (800ed78 <example_sqisign+0x29c>)
 800ecbe:	f026 fea5 	bl	8035a0c <puts>
    paint_stack();
 800ecc2:	f7ff feb5 	bl	800ea30 <paint_stack>
    start = HAL_GetTick();
 800ecc6:	f023 fc09 	bl	80324dc <HAL_GetTick>
 800ecca:	4603      	mov	r3, r0
 800eccc:	647b      	str	r3, [r7, #68]	@ 0x44
    reset_cycle_counter();
 800ecce:	f7ff fe89 	bl	800e9e4 <reset_cycle_counter>
#endif
    res = crypto_sign_open(msg2, &msglen, sm, smlen, pk);
 800ecd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ecd6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800ecda:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ecdc:	9102      	str	r1, [sp, #8]
 800ecde:	e9cd 2300 	strd	r2, r3, [sp]
 800ece2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ece4:	4601      	mov	r1, r0
 800ece6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ece8:	f7f2 fda8 	bl	800183c <crypto_sign_open>
 800ecec:	6438      	str	r0, [r7, #64]	@ 0x40
#if defined(STM32_BENCHMARK)
    cycles = get_cycle_count();
 800ecee:	f7ff fe93 	bl	800ea18 <get_cycle_count>
 800ecf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    end = HAL_GetTick();
 800ecf4:	f023 fbf2 	bl	80324dc <HAL_GetTick>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	63bb      	str	r3, [r7, #56]	@ 0x38
    printf("TIME : %lu ms \n", end - start);
 800ecfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ecfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	4619      	mov	r1, r3
 800ed04:	4818      	ldr	r0, [pc, #96]	@ (800ed68 <example_sqisign+0x28c>)
 800ed06:	f026 fe19 	bl	803593c <iprintf>
    printf("NUMBER CYCLE : %lu cycles \n", cycles);
 800ed0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed0c:	4817      	ldr	r0, [pc, #92]	@ (800ed6c <example_sqisign+0x290>)
 800ed0e:	f026 fe15 	bl	803593c <iprintf>

    used_stack = measure_stack_usage();
 800ed12:	f7ff fea7 	bl	800ea64 <measure_stack_usage>
 800ed16:	6378      	str	r0, [r7, #52]	@ 0x34
    printf("STACK USED : %lu bytes\n", used_stack);
 800ed18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ed1a:	4815      	ldr	r0, [pc, #84]	@ (800ed70 <example_sqisign+0x294>)
 800ed1c:	f026 fe0e 	bl	803593c <iprintf>
    heap_used = (uint32_t)__sbrk_heap_end - 0xD0000000;
 800ed20:	4b0e      	ldr	r3, [pc, #56]	@ (800ed5c <example_sqisign+0x280>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 800ed28:	633b      	str	r3, [r7, #48]	@ 0x30
    printf("HEAP USAGE : %lu bytes\n", (unsigned long)heap_used);
 800ed2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ed2c:	4813      	ldr	r0, [pc, #76]	@ (800ed7c <example_sqisign+0x2a0>)
 800ed2e:	f026 fe05 	bl	803593c <iprintf>
err:


#endif

	sqisign_secure_free(sk, CRYPTO_SECRETKEYBYTES);
 800ed32:	f240 1161 	movw	r1, #353	@ 0x161
 800ed36:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800ed38:	f013 fb9e 	bl	8022478 <sqisign_gen_sqisign_secure_free>
    free(pk);
 800ed3c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ed3e:	f026 fabd 	bl	80352bc <free>
    free(sm);
 800ed42:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ed44:	f026 faba 	bl	80352bc <free>
 800ed48:	f8d7 d004 	ldr.w	sp, [r7, #4]
    //heap_snapshot = NULL;
    //clean_heap_pointer();

}
 800ed4c:	bf00      	nop
 800ed4e:	4618      	mov	r0, r3
 800ed50:	376c      	adds	r7, #108	@ 0x6c
 800ed52:	46bd      	mov	sp, r7
 800ed54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed58:	51eb851f 	.word	0x51eb851f
 800ed5c:	20002174 	.word	0x20002174
 800ed60:	0803773c 	.word	0x0803773c
 800ed64:	0803774c 	.word	0x0803774c
 800ed68:	0803775c 	.word	0x0803775c
 800ed6c:	0803776c 	.word	0x0803776c
 800ed70:	08037788 	.word	0x08037788
 800ed74:	080377a0 	.word	0x080377a0
 800ed78:	080377a8 	.word	0x080377a8
 800ed7c:	080377b8 	.word	0x080377b8

0800ed80 <sqisign_gen_quat_alg_elem_init>:
    ibz_finalize(&(*alg).p);
}

void
quat_alg_elem_init(quat_alg_elem_t *elem)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
    ibz_vec_4_init(&(*elem).coord);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	330c      	adds	r3, #12
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f000 f840 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_init(&(*elem).denom);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f00e f936 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_set(&(*elem).denom, 1);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2101      	movs	r1, #1
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f00e fa5f 	bl	801d262 <sqisign_gen_ibz_set>
}
 800eda4:	bf00      	nop
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <sqisign_gen_quat_alg_elem_finalize>:
void
quat_alg_elem_finalize(quat_alg_elem_t *elem)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
    ibz_vec_4_finalize(&(*elem).coord);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	330c      	adds	r3, #12
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 f846 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_finalize(&(*elem).denom);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f00e f92b 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 800edc6:	bf00      	nop
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <sqisign_gen_ibz_vec_2_init>:

void
ibz_vec_2_init(ibz_vec_2_t *vec)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b082      	sub	sp, #8
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
    ibz_init(&((*vec)[0]));
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4618      	mov	r0, r3
 800edda:	f00e f914 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&((*vec)[1]));
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	330c      	adds	r3, #12
 800ede2:	4618      	mov	r0, r3
 800ede4:	f00e f90f 	bl	801d006 <sqisign_gen_ibz_init>
}
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <sqisign_gen_ibz_vec_2_finalize>:

void
ibz_vec_2_finalize(ibz_vec_2_t *vec)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
    ibz_finalize(&((*vec)[0]));
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4618      	mov	r0, r3
 800edfc:	f00e f90e 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&((*vec)[1]));
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	330c      	adds	r3, #12
 800ee04:	4618      	mov	r0, r3
 800ee06:	f00e f909 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 800ee0a:	bf00      	nop
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <sqisign_gen_ibz_vec_4_init>:

void
ibz_vec_4_init(ibz_vec_4_t *vec)
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b084      	sub	sp, #16
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	60fb      	str	r3, [r7, #12]
 800ee1e:	e00c      	b.n	800ee3a <sqisign_gen_ibz_vec_4_init+0x28>
        ibz_init(&(*vec)[i]);
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	4613      	mov	r3, r2
 800ee24:	005b      	lsls	r3, r3, #1
 800ee26:	4413      	add	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f00e f8e9 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 4; i++) {
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	3301      	adds	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	ddef      	ble.n	800ee20 <sqisign_gen_ibz_vec_4_init+0xe>
    }
}
 800ee40:	bf00      	nop
 800ee42:	bf00      	nop
 800ee44:	3710      	adds	r7, #16
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <sqisign_gen_ibz_vec_4_finalize>:
void
ibz_vec_4_finalize(ibz_vec_4_t *vec)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b084      	sub	sp, #16
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800ee52:	2300      	movs	r3, #0
 800ee54:	60fb      	str	r3, [r7, #12]
 800ee56:	e00c      	b.n	800ee72 <sqisign_gen_ibz_vec_4_finalize+0x28>
        ibz_finalize(&(*vec)[i]);
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	4413      	add	r3, r2
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	4413      	add	r3, r2
 800ee66:	4618      	mov	r0, r3
 800ee68:	f00e f8d8 	bl	801d01c <sqisign_gen_ibz_finalize>
    for (int i = 0; i < 4; i++) {
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	ddef      	ble.n	800ee58 <sqisign_gen_ibz_vec_4_finalize+0xe>
    }
}
 800ee78:	bf00      	nop
 800ee7a:	bf00      	nop
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <sqisign_gen_ibz_mat_2x2_init>:

void
ibz_mat_2x2_init(ibz_mat_2x2_t *mat)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b084      	sub	sp, #16
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 2; i++) {
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60fb      	str	r3, [r7, #12]
 800ee8e:	e01c      	b.n	800eeca <sqisign_gen_ibz_mat_2x2_init+0x48>
        for (int j = 0; j < 2; j++) {
 800ee90:	2300      	movs	r3, #0
 800ee92:	60bb      	str	r3, [r7, #8]
 800ee94:	e013      	b.n	800eebe <sqisign_gen_ibz_mat_2x2_init+0x3c>
            ibz_init(&(*mat)[i][j]);
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	461a      	mov	r2, r3
 800ee9a:	0052      	lsls	r2, r2, #1
 800ee9c:	441a      	add	r2, r3
 800ee9e:	0093      	lsls	r3, r2, #2
 800eea0:	461a      	mov	r2, r3
 800eea2:	68f9      	ldr	r1, [r7, #12]
 800eea4:	460b      	mov	r3, r1
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	440b      	add	r3, r1
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	4413      	add	r3, r2
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f00e f8a7 	bl	801d006 <sqisign_gen_ibz_init>
        for (int j = 0; j < 2; j++) {
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	3301      	adds	r3, #1
 800eebc:	60bb      	str	r3, [r7, #8]
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	dde8      	ble.n	800ee96 <sqisign_gen_ibz_mat_2x2_init+0x14>
    for (int i = 0; i < 2; i++) {
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	3301      	adds	r3, #1
 800eec8:	60fb      	str	r3, [r7, #12]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	dddf      	ble.n	800ee90 <sqisign_gen_ibz_mat_2x2_init+0xe>
        }
    }
}
 800eed0:	bf00      	nop
 800eed2:	bf00      	nop
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <sqisign_gen_ibz_mat_2x2_finalize>:
void
ibz_mat_2x2_finalize(ibz_mat_2x2_t *mat)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b084      	sub	sp, #16
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 2; i++) {
 800eee2:	2300      	movs	r3, #0
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	e01c      	b.n	800ef22 <sqisign_gen_ibz_mat_2x2_finalize+0x48>
        for (int j = 0; j < 2; j++) {
 800eee8:	2300      	movs	r3, #0
 800eeea:	60bb      	str	r3, [r7, #8]
 800eeec:	e013      	b.n	800ef16 <sqisign_gen_ibz_mat_2x2_finalize+0x3c>
            ibz_finalize(&(*mat)[i][j]);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	461a      	mov	r2, r3
 800eef2:	0052      	lsls	r2, r2, #1
 800eef4:	441a      	add	r2, r3
 800eef6:	0093      	lsls	r3, r2, #2
 800eef8:	461a      	mov	r2, r3
 800eefa:	68f9      	ldr	r1, [r7, #12]
 800eefc:	460b      	mov	r3, r1
 800eefe:	005b      	lsls	r3, r3, #1
 800ef00:	440b      	add	r3, r1
 800ef02:	00db      	lsls	r3, r3, #3
 800ef04:	4413      	add	r3, r2
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	4413      	add	r3, r2
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f00e f886 	bl	801d01c <sqisign_gen_ibz_finalize>
        for (int j = 0; j < 2; j++) {
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	3301      	adds	r3, #1
 800ef14:	60bb      	str	r3, [r7, #8]
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	dde8      	ble.n	800eeee <sqisign_gen_ibz_mat_2x2_finalize+0x14>
    for (int i = 0; i < 2; i++) {
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	60fb      	str	r3, [r7, #12]
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	dddf      	ble.n	800eee8 <sqisign_gen_ibz_mat_2x2_finalize+0xe>
        }
    }
}
 800ef28:	bf00      	nop
 800ef2a:	bf00      	nop
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <sqisign_gen_ibz_mat_4x4_init>:

void
ibz_mat_4x4_init(ibz_mat_4x4_t *mat)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	e01c      	b.n	800ef7a <sqisign_gen_ibz_mat_4x4_init+0x48>
        for (int j = 0; j < 4; j++) {
 800ef40:	2300      	movs	r3, #0
 800ef42:	60bb      	str	r3, [r7, #8]
 800ef44:	e013      	b.n	800ef6e <sqisign_gen_ibz_mat_4x4_init+0x3c>
            ibz_init(&(*mat)[i][j]);
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	0052      	lsls	r2, r2, #1
 800ef4c:	441a      	add	r2, r3
 800ef4e:	0093      	lsls	r3, r2, #2
 800ef50:	461a      	mov	r2, r3
 800ef52:	68f9      	ldr	r1, [r7, #12]
 800ef54:	460b      	mov	r3, r1
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	440b      	add	r3, r1
 800ef5a:	011b      	lsls	r3, r3, #4
 800ef5c:	4413      	add	r3, r2
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	4413      	add	r3, r2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f00e f84f 	bl	801d006 <sqisign_gen_ibz_init>
        for (int j = 0; j < 4; j++) {
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	60bb      	str	r3, [r7, #8]
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	dde8      	ble.n	800ef46 <sqisign_gen_ibz_mat_4x4_init+0x14>
    for (int i = 0; i < 4; i++) {
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	3301      	adds	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b03      	cmp	r3, #3
 800ef7e:	dddf      	ble.n	800ef40 <sqisign_gen_ibz_mat_4x4_init+0xe>
        }
    }
}
 800ef80:	bf00      	nop
 800ef82:	bf00      	nop
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <sqisign_gen_ibz_mat_4x4_finalize>:
void
ibz_mat_4x4_finalize(ibz_mat_4x4_t *mat)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800ef92:	2300      	movs	r3, #0
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	e01c      	b.n	800efd2 <sqisign_gen_ibz_mat_4x4_finalize+0x48>
        for (int j = 0; j < 4; j++) {
 800ef98:	2300      	movs	r3, #0
 800ef9a:	60bb      	str	r3, [r7, #8]
 800ef9c:	e013      	b.n	800efc6 <sqisign_gen_ibz_mat_4x4_finalize+0x3c>
            ibz_finalize(&(*mat)[i][j]);
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	461a      	mov	r2, r3
 800efa2:	0052      	lsls	r2, r2, #1
 800efa4:	441a      	add	r2, r3
 800efa6:	0093      	lsls	r3, r2, #2
 800efa8:	461a      	mov	r2, r3
 800efaa:	68f9      	ldr	r1, [r7, #12]
 800efac:	460b      	mov	r3, r1
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	440b      	add	r3, r1
 800efb2:	011b      	lsls	r3, r3, #4
 800efb4:	4413      	add	r3, r2
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	4413      	add	r3, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f00e f82e 	bl	801d01c <sqisign_gen_ibz_finalize>
        for (int j = 0; j < 4; j++) {
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	3301      	adds	r3, #1
 800efc4:	60bb      	str	r3, [r7, #8]
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	2b03      	cmp	r3, #3
 800efca:	dde8      	ble.n	800ef9e <sqisign_gen_ibz_mat_4x4_finalize+0x14>
    for (int i = 0; i < 4; i++) {
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3301      	adds	r3, #1
 800efd0:	60fb      	str	r3, [r7, #12]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2b03      	cmp	r3, #3
 800efd6:	dddf      	ble.n	800ef98 <sqisign_gen_ibz_mat_4x4_finalize+0xe>
        }
    }
}
 800efd8:	bf00      	nop
 800efda:	bf00      	nop
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <sqisign_gen_quat_lattice_init>:

void
quat_lattice_init(quat_lattice_t *lat)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b082      	sub	sp, #8
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
    ibz_mat_4x4_init(&(*lat).basis);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	330c      	adds	r3, #12
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ff9f 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_init(&(*lat).denom);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f00e f805 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_set(&(*lat).denom, 1);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2101      	movs	r1, #1
 800f000:	4618      	mov	r0, r3
 800f002:	f00e f92e 	bl	801d262 <sqisign_gen_ibz_set>
}
 800f006:	bf00      	nop
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <sqisign_gen_quat_lattice_finalize>:
void
quat_lattice_finalize(quat_lattice_t *lat)
{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b082      	sub	sp, #8
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
    ibz_finalize(&(*lat).denom);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	f00d ffff 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_mat_4x4_finalize(&(*lat).basis);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	330c      	adds	r3, #12
 800f022:	4618      	mov	r0, r3
 800f024:	f7ff ffb1 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
}
 800f028:	bf00      	nop
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <sqisign_gen_quat_left_ideal_init>:

void
quat_left_ideal_init(quat_left_ideal_t *lideal)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
    quat_lattice_init(&(*lideal).lattice);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7ff ffd1 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    ibz_init(&(*lideal).norm);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	33cc      	adds	r3, #204	@ 0xcc
 800f044:	4618      	mov	r0, r3
 800f046:	f00d ffde 	bl	801d006 <sqisign_gen_ibz_init>
    (*lideal).parent_order = NULL;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 800f052:	bf00      	nop
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <sqisign_gen_quat_left_ideal_finalize>:
void
quat_left_ideal_finalize(quat_left_ideal_t *lideal)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b082      	sub	sp, #8
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
    ibz_finalize(&(*lideal).norm);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	33cc      	adds	r3, #204	@ 0xcc
 800f066:	4618      	mov	r0, r3
 800f068:	f00d ffd8 	bl	801d01c <sqisign_gen_ibz_finalize>
    quat_lattice_finalize(&(*lideal).lattice);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff ffcd 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
}
 800f074:	bf00      	nop
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <KeccakF1600_StatePermute>:
 *
 * Description: The Keccak F1600 Permutation
 *
 * Arguments:   - uint64_t *state: pointer to input/output Keccak state
 **************************************************/
static void KeccakF1600_StatePermute(uint64_t *state) {
 800f07c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f080:	f6ad 3d88 	subw	sp, sp, #2952	@ 0xb88
 800f084:	af00      	add	r7, sp, #0
 800f086:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f08a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f08e:	6018      	str	r0, [r3, #0]
    uint64_t Eka, Eke, Eki, Eko, Eku;
    uint64_t Ema, Eme, Emi, Emo, Emu;
    uint64_t Esa, Ese, Esi, Eso, Esu;

    // copyFromState(A, state)
    Aba = state[0];
 800f090:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f094:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 800f0a2:	e9c1 2300 	strd	r2, r3, [r1]
    Abe = state[1];
 800f0a6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f0aa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f0b4:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 800f0b8:	e9c1 2300 	strd	r2, r3, [r1]
    Abi = state[2];
 800f0bc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f0c0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0ca:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 800f0ce:	e9c1 2300 	strd	r2, r3, [r1]
    Abo = state[3];
 800f0d2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f0d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f0e0:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800f0e4:	e9c1 2300 	strd	r2, r3, [r1]
    Abu = state[4];
 800f0e8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f0ec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0f6:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 800f0fa:	e9c1 2300 	strd	r2, r3, [r1]
    Aga = state[5];
 800f0fe:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f102:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800f10c:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 800f110:	e9c1 2300 	strd	r2, r3, [r1]
    Age = state[6];
 800f114:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f118:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800f122:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 800f126:	e9c1 2300 	strd	r2, r3, [r1]
    Agi = state[7];
 800f12a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f12e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f138:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 800f13c:	e9c1 2300 	strd	r2, r3, [r1]
    Ago = state[8];
 800f140:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f144:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800f14e:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 800f152:	e9c1 2300 	strd	r2, r3, [r1]
    Agu = state[9];
 800f156:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f15a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800f164:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 800f168:	e9c1 2300 	strd	r2, r3, [r1]
    Aka = state[10];
 800f16c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f170:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800f17a:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 800f17e:	e9c1 2300 	strd	r2, r3, [r1]
    Ake = state[11];
 800f182:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f186:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800f190:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 800f194:	e9c1 2300 	strd	r2, r3, [r1]
    Aki = state[12];
 800f198:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f19c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800f1a6:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 800f1aa:	e9c1 2300 	strd	r2, r3, [r1]
    Ako = state[13];
 800f1ae:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f1b2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800f1bc:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 800f1c0:	e9c1 2300 	strd	r2, r3, [r1]
    Aku = state[14];
 800f1c4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f1c8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800f1d2:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 800f1d6:	e9c1 2300 	strd	r2, r3, [r1]
    Ama = state[15];
 800f1da:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f1de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800f1e8:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 800f1ec:	e9c1 2300 	strd	r2, r3, [r1]
    Ame = state[16];
 800f1f0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f1f4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800f1fe:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 800f202:	e9c1 2300 	strd	r2, r3, [r1]
    Ami = state[17];
 800f206:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f20a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800f214:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 800f218:	e9c1 2300 	strd	r2, r3, [r1]
    Amo = state[18];
 800f21c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f220:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800f22a:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 800f22e:	e9c1 2300 	strd	r2, r3, [r1]
    Amu = state[19];
 800f232:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f236:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800f240:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 800f244:	e9c1 2300 	strd	r2, r3, [r1]
    Asa = state[20];
 800f248:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f24c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800f256:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 800f25a:	e9c1 2300 	strd	r2, r3, [r1]
    Ase = state[21];
 800f25e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f262:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 800f26c:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 800f270:	e9c1 2300 	strd	r2, r3, [r1]
    Asi = state[22];
 800f274:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f278:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800f282:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 800f286:	e9c1 2300 	strd	r2, r3, [r1]
    Aso = state[23];
 800f28a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f28e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800f298:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 800f29c:	e9c1 2300 	strd	r2, r3, [r1]
    Asu = state[24];
 800f2a0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800f2a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 800f2ae:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 800f2b2:	e9c1 2300 	strd	r2, r3, [r1]

    for (round = 0; round < NROUNDS; round += 2) {
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 800f2bc:	f002 bdf7 	b.w	8011eae <KeccakF1600_StatePermute+0x2e32>
        //    prepareTheta
        BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
 800f2c0:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800f2c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2c8:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	ea80 0602 	eor.w	r6, r0, r2
 800f2d4:	f8c7 6990 	str.w	r6, [r7, #2448]	@ 0x990
 800f2d8:	404b      	eors	r3, r1
 800f2da:	f8c7 3994 	str.w	r3, [r7, #2452]	@ 0x994
 800f2de:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e6:	f8d7 1990 	ldr.w	r1, [r7, #2448]	@ 0x990
 800f2ea:	4051      	eors	r1, r2
 800f2ec:	f8c7 1988 	str.w	r1, [r7, #2440]	@ 0x988
 800f2f0:	f8d7 1994 	ldr.w	r1, [r7, #2452]	@ 0x994
 800f2f4:	404b      	eors	r3, r1
 800f2f6:	f8c7 398c 	str.w	r3, [r7, #2444]	@ 0x98c
 800f2fa:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 800f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f302:	f8d7 1988 	ldr.w	r1, [r7, #2440]	@ 0x988
 800f306:	4051      	eors	r1, r2
 800f308:	f8c7 1980 	str.w	r1, [r7, #2432]	@ 0x980
 800f30c:	f8d7 198c 	ldr.w	r1, [r7, #2444]	@ 0x98c
 800f310:	404b      	eors	r3, r1
 800f312:	f8c7 3984 	str.w	r3, [r7, #2436]	@ 0x984
 800f316:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 800f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31e:	f8d7 1980 	ldr.w	r1, [r7, #2432]	@ 0x980
 800f322:	4051      	eors	r1, r2
 800f324:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 800f328:	f8d7 1984 	ldr.w	r1, [r7, #2436]	@ 0x984
 800f32c:	404b      	eors	r3, r1
 800f32e:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 800f332:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800f336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33a:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800f33e:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
 800f342:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800f346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f34a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	ea80 0602 	eor.w	r6, r0, r2
 800f356:	f8c7 6978 	str.w	r6, [r7, #2424]	@ 0x978
 800f35a:	404b      	eors	r3, r1
 800f35c:	f8c7 397c 	str.w	r3, [r7, #2428]	@ 0x97c
 800f360:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 800f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f368:	f8d7 1978 	ldr.w	r1, [r7, #2424]	@ 0x978
 800f36c:	4051      	eors	r1, r2
 800f36e:	f8c7 1970 	str.w	r1, [r7, #2416]	@ 0x970
 800f372:	f8d7 197c 	ldr.w	r1, [r7, #2428]	@ 0x97c
 800f376:	404b      	eors	r3, r1
 800f378:	f8c7 3974 	str.w	r3, [r7, #2420]	@ 0x974
 800f37c:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 800f380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f384:	f8d7 1970 	ldr.w	r1, [r7, #2416]	@ 0x970
 800f388:	4051      	eors	r1, r2
 800f38a:	f8c7 1968 	str.w	r1, [r7, #2408]	@ 0x968
 800f38e:	f8d7 1974 	ldr.w	r1, [r7, #2420]	@ 0x974
 800f392:	404b      	eors	r3, r1
 800f394:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 800f398:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 800f39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a0:	f8d7 1968 	ldr.w	r1, [r7, #2408]	@ 0x968
 800f3a4:	4051      	eors	r1, r2
 800f3a6:	f8c7 1540 	str.w	r1, [r7, #1344]	@ 0x540
 800f3aa:	f8d7 196c 	ldr.w	r1, [r7, #2412]	@ 0x96c
 800f3ae:	404b      	eors	r3, r1
 800f3b0:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 800f3b4:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800f3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3bc:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800f3c0:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
 800f3c4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 800f3c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3cc:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	ea80 0602 	eor.w	r6, r0, r2
 800f3d8:	f8c7 6960 	str.w	r6, [r7, #2400]	@ 0x960
 800f3dc:	404b      	eors	r3, r1
 800f3de:	f8c7 3964 	str.w	r3, [r7, #2404]	@ 0x964
 800f3e2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ea:	f8d7 1960 	ldr.w	r1, [r7, #2400]	@ 0x960
 800f3ee:	4051      	eors	r1, r2
 800f3f0:	f8c7 1958 	str.w	r1, [r7, #2392]	@ 0x958
 800f3f4:	f8d7 1964 	ldr.w	r1, [r7, #2404]	@ 0x964
 800f3f8:	404b      	eors	r3, r1
 800f3fa:	f8c7 395c 	str.w	r3, [r7, #2396]	@ 0x95c
 800f3fe:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 800f402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f406:	f8d7 1958 	ldr.w	r1, [r7, #2392]	@ 0x958
 800f40a:	4051      	eors	r1, r2
 800f40c:	f8c7 1950 	str.w	r1, [r7, #2384]	@ 0x950
 800f410:	f8d7 195c 	ldr.w	r1, [r7, #2396]	@ 0x95c
 800f414:	404b      	eors	r3, r1
 800f416:	f8c7 3954 	str.w	r3, [r7, #2388]	@ 0x954
 800f41a:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 800f41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f422:	f8d7 1950 	ldr.w	r1, [r7, #2384]	@ 0x950
 800f426:	4051      	eors	r1, r2
 800f428:	f8c7 1538 	str.w	r1, [r7, #1336]	@ 0x538
 800f42c:	f8d7 1954 	ldr.w	r1, [r7, #2388]	@ 0x954
 800f430:	404b      	eors	r3, r1
 800f432:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 800f436:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 800f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43e:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800f442:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 800f446:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800f44a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f44e:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f456:	ea80 0602 	eor.w	r6, r0, r2
 800f45a:	f8c7 6948 	str.w	r6, [r7, #2376]	@ 0x948
 800f45e:	404b      	eors	r3, r1
 800f460:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 800f464:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	f8d7 1948 	ldr.w	r1, [r7, #2376]	@ 0x948
 800f470:	4051      	eors	r1, r2
 800f472:	f8c7 1940 	str.w	r1, [r7, #2368]	@ 0x940
 800f476:	f8d7 194c 	ldr.w	r1, [r7, #2380]	@ 0x94c
 800f47a:	404b      	eors	r3, r1
 800f47c:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 800f480:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	f8d7 1940 	ldr.w	r1, [r7, #2368]	@ 0x940
 800f48c:	4051      	eors	r1, r2
 800f48e:	f8c7 1938 	str.w	r1, [r7, #2360]	@ 0x938
 800f492:	f8d7 1944 	ldr.w	r1, [r7, #2372]	@ 0x944
 800f496:	404b      	eors	r3, r1
 800f498:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 800f49c:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 800f4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a4:	f8d7 1938 	ldr.w	r1, [r7, #2360]	@ 0x938
 800f4a8:	4051      	eors	r1, r2
 800f4aa:	f8c7 1530 	str.w	r1, [r7, #1328]	@ 0x530
 800f4ae:	f8d7 193c 	ldr.w	r1, [r7, #2364]	@ 0x93c
 800f4b2:	404b      	eors	r3, r1
 800f4b4:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 800f4b8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800f4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c0:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800f4c4:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 800f4c8:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800f4cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4d0:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 800f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d8:	ea80 0602 	eor.w	r6, r0, r2
 800f4dc:	f8c7 6930 	str.w	r6, [r7, #2352]	@ 0x930
 800f4e0:	404b      	eors	r3, r1
 800f4e2:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 800f4e6:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	f8d7 1930 	ldr.w	r1, [r7, #2352]	@ 0x930
 800f4f2:	4051      	eors	r1, r2
 800f4f4:	f8c7 1928 	str.w	r1, [r7, #2344]	@ 0x928
 800f4f8:	f8d7 1934 	ldr.w	r1, [r7, #2356]	@ 0x934
 800f4fc:	404b      	eors	r3, r1
 800f4fe:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 800f502:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 800f506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50a:	f8d7 1928 	ldr.w	r1, [r7, #2344]	@ 0x928
 800f50e:	4051      	eors	r1, r2
 800f510:	f8c7 1920 	str.w	r1, [r7, #2336]	@ 0x920
 800f514:	f8d7 192c 	ldr.w	r1, [r7, #2348]	@ 0x92c
 800f518:	404b      	eors	r3, r1
 800f51a:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 800f51e:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 800f522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f526:	f8d7 1920 	ldr.w	r1, [r7, #2336]	@ 0x920
 800f52a:	4051      	eors	r1, r2
 800f52c:	f8c7 1528 	str.w	r1, [r7, #1320]	@ 0x528
 800f530:	f8d7 1924 	ldr.w	r1, [r7, #2340]	@ 0x924
 800f534:	404b      	eors	r3, r1
 800f536:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 800f53a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800f546:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round  , A, E)
        Da = BCu ^ ROL(BCe, 1);
 800f54a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 800f54e:	0fda      	lsrs	r2, r3, #31
 800f550:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 800f554:	005b      	lsls	r3, r3, #1
 800f556:	4313      	orrs	r3, r2
 800f558:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 800f55c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 800f560:	0fda      	lsrs	r2, r3, #31
 800f562:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 800f566:	005b      	lsls	r3, r3, #1
 800f568:	4313      	orrs	r3, r2
 800f56a:	f8c7 3918 	str.w	r3, [r7, #2328]	@ 0x918
 800f56e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800f572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f576:	f8d7 1918 	ldr.w	r1, [r7, #2328]	@ 0x918
 800f57a:	4051      	eors	r1, r2
 800f57c:	f8c7 1520 	str.w	r1, [r7, #1312]	@ 0x520
 800f580:	f8d7 191c 	ldr.w	r1, [r7, #2332]	@ 0x91c
 800f584:	404b      	eors	r3, r1
 800f586:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 800f58a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 800f596:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 800f59a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 800f59e:	0fda      	lsrs	r2, r3, #31
 800f5a0:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 800f5a4:	005b      	lsls	r3, r3, #1
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	f8c7 3914 	str.w	r3, [r7, #2324]	@ 0x914
 800f5ac:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 800f5b0:	0fda      	lsrs	r2, r3, #31
 800f5b2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 800f5b6:	005b      	lsls	r3, r3, #1
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	f8c7 3910 	str.w	r3, [r7, #2320]	@ 0x910
 800f5be:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800f5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c6:	f8d7 1910 	ldr.w	r1, [r7, #2320]	@ 0x910
 800f5ca:	4051      	eors	r1, r2
 800f5cc:	f8c7 1518 	str.w	r1, [r7, #1304]	@ 0x518
 800f5d0:	f8d7 1914 	ldr.w	r1, [r7, #2324]	@ 0x914
 800f5d4:	404b      	eors	r3, r1
 800f5d6:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 800f5da:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e2:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 800f5e6:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 800f5ea:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 800f5ee:	0fda      	lsrs	r2, r3, #31
 800f5f0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c
 800f5fc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 800f600:	0fda      	lsrs	r2, r3, #31
 800f602:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 800f606:	005b      	lsls	r3, r3, #1
 800f608:	4313      	orrs	r3, r2
 800f60a:	f8c7 3908 	str.w	r3, [r7, #2312]	@ 0x908
 800f60e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800f612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f616:	f8d7 1908 	ldr.w	r1, [r7, #2312]	@ 0x908
 800f61a:	4051      	eors	r1, r2
 800f61c:	f8c7 1510 	str.w	r1, [r7, #1296]	@ 0x510
 800f620:	f8d7 190c 	ldr.w	r1, [r7, #2316]	@ 0x90c
 800f624:	404b      	eors	r3, r1
 800f626:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 800f62a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 800f636:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 800f63a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 800f63e:	0fda      	lsrs	r2, r3, #31
 800f640:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	4313      	orrs	r3, r2
 800f648:	f8c7 3904 	str.w	r3, [r7, #2308]	@ 0x904
 800f64c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 800f650:	0fda      	lsrs	r2, r3, #31
 800f652:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 800f656:	005b      	lsls	r3, r3, #1
 800f658:	4313      	orrs	r3, r2
 800f65a:	f8c7 3900 	str.w	r3, [r7, #2304]	@ 0x900
 800f65e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	f8d7 1900 	ldr.w	r1, [r7, #2304]	@ 0x900
 800f66a:	4051      	eors	r1, r2
 800f66c:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 800f670:	f8d7 1904 	ldr.w	r1, [r7, #2308]	@ 0x904
 800f674:	404b      	eors	r3, r1
 800f676:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 800f67a:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 800f67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f682:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 800f686:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 800f68a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 800f68e:	0fda      	lsrs	r2, r3, #31
 800f690:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	4313      	orrs	r3, r2
 800f698:	f8c7 38fc 	str.w	r3, [r7, #2300]	@ 0x8fc
 800f69c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 800f6a0:	0fda      	lsrs	r2, r3, #31
 800f6a2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 800f6a6:	005b      	lsls	r3, r3, #1
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	f8c7 38f8 	str.w	r3, [r7, #2296]	@ 0x8f8
 800f6ae:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	@ 0x8f8
 800f6ba:	4051      	eors	r1, r2
 800f6bc:	f8c7 1500 	str.w	r1, [r7, #1280]	@ 0x500
 800f6c0:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	@ 0x8fc
 800f6c4:	404b      	eors	r3, r1
 800f6c6:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 800f6ca:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800f6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d2:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 800f6d6:	e9c1 2300 	strd	r2, r3, [r1]

        Aba ^= Da;
 800f6da:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800f6de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6e2:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	ea80 0602 	eor.w	r6, r0, r2
 800f6ee:	f8c7 64f8 	str.w	r6, [r7, #1272]	@ 0x4f8
 800f6f2:	404b      	eors	r3, r1
 800f6f4:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 800f6f8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800f6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f700:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 800f704:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Aba;
 800f708:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800f70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f710:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800f714:	e9c1 2300 	strd	r2, r3, [r1]
        Age ^= De;
 800f718:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800f71c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f720:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	ea80 0602 	eor.w	r6, r0, r2
 800f72c:	f8c7 64f0 	str.w	r6, [r7, #1264]	@ 0x4f0
 800f730:	404b      	eors	r3, r1
 800f732:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 800f736:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73e:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 800f742:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Age, 44);
 800f746:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 800f74a:	031a      	lsls	r2, r3, #12
 800f74c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 800f750:	0d1b      	lsrs	r3, r3, #20
 800f752:	4313      	orrs	r3, r2
 800f754:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 800f758:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 800f75c:	031a      	lsls	r2, r3, #12
 800f75e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 800f762:	0d1b      	lsrs	r3, r3, #20
 800f764:	4313      	orrs	r3, r2
 800f766:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 800f76a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f772:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800f776:	e9c1 2300 	strd	r2, r3, [r1]
        Aki ^= Di;
 800f77a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800f77e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f782:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800f786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78a:	ea80 0602 	eor.w	r6, r0, r2
 800f78e:	f8c7 64e0 	str.w	r6, [r7, #1248]	@ 0x4e0
 800f792:	404b      	eors	r3, r1
 800f794:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 800f798:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800f79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a0:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 800f7a4:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aki, 43);
 800f7a8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 800f7ac:	02da      	lsls	r2, r3, #11
 800f7ae:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 800f7b2:	0d5b      	lsrs	r3, r3, #21
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 800f7ba:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 800f7be:	02da      	lsls	r2, r3, #11
 800f7c0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 800f7c4:	0d5b      	lsrs	r3, r3, #21
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 800f7cc:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800f7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d4:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800f7d8:	e9c1 2300 	strd	r2, r3, [r1]
        Amo ^= Do;
 800f7dc:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 800f7e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7e4:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	ea80 0602 	eor.w	r6, r0, r2
 800f7f0:	f8c7 64d0 	str.w	r6, [r7, #1232]	@ 0x4d0
 800f7f4:	404b      	eors	r3, r1
 800f7f6:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800f7fa:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f802:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 800f806:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amo, 21);
 800f80a:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 800f80e:	0ada      	lsrs	r2, r3, #11
 800f810:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 800f814:	055b      	lsls	r3, r3, #21
 800f816:	4313      	orrs	r3, r2
 800f818:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 800f81c:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 800f820:	0ada      	lsrs	r2, r3, #11
 800f822:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 800f826:	055b      	lsls	r3, r3, #21
 800f828:	4313      	orrs	r3, r2
 800f82a:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 800f82e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f836:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800f83a:	e9c1 2300 	strd	r2, r3, [r1]
        Asu ^= Du;
 800f83e:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 800f842:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f846:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	ea80 0602 	eor.w	r6, r0, r2
 800f852:	f8c7 64c0 	str.w	r6, [r7, #1216]	@ 0x4c0
 800f856:	404b      	eors	r3, r1
 800f858:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 800f85c:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800f860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f864:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 800f868:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asu, 14);
 800f86c:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 800f870:	0c9a      	lsrs	r2, r3, #18
 800f872:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 800f876:	039b      	lsls	r3, r3, #14
 800f878:	4313      	orrs	r3, r2
 800f87a:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 800f87e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 800f882:	0c9a      	lsrs	r2, r3, #18
 800f884:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 800f888:	039b      	lsls	r3, r3, #14
 800f88a:	4313      	orrs	r3, r2
 800f88c:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
 800f890:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f898:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800f89c:	e9c1 2300 	strd	r2, r3, [r1]
        Eba = BCa ^ ((~BCe) & BCi);
 800f8a0:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	43d1      	mvns	r1, r2
 800f8aa:	f8c7 18f0 	str.w	r1, [r7, #2288]	@ 0x8f0
 800f8ae:	43db      	mvns	r3, r3
 800f8b0:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 800f8b4:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	@ 0x8f0
 800f8c0:	4011      	ands	r1, r2
 800f8c2:	f8c7 18e8 	str.w	r1, [r7, #2280]	@ 0x8e8
 800f8c6:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	@ 0x8f4
 800f8ca:	400b      	ands	r3, r1
 800f8cc:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 800f8d0:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800f8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d8:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	@ 0x8e8
 800f8dc:	4051      	eors	r1, r2
 800f8de:	f8c7 14b0 	str.w	r1, [r7, #1200]	@ 0x4b0
 800f8e2:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	@ 0x8ec
 800f8e6:	404b      	eors	r3, r1
 800f8e8:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 800f8ec:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 800f8f8:	e9c1 2300 	strd	r2, r3, [r1]
        Eba ^= KeccakF_RoundConstants[round];
 800f8fc:	4afd      	ldr	r2, [pc, #1012]	@ (800fcf4 <KeccakF1600_StatePermute+0xc78>)
 800f8fe:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 800f902:	00db      	lsls	r3, r3, #3
 800f904:	4413      	add	r3, r2
 800f906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f90a:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	ea82 0600 	eor.w	r6, r2, r0
 800f916:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8
 800f91a:	404b      	eors	r3, r1
 800f91c:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 800f920:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f928:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 800f92c:	e9c1 2300 	strd	r2, r3, [r1]
        Ebe = BCe ^ ((~BCi) & BCo);
 800f930:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	43d1      	mvns	r1, r2
 800f93a:	f8c7 18e0 	str.w	r1, [r7, #2272]	@ 0x8e0
 800f93e:	43db      	mvns	r3, r3
 800f940:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
 800f944:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800f948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94c:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	@ 0x8e0
 800f950:	4011      	ands	r1, r2
 800f952:	f8c7 18d8 	str.w	r1, [r7, #2264]	@ 0x8d8
 800f956:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	@ 0x8e4
 800f95a:	400b      	ands	r3, r1
 800f95c:	f8c7 38dc 	str.w	r3, [r7, #2268]	@ 0x8dc
 800f960:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	@ 0x8d8
 800f96c:	4051      	eors	r1, r2
 800f96e:	f8c7 14a0 	str.w	r1, [r7, #1184]	@ 0x4a0
 800f972:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	@ 0x8dc
 800f976:	404b      	eors	r3, r1
 800f978:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 800f97c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800f980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f984:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 800f988:	e9c1 2300 	strd	r2, r3, [r1]
        Ebi = BCi ^ ((~BCo) & BCu);
 800f98c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800f990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f994:	43d1      	mvns	r1, r2
 800f996:	f8c7 18d0 	str.w	r1, [r7, #2256]	@ 0x8d0
 800f99a:	43db      	mvns	r3, r3
 800f99c:	f8c7 38d4 	str.w	r3, [r7, #2260]	@ 0x8d4
 800f9a0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800f9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a8:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	@ 0x8d0
 800f9ac:	4011      	ands	r1, r2
 800f9ae:	f8c7 18c8 	str.w	r1, [r7, #2248]	@ 0x8c8
 800f9b2:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	@ 0x8d4
 800f9b6:	400b      	ands	r3, r1
 800f9b8:	f8c7 38cc 	str.w	r3, [r7, #2252]	@ 0x8cc
 800f9bc:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	@ 0x8c8
 800f9c8:	4051      	eors	r1, r2
 800f9ca:	f8c7 1498 	str.w	r1, [r7, #1176]	@ 0x498
 800f9ce:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	@ 0x8cc
 800f9d2:	404b      	eors	r3, r1
 800f9d4:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 800f9d8:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 800f9e4:	e9c1 2300 	strd	r2, r3, [r1]
        Ebo = BCo ^ ((~BCu) & BCa);
 800f9e8:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f0:	43d1      	mvns	r1, r2
 800f9f2:	f8c7 18c0 	str.w	r1, [r7, #2240]	@ 0x8c0
 800f9f6:	43db      	mvns	r3, r3
 800f9f8:	f8c7 38c4 	str.w	r3, [r7, #2244]	@ 0x8c4
 800f9fc:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800fa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa04:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	@ 0x8c0
 800fa08:	4011      	ands	r1, r2
 800fa0a:	f8c7 18b8 	str.w	r1, [r7, #2232]	@ 0x8b8
 800fa0e:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	@ 0x8c4
 800fa12:	400b      	ands	r3, r1
 800fa14:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
 800fa18:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800fa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa20:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	@ 0x8b8
 800fa24:	4051      	eors	r1, r2
 800fa26:	f8c7 1490 	str.w	r1, [r7, #1168]	@ 0x490
 800fa2a:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	@ 0x8bc
 800fa2e:	404b      	eors	r3, r1
 800fa30:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 800fa34:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3c:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 800fa40:	e9c1 2300 	strd	r2, r3, [r1]
        Ebu = BCu ^ ((~BCa) & BCe);
 800fa44:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800fa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4c:	43d1      	mvns	r1, r2
 800fa4e:	f8c7 18b0 	str.w	r1, [r7, #2224]	@ 0x8b0
 800fa52:	43db      	mvns	r3, r3
 800fa54:	f8c7 38b4 	str.w	r3, [r7, #2228]	@ 0x8b4
 800fa58:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa60:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	@ 0x8b0
 800fa64:	4011      	ands	r1, r2
 800fa66:	f8c7 18a8 	str.w	r1, [r7, #2216]	@ 0x8a8
 800fa6a:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	@ 0x8b4
 800fa6e:	400b      	ands	r3, r1
 800fa70:	f8c7 38ac 	str.w	r3, [r7, #2220]	@ 0x8ac
 800fa74:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800fa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7c:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	@ 0x8a8
 800fa80:	4051      	eors	r1, r2
 800fa82:	f8c7 1488 	str.w	r1, [r7, #1160]	@ 0x488
 800fa86:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	@ 0x8ac
 800fa8a:	404b      	eors	r3, r1
 800fa8c:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 800fa90:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800fa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa98:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 800fa9c:	e9c1 2300 	strd	r2, r3, [r1]

        Abo ^= Do;
 800faa0:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800faa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800faa8:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab0:	ea80 0602 	eor.w	r6, r0, r2
 800fab4:	f8c7 6480 	str.w	r6, [r7, #1152]	@ 0x480
 800fab8:	404b      	eors	r3, r1
 800faba:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 800fabe:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac6:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800faca:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abo, 28);
 800face:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 800fad2:	091a      	lsrs	r2, r3, #4
 800fad4:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800fad8:	071b      	lsls	r3, r3, #28
 800fada:	4313      	orrs	r3, r2
 800fadc:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 800fae0:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800fae4:	091a      	lsrs	r2, r3, #4
 800fae6:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 800faea:	071b      	lsls	r3, r3, #28
 800faec:	4313      	orrs	r3, r2
 800faee:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 800faf2:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800fafe:	e9c1 2300 	strd	r2, r3, [r1]
        Agu ^= Du;
 800fb02:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 800fb06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb0a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	ea80 0602 	eor.w	r6, r0, r2
 800fb16:	f8c7 6470 	str.w	r6, [r7, #1136]	@ 0x470
 800fb1a:	404b      	eors	r3, r1
 800fb1c:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 800fb20:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb28:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 800fb2c:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agu, 20);
 800fb30:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800fb34:	0b1a      	lsrs	r2, r3, #12
 800fb36:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800fb3a:	051b      	lsls	r3, r3, #20
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 800fb42:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800fb46:	0b1a      	lsrs	r2, r3, #12
 800fb48:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800fb4c:	051b      	lsls	r3, r3, #20
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
 800fb54:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800fb60:	e9c1 2300 	strd	r2, r3, [r1]
        Aka ^= Da;
 800fb64:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800fb68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb6c:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	ea80 0602 	eor.w	r6, r0, r2
 800fb78:	f8c7 6460 	str.w	r6, [r7, #1120]	@ 0x460
 800fb7c:	404b      	eors	r3, r1
 800fb7e:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800fb82:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800fb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8a:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 800fb8e:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aka, 3);
 800fb92:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 800fb96:	0f5a      	lsrs	r2, r3, #29
 800fb98:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 800fb9c:	00db      	lsls	r3, r3, #3
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 800fba4:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 800fba8:	0f5a      	lsrs	r2, r3, #29
 800fbaa:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 800fbae:	00db      	lsls	r3, r3, #3
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 800fbb6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbbe:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800fbc2:	e9c1 2300 	strd	r2, r3, [r1]
        Ame ^= De;
 800fbc6:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 800fbca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbce:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	ea80 0602 	eor.w	r6, r0, r2
 800fbda:	f8c7 6450 	str.w	r6, [r7, #1104]	@ 0x450
 800fbde:	404b      	eors	r3, r1
 800fbe0:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 800fbe4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbec:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 800fbf0:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ame, 45);
 800fbf4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 800fbf8:	035a      	lsls	r2, r3, #13
 800fbfa:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 800fbfe:	0cdb      	lsrs	r3, r3, #19
 800fc00:	4313      	orrs	r3, r2
 800fc02:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 800fc06:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 800fc0a:	035a      	lsls	r2, r3, #13
 800fc0c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 800fc10:	0cdb      	lsrs	r3, r3, #19
 800fc12:	4313      	orrs	r3, r2
 800fc14:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 800fc18:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800fc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc20:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800fc24:	e9c1 2300 	strd	r2, r3, [r1]
        Asi ^= Di;
 800fc28:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 800fc2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc30:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	ea80 0602 	eor.w	r6, r0, r2
 800fc3c:	f8c7 6440 	str.w	r6, [r7, #1088]	@ 0x440
 800fc40:	404b      	eors	r3, r1
 800fc42:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 800fc46:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 800fc52:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asi, 61);
 800fc56:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 800fc5a:	075a      	lsls	r2, r3, #29
 800fc5c:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 800fc60:	08db      	lsrs	r3, r3, #3
 800fc62:	4313      	orrs	r3, r2
 800fc64:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 800fc68:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 800fc6c:	075a      	lsls	r2, r3, #29
 800fc6e:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 800fc72:	08db      	lsrs	r3, r3, #3
 800fc74:	4313      	orrs	r3, r2
 800fc76:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 800fc7a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800fc86:	e9c1 2300 	strd	r2, r3, [r1]
        Ega = BCa ^ ((~BCe) & BCi);
 800fc8a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800fc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc92:	43d1      	mvns	r1, r2
 800fc94:	f8c7 18a0 	str.w	r1, [r7, #2208]	@ 0x8a0
 800fc98:	43db      	mvns	r3, r3
 800fc9a:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
 800fc9e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	@ 0x8a0
 800fcaa:	4011      	ands	r1, r2
 800fcac:	f8c7 1898 	str.w	r1, [r7, #2200]	@ 0x898
 800fcb0:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	@ 0x8a4
 800fcb4:	400b      	ands	r3, r1
 800fcb6:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
 800fcba:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800fcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc2:	f8d7 1898 	ldr.w	r1, [r7, #2200]	@ 0x898
 800fcc6:	4051      	eors	r1, r2
 800fcc8:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 800fccc:	f8d7 189c 	ldr.w	r1, [r7, #2204]	@ 0x89c
 800fcd0:	404b      	eors	r3, r1
 800fcd2:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 800fcd6:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800fcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcde:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 800fce2:	e9c1 2300 	strd	r2, r3, [r1]
        Ege = BCe ^ ((~BCi) & BCo);
 800fce6:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcee:	43d1      	mvns	r1, r2
 800fcf0:	e002      	b.n	800fcf8 <KeccakF1600_StatePermute+0xc7c>
 800fcf2:	bf00      	nop
 800fcf4:	0803b2f0 	.word	0x0803b2f0
 800fcf8:	f8c7 1890 	str.w	r1, [r7, #2192]	@ 0x890
 800fcfc:	43db      	mvns	r3, r3
 800fcfe:	f8c7 3894 	str.w	r3, [r7, #2196]	@ 0x894
 800fd02:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	f8d7 1890 	ldr.w	r1, [r7, #2192]	@ 0x890
 800fd0e:	4011      	ands	r1, r2
 800fd10:	f8c7 1888 	str.w	r1, [r7, #2184]	@ 0x888
 800fd14:	f8d7 1894 	ldr.w	r1, [r7, #2196]	@ 0x894
 800fd18:	400b      	ands	r3, r1
 800fd1a:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 800fd1e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd26:	f8d7 1888 	ldr.w	r1, [r7, #2184]	@ 0x888
 800fd2a:	4051      	eors	r1, r2
 800fd2c:	f8c7 1428 	str.w	r1, [r7, #1064]	@ 0x428
 800fd30:	f8d7 188c 	ldr.w	r1, [r7, #2188]	@ 0x88c
 800fd34:	404b      	eors	r3, r1
 800fd36:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800fd3a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd42:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 800fd46:	e9c1 2300 	strd	r2, r3, [r1]
        Egi = BCi ^ ((~BCo) & BCu);
 800fd4a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	43d1      	mvns	r1, r2
 800fd54:	f8c7 1880 	str.w	r1, [r7, #2176]	@ 0x880
 800fd58:	43db      	mvns	r3, r3
 800fd5a:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 800fd5e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	f8d7 1880 	ldr.w	r1, [r7, #2176]	@ 0x880
 800fd6a:	4011      	ands	r1, r2
 800fd6c:	f8c7 1878 	str.w	r1, [r7, #2168]	@ 0x878
 800fd70:	f8d7 1884 	ldr.w	r1, [r7, #2180]	@ 0x884
 800fd74:	400b      	ands	r3, r1
 800fd76:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 800fd7a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd82:	f8d7 1878 	ldr.w	r1, [r7, #2168]	@ 0x878
 800fd86:	4051      	eors	r1, r2
 800fd88:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 800fd8c:	f8d7 187c 	ldr.w	r1, [r7, #2172]	@ 0x87c
 800fd90:	404b      	eors	r3, r1
 800fd92:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 800fd96:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800fd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9e:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 800fda2:	e9c1 2300 	strd	r2, r3, [r1]
        Ego = BCo ^ ((~BCu) & BCa);
 800fda6:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800fdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdae:	43d1      	mvns	r1, r2
 800fdb0:	f8c7 1870 	str.w	r1, [r7, #2160]	@ 0x870
 800fdb4:	43db      	mvns	r3, r3
 800fdb6:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 800fdba:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800fdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc2:	f8d7 1870 	ldr.w	r1, [r7, #2160]	@ 0x870
 800fdc6:	4011      	ands	r1, r2
 800fdc8:	f8c7 1868 	str.w	r1, [r7, #2152]	@ 0x868
 800fdcc:	f8d7 1874 	ldr.w	r1, [r7, #2164]	@ 0x874
 800fdd0:	400b      	ands	r3, r1
 800fdd2:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 800fdd6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	f8d7 1868 	ldr.w	r1, [r7, #2152]	@ 0x868
 800fde2:	4051      	eors	r1, r2
 800fde4:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 800fde8:	f8d7 186c 	ldr.w	r1, [r7, #2156]	@ 0x86c
 800fdec:	404b      	eors	r3, r1
 800fdee:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800fdf2:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 800fdfe:	e9c1 2300 	strd	r2, r3, [r1]
        Egu = BCu ^ ((~BCa) & BCe);
 800fe02:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800fe06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0a:	43d1      	mvns	r1, r2
 800fe0c:	f8c7 1860 	str.w	r1, [r7, #2144]	@ 0x860
 800fe10:	43db      	mvns	r3, r3
 800fe12:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 800fe16:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	f8d7 1860 	ldr.w	r1, [r7, #2144]	@ 0x860
 800fe22:	4011      	ands	r1, r2
 800fe24:	f8c7 1858 	str.w	r1, [r7, #2136]	@ 0x858
 800fe28:	f8d7 1864 	ldr.w	r1, [r7, #2148]	@ 0x864
 800fe2c:	400b      	ands	r3, r1
 800fe2e:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
 800fe32:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3a:	f8d7 1858 	ldr.w	r1, [r7, #2136]	@ 0x858
 800fe3e:	4051      	eors	r1, r2
 800fe40:	f8c7 1410 	str.w	r1, [r7, #1040]	@ 0x410
 800fe44:	f8d7 185c 	ldr.w	r1, [r7, #2140]	@ 0x85c
 800fe48:	404b      	eors	r3, r1
 800fe4a:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800fe4e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800fe52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe56:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 800fe5a:	e9c1 2300 	strd	r2, r3, [r1]

        Abe ^= De;
 800fe5e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800fe62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe66:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800fe6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6e:	ea80 0602 	eor.w	r6, r0, r2
 800fe72:	f8c7 6408 	str.w	r6, [r7, #1032]	@ 0x408
 800fe76:	404b      	eors	r3, r1
 800fe78:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800fe7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800fe80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe84:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 800fe88:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abe, 1);
 800fe8c:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 800fe90:	0fda      	lsrs	r2, r3, #31
 800fe92:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 800fe96:	005b      	lsls	r3, r3, #1
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 800fe9e:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 800fea2:	0fda      	lsrs	r2, r3, #31
 800fea4:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 800fea8:	005b      	lsls	r3, r3, #1
 800feaa:	4313      	orrs	r3, r2
 800feac:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 800feb0:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb8:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800febc:	e9c1 2300 	strd	r2, r3, [r1]
        Agi ^= Di;
 800fec0:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 800fec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fec8:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800fecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed0:	ea80 0602 	eor.w	r6, r0, r2
 800fed4:	f8c7 63f8 	str.w	r6, [r7, #1016]	@ 0x3f8
 800fed8:	404b      	eors	r3, r1
 800feda:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 800fede:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 800fee2:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 800fee6:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agi, 6);
 800feea:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 800feee:	0e9a      	lsrs	r2, r3, #26
 800fef0:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800fef4:	019b      	lsls	r3, r3, #6
 800fef6:	4313      	orrs	r3, r2
 800fef8:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 800fefc:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800ff00:	0e9a      	lsrs	r2, r3, #26
 800ff02:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 800ff06:	019b      	lsls	r3, r3, #6
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 800ff0e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 800ff12:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800ff16:	e9c1 2300 	strd	r2, r3, [r1]
        Ako ^= Do;
 800ff1a:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800ff1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff22:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2a:	ea80 0602 	eor.w	r6, r0, r2
 800ff2e:	f8c7 63e8 	str.w	r6, [r7, #1000]	@ 0x3e8
 800ff32:	404b      	eors	r3, r1
 800ff34:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800ff38:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 800ff3c:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 800ff40:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ako, 25);
 800ff44:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 800ff48:	09da      	lsrs	r2, r3, #7
 800ff4a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 800ff4e:	065b      	lsls	r3, r3, #25
 800ff50:	4313      	orrs	r3, r2
 800ff52:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 800ff56:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 800ff5a:	09da      	lsrs	r2, r3, #7
 800ff5c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 800ff60:	065b      	lsls	r3, r3, #25
 800ff62:	4313      	orrs	r3, r2
 800ff64:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 800ff68:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 800ff6c:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800ff70:	e9c1 2300 	strd	r2, r3, [r1]
        Amu ^= Du;
 800ff74:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 800ff78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff7c:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800ff80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff84:	ea80 0602 	eor.w	r6, r0, r2
 800ff88:	f8c7 63d8 	str.w	r6, [r7, #984]	@ 0x3d8
 800ff8c:	404b      	eors	r3, r1
 800ff8e:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800ff92:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 800ff96:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 800ff9a:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amu, 8);
 800ff9e:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 800ffa2:	0e1a      	lsrs	r2, r3, #24
 800ffa4:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 800ffa8:	021b      	lsls	r3, r3, #8
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 800ffb0:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 800ffb4:	0e1a      	lsrs	r2, r3, #24
 800ffb6:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 800ffba:	021b      	lsls	r3, r3, #8
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 800ffc2:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	@ 0x3d0
 800ffc6:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800ffca:	e9c1 2300 	strd	r2, r3, [r1]
        Asa ^= Da;
 800ffce:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 800ffd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffd6:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	ea80 0602 	eor.w	r6, r0, r2
 800ffe2:	f8c7 63c8 	str.w	r6, [r7, #968]	@ 0x3c8
 800ffe6:	404b      	eors	r3, r1
 800ffe8:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800ffec:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 800fff0:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 800fff4:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asa, 18);
 800fff8:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 800fffc:	0b9a      	lsrs	r2, r3, #14
 800fffe:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 8010002:	049b      	lsls	r3, r3, #18
 8010004:	4313      	orrs	r3, r2
 8010006:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 801000a:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 801000e:	0b9a      	lsrs	r2, r3, #14
 8010010:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 8010014:	049b      	lsls	r3, r3, #18
 8010016:	4313      	orrs	r3, r2
 8010018:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 801001c:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8010020:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8010024:	e9c1 2300 	strd	r2, r3, [r1]
        Eka = BCa ^ ((~BCe) & BCi);
 8010028:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 801002c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010030:	43d1      	mvns	r1, r2
 8010032:	f8c7 1850 	str.w	r1, [r7, #2128]	@ 0x850
 8010036:	43db      	mvns	r3, r3
 8010038:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
 801003c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010044:	f8d7 1850 	ldr.w	r1, [r7, #2128]	@ 0x850
 8010048:	4011      	ands	r1, r2
 801004a:	f8c7 1848 	str.w	r1, [r7, #2120]	@ 0x848
 801004e:	f8d7 1854 	ldr.w	r1, [r7, #2132]	@ 0x854
 8010052:	400b      	ands	r3, r1
 8010054:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
 8010058:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	f8d7 1848 	ldr.w	r1, [r7, #2120]	@ 0x848
 8010064:	4051      	eors	r1, r2
 8010066:	f8c7 13b8 	str.w	r1, [r7, #952]	@ 0x3b8
 801006a:	f8d7 184c 	ldr.w	r1, [r7, #2124]	@ 0x84c
 801006e:	404b      	eors	r3, r1
 8010070:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8010074:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 8010078:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 801007c:	e9c1 2300 	strd	r2, r3, [r1]
        Eke = BCe ^ ((~BCi) & BCo);
 8010080:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	43d1      	mvns	r1, r2
 801008a:	f8c7 1840 	str.w	r1, [r7, #2112]	@ 0x840
 801008e:	43db      	mvns	r3, r3
 8010090:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 8010094:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	f8d7 1840 	ldr.w	r1, [r7, #2112]	@ 0x840
 80100a0:	4011      	ands	r1, r2
 80100a2:	f8c7 1838 	str.w	r1, [r7, #2104]	@ 0x838
 80100a6:	f8d7 1844 	ldr.w	r1, [r7, #2116]	@ 0x844
 80100aa:	400b      	ands	r3, r1
 80100ac:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 80100b0:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80100b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b8:	f8d7 1838 	ldr.w	r1, [r7, #2104]	@ 0x838
 80100bc:	4051      	eors	r1, r2
 80100be:	f8c7 13b0 	str.w	r1, [r7, #944]	@ 0x3b0
 80100c2:	f8d7 183c 	ldr.w	r1, [r7, #2108]	@ 0x83c
 80100c6:	404b      	eors	r3, r1
 80100c8:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80100cc:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 80100d0:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 80100d4:	e9c1 2300 	strd	r2, r3, [r1]
        Eki = BCi ^ ((~BCo) & BCu);
 80100d8:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	43d1      	mvns	r1, r2
 80100e2:	f8c7 1830 	str.w	r1, [r7, #2096]	@ 0x830
 80100e6:	43db      	mvns	r3, r3
 80100e8:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 80100ec:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80100f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f4:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 80100f8:	4011      	ands	r1, r2
 80100fa:	f8c7 1828 	str.w	r1, [r7, #2088]	@ 0x828
 80100fe:	f8d7 1834 	ldr.w	r1, [r7, #2100]	@ 0x834
 8010102:	400b      	ands	r3, r1
 8010104:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8010108:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 801010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010110:	f8d7 1828 	ldr.w	r1, [r7, #2088]	@ 0x828
 8010114:	4051      	eors	r1, r2
 8010116:	f8c7 13a8 	str.w	r1, [r7, #936]	@ 0x3a8
 801011a:	f8d7 182c 	ldr.w	r1, [r7, #2092]	@ 0x82c
 801011e:	404b      	eors	r3, r1
 8010120:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8010124:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8010128:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 801012c:	e9c1 2300 	strd	r2, r3, [r1]
        Eko = BCo ^ ((~BCu) & BCa);
 8010130:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8010134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010138:	43d1      	mvns	r1, r2
 801013a:	f8c7 1820 	str.w	r1, [r7, #2080]	@ 0x820
 801013e:	43db      	mvns	r3, r3
 8010140:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8010144:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8010148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014c:	f8d7 1820 	ldr.w	r1, [r7, #2080]	@ 0x820
 8010150:	4011      	ands	r1, r2
 8010152:	f8c7 1818 	str.w	r1, [r7, #2072]	@ 0x818
 8010156:	f8d7 1824 	ldr.w	r1, [r7, #2084]	@ 0x824
 801015a:	400b      	ands	r3, r1
 801015c:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8010160:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010168:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 801016c:	4051      	eors	r1, r2
 801016e:	f8c7 13a0 	str.w	r1, [r7, #928]	@ 0x3a0
 8010172:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 8010176:	404b      	eors	r3, r1
 8010178:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 801017c:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	@ 0x3a0
 8010180:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8010184:	e9c1 2300 	strd	r2, r3, [r1]
        Eku = BCu ^ ((~BCa) & BCe);
 8010188:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 801018c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010190:	43d1      	mvns	r1, r2
 8010192:	f8c7 1810 	str.w	r1, [r7, #2064]	@ 0x810
 8010196:	43db      	mvns	r3, r3
 8010198:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 801019c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80101a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a4:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 80101a8:	4011      	ands	r1, r2
 80101aa:	f8c7 1808 	str.w	r1, [r7, #2056]	@ 0x808
 80101ae:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 80101b2:	400b      	ands	r3, r1
 80101b4:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80101b8:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80101c4:	4051      	eors	r1, r2
 80101c6:	f8c7 1398 	str.w	r1, [r7, #920]	@ 0x398
 80101ca:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 80101ce:	404b      	eors	r3, r1
 80101d0:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 80101d4:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 80101d8:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 80101dc:	e9c1 2300 	strd	r2, r3, [r1]

        Abu ^= Du;
 80101e0:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80101e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101e8:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f0:	ea80 0602 	eor.w	r6, r0, r2
 80101f4:	f8c7 6390 	str.w	r6, [r7, #912]	@ 0x390
 80101f8:	404b      	eors	r3, r1
 80101fa:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80101fe:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	@ 0x390
 8010202:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8010206:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abu, 27);
 801020a:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 801020e:	095a      	lsrs	r2, r3, #5
 8010210:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8010214:	06db      	lsls	r3, r3, #27
 8010216:	4313      	orrs	r3, r2
 8010218:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 801021c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8010220:	095a      	lsrs	r2, r3, #5
 8010222:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 8010226:	06db      	lsls	r3, r3, #27
 8010228:	4313      	orrs	r3, r2
 801022a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 801022e:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8010232:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8010236:	e9c1 2300 	strd	r2, r3, [r1]
        Aga ^= Da;
 801023a:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 801023e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010242:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8010246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024a:	ea80 0602 	eor.w	r6, r0, r2
 801024e:	f8c7 6380 	str.w	r6, [r7, #896]	@ 0x380
 8010252:	404b      	eors	r3, r1
 8010254:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8010258:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	@ 0x380
 801025c:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 8010260:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Aga, 36);
 8010264:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8010268:	011a      	lsls	r2, r3, #4
 801026a:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 801026e:	0f1b      	lsrs	r3, r3, #28
 8010270:	4313      	orrs	r3, r2
 8010272:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8010276:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 801027a:	011a      	lsls	r2, r3, #4
 801027c:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8010280:	0f1b      	lsrs	r3, r3, #28
 8010282:	4313      	orrs	r3, r2
 8010284:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8010288:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 801028c:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8010290:	e9c1 2300 	strd	r2, r3, [r1]
        Ake ^= De;
 8010294:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8010298:	e9d3 0100 	ldrd	r0, r1, [r3]
 801029c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	ea80 0602 	eor.w	r6, r0, r2
 80102a8:	f8c7 6370 	str.w	r6, [r7, #880]	@ 0x370
 80102ac:	404b      	eors	r3, r1
 80102ae:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80102b2:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 80102b6:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 80102ba:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ake, 10);
 80102be:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 80102c2:	0d9a      	lsrs	r2, r3, #22
 80102c4:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 80102c8:	029b      	lsls	r3, r3, #10
 80102ca:	4313      	orrs	r3, r2
 80102cc:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 80102d0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 80102d4:	0d9a      	lsrs	r2, r3, #22
 80102d6:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 80102da:	029b      	lsls	r3, r3, #10
 80102dc:	4313      	orrs	r3, r2
 80102de:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 80102e2:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	@ 0x368
 80102e6:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80102ea:	e9c1 2300 	strd	r2, r3, [r1]
        Ami ^= Di;
 80102ee:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 80102f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102f6:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	ea80 0602 	eor.w	r6, r0, r2
 8010302:	f8c7 6360 	str.w	r6, [r7, #864]	@ 0x360
 8010306:	404b      	eors	r3, r1
 8010308:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 801030c:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	@ 0x360
 8010310:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8010314:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ami, 15);
 8010318:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 801031c:	0c5a      	lsrs	r2, r3, #17
 801031e:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 8010322:	03db      	lsls	r3, r3, #15
 8010324:	4313      	orrs	r3, r2
 8010326:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 801032a:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 801032e:	0c5a      	lsrs	r2, r3, #17
 8010330:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 8010334:	03db      	lsls	r3, r3, #15
 8010336:	4313      	orrs	r3, r2
 8010338:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 801033c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8010340:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8010344:	e9c1 2300 	strd	r2, r3, [r1]
        Aso ^= Do;
 8010348:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 801034c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010350:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8010354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010358:	ea80 0602 	eor.w	r6, r0, r2
 801035c:	f8c7 6350 	str.w	r6, [r7, #848]	@ 0x350
 8010360:	404b      	eors	r3, r1
 8010362:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8010366:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801036a:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 801036e:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Aso, 56);
 8010372:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 8010376:	061a      	lsls	r2, r3, #24
 8010378:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 801037c:	0a1b      	lsrs	r3, r3, #8
 801037e:	4313      	orrs	r3, r2
 8010380:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8010384:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 8010388:	061a      	lsls	r2, r3, #24
 801038a:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 801038e:	0a1b      	lsrs	r3, r3, #8
 8010390:	4313      	orrs	r3, r2
 8010392:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8010396:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801039a:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 801039e:	e9c1 2300 	strd	r2, r3, [r1]
        Ema = BCa ^ ((~BCe) & BCi);
 80103a2:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80103a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103aa:	43d1      	mvns	r1, r2
 80103ac:	f8c7 1800 	str.w	r1, [r7, #2048]	@ 0x800
 80103b0:	43db      	mvns	r3, r3
 80103b2:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 80103b6:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	f8d7 1800 	ldr.w	r1, [r7, #2048]	@ 0x800
 80103c2:	4011      	ands	r1, r2
 80103c4:	f8c7 17f8 	str.w	r1, [r7, #2040]	@ 0x7f8
 80103c8:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 80103cc:	400b      	ands	r3, r1
 80103ce:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 80103d2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80103d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103da:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	@ 0x7f8
 80103de:	4051      	eors	r1, r2
 80103e0:	f8c7 1340 	str.w	r1, [r7, #832]	@ 0x340
 80103e4:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	@ 0x7fc
 80103e8:	404b      	eors	r3, r1
 80103ea:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80103ee:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 80103f2:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 80103f6:	e9c1 2300 	strd	r2, r3, [r1]
        Eme = BCe ^ ((~BCi) & BCo);
 80103fa:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80103fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010402:	43d1      	mvns	r1, r2
 8010404:	f8c7 17f0 	str.w	r1, [r7, #2032]	@ 0x7f0
 8010408:	43db      	mvns	r3, r3
 801040a:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 801040e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010416:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	@ 0x7f0
 801041a:	4011      	ands	r1, r2
 801041c:	f8c7 17e8 	str.w	r1, [r7, #2024]	@ 0x7e8
 8010420:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	@ 0x7f4
 8010424:	400b      	ands	r3, r1
 8010426:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 801042a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	@ 0x7e8
 8010436:	4051      	eors	r1, r2
 8010438:	f8c7 1338 	str.w	r1, [r7, #824]	@ 0x338
 801043c:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8010440:	404b      	eors	r3, r1
 8010442:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8010446:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801044a:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 801044e:	e9c1 2300 	strd	r2, r3, [r1]
        Emi = BCi ^ ((~BCo) & BCu);
 8010452:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	43d1      	mvns	r1, r2
 801045c:	f8c7 17e0 	str.w	r1, [r7, #2016]	@ 0x7e0
 8010460:	43db      	mvns	r3, r3
 8010462:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 8010466:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	@ 0x7e0
 8010472:	4011      	ands	r1, r2
 8010474:	f8c7 17d8 	str.w	r1, [r7, #2008]	@ 0x7d8
 8010478:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	@ 0x7e4
 801047c:	400b      	ands	r3, r1
 801047e:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 8010482:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048a:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	@ 0x7d8
 801048e:	4051      	eors	r1, r2
 8010490:	f8c7 1330 	str.w	r1, [r7, #816]	@ 0x330
 8010494:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	@ 0x7dc
 8010498:	404b      	eors	r3, r1
 801049a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 801049e:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 80104a2:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 80104a6:	e9c1 2300 	strd	r2, r3, [r1]
        Emo = BCo ^ ((~BCu) & BCa);
 80104aa:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80104ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b2:	43d1      	mvns	r1, r2
 80104b4:	f8c7 17d0 	str.w	r1, [r7, #2000]	@ 0x7d0
 80104b8:	43db      	mvns	r3, r3
 80104ba:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 80104be:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80104c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c6:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	@ 0x7d0
 80104ca:	4011      	ands	r1, r2
 80104cc:	f8c7 17c8 	str.w	r1, [r7, #1992]	@ 0x7c8
 80104d0:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	@ 0x7d4
 80104d4:	400b      	ands	r3, r1
 80104d6:	f8c7 37cc 	str.w	r3, [r7, #1996]	@ 0x7cc
 80104da:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	@ 0x7c8
 80104e6:	4051      	eors	r1, r2
 80104e8:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 80104ec:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	@ 0x7cc
 80104f0:	404b      	eors	r3, r1
 80104f2:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 80104f6:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 80104fa:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 80104fe:	e9c1 2300 	strd	r2, r3, [r1]
        Emu = BCu ^ ((~BCa) & BCe);
 8010502:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8010506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050a:	43d1      	mvns	r1, r2
 801050c:	f8c7 17c0 	str.w	r1, [r7, #1984]	@ 0x7c0
 8010510:	43db      	mvns	r3, r3
 8010512:	f8c7 37c4 	str.w	r3, [r7, #1988]	@ 0x7c4
 8010516:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 801051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051e:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	@ 0x7c0
 8010522:	4011      	ands	r1, r2
 8010524:	f8c7 17b8 	str.w	r1, [r7, #1976]	@ 0x7b8
 8010528:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	@ 0x7c4
 801052c:	400b      	ands	r3, r1
 801052e:	f8c7 37bc 	str.w	r3, [r7, #1980]	@ 0x7bc
 8010532:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	@ 0x7b8
 801053e:	4051      	eors	r1, r2
 8010540:	f8c7 1320 	str.w	r1, [r7, #800]	@ 0x320
 8010544:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	@ 0x7bc
 8010548:	404b      	eors	r3, r1
 801054a:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 801054e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8010552:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8010556:	e9c1 2300 	strd	r2, r3, [r1]

        Abi ^= Di;
 801055a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801055e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010562:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8010566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056a:	ea80 0602 	eor.w	r6, r0, r2
 801056e:	f8c7 6318 	str.w	r6, [r7, #792]	@ 0x318
 8010572:	404b      	eors	r3, r1
 8010574:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8010578:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 801057c:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8010580:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abi, 62);
 8010584:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8010588:	079a      	lsls	r2, r3, #30
 801058a:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 801058e:	089b      	lsrs	r3, r3, #2
 8010590:	4313      	orrs	r3, r2
 8010592:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8010596:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 801059a:	079a      	lsls	r2, r3, #30
 801059c:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 80105a0:	089b      	lsrs	r3, r3, #2
 80105a2:	4313      	orrs	r3, r2
 80105a4:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 80105a8:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 80105ac:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80105b0:	e9c1 2300 	strd	r2, r3, [r1]
        Ago ^= Do;
 80105b4:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 80105b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105bc:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	ea80 0602 	eor.w	r6, r0, r2
 80105c8:	f8c7 6308 	str.w	r6, [r7, #776]	@ 0x308
 80105cc:	404b      	eors	r3, r1
 80105ce:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80105d2:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 80105d6:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 80105da:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ago, 55);
 80105de:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 80105e2:	05da      	lsls	r2, r3, #23
 80105e4:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 80105e8:	0a5b      	lsrs	r3, r3, #9
 80105ea:	4313      	orrs	r3, r2
 80105ec:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 80105f0:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 80105f4:	05da      	lsls	r2, r3, #23
 80105f6:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 80105fa:	0a5b      	lsrs	r3, r3, #9
 80105fc:	4313      	orrs	r3, r2
 80105fe:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8010602:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 8010606:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 801060a:	e9c1 2300 	strd	r2, r3, [r1]
        Aku ^= Du;
 801060e:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8010612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010616:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 801061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061e:	ea80 0602 	eor.w	r6, r0, r2
 8010622:	f8c7 62f8 	str.w	r6, [r7, #760]	@ 0x2f8
 8010626:	404b      	eors	r3, r1
 8010628:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801062c:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8010630:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8010634:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aku, 39);
 8010638:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 801063c:	01da      	lsls	r2, r3, #7
 801063e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8010642:	0e5b      	lsrs	r3, r3, #25
 8010644:	4313      	orrs	r3, r2
 8010646:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 801064a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 801064e:	01da      	lsls	r2, r3, #7
 8010650:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8010654:	0e5b      	lsrs	r3, r3, #25
 8010656:	4313      	orrs	r3, r2
 8010658:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 801065c:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8010660:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8010664:	e9c1 2300 	strd	r2, r3, [r1]
        Ama ^= Da;
 8010668:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 801066c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010670:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	ea80 0602 	eor.w	r6, r0, r2
 801067c:	f8c7 62e8 	str.w	r6, [r7, #744]	@ 0x2e8
 8010680:	404b      	eors	r3, r1
 8010682:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8010686:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 801068a:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 801068e:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ama, 41);
 8010692:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 8010696:	025a      	lsls	r2, r3, #9
 8010698:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 801069c:	0ddb      	lsrs	r3, r3, #23
 801069e:	4313      	orrs	r3, r2
 80106a0:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80106a4:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 80106a8:	025a      	lsls	r2, r3, #9
 80106aa:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 80106ae:	0ddb      	lsrs	r3, r3, #23
 80106b0:	4313      	orrs	r3, r2
 80106b2:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80106b6:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80106ba:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80106be:	e9c1 2300 	strd	r2, r3, [r1]
        Ase ^= De;
 80106c2:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 80106c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80106ca:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80106ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d2:	ea80 0602 	eor.w	r6, r0, r2
 80106d6:	f8c7 62d8 	str.w	r6, [r7, #728]	@ 0x2d8
 80106da:	404b      	eors	r3, r1
 80106dc:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 80106e0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 80106e4:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 80106e8:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ase, 2);
 80106ec:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 80106f0:	0f9a      	lsrs	r2, r3, #30
 80106f2:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	4313      	orrs	r3, r2
 80106fa:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 80106fe:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 8010702:	0f9a      	lsrs	r2, r3, #30
 8010704:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	4313      	orrs	r3, r2
 801070c:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8010710:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 8010714:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8010718:	e9c1 2300 	strd	r2, r3, [r1]
        Esa = BCa ^ ((~BCe) & BCi);
 801071c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8010720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010724:	43d1      	mvns	r1, r2
 8010726:	f8c7 17b0 	str.w	r1, [r7, #1968]	@ 0x7b0
 801072a:	43db      	mvns	r3, r3
 801072c:	f8c7 37b4 	str.w	r3, [r7, #1972]	@ 0x7b4
 8010730:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010738:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	@ 0x7b0
 801073c:	4011      	ands	r1, r2
 801073e:	f8c7 17a8 	str.w	r1, [r7, #1960]	@ 0x7a8
 8010742:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	@ 0x7b4
 8010746:	400b      	ands	r3, r1
 8010748:	f8c7 37ac 	str.w	r3, [r7, #1964]	@ 0x7ac
 801074c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8010750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010754:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	@ 0x7a8
 8010758:	4051      	eors	r1, r2
 801075a:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 801075e:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	@ 0x7ac
 8010762:	404b      	eors	r3, r1
 8010764:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8010768:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 801076c:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8010770:	e9c1 2300 	strd	r2, r3, [r1]
        Ese = BCe ^ ((~BCi) & BCo);
 8010774:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077c:	43d1      	mvns	r1, r2
 801077e:	f8c7 17a0 	str.w	r1, [r7, #1952]	@ 0x7a0
 8010782:	43db      	mvns	r3, r3
 8010784:	f8c7 37a4 	str.w	r3, [r7, #1956]	@ 0x7a4
 8010788:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 801078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010790:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	@ 0x7a0
 8010794:	4011      	ands	r1, r2
 8010796:	f8c7 1798 	str.w	r1, [r7, #1944]	@ 0x798
 801079a:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	@ 0x7a4
 801079e:	400b      	ands	r3, r1
 80107a0:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 80107a4:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80107a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ac:	f8d7 1798 	ldr.w	r1, [r7, #1944]	@ 0x798
 80107b0:	4051      	eors	r1, r2
 80107b2:	f8c7 12c0 	str.w	r1, [r7, #704]	@ 0x2c0
 80107b6:	f8d7 179c 	ldr.w	r1, [r7, #1948]	@ 0x79c
 80107ba:	404b      	eors	r3, r1
 80107bc:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80107c0:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80107c4:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 80107c8:	e9c1 2300 	strd	r2, r3, [r1]
        Esi = BCi ^ ((~BCo) & BCu);
 80107cc:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80107d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d4:	43d1      	mvns	r1, r2
 80107d6:	f8c7 1790 	str.w	r1, [r7, #1936]	@ 0x790
 80107da:	43db      	mvns	r3, r3
 80107dc:	f8c7 3794 	str.w	r3, [r7, #1940]	@ 0x794
 80107e0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	f8d7 1790 	ldr.w	r1, [r7, #1936]	@ 0x790
 80107ec:	4011      	ands	r1, r2
 80107ee:	f8c7 1788 	str.w	r1, [r7, #1928]	@ 0x788
 80107f2:	f8d7 1794 	ldr.w	r1, [r7, #1940]	@ 0x794
 80107f6:	400b      	ands	r3, r1
 80107f8:	f8c7 378c 	str.w	r3, [r7, #1932]	@ 0x78c
 80107fc:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010804:	f8d7 1788 	ldr.w	r1, [r7, #1928]	@ 0x788
 8010808:	4051      	eors	r1, r2
 801080a:	f8c7 12b8 	str.w	r1, [r7, #696]	@ 0x2b8
 801080e:	f8d7 178c 	ldr.w	r1, [r7, #1932]	@ 0x78c
 8010812:	404b      	eors	r3, r1
 8010814:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8010818:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 801081c:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8010820:	e9c1 2300 	strd	r2, r3, [r1]
        Eso = BCo ^ ((~BCu) & BCa);
 8010824:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8010828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082c:	43d1      	mvns	r1, r2
 801082e:	f8c7 1780 	str.w	r1, [r7, #1920]	@ 0x780
 8010832:	43db      	mvns	r3, r3
 8010834:	f8c7 3784 	str.w	r3, [r7, #1924]	@ 0x784
 8010838:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 801083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010840:	f8d7 1780 	ldr.w	r1, [r7, #1920]	@ 0x780
 8010844:	4011      	ands	r1, r2
 8010846:	f8c7 1778 	str.w	r1, [r7, #1912]	@ 0x778
 801084a:	f8d7 1784 	ldr.w	r1, [r7, #1924]	@ 0x784
 801084e:	400b      	ands	r3, r1
 8010850:	f8c7 377c 	str.w	r3, [r7, #1916]	@ 0x77c
 8010854:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085c:	f8d7 1778 	ldr.w	r1, [r7, #1912]	@ 0x778
 8010860:	4051      	eors	r1, r2
 8010862:	f8c7 12b0 	str.w	r1, [r7, #688]	@ 0x2b0
 8010866:	f8d7 177c 	ldr.w	r1, [r7, #1916]	@ 0x77c
 801086a:	404b      	eors	r3, r1
 801086c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8010870:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8010874:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 8010878:	e9c1 2300 	strd	r2, r3, [r1]
        Esu = BCu ^ ((~BCa) & BCe);
 801087c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8010880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010884:	43d1      	mvns	r1, r2
 8010886:	f8c7 1770 	str.w	r1, [r7, #1904]	@ 0x770
 801088a:	43db      	mvns	r3, r3
 801088c:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774
 8010890:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8010894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010898:	f8d7 1770 	ldr.w	r1, [r7, #1904]	@ 0x770
 801089c:	4011      	ands	r1, r2
 801089e:	f8c7 1768 	str.w	r1, [r7, #1896]	@ 0x768
 80108a2:	f8d7 1774 	ldr.w	r1, [r7, #1908]	@ 0x774
 80108a6:	400b      	ands	r3, r1
 80108a8:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
 80108ac:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b4:	f8d7 1768 	ldr.w	r1, [r7, #1896]	@ 0x768
 80108b8:	4051      	eors	r1, r2
 80108ba:	f8c7 12a8 	str.w	r1, [r7, #680]	@ 0x2a8
 80108be:	f8d7 176c 	ldr.w	r1, [r7, #1900]	@ 0x76c
 80108c2:	404b      	eors	r3, r1
 80108c4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80108c8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80108cc:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 80108d0:	e9c1 2300 	strd	r2, r3, [r1]

        //    prepareTheta
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 80108d4:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80108d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108dc:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	ea80 0602 	eor.w	r6, r0, r2
 80108e8:	f8c7 6760 	str.w	r6, [r7, #1888]	@ 0x760
 80108ec:	404b      	eors	r3, r1
 80108ee:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 80108f2:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 80108fe:	4051      	eors	r1, r2
 8010900:	f8c7 1758 	str.w	r1, [r7, #1880]	@ 0x758
 8010904:	f8d7 1764 	ldr.w	r1, [r7, #1892]	@ 0x764
 8010908:	404b      	eors	r3, r1
 801090a:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 801090e:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 8010912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010916:	f8d7 1758 	ldr.w	r1, [r7, #1880]	@ 0x758
 801091a:	4051      	eors	r1, r2
 801091c:	f8c7 1750 	str.w	r1, [r7, #1872]	@ 0x750
 8010920:	f8d7 175c 	ldr.w	r1, [r7, #1884]	@ 0x75c
 8010924:	404b      	eors	r3, r1
 8010926:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
 801092a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	f8d7 1750 	ldr.w	r1, [r7, #1872]	@ 0x750
 8010936:	4051      	eors	r1, r2
 8010938:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 801093c:	f8d7 1754 	ldr.w	r1, [r7, #1876]	@ 0x754
 8010940:	404b      	eors	r3, r1
 8010942:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8010946:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 801094a:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 801094e:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 8010952:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8010956:	e9d3 0100 	ldrd	r0, r1, [r3]
 801095a:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	ea80 0602 	eor.w	r6, r0, r2
 8010966:	f8c7 6748 	str.w	r6, [r7, #1864]	@ 0x748
 801096a:	404b      	eors	r3, r1
 801096c:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
 8010970:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	f8d7 1748 	ldr.w	r1, [r7, #1864]	@ 0x748
 801097c:	4051      	eors	r1, r2
 801097e:	f8c7 1740 	str.w	r1, [r7, #1856]	@ 0x740
 8010982:	f8d7 174c 	ldr.w	r1, [r7, #1868]	@ 0x74c
 8010986:	404b      	eors	r3, r1
 8010988:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
 801098c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8010990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010994:	f8d7 1740 	ldr.w	r1, [r7, #1856]	@ 0x740
 8010998:	4051      	eors	r1, r2
 801099a:	f8c7 1738 	str.w	r1, [r7, #1848]	@ 0x738
 801099e:	f8d7 1744 	ldr.w	r1, [r7, #1860]	@ 0x744
 80109a2:	404b      	eors	r3, r1
 80109a4:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
 80109a8:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80109ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b0:	f8d7 1738 	ldr.w	r1, [r7, #1848]	@ 0x738
 80109b4:	4051      	eors	r1, r2
 80109b6:	f8c7 1298 	str.w	r1, [r7, #664]	@ 0x298
 80109ba:	f8d7 173c 	ldr.w	r1, [r7, #1852]	@ 0x73c
 80109be:	404b      	eors	r3, r1
 80109c0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80109c4:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 80109c8:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 80109cc:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
 80109d0:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 80109d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109d8:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 80109dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e0:	ea80 0602 	eor.w	r6, r0, r2
 80109e4:	f8c7 6730 	str.w	r6, [r7, #1840]	@ 0x730
 80109e8:	404b      	eors	r3, r1
 80109ea:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
 80109ee:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	f8d7 1730 	ldr.w	r1, [r7, #1840]	@ 0x730
 80109fa:	4051      	eors	r1, r2
 80109fc:	f8c7 1728 	str.w	r1, [r7, #1832]	@ 0x728
 8010a00:	f8d7 1734 	ldr.w	r1, [r7, #1844]	@ 0x734
 8010a04:	404b      	eors	r3, r1
 8010a06:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 8010a0a:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 8010a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a12:	f8d7 1728 	ldr.w	r1, [r7, #1832]	@ 0x728
 8010a16:	4051      	eors	r1, r2
 8010a18:	f8c7 1720 	str.w	r1, [r7, #1824]	@ 0x720
 8010a1c:	f8d7 172c 	ldr.w	r1, [r7, #1836]	@ 0x72c
 8010a20:	404b      	eors	r3, r1
 8010a22:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 8010a26:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8010a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2e:	f8d7 1720 	ldr.w	r1, [r7, #1824]	@ 0x720
 8010a32:	4051      	eors	r1, r2
 8010a34:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 8010a38:	f8d7 1724 	ldr.w	r1, [r7, #1828]	@ 0x724
 8010a3c:	404b      	eors	r3, r1
 8010a3e:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8010a42:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8010a46:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8010a4a:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
 8010a4e:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8010a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a56:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	ea80 0602 	eor.w	r6, r0, r2
 8010a62:	f8c7 6718 	str.w	r6, [r7, #1816]	@ 0x718
 8010a66:	404b      	eors	r3, r1
 8010a68:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c
 8010a6c:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 8010a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a74:	f8d7 1718 	ldr.w	r1, [r7, #1816]	@ 0x718
 8010a78:	4051      	eors	r1, r2
 8010a7a:	f8c7 1710 	str.w	r1, [r7, #1808]	@ 0x710
 8010a7e:	f8d7 171c 	ldr.w	r1, [r7, #1820]	@ 0x71c
 8010a82:	404b      	eors	r3, r1
 8010a84:	f8c7 3714 	str.w	r3, [r7, #1812]	@ 0x714
 8010a88:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	f8d7 1710 	ldr.w	r1, [r7, #1808]	@ 0x710
 8010a94:	4051      	eors	r1, r2
 8010a96:	f8c7 1708 	str.w	r1, [r7, #1800]	@ 0x708
 8010a9a:	f8d7 1714 	ldr.w	r1, [r7, #1812]	@ 0x714
 8010a9e:	404b      	eors	r3, r1
 8010aa0:	f8c7 370c 	str.w	r3, [r7, #1804]	@ 0x70c
 8010aa4:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8010aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aac:	f8d7 1708 	ldr.w	r1, [r7, #1800]	@ 0x708
 8010ab0:	4051      	eors	r1, r2
 8010ab2:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 8010ab6:	f8d7 170c 	ldr.w	r1, [r7, #1804]	@ 0x70c
 8010aba:	404b      	eors	r3, r1
 8010abc:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8010ac0:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 8010ac4:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8010ac8:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 8010acc:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8010ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ad4:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	ea80 0602 	eor.w	r6, r0, r2
 8010ae0:	f8c7 6700 	str.w	r6, [r7, #1792]	@ 0x700
 8010ae4:	404b      	eors	r3, r1
 8010ae6:	f8c7 3704 	str.w	r3, [r7, #1796]	@ 0x704
 8010aea:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 8010aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af2:	f8d7 1700 	ldr.w	r1, [r7, #1792]	@ 0x700
 8010af6:	4051      	eors	r1, r2
 8010af8:	f8c7 16f8 	str.w	r1, [r7, #1784]	@ 0x6f8
 8010afc:	f8d7 1704 	ldr.w	r1, [r7, #1796]	@ 0x704
 8010b00:	404b      	eors	r3, r1
 8010b02:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
 8010b06:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8010b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0e:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8010b12:	4051      	eors	r1, r2
 8010b14:	f8c7 16f0 	str.w	r1, [r7, #1776]	@ 0x6f0
 8010b18:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 8010b1c:	404b      	eors	r3, r1
 8010b1e:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
 8010b22:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8010b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2a:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8010b2e:	4051      	eors	r1, r2
 8010b30:	f8c7 1280 	str.w	r1, [r7, #640]	@ 0x280
 8010b34:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 8010b38:	404b      	eors	r3, r1
 8010b3a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8010b3e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8010b42:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8010b46:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
        Da = BCu ^ ROL(BCe, 1);
 8010b4a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8010b4e:	0fda      	lsrs	r2, r3, #31
 8010b50:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	4313      	orrs	r3, r2
 8010b58:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 8010b5c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8010b60:	0fda      	lsrs	r2, r3, #31
 8010b62:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	4313      	orrs	r3, r2
 8010b6a:	f8c7 36e8 	str.w	r3, [r7, #1768]	@ 0x6e8
 8010b6e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 8010b7a:	4051      	eors	r1, r2
 8010b7c:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8010b80:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 8010b84:	404b      	eors	r3, r1
 8010b86:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8010b8a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 8010b8e:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 8010b92:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 8010b96:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8010b9a:	0fda      	lsrs	r2, r3, #31
 8010b9c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 8010ba8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8010bac:	0fda      	lsrs	r2, r3, #31
 8010bae:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8010bb2:	005b      	lsls	r3, r3, #1
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
 8010bba:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8010bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc2:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 8010bc6:	4051      	eors	r1, r2
 8010bc8:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
 8010bcc:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 8010bd0:	404b      	eors	r3, r1
 8010bd2:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8010bd6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 8010bda:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 8010bde:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 8010be2:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8010be6:	0fda      	lsrs	r2, r3, #31
 8010be8:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8010bec:	005b      	lsls	r3, r3, #1
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 8010bf4:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8010bf8:	0fda      	lsrs	r2, r3, #31
 8010bfa:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8010bfe:	005b      	lsls	r3, r3, #1
 8010c00:	4313      	orrs	r3, r2
 8010c02:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
 8010c06:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8010c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0e:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	@ 0x6d8
 8010c12:	4051      	eors	r1, r2
 8010c14:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 8010c18:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	@ 0x6dc
 8010c1c:	404b      	eors	r3, r1
 8010c1e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8010c22:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8010c26:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8010c2a:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 8010c2e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8010c32:	0fda      	lsrs	r2, r3, #31
 8010c34:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	f8c7 36d4 	str.w	r3, [r7, #1748]	@ 0x6d4
 8010c40:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8010c44:	0fda      	lsrs	r2, r3, #31
 8010c46:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 8010c52:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	@ 0x6d0
 8010c5e:	4051      	eors	r1, r2
 8010c60:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8010c64:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	@ 0x6d4
 8010c68:	404b      	eors	r3, r1
 8010c6a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8010c6e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 8010c72:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 8010c76:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 8010c7a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8010c7e:	0fda      	lsrs	r2, r3, #31
 8010c80:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	4313      	orrs	r3, r2
 8010c88:	f8c7 36cc 	str.w	r3, [r7, #1740]	@ 0x6cc
 8010c8c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8010c90:	0fda      	lsrs	r2, r3, #31
 8010c92:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8010c96:	005b      	lsls	r3, r3, #1
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 8010c9e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca6:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	@ 0x6c8
 8010caa:	4051      	eors	r1, r2
 8010cac:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 8010cb0:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	@ 0x6cc
 8010cb4:	404b      	eors	r3, r1
 8010cb6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8010cba:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8010cbe:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 8010cc2:	e9c1 2300 	strd	r2, r3, [r1]

        Eba ^= Da;
 8010cc6:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 8010cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010cce:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8010cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd6:	ea80 0602 	eor.w	r6, r0, r2
 8010cda:	f8c7 6250 	str.w	r6, [r7, #592]	@ 0x250
 8010cde:	404b      	eors	r3, r1
 8010ce0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8010ce4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8010ce8:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 8010cec:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Eba;
 8010cf0:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8010cfc:	e9c1 2300 	strd	r2, r3, [r1]
        Ege ^= De;
 8010d00:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 8010d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d08:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8010d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d10:	ea80 0602 	eor.w	r6, r0, r2
 8010d14:	f8c7 6248 	str.w	r6, [r7, #584]	@ 0x248
 8010d18:	404b      	eors	r3, r1
 8010d1a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8010d1e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8010d22:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 8010d26:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ege, 44);
 8010d2a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010d2e:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 8010d32:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010d36:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8010d3a:	6803      	ldr	r3, [r0, #0]
 8010d3c:	031a      	lsls	r2, r3, #12
 8010d3e:	680b      	ldr	r3, [r1, #0]
 8010d40:	0d1b      	lsrs	r3, r3, #20
 8010d42:	4313      	orrs	r3, r2
 8010d44:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8010d48:	680b      	ldr	r3, [r1, #0]
 8010d4a:	031a      	lsls	r2, r3, #12
 8010d4c:	6803      	ldr	r3, [r0, #0]
 8010d4e:	0d1b      	lsrs	r3, r3, #20
 8010d50:	4313      	orrs	r3, r2
 8010d52:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8010d56:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 8010d5a:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8010d5e:	e9c1 2300 	strd	r2, r3, [r1]
        Eki ^= Di;
 8010d62:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 8010d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d6a:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	ea80 0602 	eor.w	r6, r0, r2
 8010d76:	f8c7 6238 	str.w	r6, [r7, #568]	@ 0x238
 8010d7a:	404b      	eors	r3, r1
 8010d7c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8010d80:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8010d84:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 8010d88:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eki, 43);
 8010d8c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010d90:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 8010d94:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010d98:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8010d9c:	6803      	ldr	r3, [r0, #0]
 8010d9e:	02da      	lsls	r2, r3, #11
 8010da0:	680b      	ldr	r3, [r1, #0]
 8010da2:	0d5b      	lsrs	r3, r3, #21
 8010da4:	4313      	orrs	r3, r2
 8010da6:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8010daa:	680b      	ldr	r3, [r1, #0]
 8010dac:	02da      	lsls	r2, r3, #11
 8010dae:	6803      	ldr	r3, [r0, #0]
 8010db0:	0d5b      	lsrs	r3, r3, #21
 8010db2:	4313      	orrs	r3, r2
 8010db4:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8010db8:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 8010dbc:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8010dc0:	e9c1 2300 	strd	r2, r3, [r1]
        Emo ^= Do;
 8010dc4:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8010dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010dcc:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8010dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd4:	ea80 0602 	eor.w	r6, r0, r2
 8010dd8:	f8c7 6228 	str.w	r6, [r7, #552]	@ 0x228
 8010ddc:	404b      	eors	r3, r1
 8010dde:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8010de2:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8010de6:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 8010dea:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emo, 21);
 8010dee:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010df2:	f5a3 70dc 	sub.w	r0, r3, #440	@ 0x1b8
 8010df6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010dfa:	f5a3 71da 	sub.w	r1, r3, #436	@ 0x1b4
 8010dfe:	6803      	ldr	r3, [r0, #0]
 8010e00:	0ada      	lsrs	r2, r3, #11
 8010e02:	680b      	ldr	r3, [r1, #0]
 8010e04:	055b      	lsls	r3, r3, #21
 8010e06:	4313      	orrs	r3, r2
 8010e08:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8010e0c:	680b      	ldr	r3, [r1, #0]
 8010e0e:	0ada      	lsrs	r2, r3, #11
 8010e10:	6803      	ldr	r3, [r0, #0]
 8010e12:	055b      	lsls	r3, r3, #21
 8010e14:	4313      	orrs	r3, r2
 8010e16:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8010e1a:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8010e1e:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8010e22:	e9c1 2300 	strd	r2, r3, [r1]
        Esu ^= Du;
 8010e26:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8010e2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e2e:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8010e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e36:	ea80 0602 	eor.w	r6, r0, r2
 8010e3a:	f8c7 6218 	str.w	r6, [r7, #536]	@ 0x218
 8010e3e:	404b      	eors	r3, r1
 8010e40:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8010e44:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8010e48:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 8010e4c:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esu, 14);
 8010e50:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010e54:	f5a3 70f4 	sub.w	r0, r3, #488	@ 0x1e8
 8010e58:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8010e5c:	f5a3 71f2 	sub.w	r1, r3, #484	@ 0x1e4
 8010e60:	6803      	ldr	r3, [r0, #0]
 8010e62:	0c9a      	lsrs	r2, r3, #18
 8010e64:	680b      	ldr	r3, [r1, #0]
 8010e66:	039b      	lsls	r3, r3, #14
 8010e68:	4313      	orrs	r3, r2
 8010e6a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8010e6e:	680b      	ldr	r3, [r1, #0]
 8010e70:	0c9a      	lsrs	r2, r3, #18
 8010e72:	6803      	ldr	r3, [r0, #0]
 8010e74:	039b      	lsls	r3, r3, #14
 8010e76:	4313      	orrs	r3, r2
 8010e78:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8010e7c:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8010e80:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8010e84:	e9c1 2300 	strd	r2, r3, [r1]
        Aba = BCa ^ ((~BCe) & BCi);
 8010e88:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	43d1      	mvns	r1, r2
 8010e92:	f8c7 16c0 	str.w	r1, [r7, #1728]	@ 0x6c0
 8010e96:	43db      	mvns	r3, r3
 8010e98:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
 8010e9c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea4:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 8010ea8:	4011      	ands	r1, r2
 8010eaa:	f8c7 16b8 	str.w	r1, [r7, #1720]	@ 0x6b8
 8010eae:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	@ 0x6c4
 8010eb2:	400b      	ands	r3, r1
 8010eb4:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 8010eb8:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 8010ec4:	4051      	eors	r1, r2
 8010ec6:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8010eca:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	@ 0x6bc
 8010ece:	404b      	eors	r3, r1
 8010ed0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8010ed4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8010ed8:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8010edc:	e9c1 2300 	strd	r2, r3, [r1]
        Aba ^= KeccakF_RoundConstants[round + 1];
 8010ee0:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	4af4      	ldr	r2, [pc, #976]	@ (80112b8 <KeccakF1600_StatePermute+0x223c>)
 8010ee8:	00db      	lsls	r3, r3, #3
 8010eea:	4413      	add	r3, r2
 8010eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ef0:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8010ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef8:	ea82 0600 	eor.w	r6, r2, r0
 8010efc:	f8c7 6200 	str.w	r6, [r7, #512]	@ 0x200
 8010f00:	404b      	eors	r3, r1
 8010f02:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8010f06:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8010f0a:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8010f0e:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = BCe ^ ((~BCi) & BCo);
 8010f12:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1a:	43d1      	mvns	r1, r2
 8010f1c:	f8c7 16b0 	str.w	r1, [r7, #1712]	@ 0x6b0
 8010f20:	43db      	mvns	r3, r3
 8010f22:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 8010f26:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2e:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	@ 0x6b0
 8010f32:	4011      	ands	r1, r2
 8010f34:	f8c7 16a8 	str.w	r1, [r7, #1704]	@ 0x6a8
 8010f38:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	@ 0x6b4
 8010f3c:	400b      	ands	r3, r1
 8010f3e:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8010f42:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8010f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4a:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	@ 0x6a8
 8010f4e:	4051      	eors	r1, r2
 8010f50:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
 8010f54:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	@ 0x6ac
 8010f58:	404b      	eors	r3, r1
 8010f5a:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8010f5e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8010f62:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8010f66:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = BCi ^ ((~BCo) & BCu);
 8010f6a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	43d1      	mvns	r1, r2
 8010f74:	f8c7 16a0 	str.w	r1, [r7, #1696]	@ 0x6a0
 8010f78:	43db      	mvns	r3, r3
 8010f7a:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 8010f7e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	@ 0x6a0
 8010f8a:	4011      	ands	r1, r2
 8010f8c:	f8c7 1698 	str.w	r1, [r7, #1688]	@ 0x698
 8010f90:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	@ 0x6a4
 8010f94:	400b      	ands	r3, r1
 8010f96:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8010f9a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8010f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa2:	f8d7 1698 	ldr.w	r1, [r7, #1688]	@ 0x698
 8010fa6:	4051      	eors	r1, r2
 8010fa8:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8010fac:	f8d7 169c 	ldr.w	r1, [r7, #1692]	@ 0x69c
 8010fb0:	404b      	eors	r3, r1
 8010fb2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8010fb6:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8010fba:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8010fbe:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = BCo ^ ((~BCu) & BCa);
 8010fc2:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8010fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fca:	43d1      	mvns	r1, r2
 8010fcc:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 8010fd0:	43db      	mvns	r3, r3
 8010fd2:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 8010fd6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8010fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fde:	f8d7 1690 	ldr.w	r1, [r7, #1680]	@ 0x690
 8010fe2:	4011      	ands	r1, r2
 8010fe4:	f8c7 1688 	str.w	r1, [r7, #1672]	@ 0x688
 8010fe8:	f8d7 1694 	ldr.w	r1, [r7, #1684]	@ 0x694
 8010fec:	400b      	ands	r3, r1
 8010fee:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
 8010ff2:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8010ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffa:	f8d7 1688 	ldr.w	r1, [r7, #1672]	@ 0x688
 8010ffe:	4051      	eors	r1, r2
 8011000:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 8011004:	f8d7 168c 	ldr.w	r1, [r7, #1676]	@ 0x68c
 8011008:	404b      	eors	r3, r1
 801100a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 801100e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8011012:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8011016:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = BCu ^ ((~BCa) & BCe);
 801101a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 801101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011022:	43d1      	mvns	r1, r2
 8011024:	f8c7 1680 	str.w	r1, [r7, #1664]	@ 0x680
 8011028:	43db      	mvns	r3, r3
 801102a:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 801102e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011036:	f8d7 1680 	ldr.w	r1, [r7, #1664]	@ 0x680
 801103a:	4011      	ands	r1, r2
 801103c:	f8c7 1678 	str.w	r1, [r7, #1656]	@ 0x678
 8011040:	f8d7 1684 	ldr.w	r1, [r7, #1668]	@ 0x684
 8011044:	400b      	ands	r3, r1
 8011046:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 801104a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	f8d7 1678 	ldr.w	r1, [r7, #1656]	@ 0x678
 8011056:	4051      	eors	r1, r2
 8011058:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 801105c:	f8d7 167c 	ldr.w	r1, [r7, #1660]	@ 0x67c
 8011060:	404b      	eors	r3, r1
 8011062:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8011066:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 801106a:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 801106e:	e9c1 2300 	strd	r2, r3, [r1]

        Ebo ^= Do;
 8011072:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8011076:	e9d3 0100 	ldrd	r0, r1, [r3]
 801107a:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 801107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011082:	ea80 0602 	eor.w	r6, r0, r2
 8011086:	f8c7 61d8 	str.w	r6, [r7, #472]	@ 0x1d8
 801108a:	404b      	eors	r3, r1
 801108c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8011090:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8011094:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 8011098:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebo, 28);
 801109c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80110a0:	f5a3 70a0 	sub.w	r0, r3, #320	@ 0x140
 80110a4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80110a8:	f5a3 719e 	sub.w	r1, r3, #316	@ 0x13c
 80110ac:	6803      	ldr	r3, [r0, #0]
 80110ae:	091a      	lsrs	r2, r3, #4
 80110b0:	680b      	ldr	r3, [r1, #0]
 80110b2:	071b      	lsls	r3, r3, #28
 80110b4:	4313      	orrs	r3, r2
 80110b6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80110ba:	680b      	ldr	r3, [r1, #0]
 80110bc:	091a      	lsrs	r2, r3, #4
 80110be:	6803      	ldr	r3, [r0, #0]
 80110c0:	071b      	lsls	r3, r3, #28
 80110c2:	4313      	orrs	r3, r2
 80110c4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80110c8:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80110cc:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80110d0:	e9c1 2300 	strd	r2, r3, [r1]
        Egu ^= Du;
 80110d4:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80110d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110dc:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	ea80 0602 	eor.w	r6, r0, r2
 80110e8:	f8c7 61c8 	str.w	r6, [r7, #456]	@ 0x1c8
 80110ec:	404b      	eors	r3, r1
 80110ee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80110f2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80110f6:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 80110fa:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egu, 20);
 80110fe:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011102:	f5a3 70b8 	sub.w	r0, r3, #368	@ 0x170
 8011106:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801110a:	f5a3 71b6 	sub.w	r1, r3, #364	@ 0x16c
 801110e:	6803      	ldr	r3, [r0, #0]
 8011110:	0b1a      	lsrs	r2, r3, #12
 8011112:	680b      	ldr	r3, [r1, #0]
 8011114:	051b      	lsls	r3, r3, #20
 8011116:	4313      	orrs	r3, r2
 8011118:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 801111c:	680b      	ldr	r3, [r1, #0]
 801111e:	0b1a      	lsrs	r2, r3, #12
 8011120:	6803      	ldr	r3, [r0, #0]
 8011122:	051b      	lsls	r3, r3, #20
 8011124:	4313      	orrs	r3, r2
 8011126:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801112a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 801112e:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8011132:	e9c1 2300 	strd	r2, r3, [r1]
        Eka ^= Da;
 8011136:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 801113a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801113e:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8011142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011146:	ea80 0602 	eor.w	r6, r0, r2
 801114a:	f8c7 61b8 	str.w	r6, [r7, #440]	@ 0x1b8
 801114e:	404b      	eors	r3, r1
 8011150:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8011154:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8011158:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 801115c:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eka, 3);
 8011160:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011164:	f5a3 70bc 	sub.w	r0, r3, #376	@ 0x178
 8011168:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801116c:	f5a3 71ba 	sub.w	r1, r3, #372	@ 0x174
 8011170:	6803      	ldr	r3, [r0, #0]
 8011172:	0f5a      	lsrs	r2, r3, #29
 8011174:	680b      	ldr	r3, [r1, #0]
 8011176:	00db      	lsls	r3, r3, #3
 8011178:	4313      	orrs	r3, r2
 801117a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 801117e:	680b      	ldr	r3, [r1, #0]
 8011180:	0f5a      	lsrs	r2, r3, #29
 8011182:	6803      	ldr	r3, [r0, #0]
 8011184:	00db      	lsls	r3, r3, #3
 8011186:	4313      	orrs	r3, r2
 8011188:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 801118c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8011190:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8011194:	e9c1 2300 	strd	r2, r3, [r1]
        Eme ^= De;
 8011198:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 801119c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111a0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a8:	ea80 0602 	eor.w	r6, r0, r2
 80111ac:	f8c7 61a8 	str.w	r6, [r7, #424]	@ 0x1a8
 80111b0:	404b      	eors	r3, r1
 80111b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80111b6:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80111ba:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 80111be:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Eme, 45);
 80111c2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80111c6:	f5a3 70d2 	sub.w	r0, r3, #420	@ 0x1a4
 80111ca:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80111ce:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 80111d2:	6803      	ldr	r3, [r0, #0]
 80111d4:	035a      	lsls	r2, r3, #13
 80111d6:	680b      	ldr	r3, [r1, #0]
 80111d8:	0cdb      	lsrs	r3, r3, #19
 80111da:	4313      	orrs	r3, r2
 80111dc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80111e0:	680b      	ldr	r3, [r1, #0]
 80111e2:	035a      	lsls	r2, r3, #13
 80111e4:	6803      	ldr	r3, [r0, #0]
 80111e6:	0cdb      	lsrs	r3, r3, #19
 80111e8:	4313      	orrs	r3, r2
 80111ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80111ee:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80111f2:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80111f6:	e9c1 2300 	strd	r2, r3, [r1]
        Esi ^= Di;
 80111fa:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80111fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011202:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8011206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120a:	ea80 0602 	eor.w	r6, r0, r2
 801120e:	f8c7 6198 	str.w	r6, [r7, #408]	@ 0x198
 8011212:	404b      	eors	r3, r1
 8011214:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8011218:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 801121c:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8011220:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esi, 61);
 8011224:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011228:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 801122c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011230:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 8011234:	6803      	ldr	r3, [r0, #0]
 8011236:	075a      	lsls	r2, r3, #29
 8011238:	680b      	ldr	r3, [r1, #0]
 801123a:	08db      	lsrs	r3, r3, #3
 801123c:	4313      	orrs	r3, r2
 801123e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8011242:	680b      	ldr	r3, [r1, #0]
 8011244:	075a      	lsls	r2, r3, #29
 8011246:	6803      	ldr	r3, [r0, #0]
 8011248:	08db      	lsrs	r3, r3, #3
 801124a:	4313      	orrs	r3, r2
 801124c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8011250:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8011254:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8011258:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = BCa ^ ((~BCe) & BCi);
 801125c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011264:	43d1      	mvns	r1, r2
 8011266:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 801126a:	43db      	mvns	r3, r3
 801126c:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
 8011270:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011278:	f8d7 1670 	ldr.w	r1, [r7, #1648]	@ 0x670
 801127c:	4011      	ands	r1, r2
 801127e:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 8011282:	f8d7 1674 	ldr.w	r1, [r7, #1652]	@ 0x674
 8011286:	400b      	ands	r3, r1
 8011288:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 801128c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011294:	f8d7 1668 	ldr.w	r1, [r7, #1640]	@ 0x668
 8011298:	4051      	eors	r1, r2
 801129a:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 801129e:	f8d7 166c 	ldr.w	r1, [r7, #1644]	@ 0x66c
 80112a2:	404b      	eors	r3, r1
 80112a4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80112a8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80112ac:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 80112b0:	e9c1 2300 	strd	r2, r3, [r1]
 80112b4:	e002      	b.n	80112bc <KeccakF1600_StatePermute+0x2240>
 80112b6:	bf00      	nop
 80112b8:	0803b2f0 	.word	0x0803b2f0
        Age = BCe ^ ((~BCi) & BCo);
 80112bc:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	43d1      	mvns	r1, r2
 80112c6:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 80112ca:	43db      	mvns	r3, r3
 80112cc:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 80112d0:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	f8d7 1660 	ldr.w	r1, [r7, #1632]	@ 0x660
 80112dc:	4011      	ands	r1, r2
 80112de:	f8c7 1658 	str.w	r1, [r7, #1624]	@ 0x658
 80112e2:	f8d7 1664 	ldr.w	r1, [r7, #1636]	@ 0x664
 80112e6:	400b      	ands	r3, r1
 80112e8:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 80112ec:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80112f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f4:	f8d7 1658 	ldr.w	r1, [r7, #1624]	@ 0x658
 80112f8:	4051      	eors	r1, r2
 80112fa:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 80112fe:	f8d7 165c 	ldr.w	r1, [r7, #1628]	@ 0x65c
 8011302:	404b      	eors	r3, r1
 8011304:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8011308:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 801130c:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8011310:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = BCi ^ ((~BCo) & BCu);
 8011314:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	43d1      	mvns	r1, r2
 801131e:	f8c7 1650 	str.w	r1, [r7, #1616]	@ 0x650
 8011322:	43db      	mvns	r3, r3
 8011324:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8011328:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 801132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011330:	f8d7 1650 	ldr.w	r1, [r7, #1616]	@ 0x650
 8011334:	4011      	ands	r1, r2
 8011336:	f8c7 1648 	str.w	r1, [r7, #1608]	@ 0x648
 801133a:	f8d7 1654 	ldr.w	r1, [r7, #1620]	@ 0x654
 801133e:	400b      	ands	r3, r1
 8011340:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8011344:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134c:	f8d7 1648 	ldr.w	r1, [r7, #1608]	@ 0x648
 8011350:	4051      	eors	r1, r2
 8011352:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8011356:	f8d7 164c 	ldr.w	r1, [r7, #1612]	@ 0x64c
 801135a:	404b      	eors	r3, r1
 801135c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8011360:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8011364:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 8011368:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = BCo ^ ((~BCu) & BCa);
 801136c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011374:	43d1      	mvns	r1, r2
 8011376:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 801137a:	43db      	mvns	r3, r3
 801137c:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8011380:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	f8d7 1640 	ldr.w	r1, [r7, #1600]	@ 0x640
 801138c:	4011      	ands	r1, r2
 801138e:	f8c7 1638 	str.w	r1, [r7, #1592]	@ 0x638
 8011392:	f8d7 1644 	ldr.w	r1, [r7, #1604]	@ 0x644
 8011396:	400b      	ands	r3, r1
 8011398:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 801139c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80113a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a4:	f8d7 1638 	ldr.w	r1, [r7, #1592]	@ 0x638
 80113a8:	4051      	eors	r1, r2
 80113aa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 80113ae:	f8d7 163c 	ldr.w	r1, [r7, #1596]	@ 0x63c
 80113b2:	404b      	eors	r3, r1
 80113b4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80113b8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80113bc:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 80113c0:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = BCu ^ ((~BCa) & BCe);
 80113c4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80113c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113cc:	43d1      	mvns	r1, r2
 80113ce:	f8c7 1630 	str.w	r1, [r7, #1584]	@ 0x630
 80113d2:	43db      	mvns	r3, r3
 80113d4:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 80113d8:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80113dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e0:	f8d7 1630 	ldr.w	r1, [r7, #1584]	@ 0x630
 80113e4:	4011      	ands	r1, r2
 80113e6:	f8c7 1628 	str.w	r1, [r7, #1576]	@ 0x628
 80113ea:	f8d7 1634 	ldr.w	r1, [r7, #1588]	@ 0x634
 80113ee:	400b      	ands	r3, r1
 80113f0:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 80113f4:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80113f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fc:	f8d7 1628 	ldr.w	r1, [r7, #1576]	@ 0x628
 8011400:	4051      	eors	r1, r2
 8011402:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 8011406:	f8d7 162c 	ldr.w	r1, [r7, #1580]	@ 0x62c
 801140a:	404b      	eors	r3, r1
 801140c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8011410:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8011414:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8011418:	e9c1 2300 	strd	r2, r3, [r1]

        Ebe ^= De;
 801141c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8011420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011424:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8011428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142c:	ea80 0602 	eor.w	r6, r0, r2
 8011430:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8011434:	404b      	eors	r3, r1
 8011436:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801143a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 801143e:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8011442:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebe, 1);
 8011446:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801144a:	f5a3 7098 	sub.w	r0, r3, #304	@ 0x130
 801144e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011452:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8011456:	6803      	ldr	r3, [r0, #0]
 8011458:	0fda      	lsrs	r2, r3, #31
 801145a:	680b      	ldr	r3, [r1, #0]
 801145c:	005b      	lsls	r3, r3, #1
 801145e:	4313      	orrs	r3, r2
 8011460:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8011464:	680b      	ldr	r3, [r1, #0]
 8011466:	0fda      	lsrs	r2, r3, #31
 8011468:	6803      	ldr	r3, [r0, #0]
 801146a:	005b      	lsls	r3, r3, #1
 801146c:	4313      	orrs	r3, r2
 801146e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8011472:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8011476:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 801147a:	e9c1 2300 	strd	r2, r3, [r1]
        Egi ^= Di;
 801147e:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 8011482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011486:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	ea80 0602 	eor.w	r6, r0, r2
 8011492:	f8c7 6150 	str.w	r6, [r7, #336]	@ 0x150
 8011496:	404b      	eors	r3, r1
 8011498:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 801149c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80114a0:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 80114a4:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egi, 6);
 80114a8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80114ac:	f5a3 70b0 	sub.w	r0, r3, #352	@ 0x160
 80114b0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80114b4:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 80114b8:	6803      	ldr	r3, [r0, #0]
 80114ba:	0e9a      	lsrs	r2, r3, #26
 80114bc:	680b      	ldr	r3, [r1, #0]
 80114be:	019b      	lsls	r3, r3, #6
 80114c0:	4313      	orrs	r3, r2
 80114c2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80114c6:	680b      	ldr	r3, [r1, #0]
 80114c8:	0e9a      	lsrs	r2, r3, #26
 80114ca:	6803      	ldr	r3, [r0, #0]
 80114cc:	019b      	lsls	r3, r3, #6
 80114ce:	4313      	orrs	r3, r2
 80114d0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80114d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80114d8:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 80114dc:	e9c1 2300 	strd	r2, r3, [r1]
        Eko ^= Do;
 80114e0:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 80114e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80114e8:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	ea80 0602 	eor.w	r6, r0, r2
 80114f4:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 80114f8:	404b      	eors	r3, r1
 80114fa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80114fe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8011502:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8011506:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eko, 25);
 801150a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801150e:	f5a3 70c8 	sub.w	r0, r3, #400	@ 0x190
 8011512:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011516:	f5a3 71c6 	sub.w	r1, r3, #396	@ 0x18c
 801151a:	6803      	ldr	r3, [r0, #0]
 801151c:	09da      	lsrs	r2, r3, #7
 801151e:	680b      	ldr	r3, [r1, #0]
 8011520:	065b      	lsls	r3, r3, #25
 8011522:	4313      	orrs	r3, r2
 8011524:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8011528:	680b      	ldr	r3, [r1, #0]
 801152a:	09da      	lsrs	r2, r3, #7
 801152c:	6803      	ldr	r3, [r0, #0]
 801152e:	065b      	lsls	r3, r3, #25
 8011530:	4313      	orrs	r3, r2
 8011532:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8011536:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 801153a:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 801153e:	e9c1 2300 	strd	r2, r3, [r1]
        Emu ^= Du;
 8011542:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8011546:	e9d3 0100 	ldrd	r0, r1, [r3]
 801154a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 801154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011552:	ea80 0602 	eor.w	r6, r0, r2
 8011556:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 801155a:	404b      	eors	r3, r1
 801155c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8011560:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8011564:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8011568:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emu, 8);
 801156c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011570:	f5a3 70e0 	sub.w	r0, r3, #448	@ 0x1c0
 8011574:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011578:	f5a3 71de 	sub.w	r1, r3, #444	@ 0x1bc
 801157c:	6803      	ldr	r3, [r0, #0]
 801157e:	0e1a      	lsrs	r2, r3, #24
 8011580:	680b      	ldr	r3, [r1, #0]
 8011582:	021b      	lsls	r3, r3, #8
 8011584:	4313      	orrs	r3, r2
 8011586:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801158a:	680b      	ldr	r3, [r1, #0]
 801158c:	0e1a      	lsrs	r2, r3, #24
 801158e:	6803      	ldr	r3, [r0, #0]
 8011590:	021b      	lsls	r3, r3, #8
 8011592:	4313      	orrs	r3, r2
 8011594:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8011598:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 801159c:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80115a0:	e9c1 2300 	strd	r2, r3, [r1]
        Esa ^= Da;
 80115a4:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 80115a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115ac:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80115b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b4:	ea80 0602 	eor.w	r6, r0, r2
 80115b8:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 80115bc:	404b      	eors	r3, r1
 80115be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80115c2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80115c6:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 80115ca:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esa, 18);
 80115ce:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80115d2:	f5a3 70e4 	sub.w	r0, r3, #456	@ 0x1c8
 80115d6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80115da:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80115de:	6803      	ldr	r3, [r0, #0]
 80115e0:	0b9a      	lsrs	r2, r3, #14
 80115e2:	680b      	ldr	r3, [r1, #0]
 80115e4:	049b      	lsls	r3, r3, #18
 80115e6:	4313      	orrs	r3, r2
 80115e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80115ec:	680b      	ldr	r3, [r1, #0]
 80115ee:	0b9a      	lsrs	r2, r3, #14
 80115f0:	6803      	ldr	r3, [r0, #0]
 80115f2:	049b      	lsls	r3, r3, #18
 80115f4:	4313      	orrs	r3, r2
 80115f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80115fa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80115fe:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8011602:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = BCa ^ ((~BCe) & BCi);
 8011606:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 801160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160e:	43d1      	mvns	r1, r2
 8011610:	f8c7 1620 	str.w	r1, [r7, #1568]	@ 0x620
 8011614:	43db      	mvns	r3, r3
 8011616:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 801161a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 801161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011622:	f8d7 1620 	ldr.w	r1, [r7, #1568]	@ 0x620
 8011626:	4011      	ands	r1, r2
 8011628:	f8c7 1618 	str.w	r1, [r7, #1560]	@ 0x618
 801162c:	f8d7 1624 	ldr.w	r1, [r7, #1572]	@ 0x624
 8011630:	400b      	ands	r3, r1
 8011632:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8011636:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 801163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163e:	f8d7 1618 	ldr.w	r1, [r7, #1560]	@ 0x618
 8011642:	4051      	eors	r1, r2
 8011644:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8011648:	f8d7 161c 	ldr.w	r1, [r7, #1564]	@ 0x61c
 801164c:	404b      	eors	r3, r1
 801164e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8011652:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8011656:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 801165a:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = BCe ^ ((~BCi) & BCo);
 801165e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011666:	43d1      	mvns	r1, r2
 8011668:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 801166c:	43db      	mvns	r3, r3
 801166e:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8011672:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167a:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 801167e:	4011      	ands	r1, r2
 8011680:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8011684:	f8d7 1614 	ldr.w	r1, [r7, #1556]	@ 0x614
 8011688:	400b      	ands	r3, r1
 801168a:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 801168e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011696:	f8d7 1608 	ldr.w	r1, [r7, #1544]	@ 0x608
 801169a:	4051      	eors	r1, r2
 801169c:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 80116a0:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 80116a4:	404b      	eors	r3, r1
 80116a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80116aa:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80116ae:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 80116b2:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = BCi ^ ((~BCo) & BCu);
 80116b6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	43d1      	mvns	r1, r2
 80116c0:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 80116c4:	43db      	mvns	r3, r3
 80116c6:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 80116ca:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	@ 0x600
 80116d6:	4011      	ands	r1, r2
 80116d8:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 80116dc:	f8d7 1604 	ldr.w	r1, [r7, #1540]	@ 0x604
 80116e0:	400b      	ands	r3, r1
 80116e2:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 80116e6:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80116ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ee:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	@ 0x5f8
 80116f2:	4051      	eors	r1, r2
 80116f4:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 80116f8:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	@ 0x5fc
 80116fc:	404b      	eors	r3, r1
 80116fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8011702:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8011706:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 801170a:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = BCo ^ ((~BCu) & BCa);
 801170e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011716:	43d1      	mvns	r1, r2
 8011718:	f8c7 15f0 	str.w	r1, [r7, #1520]	@ 0x5f0
 801171c:	43db      	mvns	r3, r3
 801171e:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 8011722:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	@ 0x5f0
 801172e:	4011      	ands	r1, r2
 8011730:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 8011734:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	@ 0x5f4
 8011738:	400b      	ands	r3, r1
 801173a:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 801173e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	@ 0x5e8
 801174a:	4051      	eors	r1, r2
 801174c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8011750:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	@ 0x5ec
 8011754:	404b      	eors	r3, r1
 8011756:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801175a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 801175e:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 8011762:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = BCu ^ ((~BCa) & BCe);
 8011766:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 801176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176e:	43d1      	mvns	r1, r2
 8011770:	f8c7 15e0 	str.w	r1, [r7, #1504]	@ 0x5e0
 8011774:	43db      	mvns	r3, r3
 8011776:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 801177a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 801177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011782:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	@ 0x5e0
 8011786:	4011      	ands	r1, r2
 8011788:	f8c7 15d8 	str.w	r1, [r7, #1496]	@ 0x5d8
 801178c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 8011790:	400b      	ands	r3, r1
 8011792:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 8011796:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 801179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179e:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	@ 0x5d8
 80117a2:	4051      	eors	r1, r2
 80117a4:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 80117a8:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	@ 0x5dc
 80117ac:	404b      	eors	r3, r1
 80117ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80117b2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 80117b6:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 80117ba:	e9c1 2300 	strd	r2, r3, [r1]

        Ebu ^= Du;
 80117be:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80117c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80117c6:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80117ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ce:	ea80 0602 	eor.w	r6, r0, r2
 80117d2:	f8c7 60e8 	str.w	r6, [r7, #232]	@ 0xe8
 80117d6:	404b      	eors	r3, r1
 80117d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80117dc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80117e0:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 80117e4:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebu, 27);
 80117e8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80117ec:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 80117f0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80117f4:	f5a3 71a2 	sub.w	r1, r3, #324	@ 0x144
 80117f8:	6803      	ldr	r3, [r0, #0]
 80117fa:	095a      	lsrs	r2, r3, #5
 80117fc:	680b      	ldr	r3, [r1, #0]
 80117fe:	06db      	lsls	r3, r3, #27
 8011800:	4313      	orrs	r3, r2
 8011802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011806:	680b      	ldr	r3, [r1, #0]
 8011808:	095a      	lsrs	r2, r3, #5
 801180a:	6803      	ldr	r3, [r0, #0]
 801180c:	06db      	lsls	r3, r3, #27
 801180e:	4313      	orrs	r3, r2
 8011810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011814:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8011818:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 801181c:	e9c1 2300 	strd	r2, r3, [r1]
        Ega ^= Da;
 8011820:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 8011824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011828:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 801182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011830:	ea80 0602 	eor.w	r6, r0, r2
 8011834:	f8c7 60d8 	str.w	r6, [r7, #216]	@ 0xd8
 8011838:	404b      	eors	r3, r1
 801183a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801183e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8011842:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 8011846:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ega, 36);
 801184a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801184e:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8011852:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011856:	f5a3 71a8 	sub.w	r1, r3, #336	@ 0x150
 801185a:	6803      	ldr	r3, [r0, #0]
 801185c:	011a      	lsls	r2, r3, #4
 801185e:	680b      	ldr	r3, [r1, #0]
 8011860:	0f1b      	lsrs	r3, r3, #28
 8011862:	4313      	orrs	r3, r2
 8011864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011868:	680b      	ldr	r3, [r1, #0]
 801186a:	011a      	lsls	r2, r3, #4
 801186c:	6803      	ldr	r3, [r0, #0]
 801186e:	0f1b      	lsrs	r3, r3, #28
 8011870:	4313      	orrs	r3, r2
 8011872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011876:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 801187a:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 801187e:	e9c1 2300 	strd	r2, r3, [r1]
        Eke ^= De;
 8011882:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8011886:	e9d3 0100 	ldrd	r0, r1, [r3]
 801188a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 801188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011892:	ea80 0602 	eor.w	r6, r0, r2
 8011896:	f8c7 60c8 	str.w	r6, [r7, #200]	@ 0xc8
 801189a:	404b      	eors	r3, r1
 801189c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80118a0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80118a4:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 80118a8:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eke, 10);
 80118ac:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80118b0:	f5a3 70c0 	sub.w	r0, r3, #384	@ 0x180
 80118b4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80118b8:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80118bc:	6803      	ldr	r3, [r0, #0]
 80118be:	0d9a      	lsrs	r2, r3, #22
 80118c0:	680b      	ldr	r3, [r1, #0]
 80118c2:	029b      	lsls	r3, r3, #10
 80118c4:	4313      	orrs	r3, r2
 80118c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80118ca:	680b      	ldr	r3, [r1, #0]
 80118cc:	0d9a      	lsrs	r2, r3, #22
 80118ce:	6803      	ldr	r3, [r0, #0]
 80118d0:	029b      	lsls	r3, r3, #10
 80118d2:	4313      	orrs	r3, r2
 80118d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80118d8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80118dc:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80118e0:	e9c1 2300 	strd	r2, r3, [r1]
        Emi ^= Di;
 80118e4:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 80118e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80118ec:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	ea80 0602 	eor.w	r6, r0, r2
 80118f8:	f8c7 60b8 	str.w	r6, [r7, #184]	@ 0xb8
 80118fc:	404b      	eors	r3, r1
 80118fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011902:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8011906:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 801190a:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emi, 15);
 801190e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011912:	f5a3 70d8 	sub.w	r0, r3, #432	@ 0x1b0
 8011916:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801191a:	f5a3 71d6 	sub.w	r1, r3, #428	@ 0x1ac
 801191e:	6803      	ldr	r3, [r0, #0]
 8011920:	0c5a      	lsrs	r2, r3, #17
 8011922:	680b      	ldr	r3, [r1, #0]
 8011924:	03db      	lsls	r3, r3, #15
 8011926:	4313      	orrs	r3, r2
 8011928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801192c:	680b      	ldr	r3, [r1, #0]
 801192e:	0c5a      	lsrs	r2, r3, #17
 8011930:	6803      	ldr	r3, [r0, #0]
 8011932:	03db      	lsls	r3, r3, #15
 8011934:	4313      	orrs	r3, r2
 8011936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801193a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 801193e:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8011942:	e9c1 2300 	strd	r2, r3, [r1]
        Eso ^= Do;
 8011946:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 801194a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801194e:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8011952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011956:	ea80 0602 	eor.w	r6, r0, r2
 801195a:	f8c7 60a8 	str.w	r6, [r7, #168]	@ 0xa8
 801195e:	404b      	eors	r3, r1
 8011960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011964:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8011968:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 801196c:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Eso, 56);
 8011970:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011974:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 8011978:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801197c:	f5a3 71f0 	sub.w	r1, r3, #480	@ 0x1e0
 8011980:	6803      	ldr	r3, [r0, #0]
 8011982:	061a      	lsls	r2, r3, #24
 8011984:	680b      	ldr	r3, [r1, #0]
 8011986:	0a1b      	lsrs	r3, r3, #8
 8011988:	4313      	orrs	r3, r2
 801198a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801198e:	680b      	ldr	r3, [r1, #0]
 8011990:	061a      	lsls	r2, r3, #24
 8011992:	6803      	ldr	r3, [r0, #0]
 8011994:	0a1b      	lsrs	r3, r3, #8
 8011996:	4313      	orrs	r3, r2
 8011998:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801199c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80119a0:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 80119a4:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = BCa ^ ((~BCe) & BCi);
 80119a8:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	43d1      	mvns	r1, r2
 80119b2:	f8c7 15d0 	str.w	r1, [r7, #1488]	@ 0x5d0
 80119b6:	43db      	mvns	r3, r3
 80119b8:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 80119bc:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	@ 0x5d0
 80119c8:	4011      	ands	r1, r2
 80119ca:	f8c7 15c8 	str.w	r1, [r7, #1480]	@ 0x5c8
 80119ce:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	@ 0x5d4
 80119d2:	400b      	ands	r3, r1
 80119d4:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 80119d8:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80119dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	@ 0x5c8
 80119e4:	4051      	eors	r1, r2
 80119e6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80119ea:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	@ 0x5cc
 80119ee:	404b      	eors	r3, r1
 80119f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119f4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80119f8:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 80119fc:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = BCe ^ ((~BCi) & BCo);
 8011a00:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	43d1      	mvns	r1, r2
 8011a0a:	f8c7 15c0 	str.w	r1, [r7, #1472]	@ 0x5c0
 8011a0e:	43db      	mvns	r3, r3
 8011a10:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 8011a14:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	@ 0x5c0
 8011a20:	4011      	ands	r1, r2
 8011a22:	f8c7 15b8 	str.w	r1, [r7, #1464]	@ 0x5b8
 8011a26:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	@ 0x5c4
 8011a2a:	400b      	ands	r3, r1
 8011a2c:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 8011a30:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a38:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	@ 0x5b8
 8011a3c:	4051      	eors	r1, r2
 8011a3e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8011a42:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	@ 0x5bc
 8011a46:	404b      	eors	r3, r1
 8011a48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011a4c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8011a50:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 8011a54:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = BCi ^ ((~BCo) & BCu);
 8011a58:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a60:	43d1      	mvns	r1, r2
 8011a62:	f8c7 15b0 	str.w	r1, [r7, #1456]	@ 0x5b0
 8011a66:	43db      	mvns	r3, r3
 8011a68:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 8011a6c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a74:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	@ 0x5b0
 8011a78:	4011      	ands	r1, r2
 8011a7a:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 8011a7e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	@ 0x5b4
 8011a82:	400b      	ands	r3, r1
 8011a84:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 8011a88:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a90:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	@ 0x5a8
 8011a94:	4051      	eors	r1, r2
 8011a96:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8011a9a:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	@ 0x5ac
 8011a9e:	404b      	eors	r3, r1
 8011aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011aa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8011aa8:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8011aac:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = BCo ^ ((~BCu) & BCa);
 8011ab0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab8:	43d1      	mvns	r1, r2
 8011aba:	f8c7 15a0 	str.w	r1, [r7, #1440]	@ 0x5a0
 8011abe:	43db      	mvns	r3, r3
 8011ac0:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8011ac4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011acc:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 8011ad0:	4011      	ands	r1, r2
 8011ad2:	f8c7 1598 	str.w	r1, [r7, #1432]	@ 0x598
 8011ad6:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	@ 0x5a4
 8011ada:	400b      	ands	r3, r1
 8011adc:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 8011ae0:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae8:	f8d7 1598 	ldr.w	r1, [r7, #1432]	@ 0x598
 8011aec:	4051      	eors	r1, r2
 8011aee:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8011af2:	f8d7 159c 	ldr.w	r1, [r7, #1436]	@ 0x59c
 8011af6:	404b      	eors	r3, r1
 8011af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011afc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8011b00:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8011b04:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = BCu ^ ((~BCa) & BCe);
 8011b08:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b10:	43d1      	mvns	r1, r2
 8011b12:	f8c7 1590 	str.w	r1, [r7, #1424]	@ 0x590
 8011b16:	43db      	mvns	r3, r3
 8011b18:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 8011b1c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	f8d7 1590 	ldr.w	r1, [r7, #1424]	@ 0x590
 8011b28:	4011      	ands	r1, r2
 8011b2a:	f8c7 1588 	str.w	r1, [r7, #1416]	@ 0x588
 8011b2e:	f8d7 1594 	ldr.w	r1, [r7, #1428]	@ 0x594
 8011b32:	400b      	ands	r3, r1
 8011b34:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 8011b38:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	f8d7 1588 	ldr.w	r1, [r7, #1416]	@ 0x588
 8011b44:	4051      	eors	r1, r2
 8011b46:	67b9      	str	r1, [r7, #120]	@ 0x78
 8011b48:	f8d7 158c 	ldr.w	r1, [r7, #1420]	@ 0x58c
 8011b4c:	404b      	eors	r3, r1
 8011b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011b50:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8011b54:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 8011b58:	e9c1 2300 	strd	r2, r3, [r1]

        Ebi ^= Di;
 8011b5c:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8011b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b64:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8011b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6c:	ea80 0602 	eor.w	r6, r0, r2
 8011b70:	673e      	str	r6, [r7, #112]	@ 0x70
 8011b72:	404b      	eors	r3, r1
 8011b74:	677b      	str	r3, [r7, #116]	@ 0x74
 8011b76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8011b7a:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 8011b7e:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebi, 62);
 8011b82:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011b86:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8011b8a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011b8e:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 8011b92:	6803      	ldr	r3, [r0, #0]
 8011b94:	079a      	lsls	r2, r3, #30
 8011b96:	680b      	ldr	r3, [r1, #0]
 8011b98:	089b      	lsrs	r3, r3, #2
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b9e:	680b      	ldr	r3, [r1, #0]
 8011ba0:	079a      	lsls	r2, r3, #30
 8011ba2:	6803      	ldr	r3, [r0, #0]
 8011ba4:	089b      	lsrs	r3, r3, #2
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011baa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8011bae:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8011bb2:	e9c1 2300 	strd	r2, r3, [r1]
        Ego ^= Do;
 8011bb6:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 8011bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011bbe:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8011bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc6:	ea80 0602 	eor.w	r6, r0, r2
 8011bca:	663e      	str	r6, [r7, #96]	@ 0x60
 8011bcc:	404b      	eors	r3, r1
 8011bce:	667b      	str	r3, [r7, #100]	@ 0x64
 8011bd0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8011bd4:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 8011bd8:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ego, 55);
 8011bdc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011be0:	f5a3 70b2 	sub.w	r0, r3, #356	@ 0x164
 8011be4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011be8:	f5a3 71b4 	sub.w	r1, r3, #360	@ 0x168
 8011bec:	6803      	ldr	r3, [r0, #0]
 8011bee:	05da      	lsls	r2, r3, #23
 8011bf0:	680b      	ldr	r3, [r1, #0]
 8011bf2:	0a5b      	lsrs	r3, r3, #9
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011bf8:	680b      	ldr	r3, [r1, #0]
 8011bfa:	05da      	lsls	r2, r3, #23
 8011bfc:	6803      	ldr	r3, [r0, #0]
 8011bfe:	0a5b      	lsrs	r3, r3, #9
 8011c00:	4313      	orrs	r3, r2
 8011c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011c08:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8011c0c:	e9c1 2300 	strd	r2, r3, [r1]
        Eku ^= Du;
 8011c10:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 8011c14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c18:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8011c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c20:	ea80 0602 	eor.w	r6, r0, r2
 8011c24:	653e      	str	r6, [r7, #80]	@ 0x50
 8011c26:	404b      	eors	r3, r1
 8011c28:	657b      	str	r3, [r7, #84]	@ 0x54
 8011c2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011c2e:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 8011c32:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eku, 39);
 8011c36:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011c3a:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8011c3e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011c42:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 8011c46:	6803      	ldr	r3, [r0, #0]
 8011c48:	01da      	lsls	r2, r3, #7
 8011c4a:	680b      	ldr	r3, [r1, #0]
 8011c4c:	0e5b      	lsrs	r3, r3, #25
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c52:	680b      	ldr	r3, [r1, #0]
 8011c54:	01da      	lsls	r2, r3, #7
 8011c56:	6803      	ldr	r3, [r0, #0]
 8011c58:	0e5b      	lsrs	r3, r3, #25
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011c62:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8011c66:	e9c1 2300 	strd	r2, r3, [r1]
        Ema ^= Da;
 8011c6a:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 8011c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c72:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8011c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7a:	ea80 0602 	eor.w	r6, r0, r2
 8011c7e:	643e      	str	r6, [r7, #64]	@ 0x40
 8011c80:	404b      	eors	r3, r1
 8011c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011c88:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 8011c8c:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ema, 41);
 8011c90:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011c94:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8011c98:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011c9c:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8011ca0:	6803      	ldr	r3, [r0, #0]
 8011ca2:	025a      	lsls	r2, r3, #9
 8011ca4:	680b      	ldr	r3, [r1, #0]
 8011ca6:	0ddb      	lsrs	r3, r3, #23
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011cac:	680b      	ldr	r3, [r1, #0]
 8011cae:	025a      	lsls	r2, r3, #9
 8011cb0:	6803      	ldr	r3, [r0, #0]
 8011cb2:	0ddb      	lsrs	r3, r3, #23
 8011cb4:	4313      	orrs	r3, r2
 8011cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011cbc:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8011cc0:	e9c1 2300 	strd	r2, r3, [r1]
        Ese ^= De;
 8011cc4:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8011cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ccc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	ea80 0602 	eor.w	r6, r0, r2
 8011cd8:	633e      	str	r6, [r7, #48]	@ 0x30
 8011cda:	404b      	eors	r3, r1
 8011cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8011ce2:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 8011ce6:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ese, 2);
 8011cea:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011cee:	f5a3 70e8 	sub.w	r0, r3, #464	@ 0x1d0
 8011cf2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011cf6:	f5a3 71e6 	sub.w	r1, r3, #460	@ 0x1cc
 8011cfa:	6803      	ldr	r3, [r0, #0]
 8011cfc:	0f9a      	lsrs	r2, r3, #30
 8011cfe:	680b      	ldr	r3, [r1, #0]
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	4313      	orrs	r3, r2
 8011d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d06:	680b      	ldr	r3, [r1, #0]
 8011d08:	0f9a      	lsrs	r2, r3, #30
 8011d0a:	6803      	ldr	r3, [r0, #0]
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	4313      	orrs	r3, r2
 8011d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011d16:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8011d1a:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = BCa ^ ((~BCe) & BCi);
 8011d1e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	43d1      	mvns	r1, r2
 8011d28:	f8c7 1580 	str.w	r1, [r7, #1408]	@ 0x580
 8011d2c:	43db      	mvns	r3, r3
 8011d2e:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 8011d32:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	@ 0x580
 8011d3e:	4011      	ands	r1, r2
 8011d40:	f8c7 1578 	str.w	r1, [r7, #1400]	@ 0x578
 8011d44:	f8d7 1584 	ldr.w	r1, [r7, #1412]	@ 0x584
 8011d48:	400b      	ands	r3, r1
 8011d4a:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 8011d4e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d56:	f8d7 1578 	ldr.w	r1, [r7, #1400]	@ 0x578
 8011d5a:	4051      	eors	r1, r2
 8011d5c:	6239      	str	r1, [r7, #32]
 8011d5e:	f8d7 157c 	ldr.w	r1, [r7, #1404]	@ 0x57c
 8011d62:	404b      	eors	r3, r1
 8011d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d6a:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 8011d6e:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = BCe ^ ((~BCi) & BCo);
 8011d72:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7a:	43d1      	mvns	r1, r2
 8011d7c:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 8011d80:	43db      	mvns	r3, r3
 8011d82:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 8011d86:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8e:	f8d7 1570 	ldr.w	r1, [r7, #1392]	@ 0x570
 8011d92:	4011      	ands	r1, r2
 8011d94:	f8c7 1568 	str.w	r1, [r7, #1384]	@ 0x568
 8011d98:	f8d7 1574 	ldr.w	r1, [r7, #1396]	@ 0x574
 8011d9c:	400b      	ands	r3, r1
 8011d9e:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 8011da2:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011daa:	f8d7 1568 	ldr.w	r1, [r7, #1384]	@ 0x568
 8011dae:	4051      	eors	r1, r2
 8011db0:	61b9      	str	r1, [r7, #24]
 8011db2:	f8d7 156c 	ldr.w	r1, [r7, #1388]	@ 0x56c
 8011db6:	404b      	eors	r3, r1
 8011db8:	61fb      	str	r3, [r7, #28]
 8011dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011dbe:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8011dc2:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = BCi ^ ((~BCo) & BCu);
 8011dc6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dce:	43d1      	mvns	r1, r2
 8011dd0:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 8011dd4:	43db      	mvns	r3, r3
 8011dd6:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 8011dda:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de2:	f8d7 1560 	ldr.w	r1, [r7, #1376]	@ 0x560
 8011de6:	4011      	ands	r1, r2
 8011de8:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 8011dec:	f8d7 1564 	ldr.w	r1, [r7, #1380]	@ 0x564
 8011df0:	400b      	ands	r3, r1
 8011df2:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 8011df6:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8011dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dfe:	f8d7 1558 	ldr.w	r1, [r7, #1368]	@ 0x558
 8011e02:	4051      	eors	r1, r2
 8011e04:	6139      	str	r1, [r7, #16]
 8011e06:	f8d7 155c 	ldr.w	r1, [r7, #1372]	@ 0x55c
 8011e0a:	404b      	eors	r3, r1
 8011e0c:	617b      	str	r3, [r7, #20]
 8011e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011e12:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8011e16:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = BCo ^ ((~BCu) & BCa);
 8011e1a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e22:	43d1      	mvns	r1, r2
 8011e24:	f8c7 1550 	str.w	r1, [r7, #1360]	@ 0x550
 8011e28:	43db      	mvns	r3, r3
 8011e2a:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 8011e2e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e36:	f8d7 1550 	ldr.w	r1, [r7, #1360]	@ 0x550
 8011e3a:	ea01 0a02 	and.w	sl, r1, r2
 8011e3e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	@ 0x554
 8011e42:	ea01 0b03 	and.w	fp, r1, r3
 8011e46:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8011e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4e:	ea82 010a 	eor.w	r1, r2, sl
 8011e52:	60b9      	str	r1, [r7, #8]
 8011e54:	ea83 030b 	eor.w	r3, r3, fp
 8011e58:	60fb      	str	r3, [r7, #12]
 8011e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011e5e:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8011e62:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = BCu ^ ((~BCa) & BCe);
 8011e66:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8011e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6e:	ea6f 0802 	mvn.w	r8, r2
 8011e72:	ea6f 0903 	mvn.w	r9, r3
 8011e76:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8011e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7e:	ea08 0402 	and.w	r4, r8, r2
 8011e82:	ea09 0503 	and.w	r5, r9, r3
 8011e86:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8011e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8e:	ea82 0104 	eor.w	r1, r2, r4
 8011e92:	6039      	str	r1, [r7, #0]
 8011e94:	406b      	eors	r3, r5
 8011e96:	607b      	str	r3, [r7, #4]
 8011e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e9c:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8011ea0:	e9c1 2300 	strd	r2, r3, [r1]
    for (round = 0; round < NROUNDS; round += 2) {
 8011ea4:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8011ea8:	3302      	adds	r3, #2
 8011eaa:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 8011eae:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8011eb2:	2b17      	cmp	r3, #23
 8011eb4:	f77d aa04 	ble.w	800f2c0 <KeccakF1600_StatePermute+0x244>
    }

    // copyToState(state, A)
    state[0] = Aba;
 8011eb8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011ebc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011ec0:	6819      	ldr	r1, [r3, #0]
 8011ec2:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8011ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eca:	e9c1 2300 	strd	r2, r3, [r1]
    state[1] = Abe;
 8011ece:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011ed2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f103 0108 	add.w	r1, r3, #8
 8011edc:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8011ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee4:	e9c1 2300 	strd	r2, r3, [r1]
    state[2] = Abi;
 8011ee8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011eec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f103 0110 	add.w	r1, r3, #16
 8011ef6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8011efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011efe:	e9c1 2300 	strd	r2, r3, [r1]
    state[3] = Abo;
 8011f02:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011f06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f103 0118 	add.w	r1, r3, #24
 8011f10:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8011f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f18:	e9c1 2300 	strd	r2, r3, [r1]
    state[4] = Abu;
 8011f1c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011f20:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f103 0120 	add.w	r1, r3, #32
 8011f2a:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8011f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f32:	e9c1 2300 	strd	r2, r3, [r1]
    state[5] = Aga;
 8011f36:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011f3a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8011f44:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8011f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4c:	e9c1 2300 	strd	r2, r3, [r1]
    state[6] = Age;
 8011f50:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011f54:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011f5e:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8011f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f66:	e9c1 2300 	strd	r2, r3, [r1]
    state[7] = Agi;
 8011f6a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011f6e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011f78:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8011f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f80:	e9c1 2300 	strd	r2, r3, [r1]
    state[8] = Ago;
 8011f84:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011f88:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011f92:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8011f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9a:	e9c1 2300 	strd	r2, r3, [r1]
    state[9] = Agu;
 8011f9e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011fa2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8011fac:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8011fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb4:	e9c1 2300 	strd	r2, r3, [r1]
    state[10] = Aka;
 8011fb8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011fbc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8011fc6:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8011fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fce:	e9c1 2300 	strd	r2, r3, [r1]
    state[11] = Ake;
 8011fd2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011fd6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8011fe0:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8011fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe8:	e9c1 2300 	strd	r2, r3, [r1]
    state[12] = Aki;
 8011fec:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8011ff0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8011ffa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8011ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012002:	e9c1 2300 	strd	r2, r3, [r1]
    state[13] = Ako;
 8012006:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801200a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8012014:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8012018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201c:	e9c1 2300 	strd	r2, r3, [r1]
    state[14] = Aku;
 8012020:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8012024:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801202e:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8012032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012036:	e9c1 2300 	strd	r2, r3, [r1]
    state[15] = Ama;
 801203a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801203e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8012048:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 801204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012050:	e9c1 2300 	strd	r2, r3, [r1]
    state[16] = Ame;
 8012054:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8012058:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8012062:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 8012066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206a:	e9c1 2300 	strd	r2, r3, [r1]
    state[17] = Ami;
 801206e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8012072:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 801207c:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	e9c1 2300 	strd	r2, r3, [r1]
    state[18] = Amo;
 8012088:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801208c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8012096:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	e9c1 2300 	strd	r2, r3, [r1]
    state[19] = Amu;
 80120a2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80120a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 80120b0:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 80120b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b8:	e9c1 2300 	strd	r2, r3, [r1]
    state[20] = Asa;
 80120bc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80120c0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 80120ca:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 80120ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d2:	e9c1 2300 	strd	r2, r3, [r1]
    state[21] = Ase;
 80120d6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80120da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 80120e4:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 80120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ec:	e9c1 2300 	strd	r2, r3, [r1]
    state[22] = Asi;
 80120f0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80120f4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 80120fe:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	e9c1 2300 	strd	r2, r3, [r1]
    state[23] = Aso;
 801210a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 801210e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8012118:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	e9c1 2300 	strd	r2, r3, [r1]
    state[24] = Asu;
 8012124:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8012128:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8012132:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8012136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213a:	e9c1 2300 	strd	r2, r3, [r1]
}
 801213e:	bf00      	nop
 8012140:	f607 3788 	addw	r7, r7, #2952	@ 0xb88
 8012144:	46bd      	mov	sp, r7
 8012146:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801214a:	4770      	bx	lr

0801214c <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
    size_t i;

    for (i = 0; i < 25; ++i) {
 8012154:	2300      	movs	r3, #0
 8012156:	60fb      	str	r3, [r7, #12]
 8012158:	e00c      	b.n	8012174 <keccak_inc_init+0x28>
        s_inc[i] = 0;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	18d1      	adds	r1, r2, r3
 8012162:	f04f 0200 	mov.w	r2, #0
 8012166:	f04f 0300 	mov.w	r3, #0
 801216a:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; ++i) {
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	3301      	adds	r3, #1
 8012172:	60fb      	str	r3, [r7, #12]
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b18      	cmp	r3, #24
 8012178:	d9ef      	bls.n	801215a <keccak_inc_init+0xe>
    }
    s_inc[25] = 0;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8012180:	f04f 0200 	mov.w	r2, #0
 8012184:	f04f 0300 	mov.w	r3, #0
 8012188:	e9c1 2300 	strd	r2, r3, [r1]
}
 801218c:	bf00      	nop
 801218e:	3714      	adds	r7, #20
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <keccak_inc_absorb>:
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - const uint8_t *m: pointer to input to be absorbed into s
 *              - size_t mlen: length of input in bytes
 **************************************************/
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
                              size_t mlen) {
 8012198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801219c:	b0b0      	sub	sp, #192	@ 0xc0
 801219e:	af00      	add	r7, sp, #0
 80121a0:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80121a4:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80121a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80121ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    size_t i;

    /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
    while (mlen + s_inc[25] >= r) {
 80121b0:	e0d2      	b.n	8012358 <keccak_inc_absorb+0x1c0>
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 80121b2:	2300      	movs	r3, #0
 80121b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80121b8:	e099      	b.n	80122ee <keccak_inc_absorb+0x156>
            /* Take the i'th byte from message
               xor with the s_inc[25] + i'th byte of the state; little-endian */
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 80121ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80121be:	33c8      	adds	r3, #200	@ 0xc8
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80121c8:	2000      	movs	r0, #0
 80121ca:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80121ce:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 80121d2:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80121d6:	4641      	mov	r1, r8
 80121d8:	1851      	adds	r1, r2, r1
 80121da:	67b9      	str	r1, [r7, #120]	@ 0x78
 80121dc:	4649      	mov	r1, r9
 80121de:	414b      	adcs	r3, r1
 80121e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80121e2:	f04f 0200 	mov.w	r2, #0
 80121e6:	f04f 0300 	mov.w	r3, #0
 80121ea:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80121ee:	4641      	mov	r1, r8
 80121f0:	08ca      	lsrs	r2, r1, #3
 80121f2:	4649      	mov	r1, r9
 80121f4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 80121f8:	4649      	mov	r1, r9
 80121fa:	08cb      	lsrs	r3, r1, #3
 80121fc:	4613      	mov	r3, r2
 80121fe:	00da      	lsls	r2, r3, #3
 8012200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012204:	4413      	add	r3, r2
 8012206:	e9d3 8900 	ldrd	r8, r9, [r3]
 801220a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801220e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012212:	4413      	add	r3, r2
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	b2db      	uxtb	r3, r3
 8012218:	2200      	movs	r2, #0
 801221a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801221e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012226:	33c8      	adds	r3, #200	@ 0xc8
 8012228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8012230:	2000      	movs	r0, #0
 8012232:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8012236:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 801223a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801223e:	1851      	adds	r1, r2, r1
 8012240:	6739      	str	r1, [r7, #112]	@ 0x70
 8012242:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8012246:	414b      	adcs	r3, r1
 8012248:	677b      	str	r3, [r7, #116]	@ 0x74
 801224a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801224c:	f003 0307 	and.w	r3, r3, #7
 8012250:	00d9      	lsls	r1, r3, #3
 8012252:	f1a1 0320 	sub.w	r3, r1, #32
 8012256:	f1c1 0220 	rsb	r2, r1, #32
 801225a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801225e:	fa00 f501 	lsl.w	r5, r0, r1
 8012262:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8012266:	fa00 f303 	lsl.w	r3, r0, r3
 801226a:	431d      	orrs	r5, r3
 801226c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012270:	fa23 f202 	lsr.w	r2, r3, r2
 8012274:	4315      	orrs	r5, r2
 8012276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801227a:	fa03 f401 	lsl.w	r4, r3, r1
 801227e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012282:	33c8      	adds	r3, #200	@ 0xc8
 8012284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012288:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801228c:	2000      	movs	r0, #0
 801228e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8012292:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8012296:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801229a:	1851      	adds	r1, r2, r1
 801229c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80122a0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80122a4:	414b      	adcs	r3, r1
 80122a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80122aa:	f04f 0200 	mov.w	r2, #0
 80122ae:	f04f 0300 	mov.w	r3, #0
 80122b2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80122b6:	08ca      	lsrs	r2, r1, #3
 80122b8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80122bc:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 80122c0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80122c4:	08cb      	lsrs	r3, r1, #3
 80122c6:	4613      	mov	r3, r2
 80122c8:	00da      	lsls	r2, r3, #3
 80122ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80122ce:	4413      	add	r3, r2
 80122d0:	ea88 0204 	eor.w	r2, r8, r4
 80122d4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80122d6:	ea89 0205 	eor.w	r2, r9, r5
 80122da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80122dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80122e0:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 80122e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80122e8:	3301      	adds	r3, #1
 80122ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80122ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80122f2:	33c8      	adds	r3, #200	@ 0xc8
 80122f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80122fc:	1a9a      	subs	r2, r3, r2
 80122fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012302:	4293      	cmp	r3, r2
 8012304:	f4ff af59 	bcc.w	80121ba <keccak_inc_absorb+0x22>
        }
        mlen -= (size_t)(r - s_inc[25]);
 8012308:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801230c:	33c8      	adds	r3, #200	@ 0xc8
 801230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012316:	1ad2      	subs	r2, r2, r3
 8012318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801231c:	4413      	add	r3, r2
 801231e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        m += r - s_inc[25];
 8012322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012326:	33c8      	adds	r3, #200	@ 0xc8
 8012328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012330:	1a9a      	subs	r2, r3, r2
 8012332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012336:	4413      	add	r3, r2
 8012338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        s_inc[25] = 0;
 801233c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012340:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8012344:	f04f 0200 	mov.w	r2, #0
 8012348:	f04f 0300 	mov.w	r3, #0
 801234c:	e9c1 2300 	strd	r2, r3, [r1]

        KeccakF1600_StatePermute(s_inc);
 8012350:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8012354:	f7fc fe92 	bl	800f07c <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8012358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801235c:	2200      	movs	r2, #0
 801235e:	663b      	str	r3, [r7, #96]	@ 0x60
 8012360:	667a      	str	r2, [r7, #100]	@ 0x64
 8012362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012366:	33c8      	adds	r3, #200	@ 0xc8
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8012370:	4641      	mov	r1, r8
 8012372:	1889      	adds	r1, r1, r2
 8012374:	65b9      	str	r1, [r7, #88]	@ 0x58
 8012376:	4649      	mov	r1, r9
 8012378:	eb41 0303 	adc.w	r3, r1, r3
 801237c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801237e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012382:	2200      	movs	r2, #0
 8012384:	653b      	str	r3, [r7, #80]	@ 0x50
 8012386:	657a      	str	r2, [r7, #84]	@ 0x54
 8012388:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 801238c:	4643      	mov	r3, r8
 801238e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8012392:	4602      	mov	r2, r0
 8012394:	4293      	cmp	r3, r2
 8012396:	464b      	mov	r3, r9
 8012398:	460a      	mov	r2, r1
 801239a:	4193      	sbcs	r3, r2
 801239c:	f4bf af09 	bcs.w	80121b2 <keccak_inc_absorb+0x1a>
    }

    for (i = 0; i < mlen; i++) {
 80123a0:	2300      	movs	r3, #0
 80123a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80123a6:	e08e      	b.n	80124c6 <keccak_inc_absorb+0x32e>
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 80123a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80123ac:	33c8      	adds	r3, #200	@ 0xc8
 80123ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80123b6:	2000      	movs	r0, #0
 80123b8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80123ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80123bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80123c0:	4621      	mov	r1, r4
 80123c2:	1851      	adds	r1, r2, r1
 80123c4:	6439      	str	r1, [r7, #64]	@ 0x40
 80123c6:	4629      	mov	r1, r5
 80123c8:	414b      	adcs	r3, r1
 80123ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80123cc:	f04f 0200 	mov.w	r2, #0
 80123d0:	f04f 0300 	mov.w	r3, #0
 80123d4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80123d8:	4621      	mov	r1, r4
 80123da:	08ca      	lsrs	r2, r1, #3
 80123dc:	4629      	mov	r1, r5
 80123de:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 80123e2:	4629      	mov	r1, r5
 80123e4:	08cb      	lsrs	r3, r1, #3
 80123e6:	4613      	mov	r3, r2
 80123e8:	00da      	lsls	r2, r3, #3
 80123ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80123ee:	4413      	add	r3, r2
 80123f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80123f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80123f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80123fc:	4413      	add	r3, r2
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	b2db      	uxtb	r3, r3
 8012402:	2200      	movs	r2, #0
 8012404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012406:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801240c:	33c8      	adds	r3, #200	@ 0xc8
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8012416:	2000      	movs	r0, #0
 8012418:	6339      	str	r1, [r7, #48]	@ 0x30
 801241a:	6378      	str	r0, [r7, #52]	@ 0x34
 801241c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8012420:	4641      	mov	r1, r8
 8012422:	1851      	adds	r1, r2, r1
 8012424:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012426:	4649      	mov	r1, r9
 8012428:	414b      	adcs	r3, r1
 801242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801242c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801242e:	f003 0307 	and.w	r3, r3, #7
 8012432:	00d9      	lsls	r1, r3, #3
 8012434:	f1a1 0320 	sub.w	r3, r1, #32
 8012438:	f1c1 0220 	rsb	r2, r1, #32
 801243c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8012440:	4648      	mov	r0, r9
 8012442:	fa00 fb01 	lsl.w	fp, r0, r1
 8012446:	4640      	mov	r0, r8
 8012448:	fa00 f303 	lsl.w	r3, r0, r3
 801244c:	ea4b 0b03 	orr.w	fp, fp, r3
 8012450:	4643      	mov	r3, r8
 8012452:	fa23 f202 	lsr.w	r2, r3, r2
 8012456:	ea4b 0b02 	orr.w	fp, fp, r2
 801245a:	4643      	mov	r3, r8
 801245c:	fa03 fa01 	lsl.w	sl, r3, r1
 8012460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012464:	33c8      	adds	r3, #200	@ 0xc8
 8012466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801246e:	2000      	movs	r0, #0
 8012470:	6239      	str	r1, [r7, #32]
 8012472:	6278      	str	r0, [r7, #36]	@ 0x24
 8012474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012478:	4641      	mov	r1, r8
 801247a:	1851      	adds	r1, r2, r1
 801247c:	61b9      	str	r1, [r7, #24]
 801247e:	4649      	mov	r1, r9
 8012480:	414b      	adcs	r3, r1
 8012482:	61fb      	str	r3, [r7, #28]
 8012484:	f04f 0200 	mov.w	r2, #0
 8012488:	f04f 0300 	mov.w	r3, #0
 801248c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8012490:	4641      	mov	r1, r8
 8012492:	08ca      	lsrs	r2, r1, #3
 8012494:	4649      	mov	r1, r9
 8012496:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 801249a:	4649      	mov	r1, r9
 801249c:	08cb      	lsrs	r3, r1, #3
 801249e:	4613      	mov	r3, r2
 80124a0:	00da      	lsls	r2, r3, #3
 80124a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80124a6:	4413      	add	r3, r2
 80124a8:	ea84 020a 	eor.w	r2, r4, sl
 80124ac:	613a      	str	r2, [r7, #16]
 80124ae:	ea85 020b 	eor.w	r2, r5, fp
 80124b2:	617a      	str	r2, [r7, #20]
 80124b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80124b8:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < mlen; i++) {
 80124bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80124c0:	3301      	adds	r3, #1
 80124c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80124c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80124ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80124ce:	429a      	cmp	r2, r3
 80124d0:	f4ff af6a 	bcc.w	80123a8 <keccak_inc_absorb+0x210>
    }
    s_inc[25] += mlen;
 80124d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80124d8:	33c8      	adds	r3, #200	@ 0xc8
 80124da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124de:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80124e2:	2000      	movs	r0, #0
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80124ec:	31c8      	adds	r1, #200	@ 0xc8
 80124ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80124f2:	4620      	mov	r0, r4
 80124f4:	1810      	adds	r0, r2, r0
 80124f6:	6038      	str	r0, [r7, #0]
 80124f8:	4628      	mov	r0, r5
 80124fa:	eb43 0000 	adc.w	r0, r3, r0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012504:	e9c1 3400 	strd	r3, r4, [r1]
}
 8012508:	bf00      	nop
 801250a:	37c0      	adds	r7, #192	@ 0xc0
 801250c:	46bd      	mov	sp, r7
 801250e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012512 <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8012512:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012516:	b08a      	sub	sp, #40	@ 0x28
 8012518:	af00      	add	r7, sp, #0
 801251a:	6278      	str	r0, [r7, #36]	@ 0x24
 801251c:	6239      	str	r1, [r7, #32]
 801251e:	4613      	mov	r3, r2
 8012520:	77fb      	strb	r3, [r7, #31]
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 8012522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012524:	33c8      	adds	r3, #200	@ 0xc8
 8012526:	e9d3 0100 	ldrd	r0, r1, [r3]
 801252a:	f04f 0200 	mov.w	r2, #0
 801252e:	f04f 0300 	mov.w	r3, #0
 8012532:	08c2      	lsrs	r2, r0, #3
 8012534:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8012538:	08cb      	lsrs	r3, r1, #3
 801253a:	4613      	mov	r3, r2
 801253c:	00db      	lsls	r3, r3, #3
 801253e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012540:	4413      	add	r3, r2
 8012542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012546:	e9c7 0100 	strd	r0, r1, [r7]
 801254a:	7ffb      	ldrb	r3, [r7, #31]
 801254c:	2200      	movs	r2, #0
 801254e:	469a      	mov	sl, r3
 8012550:	4693      	mov	fp, r2
 8012552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012554:	33c8      	adds	r3, #200	@ 0xc8
 8012556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255a:	4613      	mov	r3, r2
 801255c:	f003 0307 	and.w	r3, r3, #7
 8012560:	00da      	lsls	r2, r3, #3
 8012562:	f1a2 0120 	sub.w	r1, r2, #32
 8012566:	f1c2 0320 	rsb	r3, r2, #32
 801256a:	fa0b f502 	lsl.w	r5, fp, r2
 801256e:	fa0a f101 	lsl.w	r1, sl, r1
 8012572:	430d      	orrs	r5, r1
 8012574:	fa2a f303 	lsr.w	r3, sl, r3
 8012578:	431d      	orrs	r5, r3
 801257a:	fa0a f402 	lsl.w	r4, sl, r2
 801257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012580:	33c8      	adds	r3, #200	@ 0xc8
 8012582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012586:	f04f 0200 	mov.w	r2, #0
 801258a:	f04f 0300 	mov.w	r3, #0
 801258e:	08c2      	lsrs	r2, r0, #3
 8012590:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8012594:	08cb      	lsrs	r3, r1, #3
 8012596:	4613      	mov	r3, r2
 8012598:	00db      	lsls	r3, r3, #3
 801259a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801259c:	4413      	add	r3, r2
 801259e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80125a2:	4602      	mov	r2, r0
 80125a4:	4062      	eors	r2, r4
 80125a6:	613a      	str	r2, [r7, #16]
 80125a8:	460a      	mov	r2, r1
 80125aa:	406a      	eors	r2, r5
 80125ac:	617a      	str	r2, [r7, #20]
 80125ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80125b2:	e9c3 1200 	strd	r1, r2, [r3]
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 80125b6:	6a3b      	ldr	r3, [r7, #32]
 80125b8:	3b01      	subs	r3, #1
 80125ba:	08db      	lsrs	r3, r3, #3
 80125bc:	00db      	lsls	r3, r3, #3
 80125be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125c0:	4413      	add	r3, r2
 80125c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80125c6:	6a3b      	ldr	r3, [r7, #32]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	f003 0307 	and.w	r3, r3, #7
 80125ce:	00d9      	lsls	r1, r3, #3
 80125d0:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80125d4:	f04f 0300 	mov.w	r3, #0
 80125d8:	f1a1 0620 	sub.w	r6, r1, #32
 80125dc:	f1c1 0020 	rsb	r0, r1, #32
 80125e0:	fa03 f901 	lsl.w	r9, r3, r1
 80125e4:	fa02 f606 	lsl.w	r6, r2, r6
 80125e8:	ea49 0906 	orr.w	r9, r9, r6
 80125ec:	fa22 f000 	lsr.w	r0, r2, r0
 80125f0:	ea49 0900 	orr.w	r9, r9, r0
 80125f4:	fa02 f801 	lsl.w	r8, r2, r1
 80125f8:	6a3b      	ldr	r3, [r7, #32]
 80125fa:	3b01      	subs	r3, #1
 80125fc:	08db      	lsrs	r3, r3, #3
 80125fe:	00db      	lsls	r3, r3, #3
 8012600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012602:	4413      	add	r3, r2
 8012604:	ea84 0208 	eor.w	r2, r4, r8
 8012608:	60ba      	str	r2, [r7, #8]
 801260a:	ea85 0209 	eor.w	r2, r5, r9
 801260e:	60fa      	str	r2, [r7, #12]
 8012610:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012614:	e9c3 1200 	strd	r1, r2, [r3]
    s_inc[25] = 0;
 8012618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801261a:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 801261e:	f04f 0200 	mov.w	r2, #0
 8012622:	f04f 0300 	mov.w	r3, #0
 8012626:	e9c1 2300 	strd	r2, r3, [r1]
}
 801262a:	bf00      	nop
 801262c:	3728      	adds	r7, #40	@ 0x28
 801262e:	46bd      	mov	sp, r7
 8012630:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012634:	4770      	bx	lr

08012636 <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 8012636:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801263a:	b09e      	sub	sp, #120	@ 0x78
 801263c:	af00      	add	r7, sp, #0
 801263e:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8012640:	66b9      	str	r1, [r7, #104]	@ 0x68
 8012642:	667a      	str	r2, [r7, #100]	@ 0x64
 8012644:	663b      	str	r3, [r7, #96]	@ 0x60
    size_t i;

    /* First consume any bytes we still have sitting around */
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8012646:	2300      	movs	r3, #0
 8012648:	677b      	str	r3, [r7, #116]	@ 0x74
 801264a:	e06d      	b.n	8012728 <keccak_inc_squeeze+0xf2>
        /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
           available byte. We consume from there, i.e., up to r. */
        h[i] = (uint8_t)(s_inc[(r - s_inc[25] + i) >> 3] >> (8 * ((r - s_inc[25] + i) & 0x07)));
 801264c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801264e:	2200      	movs	r2, #0
 8012650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012652:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8012654:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012656:	33c8      	adds	r3, #200	@ 0xc8
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8012660:	4621      	mov	r1, r4
 8012662:	1a89      	subs	r1, r1, r2
 8012664:	6439      	str	r1, [r7, #64]	@ 0x40
 8012666:	4629      	mov	r1, r5
 8012668:	eb61 0303 	sbc.w	r3, r1, r3
 801266c:	647b      	str	r3, [r7, #68]	@ 0x44
 801266e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012670:	2200      	movs	r2, #0
 8012672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012674:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012676:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 801267a:	4623      	mov	r3, r4
 801267c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8012680:	4602      	mov	r2, r0
 8012682:	189b      	adds	r3, r3, r2
 8012684:	633b      	str	r3, [r7, #48]	@ 0x30
 8012686:	462b      	mov	r3, r5
 8012688:	460a      	mov	r2, r1
 801268a:	4153      	adcs	r3, r2
 801268c:	637b      	str	r3, [r7, #52]	@ 0x34
 801268e:	f04f 0200 	mov.w	r2, #0
 8012692:	f04f 0300 	mov.w	r3, #0
 8012696:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801269a:	4621      	mov	r1, r4
 801269c:	08ca      	lsrs	r2, r1, #3
 801269e:	4629      	mov	r1, r5
 80126a0:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 80126a4:	4629      	mov	r1, r5
 80126a6:	08cb      	lsrs	r3, r1, #3
 80126a8:	4613      	mov	r3, r2
 80126aa:	00da      	lsls	r2, r3, #3
 80126ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126ae:	4413      	add	r3, r2
 80126b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80126b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80126b6:	2200      	movs	r2, #0
 80126b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80126ba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80126bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126be:	33c8      	adds	r3, #200	@ 0xc8
 80126c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80126c6:	1a89      	subs	r1, r1, r2
 80126c8:	6539      	str	r1, [r7, #80]	@ 0x50
 80126ca:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80126cc:	eb61 0303 	sbc.w	r3, r1, r3
 80126d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80126d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80126d4:	2200      	movs	r2, #0
 80126d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80126d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80126da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80126e0:	4602      	mov	r2, r0
 80126e2:	189b      	adds	r3, r3, r2
 80126e4:	623b      	str	r3, [r7, #32]
 80126e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126e8:	460a      	mov	r2, r1
 80126ea:	4153      	adcs	r3, r2
 80126ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80126ee:	6a3b      	ldr	r3, [r7, #32]
 80126f0:	f003 0307 	and.w	r3, r3, #7
 80126f4:	00d9      	lsls	r1, r3, #3
 80126f6:	f1c1 0320 	rsb	r3, r1, #32
 80126fa:	f1a1 0220 	sub.w	r2, r1, #32
 80126fe:	fa24 fa01 	lsr.w	sl, r4, r1
 8012702:	fa05 f303 	lsl.w	r3, r5, r3
 8012706:	ea4a 0a03 	orr.w	sl, sl, r3
 801270a:	fa25 f202 	lsr.w	r2, r5, r2
 801270e:	ea4a 0a02 	orr.w	sl, sl, r2
 8012712:	fa25 fb01 	lsr.w	fp, r5, r1
 8012716:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801271a:	441a      	add	r2, r3
 801271c:	fa5f f38a 	uxtb.w	r3, sl
 8012720:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8012722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012724:	3301      	adds	r3, #1
 8012726:	677b      	str	r3, [r7, #116]	@ 0x74
 8012728:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801272a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801272c:	429a      	cmp	r2, r3
 801272e:	d210      	bcs.n	8012752 <keccak_inc_squeeze+0x11c>
 8012730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012732:	2200      	movs	r2, #0
 8012734:	61bb      	str	r3, [r7, #24]
 8012736:	61fa      	str	r2, [r7, #28]
 8012738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801273a:	33c8      	adds	r3, #200	@ 0xc8
 801273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012740:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8012744:	4621      	mov	r1, r4
 8012746:	4291      	cmp	r1, r2
 8012748:	4629      	mov	r1, r5
 801274a:	eb71 0303 	sbcs.w	r3, r1, r3
 801274e:	f4ff af7d 	bcc.w	801264c <keccak_inc_squeeze+0x16>
    }
    h += i;
 8012752:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012756:	4413      	add	r3, r2
 8012758:	66fb      	str	r3, [r7, #108]	@ 0x6c
    outlen -= i;
 801275a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801275c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	66bb      	str	r3, [r7, #104]	@ 0x68
    s_inc[25] -= i;
 8012762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012764:	33c8      	adds	r3, #200	@ 0xc8
 8012766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801276c:	2000      	movs	r0, #0
 801276e:	6139      	str	r1, [r7, #16]
 8012770:	6178      	str	r0, [r7, #20]
 8012772:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8012774:	31c8      	adds	r1, #200	@ 0xc8
 8012776:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801277a:	4620      	mov	r0, r4
 801277c:	1a10      	subs	r0, r2, r0
 801277e:	60b8      	str	r0, [r7, #8]
 8012780:	4628      	mov	r0, r5
 8012782:	eb63 0300 	sbc.w	r3, r3, r0
 8012786:	60fb      	str	r3, [r7, #12]
 8012788:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801278c:	e9c1 3400 	strd	r3, r4, [r1]

    /* Then squeeze the remaining necessary blocks */
    while (outlen > 0) {
 8012790:	e045      	b.n	801281e <keccak_inc_squeeze+0x1e8>
        KeccakF1600_StatePermute(s_inc);
 8012792:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8012794:	f7fc fc72 	bl	800f07c <KeccakF1600_StatePermute>

        for (i = 0; i < outlen && i < r; i++) {
 8012798:	2300      	movs	r3, #0
 801279a:	677b      	str	r3, [r7, #116]	@ 0x74
 801279c:	e023      	b.n	80127e6 <keccak_inc_squeeze+0x1b0>
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 801279e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127a0:	08db      	lsrs	r3, r3, #3
 80127a2:	00db      	lsls	r3, r3, #3
 80127a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80127a6:	4413      	add	r3, r2
 80127a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ac:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80127ae:	f001 0107 	and.w	r1, r1, #7
 80127b2:	00c9      	lsls	r1, r1, #3
 80127b4:	f1c1 0420 	rsb	r4, r1, #32
 80127b8:	f1a1 0020 	sub.w	r0, r1, #32
 80127bc:	fa22 f801 	lsr.w	r8, r2, r1
 80127c0:	fa03 f404 	lsl.w	r4, r3, r4
 80127c4:	ea48 0804 	orr.w	r8, r8, r4
 80127c8:	fa23 f000 	lsr.w	r0, r3, r0
 80127cc:	ea48 0800 	orr.w	r8, r8, r0
 80127d0:	fa23 f901 	lsr.w	r9, r3, r1
 80127d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80127d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127d8:	4413      	add	r3, r2
 80127da:	fa5f f288 	uxtb.w	r2, r8
 80127de:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < outlen && i < r; i++) {
 80127e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127e2:	3301      	adds	r3, #1
 80127e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80127e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80127e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d203      	bcs.n	80127f6 <keccak_inc_squeeze+0x1c0>
 80127ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80127f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d3d3      	bcc.n	801279e <keccak_inc_squeeze+0x168>
        }
        h += i;
 80127f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80127f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127fa:	4413      	add	r3, r2
 80127fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
        outlen -= i;
 80127fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012802:	1ad3      	subs	r3, r2, r3
 8012804:	66bb      	str	r3, [r7, #104]	@ 0x68
        s_inc[25] = r - i;
 8012806:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801280a:	1ad2      	subs	r2, r2, r3
 801280c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801280e:	33c8      	adds	r3, #200	@ 0xc8
 8012810:	2100      	movs	r1, #0
 8012812:	603a      	str	r2, [r7, #0]
 8012814:	6079      	str	r1, [r7, #4]
 8012816:	e9d7 1200 	ldrd	r1, r2, [r7]
 801281a:	e9c3 1200 	strd	r1, r2, [r3]
    while (outlen > 0) {
 801281e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012820:	2b00      	cmp	r3, #0
 8012822:	d1b6      	bne.n	8012792 <keccak_inc_squeeze+0x15c>
    }
}
 8012824:	bf00      	nop
 8012826:	bf00      	nop
 8012828:	3778      	adds	r7, #120	@ 0x78
 801282a:	46bd      	mov	sp, r7
 801282c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012830 <shake256_inc_init>:

void shake128_inc_ctx_release(shake128incctx *state) {
    (void)state;
}

void shake256_inc_init(shake256incctx *state) {
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
    keccak_inc_init(state->ctx);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff fc86 	bl	801214c <keccak_inc_init>
}
 8012840:	bf00      	nop
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <shake256_inc_absorb>:

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 8012854:	68f8      	ldr	r0, [r7, #12]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	68ba      	ldr	r2, [r7, #8]
 801285a:	2188      	movs	r1, #136	@ 0x88
 801285c:	f7ff fc9c 	bl	8012198 <keccak_inc_absorb>
}
 8012860:	bf00      	nop
 8012862:	3710      	adds	r7, #16
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	221f      	movs	r2, #31
 8012874:	2188      	movs	r1, #136	@ 0x88
 8012876:	4618      	mov	r0, r3
 8012878:	f7ff fe4b 	bl	8012512 <keccak_inc_finalize>
}
 801287c:	bf00      	nop
 801287e:	3708      	adds	r7, #8
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	60f8      	str	r0, [r7, #12]
 801288c:	60b9      	str	r1, [r7, #8]
 801288e:	607a      	str	r2, [r7, #4]
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	2388      	movs	r3, #136	@ 0x88
 8012894:	68b9      	ldr	r1, [r7, #8]
 8012896:	68f8      	ldr	r0, [r7, #12]
 8012898:	f7ff fecd 	bl	8012636 <keccak_inc_squeeze>
}
 801289c:	bf00      	nop
 801289e:	3710      	adds	r7, #16
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}

080128a4 <fp_select>:
 * If ctl == 0xFFFFFFFF, then *d is set to a1
 * ctl MUST be either 0x00000000 or 0xFFFFFFFF.
 */
void
fp_select(fp_t *d, const fp_t *a0, const fp_t *a1, uint32_t ctl)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b087      	sub	sp, #28
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	607a      	str	r2, [r7, #4]
 80128b0:	603b      	str	r3, [r7, #0]
    digit_t cw = (int32_t)ctl;
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	613b      	str	r3, [r7, #16]
    for (unsigned int i = 0; i < NWORDS_FIELD; i++) {
 80128b6:	2300      	movs	r3, #0
 80128b8:	617b      	str	r3, [r7, #20]
 80128ba:	e017      	b.n	80128ec <fp_select+0x48>
        (*d)[i] = (*a0)[i] ^ (cw & ((*a0)[i] ^ (*a1)[i]));
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	697a      	ldr	r2, [r7, #20]
 80128c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	6979      	ldr	r1, [r7, #20]
 80128c8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6978      	ldr	r0, [r7, #20]
 80128d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80128d4:	4059      	eors	r1, r3
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	400b      	ands	r3, r1
 80128da:	ea82 0103 	eor.w	r1, r2, r3
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	697a      	ldr	r2, [r7, #20]
 80128e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < NWORDS_FIELD; i++) {
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	3301      	adds	r3, #1
 80128ea:	617b      	str	r3, [r7, #20]
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	2b08      	cmp	r3, #8
 80128f0:	d9e4      	bls.n	80128bc <fp_select+0x18>
    }
}
 80128f2:	bf00      	nop
 80128f4:	bf00      	nop
 80128f6:	371c      	adds	r7, #28
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <fp2_set_small>:

/* Arithmetic modulo X^2 + 1 */

void
fp2_set_small(fp2_t *x, const digit_t val)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]
    fp_set_small(&(x->re), val);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6839      	ldr	r1, [r7, #0]
 801290e:	4618      	mov	r0, r3
 8012910:	f006 ff42 	bl	8019798 <fp_set_small>
    fp_set_zero(&(x->im));
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	3324      	adds	r3, #36	@ 0x24
 8012918:	4618      	mov	r0, r3
 801291a:	f006 ff5b 	bl	80197d4 <fp_set_zero>
}
 801291e:	bf00      	nop
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}

08012926 <fp2_mul_small>:

void
fp2_mul_small(fp2_t *x, const fp2_t *y, uint32_t n)
{
 8012926:	b580      	push	{r7, lr}
 8012928:	b084      	sub	sp, #16
 801292a:	af00      	add	r7, sp, #0
 801292c:	60f8      	str	r0, [r7, #12]
 801292e:	60b9      	str	r1, [r7, #8]
 8012930:	607a      	str	r2, [r7, #4]
    fp_mul_small(&x->re, &y->re, n);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	68b9      	ldr	r1, [r7, #8]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	f006 ff3b 	bl	80197b4 <fp_mul_small>
    fp_mul_small(&x->im, &y->im, n);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	3324      	adds	r3, #36	@ 0x24
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	4619      	mov	r1, r3
 801294c:	f006 ff32 	bl	80197b4 <fp_mul_small>
}
 8012950:	bf00      	nop
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <fp2_set_one>:

void
fp2_set_one(fp2_t *x)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
    fp_set_one(&(x->re));
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	4618      	mov	r0, r3
 8012964:	f006 ff41 	bl	80197ea <fp_set_one>
    fp_set_zero(&(x->im));
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	3324      	adds	r3, #36	@ 0x24
 801296c:	4618      	mov	r0, r3
 801296e:	f006 ff31 	bl	80197d4 <fp_set_zero>
}
 8012972:	bf00      	nop
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <fp2_set_zero>:

void
fp2_set_zero(fp2_t *x)
{
 801297a:	b580      	push	{r7, lr}
 801297c:	b082      	sub	sp, #8
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
    fp_set_zero(&(x->re));
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	4618      	mov	r0, r3
 8012986:	f006 ff25 	bl	80197d4 <fp_set_zero>
    fp_set_zero(&(x->im));
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3324      	adds	r3, #36	@ 0x24
 801298e:	4618      	mov	r0, r3
 8012990:	f006 ff20 	bl	80197d4 <fp_set_zero>
}
 8012994:	bf00      	nop
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <fp2_is_zero>:

// Is a GF(p^2) element zero?
// Returns 0xFF...FF (true) if a=0, 0 (false) otherwise
uint32_t
fp2_is_zero(const fp2_t *a)
{
 801299c:	b590      	push	{r4, r7, lr}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
    return fp_is_zero(&(a->re)) & fp_is_zero(&(a->im));
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	4618      	mov	r0, r3
 80129a8:	f006 ff39 	bl	801981e <fp_is_zero>
 80129ac:	4604      	mov	r4, r0
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	3324      	adds	r3, #36	@ 0x24
 80129b2:	4618      	mov	r0, r3
 80129b4:	f006 ff33 	bl	801981e <fp_is_zero>
 80129b8:	4603      	mov	r3, r0
 80129ba:	4023      	ands	r3, r4
}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd90      	pop	{r4, r7, pc}

080129c4 <fp2_is_equal>:

// Compare two GF(p^2) elements in constant time
// Returns 0xFF...FF (true) if a=b, 0 (false) otherwise
uint32_t
fp2_is_equal(const fp2_t *a, const fp2_t *b)
{
 80129c4:	b590      	push	{r4, r7, lr}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
    return fp_is_equal(&(a->re), &(b->re)) & fp_is_equal(&(a->im), &(b->im));
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	683a      	ldr	r2, [r7, #0]
 80129d2:	4611      	mov	r1, r2
 80129d4:	4618      	mov	r0, r3
 80129d6:	f006 ff13 	bl	8019800 <fp_is_equal>
 80129da:	4604      	mov	r4, r0
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	3324      	adds	r3, #36	@ 0x24
 80129e6:	4619      	mov	r1, r3
 80129e8:	4610      	mov	r0, r2
 80129ea:	f006 ff09 	bl	8019800 <fp_is_equal>
 80129ee:	4603      	mov	r3, r0
 80129f0:	4023      	ands	r3, r4
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	370c      	adds	r7, #12
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd90      	pop	{r4, r7, pc}
	...

080129fc <fp2_is_one>:

// Is a GF(p^2) element one?
// Returns 0xFF...FF (true) if a=1, 0 (false) otherwise
uint32_t
fp2_is_one(const fp2_t *a)
{
 80129fc:	b590      	push	{r4, r7, lr}
 80129fe:	b083      	sub	sp, #12
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
    return fp_is_equal(&(a->re), &ONE) & fp_is_zero(&(a->im));
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	4908      	ldr	r1, [pc, #32]	@ (8012a28 <fp2_is_one+0x2c>)
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f006 fef9 	bl	8019800 <fp_is_equal>
 8012a0e:	4604      	mov	r4, r0
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3324      	adds	r3, #36	@ 0x24
 8012a14:	4618      	mov	r0, r3
 8012a16:	f006 ff02 	bl	801981e <fp_is_zero>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	4023      	ands	r3, r4
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	370c      	adds	r7, #12
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd90      	pop	{r4, r7, pc}
 8012a26:	bf00      	nop
 8012a28:	0803b3b0 	.word	0x0803b3b0

08012a2c <fp2_copy>:

void
fp2_copy(fp2_t *x, const fp2_t *y)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
    fp_copy(&(x->re), &(y->re));
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	683a      	ldr	r2, [r7, #0]
 8012a3a:	4611      	mov	r1, r2
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f006 fefb 	bl	8019838 <fp_copy>
    fp_copy(&(x->im), &(y->im));
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	3324      	adds	r3, #36	@ 0x24
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	4610      	mov	r0, r2
 8012a50:	f006 fef2 	bl	8019838 <fp_copy>
}
 8012a54:	bf00      	nop
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <fp2_add>:

void
fp2_add(fp2_t *x, const fp2_t *y, const fp2_t *z)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	60b9      	str	r1, [r7, #8]
 8012a66:	607a      	str	r2, [r7, #4]
    fp_add(&(x->re), &(y->re), &(z->re));
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	68b9      	ldr	r1, [r7, #8]
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f006 ff01 	bl	8019876 <fp_add>
    fp_add(&(x->im), &(y->im), &(z->im));
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	3324      	adds	r3, #36	@ 0x24
 8012a84:	461a      	mov	r2, r3
 8012a86:	f006 fef6 	bl	8019876 <fp_add>
}
 8012a8a:	bf00      	nop
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
	...

08012a94 <fp2_add_one>:

void
fp2_add_one(fp2_t *x, const fp2_t *y)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
    fp_add(&x->re, &y->re, &ONE);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6839      	ldr	r1, [r7, #0]
 8012aa2:	4a08      	ldr	r2, [pc, #32]	@ (8012ac4 <fp2_add_one+0x30>)
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f006 fee6 	bl	8019876 <fp_add>
    fp_copy(&x->im, &y->im);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	3324      	adds	r3, #36	@ 0x24
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	4610      	mov	r0, r2
 8012ab8:	f006 febe 	bl	8019838 <fp_copy>
}
 8012abc:	bf00      	nop
 8012abe:	3708      	adds	r7, #8
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	0803b3b0 	.word	0x0803b3b0

08012ac8 <fp2_sub>:

void
fp2_sub(fp2_t *x, const fp2_t *y, const fp2_t *z)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]
    fp_sub(&(x->re), &(y->re), &(z->re));
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	68b9      	ldr	r1, [r7, #8]
 8012ad8:	687a      	ldr	r2, [r7, #4]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f006 feda 	bl	8019894 <fp_sub>
    fp_sub(&(x->im), &(y->im), &(z->im));
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	3324      	adds	r3, #36	@ 0x24
 8012af0:	461a      	mov	r2, r3
 8012af2:	f006 fecf 	bl	8019894 <fp_sub>
}
 8012af6:	bf00      	nop
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <fp2_neg>:

void
fp2_neg(fp2_t *x, const fp2_t *y)
{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b082      	sub	sp, #8
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	6039      	str	r1, [r7, #0]
    fp_neg(&(x->re), &(y->re));
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	683a      	ldr	r2, [r7, #0]
 8012b0c:	4611      	mov	r1, r2
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f006 fecf 	bl	80198b2 <fp_neg>
    fp_neg(&(x->im), &(y->im));
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	3324      	adds	r3, #36	@ 0x24
 8012b1e:	4619      	mov	r1, r3
 8012b20:	4610      	mov	r0, r2
 8012b22:	f006 fec6 	bl	80198b2 <fp_neg>
}
 8012b26:	bf00      	nop
 8012b28:	3708      	adds	r7, #8
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}

08012b2e <fp2_mul>:

void
fp2_mul(fp2_t *x, const fp2_t *y, const fp2_t *z)
{
 8012b2e:	b580      	push	{r7, lr}
 8012b30:	b096      	sub	sp, #88	@ 0x58
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	60f8      	str	r0, [r7, #12]
 8012b36:	60b9      	str	r1, [r7, #8]
 8012b38:	607a      	str	r2, [r7, #4]
    fp_t t0, t1;

    fp_add(&t0, &(y->re), &(y->im));
 8012b3a:	68b9      	ldr	r1, [r7, #8]
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012b42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012b46:	4618      	mov	r0, r3
 8012b48:	f006 fe95 	bl	8019876 <fp_add>
    fp_add(&t1, &(z->re), &(z->im));
 8012b4c:	6879      	ldr	r1, [r7, #4]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012b54:	f107 0310 	add.w	r3, r7, #16
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f006 fe8c 	bl	8019876 <fp_add>
    fp_mul(&t0, &t0, &t1);
 8012b5e:	f107 0210 	add.w	r2, r7, #16
 8012b62:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8012b66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f006 febb 	bl	80198e6 <fp_mul>
    fp_mul(&t1, &(y->im), &(z->im));
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012b7c:	f107 0310 	add.w	r3, r7, #16
 8012b80:	4618      	mov	r0, r3
 8012b82:	f006 feb0 	bl	80198e6 <fp_mul>
    fp_mul(&(x->re), &(y->re), &(z->re));
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	68b9      	ldr	r1, [r7, #8]
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f006 feaa 	bl	80198e6 <fp_mul>
    fp_sub(&(x->im), &t0, &t1);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	3324      	adds	r3, #36	@ 0x24
 8012b96:	f107 0210 	add.w	r2, r7, #16
 8012b9a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f006 fe78 	bl	8019894 <fp_sub>
    fp_sub(&(x->im), &(x->im), &(x->re));
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	3324      	adds	r3, #36	@ 0x24
 8012bae:	68fa      	ldr	r2, [r7, #12]
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	f006 fe6f 	bl	8019894 <fp_sub>
    fp_sub(&(x->re), &(x->re), &t1);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	68f9      	ldr	r1, [r7, #12]
 8012bba:	f107 0210 	add.w	r2, r7, #16
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f006 fe68 	bl	8019894 <fp_sub>
}
 8012bc4:	bf00      	nop
 8012bc6:	3758      	adds	r7, #88	@ 0x58
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <fp2_sqr>:

void
fp2_sqr(fp2_t *x, const fp2_t *y)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b094      	sub	sp, #80	@ 0x50
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
    fp_t sum, diff;

    fp_add(&sum, &(y->re), &(y->im));
 8012bd6:	6839      	ldr	r1, [r7, #0]
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012be2:	4618      	mov	r0, r3
 8012be4:	f006 fe47 	bl	8019876 <fp_add>
    fp_sub(&diff, &(y->re), &(y->im));
 8012be8:	6839      	ldr	r1, [r7, #0]
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012bf0:	f107 0308 	add.w	r3, r7, #8
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f006 fe4d 	bl	8019894 <fp_sub>
    fp_mul(&(x->im), &(y->re), &(y->im));
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012c00:	6839      	ldr	r1, [r7, #0]
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	3324      	adds	r3, #36	@ 0x24
 8012c06:	461a      	mov	r2, r3
 8012c08:	f006 fe6d 	bl	80198e6 <fp_mul>
    fp_add(&(x->im), &(x->im), &(x->im));
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3324      	adds	r3, #36	@ 0x24
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	f006 fe2a 	bl	8019876 <fp_add>
    fp_mul(&(x->re), &sum, &diff);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f107 0208 	add.w	r2, r7, #8
 8012c28:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f006 fe5a 	bl	80198e6 <fp_mul>
}
 8012c32:	bf00      	nop
 8012c34:	3750      	adds	r7, #80	@ 0x50
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <fp2_inv>:

void
fp2_inv(fp2_t *x)
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b094      	sub	sp, #80	@ 0x50
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
    fp_t t0, t1;

    fp_sqr(&t0, &(x->re));
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012c48:	4611      	mov	r1, r2
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f006 fe3e 	bl	80198cc <fp_sqr>
    fp_sqr(&t1, &(x->im));
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012c56:	f107 0308 	add.w	r3, r7, #8
 8012c5a:	4611      	mov	r1, r2
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f006 fe35 	bl	80198cc <fp_sqr>
    fp_add(&t0, &t0, &t1);
 8012c62:	f107 0208 	add.w	r2, r7, #8
 8012c66:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8012c6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f006 fe01 	bl	8019876 <fp_add>
    fp_inv(&t0);
 8012c74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f006 fe43 	bl	8019904 <fp_inv>
    fp_mul(&(x->re), &(x->re), &t0);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6879      	ldr	r1, [r7, #4]
 8012c82:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012c86:	4618      	mov	r0, r3
 8012c88:	f006 fe2d 	bl	80198e6 <fp_mul>
    fp_mul(&(x->im), &(x->im), &t0);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	3324      	adds	r3, #36	@ 0x24
 8012c96:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	f006 fe23 	bl	80198e6 <fp_mul>
    fp_neg(&(x->im), &(x->im));
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	3324      	adds	r3, #36	@ 0x24
 8012caa:	4619      	mov	r1, r3
 8012cac:	4610      	mov	r0, r2
 8012cae:	f006 fe00 	bl	80198b2 <fp_neg>
}
 8012cb2:	bf00      	nop
 8012cb4:	3750      	adds	r7, #80	@ 0x50
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <fp2_is_square>:

uint32_t
fp2_is_square(const fp2_t *x)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b094      	sub	sp, #80	@ 0x50
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
    fp_t t0, t1;

    fp_sqr(&t0, &(x->re));
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012cc8:	4611      	mov	r1, r2
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f006 fdfe 	bl	80198cc <fp_sqr>
    fp_sqr(&t1, &(x->im));
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012cd6:	f107 0308 	add.w	r3, r7, #8
 8012cda:	4611      	mov	r1, r2
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f006 fdf5 	bl	80198cc <fp_sqr>
    fp_add(&t0, &t0, &t1);
 8012ce2:	f107 0208 	add.w	r2, r7, #8
 8012ce6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8012cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f006 fdc1 	bl	8019876 <fp_add>

    return fp_is_square(&t0);
 8012cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f006 fe10 	bl	801991e <fp_is_square>
 8012cfe:	4603      	mov	r3, r0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3750      	adds	r7, #80	@ 0x50
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <fp2_sqrt>:

void
fp2_sqrt(fp2_t *a)
{
 8012d08:	b590      	push	{r4, r7, lr}
 8012d0a:	b0b5      	sub	sp, #212	@ 0xd4
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]

    /* From "Optimized One-Dimensional SQIsign Verification on Intel and
     * Cortex-M4" by Aardal et al: https://eprint.iacr.org/2024/1563 */

    // x0 = \delta = sqrt(a0^2 + a1^2).
    fp_sqr(&x0, &(a->re));
 8012d10:	687a      	ldr	r2, [r7, #4]
 8012d12:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d16:	4611      	mov	r1, r2
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f006 fdd7 	bl	80198cc <fp_sqr>
    fp_sqr(&x1, &(a->im));
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012d24:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8012d28:	4611      	mov	r1, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f006 fdce 	bl	80198cc <fp_sqr>
    fp_add(&x0, &x0, &x1);
 8012d30:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8012d34:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8012d38:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f006 fd9a 	bl	8019876 <fp_add>
    fp_sqrt(&x0);
 8012d42:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d46:	4618      	mov	r0, r3
 8012d48:	f006 fdf7 	bl	801993a <fp_sqrt>
    // If a1 = 0, there is a risk of \delta = -a0, which makes x0 = 0 below.
    // In that case, we restore the value \delta = a0.
    fp_select(&x0, &x0, &(a->re), fp_is_zero(&(a->im)));
 8012d4c:	687c      	ldr	r4, [r7, #4]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	3324      	adds	r3, #36	@ 0x24
 8012d52:	4618      	mov	r0, r3
 8012d54:	f006 fd63 	bl	801981e <fp_is_zero>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8012d5e:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8012d62:	4622      	mov	r2, r4
 8012d64:	f7ff fd9e 	bl	80128a4 <fp_select>
    // x0 = \delta + a0, t0 = 2 * x0.
    fp_add(&x0, &x0, &(a->re));
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8012d6e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d72:	4618      	mov	r0, r3
 8012d74:	f006 fd7f 	bl	8019876 <fp_add>
    fp_add(&t0, &x0, &x0);
 8012d78:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8012d7c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8012d80:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012d84:	4618      	mov	r0, r3
 8012d86:	f006 fd76 	bl	8019876 <fp_add>

    // x1 = t0^(p-3)/4
    fp_exp3div4(&x1, &t0);
 8012d8a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012d8e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8012d92:	4611      	mov	r1, r2
 8012d94:	4618      	mov	r0, r3
 8012d96:	f006 fded 	bl	8019974 <fp_exp3div4>

    // x0 = x0 * x1, x1 = x1 * a1, t1 = (2x0)^2.
    fp_mul(&x0, &x0, &x1);
 8012d9a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8012d9e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8012da2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012da6:	4618      	mov	r0, r3
 8012da8:	f006 fd9d 	bl	80198e6 <fp_mul>
    fp_mul(&x1, &x1, &(a->im));
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012db2:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8012db6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f006 fd93 	bl	80198e6 <fp_mul>
    fp_add(&t1, &x0, &x0);
 8012dc0:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8012dc4:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8012dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f006 fd52 	bl	8019876 <fp_add>
    fp_sqr(&t1, &t1);
 8012dd2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012dda:	4611      	mov	r1, r2
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f006 fd75 	bl	80198cc <fp_sqr>
    // If t1 = t0, return x0 + x1*i, otherwise x1 - x0*i.
    fp_sub(&t0, &t0, &t1);
 8012de2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012de6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8012dea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012dee:	4618      	mov	r0, r3
 8012df0:	f006 fd50 	bl	8019894 <fp_sub>
    uint32_t f = fp_is_zero(&t0);
 8012df4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f006 fd10 	bl	801981e <fp_is_zero>
 8012dfe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    fp_neg(&t1, &x0);
 8012e02:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8012e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012e0a:	4611      	mov	r1, r2
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f006 fd50 	bl	80198b2 <fp_neg>
    fp_copy(&t0, &x1);
 8012e12:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8012e16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012e1a:	4611      	mov	r1, r2
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f006 fd0b 	bl	8019838 <fp_copy>
    fp_select(&t0, &t0, &x0, f);
 8012e22:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8012e26:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8012e2a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8012e2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012e32:	f7ff fd37 	bl	80128a4 <fp_select>
    fp_select(&t1, &t1, &x1, f);
 8012e36:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8012e3a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8012e3e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012e46:	f7ff fd2d 	bl	80128a4 <fp_select>

    // Check if t0 is zero
    uint32_t t0_is_zero = fp_is_zero(&t0);
 8012e4a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f006 fce5 	bl	801981e <fp_is_zero>
 8012e54:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

    // Check whether t0, t1 are odd
    // Note: we encode to ensure canonical representation
    uint8_t tmp_bytes[FP_ENCODED_BYTES];
    fp_encode(tmp_bytes, &t0);
 8012e58:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012e5c:	f107 030c 	add.w	r3, r7, #12
 8012e60:	4611      	mov	r1, r2
 8012e62:	4618      	mov	r0, r3
 8012e64:	f006 fda4 	bl	80199b0 <fp_encode>
    uint32_t t0_is_odd = -((uint32_t)tmp_bytes[0] & 1);
 8012e68:	7b3b      	ldrb	r3, [r7, #12]
 8012e6a:	f003 0301 	and.w	r3, r3, #1
 8012e6e:	425b      	negs	r3, r3
 8012e70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    fp_encode(tmp_bytes, &t1);
 8012e74:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012e78:	f107 030c 	add.w	r3, r7, #12
 8012e7c:	4611      	mov	r1, r2
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f006 fd96 	bl	80199b0 <fp_encode>
    uint32_t t1_is_odd = -((uint32_t)tmp_bytes[0] & 1);
 8012e84:	7b3b      	ldrb	r3, [r7, #12]
 8012e86:	f003 0301 	and.w	r3, r3, #1
 8012e8a:	425b      	negs	r3, r3
 8012e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

    // We negate the output if:
    // t0 is odd, or
    // t0 is zero and t1 is odd
    uint32_t negate_output = t0_is_odd | (t0_is_zero & t1_is_odd);
 8012e90:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8012e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012e98:	4013      	ands	r3, r2
 8012e9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    fp_neg(&x0, &t0);
 8012ea4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012ea8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012eac:	4611      	mov	r1, r2
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f006 fcff 	bl	80198b2 <fp_neg>
    fp_select(&(a->re), &t0, &x0, negate_output);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8012eba:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8012ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ec2:	f7ff fcef 	bl	80128a4 <fp_select>
    fp_neg(&x0, &t1);
 8012ec6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012eca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012ece:	4611      	mov	r1, r2
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f006 fcee 	bl	80198b2 <fp_neg>
    fp_select(&(a->im), &t1, &x0, negate_output);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012edc:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8012ee0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8012ee4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ee8:	f7ff fcdc 	bl	80128a4 <fp_select>
}
 8012eec:	bf00      	nop
 8012eee:	37d4      	adds	r7, #212	@ 0xd4
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd90      	pop	{r4, r7, pc}

08012ef4 <fp2_sqrt_verify>:

uint32_t
fp2_sqrt_verify(fp2_t *a)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b0a6      	sub	sp, #152	@ 0x98
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
    fp2_t t0, t1;

    fp2_copy(&t0, a);
 8012efc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012f00:	6879      	ldr	r1, [r7, #4]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7ff fd92 	bl	8012a2c <fp2_copy>
    fp2_sqrt(a);
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7ff fefd 	bl	8012d08 <fp2_sqrt>
    fp2_sqr(&t1, a);
 8012f0e:	f107 0308 	add.w	r3, r7, #8
 8012f12:	6879      	ldr	r1, [r7, #4]
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7ff fe59 	bl	8012bcc <fp2_sqr>

    return (fp2_is_equal(&t0, &t1));
 8012f1a:	f107 0208 	add.w	r2, r7, #8
 8012f1e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012f22:	4611      	mov	r1, r2
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7ff fd4d 	bl	80129c4 <fp2_is_equal>
 8012f2a:	4603      	mov	r3, r0
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3798      	adds	r7, #152	@ 0x98
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <fp2_half>:

void
fp2_half(fp2_t *x, const fp2_t *y)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
    fp_half(&(x->re), &(y->re));
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	683a      	ldr	r2, [r7, #0]
 8012f42:	4611      	mov	r1, r2
 8012f44:	4618      	mov	r0, r3
 8012f46:	f006 fd05 	bl	8019954 <fp_half>
    fp_half(&(x->im), &(y->im));
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	3324      	adds	r3, #36	@ 0x24
 8012f54:	4619      	mov	r1, r3
 8012f56:	4610      	mov	r0, r2
 8012f58:	f006 fcfc 	bl	8019954 <fp_half>
}
 8012f5c:	bf00      	nop
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <fp2_batched_inv>:

void
fp2_batched_inv(fp2_t *x, int len)
{
 8012f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f68:	b0a9      	sub	sp, #164	@ 0xa4
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8012f6e:	6339      	str	r1, [r7, #48]	@ 0x30
 8012f70:	466b      	mov	r3, sp
 8012f72:	607b      	str	r3, [r7, #4]
    fp2_t t1[len], t2[len];
 8012f74:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8012f76:	1e73      	subs	r3, r6, #1
 8012f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012f7c:	4632      	mov	r2, r6
 8012f7e:	2300      	movs	r3, #0
 8012f80:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012f88:	f04f 0000 	mov.w	r0, #0
 8012f8c:	f04f 0100 	mov.w	r1, #0
 8012f90:	00d9      	lsls	r1, r3, #3
 8012f92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012f96:	00d0      	lsls	r0, r2, #3
 8012f98:	4602      	mov	r2, r0
 8012f9a:	460b      	mov	r3, r1
 8012f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012f9e:	1854      	adds	r4, r2, r1
 8012fa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012fa2:	eb43 0101 	adc.w	r1, r3, r1
 8012fa6:	460d      	mov	r5, r1
 8012fa8:	f04f 0200 	mov.w	r2, #0
 8012fac:	f04f 0300 	mov.w	r3, #0
 8012fb0:	01ab      	lsls	r3, r5, #6
 8012fb2:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8012fb6:	01a2      	lsls	r2, r4, #6
 8012fb8:	4632      	mov	r2, r6
 8012fba:	2300      	movs	r3, #0
 8012fbc:	623a      	str	r2, [r7, #32]
 8012fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fc0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8012fc4:	4622      	mov	r2, r4
 8012fc6:	462b      	mov	r3, r5
 8012fc8:	f04f 0000 	mov.w	r0, #0
 8012fcc:	f04f 0100 	mov.w	r1, #0
 8012fd0:	00d9      	lsls	r1, r3, #3
 8012fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012fd6:	00d0      	lsls	r0, r2, #3
 8012fd8:	4602      	mov	r2, r0
 8012fda:	460b      	mov	r3, r1
 8012fdc:	4621      	mov	r1, r4
 8012fde:	eb12 0801 	adds.w	r8, r2, r1
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	eb43 0901 	adc.w	r9, r3, r1
 8012fe8:	f04f 0200 	mov.w	r2, #0
 8012fec:	f04f 0300 	mov.w	r3, #0
 8012ff0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8012ff4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8012ff8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8012ffc:	4632      	mov	r2, r6
 8012ffe:	4613      	mov	r3, r2
 8013000:	00db      	lsls	r3, r3, #3
 8013002:	4413      	add	r3, r2
 8013004:	00db      	lsls	r3, r3, #3
 8013006:	3307      	adds	r3, #7
 8013008:	08db      	lsrs	r3, r3, #3
 801300a:	00db      	lsls	r3, r3, #3
 801300c:	ebad 0d03 	sub.w	sp, sp, r3
 8013010:	466b      	mov	r3, sp
 8013012:	3303      	adds	r3, #3
 8013014:	089b      	lsrs	r3, r3, #2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801301c:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 801301e:	1e63      	subs	r3, r4, #1
 8013020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013024:	4622      	mov	r2, r4
 8013026:	2300      	movs	r3, #0
 8013028:	61ba      	str	r2, [r7, #24]
 801302a:	61fb      	str	r3, [r7, #28]
 801302c:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8013030:	462a      	mov	r2, r5
 8013032:	4633      	mov	r3, r6
 8013034:	f04f 0000 	mov.w	r0, #0
 8013038:	f04f 0100 	mov.w	r1, #0
 801303c:	00d9      	lsls	r1, r3, #3
 801303e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013042:	00d0      	lsls	r0, r2, #3
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	4629      	mov	r1, r5
 801304a:	1851      	adds	r1, r2, r1
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	4631      	mov	r1, r6
 8013050:	eb43 0101 	adc.w	r1, r3, r1
 8013054:	60f9      	str	r1, [r7, #12]
 8013056:	f04f 0200 	mov.w	r2, #0
 801305a:	f04f 0300 	mov.w	r3, #0
 801305e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8013062:	4631      	mov	r1, r6
 8013064:	018b      	lsls	r3, r1, #6
 8013066:	4629      	mov	r1, r5
 8013068:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801306c:	4629      	mov	r1, r5
 801306e:	018a      	lsls	r2, r1, #6
 8013070:	4622      	mov	r2, r4
 8013072:	2300      	movs	r3, #0
 8013074:	613a      	str	r2, [r7, #16]
 8013076:	617b      	str	r3, [r7, #20]
 8013078:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 801307c:	462a      	mov	r2, r5
 801307e:	4633      	mov	r3, r6
 8013080:	f04f 0000 	mov.w	r0, #0
 8013084:	f04f 0100 	mov.w	r1, #0
 8013088:	00d9      	lsls	r1, r3, #3
 801308a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801308e:	00d0      	lsls	r0, r2, #3
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	4629      	mov	r1, r5
 8013096:	eb12 0a01 	adds.w	sl, r2, r1
 801309a:	4631      	mov	r1, r6
 801309c:	eb43 0b01 	adc.w	fp, r3, r1
 80130a0:	f04f 0200 	mov.w	r2, #0
 80130a4:	f04f 0300 	mov.w	r3, #0
 80130a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80130ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80130b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80130b4:	4622      	mov	r2, r4
 80130b6:	4613      	mov	r3, r2
 80130b8:	00db      	lsls	r3, r3, #3
 80130ba:	4413      	add	r3, r2
 80130bc:	00db      	lsls	r3, r3, #3
 80130be:	3307      	adds	r3, #7
 80130c0:	08db      	lsrs	r3, r3, #3
 80130c2:	00db      	lsls	r3, r3, #3
 80130c4:	ebad 0d03 	sub.w	sp, sp, r3
 80130c8:	466b      	mov	r3, sp
 80130ca:	3303      	adds	r3, #3
 80130cc:	089b      	lsrs	r3, r3, #2
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    fp2_t inverse;

    // x = x0,...,xn
    // t1 = x0, x0*x1, ... ,x0 * x1 * ... * xn
    fp2_copy(&t1[0], &x[0]);
 80130d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80130d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80130da:	4618      	mov	r0, r3
 80130dc:	f7ff fca6 	bl	8012a2c <fp2_copy>
    for (int i = 1; i < len; i++) {
 80130e0:	2301      	movs	r3, #1
 80130e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80130e6:	e023      	b.n	8013130 <fp2_batched_inv+0x1cc>
        fp2_mul(&t1[i], &t1[i - 1], &x[i]);
 80130e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80130ec:	4613      	mov	r3, r2
 80130ee:	00db      	lsls	r3, r3, #3
 80130f0:	4413      	add	r3, r2
 80130f2:	00db      	lsls	r3, r3, #3
 80130f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80130f8:	18d0      	adds	r0, r2, r3
 80130fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80130fe:	1e5a      	subs	r2, r3, #1
 8013100:	4613      	mov	r3, r2
 8013102:	00db      	lsls	r3, r3, #3
 8013104:	4413      	add	r3, r2
 8013106:	00db      	lsls	r3, r3, #3
 8013108:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801310c:	18d1      	adds	r1, r2, r3
 801310e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013112:	4613      	mov	r3, r2
 8013114:	00db      	lsls	r3, r3, #3
 8013116:	4413      	add	r3, r2
 8013118:	00db      	lsls	r3, r3, #3
 801311a:	461a      	mov	r2, r3
 801311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801311e:	4413      	add	r3, r2
 8013120:	461a      	mov	r2, r3
 8013122:	f7ff fd04 	bl	8012b2e <fp2_mul>
    for (int i = 1; i < len; i++) {
 8013126:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801312a:	3301      	adds	r3, #1
 801312c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013130:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013136:	429a      	cmp	r2, r3
 8013138:	dbd6      	blt.n	80130e8 <fp2_batched_inv+0x184>
    }

    // inverse = 1/ (x0 * x1 * ... * xn)
    fp2_copy(&inverse, &t1[len - 1]);
 801313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801313c:	1e5a      	subs	r2, r3, #1
 801313e:	4613      	mov	r3, r2
 8013140:	00db      	lsls	r3, r3, #3
 8013142:	4413      	add	r3, r2
 8013144:	00db      	lsls	r3, r3, #3
 8013146:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801314a:	441a      	add	r2, r3
 801314c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013150:	4611      	mov	r1, r2
 8013152:	4618      	mov	r0, r3
 8013154:	f7ff fc6a 	bl	8012a2c <fp2_copy>
    fp2_inv(&inverse);
 8013158:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801315c:	4618      	mov	r0, r3
 801315e:	f7ff fd6c 	bl	8012c3a <fp2_inv>

    fp2_copy(&t2[0], &inverse);
 8013162:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013166:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801316a:	4611      	mov	r1, r2
 801316c:	4618      	mov	r0, r3
 801316e:	f7ff fc5d 	bl	8012a2c <fp2_copy>
    // t2 = 1/ (x0 * x1 * ... * xn), 1/ (x0 * x1 * ... * x(n-1)) , ... , 1/xO
    for (int i = 1; i < len; i++) {
 8013172:	2301      	movs	r3, #1
 8013174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013178:	e026      	b.n	80131c8 <fp2_batched_inv+0x264>
        fp2_mul(&t2[i], &t2[i - 1], &x[len - i]);
 801317a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801317e:	4613      	mov	r3, r2
 8013180:	00db      	lsls	r3, r3, #3
 8013182:	4413      	add	r3, r2
 8013184:	00db      	lsls	r3, r3, #3
 8013186:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801318a:	18d0      	adds	r0, r2, r3
 801318c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013190:	1e5a      	subs	r2, r3, #1
 8013192:	4613      	mov	r3, r2
 8013194:	00db      	lsls	r3, r3, #3
 8013196:	4413      	add	r3, r2
 8013198:	00db      	lsls	r3, r3, #3
 801319a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801319e:	18d1      	adds	r1, r2, r3
 80131a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80131a6:	1ad3      	subs	r3, r2, r3
 80131a8:	461a      	mov	r2, r3
 80131aa:	4613      	mov	r3, r2
 80131ac:	00db      	lsls	r3, r3, #3
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	461a      	mov	r2, r3
 80131b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131b6:	4413      	add	r3, r2
 80131b8:	461a      	mov	r2, r3
 80131ba:	f7ff fcb8 	bl	8012b2e <fp2_mul>
    for (int i = 1; i < len; i++) {
 80131be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80131c2:	3301      	adds	r3, #1
 80131c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80131c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80131cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ce:	429a      	cmp	r2, r3
 80131d0:	dbd3      	blt.n	801317a <fp2_batched_inv+0x216>
    }

    fp2_copy(&x[0], &t2[len - 1]);
 80131d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d4:	1e5a      	subs	r2, r3, #1
 80131d6:	4613      	mov	r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	4413      	add	r3, r2
 80131dc:	00db      	lsls	r3, r3, #3
 80131de:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80131e2:	4413      	add	r3, r2
 80131e4:	4619      	mov	r1, r3
 80131e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80131e8:	f7ff fc20 	bl	8012a2c <fp2_copy>

    for (int i = 1; i < len; i++) {
 80131ec:	2301      	movs	r3, #1
 80131ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80131f2:	e026      	b.n	8013242 <fp2_batched_inv+0x2de>
        fp2_mul(&x[i], &t1[i - 1], &t2[len - i - 1]);
 80131f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80131f8:	4613      	mov	r3, r2
 80131fa:	00db      	lsls	r3, r3, #3
 80131fc:	4413      	add	r3, r2
 80131fe:	00db      	lsls	r3, r3, #3
 8013200:	461a      	mov	r2, r3
 8013202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013204:	1898      	adds	r0, r3, r2
 8013206:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801320a:	1e5a      	subs	r2, r3, #1
 801320c:	4613      	mov	r3, r2
 801320e:	00db      	lsls	r3, r3, #3
 8013210:	4413      	add	r3, r2
 8013212:	00db      	lsls	r3, r3, #3
 8013214:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013218:	18d1      	adds	r1, r2, r3
 801321a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801321c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013220:	1ad3      	subs	r3, r2, r3
 8013222:	1e5a      	subs	r2, r3, #1
 8013224:	4613      	mov	r3, r2
 8013226:	00db      	lsls	r3, r3, #3
 8013228:	4413      	add	r3, r2
 801322a:	00db      	lsls	r3, r3, #3
 801322c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013230:	4413      	add	r3, r2
 8013232:	461a      	mov	r2, r3
 8013234:	f7ff fc7b 	bl	8012b2e <fp2_mul>
    for (int i = 1; i < len; i++) {
 8013238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801323c:	3301      	adds	r3, #1
 801323e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013242:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013248:	429a      	cmp	r2, r3
 801324a:	dbd3      	blt.n	80131f4 <fp2_batched_inv+0x290>
 801324c:	f8d7 d004 	ldr.w	sp, [r7, #4]
    }
}
 8013250:	bf00      	nop
 8013252:	37a4      	adds	r7, #164	@ 0xa4
 8013254:	46bd      	mov	sp, r7
 8013256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801325a <fp2_pow_vartime>:

// exponentiation using square and multiply
// Warning!! Not constant time!
void
fp2_pow_vartime(fp2_t *out, const fp2_t *x, const digit_t *exp, const int size)
{
 801325a:	b580      	push	{r7, lr}
 801325c:	b09a      	sub	sp, #104	@ 0x68
 801325e:	af00      	add	r7, sp, #0
 8013260:	60f8      	str	r0, [r7, #12]
 8013262:	60b9      	str	r1, [r7, #8]
 8013264:	607a      	str	r2, [r7, #4]
 8013266:	603b      	str	r3, [r7, #0]
    fp2_t acc;
    digit_t bit;

    fp2_copy(&acc, x);
 8013268:	f107 0314 	add.w	r3, r7, #20
 801326c:	68b9      	ldr	r1, [r7, #8]
 801326e:	4618      	mov	r0, r3
 8013270:	f7ff fbdc 	bl	8012a2c <fp2_copy>
    fp2_set_one(out);
 8013274:	68f8      	ldr	r0, [r7, #12]
 8013276:	f7ff fb6f 	bl	8012958 <fp2_set_one>

    // Iterate over each word of exp
    for (int j = 0; j < size; j++) {
 801327a:	2300      	movs	r3, #0
 801327c:	667b      	str	r3, [r7, #100]	@ 0x64
 801327e:	e028      	b.n	80132d2 <fp2_pow_vartime+0x78>
        // Iterate over each bit of the word
        for (int i = 0; i < RADIX; i++) {
 8013280:	2300      	movs	r3, #0
 8013282:	663b      	str	r3, [r7, #96]	@ 0x60
 8013284:	e01f      	b.n	80132c6 <fp2_pow_vartime+0x6c>
            bit = (exp[j] >> i) & 1;
 8013286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	4413      	add	r3, r2
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013292:	fa22 f303 	lsr.w	r3, r2, r3
 8013296:	f003 0301 	and.w	r3, r3, #1
 801329a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (bit == 1) {
 801329c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801329e:	2b01      	cmp	r3, #1
 80132a0:	d106      	bne.n	80132b0 <fp2_pow_vartime+0x56>
                fp2_mul(out, out, &acc);
 80132a2:	f107 0314 	add.w	r3, r7, #20
 80132a6:	461a      	mov	r2, r3
 80132a8:	68f9      	ldr	r1, [r7, #12]
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	f7ff fc3f 	bl	8012b2e <fp2_mul>
            }
            fp2_sqr(&acc, &acc);
 80132b0:	f107 0214 	add.w	r2, r7, #20
 80132b4:	f107 0314 	add.w	r3, r7, #20
 80132b8:	4611      	mov	r1, r2
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7ff fc86 	bl	8012bcc <fp2_sqr>
        for (int i = 0; i < RADIX; i++) {
 80132c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80132c2:	3301      	adds	r3, #1
 80132c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80132c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80132c8:	2b1f      	cmp	r3, #31
 80132ca:	dddc      	ble.n	8013286 <fp2_pow_vartime+0x2c>
    for (int j = 0; j < size; j++) {
 80132cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80132ce:	3301      	adds	r3, #1
 80132d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80132d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	dbd2      	blt.n	8013280 <fp2_pow_vartime+0x26>
        }
    }
}
 80132da:	bf00      	nop
 80132dc:	bf00      	nop
 80132de:	3768      	adds	r7, #104	@ 0x68
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <fp2_encode>:
    printf("\n");
}

void
fp2_encode(void *dst, const fp2_t *a)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
    uint8_t *buf = dst;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	60fb      	str	r3, [r7, #12]
    fp_encode(buf, &(a->re));
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	4619      	mov	r1, r3
 80132f6:	68f8      	ldr	r0, [r7, #12]
 80132f8:	f006 fb5a 	bl	80199b0 <fp_encode>
    fp_encode(buf + FP_ENCODED_BYTES, &(a->im));
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	f103 0220 	add.w	r2, r3, #32
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	3324      	adds	r3, #36	@ 0x24
 8013306:	4619      	mov	r1, r3
 8013308:	4610      	mov	r0, r2
 801330a:	f006 fb51 	bl	80199b0 <fp_encode>
}
 801330e:	bf00      	nop
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <fp2_decode>:

uint32_t
fp2_decode(fp2_t *d, const void *src)
{
 8013316:	b580      	push	{r7, lr}
 8013318:	b086      	sub	sp, #24
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
 801331e:	6039      	str	r1, [r7, #0]
    const uint8_t *buf = src;
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	617b      	str	r3, [r7, #20]
    uint32_t re, im;

    re = fp_decode(&(d->re), buf);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6979      	ldr	r1, [r7, #20]
 8013328:	4618      	mov	r0, r3
 801332a:	f006 fb66 	bl	80199fa <fp_decode>
 801332e:	6138      	str	r0, [r7, #16]
    im = fp_decode(&(d->im), buf + FP_ENCODED_BYTES);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	3320      	adds	r3, #32
 801333a:	4619      	mov	r1, r3
 801333c:	4610      	mov	r0, r2
 801333e:	f006 fb5c 	bl	80199fa <fp_decode>
 8013342:	60f8      	str	r0, [r7, #12]
    return re & im;
 8013344:	693a      	ldr	r2, [r7, #16]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	4013      	ands	r3, r2
}
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <fp2_select>:

void
fp2_select(fp2_t *d, const fp2_t *a0, const fp2_t *a1, uint32_t ctl)
{
 8013352:	b580      	push	{r7, lr}
 8013354:	b084      	sub	sp, #16
 8013356:	af00      	add	r7, sp, #0
 8013358:	60f8      	str	r0, [r7, #12]
 801335a:	60b9      	str	r1, [r7, #8]
 801335c:	607a      	str	r2, [r7, #4]
 801335e:	603b      	str	r3, [r7, #0]
    fp_select(&(d->re), &(a0->re), &(a1->re), ctl);
 8013360:	68f8      	ldr	r0, [r7, #12]
 8013362:	68b9      	ldr	r1, [r7, #8]
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	f7ff fa9c 	bl	80128a4 <fp_select>
    fp_select(&(d->im), &(a0->im), &(a1->im), ctl);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	f7ff fa90 	bl	80128a4 <fp_select>
}
 8013384:	bf00      	nop
 8013386:	3710      	adds	r7, #16
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <fp2_cswap>:

void
fp2_cswap(fp2_t *a, fp2_t *b, uint32_t ctl)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
    fp_cswap(&(a->re), &(b->re), ctl);
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	68b9      	ldr	r1, [r7, #8]
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	4618      	mov	r0, r3
 80133a0:	f006 fa57 	bl	8019852 <fp_cswap>
    fp_cswap(&(a->im), &(b->im), ctl);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	3324      	adds	r3, #36	@ 0x24
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	4619      	mov	r1, r3
 80133b2:	f006 fa4e 	bl	8019852 <fp_cswap>
}
 80133b6:	bf00      	nop
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}

080133be <prop>:
#define Nbits 251
#define Nbytes 32

#define MONTGOMERY
// propagate carries
inline static spint prop(spint *n) {
 80133be:	b480      	push	{r7}
 80133c0:	b087      	sub	sp, #28
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
  int i;
  spint mask = ((spint)1 << 29u) - (spint)1;
 80133c6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80133ca:	60fb      	str	r3, [r7, #12]
  sspint carry = (sspint)n[0];
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	613b      	str	r3, [r7, #16]
  carry >>= 29u;
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	175b      	asrs	r3, r3, #29
 80133d6:	613b      	str	r3, [r7, #16]
  n[0] &= mask;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681a      	ldr	r2, [r3, #0]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	401a      	ands	r2, r3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	601a      	str	r2, [r3, #0]
  for (i = 1; i < 8; i++) {
 80133e4:	2301      	movs	r3, #1
 80133e6:	617b      	str	r3, [r7, #20]
 80133e8:	e016      	b.n	8013418 <prop+0x5a>
    carry += (sspint)n[i];
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	4413      	add	r3, r2
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	461a      	mov	r2, r3
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	4413      	add	r3, r2
 80133fa:	613b      	str	r3, [r7, #16]
    n[i] = (spint)carry & mask;
 80133fc:	6939      	ldr	r1, [r7, #16]
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	4413      	add	r3, r2
 8013406:	68fa      	ldr	r2, [r7, #12]
 8013408:	400a      	ands	r2, r1
 801340a:	601a      	str	r2, [r3, #0]
    carry >>= 29u;
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	175b      	asrs	r3, r3, #29
 8013410:	613b      	str	r3, [r7, #16]
  for (i = 1; i < 8; i++) {
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	3301      	adds	r3, #1
 8013416:	617b      	str	r3, [r7, #20]
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	2b07      	cmp	r3, #7
 801341c:	dde5      	ble.n	80133ea <prop+0x2c>
  }
  n[8] += (spint)carry;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	3320      	adds	r3, #32
 8013422:	6819      	ldr	r1, [r3, #0]
 8013424:	693a      	ldr	r2, [r7, #16]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	3320      	adds	r3, #32
 801342a:	440a      	add	r2, r1
 801342c:	601a      	str	r2, [r3, #0]
  return -((n[8] >> 1) >> 30u);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	3320      	adds	r3, #32
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	17db      	asrs	r3, r3, #31
}
 8013436:	4618      	mov	r0, r3
 8013438:	371c      	adds	r7, #28
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr

08013442 <flatten>:

// propagate carries and add p if negative, propagate carries again
inline static int flatten(spint *n) {
 8013442:	b580      	push	{r7, lr}
 8013444:	b084      	sub	sp, #16
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
  spint carry = prop(n);
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff ffb7 	bl	80133be <prop>
 8013450:	60f8      	str	r0, [r7, #12]
  n[0] -= (spint)1u & carry;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681a      	ldr	r2, [r3, #0]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f003 0301 	and.w	r3, r3, #1
 801345c:	1ad2      	subs	r2, r2, r3
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	601a      	str	r2, [r3, #0]
  n[8] += ((spint)0x50000u) & carry;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	3320      	adds	r3, #32
 8013466:	6819      	ldr	r1, [r3, #0]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	f403 22a0 	and.w	r2, r3, #327680	@ 0x50000
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	3320      	adds	r3, #32
 8013472:	440a      	add	r2, r1
 8013474:	601a      	str	r2, [r3, #0]
  (void)prop(n);
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f7ff ffa1 	bl	80133be <prop>
  return (int)(carry & 1);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f003 0301 	and.w	r3, r3, #1
}
 8013482:	4618      	mov	r0, r3
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}

0801348a <modfsb>:

// Montgomery final subtract
static int modfsb(spint *n) {
 801348a:	b580      	push	{r7, lr}
 801348c:	b082      	sub	sp, #8
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
  n[0] += (spint)1u;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	1c5a      	adds	r2, r3, #1
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	601a      	str	r2, [r3, #0]
  n[8] -= (spint)0x50000u;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	3320      	adds	r3, #32
 80134a0:	681a      	ldr	r2, [r3, #0]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	3320      	adds	r3, #32
 80134a6:	f5a2 22a0 	sub.w	r2, r2, #327680	@ 0x50000
 80134aa:	601a      	str	r2, [r3, #0]
  return flatten(n);
 80134ac:	6878      	ldr	r0, [r7, #4]
 80134ae:	f7ff ffc8 	bl	8013442 <flatten>
 80134b2:	4603      	mov	r3, r0
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3708      	adds	r7, #8
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <modadd>:

// Modular addition - reduce less than 2p
static void modadd(const spint *a, const spint *b, spint *n) {
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
  spint carry;
  n[0] = a[0] + b[0];
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	441a      	add	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	601a      	str	r2, [r3, #0]
  n[1] = a[1] + b[1];
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	3304      	adds	r3, #4
 80134da:	6819      	ldr	r1, [r3, #0]
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	3304      	adds	r3, #4
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	3304      	adds	r3, #4
 80134e6:	440a      	add	r2, r1
 80134e8:	601a      	str	r2, [r3, #0]
  n[2] = a[2] + b[2];
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	3308      	adds	r3, #8
 80134ee:	6819      	ldr	r1, [r3, #0]
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	3308      	adds	r3, #8
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	3308      	adds	r3, #8
 80134fa:	440a      	add	r2, r1
 80134fc:	601a      	str	r2, [r3, #0]
  n[3] = a[3] + b[3];
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	330c      	adds	r3, #12
 8013502:	6819      	ldr	r1, [r3, #0]
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	330c      	adds	r3, #12
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	330c      	adds	r3, #12
 801350e:	440a      	add	r2, r1
 8013510:	601a      	str	r2, [r3, #0]
  n[4] = a[4] + b[4];
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	3310      	adds	r3, #16
 8013516:	6819      	ldr	r1, [r3, #0]
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	3310      	adds	r3, #16
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	3310      	adds	r3, #16
 8013522:	440a      	add	r2, r1
 8013524:	601a      	str	r2, [r3, #0]
  n[5] = a[5] + b[5];
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	3314      	adds	r3, #20
 801352a:	6819      	ldr	r1, [r3, #0]
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	3314      	adds	r3, #20
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	3314      	adds	r3, #20
 8013536:	440a      	add	r2, r1
 8013538:	601a      	str	r2, [r3, #0]
  n[6] = a[6] + b[6];
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	3318      	adds	r3, #24
 801353e:	6819      	ldr	r1, [r3, #0]
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	3318      	adds	r3, #24
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	3318      	adds	r3, #24
 801354a:	440a      	add	r2, r1
 801354c:	601a      	str	r2, [r3, #0]
  n[7] = a[7] + b[7];
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	331c      	adds	r3, #28
 8013552:	6819      	ldr	r1, [r3, #0]
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	331c      	adds	r3, #28
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	331c      	adds	r3, #28
 801355e:	440a      	add	r2, r1
 8013560:	601a      	str	r2, [r3, #0]
  n[8] = a[8] + b[8];
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	3320      	adds	r3, #32
 8013566:	6819      	ldr	r1, [r3, #0]
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	3320      	adds	r3, #32
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	3320      	adds	r3, #32
 8013572:	440a      	add	r2, r1
 8013574:	601a      	str	r2, [r3, #0]
  n[0] += (spint)2u;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	1c9a      	adds	r2, r3, #2
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	601a      	str	r2, [r3, #0]
  n[8] -= (spint)0xa0000u;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	3320      	adds	r3, #32
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	3320      	adds	r3, #32
 801358a:	f5a2 2220 	sub.w	r2, r2, #655360	@ 0xa0000
 801358e:	601a      	str	r2, [r3, #0]
  carry = prop(n);
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7ff ff14 	bl	80133be <prop>
 8013596:	6178      	str	r0, [r7, #20]
  n[0] -= (spint)2u & carry;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	f003 0302 	and.w	r3, r3, #2
 80135a2:	1ad2      	subs	r2, r2, r3
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	601a      	str	r2, [r3, #0]
  n[8] += ((spint)0xa0000u) & carry;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	3320      	adds	r3, #32
 80135ac:	6819      	ldr	r1, [r3, #0]
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	f403 2220 	and.w	r2, r3, #655360	@ 0xa0000
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	3320      	adds	r3, #32
 80135b8:	440a      	add	r2, r1
 80135ba:	601a      	str	r2, [r3, #0]
  (void)prop(n);
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f7ff fefe 	bl	80133be <prop>
}
 80135c2:	bf00      	nop
 80135c4:	3718      	adds	r7, #24
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <modsub>:

// Modular subtraction - reduce less than 2p
static void modsub(const spint *a, const spint *b, spint *n) {
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b086      	sub	sp, #24
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	60f8      	str	r0, [r7, #12]
 80135d2:	60b9      	str	r1, [r7, #8]
 80135d4:	607a      	str	r2, [r7, #4]
  spint carry;
  n[0] = a[0] - b[0];
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	1ad2      	subs	r2, r2, r3
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	601a      	str	r2, [r3, #0]
  n[1] = a[1] - b[1];
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	3304      	adds	r3, #4
 80135e8:	6819      	ldr	r1, [r3, #0]
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	3304      	adds	r3, #4
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	3304      	adds	r3, #4
 80135f4:	1a8a      	subs	r2, r1, r2
 80135f6:	601a      	str	r2, [r3, #0]
  n[2] = a[2] - b[2];
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	3308      	adds	r3, #8
 80135fc:	6819      	ldr	r1, [r3, #0]
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	3308      	adds	r3, #8
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	3308      	adds	r3, #8
 8013608:	1a8a      	subs	r2, r1, r2
 801360a:	601a      	str	r2, [r3, #0]
  n[3] = a[3] - b[3];
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	330c      	adds	r3, #12
 8013610:	6819      	ldr	r1, [r3, #0]
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	330c      	adds	r3, #12
 8013616:	681a      	ldr	r2, [r3, #0]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	330c      	adds	r3, #12
 801361c:	1a8a      	subs	r2, r1, r2
 801361e:	601a      	str	r2, [r3, #0]
  n[4] = a[4] - b[4];
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	3310      	adds	r3, #16
 8013624:	6819      	ldr	r1, [r3, #0]
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	3310      	adds	r3, #16
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	3310      	adds	r3, #16
 8013630:	1a8a      	subs	r2, r1, r2
 8013632:	601a      	str	r2, [r3, #0]
  n[5] = a[5] - b[5];
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	3314      	adds	r3, #20
 8013638:	6819      	ldr	r1, [r3, #0]
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	3314      	adds	r3, #20
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	3314      	adds	r3, #20
 8013644:	1a8a      	subs	r2, r1, r2
 8013646:	601a      	str	r2, [r3, #0]
  n[6] = a[6] - b[6];
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	3318      	adds	r3, #24
 801364c:	6819      	ldr	r1, [r3, #0]
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	3318      	adds	r3, #24
 8013652:	681a      	ldr	r2, [r3, #0]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	3318      	adds	r3, #24
 8013658:	1a8a      	subs	r2, r1, r2
 801365a:	601a      	str	r2, [r3, #0]
  n[7] = a[7] - b[7];
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	331c      	adds	r3, #28
 8013660:	6819      	ldr	r1, [r3, #0]
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	331c      	adds	r3, #28
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	331c      	adds	r3, #28
 801366c:	1a8a      	subs	r2, r1, r2
 801366e:	601a      	str	r2, [r3, #0]
  n[8] = a[8] - b[8];
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	3320      	adds	r3, #32
 8013674:	6819      	ldr	r1, [r3, #0]
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	3320      	adds	r3, #32
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	3320      	adds	r3, #32
 8013680:	1a8a      	subs	r2, r1, r2
 8013682:	601a      	str	r2, [r3, #0]
  carry = prop(n);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff fe9a 	bl	80133be <prop>
 801368a:	6178      	str	r0, [r7, #20]
  n[0] -= (spint)2u & carry;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	f003 0302 	and.w	r3, r3, #2
 8013696:	1ad2      	subs	r2, r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	601a      	str	r2, [r3, #0]
  n[8] += ((spint)0xa0000u) & carry;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	3320      	adds	r3, #32
 80136a0:	6819      	ldr	r1, [r3, #0]
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	f403 2220 	and.w	r2, r3, #655360	@ 0xa0000
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	3320      	adds	r3, #32
 80136ac:	440a      	add	r2, r1
 80136ae:	601a      	str	r2, [r3, #0]
  (void)prop(n);
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7ff fe84 	bl	80133be <prop>
}
 80136b6:	bf00      	nop
 80136b8:	3718      	adds	r7, #24
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <modneg>:

// Modular negation
static void modneg(const spint *b, spint *n) {
 80136be:	b580      	push	{r7, lr}
 80136c0:	b084      	sub	sp, #16
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	6039      	str	r1, [r7, #0]
  spint carry;
  n[0] = (spint)0 - b[0];
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	425a      	negs	r2, r3
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	601a      	str	r2, [r3, #0]
  n[1] = (spint)0 - b[1];
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	3304      	adds	r3, #4
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	3304      	adds	r3, #4
 80136dc:	4252      	negs	r2, r2
 80136de:	601a      	str	r2, [r3, #0]
  n[2] = (spint)0 - b[2];
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	3308      	adds	r3, #8
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	3308      	adds	r3, #8
 80136ea:	4252      	negs	r2, r2
 80136ec:	601a      	str	r2, [r3, #0]
  n[3] = (spint)0 - b[3];
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	330c      	adds	r3, #12
 80136f2:	681a      	ldr	r2, [r3, #0]
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	330c      	adds	r3, #12
 80136f8:	4252      	negs	r2, r2
 80136fa:	601a      	str	r2, [r3, #0]
  n[4] = (spint)0 - b[4];
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	3310      	adds	r3, #16
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	3310      	adds	r3, #16
 8013706:	4252      	negs	r2, r2
 8013708:	601a      	str	r2, [r3, #0]
  n[5] = (spint)0 - b[5];
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	3314      	adds	r3, #20
 801370e:	681a      	ldr	r2, [r3, #0]
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	3314      	adds	r3, #20
 8013714:	4252      	negs	r2, r2
 8013716:	601a      	str	r2, [r3, #0]
  n[6] = (spint)0 - b[6];
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	3318      	adds	r3, #24
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	3318      	adds	r3, #24
 8013722:	4252      	negs	r2, r2
 8013724:	601a      	str	r2, [r3, #0]
  n[7] = (spint)0 - b[7];
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	331c      	adds	r3, #28
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	331c      	adds	r3, #28
 8013730:	4252      	negs	r2, r2
 8013732:	601a      	str	r2, [r3, #0]
  n[8] = (spint)0 - b[8];
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	3320      	adds	r3, #32
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	3320      	adds	r3, #32
 801373e:	4252      	negs	r2, r2
 8013740:	601a      	str	r2, [r3, #0]
  carry = prop(n);
 8013742:	6838      	ldr	r0, [r7, #0]
 8013744:	f7ff fe3b 	bl	80133be <prop>
 8013748:	60f8      	str	r0, [r7, #12]
  n[0] -= (spint)2u & carry;
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f003 0302 	and.w	r3, r3, #2
 8013754:	1ad2      	subs	r2, r2, r3
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	601a      	str	r2, [r3, #0]
  n[8] += ((spint)0xa0000u) & carry;
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	3320      	adds	r3, #32
 801375e:	6819      	ldr	r1, [r3, #0]
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f403 2220 	and.w	r2, r3, #655360	@ 0xa0000
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	3320      	adds	r3, #32
 801376a:	440a      	add	r2, r1
 801376c:	601a      	str	r2, [r3, #0]
  (void)prop(n);
 801376e:	6838      	ldr	r0, [r7, #0]
 8013770:	f7ff fe25 	bl	80133be <prop>
}
 8013774:	bf00      	nop
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <modmul>:

// Overflow limit   = 18446744073709551616
// maximum possible = 2594249331921584137
// Modular multiplication, c=a*b mod 2p
static void modmul(const spint *a, const spint *b, spint *c) {
 801377c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8013780:	f6ad 3d74 	subw	sp, sp, #2932	@ 0xb74
 8013784:	af00      	add	r7, sp, #0
 8013786:	f8c7 0b34 	str.w	r0, [r7, #2868]	@ 0xb34
 801378a:	f8c7 1b30 	str.w	r1, [r7, #2864]	@ 0xb30
 801378e:	f8c7 2b2c 	str.w	r2, [r7, #2860]	@ 0xb2c
  dpint t = 0;
 8013792:	f04f 0200 	mov.w	r2, #0
 8013796:	f04f 0300 	mov.w	r3, #0
 801379a:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 801379e:	e9c1 2300 	strd	r2, r3, [r1]
  spint p8 = 0x50000u;
 80137a2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80137a6:	f8c7 3b64 	str.w	r3, [r7, #2916]	@ 0xb64
  spint q = ((spint)1 << 29u); // q is unsaturated radix
 80137aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80137ae:	f8c7 3b60 	str.w	r3, [r7, #2912]	@ 0xb60
  spint mask = (spint)(q - (spint)1);
 80137b2:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 80137b6:	3b01      	subs	r3, #1
 80137b8:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c
  t += (dpint)a[0] * b[0];
 80137bc:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	2200      	movs	r2, #0
 80137c4:	469a      	mov	sl, r3
 80137c6:	4693      	mov	fp, r2
 80137c8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	2200      	movs	r2, #0
 80137d0:	4698      	mov	r8, r3
 80137d2:	4691      	mov	r9, r2
 80137d4:	fb08 f20b 	mul.w	r2, r8, fp
 80137d8:	fb0a f309 	mul.w	r3, sl, r9
 80137dc:	4413      	add	r3, r2
 80137de:	fbaa 4508 	umull	r4, r5, sl, r8
 80137e2:	442b      	add	r3, r5
 80137e4:	461d      	mov	r5, r3
 80137e6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80137ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ee:	1911      	adds	r1, r2, r4
 80137f0:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 80137f4:	416b      	adcs	r3, r5
 80137f6:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 80137fa:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	@ 0x2c8
 80137fe:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013802:	e9c2 3400 	strd	r3, r4, [r2]
  spint v0 = ((spint)t & mask);
 8013806:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 801380a:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 801380e:	4013      	ands	r3, r2
 8013810:	f8c7 3b58 	str.w	r3, [r7, #2904]	@ 0xb58
  t >>= 29;
 8013814:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381c:	f04f 0000 	mov.w	r0, #0
 8013820:	f04f 0100 	mov.w	r1, #0
 8013824:	0f50      	lsrs	r0, r2, #29
 8013826:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 801382a:	0f59      	lsrs	r1, r3, #29
 801382c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013830:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[1];
 8013834:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2200      	movs	r2, #0
 801383c:	f8c7 3858 	str.w	r3, [r7, #2136]	@ 0x858
 8013840:	f8c7 285c 	str.w	r2, [r7, #2140]	@ 0x85c
 8013844:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013848:	3304      	adds	r3, #4
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2200      	movs	r2, #0
 801384e:	f8c7 3850 	str.w	r3, [r7, #2128]	@ 0x850
 8013852:	f8c7 2854 	str.w	r2, [r7, #2132]	@ 0x854
 8013856:	f607 0358 	addw	r3, r7, #2136	@ 0x858
 801385a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801385e:	462b      	mov	r3, r5
 8013860:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8013864:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013868:	4642      	mov	r2, r8
 801386a:	fb02 f203 	mul.w	r2, r2, r3
 801386e:	464b      	mov	r3, r9
 8013870:	4621      	mov	r1, r4
 8013872:	fb01 f303 	mul.w	r3, r1, r3
 8013876:	4413      	add	r3, r2
 8013878:	4622      	mov	r2, r4
 801387a:	4641      	mov	r1, r8
 801387c:	fba2 1201 	umull	r1, r2, r2, r1
 8013880:	f8c7 2b24 	str.w	r2, [r7, #2852]	@ 0xb24
 8013884:	460a      	mov	r2, r1
 8013886:	f8c7 2b20 	str.w	r2, [r7, #2848]	@ 0xb20
 801388a:	f8d7 2b24 	ldr.w	r2, [r7, #2852]	@ 0xb24
 801388e:	4413      	add	r3, r2
 8013890:	f8c7 3b24 	str.w	r3, [r7, #2852]	@ 0xb24
 8013894:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801389c:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 80138a0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80138a4:	4621      	mov	r1, r4
 80138a6:	1851      	adds	r1, r2, r1
 80138a8:	f8c7 12c0 	str.w	r1, [r7, #704]	@ 0x2c0
 80138ac:	4629      	mov	r1, r5
 80138ae:	eb43 0101 	adc.w	r1, r3, r1
 80138b2:	f8c7 12c4 	str.w	r1, [r7, #708]	@ 0x2c4
 80138b6:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	@ 0x2c0
 80138ba:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80138be:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[0];
 80138c2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80138c6:	3304      	adds	r3, #4
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2200      	movs	r2, #0
 80138cc:	f8c7 3848 	str.w	r3, [r7, #2120]	@ 0x848
 80138d0:	f8c7 284c 	str.w	r2, [r7, #2124]	@ 0x84c
 80138d4:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	2200      	movs	r2, #0
 80138dc:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
 80138e0:	f8c7 2844 	str.w	r2, [r7, #2116]	@ 0x844
 80138e4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80138e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80138ec:	462b      	mov	r3, r5
 80138ee:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 80138f2:	e9d2 8900 	ldrd	r8, r9, [r2]
 80138f6:	4642      	mov	r2, r8
 80138f8:	fb02 f203 	mul.w	r2, r2, r3
 80138fc:	464b      	mov	r3, r9
 80138fe:	4621      	mov	r1, r4
 8013900:	fb01 f303 	mul.w	r3, r1, r3
 8013904:	4413      	add	r3, r2
 8013906:	4622      	mov	r2, r4
 8013908:	4641      	mov	r1, r8
 801390a:	fba2 1201 	umull	r1, r2, r2, r1
 801390e:	f8c7 2b1c 	str.w	r2, [r7, #2844]	@ 0xb1c
 8013912:	460a      	mov	r2, r1
 8013914:	f8c7 2b18 	str.w	r2, [r7, #2840]	@ 0xb18
 8013918:	f8d7 2b1c 	ldr.w	r2, [r7, #2844]	@ 0xb1c
 801391c:	4413      	add	r3, r2
 801391e:	f8c7 3b1c 	str.w	r3, [r7, #2844]	@ 0xb1c
 8013922:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392a:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 801392e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013932:	4621      	mov	r1, r4
 8013934:	1851      	adds	r1, r2, r1
 8013936:	f8c7 12b8 	str.w	r1, [r7, #696]	@ 0x2b8
 801393a:	4629      	mov	r1, r5
 801393c:	eb43 0101 	adc.w	r1, r3, r1
 8013940:	f8c7 12bc 	str.w	r1, [r7, #700]	@ 0x2bc
 8013944:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	@ 0x2b8
 8013948:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801394c:	e9c2 3400 	strd	r3, r4, [r2]
  spint v1 = ((spint)t & mask);
 8013950:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8013954:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8013958:	4013      	ands	r3, r2
 801395a:	f8c7 3b54 	str.w	r3, [r7, #2900]	@ 0xb54
  t >>= 29;
 801395e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013966:	f04f 0000 	mov.w	r0, #0
 801396a:	f04f 0100 	mov.w	r1, #0
 801396e:	0f50      	lsrs	r0, r2, #29
 8013970:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8013974:	0f59      	lsrs	r1, r3, #29
 8013976:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801397a:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[2];
 801397e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2200      	movs	r2, #0
 8013986:	f8c7 3838 	str.w	r3, [r7, #2104]	@ 0x838
 801398a:	f8c7 283c 	str.w	r2, [r7, #2108]	@ 0x83c
 801398e:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013992:	3308      	adds	r3, #8
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2200      	movs	r2, #0
 8013998:	f8c7 3830 	str.w	r3, [r7, #2096]	@ 0x830
 801399c:	f8c7 2834 	str.w	r2, [r7, #2100]	@ 0x834
 80139a0:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 80139a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80139a8:	462b      	mov	r3, r5
 80139aa:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80139ae:	e9d2 8900 	ldrd	r8, r9, [r2]
 80139b2:	4642      	mov	r2, r8
 80139b4:	fb02 f203 	mul.w	r2, r2, r3
 80139b8:	464b      	mov	r3, r9
 80139ba:	4621      	mov	r1, r4
 80139bc:	fb01 f303 	mul.w	r3, r1, r3
 80139c0:	4413      	add	r3, r2
 80139c2:	4622      	mov	r2, r4
 80139c4:	4641      	mov	r1, r8
 80139c6:	fba2 1201 	umull	r1, r2, r2, r1
 80139ca:	f8c7 2b14 	str.w	r2, [r7, #2836]	@ 0xb14
 80139ce:	460a      	mov	r2, r1
 80139d0:	f8c7 2b10 	str.w	r2, [r7, #2832]	@ 0xb10
 80139d4:	f8d7 2b14 	ldr.w	r2, [r7, #2836]	@ 0xb14
 80139d8:	4413      	add	r3, r2
 80139da:	f8c7 3b14 	str.w	r3, [r7, #2836]	@ 0xb14
 80139de:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80139e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e6:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 80139ea:	e9d1 4500 	ldrd	r4, r5, [r1]
 80139ee:	4621      	mov	r1, r4
 80139f0:	1851      	adds	r1, r2, r1
 80139f2:	f8c7 12b0 	str.w	r1, [r7, #688]	@ 0x2b0
 80139f6:	4629      	mov	r1, r5
 80139f8:	eb43 0101 	adc.w	r1, r3, r1
 80139fc:	f8c7 12b4 	str.w	r1, [r7, #692]	@ 0x2b4
 8013a00:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	@ 0x2b0
 8013a04:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013a08:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[1];
 8013a0c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013a10:	3304      	adds	r3, #4
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2200      	movs	r2, #0
 8013a16:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8013a1a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8013a1e:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013a22:	3304      	adds	r3, #4
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2200      	movs	r2, #0
 8013a28:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 8013a2c:	f8c7 2824 	str.w	r2, [r7, #2084]	@ 0x824
 8013a30:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8013a34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013a38:	462b      	mov	r3, r5
 8013a3a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8013a3e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013a42:	4642      	mov	r2, r8
 8013a44:	fb02 f203 	mul.w	r2, r2, r3
 8013a48:	464b      	mov	r3, r9
 8013a4a:	4621      	mov	r1, r4
 8013a4c:	fb01 f303 	mul.w	r3, r1, r3
 8013a50:	4413      	add	r3, r2
 8013a52:	4622      	mov	r2, r4
 8013a54:	4641      	mov	r1, r8
 8013a56:	fba2 1201 	umull	r1, r2, r2, r1
 8013a5a:	f8c7 2b0c 	str.w	r2, [r7, #2828]	@ 0xb0c
 8013a5e:	460a      	mov	r2, r1
 8013a60:	f8c7 2b08 	str.w	r2, [r7, #2824]	@ 0xb08
 8013a64:	f8d7 2b0c 	ldr.w	r2, [r7, #2828]	@ 0xb0c
 8013a68:	4413      	add	r3, r2
 8013a6a:	f8c7 3b0c 	str.w	r3, [r7, #2828]	@ 0xb0c
 8013a6e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a76:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8013a7a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013a7e:	4621      	mov	r1, r4
 8013a80:	1851      	adds	r1, r2, r1
 8013a82:	f8c7 12a8 	str.w	r1, [r7, #680]	@ 0x2a8
 8013a86:	4629      	mov	r1, r5
 8013a88:	eb43 0101 	adc.w	r1, r3, r1
 8013a8c:	f8c7 12ac 	str.w	r1, [r7, #684]	@ 0x2ac
 8013a90:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	@ 0x2a8
 8013a94:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013a98:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[0];
 8013a9c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013aa0:	3308      	adds	r3, #8
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8013aaa:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8013aae:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 8013aba:	f8c7 2814 	str.w	r2, [r7, #2068]	@ 0x814
 8013abe:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8013ac2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013ac6:	462b      	mov	r3, r5
 8013ac8:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 8013acc:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013ad0:	4642      	mov	r2, r8
 8013ad2:	fb02 f203 	mul.w	r2, r2, r3
 8013ad6:	464b      	mov	r3, r9
 8013ad8:	4621      	mov	r1, r4
 8013ada:	fb01 f303 	mul.w	r3, r1, r3
 8013ade:	4413      	add	r3, r2
 8013ae0:	4622      	mov	r2, r4
 8013ae2:	4641      	mov	r1, r8
 8013ae4:	fba2 1201 	umull	r1, r2, r2, r1
 8013ae8:	f8c7 2b04 	str.w	r2, [r7, #2820]	@ 0xb04
 8013aec:	460a      	mov	r2, r1
 8013aee:	f8c7 2b00 	str.w	r2, [r7, #2816]	@ 0xb00
 8013af2:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	@ 0xb04
 8013af6:	4413      	add	r3, r2
 8013af8:	f8c7 3b04 	str.w	r3, [r7, #2820]	@ 0xb04
 8013afc:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b04:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 8013b08:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013b0c:	4621      	mov	r1, r4
 8013b0e:	1851      	adds	r1, r2, r1
 8013b10:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8013b14:	4629      	mov	r1, r5
 8013b16:	eb43 0101 	adc.w	r1, r3, r1
 8013b1a:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 8013b1e:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	@ 0x2a0
 8013b22:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013b26:	e9c2 3400 	strd	r3, r4, [r2]
  spint v2 = ((spint)t & mask);
 8013b2a:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8013b2e:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8013b32:	4013      	ands	r3, r2
 8013b34:	f8c7 3b50 	str.w	r3, [r7, #2896]	@ 0xb50
  t >>= 29;
 8013b38:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b40:	f04f 0000 	mov.w	r0, #0
 8013b44:	f04f 0100 	mov.w	r1, #0
 8013b48:	0f50      	lsrs	r0, r2, #29
 8013b4a:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8013b4e:	0f59      	lsrs	r1, r3, #29
 8013b50:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013b54:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[3];
 8013b58:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8013b64:	f8c7 280c 	str.w	r2, [r7, #2060]	@ 0x80c
 8013b68:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013b6c:	330c      	adds	r3, #12
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2200      	movs	r2, #0
 8013b72:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
 8013b76:	f8c7 2804 	str.w	r2, [r7, #2052]	@ 0x804
 8013b7a:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8013b7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013b82:	462b      	mov	r3, r5
 8013b84:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 8013b88:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013b8c:	4642      	mov	r2, r8
 8013b8e:	fb02 f203 	mul.w	r2, r2, r3
 8013b92:	464b      	mov	r3, r9
 8013b94:	4621      	mov	r1, r4
 8013b96:	fb01 f303 	mul.w	r3, r1, r3
 8013b9a:	4413      	add	r3, r2
 8013b9c:	4622      	mov	r2, r4
 8013b9e:	4641      	mov	r1, r8
 8013ba0:	fba2 1201 	umull	r1, r2, r2, r1
 8013ba4:	f8c7 2afc 	str.w	r2, [r7, #2812]	@ 0xafc
 8013ba8:	460a      	mov	r2, r1
 8013baa:	f8c7 2af8 	str.w	r2, [r7, #2808]	@ 0xaf8
 8013bae:	f8d7 2afc 	ldr.w	r2, [r7, #2812]	@ 0xafc
 8013bb2:	4413      	add	r3, r2
 8013bb4:	f8c7 3afc 	str.w	r3, [r7, #2812]	@ 0xafc
 8013bb8:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc0:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 8013bc4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013bc8:	4621      	mov	r1, r4
 8013bca:	1851      	adds	r1, r2, r1
 8013bcc:	f8c7 1298 	str.w	r1, [r7, #664]	@ 0x298
 8013bd0:	4629      	mov	r1, r5
 8013bd2:	eb43 0101 	adc.w	r1, r3, r1
 8013bd6:	f8c7 129c 	str.w	r1, [r7, #668]	@ 0x29c
 8013bda:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	@ 0x298
 8013bde:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013be2:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[2];
 8013be6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013bea:	3304      	adds	r3, #4
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8013bf4:	f8c7 27fc 	str.w	r2, [r7, #2044]	@ 0x7fc
 8013bf8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013bfc:	3308      	adds	r3, #8
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	2200      	movs	r2, #0
 8013c02:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8013c06:	f8c7 27f4 	str.w	r2, [r7, #2036]	@ 0x7f4
 8013c0a:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8013c0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013c12:	462b      	mov	r3, r5
 8013c14:	f507 62fe 	add.w	r2, r7, #2032	@ 0x7f0
 8013c18:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013c1c:	4642      	mov	r2, r8
 8013c1e:	fb02 f203 	mul.w	r2, r2, r3
 8013c22:	464b      	mov	r3, r9
 8013c24:	4621      	mov	r1, r4
 8013c26:	fb01 f303 	mul.w	r3, r1, r3
 8013c2a:	4413      	add	r3, r2
 8013c2c:	4622      	mov	r2, r4
 8013c2e:	4641      	mov	r1, r8
 8013c30:	fba2 1201 	umull	r1, r2, r2, r1
 8013c34:	f8c7 2af4 	str.w	r2, [r7, #2804]	@ 0xaf4
 8013c38:	460a      	mov	r2, r1
 8013c3a:	f8c7 2af0 	str.w	r2, [r7, #2800]	@ 0xaf0
 8013c3e:	f8d7 2af4 	ldr.w	r2, [r7, #2804]	@ 0xaf4
 8013c42:	4413      	add	r3, r2
 8013c44:	f8c7 3af4 	str.w	r3, [r7, #2804]	@ 0xaf4
 8013c48:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c50:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8013c54:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013c58:	4621      	mov	r1, r4
 8013c5a:	1851      	adds	r1, r2, r1
 8013c5c:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 8013c60:	4629      	mov	r1, r5
 8013c62:	eb43 0101 	adc.w	r1, r3, r1
 8013c66:	f8c7 1294 	str.w	r1, [r7, #660]	@ 0x294
 8013c6a:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	@ 0x290
 8013c6e:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013c72:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[1];
 8013c76:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013c7a:	3308      	adds	r3, #8
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	f8c7 37e8 	str.w	r3, [r7, #2024]	@ 0x7e8
 8013c84:	f8c7 27ec 	str.w	r2, [r7, #2028]	@ 0x7ec
 8013c88:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	2200      	movs	r2, #0
 8013c92:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
 8013c96:	f8c7 27e4 	str.w	r2, [r7, #2020]	@ 0x7e4
 8013c9a:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8013c9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013ca2:	462b      	mov	r3, r5
 8013ca4:	f507 62fc 	add.w	r2, r7, #2016	@ 0x7e0
 8013ca8:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013cac:	4642      	mov	r2, r8
 8013cae:	fb02 f203 	mul.w	r2, r2, r3
 8013cb2:	464b      	mov	r3, r9
 8013cb4:	4621      	mov	r1, r4
 8013cb6:	fb01 f303 	mul.w	r3, r1, r3
 8013cba:	4413      	add	r3, r2
 8013cbc:	4622      	mov	r2, r4
 8013cbe:	4641      	mov	r1, r8
 8013cc0:	fba2 1201 	umull	r1, r2, r2, r1
 8013cc4:	f8c7 2aec 	str.w	r2, [r7, #2796]	@ 0xaec
 8013cc8:	460a      	mov	r2, r1
 8013cca:	f8c7 2ae8 	str.w	r2, [r7, #2792]	@ 0xae8
 8013cce:	f8d7 2aec 	ldr.w	r2, [r7, #2796]	@ 0xaec
 8013cd2:	4413      	add	r3, r2
 8013cd4:	f8c7 3aec 	str.w	r3, [r7, #2796]	@ 0xaec
 8013cd8:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce0:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8013ce4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013ce8:	4621      	mov	r1, r4
 8013cea:	1851      	adds	r1, r2, r1
 8013cec:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 8013cf0:	4629      	mov	r1, r5
 8013cf2:	eb43 0101 	adc.w	r1, r3, r1
 8013cf6:	f8c7 128c 	str.w	r1, [r7, #652]	@ 0x28c
 8013cfa:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	@ 0x288
 8013cfe:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013d02:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[0];
 8013d06:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013d0a:	330c      	adds	r3, #12
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
 8013d14:	f8c7 27dc 	str.w	r2, [r7, #2012]	@ 0x7dc
 8013d18:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 8013d24:	f8c7 27d4 	str.w	r2, [r7, #2004]	@ 0x7d4
 8013d28:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8013d2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013d30:	462b      	mov	r3, r5
 8013d32:	f507 62fa 	add.w	r2, r7, #2000	@ 0x7d0
 8013d36:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013d3a:	4642      	mov	r2, r8
 8013d3c:	fb02 f203 	mul.w	r2, r2, r3
 8013d40:	464b      	mov	r3, r9
 8013d42:	4621      	mov	r1, r4
 8013d44:	fb01 f303 	mul.w	r3, r1, r3
 8013d48:	4413      	add	r3, r2
 8013d4a:	4622      	mov	r2, r4
 8013d4c:	4641      	mov	r1, r8
 8013d4e:	fba2 1201 	umull	r1, r2, r2, r1
 8013d52:	f8c7 2ae4 	str.w	r2, [r7, #2788]	@ 0xae4
 8013d56:	460a      	mov	r2, r1
 8013d58:	f8c7 2ae0 	str.w	r2, [r7, #2784]	@ 0xae0
 8013d5c:	f8d7 2ae4 	ldr.w	r2, [r7, #2788]	@ 0xae4
 8013d60:	4413      	add	r3, r2
 8013d62:	f8c7 3ae4 	str.w	r3, [r7, #2788]	@ 0xae4
 8013d66:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6e:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 8013d72:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013d76:	4621      	mov	r1, r4
 8013d78:	1851      	adds	r1, r2, r1
 8013d7a:	f8c7 1280 	str.w	r1, [r7, #640]	@ 0x280
 8013d7e:	4629      	mov	r1, r5
 8013d80:	eb43 0101 	adc.w	r1, r3, r1
 8013d84:	f8c7 1284 	str.w	r1, [r7, #644]	@ 0x284
 8013d88:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	@ 0x280
 8013d8c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013d90:	e9c2 3400 	strd	r3, r4, [r2]
  spint v3 = ((spint)t & mask);
 8013d94:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8013d98:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8013d9c:	4013      	ands	r3, r2
 8013d9e:	f8c7 3b4c 	str.w	r3, [r7, #2892]	@ 0xb4c
  t >>= 29;
 8013da2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013daa:	f04f 0000 	mov.w	r0, #0
 8013dae:	f04f 0100 	mov.w	r1, #0
 8013db2:	0f50      	lsrs	r0, r2, #29
 8013db4:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8013db8:	0f59      	lsrs	r1, r3, #29
 8013dba:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013dbe:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[4];
 8013dc2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	f8c7 37c8 	str.w	r3, [r7, #1992]	@ 0x7c8
 8013dce:	f8c7 27cc 	str.w	r2, [r7, #1996]	@ 0x7cc
 8013dd2:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013dd6:	3310      	adds	r3, #16
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f8c7 37c0 	str.w	r3, [r7, #1984]	@ 0x7c0
 8013de0:	f8c7 27c4 	str.w	r2, [r7, #1988]	@ 0x7c4
 8013de4:	f507 63f9 	add.w	r3, r7, #1992	@ 0x7c8
 8013de8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013dec:	462b      	mov	r3, r5
 8013dee:	f507 62f8 	add.w	r2, r7, #1984	@ 0x7c0
 8013df2:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013df6:	4642      	mov	r2, r8
 8013df8:	fb02 f203 	mul.w	r2, r2, r3
 8013dfc:	464b      	mov	r3, r9
 8013dfe:	4621      	mov	r1, r4
 8013e00:	fb01 f303 	mul.w	r3, r1, r3
 8013e04:	4413      	add	r3, r2
 8013e06:	4622      	mov	r2, r4
 8013e08:	4641      	mov	r1, r8
 8013e0a:	fba2 1201 	umull	r1, r2, r2, r1
 8013e0e:	f8c7 2adc 	str.w	r2, [r7, #2780]	@ 0xadc
 8013e12:	460a      	mov	r2, r1
 8013e14:	f8c7 2ad8 	str.w	r2, [r7, #2776]	@ 0xad8
 8013e18:	f8d7 2adc 	ldr.w	r2, [r7, #2780]	@ 0xadc
 8013e1c:	4413      	add	r3, r2
 8013e1e:	f8c7 3adc 	str.w	r3, [r7, #2780]	@ 0xadc
 8013e22:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2a:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 8013e2e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013e32:	4621      	mov	r1, r4
 8013e34:	1851      	adds	r1, r2, r1
 8013e36:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8013e3a:	4629      	mov	r1, r5
 8013e3c:	eb43 0101 	adc.w	r1, r3, r1
 8013e40:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 8013e44:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	@ 0x278
 8013e48:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013e4c:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[3];
 8013e50:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013e54:	3304      	adds	r3, #4
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	f8c7 37b8 	str.w	r3, [r7, #1976]	@ 0x7b8
 8013e5e:	f8c7 27bc 	str.w	r2, [r7, #1980]	@ 0x7bc
 8013e62:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013e66:	330c      	adds	r3, #12
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	f8c7 37b0 	str.w	r3, [r7, #1968]	@ 0x7b0
 8013e70:	f8c7 27b4 	str.w	r2, [r7, #1972]	@ 0x7b4
 8013e74:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 8013e78:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013e7c:	462b      	mov	r3, r5
 8013e7e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013e82:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013e86:	4642      	mov	r2, r8
 8013e88:	fb02 f203 	mul.w	r2, r2, r3
 8013e8c:	464b      	mov	r3, r9
 8013e8e:	4621      	mov	r1, r4
 8013e90:	fb01 f303 	mul.w	r3, r1, r3
 8013e94:	4413      	add	r3, r2
 8013e96:	4622      	mov	r2, r4
 8013e98:	4641      	mov	r1, r8
 8013e9a:	fba2 1201 	umull	r1, r2, r2, r1
 8013e9e:	f8c7 2ad4 	str.w	r2, [r7, #2772]	@ 0xad4
 8013ea2:	460a      	mov	r2, r1
 8013ea4:	f8c7 2ad0 	str.w	r2, [r7, #2768]	@ 0xad0
 8013ea8:	f8d7 2ad4 	ldr.w	r2, [r7, #2772]	@ 0xad4
 8013eac:	4413      	add	r3, r2
 8013eae:	f8c7 3ad4 	str.w	r3, [r7, #2772]	@ 0xad4
 8013eb2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eba:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8013ebe:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013ec2:	4621      	mov	r1, r4
 8013ec4:	1851      	adds	r1, r2, r1
 8013ec6:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
 8013eca:	4629      	mov	r1, r5
 8013ecc:	eb43 0101 	adc.w	r1, r3, r1
 8013ed0:	f8c7 1274 	str.w	r1, [r7, #628]	@ 0x274
 8013ed4:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	@ 0x270
 8013ed8:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013edc:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[2];
 8013ee0:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013ee4:	3308      	adds	r3, #8
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	f8c7 37a8 	str.w	r3, [r7, #1960]	@ 0x7a8
 8013eee:	f8c7 27ac 	str.w	r2, [r7, #1964]	@ 0x7ac
 8013ef2:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013ef6:	3308      	adds	r3, #8
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2200      	movs	r2, #0
 8013efc:	f8c7 37a0 	str.w	r3, [r7, #1952]	@ 0x7a0
 8013f00:	f8c7 27a4 	str.w	r2, [r7, #1956]	@ 0x7a4
 8013f04:	f507 63f5 	add.w	r3, r7, #1960	@ 0x7a8
 8013f08:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013f0c:	462b      	mov	r3, r5
 8013f0e:	f507 62f4 	add.w	r2, r7, #1952	@ 0x7a0
 8013f12:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013f16:	4642      	mov	r2, r8
 8013f18:	fb02 f203 	mul.w	r2, r2, r3
 8013f1c:	464b      	mov	r3, r9
 8013f1e:	4621      	mov	r1, r4
 8013f20:	fb01 f303 	mul.w	r3, r1, r3
 8013f24:	4413      	add	r3, r2
 8013f26:	4622      	mov	r2, r4
 8013f28:	4641      	mov	r1, r8
 8013f2a:	fba2 1201 	umull	r1, r2, r2, r1
 8013f2e:	f8c7 2acc 	str.w	r2, [r7, #2764]	@ 0xacc
 8013f32:	460a      	mov	r2, r1
 8013f34:	f8c7 2ac8 	str.w	r2, [r7, #2760]	@ 0xac8
 8013f38:	f8d7 2acc 	ldr.w	r2, [r7, #2764]	@ 0xacc
 8013f3c:	4413      	add	r3, r2
 8013f3e:	f8c7 3acc 	str.w	r3, [r7, #2764]	@ 0xacc
 8013f42:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4a:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8013f4e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013f52:	4621      	mov	r1, r4
 8013f54:	1851      	adds	r1, r2, r1
 8013f56:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 8013f5a:	4629      	mov	r1, r5
 8013f5c:	eb43 0101 	adc.w	r1, r3, r1
 8013f60:	f8c7 126c 	str.w	r1, [r7, #620]	@ 0x26c
 8013f64:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	@ 0x268
 8013f68:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013f6c:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[1];
 8013f70:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8013f74:	330c      	adds	r3, #12
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	f8c7 3798 	str.w	r3, [r7, #1944]	@ 0x798
 8013f7e:	f8c7 279c 	str.w	r2, [r7, #1948]	@ 0x79c
 8013f82:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8013f86:	3304      	adds	r3, #4
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f8c7 3790 	str.w	r3, [r7, #1936]	@ 0x790
 8013f90:	f8c7 2794 	str.w	r2, [r7, #1940]	@ 0x794
 8013f94:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 8013f98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013f9c:	462b      	mov	r3, r5
 8013f9e:	f507 62f2 	add.w	r2, r7, #1936	@ 0x790
 8013fa2:	e9d2 8900 	ldrd	r8, r9, [r2]
 8013fa6:	4642      	mov	r2, r8
 8013fa8:	fb02 f203 	mul.w	r2, r2, r3
 8013fac:	464b      	mov	r3, r9
 8013fae:	4621      	mov	r1, r4
 8013fb0:	fb01 f303 	mul.w	r3, r1, r3
 8013fb4:	4413      	add	r3, r2
 8013fb6:	4622      	mov	r2, r4
 8013fb8:	4641      	mov	r1, r8
 8013fba:	fba2 1201 	umull	r1, r2, r2, r1
 8013fbe:	f8c7 2ac4 	str.w	r2, [r7, #2756]	@ 0xac4
 8013fc2:	460a      	mov	r2, r1
 8013fc4:	f8c7 2ac0 	str.w	r2, [r7, #2752]	@ 0xac0
 8013fc8:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	@ 0xac4
 8013fcc:	4413      	add	r3, r2
 8013fce:	f8c7 3ac4 	str.w	r3, [r7, #2756]	@ 0xac4
 8013fd2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8013fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fda:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8013fde:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013fe2:	4621      	mov	r1, r4
 8013fe4:	1851      	adds	r1, r2, r1
 8013fe6:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8013fea:	4629      	mov	r1, r5
 8013fec:	eb43 0101 	adc.w	r1, r3, r1
 8013ff0:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8013ff4:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	@ 0x260
 8013ff8:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8013ffc:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[0];
 8014000:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014004:	3310      	adds	r3, #16
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	2200      	movs	r2, #0
 801400a:	f8c7 3788 	str.w	r3, [r7, #1928]	@ 0x788
 801400e:	f8c7 278c 	str.w	r2, [r7, #1932]	@ 0x78c
 8014012:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	2200      	movs	r2, #0
 801401a:	f8c7 3780 	str.w	r3, [r7, #1920]	@ 0x780
 801401e:	f8c7 2784 	str.w	r2, [r7, #1924]	@ 0x784
 8014022:	f507 63f1 	add.w	r3, r7, #1928	@ 0x788
 8014026:	e9d3 4500 	ldrd	r4, r5, [r3]
 801402a:	462b      	mov	r3, r5
 801402c:	f507 62f0 	add.w	r2, r7, #1920	@ 0x780
 8014030:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014034:	4642      	mov	r2, r8
 8014036:	fb02 f203 	mul.w	r2, r2, r3
 801403a:	464b      	mov	r3, r9
 801403c:	4621      	mov	r1, r4
 801403e:	fb01 f303 	mul.w	r3, r1, r3
 8014042:	4413      	add	r3, r2
 8014044:	4622      	mov	r2, r4
 8014046:	4641      	mov	r1, r8
 8014048:	fba2 1201 	umull	r1, r2, r2, r1
 801404c:	f8c7 2abc 	str.w	r2, [r7, #2748]	@ 0xabc
 8014050:	460a      	mov	r2, r1
 8014052:	f8c7 2ab8 	str.w	r2, [r7, #2744]	@ 0xab8
 8014056:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	@ 0xabc
 801405a:	4413      	add	r3, r2
 801405c:	f8c7 3abc 	str.w	r3, [r7, #2748]	@ 0xabc
 8014060:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014068:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 801406c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014070:	4621      	mov	r1, r4
 8014072:	1851      	adds	r1, r2, r1
 8014074:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 8014078:	4629      	mov	r1, r5
 801407a:	eb43 0101 	adc.w	r1, r3, r1
 801407e:	f8c7 125c 	str.w	r1, [r7, #604]	@ 0x25c
 8014082:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	@ 0x258
 8014086:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801408a:	e9c2 3400 	strd	r3, r4, [r2]
  spint v4 = ((spint)t & mask);
 801408e:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8014092:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8014096:	4013      	ands	r3, r2
 8014098:	f8c7 3b48 	str.w	r3, [r7, #2888]	@ 0xb48
  t >>= 29;
 801409c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80140a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a4:	f04f 0000 	mov.w	r0, #0
 80140a8:	f04f 0100 	mov.w	r1, #0
 80140ac:	0f50      	lsrs	r0, r2, #29
 80140ae:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80140b2:	0f59      	lsrs	r1, r3, #29
 80140b4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80140b8:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[5];
 80140bc:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	2200      	movs	r2, #0
 80140c4:	f8c7 3778 	str.w	r3, [r7, #1912]	@ 0x778
 80140c8:	f8c7 277c 	str.w	r2, [r7, #1916]	@ 0x77c
 80140cc:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80140d0:	3314      	adds	r3, #20
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	2200      	movs	r2, #0
 80140d6:	f8c7 3770 	str.w	r3, [r7, #1904]	@ 0x770
 80140da:	f8c7 2774 	str.w	r2, [r7, #1908]	@ 0x774
 80140de:	f507 63ef 	add.w	r3, r7, #1912	@ 0x778
 80140e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80140e6:	462b      	mov	r3, r5
 80140e8:	f507 62ee 	add.w	r2, r7, #1904	@ 0x770
 80140ec:	e9d2 8900 	ldrd	r8, r9, [r2]
 80140f0:	4642      	mov	r2, r8
 80140f2:	fb02 f203 	mul.w	r2, r2, r3
 80140f6:	464b      	mov	r3, r9
 80140f8:	4621      	mov	r1, r4
 80140fa:	fb01 f303 	mul.w	r3, r1, r3
 80140fe:	4413      	add	r3, r2
 8014100:	4622      	mov	r2, r4
 8014102:	4641      	mov	r1, r8
 8014104:	fba2 1201 	umull	r1, r2, r2, r1
 8014108:	f8c7 2ab4 	str.w	r2, [r7, #2740]	@ 0xab4
 801410c:	460a      	mov	r2, r1
 801410e:	f8c7 2ab0 	str.w	r2, [r7, #2736]	@ 0xab0
 8014112:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	@ 0xab4
 8014116:	4413      	add	r3, r2
 8014118:	f8c7 3ab4 	str.w	r3, [r7, #2740]	@ 0xab4
 801411c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014124:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8014128:	e9d1 4500 	ldrd	r4, r5, [r1]
 801412c:	4621      	mov	r1, r4
 801412e:	1851      	adds	r1, r2, r1
 8014130:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
 8014134:	4629      	mov	r1, r5
 8014136:	eb43 0101 	adc.w	r1, r3, r1
 801413a:	f8c7 1254 	str.w	r1, [r7, #596]	@ 0x254
 801413e:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	@ 0x250
 8014142:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014146:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[4];
 801414a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801414e:	3304      	adds	r3, #4
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	2200      	movs	r2, #0
 8014154:	f8c7 3768 	str.w	r3, [r7, #1896]	@ 0x768
 8014158:	f8c7 276c 	str.w	r2, [r7, #1900]	@ 0x76c
 801415c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014160:	3310      	adds	r3, #16
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	2200      	movs	r2, #0
 8014166:	f8c7 3760 	str.w	r3, [r7, #1888]	@ 0x760
 801416a:	f8c7 2764 	str.w	r2, [r7, #1892]	@ 0x764
 801416e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8014172:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014176:	462b      	mov	r3, r5
 8014178:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 801417c:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014180:	4642      	mov	r2, r8
 8014182:	fb02 f203 	mul.w	r2, r2, r3
 8014186:	464b      	mov	r3, r9
 8014188:	4621      	mov	r1, r4
 801418a:	fb01 f303 	mul.w	r3, r1, r3
 801418e:	4413      	add	r3, r2
 8014190:	4622      	mov	r2, r4
 8014192:	4641      	mov	r1, r8
 8014194:	fba2 1201 	umull	r1, r2, r2, r1
 8014198:	f8c7 2aac 	str.w	r2, [r7, #2732]	@ 0xaac
 801419c:	460a      	mov	r2, r1
 801419e:	f8c7 2aa8 	str.w	r2, [r7, #2728]	@ 0xaa8
 80141a2:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	@ 0xaac
 80141a6:	4413      	add	r3, r2
 80141a8:	f8c7 3aac 	str.w	r3, [r7, #2732]	@ 0xaac
 80141ac:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80141b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b4:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 80141b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80141bc:	4621      	mov	r1, r4
 80141be:	1851      	adds	r1, r2, r1
 80141c0:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 80141c4:	4629      	mov	r1, r5
 80141c6:	eb43 0101 	adc.w	r1, r3, r1
 80141ca:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 80141ce:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	@ 0x248
 80141d2:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80141d6:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[3];
 80141da:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80141de:	3308      	adds	r3, #8
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2200      	movs	r2, #0
 80141e4:	f8c7 3758 	str.w	r3, [r7, #1880]	@ 0x758
 80141e8:	f8c7 275c 	str.w	r2, [r7, #1884]	@ 0x75c
 80141ec:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80141f0:	330c      	adds	r3, #12
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2200      	movs	r2, #0
 80141f6:	f8c7 3750 	str.w	r3, [r7, #1872]	@ 0x750
 80141fa:	f8c7 2754 	str.w	r2, [r7, #1876]	@ 0x754
 80141fe:	f507 63eb 	add.w	r3, r7, #1880	@ 0x758
 8014202:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014206:	462b      	mov	r3, r5
 8014208:	f507 62ea 	add.w	r2, r7, #1872	@ 0x750
 801420c:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014210:	4642      	mov	r2, r8
 8014212:	fb02 f203 	mul.w	r2, r2, r3
 8014216:	464b      	mov	r3, r9
 8014218:	4621      	mov	r1, r4
 801421a:	fb01 f303 	mul.w	r3, r1, r3
 801421e:	4413      	add	r3, r2
 8014220:	4622      	mov	r2, r4
 8014222:	4641      	mov	r1, r8
 8014224:	fba2 1201 	umull	r1, r2, r2, r1
 8014228:	f8c7 2aa4 	str.w	r2, [r7, #2724]	@ 0xaa4
 801422c:	460a      	mov	r2, r1
 801422e:	f8c7 2aa0 	str.w	r2, [r7, #2720]	@ 0xaa0
 8014232:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	@ 0xaa4
 8014236:	4413      	add	r3, r2
 8014238:	f8c7 3aa4 	str.w	r3, [r7, #2724]	@ 0xaa4
 801423c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014244:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8014248:	e9d1 4500 	ldrd	r4, r5, [r1]
 801424c:	4621      	mov	r1, r4
 801424e:	1851      	adds	r1, r2, r1
 8014250:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
 8014254:	4629      	mov	r1, r5
 8014256:	eb43 0101 	adc.w	r1, r3, r1
 801425a:	f8c7 1244 	str.w	r1, [r7, #580]	@ 0x244
 801425e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	@ 0x240
 8014262:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014266:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[2];
 801426a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801426e:	330c      	adds	r3, #12
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2200      	movs	r2, #0
 8014274:	f8c7 3748 	str.w	r3, [r7, #1864]	@ 0x748
 8014278:	f8c7 274c 	str.w	r2, [r7, #1868]	@ 0x74c
 801427c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014280:	3308      	adds	r3, #8
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	2200      	movs	r2, #0
 8014286:	f8c7 3740 	str.w	r3, [r7, #1856]	@ 0x740
 801428a:	f8c7 2744 	str.w	r2, [r7, #1860]	@ 0x744
 801428e:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8014292:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014296:	462b      	mov	r3, r5
 8014298:	f507 62e8 	add.w	r2, r7, #1856	@ 0x740
 801429c:	e9d2 8900 	ldrd	r8, r9, [r2]
 80142a0:	4642      	mov	r2, r8
 80142a2:	fb02 f203 	mul.w	r2, r2, r3
 80142a6:	464b      	mov	r3, r9
 80142a8:	4621      	mov	r1, r4
 80142aa:	fb01 f303 	mul.w	r3, r1, r3
 80142ae:	4413      	add	r3, r2
 80142b0:	4622      	mov	r2, r4
 80142b2:	4641      	mov	r1, r8
 80142b4:	fba2 1201 	umull	r1, r2, r2, r1
 80142b8:	f8c7 2a9c 	str.w	r2, [r7, #2716]	@ 0xa9c
 80142bc:	460a      	mov	r2, r1
 80142be:	f8c7 2a98 	str.w	r2, [r7, #2712]	@ 0xa98
 80142c2:	f8d7 2a9c 	ldr.w	r2, [r7, #2716]	@ 0xa9c
 80142c6:	4413      	add	r3, r2
 80142c8:	f8c7 3a9c 	str.w	r3, [r7, #2716]	@ 0xa9c
 80142cc:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80142d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d4:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80142d8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80142dc:	4621      	mov	r1, r4
 80142de:	1851      	adds	r1, r2, r1
 80142e0:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
 80142e4:	4629      	mov	r1, r5
 80142e6:	eb43 0101 	adc.w	r1, r3, r1
 80142ea:	f8c7 123c 	str.w	r1, [r7, #572]	@ 0x23c
 80142ee:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	@ 0x238
 80142f2:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80142f6:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[1];
 80142fa:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80142fe:	3310      	adds	r3, #16
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	2200      	movs	r2, #0
 8014304:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
 8014308:	f8c7 273c 	str.w	r2, [r7, #1852]	@ 0x73c
 801430c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014310:	3304      	adds	r3, #4
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2200      	movs	r2, #0
 8014316:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
 801431a:	f8c7 2734 	str.w	r2, [r7, #1844]	@ 0x734
 801431e:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 8014322:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014326:	462b      	mov	r3, r5
 8014328:	f507 62e6 	add.w	r2, r7, #1840	@ 0x730
 801432c:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014330:	4642      	mov	r2, r8
 8014332:	fb02 f203 	mul.w	r2, r2, r3
 8014336:	464b      	mov	r3, r9
 8014338:	4621      	mov	r1, r4
 801433a:	fb01 f303 	mul.w	r3, r1, r3
 801433e:	4413      	add	r3, r2
 8014340:	4622      	mov	r2, r4
 8014342:	4641      	mov	r1, r8
 8014344:	fba2 1201 	umull	r1, r2, r2, r1
 8014348:	f8c7 2a94 	str.w	r2, [r7, #2708]	@ 0xa94
 801434c:	460a      	mov	r2, r1
 801434e:	f8c7 2a90 	str.w	r2, [r7, #2704]	@ 0xa90
 8014352:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	@ 0xa94
 8014356:	4413      	add	r3, r2
 8014358:	f8c7 3a94 	str.w	r3, [r7, #2708]	@ 0xa94
 801435c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014364:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8014368:	e9d1 4500 	ldrd	r4, r5, [r1]
 801436c:	4621      	mov	r1, r4
 801436e:	1851      	adds	r1, r2, r1
 8014370:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8014374:	4629      	mov	r1, r5
 8014376:	eb43 0101 	adc.w	r1, r3, r1
 801437a:	f8c7 1234 	str.w	r1, [r7, #564]	@ 0x234
 801437e:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	@ 0x230
 8014382:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014386:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[0];
 801438a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801438e:	3314      	adds	r3, #20
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2200      	movs	r2, #0
 8014394:	f8c7 3728 	str.w	r3, [r7, #1832]	@ 0x728
 8014398:	f8c7 272c 	str.w	r2, [r7, #1836]	@ 0x72c
 801439c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f8c7 3720 	str.w	r3, [r7, #1824]	@ 0x720
 80143a8:	f8c7 2724 	str.w	r2, [r7, #1828]	@ 0x724
 80143ac:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 80143b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80143b4:	462b      	mov	r3, r5
 80143b6:	f507 62e4 	add.w	r2, r7, #1824	@ 0x720
 80143ba:	e9d2 8900 	ldrd	r8, r9, [r2]
 80143be:	4642      	mov	r2, r8
 80143c0:	fb02 f203 	mul.w	r2, r2, r3
 80143c4:	464b      	mov	r3, r9
 80143c6:	4621      	mov	r1, r4
 80143c8:	fb01 f303 	mul.w	r3, r1, r3
 80143cc:	4413      	add	r3, r2
 80143ce:	4622      	mov	r2, r4
 80143d0:	4641      	mov	r1, r8
 80143d2:	fba2 1201 	umull	r1, r2, r2, r1
 80143d6:	f8c7 2a8c 	str.w	r2, [r7, #2700]	@ 0xa8c
 80143da:	460a      	mov	r2, r1
 80143dc:	f8c7 2a88 	str.w	r2, [r7, #2696]	@ 0xa88
 80143e0:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	@ 0xa8c
 80143e4:	4413      	add	r3, r2
 80143e6:	f8c7 3a8c 	str.w	r3, [r7, #2700]	@ 0xa8c
 80143ea:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80143ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f2:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 80143f6:	e9d1 4500 	ldrd	r4, r5, [r1]
 80143fa:	4621      	mov	r1, r4
 80143fc:	1851      	adds	r1, r2, r1
 80143fe:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
 8014402:	4629      	mov	r1, r5
 8014404:	eb43 0101 	adc.w	r1, r3, r1
 8014408:	f8c7 122c 	str.w	r1, [r7, #556]	@ 0x22c
 801440c:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	@ 0x228
 8014410:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014414:	e9c2 3400 	strd	r3, r4, [r2]
  spint v5 = ((spint)t & mask);
 8014418:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 801441c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8014420:	4013      	ands	r3, r2
 8014422:	f8c7 3b44 	str.w	r3, [r7, #2884]	@ 0xb44
  t >>= 29;
 8014426:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801442e:	f04f 0000 	mov.w	r0, #0
 8014432:	f04f 0100 	mov.w	r1, #0
 8014436:	0f50      	lsrs	r0, r2, #29
 8014438:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 801443c:	0f59      	lsrs	r1, r3, #29
 801443e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014442:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[6];
 8014446:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2200      	movs	r2, #0
 801444e:	f8c7 3718 	str.w	r3, [r7, #1816]	@ 0x718
 8014452:	f8c7 271c 	str.w	r2, [r7, #1820]	@ 0x71c
 8014456:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801445a:	3318      	adds	r3, #24
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2200      	movs	r2, #0
 8014460:	f8c7 3710 	str.w	r3, [r7, #1808]	@ 0x710
 8014464:	f8c7 2714 	str.w	r2, [r7, #1812]	@ 0x714
 8014468:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 801446c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014470:	462b      	mov	r3, r5
 8014472:	f507 62e2 	add.w	r2, r7, #1808	@ 0x710
 8014476:	e9d2 8900 	ldrd	r8, r9, [r2]
 801447a:	4642      	mov	r2, r8
 801447c:	fb02 f203 	mul.w	r2, r2, r3
 8014480:	464b      	mov	r3, r9
 8014482:	4621      	mov	r1, r4
 8014484:	fb01 f303 	mul.w	r3, r1, r3
 8014488:	4413      	add	r3, r2
 801448a:	4622      	mov	r2, r4
 801448c:	4641      	mov	r1, r8
 801448e:	fba2 1201 	umull	r1, r2, r2, r1
 8014492:	f8c7 2a84 	str.w	r2, [r7, #2692]	@ 0xa84
 8014496:	460a      	mov	r2, r1
 8014498:	f8c7 2a80 	str.w	r2, [r7, #2688]	@ 0xa80
 801449c:	f8d7 2a84 	ldr.w	r2, [r7, #2692]	@ 0xa84
 80144a0:	4413      	add	r3, r2
 80144a2:	f8c7 3a84 	str.w	r3, [r7, #2692]	@ 0xa84
 80144a6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80144aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ae:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 80144b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80144b6:	4621      	mov	r1, r4
 80144b8:	1851      	adds	r1, r2, r1
 80144ba:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 80144be:	4629      	mov	r1, r5
 80144c0:	eb43 0101 	adc.w	r1, r3, r1
 80144c4:	f8c7 1224 	str.w	r1, [r7, #548]	@ 0x224
 80144c8:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	@ 0x220
 80144cc:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80144d0:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[5];
 80144d4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80144d8:	3304      	adds	r3, #4
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	2200      	movs	r2, #0
 80144de:	f8c7 3708 	str.w	r3, [r7, #1800]	@ 0x708
 80144e2:	f8c7 270c 	str.w	r2, [r7, #1804]	@ 0x70c
 80144e6:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80144ea:	3314      	adds	r3, #20
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2200      	movs	r2, #0
 80144f0:	f8c7 3700 	str.w	r3, [r7, #1792]	@ 0x700
 80144f4:	f8c7 2704 	str.w	r2, [r7, #1796]	@ 0x704
 80144f8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80144fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014500:	462b      	mov	r3, r5
 8014502:	f507 62e0 	add.w	r2, r7, #1792	@ 0x700
 8014506:	e9d2 8900 	ldrd	r8, r9, [r2]
 801450a:	4642      	mov	r2, r8
 801450c:	fb02 f203 	mul.w	r2, r2, r3
 8014510:	464b      	mov	r3, r9
 8014512:	4621      	mov	r1, r4
 8014514:	fb01 f303 	mul.w	r3, r1, r3
 8014518:	4413      	add	r3, r2
 801451a:	4622      	mov	r2, r4
 801451c:	4641      	mov	r1, r8
 801451e:	fba2 1201 	umull	r1, r2, r2, r1
 8014522:	f8c7 2a7c 	str.w	r2, [r7, #2684]	@ 0xa7c
 8014526:	460a      	mov	r2, r1
 8014528:	f8c7 2a78 	str.w	r2, [r7, #2680]	@ 0xa78
 801452c:	f8d7 2a7c 	ldr.w	r2, [r7, #2684]	@ 0xa7c
 8014530:	4413      	add	r3, r2
 8014532:	f8c7 3a7c 	str.w	r3, [r7, #2684]	@ 0xa7c
 8014536:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453e:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8014542:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014546:	4621      	mov	r1, r4
 8014548:	1851      	adds	r1, r2, r1
 801454a:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
 801454e:	4629      	mov	r1, r5
 8014550:	eb43 0101 	adc.w	r1, r3, r1
 8014554:	f8c7 121c 	str.w	r1, [r7, #540]	@ 0x21c
 8014558:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	@ 0x218
 801455c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014560:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[4];
 8014564:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014568:	3308      	adds	r3, #8
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2200      	movs	r2, #0
 801456e:	f8c7 36f8 	str.w	r3, [r7, #1784]	@ 0x6f8
 8014572:	f8c7 26fc 	str.w	r2, [r7, #1788]	@ 0x6fc
 8014576:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801457a:	3310      	adds	r3, #16
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	2200      	movs	r2, #0
 8014580:	f8c7 36f0 	str.w	r3, [r7, #1776]	@ 0x6f0
 8014584:	f8c7 26f4 	str.w	r2, [r7, #1780]	@ 0x6f4
 8014588:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 801458c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014590:	462b      	mov	r3, r5
 8014592:	f507 62de 	add.w	r2, r7, #1776	@ 0x6f0
 8014596:	e9d2 8900 	ldrd	r8, r9, [r2]
 801459a:	4642      	mov	r2, r8
 801459c:	fb02 f203 	mul.w	r2, r2, r3
 80145a0:	464b      	mov	r3, r9
 80145a2:	4621      	mov	r1, r4
 80145a4:	fb01 f303 	mul.w	r3, r1, r3
 80145a8:	4413      	add	r3, r2
 80145aa:	4622      	mov	r2, r4
 80145ac:	4641      	mov	r1, r8
 80145ae:	fba2 1201 	umull	r1, r2, r2, r1
 80145b2:	f8c7 2a74 	str.w	r2, [r7, #2676]	@ 0xa74
 80145b6:	460a      	mov	r2, r1
 80145b8:	f8c7 2a70 	str.w	r2, [r7, #2672]	@ 0xa70
 80145bc:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	@ 0xa74
 80145c0:	4413      	add	r3, r2
 80145c2:	f8c7 3a74 	str.w	r3, [r7, #2676]	@ 0xa74
 80145c6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80145ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ce:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 80145d2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80145d6:	4621      	mov	r1, r4
 80145d8:	1851      	adds	r1, r2, r1
 80145da:	f8c7 1210 	str.w	r1, [r7, #528]	@ 0x210
 80145de:	4629      	mov	r1, r5
 80145e0:	eb43 0101 	adc.w	r1, r3, r1
 80145e4:	f8c7 1214 	str.w	r1, [r7, #532]	@ 0x214
 80145e8:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	@ 0x210
 80145ec:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80145f0:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[3];
 80145f4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80145f8:	330c      	adds	r3, #12
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2200      	movs	r2, #0
 80145fe:	f8c7 36e8 	str.w	r3, [r7, #1768]	@ 0x6e8
 8014602:	f8c7 26ec 	str.w	r2, [r7, #1772]	@ 0x6ec
 8014606:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801460a:	330c      	adds	r3, #12
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2200      	movs	r2, #0
 8014610:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
 8014614:	f8c7 26e4 	str.w	r2, [r7, #1764]	@ 0x6e4
 8014618:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 801461c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014620:	462b      	mov	r3, r5
 8014622:	f507 62dc 	add.w	r2, r7, #1760	@ 0x6e0
 8014626:	e9d2 8900 	ldrd	r8, r9, [r2]
 801462a:	4642      	mov	r2, r8
 801462c:	fb02 f203 	mul.w	r2, r2, r3
 8014630:	464b      	mov	r3, r9
 8014632:	4621      	mov	r1, r4
 8014634:	fb01 f303 	mul.w	r3, r1, r3
 8014638:	4413      	add	r3, r2
 801463a:	4622      	mov	r2, r4
 801463c:	4641      	mov	r1, r8
 801463e:	fba2 1201 	umull	r1, r2, r2, r1
 8014642:	f8c7 2a6c 	str.w	r2, [r7, #2668]	@ 0xa6c
 8014646:	460a      	mov	r2, r1
 8014648:	f8c7 2a68 	str.w	r2, [r7, #2664]	@ 0xa68
 801464c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	@ 0xa6c
 8014650:	4413      	add	r3, r2
 8014652:	f8c7 3a6c 	str.w	r3, [r7, #2668]	@ 0xa6c
 8014656:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465e:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 8014662:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014666:	4621      	mov	r1, r4
 8014668:	1851      	adds	r1, r2, r1
 801466a:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 801466e:	4629      	mov	r1, r5
 8014670:	eb43 0101 	adc.w	r1, r3, r1
 8014674:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8014678:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	@ 0x208
 801467c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014680:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[2];
 8014684:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014688:	3310      	adds	r3, #16
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2200      	movs	r2, #0
 801468e:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
 8014692:	f8c7 26dc 	str.w	r2, [r7, #1756]	@ 0x6dc
 8014696:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801469a:	3308      	adds	r3, #8
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2200      	movs	r2, #0
 80146a0:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 80146a4:	f8c7 26d4 	str.w	r2, [r7, #1748]	@ 0x6d4
 80146a8:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 80146ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80146b0:	462b      	mov	r3, r5
 80146b2:	f507 62da 	add.w	r2, r7, #1744	@ 0x6d0
 80146b6:	e9d2 8900 	ldrd	r8, r9, [r2]
 80146ba:	4642      	mov	r2, r8
 80146bc:	fb02 f203 	mul.w	r2, r2, r3
 80146c0:	464b      	mov	r3, r9
 80146c2:	4621      	mov	r1, r4
 80146c4:	fb01 f303 	mul.w	r3, r1, r3
 80146c8:	4413      	add	r3, r2
 80146ca:	4622      	mov	r2, r4
 80146cc:	4641      	mov	r1, r8
 80146ce:	fba2 1201 	umull	r1, r2, r2, r1
 80146d2:	f8c7 2a64 	str.w	r2, [r7, #2660]	@ 0xa64
 80146d6:	460a      	mov	r2, r1
 80146d8:	f8c7 2a60 	str.w	r2, [r7, #2656]	@ 0xa60
 80146dc:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	@ 0xa64
 80146e0:	4413      	add	r3, r2
 80146e2:	f8c7 3a64 	str.w	r3, [r7, #2660]	@ 0xa64
 80146e6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80146ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ee:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 80146f2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80146f6:	4621      	mov	r1, r4
 80146f8:	1851      	adds	r1, r2, r1
 80146fa:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
 80146fe:	4629      	mov	r1, r5
 8014700:	eb43 0101 	adc.w	r1, r3, r1
 8014704:	f8c7 1204 	str.w	r1, [r7, #516]	@ 0x204
 8014708:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 801470c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014710:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[1];
 8014714:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014718:	3314      	adds	r3, #20
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2200      	movs	r2, #0
 801471e:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 8014722:	f8c7 26cc 	str.w	r2, [r7, #1740]	@ 0x6cc
 8014726:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801472a:	3304      	adds	r3, #4
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	2200      	movs	r2, #0
 8014730:	f8c7 36c0 	str.w	r3, [r7, #1728]	@ 0x6c0
 8014734:	f8c7 26c4 	str.w	r2, [r7, #1732]	@ 0x6c4
 8014738:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 801473c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014740:	462b      	mov	r3, r5
 8014742:	f507 62d8 	add.w	r2, r7, #1728	@ 0x6c0
 8014746:	e9d2 8900 	ldrd	r8, r9, [r2]
 801474a:	4642      	mov	r2, r8
 801474c:	fb02 f203 	mul.w	r2, r2, r3
 8014750:	464b      	mov	r3, r9
 8014752:	4621      	mov	r1, r4
 8014754:	fb01 f303 	mul.w	r3, r1, r3
 8014758:	4413      	add	r3, r2
 801475a:	4622      	mov	r2, r4
 801475c:	4641      	mov	r1, r8
 801475e:	fba2 1201 	umull	r1, r2, r2, r1
 8014762:	f8c7 2a5c 	str.w	r2, [r7, #2652]	@ 0xa5c
 8014766:	460a      	mov	r2, r1
 8014768:	f8c7 2a58 	str.w	r2, [r7, #2648]	@ 0xa58
 801476c:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	@ 0xa5c
 8014770:	4413      	add	r3, r2
 8014772:	f8c7 3a5c 	str.w	r3, [r7, #2652]	@ 0xa5c
 8014776:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801477e:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8014782:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014786:	4621      	mov	r1, r4
 8014788:	1851      	adds	r1, r2, r1
 801478a:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
 801478e:	4629      	mov	r1, r5
 8014790:	eb43 0101 	adc.w	r1, r3, r1
 8014794:	f8c7 11fc 	str.w	r1, [r7, #508]	@ 0x1fc
 8014798:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	@ 0x1f8
 801479c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80147a0:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[0];
 80147a4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80147a8:	3318      	adds	r3, #24
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2200      	movs	r2, #0
 80147ae:	f8c7 36b8 	str.w	r3, [r7, #1720]	@ 0x6b8
 80147b2:	f8c7 26bc 	str.w	r2, [r7, #1724]	@ 0x6bc
 80147b6:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2200      	movs	r2, #0
 80147be:	f8c7 36b0 	str.w	r3, [r7, #1712]	@ 0x6b0
 80147c2:	f8c7 26b4 	str.w	r2, [r7, #1716]	@ 0x6b4
 80147c6:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 80147ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80147ce:	462b      	mov	r3, r5
 80147d0:	f507 62d6 	add.w	r2, r7, #1712	@ 0x6b0
 80147d4:	e9d2 8900 	ldrd	r8, r9, [r2]
 80147d8:	4642      	mov	r2, r8
 80147da:	fb02 f203 	mul.w	r2, r2, r3
 80147de:	464b      	mov	r3, r9
 80147e0:	4621      	mov	r1, r4
 80147e2:	fb01 f303 	mul.w	r3, r1, r3
 80147e6:	4413      	add	r3, r2
 80147e8:	4622      	mov	r2, r4
 80147ea:	4641      	mov	r1, r8
 80147ec:	fba2 1201 	umull	r1, r2, r2, r1
 80147f0:	f8c7 2a54 	str.w	r2, [r7, #2644]	@ 0xa54
 80147f4:	460a      	mov	r2, r1
 80147f6:	f8c7 2a50 	str.w	r2, [r7, #2640]	@ 0xa50
 80147fa:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	@ 0xa54
 80147fe:	4413      	add	r3, r2
 8014800:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 8014804:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801480c:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 8014810:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014814:	4621      	mov	r1, r4
 8014816:	1851      	adds	r1, r2, r1
 8014818:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 801481c:	4629      	mov	r1, r5
 801481e:	eb43 0101 	adc.w	r1, r3, r1
 8014822:	f8c7 11f4 	str.w	r1, [r7, #500]	@ 0x1f4
 8014826:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 801482a:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801482e:	e9c2 3400 	strd	r3, r4, [r2]
  spint v6 = ((spint)t & mask);
 8014832:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8014836:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 801483a:	4013      	ands	r3, r2
 801483c:	f8c7 3b40 	str.w	r3, [r7, #2880]	@ 0xb40
  t >>= 29;
 8014840:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014848:	f04f 0000 	mov.w	r0, #0
 801484c:	f04f 0100 	mov.w	r1, #0
 8014850:	0f50      	lsrs	r0, r2, #29
 8014852:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8014856:	0f59      	lsrs	r1, r3, #29
 8014858:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801485c:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[7];
 8014860:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	2200      	movs	r2, #0
 8014868:	f8c7 36a8 	str.w	r3, [r7, #1704]	@ 0x6a8
 801486c:	f8c7 26ac 	str.w	r2, [r7, #1708]	@ 0x6ac
 8014870:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014874:	331c      	adds	r3, #28
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	2200      	movs	r2, #0
 801487a:	f8c7 36a0 	str.w	r3, [r7, #1696]	@ 0x6a0
 801487e:	f8c7 26a4 	str.w	r2, [r7, #1700]	@ 0x6a4
 8014882:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8014886:	e9d3 4500 	ldrd	r4, r5, [r3]
 801488a:	462b      	mov	r3, r5
 801488c:	f507 62d4 	add.w	r2, r7, #1696	@ 0x6a0
 8014890:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014894:	4642      	mov	r2, r8
 8014896:	fb02 f203 	mul.w	r2, r2, r3
 801489a:	464b      	mov	r3, r9
 801489c:	4621      	mov	r1, r4
 801489e:	fb01 f303 	mul.w	r3, r1, r3
 80148a2:	4413      	add	r3, r2
 80148a4:	4622      	mov	r2, r4
 80148a6:	4641      	mov	r1, r8
 80148a8:	fba2 1201 	umull	r1, r2, r2, r1
 80148ac:	f8c7 2a4c 	str.w	r2, [r7, #2636]	@ 0xa4c
 80148b0:	460a      	mov	r2, r1
 80148b2:	f8c7 2a48 	str.w	r2, [r7, #2632]	@ 0xa48
 80148b6:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	@ 0xa4c
 80148ba:	4413      	add	r3, r2
 80148bc:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
 80148c0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80148c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c8:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 80148cc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80148d0:	4621      	mov	r1, r4
 80148d2:	1851      	adds	r1, r2, r1
 80148d4:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 80148d8:	4629      	mov	r1, r5
 80148da:	eb43 0101 	adc.w	r1, r3, r1
 80148de:	f8c7 11ec 	str.w	r1, [r7, #492]	@ 0x1ec
 80148e2:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	@ 0x1e8
 80148e6:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80148ea:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[6];
 80148ee:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80148f2:	3304      	adds	r3, #4
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
 80148fc:	f8c7 269c 	str.w	r2, [r7, #1692]	@ 0x69c
 8014900:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014904:	3318      	adds	r3, #24
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	2200      	movs	r2, #0
 801490a:	f8c7 3690 	str.w	r3, [r7, #1680]	@ 0x690
 801490e:	f8c7 2694 	str.w	r2, [r7, #1684]	@ 0x694
 8014912:	f507 63d3 	add.w	r3, r7, #1688	@ 0x698
 8014916:	e9d3 4500 	ldrd	r4, r5, [r3]
 801491a:	462b      	mov	r3, r5
 801491c:	f507 62d2 	add.w	r2, r7, #1680	@ 0x690
 8014920:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014924:	4642      	mov	r2, r8
 8014926:	fb02 f203 	mul.w	r2, r2, r3
 801492a:	464b      	mov	r3, r9
 801492c:	4621      	mov	r1, r4
 801492e:	fb01 f303 	mul.w	r3, r1, r3
 8014932:	4413      	add	r3, r2
 8014934:	4622      	mov	r2, r4
 8014936:	4641      	mov	r1, r8
 8014938:	fba2 1201 	umull	r1, r2, r2, r1
 801493c:	f8c7 2a44 	str.w	r2, [r7, #2628]	@ 0xa44
 8014940:	460a      	mov	r2, r1
 8014942:	f8c7 2a40 	str.w	r2, [r7, #2624]	@ 0xa40
 8014946:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	@ 0xa44
 801494a:	4413      	add	r3, r2
 801494c:	f8c7 3a44 	str.w	r3, [r7, #2628]	@ 0xa44
 8014950:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014958:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 801495c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014960:	4621      	mov	r1, r4
 8014962:	1851      	adds	r1, r2, r1
 8014964:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 8014968:	4629      	mov	r1, r5
 801496a:	eb43 0101 	adc.w	r1, r3, r1
 801496e:	f8c7 11e4 	str.w	r1, [r7, #484]	@ 0x1e4
 8014972:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 8014976:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801497a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[5];
 801497e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014982:	3308      	adds	r3, #8
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	2200      	movs	r2, #0
 8014988:	f8c7 3688 	str.w	r3, [r7, #1672]	@ 0x688
 801498c:	f8c7 268c 	str.w	r2, [r7, #1676]	@ 0x68c
 8014990:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014994:	3314      	adds	r3, #20
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	2200      	movs	r2, #0
 801499a:	f8c7 3680 	str.w	r3, [r7, #1664]	@ 0x680
 801499e:	f8c7 2684 	str.w	r2, [r7, #1668]	@ 0x684
 80149a2:	f507 63d1 	add.w	r3, r7, #1672	@ 0x688
 80149a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80149aa:	462b      	mov	r3, r5
 80149ac:	f507 62d0 	add.w	r2, r7, #1664	@ 0x680
 80149b0:	e9d2 8900 	ldrd	r8, r9, [r2]
 80149b4:	4642      	mov	r2, r8
 80149b6:	fb02 f203 	mul.w	r2, r2, r3
 80149ba:	464b      	mov	r3, r9
 80149bc:	4621      	mov	r1, r4
 80149be:	fb01 f303 	mul.w	r3, r1, r3
 80149c2:	4413      	add	r3, r2
 80149c4:	4622      	mov	r2, r4
 80149c6:	4641      	mov	r1, r8
 80149c8:	fba2 1201 	umull	r1, r2, r2, r1
 80149cc:	f8c7 2a3c 	str.w	r2, [r7, #2620]	@ 0xa3c
 80149d0:	460a      	mov	r2, r1
 80149d2:	f8c7 2a38 	str.w	r2, [r7, #2616]	@ 0xa38
 80149d6:	f8d7 2a3c 	ldr.w	r2, [r7, #2620]	@ 0xa3c
 80149da:	4413      	add	r3, r2
 80149dc:	f8c7 3a3c 	str.w	r3, [r7, #2620]	@ 0xa3c
 80149e0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80149e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e8:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 80149ec:	e9d1 4500 	ldrd	r4, r5, [r1]
 80149f0:	4621      	mov	r1, r4
 80149f2:	1851      	adds	r1, r2, r1
 80149f4:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
 80149f8:	4629      	mov	r1, r5
 80149fa:	eb43 0101 	adc.w	r1, r3, r1
 80149fe:	f8c7 11dc 	str.w	r1, [r7, #476]	@ 0x1dc
 8014a02:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8014a06:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014a0a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[4];
 8014a0e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014a12:	330c      	adds	r3, #12
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f8c7 3678 	str.w	r3, [r7, #1656]	@ 0x678
 8014a1c:	f8c7 267c 	str.w	r2, [r7, #1660]	@ 0x67c
 8014a20:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014a24:	3310      	adds	r3, #16
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f8c7 3670 	str.w	r3, [r7, #1648]	@ 0x670
 8014a2e:	f8c7 2674 	str.w	r2, [r7, #1652]	@ 0x674
 8014a32:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8014a36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014a3a:	462b      	mov	r3, r5
 8014a3c:	f507 62ce 	add.w	r2, r7, #1648	@ 0x670
 8014a40:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014a44:	4642      	mov	r2, r8
 8014a46:	fb02 f203 	mul.w	r2, r2, r3
 8014a4a:	464b      	mov	r3, r9
 8014a4c:	4621      	mov	r1, r4
 8014a4e:	fb01 f303 	mul.w	r3, r1, r3
 8014a52:	4413      	add	r3, r2
 8014a54:	4622      	mov	r2, r4
 8014a56:	4641      	mov	r1, r8
 8014a58:	fba2 1201 	umull	r1, r2, r2, r1
 8014a5c:	f8c7 2a34 	str.w	r2, [r7, #2612]	@ 0xa34
 8014a60:	460a      	mov	r2, r1
 8014a62:	f8c7 2a30 	str.w	r2, [r7, #2608]	@ 0xa30
 8014a66:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	@ 0xa34
 8014a6a:	4413      	add	r3, r2
 8014a6c:	f8c7 3a34 	str.w	r3, [r7, #2612]	@ 0xa34
 8014a70:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a78:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 8014a7c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014a80:	4621      	mov	r1, r4
 8014a82:	1851      	adds	r1, r2, r1
 8014a84:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
 8014a88:	4629      	mov	r1, r5
 8014a8a:	eb43 0101 	adc.w	r1, r3, r1
 8014a8e:	f8c7 11d4 	str.w	r1, [r7, #468]	@ 0x1d4
 8014a92:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	@ 0x1d0
 8014a96:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014a9a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[3];
 8014a9e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014aa2:	3310      	adds	r3, #16
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	f8c7 3668 	str.w	r3, [r7, #1640]	@ 0x668
 8014aac:	f8c7 266c 	str.w	r2, [r7, #1644]	@ 0x66c
 8014ab0:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014ab4:	330c      	adds	r3, #12
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	f8c7 3660 	str.w	r3, [r7, #1632]	@ 0x660
 8014abe:	f8c7 2664 	str.w	r2, [r7, #1636]	@ 0x664
 8014ac2:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 8014ac6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014aca:	462b      	mov	r3, r5
 8014acc:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8014ad0:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014ad4:	4642      	mov	r2, r8
 8014ad6:	fb02 f203 	mul.w	r2, r2, r3
 8014ada:	464b      	mov	r3, r9
 8014adc:	4621      	mov	r1, r4
 8014ade:	fb01 f303 	mul.w	r3, r1, r3
 8014ae2:	4413      	add	r3, r2
 8014ae4:	4622      	mov	r2, r4
 8014ae6:	4641      	mov	r1, r8
 8014ae8:	fba2 1201 	umull	r1, r2, r2, r1
 8014aec:	f8c7 2a2c 	str.w	r2, [r7, #2604]	@ 0xa2c
 8014af0:	460a      	mov	r2, r1
 8014af2:	f8c7 2a28 	str.w	r2, [r7, #2600]	@ 0xa28
 8014af6:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	@ 0xa2c
 8014afa:	4413      	add	r3, r2
 8014afc:	f8c7 3a2c 	str.w	r3, [r7, #2604]	@ 0xa2c
 8014b00:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b08:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 8014b0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014b10:	4621      	mov	r1, r4
 8014b12:	1851      	adds	r1, r2, r1
 8014b14:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
 8014b18:	4629      	mov	r1, r5
 8014b1a:	eb43 0101 	adc.w	r1, r3, r1
 8014b1e:	f8c7 11cc 	str.w	r1, [r7, #460]	@ 0x1cc
 8014b22:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8014b26:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014b2a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[2];
 8014b2e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014b32:	3314      	adds	r3, #20
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	2200      	movs	r2, #0
 8014b38:	f8c7 3658 	str.w	r3, [r7, #1624]	@ 0x658
 8014b3c:	f8c7 265c 	str.w	r2, [r7, #1628]	@ 0x65c
 8014b40:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014b44:	3308      	adds	r3, #8
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
 8014b4e:	f8c7 2654 	str.w	r2, [r7, #1620]	@ 0x654
 8014b52:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8014b56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014b5a:	462b      	mov	r3, r5
 8014b5c:	f507 62ca 	add.w	r2, r7, #1616	@ 0x650
 8014b60:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014b64:	4642      	mov	r2, r8
 8014b66:	fb02 f203 	mul.w	r2, r2, r3
 8014b6a:	464b      	mov	r3, r9
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	fb01 f303 	mul.w	r3, r1, r3
 8014b72:	4413      	add	r3, r2
 8014b74:	4622      	mov	r2, r4
 8014b76:	4641      	mov	r1, r8
 8014b78:	fba2 1201 	umull	r1, r2, r2, r1
 8014b7c:	f8c7 2a24 	str.w	r2, [r7, #2596]	@ 0xa24
 8014b80:	460a      	mov	r2, r1
 8014b82:	f8c7 2a20 	str.w	r2, [r7, #2592]	@ 0xa20
 8014b86:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	@ 0xa24
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f8c7 3a24 	str.w	r3, [r7, #2596]	@ 0xa24
 8014b90:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b98:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 8014b9c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014ba0:	4621      	mov	r1, r4
 8014ba2:	1851      	adds	r1, r2, r1
 8014ba4:	f8c7 11c0 	str.w	r1, [r7, #448]	@ 0x1c0
 8014ba8:	4629      	mov	r1, r5
 8014baa:	eb43 0101 	adc.w	r1, r3, r1
 8014bae:	f8c7 11c4 	str.w	r1, [r7, #452]	@ 0x1c4
 8014bb2:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	@ 0x1c0
 8014bb6:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014bba:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[1];
 8014bbe:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014bc2:	3318      	adds	r3, #24
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 8014bcc:	f8c7 264c 	str.w	r2, [r7, #1612]	@ 0x64c
 8014bd0:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014bd4:	3304      	adds	r3, #4
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	f8c7 3640 	str.w	r3, [r7, #1600]	@ 0x640
 8014bde:	f8c7 2644 	str.w	r2, [r7, #1604]	@ 0x644
 8014be2:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8014be6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014bea:	462b      	mov	r3, r5
 8014bec:	f507 62c8 	add.w	r2, r7, #1600	@ 0x640
 8014bf0:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014bf4:	4642      	mov	r2, r8
 8014bf6:	fb02 f203 	mul.w	r2, r2, r3
 8014bfa:	464b      	mov	r3, r9
 8014bfc:	4621      	mov	r1, r4
 8014bfe:	fb01 f303 	mul.w	r3, r1, r3
 8014c02:	4413      	add	r3, r2
 8014c04:	4622      	mov	r2, r4
 8014c06:	4641      	mov	r1, r8
 8014c08:	fba2 1201 	umull	r1, r2, r2, r1
 8014c0c:	f8c7 2a1c 	str.w	r2, [r7, #2588]	@ 0xa1c
 8014c10:	460a      	mov	r2, r1
 8014c12:	f8c7 2a18 	str.w	r2, [r7, #2584]	@ 0xa18
 8014c16:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	@ 0xa1c
 8014c1a:	4413      	add	r3, r2
 8014c1c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	@ 0xa1c
 8014c20:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c28:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 8014c2c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014c30:	4621      	mov	r1, r4
 8014c32:	1851      	adds	r1, r2, r1
 8014c34:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
 8014c38:	4629      	mov	r1, r5
 8014c3a:	eb43 0101 	adc.w	r1, r3, r1
 8014c3e:	f8c7 11bc 	str.w	r1, [r7, #444]	@ 0x1bc
 8014c42:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8014c46:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014c4a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[0];
 8014c4e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014c52:	331c      	adds	r3, #28
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	2200      	movs	r2, #0
 8014c58:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
 8014c5c:	f8c7 263c 	str.w	r2, [r7, #1596]	@ 0x63c
 8014c60:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	2200      	movs	r2, #0
 8014c68:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 8014c6c:	f8c7 2634 	str.w	r2, [r7, #1588]	@ 0x634
 8014c70:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 8014c74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014c78:	462b      	mov	r3, r5
 8014c7a:	f507 62c6 	add.w	r2, r7, #1584	@ 0x630
 8014c7e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014c82:	4642      	mov	r2, r8
 8014c84:	fb02 f203 	mul.w	r2, r2, r3
 8014c88:	464b      	mov	r3, r9
 8014c8a:	4621      	mov	r1, r4
 8014c8c:	fb01 f303 	mul.w	r3, r1, r3
 8014c90:	4413      	add	r3, r2
 8014c92:	4622      	mov	r2, r4
 8014c94:	4641      	mov	r1, r8
 8014c96:	fba2 1201 	umull	r1, r2, r2, r1
 8014c9a:	f8c7 2a14 	str.w	r2, [r7, #2580]	@ 0xa14
 8014c9e:	460a      	mov	r2, r1
 8014ca0:	f8c7 2a10 	str.w	r2, [r7, #2576]	@ 0xa10
 8014ca4:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	@ 0xa14
 8014ca8:	4413      	add	r3, r2
 8014caa:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8014cae:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb6:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 8014cba:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	1851      	adds	r1, r2, r1
 8014cc2:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8014cc6:	4629      	mov	r1, r5
 8014cc8:	eb43 0101 	adc.w	r1, r3, r1
 8014ccc:	f8c7 11b4 	str.w	r1, [r7, #436]	@ 0x1b4
 8014cd0:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	@ 0x1b0
 8014cd4:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014cd8:	e9c2 3400 	strd	r3, r4, [r2]
  spint v7 = ((spint)t & mask);
 8014cdc:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8014ce0:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8014ce4:	4013      	ands	r3, r2
 8014ce6:	f8c7 3b3c 	str.w	r3, [r7, #2876]	@ 0xb3c
  t >>= 29;
 8014cea:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf2:	f04f 0000 	mov.w	r0, #0
 8014cf6:	f04f 0100 	mov.w	r1, #0
 8014cfa:	0f50      	lsrs	r0, r2, #29
 8014cfc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8014d00:	0f59      	lsrs	r1, r3, #29
 8014d02:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014d06:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[0] * b[8];
 8014d0a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	2200      	movs	r2, #0
 8014d12:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 8014d16:	f8c7 262c 	str.w	r2, [r7, #1580]	@ 0x62c
 8014d1a:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014d1e:	3320      	adds	r3, #32
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2200      	movs	r2, #0
 8014d24:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8014d28:	f8c7 2624 	str.w	r2, [r7, #1572]	@ 0x624
 8014d2c:	f507 63c5 	add.w	r3, r7, #1576	@ 0x628
 8014d30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014d34:	462b      	mov	r3, r5
 8014d36:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 8014d3a:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014d3e:	4642      	mov	r2, r8
 8014d40:	fb02 f203 	mul.w	r2, r2, r3
 8014d44:	464b      	mov	r3, r9
 8014d46:	4621      	mov	r1, r4
 8014d48:	fb01 f303 	mul.w	r3, r1, r3
 8014d4c:	4413      	add	r3, r2
 8014d4e:	4622      	mov	r2, r4
 8014d50:	4641      	mov	r1, r8
 8014d52:	fba2 1201 	umull	r1, r2, r2, r1
 8014d56:	f8c7 2a0c 	str.w	r2, [r7, #2572]	@ 0xa0c
 8014d5a:	460a      	mov	r2, r1
 8014d5c:	f8c7 2a08 	str.w	r2, [r7, #2568]	@ 0xa08
 8014d60:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	@ 0xa0c
 8014d64:	4413      	add	r3, r2
 8014d66:	f8c7 3a0c 	str.w	r3, [r7, #2572]	@ 0xa0c
 8014d6a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d72:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 8014d76:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	1851      	adds	r1, r2, r1
 8014d7e:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8014d82:	4629      	mov	r1, r5
 8014d84:	eb43 0101 	adc.w	r1, r3, r1
 8014d88:	f8c7 11ac 	str.w	r1, [r7, #428]	@ 0x1ac
 8014d8c:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8014d90:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014d94:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[1] * b[7];
 8014d98:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014d9c:	3304      	adds	r3, #4
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	2200      	movs	r2, #0
 8014da2:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 8014da6:	f8c7 261c 	str.w	r2, [r7, #1564]	@ 0x61c
 8014daa:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014dae:	331c      	adds	r3, #28
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	2200      	movs	r2, #0
 8014db4:	f8c7 3610 	str.w	r3, [r7, #1552]	@ 0x610
 8014db8:	f8c7 2614 	str.w	r2, [r7, #1556]	@ 0x614
 8014dbc:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 8014dc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014dc4:	462b      	mov	r3, r5
 8014dc6:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8014dca:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014dce:	4642      	mov	r2, r8
 8014dd0:	fb02 f203 	mul.w	r2, r2, r3
 8014dd4:	464b      	mov	r3, r9
 8014dd6:	4621      	mov	r1, r4
 8014dd8:	fb01 f303 	mul.w	r3, r1, r3
 8014ddc:	4413      	add	r3, r2
 8014dde:	4622      	mov	r2, r4
 8014de0:	4641      	mov	r1, r8
 8014de2:	fba2 1201 	umull	r1, r2, r2, r1
 8014de6:	f8c7 2a04 	str.w	r2, [r7, #2564]	@ 0xa04
 8014dea:	460a      	mov	r2, r1
 8014dec:	f8c7 2a00 	str.w	r2, [r7, #2560]	@ 0xa00
 8014df0:	f8d7 2a04 	ldr.w	r2, [r7, #2564]	@ 0xa04
 8014df4:	4413      	add	r3, r2
 8014df6:	f8c7 3a04 	str.w	r3, [r7, #2564]	@ 0xa04
 8014dfa:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e02:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 8014e06:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014e0a:	4621      	mov	r1, r4
 8014e0c:	1851      	adds	r1, r2, r1
 8014e0e:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8014e12:	4629      	mov	r1, r5
 8014e14:	eb43 0101 	adc.w	r1, r3, r1
 8014e18:	f8c7 11a4 	str.w	r1, [r7, #420]	@ 0x1a4
 8014e1c:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	@ 0x1a0
 8014e20:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014e24:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[6];
 8014e28:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014e2c:	3308      	adds	r3, #8
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2200      	movs	r2, #0
 8014e32:	f8c7 3608 	str.w	r3, [r7, #1544]	@ 0x608
 8014e36:	f8c7 260c 	str.w	r2, [r7, #1548]	@ 0x60c
 8014e3a:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014e3e:	3318      	adds	r3, #24
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	2200      	movs	r2, #0
 8014e44:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8014e48:	f8c7 2604 	str.w	r2, [r7, #1540]	@ 0x604
 8014e4c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8014e50:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014e54:	462b      	mov	r3, r5
 8014e56:	f507 62c0 	add.w	r2, r7, #1536	@ 0x600
 8014e5a:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014e5e:	4642      	mov	r2, r8
 8014e60:	fb02 f203 	mul.w	r2, r2, r3
 8014e64:	464b      	mov	r3, r9
 8014e66:	4621      	mov	r1, r4
 8014e68:	fb01 f303 	mul.w	r3, r1, r3
 8014e6c:	4413      	add	r3, r2
 8014e6e:	4622      	mov	r2, r4
 8014e70:	4641      	mov	r1, r8
 8014e72:	fba2 1201 	umull	r1, r2, r2, r1
 8014e76:	f8c7 29fc 	str.w	r2, [r7, #2556]	@ 0x9fc
 8014e7a:	460a      	mov	r2, r1
 8014e7c:	f8c7 29f8 	str.w	r2, [r7, #2552]	@ 0x9f8
 8014e80:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	@ 0x9fc
 8014e84:	4413      	add	r3, r2
 8014e86:	f8c7 39fc 	str.w	r3, [r7, #2556]	@ 0x9fc
 8014e8a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e92:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8014e96:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014e9a:	4621      	mov	r1, r4
 8014e9c:	1851      	adds	r1, r2, r1
 8014e9e:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 8014ea2:	4629      	mov	r1, r5
 8014ea4:	eb43 0101 	adc.w	r1, r3, r1
 8014ea8:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 8014eac:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8014eb0:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014eb4:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[5];
 8014eb8:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014ebc:	330c      	adds	r3, #12
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	f8c7 35f8 	str.w	r3, [r7, #1528]	@ 0x5f8
 8014ec6:	f8c7 25fc 	str.w	r2, [r7, #1532]	@ 0x5fc
 8014eca:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014ece:	3314      	adds	r3, #20
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f8c7 35f0 	str.w	r3, [r7, #1520]	@ 0x5f0
 8014ed8:	f8c7 25f4 	str.w	r2, [r7, #1524]	@ 0x5f4
 8014edc:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 8014ee0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014ee4:	462b      	mov	r3, r5
 8014ee6:	f507 62be 	add.w	r2, r7, #1520	@ 0x5f0
 8014eea:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014eee:	4642      	mov	r2, r8
 8014ef0:	fb02 f203 	mul.w	r2, r2, r3
 8014ef4:	464b      	mov	r3, r9
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	fb01 f303 	mul.w	r3, r1, r3
 8014efc:	4413      	add	r3, r2
 8014efe:	4622      	mov	r2, r4
 8014f00:	4641      	mov	r1, r8
 8014f02:	fba2 1201 	umull	r1, r2, r2, r1
 8014f06:	f8c7 29f4 	str.w	r2, [r7, #2548]	@ 0x9f4
 8014f0a:	460a      	mov	r2, r1
 8014f0c:	f8c7 29f0 	str.w	r2, [r7, #2544]	@ 0x9f0
 8014f10:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	@ 0x9f4
 8014f14:	4413      	add	r3, r2
 8014f16:	f8c7 39f4 	str.w	r3, [r7, #2548]	@ 0x9f4
 8014f1a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f22:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 8014f26:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014f2a:	4621      	mov	r1, r4
 8014f2c:	1851      	adds	r1, r2, r1
 8014f2e:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8014f32:	4629      	mov	r1, r5
 8014f34:	eb43 0101 	adc.w	r1, r3, r1
 8014f38:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8014f3c:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 8014f40:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014f44:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[4];
 8014f48:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014f4c:	3310      	adds	r3, #16
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2200      	movs	r2, #0
 8014f52:	f8c7 35e8 	str.w	r3, [r7, #1512]	@ 0x5e8
 8014f56:	f8c7 25ec 	str.w	r2, [r7, #1516]	@ 0x5ec
 8014f5a:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014f5e:	3310      	adds	r3, #16
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	2200      	movs	r2, #0
 8014f64:	f8c7 35e0 	str.w	r3, [r7, #1504]	@ 0x5e0
 8014f68:	f8c7 25e4 	str.w	r2, [r7, #1508]	@ 0x5e4
 8014f6c:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8014f70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014f74:	462b      	mov	r3, r5
 8014f76:	f507 62bc 	add.w	r2, r7, #1504	@ 0x5e0
 8014f7a:	e9d2 8900 	ldrd	r8, r9, [r2]
 8014f7e:	4642      	mov	r2, r8
 8014f80:	fb02 f203 	mul.w	r2, r2, r3
 8014f84:	464b      	mov	r3, r9
 8014f86:	4621      	mov	r1, r4
 8014f88:	fb01 f303 	mul.w	r3, r1, r3
 8014f8c:	4413      	add	r3, r2
 8014f8e:	4622      	mov	r2, r4
 8014f90:	4641      	mov	r1, r8
 8014f92:	fba2 1201 	umull	r1, r2, r2, r1
 8014f96:	f8c7 29ec 	str.w	r2, [r7, #2540]	@ 0x9ec
 8014f9a:	460a      	mov	r2, r1
 8014f9c:	f8c7 29e8 	str.w	r2, [r7, #2536]	@ 0x9e8
 8014fa0:	f8d7 29ec 	ldr.w	r2, [r7, #2540]	@ 0x9ec
 8014fa4:	4413      	add	r3, r2
 8014fa6:	f8c7 39ec 	str.w	r3, [r7, #2540]	@ 0x9ec
 8014faa:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8014fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb2:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 8014fb6:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014fba:	4621      	mov	r1, r4
 8014fbc:	1851      	adds	r1, r2, r1
 8014fbe:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 8014fc2:	4629      	mov	r1, r5
 8014fc4:	eb43 0101 	adc.w	r1, r3, r1
 8014fc8:	f8c7 118c 	str.w	r1, [r7, #396]	@ 0x18c
 8014fcc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8014fd0:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8014fd4:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[3];
 8014fd8:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8014fdc:	3314      	adds	r3, #20
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
 8014fe6:	f8c7 25dc 	str.w	r2, [r7, #1500]	@ 0x5dc
 8014fea:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8014fee:	330c      	adds	r3, #12
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 8014ff8:	f8c7 25d4 	str.w	r2, [r7, #1492]	@ 0x5d4
 8014ffc:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 8015000:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015004:	462b      	mov	r3, r5
 8015006:	f507 62ba 	add.w	r2, r7, #1488	@ 0x5d0
 801500a:	e9d2 8900 	ldrd	r8, r9, [r2]
 801500e:	4642      	mov	r2, r8
 8015010:	fb02 f203 	mul.w	r2, r2, r3
 8015014:	464b      	mov	r3, r9
 8015016:	4621      	mov	r1, r4
 8015018:	fb01 f303 	mul.w	r3, r1, r3
 801501c:	4413      	add	r3, r2
 801501e:	4622      	mov	r2, r4
 8015020:	4641      	mov	r1, r8
 8015022:	fba2 1201 	umull	r1, r2, r2, r1
 8015026:	f8c7 29e4 	str.w	r2, [r7, #2532]	@ 0x9e4
 801502a:	460a      	mov	r2, r1
 801502c:	f8c7 29e0 	str.w	r2, [r7, #2528]	@ 0x9e0
 8015030:	f8d7 29e4 	ldr.w	r2, [r7, #2532]	@ 0x9e4
 8015034:	4413      	add	r3, r2
 8015036:	f8c7 39e4 	str.w	r3, [r7, #2532]	@ 0x9e4
 801503a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015042:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 8015046:	e9d1 4500 	ldrd	r4, r5, [r1]
 801504a:	4621      	mov	r1, r4
 801504c:	1851      	adds	r1, r2, r1
 801504e:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 8015052:	4629      	mov	r1, r5
 8015054:	eb43 0101 	adc.w	r1, r3, r1
 8015058:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 801505c:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	@ 0x180
 8015060:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015064:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[2];
 8015068:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801506c:	3318      	adds	r3, #24
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	2200      	movs	r2, #0
 8015072:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 8015076:	f8c7 25cc 	str.w	r2, [r7, #1484]	@ 0x5cc
 801507a:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801507e:	3308      	adds	r3, #8
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	2200      	movs	r2, #0
 8015084:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
 8015088:	f8c7 25c4 	str.w	r2, [r7, #1476]	@ 0x5c4
 801508c:	f507 63b9 	add.w	r3, r7, #1480	@ 0x5c8
 8015090:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015094:	462b      	mov	r3, r5
 8015096:	f507 62b8 	add.w	r2, r7, #1472	@ 0x5c0
 801509a:	e9d2 8900 	ldrd	r8, r9, [r2]
 801509e:	4642      	mov	r2, r8
 80150a0:	fb02 f203 	mul.w	r2, r2, r3
 80150a4:	464b      	mov	r3, r9
 80150a6:	4621      	mov	r1, r4
 80150a8:	fb01 f303 	mul.w	r3, r1, r3
 80150ac:	4413      	add	r3, r2
 80150ae:	4622      	mov	r2, r4
 80150b0:	4641      	mov	r1, r8
 80150b2:	fba2 1201 	umull	r1, r2, r2, r1
 80150b6:	f8c7 29dc 	str.w	r2, [r7, #2524]	@ 0x9dc
 80150ba:	460a      	mov	r2, r1
 80150bc:	f8c7 29d8 	str.w	r2, [r7, #2520]	@ 0x9d8
 80150c0:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	@ 0x9dc
 80150c4:	4413      	add	r3, r2
 80150c6:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 80150ca:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80150ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d2:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 80150d6:	e9d1 4500 	ldrd	r4, r5, [r1]
 80150da:	4621      	mov	r1, r4
 80150dc:	1851      	adds	r1, r2, r1
 80150de:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 80150e2:	4629      	mov	r1, r5
 80150e4:	eb43 0101 	adc.w	r1, r3, r1
 80150e8:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 80150ec:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 80150f0:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80150f4:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[1];
 80150f8:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80150fc:	331c      	adds	r3, #28
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2200      	movs	r2, #0
 8015102:	f8c7 35b8 	str.w	r3, [r7, #1464]	@ 0x5b8
 8015106:	f8c7 25bc 	str.w	r2, [r7, #1468]	@ 0x5bc
 801510a:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801510e:	3304      	adds	r3, #4
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	2200      	movs	r2, #0
 8015114:	f8c7 35b0 	str.w	r3, [r7, #1456]	@ 0x5b0
 8015118:	f8c7 25b4 	str.w	r2, [r7, #1460]	@ 0x5b4
 801511c:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8015120:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015124:	462b      	mov	r3, r5
 8015126:	f507 62b6 	add.w	r2, r7, #1456	@ 0x5b0
 801512a:	e9d2 8900 	ldrd	r8, r9, [r2]
 801512e:	4642      	mov	r2, r8
 8015130:	fb02 f203 	mul.w	r2, r2, r3
 8015134:	464b      	mov	r3, r9
 8015136:	4621      	mov	r1, r4
 8015138:	fb01 f303 	mul.w	r3, r1, r3
 801513c:	4413      	add	r3, r2
 801513e:	4622      	mov	r2, r4
 8015140:	4641      	mov	r1, r8
 8015142:	fba2 1201 	umull	r1, r2, r2, r1
 8015146:	f8c7 29d4 	str.w	r2, [r7, #2516]	@ 0x9d4
 801514a:	460a      	mov	r2, r1
 801514c:	f8c7 29d0 	str.w	r2, [r7, #2512]	@ 0x9d0
 8015150:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	@ 0x9d4
 8015154:	4413      	add	r3, r2
 8015156:	f8c7 39d4 	str.w	r3, [r7, #2516]	@ 0x9d4
 801515a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015162:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 8015166:	e9d1 4500 	ldrd	r4, r5, [r1]
 801516a:	4621      	mov	r1, r4
 801516c:	1851      	adds	r1, r2, r1
 801516e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 8015172:	4629      	mov	r1, r5
 8015174:	eb43 0101 	adc.w	r1, r3, r1
 8015178:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
 801517c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 8015180:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015184:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[0];
 8015188:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801518c:	3320      	adds	r3, #32
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	2200      	movs	r2, #0
 8015192:	f8c7 35a8 	str.w	r3, [r7, #1448]	@ 0x5a8
 8015196:	f8c7 25ac 	str.w	r2, [r7, #1452]	@ 0x5ac
 801519a:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	2200      	movs	r2, #0
 80151a2:	f8c7 35a0 	str.w	r3, [r7, #1440]	@ 0x5a0
 80151a6:	f8c7 25a4 	str.w	r2, [r7, #1444]	@ 0x5a4
 80151aa:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80151ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80151b2:	462b      	mov	r3, r5
 80151b4:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 80151b8:	e9d2 8900 	ldrd	r8, r9, [r2]
 80151bc:	4642      	mov	r2, r8
 80151be:	fb02 f203 	mul.w	r2, r2, r3
 80151c2:	464b      	mov	r3, r9
 80151c4:	4621      	mov	r1, r4
 80151c6:	fb01 f303 	mul.w	r3, r1, r3
 80151ca:	4413      	add	r3, r2
 80151cc:	4622      	mov	r2, r4
 80151ce:	4641      	mov	r1, r8
 80151d0:	fba2 1201 	umull	r1, r2, r2, r1
 80151d4:	f8c7 29cc 	str.w	r2, [r7, #2508]	@ 0x9cc
 80151d8:	460a      	mov	r2, r1
 80151da:	f8c7 29c8 	str.w	r2, [r7, #2504]	@ 0x9c8
 80151de:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	@ 0x9cc
 80151e2:	4413      	add	r3, r2
 80151e4:	f8c7 39cc 	str.w	r3, [r7, #2508]	@ 0x9cc
 80151e8:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 80151f4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80151f8:	4621      	mov	r1, r4
 80151fa:	1851      	adds	r1, r2, r1
 80151fc:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 8015200:	4629      	mov	r1, r5
 8015202:	eb43 0101 	adc.w	r1, r3, r1
 8015206:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 801520a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 801520e:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015212:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v0 * (dpint)p8;
 8015216:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 801521a:	2200      	movs	r2, #0
 801521c:	f8c7 3598 	str.w	r3, [r7, #1432]	@ 0x598
 8015220:	f8c7 259c 	str.w	r2, [r7, #1436]	@ 0x59c
 8015224:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8015228:	2200      	movs	r2, #0
 801522a:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590
 801522e:	f8c7 2594 	str.w	r2, [r7, #1428]	@ 0x594
 8015232:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8015236:	e9d3 4500 	ldrd	r4, r5, [r3]
 801523a:	462b      	mov	r3, r5
 801523c:	f507 62b2 	add.w	r2, r7, #1424	@ 0x590
 8015240:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015244:	4642      	mov	r2, r8
 8015246:	fb02 f203 	mul.w	r2, r2, r3
 801524a:	464b      	mov	r3, r9
 801524c:	4621      	mov	r1, r4
 801524e:	fb01 f303 	mul.w	r3, r1, r3
 8015252:	4413      	add	r3, r2
 8015254:	4622      	mov	r2, r4
 8015256:	4641      	mov	r1, r8
 8015258:	fba2 1201 	umull	r1, r2, r2, r1
 801525c:	f8c7 29c4 	str.w	r2, [r7, #2500]	@ 0x9c4
 8015260:	460a      	mov	r2, r1
 8015262:	f8c7 29c0 	str.w	r2, [r7, #2496]	@ 0x9c0
 8015266:	f8d7 29c4 	ldr.w	r2, [r7, #2500]	@ 0x9c4
 801526a:	4413      	add	r3, r2
 801526c:	f8c7 39c4 	str.w	r3, [r7, #2500]	@ 0x9c4
 8015270:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015278:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 801527c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015280:	4621      	mov	r1, r4
 8015282:	1851      	adds	r1, r2, r1
 8015284:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8015288:	4629      	mov	r1, r5
 801528a:	eb43 0101 	adc.w	r1, r3, r1
 801528e:	f8c7 1164 	str.w	r1, [r7, #356]	@ 0x164
 8015292:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	@ 0x160
 8015296:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801529a:	e9c2 3400 	strd	r3, r4, [r2]
  spint v8 = ((spint)t & mask);
 801529e:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 80152a2:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 80152a6:	4013      	ands	r3, r2
 80152a8:	f8c7 3b38 	str.w	r3, [r7, #2872]	@ 0xb38
  t >>= 29;
 80152ac:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80152b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b4:	f04f 0000 	mov.w	r0, #0
 80152b8:	f04f 0100 	mov.w	r1, #0
 80152bc:	0f50      	lsrs	r0, r2, #29
 80152be:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80152c2:	0f59      	lsrs	r1, r3, #29
 80152c4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80152c8:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[1] * b[8];
 80152cc:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80152d0:	3304      	adds	r3, #4
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	2200      	movs	r2, #0
 80152d6:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
 80152da:	f8c7 258c 	str.w	r2, [r7, #1420]	@ 0x58c
 80152de:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80152e2:	3320      	adds	r3, #32
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2200      	movs	r2, #0
 80152e8:	f8c7 3580 	str.w	r3, [r7, #1408]	@ 0x580
 80152ec:	f8c7 2584 	str.w	r2, [r7, #1412]	@ 0x584
 80152f0:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 80152f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80152f8:	462b      	mov	r3, r5
 80152fa:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
 80152fe:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015302:	4642      	mov	r2, r8
 8015304:	fb02 f203 	mul.w	r2, r2, r3
 8015308:	464b      	mov	r3, r9
 801530a:	4621      	mov	r1, r4
 801530c:	fb01 f303 	mul.w	r3, r1, r3
 8015310:	4413      	add	r3, r2
 8015312:	4622      	mov	r2, r4
 8015314:	4641      	mov	r1, r8
 8015316:	fba2 1201 	umull	r1, r2, r2, r1
 801531a:	f8c7 29bc 	str.w	r2, [r7, #2492]	@ 0x9bc
 801531e:	460a      	mov	r2, r1
 8015320:	f8c7 29b8 	str.w	r2, [r7, #2488]	@ 0x9b8
 8015324:	f8d7 29bc 	ldr.w	r2, [r7, #2492]	@ 0x9bc
 8015328:	4413      	add	r3, r2
 801532a:	f8c7 39bc 	str.w	r3, [r7, #2492]	@ 0x9bc
 801532e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015336:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 801533a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801533e:	4621      	mov	r1, r4
 8015340:	1851      	adds	r1, r2, r1
 8015342:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 8015346:	4629      	mov	r1, r5
 8015348:	eb43 0101 	adc.w	r1, r3, r1
 801534c:	f8c7 115c 	str.w	r1, [r7, #348]	@ 0x15c
 8015350:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8015354:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015358:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[2] * b[7];
 801535c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015360:	3308      	adds	r3, #8
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	2200      	movs	r2, #0
 8015366:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
 801536a:	f8c7 257c 	str.w	r2, [r7, #1404]	@ 0x57c
 801536e:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015372:	331c      	adds	r3, #28
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	2200      	movs	r2, #0
 8015378:	f8c7 3570 	str.w	r3, [r7, #1392]	@ 0x570
 801537c:	f8c7 2574 	str.w	r2, [r7, #1396]	@ 0x574
 8015380:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 8015384:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015388:	462b      	mov	r3, r5
 801538a:	f507 62ae 	add.w	r2, r7, #1392	@ 0x570
 801538e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015392:	4642      	mov	r2, r8
 8015394:	fb02 f203 	mul.w	r2, r2, r3
 8015398:	464b      	mov	r3, r9
 801539a:	4621      	mov	r1, r4
 801539c:	fb01 f303 	mul.w	r3, r1, r3
 80153a0:	4413      	add	r3, r2
 80153a2:	4622      	mov	r2, r4
 80153a4:	4641      	mov	r1, r8
 80153a6:	fba2 1201 	umull	r1, r2, r2, r1
 80153aa:	f8c7 29b4 	str.w	r2, [r7, #2484]	@ 0x9b4
 80153ae:	460a      	mov	r2, r1
 80153b0:	f8c7 29b0 	str.w	r2, [r7, #2480]	@ 0x9b0
 80153b4:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	@ 0x9b4
 80153b8:	4413      	add	r3, r2
 80153ba:	f8c7 39b4 	str.w	r3, [r7, #2484]	@ 0x9b4
 80153be:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80153c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c6:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 80153ca:	e9d1 4500 	ldrd	r4, r5, [r1]
 80153ce:	4621      	mov	r1, r4
 80153d0:	1851      	adds	r1, r2, r1
 80153d2:	f8c7 1150 	str.w	r1, [r7, #336]	@ 0x150
 80153d6:	4629      	mov	r1, r5
 80153d8:	eb43 0101 	adc.w	r1, r3, r1
 80153dc:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 80153e0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80153e4:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80153e8:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[6];
 80153ec:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80153f0:	330c      	adds	r3, #12
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2200      	movs	r2, #0
 80153f6:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
 80153fa:	f8c7 256c 	str.w	r2, [r7, #1388]	@ 0x56c
 80153fe:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015402:	3318      	adds	r3, #24
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	2200      	movs	r2, #0
 8015408:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
 801540c:	f8c7 2564 	str.w	r2, [r7, #1380]	@ 0x564
 8015410:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8015414:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015418:	462b      	mov	r3, r5
 801541a:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 801541e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015422:	4642      	mov	r2, r8
 8015424:	fb02 f203 	mul.w	r2, r2, r3
 8015428:	464b      	mov	r3, r9
 801542a:	4621      	mov	r1, r4
 801542c:	fb01 f303 	mul.w	r3, r1, r3
 8015430:	4413      	add	r3, r2
 8015432:	4622      	mov	r2, r4
 8015434:	4641      	mov	r1, r8
 8015436:	fba2 1201 	umull	r1, r2, r2, r1
 801543a:	f8c7 29ac 	str.w	r2, [r7, #2476]	@ 0x9ac
 801543e:	460a      	mov	r2, r1
 8015440:	f8c7 29a8 	str.w	r2, [r7, #2472]	@ 0x9a8
 8015444:	f8d7 29ac 	ldr.w	r2, [r7, #2476]	@ 0x9ac
 8015448:	4413      	add	r3, r2
 801544a:	f8c7 39ac 	str.w	r3, [r7, #2476]	@ 0x9ac
 801544e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015456:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 801545a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801545e:	4621      	mov	r1, r4
 8015460:	1851      	adds	r1, r2, r1
 8015462:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8015466:	4629      	mov	r1, r5
 8015468:	eb43 0101 	adc.w	r1, r3, r1
 801546c:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 8015470:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	@ 0x148
 8015474:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015478:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[5];
 801547c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015480:	3310      	adds	r3, #16
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2200      	movs	r2, #0
 8015486:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
 801548a:	f8c7 255c 	str.w	r2, [r7, #1372]	@ 0x55c
 801548e:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015492:	3314      	adds	r3, #20
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	2200      	movs	r2, #0
 8015498:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
 801549c:	f8c7 2554 	str.w	r2, [r7, #1364]	@ 0x554
 80154a0:	f507 63ab 	add.w	r3, r7, #1368	@ 0x558
 80154a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80154a8:	462b      	mov	r3, r5
 80154aa:	f507 62aa 	add.w	r2, r7, #1360	@ 0x550
 80154ae:	e9d2 8900 	ldrd	r8, r9, [r2]
 80154b2:	4642      	mov	r2, r8
 80154b4:	fb02 f203 	mul.w	r2, r2, r3
 80154b8:	464b      	mov	r3, r9
 80154ba:	4621      	mov	r1, r4
 80154bc:	fb01 f303 	mul.w	r3, r1, r3
 80154c0:	4413      	add	r3, r2
 80154c2:	4622      	mov	r2, r4
 80154c4:	4641      	mov	r1, r8
 80154c6:	fba2 1201 	umull	r1, r2, r2, r1
 80154ca:	f8c7 29a4 	str.w	r2, [r7, #2468]	@ 0x9a4
 80154ce:	460a      	mov	r2, r1
 80154d0:	f8c7 29a0 	str.w	r2, [r7, #2464]	@ 0x9a0
 80154d4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	@ 0x9a4
 80154d8:	4413      	add	r3, r2
 80154da:	f8c7 39a4 	str.w	r3, [r7, #2468]	@ 0x9a4
 80154de:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80154e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e6:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 80154ea:	e9d1 4500 	ldrd	r4, r5, [r1]
 80154ee:	4621      	mov	r1, r4
 80154f0:	1851      	adds	r1, r2, r1
 80154f2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
 80154f6:	4629      	mov	r1, r5
 80154f8:	eb43 0101 	adc.w	r1, r3, r1
 80154fc:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
 8015500:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8015504:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015508:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[4];
 801550c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015510:	3314      	adds	r3, #20
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2200      	movs	r2, #0
 8015516:	f8c7 3548 	str.w	r3, [r7, #1352]	@ 0x548
 801551a:	f8c7 254c 	str.w	r2, [r7, #1356]	@ 0x54c
 801551e:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015522:	3310      	adds	r3, #16
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	2200      	movs	r2, #0
 8015528:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 801552c:	f8c7 2544 	str.w	r2, [r7, #1348]	@ 0x544
 8015530:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8015534:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015538:	462b      	mov	r3, r5
 801553a:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 801553e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015542:	4642      	mov	r2, r8
 8015544:	fb02 f203 	mul.w	r2, r2, r3
 8015548:	464b      	mov	r3, r9
 801554a:	4621      	mov	r1, r4
 801554c:	fb01 f303 	mul.w	r3, r1, r3
 8015550:	4413      	add	r3, r2
 8015552:	4622      	mov	r2, r4
 8015554:	4641      	mov	r1, r8
 8015556:	fba2 1201 	umull	r1, r2, r2, r1
 801555a:	f8c7 299c 	str.w	r2, [r7, #2460]	@ 0x99c
 801555e:	460a      	mov	r2, r1
 8015560:	f8c7 2998 	str.w	r2, [r7, #2456]	@ 0x998
 8015564:	f8d7 299c 	ldr.w	r2, [r7, #2460]	@ 0x99c
 8015568:	4413      	add	r3, r2
 801556a:	f8c7 399c 	str.w	r3, [r7, #2460]	@ 0x99c
 801556e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015576:	f607 1198 	addw	r1, r7, #2456	@ 0x998
 801557a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801557e:	4621      	mov	r1, r4
 8015580:	1851      	adds	r1, r2, r1
 8015582:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8015586:	4629      	mov	r1, r5
 8015588:	eb43 0101 	adc.w	r1, r3, r1
 801558c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
 8015590:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	@ 0x138
 8015594:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015598:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[3];
 801559c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80155a0:	3318      	adds	r3, #24
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2200      	movs	r2, #0
 80155a6:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 80155aa:	f8c7 253c 	str.w	r2, [r7, #1340]	@ 0x53c
 80155ae:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80155b2:	330c      	adds	r3, #12
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	2200      	movs	r2, #0
 80155b8:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 80155bc:	f8c7 2534 	str.w	r2, [r7, #1332]	@ 0x534
 80155c0:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80155c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80155c8:	462b      	mov	r3, r5
 80155ca:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 80155ce:	e9d2 8900 	ldrd	r8, r9, [r2]
 80155d2:	4642      	mov	r2, r8
 80155d4:	fb02 f203 	mul.w	r2, r2, r3
 80155d8:	464b      	mov	r3, r9
 80155da:	4621      	mov	r1, r4
 80155dc:	fb01 f303 	mul.w	r3, r1, r3
 80155e0:	4413      	add	r3, r2
 80155e2:	4622      	mov	r2, r4
 80155e4:	4641      	mov	r1, r8
 80155e6:	fba2 1201 	umull	r1, r2, r2, r1
 80155ea:	f8c7 2994 	str.w	r2, [r7, #2452]	@ 0x994
 80155ee:	460a      	mov	r2, r1
 80155f0:	f8c7 2990 	str.w	r2, [r7, #2448]	@ 0x990
 80155f4:	f8d7 2994 	ldr.w	r2, [r7, #2452]	@ 0x994
 80155f8:	4413      	add	r3, r2
 80155fa:	f8c7 3994 	str.w	r3, [r7, #2452]	@ 0x994
 80155fe:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015606:	f507 6119 	add.w	r1, r7, #2448	@ 0x990
 801560a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801560e:	4621      	mov	r1, r4
 8015610:	1851      	adds	r1, r2, r1
 8015612:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8015616:	4629      	mov	r1, r5
 8015618:	eb43 0101 	adc.w	r1, r3, r1
 801561c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8015620:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8015624:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015628:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[2];
 801562c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015630:	331c      	adds	r3, #28
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2200      	movs	r2, #0
 8015636:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 801563a:	f8c7 252c 	str.w	r2, [r7, #1324]	@ 0x52c
 801563e:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015642:	3308      	adds	r3, #8
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	2200      	movs	r2, #0
 8015648:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 801564c:	f8c7 2524 	str.w	r2, [r7, #1316]	@ 0x524
 8015650:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8015654:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015658:	462b      	mov	r3, r5
 801565a:	f507 62a4 	add.w	r2, r7, #1312	@ 0x520
 801565e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015662:	4642      	mov	r2, r8
 8015664:	fb02 f203 	mul.w	r2, r2, r3
 8015668:	464b      	mov	r3, r9
 801566a:	4621      	mov	r1, r4
 801566c:	fb01 f303 	mul.w	r3, r1, r3
 8015670:	4413      	add	r3, r2
 8015672:	4622      	mov	r2, r4
 8015674:	4641      	mov	r1, r8
 8015676:	fba2 1201 	umull	r1, r2, r2, r1
 801567a:	f8c7 298c 	str.w	r2, [r7, #2444]	@ 0x98c
 801567e:	460a      	mov	r2, r1
 8015680:	f8c7 2988 	str.w	r2, [r7, #2440]	@ 0x988
 8015684:	f8d7 298c 	ldr.w	r2, [r7, #2444]	@ 0x98c
 8015688:	4413      	add	r3, r2
 801568a:	f8c7 398c 	str.w	r3, [r7, #2444]	@ 0x98c
 801568e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015696:	f607 1188 	addw	r1, r7, #2440	@ 0x988
 801569a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801569e:	4621      	mov	r1, r4
 80156a0:	1851      	adds	r1, r2, r1
 80156a2:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 80156a6:	4629      	mov	r1, r5
 80156a8:	eb43 0101 	adc.w	r1, r3, r1
 80156ac:	f8c7 112c 	str.w	r1, [r7, #300]	@ 0x12c
 80156b0:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 80156b4:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80156b8:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[1];
 80156bc:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80156c0:	3320      	adds	r3, #32
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2200      	movs	r2, #0
 80156c6:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
 80156ca:	f8c7 251c 	str.w	r2, [r7, #1308]	@ 0x51c
 80156ce:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80156d2:	3304      	adds	r3, #4
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	2200      	movs	r2, #0
 80156d8:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510
 80156dc:	f8c7 2514 	str.w	r2, [r7, #1300]	@ 0x514
 80156e0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80156e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80156e8:	462b      	mov	r3, r5
 80156ea:	f507 62a2 	add.w	r2, r7, #1296	@ 0x510
 80156ee:	e9d2 8900 	ldrd	r8, r9, [r2]
 80156f2:	4642      	mov	r2, r8
 80156f4:	fb02 f203 	mul.w	r2, r2, r3
 80156f8:	464b      	mov	r3, r9
 80156fa:	4621      	mov	r1, r4
 80156fc:	fb01 f303 	mul.w	r3, r1, r3
 8015700:	4413      	add	r3, r2
 8015702:	4622      	mov	r2, r4
 8015704:	4641      	mov	r1, r8
 8015706:	fba2 1201 	umull	r1, r2, r2, r1
 801570a:	f8c7 2984 	str.w	r2, [r7, #2436]	@ 0x984
 801570e:	460a      	mov	r2, r1
 8015710:	f8c7 2980 	str.w	r2, [r7, #2432]	@ 0x980
 8015714:	f8d7 2984 	ldr.w	r2, [r7, #2436]	@ 0x984
 8015718:	4413      	add	r3, r2
 801571a:	f8c7 3984 	str.w	r3, [r7, #2436]	@ 0x984
 801571e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015726:	f507 6118 	add.w	r1, r7, #2432	@ 0x980
 801572a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801572e:	4621      	mov	r1, r4
 8015730:	1851      	adds	r1, r2, r1
 8015732:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8015736:	4629      	mov	r1, r5
 8015738:	eb43 0101 	adc.w	r1, r3, r1
 801573c:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 8015740:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8015744:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015748:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v1 * (dpint)p8;
 801574c:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8015750:	2200      	movs	r2, #0
 8015752:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
 8015756:	f8c7 250c 	str.w	r2, [r7, #1292]	@ 0x50c
 801575a:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 801575e:	2200      	movs	r2, #0
 8015760:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8015764:	f8c7 2504 	str.w	r2, [r7, #1284]	@ 0x504
 8015768:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 801576c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015770:	462b      	mov	r3, r5
 8015772:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 8015776:	e9d2 8900 	ldrd	r8, r9, [r2]
 801577a:	4642      	mov	r2, r8
 801577c:	fb02 f203 	mul.w	r2, r2, r3
 8015780:	464b      	mov	r3, r9
 8015782:	4621      	mov	r1, r4
 8015784:	fb01 f303 	mul.w	r3, r1, r3
 8015788:	4413      	add	r3, r2
 801578a:	4622      	mov	r2, r4
 801578c:	4641      	mov	r1, r8
 801578e:	fba2 1201 	umull	r1, r2, r2, r1
 8015792:	f8c7 297c 	str.w	r2, [r7, #2428]	@ 0x97c
 8015796:	460a      	mov	r2, r1
 8015798:	f8c7 2978 	str.w	r2, [r7, #2424]	@ 0x978
 801579c:	f8d7 297c 	ldr.w	r2, [r7, #2428]	@ 0x97c
 80157a0:	4413      	add	r3, r2
 80157a2:	f8c7 397c 	str.w	r3, [r7, #2428]	@ 0x97c
 80157a6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	f607 1178 	addw	r1, r7, #2424	@ 0x978
 80157b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80157b6:	4621      	mov	r1, r4
 80157b8:	1851      	adds	r1, r2, r1
 80157ba:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 80157be:	4629      	mov	r1, r5
 80157c0:	eb43 0101 	adc.w	r1, r3, r1
 80157c4:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 80157c8:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 80157cc:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80157d0:	e9c2 3400 	strd	r3, r4, [r2]
  c[0] = ((spint)t & mask);
 80157d4:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 80157d8:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 80157dc:	401a      	ands	r2, r3
 80157de:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 80157e2:	601a      	str	r2, [r3, #0]
  t >>= 29;
 80157e4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80157e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ec:	f04f 0000 	mov.w	r0, #0
 80157f0:	f04f 0100 	mov.w	r1, #0
 80157f4:	0f50      	lsrs	r0, r2, #29
 80157f6:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80157fa:	0f59      	lsrs	r1, r3, #29
 80157fc:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015800:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[2] * b[8];
 8015804:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015808:	3308      	adds	r3, #8
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2200      	movs	r2, #0
 801580e:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 8015812:	f8c7 24fc 	str.w	r2, [r7, #1276]	@ 0x4fc
 8015816:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801581a:	3320      	adds	r3, #32
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2200      	movs	r2, #0
 8015820:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 8015824:	f8c7 24f4 	str.w	r2, [r7, #1268]	@ 0x4f4
 8015828:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 801582c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015830:	462b      	mov	r3, r5
 8015832:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8015836:	e9d2 8900 	ldrd	r8, r9, [r2]
 801583a:	4642      	mov	r2, r8
 801583c:	fb02 f203 	mul.w	r2, r2, r3
 8015840:	464b      	mov	r3, r9
 8015842:	4621      	mov	r1, r4
 8015844:	fb01 f303 	mul.w	r3, r1, r3
 8015848:	4413      	add	r3, r2
 801584a:	4622      	mov	r2, r4
 801584c:	4641      	mov	r1, r8
 801584e:	fba2 1201 	umull	r1, r2, r2, r1
 8015852:	f8c7 2974 	str.w	r2, [r7, #2420]	@ 0x974
 8015856:	460a      	mov	r2, r1
 8015858:	f8c7 2970 	str.w	r2, [r7, #2416]	@ 0x970
 801585c:	f8d7 2974 	ldr.w	r2, [r7, #2420]	@ 0x974
 8015860:	4413      	add	r3, r2
 8015862:	f8c7 3974 	str.w	r3, [r7, #2420]	@ 0x974
 8015866:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801586e:	f507 6117 	add.w	r1, r7, #2416	@ 0x970
 8015872:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015876:	4621      	mov	r1, r4
 8015878:	1851      	adds	r1, r2, r1
 801587a:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 801587e:	4629      	mov	r1, r5
 8015880:	eb43 0101 	adc.w	r1, r3, r1
 8015884:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 8015888:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 801588c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015890:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[3] * b[7];
 8015894:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015898:	330c      	adds	r3, #12
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	2200      	movs	r2, #0
 801589e:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 80158a2:	f8c7 24ec 	str.w	r2, [r7, #1260]	@ 0x4ec
 80158a6:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80158aa:	331c      	adds	r3, #28
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	2200      	movs	r2, #0
 80158b0:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80158b4:	f8c7 24e4 	str.w	r2, [r7, #1252]	@ 0x4e4
 80158b8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80158bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80158c0:	462b      	mov	r3, r5
 80158c2:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 80158c6:	e9d2 8900 	ldrd	r8, r9, [r2]
 80158ca:	4642      	mov	r2, r8
 80158cc:	fb02 f203 	mul.w	r2, r2, r3
 80158d0:	464b      	mov	r3, r9
 80158d2:	4621      	mov	r1, r4
 80158d4:	fb01 f303 	mul.w	r3, r1, r3
 80158d8:	4413      	add	r3, r2
 80158da:	4622      	mov	r2, r4
 80158dc:	4641      	mov	r1, r8
 80158de:	fba2 1201 	umull	r1, r2, r2, r1
 80158e2:	f8c7 296c 	str.w	r2, [r7, #2412]	@ 0x96c
 80158e6:	460a      	mov	r2, r1
 80158e8:	f8c7 2968 	str.w	r2, [r7, #2408]	@ 0x968
 80158ec:	f8d7 296c 	ldr.w	r2, [r7, #2412]	@ 0x96c
 80158f0:	4413      	add	r3, r2
 80158f2:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 80158f6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80158fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158fe:	f607 1168 	addw	r1, r7, #2408	@ 0x968
 8015902:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015906:	4621      	mov	r1, r4
 8015908:	1851      	adds	r1, r2, r1
 801590a:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 801590e:	4629      	mov	r1, r5
 8015910:	eb43 0101 	adc.w	r1, r3, r1
 8015914:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8015918:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 801591c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015920:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[6];
 8015924:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015928:	3310      	adds	r3, #16
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2200      	movs	r2, #0
 801592e:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8015932:	f8c7 24dc 	str.w	r2, [r7, #1244]	@ 0x4dc
 8015936:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801593a:	3318      	adds	r3, #24
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2200      	movs	r2, #0
 8015940:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8015944:	f8c7 24d4 	str.w	r2, [r7, #1236]	@ 0x4d4
 8015948:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 801594c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015950:	462b      	mov	r3, r5
 8015952:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8015956:	e9d2 8900 	ldrd	r8, r9, [r2]
 801595a:	4642      	mov	r2, r8
 801595c:	fb02 f203 	mul.w	r2, r2, r3
 8015960:	464b      	mov	r3, r9
 8015962:	4621      	mov	r1, r4
 8015964:	fb01 f303 	mul.w	r3, r1, r3
 8015968:	4413      	add	r3, r2
 801596a:	4622      	mov	r2, r4
 801596c:	4641      	mov	r1, r8
 801596e:	fba2 1201 	umull	r1, r2, r2, r1
 8015972:	f8c7 2964 	str.w	r2, [r7, #2404]	@ 0x964
 8015976:	460a      	mov	r2, r1
 8015978:	f8c7 2960 	str.w	r2, [r7, #2400]	@ 0x960
 801597c:	f8d7 2964 	ldr.w	r2, [r7, #2404]	@ 0x964
 8015980:	4413      	add	r3, r2
 8015982:	f8c7 3964 	str.w	r3, [r7, #2404]	@ 0x964
 8015986:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598e:	f507 6116 	add.w	r1, r7, #2400	@ 0x960
 8015992:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015996:	4621      	mov	r1, r4
 8015998:	1851      	adds	r1, r2, r1
 801599a:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 801599e:	4629      	mov	r1, r5
 80159a0:	eb43 0101 	adc.w	r1, r3, r1
 80159a4:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80159a8:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80159ac:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80159b0:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[5];
 80159b4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80159b8:	3314      	adds	r3, #20
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	2200      	movs	r2, #0
 80159be:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 80159c2:	f8c7 24cc 	str.w	r2, [r7, #1228]	@ 0x4cc
 80159c6:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80159ca:	3314      	adds	r3, #20
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2200      	movs	r2, #0
 80159d0:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 80159d4:	f8c7 24c4 	str.w	r2, [r7, #1220]	@ 0x4c4
 80159d8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80159dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80159e0:	462b      	mov	r3, r5
 80159e2:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 80159e6:	e9d2 8900 	ldrd	r8, r9, [r2]
 80159ea:	4642      	mov	r2, r8
 80159ec:	fb02 f203 	mul.w	r2, r2, r3
 80159f0:	464b      	mov	r3, r9
 80159f2:	4621      	mov	r1, r4
 80159f4:	fb01 f303 	mul.w	r3, r1, r3
 80159f8:	4413      	add	r3, r2
 80159fa:	4622      	mov	r2, r4
 80159fc:	4641      	mov	r1, r8
 80159fe:	fba2 1201 	umull	r1, r2, r2, r1
 8015a02:	f8c7 295c 	str.w	r2, [r7, #2396]	@ 0x95c
 8015a06:	460a      	mov	r2, r1
 8015a08:	f8c7 2958 	str.w	r2, [r7, #2392]	@ 0x958
 8015a0c:	f8d7 295c 	ldr.w	r2, [r7, #2396]	@ 0x95c
 8015a10:	4413      	add	r3, r2
 8015a12:	f8c7 395c 	str.w	r3, [r7, #2396]	@ 0x95c
 8015a16:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a1e:	f607 1158 	addw	r1, r7, #2392	@ 0x958
 8015a22:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015a26:	4621      	mov	r1, r4
 8015a28:	1851      	adds	r1, r2, r1
 8015a2a:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8015a2e:	4629      	mov	r1, r5
 8015a30:	eb43 0101 	adc.w	r1, r3, r1
 8015a34:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8015a38:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8015a3c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015a40:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[4];
 8015a44:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015a48:	3318      	adds	r3, #24
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
 8015a52:	f8c7 24bc 	str.w	r2, [r7, #1212]	@ 0x4bc
 8015a56:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015a5a:	3310      	adds	r3, #16
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 8015a64:	f8c7 24b4 	str.w	r2, [r7, #1204]	@ 0x4b4
 8015a68:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8015a6c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015a70:	462b      	mov	r3, r5
 8015a72:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8015a76:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015a7a:	4642      	mov	r2, r8
 8015a7c:	fb02 f203 	mul.w	r2, r2, r3
 8015a80:	464b      	mov	r3, r9
 8015a82:	4621      	mov	r1, r4
 8015a84:	fb01 f303 	mul.w	r3, r1, r3
 8015a88:	4413      	add	r3, r2
 8015a8a:	4622      	mov	r2, r4
 8015a8c:	4641      	mov	r1, r8
 8015a8e:	fba2 1201 	umull	r1, r2, r2, r1
 8015a92:	f8c7 2954 	str.w	r2, [r7, #2388]	@ 0x954
 8015a96:	460a      	mov	r2, r1
 8015a98:	f8c7 2950 	str.w	r2, [r7, #2384]	@ 0x950
 8015a9c:	f8d7 2954 	ldr.w	r2, [r7, #2388]	@ 0x954
 8015aa0:	4413      	add	r3, r2
 8015aa2:	f8c7 3954 	str.w	r3, [r7, #2388]	@ 0x954
 8015aa6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aae:	f507 6115 	add.w	r1, r7, #2384	@ 0x950
 8015ab2:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015ab6:	4621      	mov	r1, r4
 8015ab8:	1851      	adds	r1, r2, r1
 8015aba:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8015abe:	4629      	mov	r1, r5
 8015ac0:	eb43 0101 	adc.w	r1, r3, r1
 8015ac4:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8015ac8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8015acc:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015ad0:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[3];
 8015ad4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015ad8:	331c      	adds	r3, #28
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2200      	movs	r2, #0
 8015ade:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
 8015ae2:	f8c7 24ac 	str.w	r2, [r7, #1196]	@ 0x4ac
 8015ae6:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015aea:	330c      	adds	r3, #12
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2200      	movs	r2, #0
 8015af0:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 8015af4:	f8c7 24a4 	str.w	r2, [r7, #1188]	@ 0x4a4
 8015af8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015afc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015b00:	462b      	mov	r3, r5
 8015b02:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8015b06:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015b0a:	4642      	mov	r2, r8
 8015b0c:	fb02 f203 	mul.w	r2, r2, r3
 8015b10:	464b      	mov	r3, r9
 8015b12:	4621      	mov	r1, r4
 8015b14:	fb01 f303 	mul.w	r3, r1, r3
 8015b18:	4413      	add	r3, r2
 8015b1a:	4622      	mov	r2, r4
 8015b1c:	4641      	mov	r1, r8
 8015b1e:	fba2 1201 	umull	r1, r2, r2, r1
 8015b22:	f8c7 294c 	str.w	r2, [r7, #2380]	@ 0x94c
 8015b26:	460a      	mov	r2, r1
 8015b28:	f8c7 2948 	str.w	r2, [r7, #2376]	@ 0x948
 8015b2c:	f8d7 294c 	ldr.w	r2, [r7, #2380]	@ 0x94c
 8015b30:	4413      	add	r3, r2
 8015b32:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 8015b36:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b3e:	f607 1148 	addw	r1, r7, #2376	@ 0x948
 8015b42:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015b46:	4621      	mov	r1, r4
 8015b48:	1851      	adds	r1, r2, r1
 8015b4a:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 8015b4e:	4629      	mov	r1, r5
 8015b50:	eb43 0101 	adc.w	r1, r3, r1
 8015b54:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 8015b58:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8015b5c:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015b60:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[2];
 8015b64:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015b68:	3320      	adds	r3, #32
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 8015b72:	f8c7 249c 	str.w	r2, [r7, #1180]	@ 0x49c
 8015b76:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015b7a:	3308      	adds	r3, #8
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2200      	movs	r2, #0
 8015b80:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 8015b84:	f8c7 2494 	str.w	r2, [r7, #1172]	@ 0x494
 8015b88:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8015b8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015b90:	462b      	mov	r3, r5
 8015b92:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 8015b96:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015b9a:	4642      	mov	r2, r8
 8015b9c:	fb02 f203 	mul.w	r2, r2, r3
 8015ba0:	464b      	mov	r3, r9
 8015ba2:	4621      	mov	r1, r4
 8015ba4:	fb01 f303 	mul.w	r3, r1, r3
 8015ba8:	4413      	add	r3, r2
 8015baa:	4622      	mov	r2, r4
 8015bac:	4641      	mov	r1, r8
 8015bae:	fba2 1201 	umull	r1, r2, r2, r1
 8015bb2:	f8c7 2944 	str.w	r2, [r7, #2372]	@ 0x944
 8015bb6:	460a      	mov	r2, r1
 8015bb8:	f8c7 2940 	str.w	r2, [r7, #2368]	@ 0x940
 8015bbc:	f8d7 2944 	ldr.w	r2, [r7, #2372]	@ 0x944
 8015bc0:	4413      	add	r3, r2
 8015bc2:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 8015bc6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bce:	f507 6114 	add.w	r1, r7, #2368	@ 0x940
 8015bd2:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015bd6:	4621      	mov	r1, r4
 8015bd8:	1851      	adds	r1, r2, r1
 8015bda:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8015bde:	4629      	mov	r1, r5
 8015be0:	eb43 0101 	adc.w	r1, r3, r1
 8015be4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8015be8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8015bec:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015bf0:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v2 * (dpint)p8;
 8015bf4:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 8015bfe:	f8c7 248c 	str.w	r2, [r7, #1164]	@ 0x48c
 8015c02:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8015c06:	2200      	movs	r2, #0
 8015c08:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
 8015c0c:	f8c7 2484 	str.w	r2, [r7, #1156]	@ 0x484
 8015c10:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8015c14:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015c18:	462b      	mov	r3, r5
 8015c1a:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 8015c1e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015c22:	4642      	mov	r2, r8
 8015c24:	fb02 f203 	mul.w	r2, r2, r3
 8015c28:	464b      	mov	r3, r9
 8015c2a:	4621      	mov	r1, r4
 8015c2c:	fb01 f303 	mul.w	r3, r1, r3
 8015c30:	4413      	add	r3, r2
 8015c32:	4622      	mov	r2, r4
 8015c34:	4641      	mov	r1, r8
 8015c36:	fba2 1201 	umull	r1, r2, r2, r1
 8015c3a:	f8c7 293c 	str.w	r2, [r7, #2364]	@ 0x93c
 8015c3e:	460a      	mov	r2, r1
 8015c40:	f8c7 2938 	str.w	r2, [r7, #2360]	@ 0x938
 8015c44:	f8d7 293c 	ldr.w	r2, [r7, #2364]	@ 0x93c
 8015c48:	4413      	add	r3, r2
 8015c4a:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 8015c4e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c56:	f607 1138 	addw	r1, r7, #2360	@ 0x938
 8015c5a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015c5e:	4621      	mov	r1, r4
 8015c60:	1851      	adds	r1, r2, r1
 8015c62:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8015c66:	4629      	mov	r1, r5
 8015c68:	eb43 0101 	adc.w	r1, r3, r1
 8015c6c:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8015c70:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8015c74:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015c78:	e9c2 3400 	strd	r3, r4, [r2]
  c[1] = ((spint)t & mask);
 8015c7c:	f8d7 1b68 	ldr.w	r1, [r7, #2920]	@ 0xb68
 8015c80:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8015c84:	1d1a      	adds	r2, r3, #4
 8015c86:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8015c8a:	400b      	ands	r3, r1
 8015c8c:	6013      	str	r3, [r2, #0]
  t >>= 29;
 8015c8e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c96:	f04f 0000 	mov.w	r0, #0
 8015c9a:	f04f 0100 	mov.w	r1, #0
 8015c9e:	0f50      	lsrs	r0, r2, #29
 8015ca0:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8015ca4:	0f59      	lsrs	r1, r3, #29
 8015ca6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015caa:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[3] * b[8];
 8015cae:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015cb2:	330c      	adds	r3, #12
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 8015cbc:	f8c7 247c 	str.w	r2, [r7, #1148]	@ 0x47c
 8015cc0:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015cc4:	3320      	adds	r3, #32
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2200      	movs	r2, #0
 8015cca:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
 8015cce:	f8c7 2474 	str.w	r2, [r7, #1140]	@ 0x474
 8015cd2:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8015cd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015cda:	462b      	mov	r3, r5
 8015cdc:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8015ce0:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015ce4:	4642      	mov	r2, r8
 8015ce6:	fb02 f203 	mul.w	r2, r2, r3
 8015cea:	464b      	mov	r3, r9
 8015cec:	4621      	mov	r1, r4
 8015cee:	fb01 f303 	mul.w	r3, r1, r3
 8015cf2:	4413      	add	r3, r2
 8015cf4:	4622      	mov	r2, r4
 8015cf6:	4641      	mov	r1, r8
 8015cf8:	fba2 1201 	umull	r1, r2, r2, r1
 8015cfc:	f8c7 2934 	str.w	r2, [r7, #2356]	@ 0x934
 8015d00:	460a      	mov	r2, r1
 8015d02:	f8c7 2930 	str.w	r2, [r7, #2352]	@ 0x930
 8015d06:	f8d7 2934 	ldr.w	r2, [r7, #2356]	@ 0x934
 8015d0a:	4413      	add	r3, r2
 8015d0c:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 8015d10:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d18:	f507 6113 	add.w	r1, r7, #2352	@ 0x930
 8015d1c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015d20:	4621      	mov	r1, r4
 8015d22:	1851      	adds	r1, r2, r1
 8015d24:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8015d28:	4629      	mov	r1, r5
 8015d2a:	eb43 0101 	adc.w	r1, r3, r1
 8015d2e:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8015d32:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8015d36:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015d3a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[4] * b[7];
 8015d3e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015d42:	3310      	adds	r3, #16
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	2200      	movs	r2, #0
 8015d48:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
 8015d4c:	f8c7 246c 	str.w	r2, [r7, #1132]	@ 0x46c
 8015d50:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015d54:	331c      	adds	r3, #28
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8015d5e:	f8c7 2464 	str.w	r2, [r7, #1124]	@ 0x464
 8015d62:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8015d66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015d6a:	462b      	mov	r3, r5
 8015d6c:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 8015d70:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015d74:	4642      	mov	r2, r8
 8015d76:	fb02 f203 	mul.w	r2, r2, r3
 8015d7a:	464b      	mov	r3, r9
 8015d7c:	4621      	mov	r1, r4
 8015d7e:	fb01 f303 	mul.w	r3, r1, r3
 8015d82:	4413      	add	r3, r2
 8015d84:	4622      	mov	r2, r4
 8015d86:	4641      	mov	r1, r8
 8015d88:	fba2 1201 	umull	r1, r2, r2, r1
 8015d8c:	f8c7 292c 	str.w	r2, [r7, #2348]	@ 0x92c
 8015d90:	460a      	mov	r2, r1
 8015d92:	f8c7 2928 	str.w	r2, [r7, #2344]	@ 0x928
 8015d96:	f8d7 292c 	ldr.w	r2, [r7, #2348]	@ 0x92c
 8015d9a:	4413      	add	r3, r2
 8015d9c:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 8015da0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da8:	f607 1128 	addw	r1, r7, #2344	@ 0x928
 8015dac:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015db0:	4621      	mov	r1, r4
 8015db2:	1851      	adds	r1, r2, r1
 8015db4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8015db8:	4629      	mov	r1, r5
 8015dba:	eb43 0101 	adc.w	r1, r3, r1
 8015dbe:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8015dc2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8015dc6:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015dca:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[6];
 8015dce:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015dd2:	3314      	adds	r3, #20
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 8015ddc:	f8c7 245c 	str.w	r2, [r7, #1116]	@ 0x45c
 8015de0:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015de4:	3318      	adds	r3, #24
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	2200      	movs	r2, #0
 8015dea:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 8015dee:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 8015df2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8015df6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015dfa:	462b      	mov	r3, r5
 8015dfc:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8015e00:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015e04:	4642      	mov	r2, r8
 8015e06:	fb02 f203 	mul.w	r2, r2, r3
 8015e0a:	464b      	mov	r3, r9
 8015e0c:	4621      	mov	r1, r4
 8015e0e:	fb01 f303 	mul.w	r3, r1, r3
 8015e12:	4413      	add	r3, r2
 8015e14:	4622      	mov	r2, r4
 8015e16:	4641      	mov	r1, r8
 8015e18:	fba2 1201 	umull	r1, r2, r2, r1
 8015e1c:	f8c7 2924 	str.w	r2, [r7, #2340]	@ 0x924
 8015e20:	460a      	mov	r2, r1
 8015e22:	f8c7 2920 	str.w	r2, [r7, #2336]	@ 0x920
 8015e26:	f8d7 2924 	ldr.w	r2, [r7, #2340]	@ 0x924
 8015e2a:	4413      	add	r3, r2
 8015e2c:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 8015e30:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e38:	f507 6112 	add.w	r1, r7, #2336	@ 0x920
 8015e3c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015e40:	4621      	mov	r1, r4
 8015e42:	1851      	adds	r1, r2, r1
 8015e44:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8015e48:	4629      	mov	r1, r5
 8015e4a:	eb43 0101 	adc.w	r1, r3, r1
 8015e4e:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8015e52:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8015e56:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015e5a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[5];
 8015e5e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015e62:	3318      	adds	r3, #24
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2200      	movs	r2, #0
 8015e68:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8015e6c:	f8c7 244c 	str.w	r2, [r7, #1100]	@ 0x44c
 8015e70:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015e74:	3314      	adds	r3, #20
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 8015e7e:	f8c7 2444 	str.w	r2, [r7, #1092]	@ 0x444
 8015e82:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8015e86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015e8a:	462b      	mov	r3, r5
 8015e8c:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 8015e90:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015e94:	4642      	mov	r2, r8
 8015e96:	fb02 f203 	mul.w	r2, r2, r3
 8015e9a:	464b      	mov	r3, r9
 8015e9c:	4621      	mov	r1, r4
 8015e9e:	fb01 f303 	mul.w	r3, r1, r3
 8015ea2:	4413      	add	r3, r2
 8015ea4:	4622      	mov	r2, r4
 8015ea6:	4641      	mov	r1, r8
 8015ea8:	fba2 1201 	umull	r1, r2, r2, r1
 8015eac:	f8c7 291c 	str.w	r2, [r7, #2332]	@ 0x91c
 8015eb0:	460a      	mov	r2, r1
 8015eb2:	f8c7 2918 	str.w	r2, [r7, #2328]	@ 0x918
 8015eb6:	f8d7 291c 	ldr.w	r2, [r7, #2332]	@ 0x91c
 8015eba:	4413      	add	r3, r2
 8015ebc:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 8015ec0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ec8:	f607 1118 	addw	r1, r7, #2328	@ 0x918
 8015ecc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015ed0:	4621      	mov	r1, r4
 8015ed2:	1851      	adds	r1, r2, r1
 8015ed4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8015ed8:	4629      	mov	r1, r5
 8015eda:	eb43 0101 	adc.w	r1, r3, r1
 8015ede:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 8015ee2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8015ee6:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015eea:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[4];
 8015eee:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015ef2:	331c      	adds	r3, #28
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8015efc:	f8c7 243c 	str.w	r2, [r7, #1084]	@ 0x43c
 8015f00:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015f04:	3310      	adds	r3, #16
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 8015f0e:	f8c7 2434 	str.w	r2, [r7, #1076]	@ 0x434
 8015f12:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8015f16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015f1a:	462b      	mov	r3, r5
 8015f1c:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 8015f20:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015f24:	4642      	mov	r2, r8
 8015f26:	fb02 f203 	mul.w	r2, r2, r3
 8015f2a:	464b      	mov	r3, r9
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	fb01 f303 	mul.w	r3, r1, r3
 8015f32:	4413      	add	r3, r2
 8015f34:	4622      	mov	r2, r4
 8015f36:	4641      	mov	r1, r8
 8015f38:	fba2 1201 	umull	r1, r2, r2, r1
 8015f3c:	f8c7 2914 	str.w	r2, [r7, #2324]	@ 0x914
 8015f40:	460a      	mov	r2, r1
 8015f42:	f8c7 2910 	str.w	r2, [r7, #2320]	@ 0x910
 8015f46:	f8d7 2914 	ldr.w	r2, [r7, #2324]	@ 0x914
 8015f4a:	4413      	add	r3, r2
 8015f4c:	f8c7 3914 	str.w	r3, [r7, #2324]	@ 0x914
 8015f50:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f58:	f507 6111 	add.w	r1, r7, #2320	@ 0x910
 8015f5c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015f60:	4621      	mov	r1, r4
 8015f62:	1851      	adds	r1, r2, r1
 8015f64:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8015f68:	4629      	mov	r1, r5
 8015f6a:	eb43 0101 	adc.w	r1, r3, r1
 8015f6e:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
 8015f72:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 8015f76:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8015f7a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[3];
 8015f7e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8015f82:	3320      	adds	r3, #32
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	2200      	movs	r2, #0
 8015f88:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 8015f8c:	f8c7 242c 	str.w	r2, [r7, #1068]	@ 0x42c
 8015f90:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8015f94:	330c      	adds	r3, #12
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
 8015f9e:	f8c7 2424 	str.w	r2, [r7, #1060]	@ 0x424
 8015fa2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8015fa6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015faa:	462b      	mov	r3, r5
 8015fac:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8015fb0:	e9d2 8900 	ldrd	r8, r9, [r2]
 8015fb4:	4642      	mov	r2, r8
 8015fb6:	fb02 f203 	mul.w	r2, r2, r3
 8015fba:	464b      	mov	r3, r9
 8015fbc:	4621      	mov	r1, r4
 8015fbe:	fb01 f303 	mul.w	r3, r1, r3
 8015fc2:	4413      	add	r3, r2
 8015fc4:	4622      	mov	r2, r4
 8015fc6:	4641      	mov	r1, r8
 8015fc8:	fba2 1201 	umull	r1, r2, r2, r1
 8015fcc:	f8c7 290c 	str.w	r2, [r7, #2316]	@ 0x90c
 8015fd0:	460a      	mov	r2, r1
 8015fd2:	f8c7 2908 	str.w	r2, [r7, #2312]	@ 0x908
 8015fd6:	f8d7 290c 	ldr.w	r2, [r7, #2316]	@ 0x90c
 8015fda:	4413      	add	r3, r2
 8015fdc:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c
 8015fe0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8015fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe8:	f607 1108 	addw	r1, r7, #2312	@ 0x908
 8015fec:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015ff0:	4621      	mov	r1, r4
 8015ff2:	1851      	adds	r1, r2, r1
 8015ff4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8015ff8:	4629      	mov	r1, r5
 8015ffa:	eb43 0101 	adc.w	r1, r3, r1
 8015ffe:	f8c7 10ac 	str.w	r1, [r7, #172]	@ 0xac
 8016002:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8016006:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801600a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v3 * (dpint)p8;
 801600e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 8016012:	2200      	movs	r2, #0
 8016014:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8016018:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 801601c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8016020:	2200      	movs	r2, #0
 8016022:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8016026:	f8c7 2414 	str.w	r2, [r7, #1044]	@ 0x414
 801602a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 801602e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016032:	462b      	mov	r3, r5
 8016034:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8016038:	e9d2 8900 	ldrd	r8, r9, [r2]
 801603c:	4642      	mov	r2, r8
 801603e:	fb02 f203 	mul.w	r2, r2, r3
 8016042:	464b      	mov	r3, r9
 8016044:	4621      	mov	r1, r4
 8016046:	fb01 f303 	mul.w	r3, r1, r3
 801604a:	4413      	add	r3, r2
 801604c:	4622      	mov	r2, r4
 801604e:	4641      	mov	r1, r8
 8016050:	fba2 1201 	umull	r1, r2, r2, r1
 8016054:	f8c7 2904 	str.w	r2, [r7, #2308]	@ 0x904
 8016058:	460a      	mov	r2, r1
 801605a:	f8c7 2900 	str.w	r2, [r7, #2304]	@ 0x900
 801605e:	f8d7 2904 	ldr.w	r2, [r7, #2308]	@ 0x904
 8016062:	4413      	add	r3, r2
 8016064:	f8c7 3904 	str.w	r3, [r7, #2308]	@ 0x904
 8016068:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016070:	f507 6110 	add.w	r1, r7, #2304	@ 0x900
 8016074:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016078:	4621      	mov	r1, r4
 801607a:	1851      	adds	r1, r2, r1
 801607c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8016080:	4629      	mov	r1, r5
 8016082:	eb43 0101 	adc.w	r1, r3, r1
 8016086:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 801608a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 801608e:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016092:	e9c2 3400 	strd	r3, r4, [r2]
  c[2] = ((spint)t & mask);
 8016096:	f8d7 1b68 	ldr.w	r1, [r7, #2920]	@ 0xb68
 801609a:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 801609e:	f103 0208 	add.w	r2, r3, #8
 80160a2:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 80160a6:	400b      	ands	r3, r1
 80160a8:	6013      	str	r3, [r2, #0]
  t >>= 29;
 80160aa:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80160ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b2:	f04f 0000 	mov.w	r0, #0
 80160b6:	f04f 0100 	mov.w	r1, #0
 80160ba:	0f50      	lsrs	r0, r2, #29
 80160bc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80160c0:	0f59      	lsrs	r1, r3, #29
 80160c2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80160c6:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[4] * b[8];
 80160ca:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80160ce:	3310      	adds	r3, #16
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	2200      	movs	r2, #0
 80160d4:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 80160d8:	f8c7 240c 	str.w	r2, [r7, #1036]	@ 0x40c
 80160dc:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80160e0:	3320      	adds	r3, #32
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	2200      	movs	r2, #0
 80160e6:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 80160ea:	f8c7 2404 	str.w	r2, [r7, #1028]	@ 0x404
 80160ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80160f6:	462b      	mov	r3, r5
 80160f8:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 80160fc:	e9d2 8900 	ldrd	r8, r9, [r2]
 8016100:	4642      	mov	r2, r8
 8016102:	fb02 f203 	mul.w	r2, r2, r3
 8016106:	464b      	mov	r3, r9
 8016108:	4621      	mov	r1, r4
 801610a:	fb01 f303 	mul.w	r3, r1, r3
 801610e:	4413      	add	r3, r2
 8016110:	4622      	mov	r2, r4
 8016112:	4641      	mov	r1, r8
 8016114:	fba2 1201 	umull	r1, r2, r2, r1
 8016118:	f8c7 28fc 	str.w	r2, [r7, #2300]	@ 0x8fc
 801611c:	460a      	mov	r2, r1
 801611e:	f8c7 28f8 	str.w	r2, [r7, #2296]	@ 0x8f8
 8016122:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	@ 0x8fc
 8016126:	4413      	add	r3, r2
 8016128:	f8c7 38fc 	str.w	r3, [r7, #2300]	@ 0x8fc
 801612c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016134:	f607 01f8 	addw	r1, r7, #2296	@ 0x8f8
 8016138:	e9d1 4500 	ldrd	r4, r5, [r1]
 801613c:	4621      	mov	r1, r4
 801613e:	1851      	adds	r1, r2, r1
 8016140:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8016144:	4629      	mov	r1, r5
 8016146:	eb43 0101 	adc.w	r1, r3, r1
 801614a:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 801614e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8016152:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016156:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[5] * b[7];
 801615a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801615e:	3314      	adds	r3, #20
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	2200      	movs	r2, #0
 8016164:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8016168:	f8c7 23fc 	str.w	r2, [r7, #1020]	@ 0x3fc
 801616c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016170:	331c      	adds	r3, #28
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	2200      	movs	r2, #0
 8016176:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 801617a:	f8c7 23f4 	str.w	r2, [r7, #1012]	@ 0x3f4
 801617e:	e9d7 45fe 	ldrd	r4, r5, [r7, #1016]	@ 0x3f8
 8016182:	462b      	mov	r3, r5
 8016184:	e9d7 89fc 	ldrd	r8, r9, [r7, #1008]	@ 0x3f0
 8016188:	4642      	mov	r2, r8
 801618a:	fb02 f203 	mul.w	r2, r2, r3
 801618e:	464b      	mov	r3, r9
 8016190:	4621      	mov	r1, r4
 8016192:	fb01 f303 	mul.w	r3, r1, r3
 8016196:	4413      	add	r3, r2
 8016198:	4622      	mov	r2, r4
 801619a:	4641      	mov	r1, r8
 801619c:	fba2 1201 	umull	r1, r2, r2, r1
 80161a0:	f8c7 28f4 	str.w	r2, [r7, #2292]	@ 0x8f4
 80161a4:	460a      	mov	r2, r1
 80161a6:	f8c7 28f0 	str.w	r2, [r7, #2288]	@ 0x8f0
 80161aa:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	@ 0x8f4
 80161ae:	4413      	add	r3, r2
 80161b0:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 80161b4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80161b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161bc:	f507 610f 	add.w	r1, r7, #2288	@ 0x8f0
 80161c0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80161c4:	4621      	mov	r1, r4
 80161c6:	1851      	adds	r1, r2, r1
 80161c8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80161cc:	4629      	mov	r1, r5
 80161ce:	eb43 0101 	adc.w	r1, r3, r1
 80161d2:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80161d6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80161da:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80161de:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[6];
 80161e2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80161e6:	3318      	adds	r3, #24
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	2200      	movs	r2, #0
 80161ec:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
 80161f0:	f8c7 23ec 	str.w	r2, [r7, #1004]	@ 0x3ec
 80161f4:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80161f8:	3318      	adds	r3, #24
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2200      	movs	r2, #0
 80161fe:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 8016202:	f8c7 23e4 	str.w	r2, [r7, #996]	@ 0x3e4
 8016206:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	@ 0x3e8
 801620a:	462b      	mov	r3, r5
 801620c:	e9d7 89f8 	ldrd	r8, r9, [r7, #992]	@ 0x3e0
 8016210:	4642      	mov	r2, r8
 8016212:	fb02 f203 	mul.w	r2, r2, r3
 8016216:	464b      	mov	r3, r9
 8016218:	4621      	mov	r1, r4
 801621a:	fb01 f303 	mul.w	r3, r1, r3
 801621e:	4413      	add	r3, r2
 8016220:	4622      	mov	r2, r4
 8016222:	4641      	mov	r1, r8
 8016224:	fba2 1201 	umull	r1, r2, r2, r1
 8016228:	f8c7 28ec 	str.w	r2, [r7, #2284]	@ 0x8ec
 801622c:	460a      	mov	r2, r1
 801622e:	f8c7 28e8 	str.w	r2, [r7, #2280]	@ 0x8e8
 8016232:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	@ 0x8ec
 8016236:	4413      	add	r3, r2
 8016238:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 801623c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016244:	f607 01e8 	addw	r1, r7, #2280	@ 0x8e8
 8016248:	e9d1 4500 	ldrd	r4, r5, [r1]
 801624c:	4621      	mov	r1, r4
 801624e:	1851      	adds	r1, r2, r1
 8016250:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8016254:	4629      	mov	r1, r5
 8016256:	eb43 0101 	adc.w	r1, r3, r1
 801625a:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 801625e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8016262:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016266:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[5];
 801626a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801626e:	331c      	adds	r3, #28
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2200      	movs	r2, #0
 8016274:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 8016278:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 801627c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016280:	3314      	adds	r3, #20
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2200      	movs	r2, #0
 8016286:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 801628a:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 801628e:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8016292:	462b      	mov	r3, r5
 8016294:	e9d7 89f4 	ldrd	r8, r9, [r7, #976]	@ 0x3d0
 8016298:	4642      	mov	r2, r8
 801629a:	fb02 f203 	mul.w	r2, r2, r3
 801629e:	464b      	mov	r3, r9
 80162a0:	4621      	mov	r1, r4
 80162a2:	fb01 f303 	mul.w	r3, r1, r3
 80162a6:	4413      	add	r3, r2
 80162a8:	4622      	mov	r2, r4
 80162aa:	4641      	mov	r1, r8
 80162ac:	fba2 1201 	umull	r1, r2, r2, r1
 80162b0:	f8c7 28e4 	str.w	r2, [r7, #2276]	@ 0x8e4
 80162b4:	460a      	mov	r2, r1
 80162b6:	f8c7 28e0 	str.w	r2, [r7, #2272]	@ 0x8e0
 80162ba:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	@ 0x8e4
 80162be:	4413      	add	r3, r2
 80162c0:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
 80162c4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80162c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162cc:	f507 610e 	add.w	r1, r7, #2272	@ 0x8e0
 80162d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80162d4:	4621      	mov	r1, r4
 80162d6:	1851      	adds	r1, r2, r1
 80162d8:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80162dc:	4629      	mov	r1, r5
 80162de:	eb43 0101 	adc.w	r1, r3, r1
 80162e2:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 80162e6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80162ea:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80162ee:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[4];
 80162f2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80162f6:	3320      	adds	r3, #32
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	2200      	movs	r2, #0
 80162fc:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 8016300:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8016304:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016308:	3310      	adds	r3, #16
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	2200      	movs	r2, #0
 801630e:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8016312:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8016316:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	@ 0x3c8
 801631a:	462b      	mov	r3, r5
 801631c:	e9d7 89f0 	ldrd	r8, r9, [r7, #960]	@ 0x3c0
 8016320:	4642      	mov	r2, r8
 8016322:	fb02 f203 	mul.w	r2, r2, r3
 8016326:	464b      	mov	r3, r9
 8016328:	4621      	mov	r1, r4
 801632a:	fb01 f303 	mul.w	r3, r1, r3
 801632e:	4413      	add	r3, r2
 8016330:	4622      	mov	r2, r4
 8016332:	4641      	mov	r1, r8
 8016334:	fba2 1201 	umull	r1, r2, r2, r1
 8016338:	f8c7 28dc 	str.w	r2, [r7, #2268]	@ 0x8dc
 801633c:	460a      	mov	r2, r1
 801633e:	f8c7 28d8 	str.w	r2, [r7, #2264]	@ 0x8d8
 8016342:	f8d7 28dc 	ldr.w	r2, [r7, #2268]	@ 0x8dc
 8016346:	4413      	add	r3, r2
 8016348:	f8c7 38dc 	str.w	r3, [r7, #2268]	@ 0x8dc
 801634c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016354:	f607 01d8 	addw	r1, r7, #2264	@ 0x8d8
 8016358:	e9d1 4500 	ldrd	r4, r5, [r1]
 801635c:	4621      	mov	r1, r4
 801635e:	1851      	adds	r1, r2, r1
 8016360:	67b9      	str	r1, [r7, #120]	@ 0x78
 8016362:	4629      	mov	r1, r5
 8016364:	eb43 0101 	adc.w	r1, r3, r1
 8016368:	67f9      	str	r1, [r7, #124]	@ 0x7c
 801636a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 801636e:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016372:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v4 * (dpint)p8;
 8016376:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 801637a:	2200      	movs	r2, #0
 801637c:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 8016380:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 8016384:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8016388:	2200      	movs	r2, #0
 801638a:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 801638e:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 8016392:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8016396:	462b      	mov	r3, r5
 8016398:	e9d7 89ec 	ldrd	r8, r9, [r7, #944]	@ 0x3b0
 801639c:	4642      	mov	r2, r8
 801639e:	fb02 f203 	mul.w	r2, r2, r3
 80163a2:	464b      	mov	r3, r9
 80163a4:	4621      	mov	r1, r4
 80163a6:	fb01 f303 	mul.w	r3, r1, r3
 80163aa:	4413      	add	r3, r2
 80163ac:	4622      	mov	r2, r4
 80163ae:	4641      	mov	r1, r8
 80163b0:	fba2 1201 	umull	r1, r2, r2, r1
 80163b4:	f8c7 28d4 	str.w	r2, [r7, #2260]	@ 0x8d4
 80163b8:	460a      	mov	r2, r1
 80163ba:	f8c7 28d0 	str.w	r2, [r7, #2256]	@ 0x8d0
 80163be:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	@ 0x8d4
 80163c2:	4413      	add	r3, r2
 80163c4:	f8c7 38d4 	str.w	r3, [r7, #2260]	@ 0x8d4
 80163c8:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80163cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d0:	f507 610d 	add.w	r1, r7, #2256	@ 0x8d0
 80163d4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80163d8:	4621      	mov	r1, r4
 80163da:	1851      	adds	r1, r2, r1
 80163dc:	6739      	str	r1, [r7, #112]	@ 0x70
 80163de:	4629      	mov	r1, r5
 80163e0:	eb43 0101 	adc.w	r1, r3, r1
 80163e4:	6779      	str	r1, [r7, #116]	@ 0x74
 80163e6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 80163ea:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80163ee:	e9c2 3400 	strd	r3, r4, [r2]
  c[3] = ((spint)t & mask);
 80163f2:	f8d7 1b68 	ldr.w	r1, [r7, #2920]	@ 0xb68
 80163f6:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 80163fa:	f103 020c 	add.w	r2, r3, #12
 80163fe:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8016402:	400b      	ands	r3, r1
 8016404:	6013      	str	r3, [r2, #0]
  t >>= 29;
 8016406:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640e:	f04f 0000 	mov.w	r0, #0
 8016412:	f04f 0100 	mov.w	r1, #0
 8016416:	0f50      	lsrs	r0, r2, #29
 8016418:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 801641c:	0f59      	lsrs	r1, r3, #29
 801641e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016422:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[5] * b[8];
 8016426:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801642a:	3314      	adds	r3, #20
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	2200      	movs	r2, #0
 8016430:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8016434:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 8016438:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 801643c:	3320      	adds	r3, #32
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	2200      	movs	r2, #0
 8016442:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8016446:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 801644a:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 801644e:	462b      	mov	r3, r5
 8016450:	e9d7 89e8 	ldrd	r8, r9, [r7, #928]	@ 0x3a0
 8016454:	4642      	mov	r2, r8
 8016456:	fb02 f203 	mul.w	r2, r2, r3
 801645a:	464b      	mov	r3, r9
 801645c:	4621      	mov	r1, r4
 801645e:	fb01 f303 	mul.w	r3, r1, r3
 8016462:	4413      	add	r3, r2
 8016464:	4622      	mov	r2, r4
 8016466:	4641      	mov	r1, r8
 8016468:	fba2 1201 	umull	r1, r2, r2, r1
 801646c:	f8c7 28cc 	str.w	r2, [r7, #2252]	@ 0x8cc
 8016470:	460a      	mov	r2, r1
 8016472:	f8c7 28c8 	str.w	r2, [r7, #2248]	@ 0x8c8
 8016476:	f8d7 28cc 	ldr.w	r2, [r7, #2252]	@ 0x8cc
 801647a:	4413      	add	r3, r2
 801647c:	f8c7 38cc 	str.w	r3, [r7, #2252]	@ 0x8cc
 8016480:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016488:	f607 01c8 	addw	r1, r7, #2248	@ 0x8c8
 801648c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016490:	4621      	mov	r1, r4
 8016492:	1851      	adds	r1, r2, r1
 8016494:	66b9      	str	r1, [r7, #104]	@ 0x68
 8016496:	4629      	mov	r1, r5
 8016498:	eb43 0101 	adc.w	r1, r3, r1
 801649c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 801649e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80164a2:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80164a6:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[6] * b[7];
 80164aa:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80164ae:	3318      	adds	r3, #24
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	2200      	movs	r2, #0
 80164b4:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 80164b8:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 80164bc:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80164c0:	331c      	adds	r3, #28
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	2200      	movs	r2, #0
 80164c6:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80164ca:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 80164ce:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 80164d2:	462b      	mov	r3, r5
 80164d4:	e9d7 89e4 	ldrd	r8, r9, [r7, #912]	@ 0x390
 80164d8:	4642      	mov	r2, r8
 80164da:	fb02 f203 	mul.w	r2, r2, r3
 80164de:	464b      	mov	r3, r9
 80164e0:	4621      	mov	r1, r4
 80164e2:	fb01 f303 	mul.w	r3, r1, r3
 80164e6:	4413      	add	r3, r2
 80164e8:	4622      	mov	r2, r4
 80164ea:	4641      	mov	r1, r8
 80164ec:	fba2 1201 	umull	r1, r2, r2, r1
 80164f0:	f8c7 28c4 	str.w	r2, [r7, #2244]	@ 0x8c4
 80164f4:	460a      	mov	r2, r1
 80164f6:	f8c7 28c0 	str.w	r2, [r7, #2240]	@ 0x8c0
 80164fa:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	@ 0x8c4
 80164fe:	4413      	add	r3, r2
 8016500:	f8c7 38c4 	str.w	r3, [r7, #2244]	@ 0x8c4
 8016504:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650c:	f507 610c 	add.w	r1, r7, #2240	@ 0x8c0
 8016510:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016514:	4621      	mov	r1, r4
 8016516:	1851      	adds	r1, r2, r1
 8016518:	6639      	str	r1, [r7, #96]	@ 0x60
 801651a:	4629      	mov	r1, r5
 801651c:	eb43 0101 	adc.w	r1, r3, r1
 8016520:	6679      	str	r1, [r7, #100]	@ 0x64
 8016522:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8016526:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801652a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[6];
 801652e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8016532:	331c      	adds	r3, #28
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	2200      	movs	r2, #0
 8016538:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 801653c:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8016540:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016544:	3318      	adds	r3, #24
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	2200      	movs	r2, #0
 801654a:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 801654e:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 8016552:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8016556:	462b      	mov	r3, r5
 8016558:	e9d7 89e0 	ldrd	r8, r9, [r7, #896]	@ 0x380
 801655c:	4642      	mov	r2, r8
 801655e:	fb02 f203 	mul.w	r2, r2, r3
 8016562:	464b      	mov	r3, r9
 8016564:	4621      	mov	r1, r4
 8016566:	fb01 f303 	mul.w	r3, r1, r3
 801656a:	4413      	add	r3, r2
 801656c:	4622      	mov	r2, r4
 801656e:	4641      	mov	r1, r8
 8016570:	fba2 1201 	umull	r1, r2, r2, r1
 8016574:	f8c7 28bc 	str.w	r2, [r7, #2236]	@ 0x8bc
 8016578:	460a      	mov	r2, r1
 801657a:	f8c7 28b8 	str.w	r2, [r7, #2232]	@ 0x8b8
 801657e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	@ 0x8bc
 8016582:	4413      	add	r3, r2
 8016584:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
 8016588:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016590:	f607 01b8 	addw	r1, r7, #2232	@ 0x8b8
 8016594:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016598:	4621      	mov	r1, r4
 801659a:	1851      	adds	r1, r2, r1
 801659c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801659e:	4629      	mov	r1, r5
 80165a0:	eb43 0101 	adc.w	r1, r3, r1
 80165a4:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80165a6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80165aa:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80165ae:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[5];
 80165b2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80165b6:	3320      	adds	r3, #32
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2200      	movs	r2, #0
 80165bc:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80165c0:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 80165c4:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80165c8:	3314      	adds	r3, #20
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	2200      	movs	r2, #0
 80165ce:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 80165d2:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 80165d6:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 80165da:	462b      	mov	r3, r5
 80165dc:	e9d7 89dc 	ldrd	r8, r9, [r7, #880]	@ 0x370
 80165e0:	4642      	mov	r2, r8
 80165e2:	fb02 f203 	mul.w	r2, r2, r3
 80165e6:	464b      	mov	r3, r9
 80165e8:	4621      	mov	r1, r4
 80165ea:	fb01 f303 	mul.w	r3, r1, r3
 80165ee:	4413      	add	r3, r2
 80165f0:	4622      	mov	r2, r4
 80165f2:	4641      	mov	r1, r8
 80165f4:	fba2 1201 	umull	r1, r2, r2, r1
 80165f8:	f8c7 28b4 	str.w	r2, [r7, #2228]	@ 0x8b4
 80165fc:	460a      	mov	r2, r1
 80165fe:	f8c7 28b0 	str.w	r2, [r7, #2224]	@ 0x8b0
 8016602:	f8d7 28b4 	ldr.w	r2, [r7, #2228]	@ 0x8b4
 8016606:	4413      	add	r3, r2
 8016608:	f8c7 38b4 	str.w	r3, [r7, #2228]	@ 0x8b4
 801660c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016614:	f507 610b 	add.w	r1, r7, #2224	@ 0x8b0
 8016618:	e9d1 4500 	ldrd	r4, r5, [r1]
 801661c:	4621      	mov	r1, r4
 801661e:	1851      	adds	r1, r2, r1
 8016620:	6539      	str	r1, [r7, #80]	@ 0x50
 8016622:	4629      	mov	r1, r5
 8016624:	eb43 0101 	adc.w	r1, r3, r1
 8016628:	6579      	str	r1, [r7, #84]	@ 0x54
 801662a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 801662e:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016632:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v5 * (dpint)p8;
 8016636:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 801663a:	2200      	movs	r2, #0
 801663c:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8016640:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8016644:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8016648:	2200      	movs	r2, #0
 801664a:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 801664e:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8016652:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8016656:	462b      	mov	r3, r5
 8016658:	e9d7 89d8 	ldrd	r8, r9, [r7, #864]	@ 0x360
 801665c:	4642      	mov	r2, r8
 801665e:	fb02 f203 	mul.w	r2, r2, r3
 8016662:	464b      	mov	r3, r9
 8016664:	4621      	mov	r1, r4
 8016666:	fb01 f303 	mul.w	r3, r1, r3
 801666a:	4413      	add	r3, r2
 801666c:	4622      	mov	r2, r4
 801666e:	4641      	mov	r1, r8
 8016670:	fba2 1201 	umull	r1, r2, r2, r1
 8016674:	f8c7 28ac 	str.w	r2, [r7, #2220]	@ 0x8ac
 8016678:	460a      	mov	r2, r1
 801667a:	f8c7 28a8 	str.w	r2, [r7, #2216]	@ 0x8a8
 801667e:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	@ 0x8ac
 8016682:	4413      	add	r3, r2
 8016684:	f8c7 38ac 	str.w	r3, [r7, #2220]	@ 0x8ac
 8016688:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016690:	f607 01a8 	addw	r1, r7, #2216	@ 0x8a8
 8016694:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016698:	4621      	mov	r1, r4
 801669a:	1851      	adds	r1, r2, r1
 801669c:	64b9      	str	r1, [r7, #72]	@ 0x48
 801669e:	4629      	mov	r1, r5
 80166a0:	eb43 0101 	adc.w	r1, r3, r1
 80166a4:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80166a6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80166aa:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80166ae:	e9c2 3400 	strd	r3, r4, [r2]
  c[4] = ((spint)t & mask);
 80166b2:	f8d7 1b68 	ldr.w	r1, [r7, #2920]	@ 0xb68
 80166b6:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 80166ba:	f103 0210 	add.w	r2, r3, #16
 80166be:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 80166c2:	400b      	ands	r3, r1
 80166c4:	6013      	str	r3, [r2, #0]
  t >>= 29;
 80166c6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80166ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ce:	f04f 0000 	mov.w	r0, #0
 80166d2:	f04f 0100 	mov.w	r1, #0
 80166d6:	0f50      	lsrs	r0, r2, #29
 80166d8:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80166dc:	0f59      	lsrs	r1, r3, #29
 80166de:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80166e2:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[6] * b[8];
 80166e6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80166ea:	3318      	adds	r3, #24
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2200      	movs	r2, #0
 80166f0:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 80166f4:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 80166f8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80166fc:	3320      	adds	r3, #32
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	2200      	movs	r2, #0
 8016702:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8016706:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 801670a:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 801670e:	462b      	mov	r3, r5
 8016710:	e9d7 89d4 	ldrd	r8, r9, [r7, #848]	@ 0x350
 8016714:	4642      	mov	r2, r8
 8016716:	fb02 f203 	mul.w	r2, r2, r3
 801671a:	464b      	mov	r3, r9
 801671c:	4621      	mov	r1, r4
 801671e:	fb01 f303 	mul.w	r3, r1, r3
 8016722:	4413      	add	r3, r2
 8016724:	4622      	mov	r2, r4
 8016726:	4641      	mov	r1, r8
 8016728:	fba2 1201 	umull	r1, r2, r2, r1
 801672c:	f8c7 28a4 	str.w	r2, [r7, #2212]	@ 0x8a4
 8016730:	460a      	mov	r2, r1
 8016732:	f8c7 28a0 	str.w	r2, [r7, #2208]	@ 0x8a0
 8016736:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 801673a:	4413      	add	r3, r2
 801673c:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
 8016740:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016748:	f507 610a 	add.w	r1, r7, #2208	@ 0x8a0
 801674c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016750:	4621      	mov	r1, r4
 8016752:	1851      	adds	r1, r2, r1
 8016754:	6439      	str	r1, [r7, #64]	@ 0x40
 8016756:	4629      	mov	r1, r5
 8016758:	eb43 0101 	adc.w	r1, r3, r1
 801675c:	6479      	str	r1, [r7, #68]	@ 0x44
 801675e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8016762:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016766:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[7] * b[7];
 801676a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 801676e:	331c      	adds	r3, #28
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2200      	movs	r2, #0
 8016774:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8016778:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 801677c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016780:	331c      	adds	r3, #28
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	2200      	movs	r2, #0
 8016786:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 801678a:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 801678e:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8016792:	462b      	mov	r3, r5
 8016794:	e9d7 89d0 	ldrd	r8, r9, [r7, #832]	@ 0x340
 8016798:	4642      	mov	r2, r8
 801679a:	fb02 f203 	mul.w	r2, r2, r3
 801679e:	464b      	mov	r3, r9
 80167a0:	4621      	mov	r1, r4
 80167a2:	fb01 f303 	mul.w	r3, r1, r3
 80167a6:	4413      	add	r3, r2
 80167a8:	4622      	mov	r2, r4
 80167aa:	4641      	mov	r1, r8
 80167ac:	fba2 1201 	umull	r1, r2, r2, r1
 80167b0:	f8c7 289c 	str.w	r2, [r7, #2204]	@ 0x89c
 80167b4:	460a      	mov	r2, r1
 80167b6:	f8c7 2898 	str.w	r2, [r7, #2200]	@ 0x898
 80167ba:	f8d7 289c 	ldr.w	r2, [r7, #2204]	@ 0x89c
 80167be:	4413      	add	r3, r2
 80167c0:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
 80167c4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80167c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167cc:	f607 0198 	addw	r1, r7, #2200	@ 0x898
 80167d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80167d4:	4621      	mov	r1, r4
 80167d6:	1851      	adds	r1, r2, r1
 80167d8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80167da:	4629      	mov	r1, r5
 80167dc:	eb43 0101 	adc.w	r1, r3, r1
 80167e0:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80167e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80167e6:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80167ea:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[6];
 80167ee:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80167f2:	3320      	adds	r3, #32
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2200      	movs	r2, #0
 80167f8:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80167fc:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8016800:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016804:	3318      	adds	r3, #24
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	2200      	movs	r2, #0
 801680a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 801680e:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8016812:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8016816:	462b      	mov	r3, r5
 8016818:	e9d7 89cc 	ldrd	r8, r9, [r7, #816]	@ 0x330
 801681c:	4642      	mov	r2, r8
 801681e:	fb02 f203 	mul.w	r2, r2, r3
 8016822:	464b      	mov	r3, r9
 8016824:	4621      	mov	r1, r4
 8016826:	fb01 f303 	mul.w	r3, r1, r3
 801682a:	4413      	add	r3, r2
 801682c:	4622      	mov	r2, r4
 801682e:	4641      	mov	r1, r8
 8016830:	fba2 1201 	umull	r1, r2, r2, r1
 8016834:	f8c7 2894 	str.w	r2, [r7, #2196]	@ 0x894
 8016838:	460a      	mov	r2, r1
 801683a:	f8c7 2890 	str.w	r2, [r7, #2192]	@ 0x890
 801683e:	f8d7 2894 	ldr.w	r2, [r7, #2196]	@ 0x894
 8016842:	4413      	add	r3, r2
 8016844:	f8c7 3894 	str.w	r3, [r7, #2196]	@ 0x894
 8016848:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016850:	f507 6109 	add.w	r1, r7, #2192	@ 0x890
 8016854:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016858:	4621      	mov	r1, r4
 801685a:	1851      	adds	r1, r2, r1
 801685c:	6339      	str	r1, [r7, #48]	@ 0x30
 801685e:	4629      	mov	r1, r5
 8016860:	eb43 0101 	adc.w	r1, r3, r1
 8016864:	6379      	str	r1, [r7, #52]	@ 0x34
 8016866:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801686a:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 801686e:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v6 * (dpint)p8;
 8016872:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 8016876:	2200      	movs	r2, #0
 8016878:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 801687c:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8016880:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8016884:	2200      	movs	r2, #0
 8016886:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 801688a:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 801688e:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8016892:	462b      	mov	r3, r5
 8016894:	e9d7 89c8 	ldrd	r8, r9, [r7, #800]	@ 0x320
 8016898:	4642      	mov	r2, r8
 801689a:	fb02 f203 	mul.w	r2, r2, r3
 801689e:	464b      	mov	r3, r9
 80168a0:	4621      	mov	r1, r4
 80168a2:	fb01 f303 	mul.w	r3, r1, r3
 80168a6:	4413      	add	r3, r2
 80168a8:	4622      	mov	r2, r4
 80168aa:	4641      	mov	r1, r8
 80168ac:	fba2 1201 	umull	r1, r2, r2, r1
 80168b0:	f8c7 288c 	str.w	r2, [r7, #2188]	@ 0x88c
 80168b4:	460a      	mov	r2, r1
 80168b6:	f8c7 2888 	str.w	r2, [r7, #2184]	@ 0x888
 80168ba:	f8d7 288c 	ldr.w	r2, [r7, #2188]	@ 0x88c
 80168be:	4413      	add	r3, r2
 80168c0:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 80168c4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80168c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168cc:	f607 0188 	addw	r1, r7, #2184	@ 0x888
 80168d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80168d4:	4621      	mov	r1, r4
 80168d6:	1851      	adds	r1, r2, r1
 80168d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80168da:	4629      	mov	r1, r5
 80168dc:	eb43 0101 	adc.w	r1, r3, r1
 80168e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80168e2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80168e6:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80168ea:	e9c2 3400 	strd	r3, r4, [r2]
  c[5] = ((spint)t & mask);
 80168ee:	f8d7 1b68 	ldr.w	r1, [r7, #2920]	@ 0xb68
 80168f2:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 80168f6:	f103 0214 	add.w	r2, r3, #20
 80168fa:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 80168fe:	400b      	ands	r3, r1
 8016900:	6013      	str	r3, [r2, #0]
  t >>= 29;
 8016902:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690a:	f04f 0000 	mov.w	r0, #0
 801690e:	f04f 0100 	mov.w	r1, #0
 8016912:	0f50      	lsrs	r0, r2, #29
 8016914:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8016918:	0f59      	lsrs	r1, r3, #29
 801691a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 801691e:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[7] * b[8];
 8016922:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8016926:	331c      	adds	r3, #28
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2200      	movs	r2, #0
 801692c:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 8016930:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8016934:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016938:	3320      	adds	r3, #32
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	2200      	movs	r2, #0
 801693e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8016942:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8016946:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 801694a:	462b      	mov	r3, r5
 801694c:	e9d7 89c4 	ldrd	r8, r9, [r7, #784]	@ 0x310
 8016950:	4642      	mov	r2, r8
 8016952:	fb02 f203 	mul.w	r2, r2, r3
 8016956:	464b      	mov	r3, r9
 8016958:	4621      	mov	r1, r4
 801695a:	fb01 f303 	mul.w	r3, r1, r3
 801695e:	4413      	add	r3, r2
 8016960:	4622      	mov	r2, r4
 8016962:	4641      	mov	r1, r8
 8016964:	fba2 1201 	umull	r1, r2, r2, r1
 8016968:	f8c7 2884 	str.w	r2, [r7, #2180]	@ 0x884
 801696c:	460a      	mov	r2, r1
 801696e:	f8c7 2880 	str.w	r2, [r7, #2176]	@ 0x880
 8016972:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8016976:	4413      	add	r3, r2
 8016978:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 801697c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016984:	f507 6108 	add.w	r1, r7, #2176	@ 0x880
 8016988:	e9d1 4500 	ldrd	r4, r5, [r1]
 801698c:	4621      	mov	r1, r4
 801698e:	1851      	adds	r1, r2, r1
 8016990:	6239      	str	r1, [r7, #32]
 8016992:	4629      	mov	r1, r5
 8016994:	eb43 0101 	adc.w	r1, r3, r1
 8016998:	6279      	str	r1, [r7, #36]	@ 0x24
 801699a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801699e:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 80169a2:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)a[8] * b[7];
 80169a6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 80169aa:	3320      	adds	r3, #32
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2200      	movs	r2, #0
 80169b0:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 80169b4:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80169b8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 80169bc:	331c      	adds	r3, #28
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2200      	movs	r2, #0
 80169c2:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 80169c6:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 80169ca:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	@ 0x308
 80169ce:	462b      	mov	r3, r5
 80169d0:	e9d7 89c0 	ldrd	r8, r9, [r7, #768]	@ 0x300
 80169d4:	4642      	mov	r2, r8
 80169d6:	fb02 f203 	mul.w	r2, r2, r3
 80169da:	464b      	mov	r3, r9
 80169dc:	4621      	mov	r1, r4
 80169de:	fb01 f303 	mul.w	r3, r1, r3
 80169e2:	4413      	add	r3, r2
 80169e4:	4622      	mov	r2, r4
 80169e6:	4641      	mov	r1, r8
 80169e8:	fba2 1201 	umull	r1, r2, r2, r1
 80169ec:	f8c7 287c 	str.w	r2, [r7, #2172]	@ 0x87c
 80169f0:	460a      	mov	r2, r1
 80169f2:	f8c7 2878 	str.w	r2, [r7, #2168]	@ 0x878
 80169f6:	f8d7 287c 	ldr.w	r2, [r7, #2172]	@ 0x87c
 80169fa:	4413      	add	r3, r2
 80169fc:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 8016a00:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a08:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 8016a0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016a10:	4621      	mov	r1, r4
 8016a12:	1851      	adds	r1, r2, r1
 8016a14:	61b9      	str	r1, [r7, #24]
 8016a16:	4629      	mov	r1, r5
 8016a18:	eb43 0101 	adc.w	r1, r3, r1
 8016a1c:	61f9      	str	r1, [r7, #28]
 8016a1e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8016a22:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016a26:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v7 * (dpint)p8;
 8016a2a:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 8016a2e:	2200      	movs	r2, #0
 8016a30:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8016a34:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8016a38:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8016a42:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8016a46:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8016a4a:	462b      	mov	r3, r5
 8016a4c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 8016a50:	4642      	mov	r2, r8
 8016a52:	fb02 f203 	mul.w	r2, r2, r3
 8016a56:	464b      	mov	r3, r9
 8016a58:	4621      	mov	r1, r4
 8016a5a:	fb01 f303 	mul.w	r3, r1, r3
 8016a5e:	4413      	add	r3, r2
 8016a60:	4622      	mov	r2, r4
 8016a62:	4641      	mov	r1, r8
 8016a64:	fba2 1201 	umull	r1, r2, r2, r1
 8016a68:	f8c7 2874 	str.w	r2, [r7, #2164]	@ 0x874
 8016a6c:	460a      	mov	r2, r1
 8016a6e:	f8c7 2870 	str.w	r2, [r7, #2160]	@ 0x870
 8016a72:	f8d7 2874 	ldr.w	r2, [r7, #2164]	@ 0x874
 8016a76:	4413      	add	r3, r2
 8016a78:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 8016a7c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a84:	f507 6107 	add.w	r1, r7, #2160	@ 0x870
 8016a88:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016a8c:	4621      	mov	r1, r4
 8016a8e:	1851      	adds	r1, r2, r1
 8016a90:	6139      	str	r1, [r7, #16]
 8016a92:	4629      	mov	r1, r5
 8016a94:	eb43 0101 	adc.w	r1, r3, r1
 8016a98:	6179      	str	r1, [r7, #20]
 8016a9a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016a9e:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016aa2:	e9c2 3400 	strd	r3, r4, [r2]
  c[6] = ((spint)t & mask);
 8016aa6:	f8d7 1b68 	ldr.w	r1, [r7, #2920]	@ 0xb68
 8016aaa:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8016aae:	f103 0218 	add.w	r2, r3, #24
 8016ab2:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8016ab6:	400b      	ands	r3, r1
 8016ab8:	6013      	str	r3, [r2, #0]
  t >>= 29;
 8016aba:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac2:	f04f 0000 	mov.w	r0, #0
 8016ac6:	f04f 0100 	mov.w	r1, #0
 8016aca:	0f50      	lsrs	r0, r2, #29
 8016acc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8016ad0:	0f59      	lsrs	r1, r3, #29
 8016ad2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016ad6:	e9c3 0100 	strd	r0, r1, [r3]
  t += (dpint)a[8] * b[8];
 8016ada:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8016ade:	3320      	adds	r3, #32
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8016ae8:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8016aec:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8016af0:	3320      	adds	r3, #32
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2200      	movs	r2, #0
 8016af6:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8016afa:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8016afe:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 8016b02:	462b      	mov	r3, r5
 8016b04:	e9d7 89b8 	ldrd	r8, r9, [r7, #736]	@ 0x2e0
 8016b08:	4642      	mov	r2, r8
 8016b0a:	fb02 f203 	mul.w	r2, r2, r3
 8016b0e:	464b      	mov	r3, r9
 8016b10:	4621      	mov	r1, r4
 8016b12:	fb01 f303 	mul.w	r3, r1, r3
 8016b16:	4413      	add	r3, r2
 8016b18:	4622      	mov	r2, r4
 8016b1a:	4641      	mov	r1, r8
 8016b1c:	fba2 1201 	umull	r1, r2, r2, r1
 8016b20:	f8c7 286c 	str.w	r2, [r7, #2156]	@ 0x86c
 8016b24:	460a      	mov	r2, r1
 8016b26:	f8c7 2868 	str.w	r2, [r7, #2152]	@ 0x868
 8016b2a:	f8d7 286c 	ldr.w	r2, [r7, #2156]	@ 0x86c
 8016b2e:	4413      	add	r3, r2
 8016b30:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 8016b34:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3c:	f607 0168 	addw	r1, r7, #2152	@ 0x868
 8016b40:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016b44:	4621      	mov	r1, r4
 8016b46:	1851      	adds	r1, r2, r1
 8016b48:	60b9      	str	r1, [r7, #8]
 8016b4a:	4629      	mov	r1, r5
 8016b4c:	eb43 0101 	adc.w	r1, r3, r1
 8016b50:	60f9      	str	r1, [r7, #12]
 8016b52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016b56:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016b5a:	e9c2 3400 	strd	r3, r4, [r2]
  t += (dpint)v8 * (dpint)p8;
 8016b5e:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 8016b62:	2200      	movs	r2, #0
 8016b64:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8016b68:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8016b6c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8016b70:	2200      	movs	r2, #0
 8016b72:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8016b76:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8016b7a:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	@ 0x2d8
 8016b7e:	462b      	mov	r3, r5
 8016b80:	e9d7 89b4 	ldrd	r8, r9, [r7, #720]	@ 0x2d0
 8016b84:	4642      	mov	r2, r8
 8016b86:	fb02 f203 	mul.w	r2, r2, r3
 8016b8a:	464b      	mov	r3, r9
 8016b8c:	4621      	mov	r1, r4
 8016b8e:	fb01 f303 	mul.w	r3, r1, r3
 8016b92:	4413      	add	r3, r2
 8016b94:	4622      	mov	r2, r4
 8016b96:	4641      	mov	r1, r8
 8016b98:	fba2 1201 	umull	r1, r2, r2, r1
 8016b9c:	f8c7 2864 	str.w	r2, [r7, #2148]	@ 0x864
 8016ba0:	460a      	mov	r2, r1
 8016ba2:	f8c7 2860 	str.w	r2, [r7, #2144]	@ 0x860
 8016ba6:	f8d7 2864 	ldr.w	r2, [r7, #2148]	@ 0x864
 8016baa:	4413      	add	r3, r2
 8016bac:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 8016bb0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bb8:	f507 6106 	add.w	r1, r7, #2144	@ 0x860
 8016bbc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016bc0:	4621      	mov	r1, r4
 8016bc2:	1851      	adds	r1, r2, r1
 8016bc4:	6039      	str	r1, [r7, #0]
 8016bc6:	4629      	mov	r1, r5
 8016bc8:	eb43 0101 	adc.w	r1, r3, r1
 8016bcc:	6079      	str	r1, [r7, #4]
 8016bce:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016bd2:	f607 3268 	addw	r2, r7, #2920	@ 0xb68
 8016bd6:	e9c2 3400 	strd	r3, r4, [r2]
  c[7] = ((spint)t & mask);
 8016bda:	f8d7 1b68 	ldr.w	r1, [r7, #2920]	@ 0xb68
 8016bde:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8016be2:	331c      	adds	r3, #28
 8016be4:	f8d7 2b5c 	ldr.w	r2, [r7, #2908]	@ 0xb5c
 8016be8:	400a      	ands	r2, r1
 8016bea:	601a      	str	r2, [r3, #0]
  t >>= 29;
 8016bec:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8016bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016bf4:	f04f 0200 	mov.w	r2, #0
 8016bf8:	f04f 0300 	mov.w	r3, #0
 8016bfc:	0f42      	lsrs	r2, r0, #29
 8016bfe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8016c02:	0f4b      	lsrs	r3, r1, #29
 8016c04:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8016c08:	e9c1 2300 	strd	r2, r3, [r1]
  c[8] = (spint)t;
 8016c0c:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8016c10:	3320      	adds	r3, #32
 8016c12:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8016c16:	601a      	str	r2, [r3, #0]
}
 8016c18:	bf00      	nop
 8016c1a:	f607 3774 	addw	r7, r7, #2932	@ 0xb74
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016c24:	4770      	bx	lr

08016c26 <modsqr>:

// Modular squaring, c=a*a  mod 2p
static void modsqr(const spint *a, spint *c) {
 8016c26:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016c2a:	f2ad 7d6c 	subw	sp, sp, #1900	@ 0x76c
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	f8c7 071c 	str.w	r0, [r7, #1820]	@ 0x71c
 8016c34:	f8c7 1718 	str.w	r1, [r7, #1816]	@ 0x718
  udpint tot;
  udpint t = 0;
 8016c38:	f04f 0200 	mov.w	r2, #0
 8016c3c:	f04f 0300 	mov.w	r3, #0
 8016c40:	f507 61ec 	add.w	r1, r7, #1888	@ 0x760
 8016c44:	e9c1 2300 	strd	r2, r3, [r1]
  spint p8 = 0x50000u;
 8016c48:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8016c4c:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
  spint q = ((spint)1 << 29u); // q is unsaturated radix
 8016c50:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8016c54:	f8c7 3758 	str.w	r3, [r7, #1880]	@ 0x758
  spint mask = (spint)(q - (spint)1);
 8016c58:	f8d7 3758 	ldr.w	r3, [r7, #1880]	@ 0x758
 8016c5c:	3b01      	subs	r3, #1
 8016c5e:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
  tot = (udpint)a[0] * a[0];
 8016c62:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	469a      	mov	sl, r3
 8016c6c:	4693      	mov	fp, r2
 8016c6e:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2200      	movs	r2, #0
 8016c76:	4698      	mov	r8, r3
 8016c78:	4691      	mov	r9, r2
 8016c7a:	fb08 f20b 	mul.w	r2, r8, fp
 8016c7e:	fb0a f309 	mul.w	r3, sl, r9
 8016c82:	4413      	add	r3, r2
 8016c84:	fbaa 4508 	umull	r4, r5, sl, r8
 8016c88:	442b      	add	r3, r5
 8016c8a:	461d      	mov	r5, r3
 8016c8c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016c90:	e9c3 4500 	strd	r4, r5, [r3]
 8016c94:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016c98:	e9c3 4500 	strd	r4, r5, [r3]
  t = tot;
 8016c9c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca4:	f507 61ec 	add.w	r1, r7, #1888	@ 0x760
 8016ca8:	e9c1 2300 	strd	r2, r3, [r1]
  spint v0 = ((spint)t & mask);
 8016cac:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 8016cb0:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8016cb4:	4013      	ands	r3, r2
 8016cb6:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
  t >>= 29;
 8016cba:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc2:	f04f 0000 	mov.w	r0, #0
 8016cc6:	f04f 0100 	mov.w	r1, #0
 8016cca:	0f50      	lsrs	r0, r2, #29
 8016ccc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8016cd0:	0f59      	lsrs	r1, r3, #29
 8016cd2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016cd6:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[1];
 8016cda:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
 8016ce6:	f8c7 256c 	str.w	r2, [r7, #1388]	@ 0x56c
 8016cea:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016cee:	3304      	adds	r3, #4
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
 8016cf8:	f8c7 2564 	str.w	r2, [r7, #1380]	@ 0x564
 8016cfc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8016d00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016d04:	462b      	mov	r3, r5
 8016d06:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8016d0a:	e9d2 8900 	ldrd	r8, r9, [r2]
 8016d0e:	4642      	mov	r2, r8
 8016d10:	fb02 f203 	mul.w	r2, r2, r3
 8016d14:	464b      	mov	r3, r9
 8016d16:	4621      	mov	r1, r4
 8016d18:	fb01 f303 	mul.w	r3, r1, r3
 8016d1c:	4413      	add	r3, r2
 8016d1e:	4622      	mov	r2, r4
 8016d20:	4641      	mov	r1, r8
 8016d22:	fba2 1201 	umull	r1, r2, r2, r1
 8016d26:	f8c7 25ec 	str.w	r2, [r7, #1516]	@ 0x5ec
 8016d2a:	460a      	mov	r2, r1
 8016d2c:	f8c7 25e8 	str.w	r2, [r7, #1512]	@ 0x5e8
 8016d30:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	@ 0x5ec
 8016d34:	4413      	add	r3, r2
 8016d36:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 8016d3a:	f507 63bd 	add.w	r3, r7, #1512	@ 0x5e8
 8016d3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016d42:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016d46:	e9c2 3400 	strd	r3, r4, [r2]
 8016d4a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016d4e:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8016d52:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d5a:	1891      	adds	r1, r2, r2
 8016d5c:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
 8016d60:	415b      	adcs	r3, r3
 8016d62:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8016d66:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	@ 0x218
 8016d6a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016d6e:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8016d72:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d7a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d82:	1884      	adds	r4, r0, r2
 8016d84:	f8c7 4210 	str.w	r4, [r7, #528]	@ 0x210
 8016d88:	eb41 0303 	adc.w	r3, r1, r3
 8016d8c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8016d90:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	@ 0x210
 8016d94:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8016d98:	e9c2 3400 	strd	r3, r4, [r2]
  spint v1 = ((spint)t & mask);
 8016d9c:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 8016da0:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8016da4:	4013      	ands	r3, r2
 8016da6:	f8c7 3740 	str.w	r3, [r7, #1856]	@ 0x740
  t >>= 29;
 8016daa:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db2:	f04f 0000 	mov.w	r0, #0
 8016db6:	f04f 0100 	mov.w	r1, #0
 8016dba:	0f50      	lsrs	r0, r2, #29
 8016dbc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8016dc0:	0f59      	lsrs	r1, r3, #29
 8016dc2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016dc6:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[2];
 8016dca:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
 8016dd6:	f8c7 255c 	str.w	r2, [r7, #1372]	@ 0x55c
 8016dda:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016dde:	3308      	adds	r3, #8
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2200      	movs	r2, #0
 8016de4:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
 8016de8:	f8c7 2554 	str.w	r2, [r7, #1364]	@ 0x554
 8016dec:	f507 63ab 	add.w	r3, r7, #1368	@ 0x558
 8016df0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016df4:	462b      	mov	r3, r5
 8016df6:	f507 62aa 	add.w	r2, r7, #1360	@ 0x550
 8016dfa:	e9d2 8900 	ldrd	r8, r9, [r2]
 8016dfe:	4642      	mov	r2, r8
 8016e00:	fb02 f203 	mul.w	r2, r2, r3
 8016e04:	464b      	mov	r3, r9
 8016e06:	4621      	mov	r1, r4
 8016e08:	fb01 f303 	mul.w	r3, r1, r3
 8016e0c:	4413      	add	r3, r2
 8016e0e:	4622      	mov	r2, r4
 8016e10:	4641      	mov	r1, r8
 8016e12:	fba2 1201 	umull	r1, r2, r2, r1
 8016e16:	f8c7 25e4 	str.w	r2, [r7, #1508]	@ 0x5e4
 8016e1a:	460a      	mov	r2, r1
 8016e1c:	f8c7 25e0 	str.w	r2, [r7, #1504]	@ 0x5e0
 8016e20:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	@ 0x5e4
 8016e24:	4413      	add	r3, r2
 8016e26:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 8016e2a:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8016e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016e32:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016e36:	e9c2 3400 	strd	r3, r4, [r2]
 8016e3a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016e3e:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8016e42:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4a:	1891      	adds	r1, r2, r2
 8016e4c:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8016e50:	415b      	adcs	r3, r3
 8016e52:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8016e56:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	@ 0x208
 8016e5a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016e5e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[1] * a[1];
 8016e62:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016e66:	3304      	adds	r3, #4
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	f8c7 3548 	str.w	r3, [r7, #1352]	@ 0x548
 8016e70:	f8c7 254c 	str.w	r2, [r7, #1356]	@ 0x54c
 8016e74:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016e78:	3304      	adds	r3, #4
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8016e82:	f8c7 2544 	str.w	r2, [r7, #1348]	@ 0x544
 8016e86:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8016e8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016e8e:	462b      	mov	r3, r5
 8016e90:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8016e94:	e9d2 8900 	ldrd	r8, r9, [r2]
 8016e98:	4642      	mov	r2, r8
 8016e9a:	fb02 f203 	mul.w	r2, r2, r3
 8016e9e:	464b      	mov	r3, r9
 8016ea0:	4621      	mov	r1, r4
 8016ea2:	fb01 f303 	mul.w	r3, r1, r3
 8016ea6:	4413      	add	r3, r2
 8016ea8:	4622      	mov	r2, r4
 8016eaa:	4641      	mov	r1, r8
 8016eac:	fba2 1201 	umull	r1, r2, r2, r1
 8016eb0:	f8c7 2714 	str.w	r2, [r7, #1812]	@ 0x714
 8016eb4:	460a      	mov	r2, r1
 8016eb6:	f8c7 2710 	str.w	r2, [r7, #1808]	@ 0x710
 8016eba:	f8d7 2714 	ldr.w	r2, [r7, #1812]	@ 0x714
 8016ebe:	4413      	add	r3, r2
 8016ec0:	f8c7 3714 	str.w	r3, [r7, #1812]	@ 0x714
 8016ec4:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ecc:	f507 61e2 	add.w	r1, r7, #1808	@ 0x710
 8016ed0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8016ed4:	4621      	mov	r1, r4
 8016ed6:	1851      	adds	r1, r2, r1
 8016ed8:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
 8016edc:	4629      	mov	r1, r5
 8016ede:	eb43 0101 	adc.w	r1, r3, r1
 8016ee2:	f8c7 1204 	str.w	r1, [r7, #516]	@ 0x204
 8016ee6:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8016eea:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016eee:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8016ef2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016efa:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8016efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f02:	1884      	adds	r4, r0, r2
 8016f04:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 8016f08:	eb41 0303 	adc.w	r3, r1, r3
 8016f0c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8016f10:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	@ 0x1f8
 8016f14:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8016f18:	e9c2 3400 	strd	r3, r4, [r2]
  spint v2 = ((spint)t & mask);
 8016f1c:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 8016f20:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8016f24:	4013      	ands	r3, r2
 8016f26:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
  t >>= 29;
 8016f2a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f32:	f04f 0000 	mov.w	r0, #0
 8016f36:	f04f 0100 	mov.w	r1, #0
 8016f3a:	0f50      	lsrs	r0, r2, #29
 8016f3c:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8016f40:	0f59      	lsrs	r1, r3, #29
 8016f42:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8016f46:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[3];
 8016f4a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2200      	movs	r2, #0
 8016f52:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 8016f56:	f8c7 253c 	str.w	r2, [r7, #1340]	@ 0x53c
 8016f5a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016f5e:	330c      	adds	r3, #12
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	2200      	movs	r2, #0
 8016f64:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 8016f68:	f8c7 2534 	str.w	r2, [r7, #1332]	@ 0x534
 8016f6c:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8016f70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016f74:	462b      	mov	r3, r5
 8016f76:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8016f7a:	e9d2 8900 	ldrd	r8, r9, [r2]
 8016f7e:	4642      	mov	r2, r8
 8016f80:	fb02 f203 	mul.w	r2, r2, r3
 8016f84:	464b      	mov	r3, r9
 8016f86:	4621      	mov	r1, r4
 8016f88:	fb01 f303 	mul.w	r3, r1, r3
 8016f8c:	4413      	add	r3, r2
 8016f8e:	4622      	mov	r2, r4
 8016f90:	4641      	mov	r1, r8
 8016f92:	fba2 1201 	umull	r1, r2, r2, r1
 8016f96:	f8c7 25dc 	str.w	r2, [r7, #1500]	@ 0x5dc
 8016f9a:	460a      	mov	r2, r1
 8016f9c:	f8c7 25d8 	str.w	r2, [r7, #1496]	@ 0x5d8
 8016fa0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	@ 0x5dc
 8016fa4:	4413      	add	r3, r2
 8016fa6:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 8016faa:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 8016fae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016fb2:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016fb6:	e9c2 3400 	strd	r3, r4, [r2]
 8016fba:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8016fbe:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[1] * a[2];
 8016fc2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016fc6:	3304      	adds	r3, #4
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8016fd0:	f8c7 252c 	str.w	r2, [r7, #1324]	@ 0x52c
 8016fd4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8016fd8:	3308      	adds	r3, #8
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8016fe2:	f8c7 2524 	str.w	r2, [r7, #1316]	@ 0x524
 8016fe6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8016fea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016fee:	462b      	mov	r3, r5
 8016ff0:	f507 62a4 	add.w	r2, r7, #1312	@ 0x520
 8016ff4:	e9d2 8900 	ldrd	r8, r9, [r2]
 8016ff8:	4642      	mov	r2, r8
 8016ffa:	fb02 f203 	mul.w	r2, r2, r3
 8016ffe:	464b      	mov	r3, r9
 8017000:	4621      	mov	r1, r4
 8017002:	fb01 f303 	mul.w	r3, r1, r3
 8017006:	4413      	add	r3, r2
 8017008:	4622      	mov	r2, r4
 801700a:	4641      	mov	r1, r8
 801700c:	fba2 1201 	umull	r1, r2, r2, r1
 8017010:	f8c7 270c 	str.w	r2, [r7, #1804]	@ 0x70c
 8017014:	460a      	mov	r2, r1
 8017016:	f8c7 2708 	str.w	r2, [r7, #1800]	@ 0x708
 801701a:	f8d7 270c 	ldr.w	r2, [r7, #1804]	@ 0x70c
 801701e:	4413      	add	r3, r2
 8017020:	f8c7 370c 	str.w	r3, [r7, #1804]	@ 0x70c
 8017024:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801702c:	f507 61e1 	add.w	r1, r7, #1800	@ 0x708
 8017030:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017034:	4621      	mov	r1, r4
 8017036:	1851      	adds	r1, r2, r1
 8017038:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 801703c:	4629      	mov	r1, r5
 801703e:	eb43 0101 	adc.w	r1, r3, r1
 8017042:	f8c7 11f4 	str.w	r1, [r7, #500]	@ 0x1f4
 8017046:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 801704a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801704e:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8017052:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801705a:	1891      	adds	r1, r2, r2
 801705c:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 8017060:	415b      	adcs	r3, r3
 8017062:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8017066:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	@ 0x1e8
 801706a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801706e:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8017072:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017076:	e9d3 0100 	ldrd	r0, r1, [r3]
 801707a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017082:	1884      	adds	r4, r0, r2
 8017084:	f8c7 41e0 	str.w	r4, [r7, #480]	@ 0x1e0
 8017088:	eb41 0303 	adc.w	r3, r1, r3
 801708c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8017090:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 8017094:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8017098:	e9c2 3400 	strd	r3, r4, [r2]
  spint v3 = ((spint)t & mask);
 801709c:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 80170a0:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80170a4:	4013      	ands	r3, r2
 80170a6:	f8c7 3738 	str.w	r3, [r7, #1848]	@ 0x738
  t >>= 29;
 80170aa:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80170ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170b2:	f04f 0000 	mov.w	r0, #0
 80170b6:	f04f 0100 	mov.w	r1, #0
 80170ba:	0f50      	lsrs	r0, r2, #29
 80170bc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80170c0:	0f59      	lsrs	r1, r3, #29
 80170c2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80170c6:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[4];
 80170ca:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	2200      	movs	r2, #0
 80170d2:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
 80170d6:	f8c7 251c 	str.w	r2, [r7, #1308]	@ 0x51c
 80170da:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80170de:	3310      	adds	r3, #16
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	2200      	movs	r2, #0
 80170e4:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510
 80170e8:	f8c7 2514 	str.w	r2, [r7, #1300]	@ 0x514
 80170ec:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80170f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80170f4:	462b      	mov	r3, r5
 80170f6:	f507 62a2 	add.w	r2, r7, #1296	@ 0x510
 80170fa:	e9d2 8900 	ldrd	r8, r9, [r2]
 80170fe:	4642      	mov	r2, r8
 8017100:	fb02 f203 	mul.w	r2, r2, r3
 8017104:	464b      	mov	r3, r9
 8017106:	4621      	mov	r1, r4
 8017108:	fb01 f303 	mul.w	r3, r1, r3
 801710c:	4413      	add	r3, r2
 801710e:	4622      	mov	r2, r4
 8017110:	4641      	mov	r1, r8
 8017112:	fba2 1201 	umull	r1, r2, r2, r1
 8017116:	f8c7 25d4 	str.w	r2, [r7, #1492]	@ 0x5d4
 801711a:	460a      	mov	r2, r1
 801711c:	f8c7 25d0 	str.w	r2, [r7, #1488]	@ 0x5d0
 8017120:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 8017124:	4413      	add	r3, r2
 8017126:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 801712a:	f507 63ba 	add.w	r3, r7, #1488	@ 0x5d0
 801712e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017132:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017136:	e9c2 3400 	strd	r3, r4, [r2]
 801713a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801713e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[1] * a[3];
 8017142:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017146:	3304      	adds	r3, #4
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	2200      	movs	r2, #0
 801714c:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
 8017150:	f8c7 250c 	str.w	r2, [r7, #1292]	@ 0x50c
 8017154:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017158:	330c      	adds	r3, #12
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	2200      	movs	r2, #0
 801715e:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8017162:	f8c7 2504 	str.w	r2, [r7, #1284]	@ 0x504
 8017166:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 801716a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801716e:	462b      	mov	r3, r5
 8017170:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 8017174:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017178:	4642      	mov	r2, r8
 801717a:	fb02 f203 	mul.w	r2, r2, r3
 801717e:	464b      	mov	r3, r9
 8017180:	4621      	mov	r1, r4
 8017182:	fb01 f303 	mul.w	r3, r1, r3
 8017186:	4413      	add	r3, r2
 8017188:	4622      	mov	r2, r4
 801718a:	4641      	mov	r1, r8
 801718c:	fba2 1201 	umull	r1, r2, r2, r1
 8017190:	f8c7 2704 	str.w	r2, [r7, #1796]	@ 0x704
 8017194:	460a      	mov	r2, r1
 8017196:	f8c7 2700 	str.w	r2, [r7, #1792]	@ 0x700
 801719a:	f8d7 2704 	ldr.w	r2, [r7, #1796]	@ 0x704
 801719e:	4413      	add	r3, r2
 80171a0:	f8c7 3704 	str.w	r3, [r7, #1796]	@ 0x704
 80171a4:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80171a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ac:	f507 61e0 	add.w	r1, r7, #1792	@ 0x700
 80171b0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80171b4:	4621      	mov	r1, r4
 80171b6:	1851      	adds	r1, r2, r1
 80171b8:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
 80171bc:	4629      	mov	r1, r5
 80171be:	eb43 0101 	adc.w	r1, r3, r1
 80171c2:	f8c7 11dc 	str.w	r1, [r7, #476]	@ 0x1dc
 80171c6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 80171ca:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80171ce:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 80171d2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80171d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171da:	1891      	adds	r1, r2, r2
 80171dc:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
 80171e0:	415b      	adcs	r3, r3
 80171e2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80171e6:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	@ 0x1d0
 80171ea:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80171ee:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[2] * a[2];
 80171f2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80171f6:	3308      	adds	r3, #8
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2200      	movs	r2, #0
 80171fc:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 8017200:	f8c7 24fc 	str.w	r2, [r7, #1276]	@ 0x4fc
 8017204:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017208:	3308      	adds	r3, #8
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	2200      	movs	r2, #0
 801720e:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 8017212:	f8c7 24f4 	str.w	r2, [r7, #1268]	@ 0x4f4
 8017216:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 801721a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801721e:	462b      	mov	r3, r5
 8017220:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8017224:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017228:	4642      	mov	r2, r8
 801722a:	fb02 f203 	mul.w	r2, r2, r3
 801722e:	464b      	mov	r3, r9
 8017230:	4621      	mov	r1, r4
 8017232:	fb01 f303 	mul.w	r3, r1, r3
 8017236:	4413      	add	r3, r2
 8017238:	4622      	mov	r2, r4
 801723a:	4641      	mov	r1, r8
 801723c:	fba2 1201 	umull	r1, r2, r2, r1
 8017240:	f8c7 26fc 	str.w	r2, [r7, #1788]	@ 0x6fc
 8017244:	460a      	mov	r2, r1
 8017246:	f8c7 26f8 	str.w	r2, [r7, #1784]	@ 0x6f8
 801724a:	f8d7 26fc 	ldr.w	r2, [r7, #1788]	@ 0x6fc
 801724e:	4413      	add	r3, r2
 8017250:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
 8017254:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801725c:	f507 61df 	add.w	r1, r7, #1784	@ 0x6f8
 8017260:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017264:	4621      	mov	r1, r4
 8017266:	1851      	adds	r1, r2, r1
 8017268:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
 801726c:	4629      	mov	r1, r5
 801726e:	eb43 0101 	adc.w	r1, r3, r1
 8017272:	f8c7 11cc 	str.w	r1, [r7, #460]	@ 0x1cc
 8017276:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 801727a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801727e:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8017282:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017286:	e9d3 0100 	ldrd	r0, r1, [r3]
 801728a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017292:	1884      	adds	r4, r0, r2
 8017294:	f8c7 41c0 	str.w	r4, [r7, #448]	@ 0x1c0
 8017298:	eb41 0303 	adc.w	r3, r1, r3
 801729c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80172a0:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	@ 0x1c0
 80172a4:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80172a8:	e9c2 3400 	strd	r3, r4, [r2]
  spint v4 = ((spint)t & mask);
 80172ac:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 80172b0:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80172b4:	4013      	ands	r3, r2
 80172b6:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
  t >>= 29;
 80172ba:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80172be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172c2:	f04f 0000 	mov.w	r0, #0
 80172c6:	f04f 0100 	mov.w	r1, #0
 80172ca:	0f50      	lsrs	r0, r2, #29
 80172cc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80172d0:	0f59      	lsrs	r1, r3, #29
 80172d2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80172d6:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[5];
 80172da:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	2200      	movs	r2, #0
 80172e2:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 80172e6:	f8c7 24ec 	str.w	r2, [r7, #1260]	@ 0x4ec
 80172ea:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80172ee:	3314      	adds	r3, #20
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	2200      	movs	r2, #0
 80172f4:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80172f8:	f8c7 24e4 	str.w	r2, [r7, #1252]	@ 0x4e4
 80172fc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8017300:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017304:	462b      	mov	r3, r5
 8017306:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 801730a:	e9d2 8900 	ldrd	r8, r9, [r2]
 801730e:	4642      	mov	r2, r8
 8017310:	fb02 f203 	mul.w	r2, r2, r3
 8017314:	464b      	mov	r3, r9
 8017316:	4621      	mov	r1, r4
 8017318:	fb01 f303 	mul.w	r3, r1, r3
 801731c:	4413      	add	r3, r2
 801731e:	4622      	mov	r2, r4
 8017320:	4641      	mov	r1, r8
 8017322:	fba2 1201 	umull	r1, r2, r2, r1
 8017326:	f8c7 25cc 	str.w	r2, [r7, #1484]	@ 0x5cc
 801732a:	460a      	mov	r2, r1
 801732c:	f8c7 25c8 	str.w	r2, [r7, #1480]	@ 0x5c8
 8017330:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	@ 0x5cc
 8017334:	4413      	add	r3, r2
 8017336:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 801733a:	f507 63b9 	add.w	r3, r7, #1480	@ 0x5c8
 801733e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017342:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017346:	e9c2 3400 	strd	r3, r4, [r2]
 801734a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801734e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[1] * a[4];
 8017352:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017356:	3304      	adds	r3, #4
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	2200      	movs	r2, #0
 801735c:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8017360:	f8c7 24dc 	str.w	r2, [r7, #1244]	@ 0x4dc
 8017364:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017368:	3310      	adds	r3, #16
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	2200      	movs	r2, #0
 801736e:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8017372:	f8c7 24d4 	str.w	r2, [r7, #1236]	@ 0x4d4
 8017376:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 801737a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801737e:	462b      	mov	r3, r5
 8017380:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8017384:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017388:	4642      	mov	r2, r8
 801738a:	fb02 f203 	mul.w	r2, r2, r3
 801738e:	464b      	mov	r3, r9
 8017390:	4621      	mov	r1, r4
 8017392:	fb01 f303 	mul.w	r3, r1, r3
 8017396:	4413      	add	r3, r2
 8017398:	4622      	mov	r2, r4
 801739a:	4641      	mov	r1, r8
 801739c:	fba2 1201 	umull	r1, r2, r2, r1
 80173a0:	f8c7 26f4 	str.w	r2, [r7, #1780]	@ 0x6f4
 80173a4:	460a      	mov	r2, r1
 80173a6:	f8c7 26f0 	str.w	r2, [r7, #1776]	@ 0x6f0
 80173aa:	f8d7 26f4 	ldr.w	r2, [r7, #1780]	@ 0x6f4
 80173ae:	4413      	add	r3, r2
 80173b0:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
 80173b4:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80173b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173bc:	f507 61de 	add.w	r1, r7, #1776	@ 0x6f0
 80173c0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80173c4:	4621      	mov	r1, r4
 80173c6:	1851      	adds	r1, r2, r1
 80173c8:	f8c7 11b8 	str.w	r1, [r7, #440]	@ 0x1b8
 80173cc:	4629      	mov	r1, r5
 80173ce:	eb43 0101 	adc.w	r1, r3, r1
 80173d2:	f8c7 11bc 	str.w	r1, [r7, #444]	@ 0x1bc
 80173d6:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 80173da:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80173de:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[2] * a[3];
 80173e2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80173e6:	3308      	adds	r3, #8
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	2200      	movs	r2, #0
 80173ec:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 80173f0:	f8c7 24cc 	str.w	r2, [r7, #1228]	@ 0x4cc
 80173f4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80173f8:	330c      	adds	r3, #12
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	2200      	movs	r2, #0
 80173fe:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 8017402:	f8c7 24c4 	str.w	r2, [r7, #1220]	@ 0x4c4
 8017406:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 801740a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801740e:	462b      	mov	r3, r5
 8017410:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 8017414:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017418:	4642      	mov	r2, r8
 801741a:	fb02 f203 	mul.w	r2, r2, r3
 801741e:	464b      	mov	r3, r9
 8017420:	4621      	mov	r1, r4
 8017422:	fb01 f303 	mul.w	r3, r1, r3
 8017426:	4413      	add	r3, r2
 8017428:	4622      	mov	r2, r4
 801742a:	4641      	mov	r1, r8
 801742c:	fba2 1201 	umull	r1, r2, r2, r1
 8017430:	f8c7 26ec 	str.w	r2, [r7, #1772]	@ 0x6ec
 8017434:	460a      	mov	r2, r1
 8017436:	f8c7 26e8 	str.w	r2, [r7, #1768]	@ 0x6e8
 801743a:	f8d7 26ec 	ldr.w	r2, [r7, #1772]	@ 0x6ec
 801743e:	4413      	add	r3, r2
 8017440:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 8017444:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744c:	f507 61dd 	add.w	r1, r7, #1768	@ 0x6e8
 8017450:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017454:	4621      	mov	r1, r4
 8017456:	1851      	adds	r1, r2, r1
 8017458:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 801745c:	4629      	mov	r1, r5
 801745e:	eb43 0101 	adc.w	r1, r3, r1
 8017462:	f8c7 11b4 	str.w	r1, [r7, #436]	@ 0x1b4
 8017466:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	@ 0x1b0
 801746a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801746e:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8017472:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801747a:	1891      	adds	r1, r2, r2
 801747c:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8017480:	415b      	adcs	r3, r3
 8017482:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8017486:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 801748a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801748e:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8017492:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017496:	e9d3 0100 	ldrd	r0, r1, [r3]
 801749a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a2:	1884      	adds	r4, r0, r2
 80174a4:	f8c7 41a0 	str.w	r4, [r7, #416]	@ 0x1a0
 80174a8:	eb41 0303 	adc.w	r3, r1, r3
 80174ac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80174b0:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	@ 0x1a0
 80174b4:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80174b8:	e9c2 3400 	strd	r3, r4, [r2]
  spint v5 = ((spint)t & mask);
 80174bc:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 80174c0:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80174c4:	4013      	ands	r3, r2
 80174c6:	f8c7 3730 	str.w	r3, [r7, #1840]	@ 0x730
  t >>= 29;
 80174ca:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80174ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174d2:	f04f 0000 	mov.w	r0, #0
 80174d6:	f04f 0100 	mov.w	r1, #0
 80174da:	0f50      	lsrs	r0, r2, #29
 80174dc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80174e0:	0f59      	lsrs	r1, r3, #29
 80174e2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80174e6:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[6];
 80174ea:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	2200      	movs	r2, #0
 80174f2:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
 80174f6:	f8c7 24bc 	str.w	r2, [r7, #1212]	@ 0x4bc
 80174fa:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80174fe:	3318      	adds	r3, #24
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	2200      	movs	r2, #0
 8017504:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 8017508:	f8c7 24b4 	str.w	r2, [r7, #1204]	@ 0x4b4
 801750c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8017510:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017514:	462b      	mov	r3, r5
 8017516:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 801751a:	e9d2 8900 	ldrd	r8, r9, [r2]
 801751e:	4642      	mov	r2, r8
 8017520:	fb02 f203 	mul.w	r2, r2, r3
 8017524:	464b      	mov	r3, r9
 8017526:	4621      	mov	r1, r4
 8017528:	fb01 f303 	mul.w	r3, r1, r3
 801752c:	4413      	add	r3, r2
 801752e:	4622      	mov	r2, r4
 8017530:	4641      	mov	r1, r8
 8017532:	fba2 1201 	umull	r1, r2, r2, r1
 8017536:	f8c7 25c4 	str.w	r2, [r7, #1476]	@ 0x5c4
 801753a:	460a      	mov	r2, r1
 801753c:	f8c7 25c0 	str.w	r2, [r7, #1472]	@ 0x5c0
 8017540:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 8017544:	4413      	add	r3, r2
 8017546:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 801754a:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 801754e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017552:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017556:	e9c2 3400 	strd	r3, r4, [r2]
 801755a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801755e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[1] * a[5];
 8017562:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017566:	3304      	adds	r3, #4
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	2200      	movs	r2, #0
 801756c:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
 8017570:	f8c7 24ac 	str.w	r2, [r7, #1196]	@ 0x4ac
 8017574:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017578:	3314      	adds	r3, #20
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	2200      	movs	r2, #0
 801757e:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 8017582:	f8c7 24a4 	str.w	r2, [r7, #1188]	@ 0x4a4
 8017586:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801758a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801758e:	462b      	mov	r3, r5
 8017590:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8017594:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017598:	4642      	mov	r2, r8
 801759a:	fb02 f203 	mul.w	r2, r2, r3
 801759e:	464b      	mov	r3, r9
 80175a0:	4621      	mov	r1, r4
 80175a2:	fb01 f303 	mul.w	r3, r1, r3
 80175a6:	4413      	add	r3, r2
 80175a8:	4622      	mov	r2, r4
 80175aa:	4641      	mov	r1, r8
 80175ac:	fba2 1201 	umull	r1, r2, r2, r1
 80175b0:	f8c7 26e4 	str.w	r2, [r7, #1764]	@ 0x6e4
 80175b4:	460a      	mov	r2, r1
 80175b6:	f8c7 26e0 	str.w	r2, [r7, #1760]	@ 0x6e0
 80175ba:	f8d7 26e4 	ldr.w	r2, [r7, #1764]	@ 0x6e4
 80175be:	4413      	add	r3, r2
 80175c0:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 80175c4:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80175c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175cc:	f507 61dc 	add.w	r1, r7, #1760	@ 0x6e0
 80175d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80175d4:	4621      	mov	r1, r4
 80175d6:	1851      	adds	r1, r2, r1
 80175d8:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 80175dc:	4629      	mov	r1, r5
 80175de:	eb43 0101 	adc.w	r1, r3, r1
 80175e2:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 80175e6:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 80175ea:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80175ee:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[2] * a[4];
 80175f2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80175f6:	3308      	adds	r3, #8
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	2200      	movs	r2, #0
 80175fc:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 8017600:	f8c7 249c 	str.w	r2, [r7, #1180]	@ 0x49c
 8017604:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017608:	3310      	adds	r3, #16
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	2200      	movs	r2, #0
 801760e:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 8017612:	f8c7 2494 	str.w	r2, [r7, #1172]	@ 0x494
 8017616:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801761a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801761e:	462b      	mov	r3, r5
 8017620:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 8017624:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017628:	4642      	mov	r2, r8
 801762a:	fb02 f203 	mul.w	r2, r2, r3
 801762e:	464b      	mov	r3, r9
 8017630:	4621      	mov	r1, r4
 8017632:	fb01 f303 	mul.w	r3, r1, r3
 8017636:	4413      	add	r3, r2
 8017638:	4622      	mov	r2, r4
 801763a:	4641      	mov	r1, r8
 801763c:	fba2 1201 	umull	r1, r2, r2, r1
 8017640:	f8c7 26dc 	str.w	r2, [r7, #1756]	@ 0x6dc
 8017644:	460a      	mov	r2, r1
 8017646:	f8c7 26d8 	str.w	r2, [r7, #1752]	@ 0x6d8
 801764a:	f8d7 26dc 	ldr.w	r2, [r7, #1756]	@ 0x6dc
 801764e:	4413      	add	r3, r2
 8017650:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 8017654:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801765c:	f507 61db 	add.w	r1, r7, #1752	@ 0x6d8
 8017660:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017664:	4621      	mov	r1, r4
 8017666:	1851      	adds	r1, r2, r1
 8017668:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 801766c:	4629      	mov	r1, r5
 801766e:	eb43 0101 	adc.w	r1, r3, r1
 8017672:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8017676:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 801767a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801767e:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8017682:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801768a:	1891      	adds	r1, r2, r2
 801768c:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 8017690:	415b      	adcs	r3, r3
 8017692:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8017696:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 801769a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801769e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[3] * a[3];
 80176a2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80176a6:	330c      	adds	r3, #12
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	2200      	movs	r2, #0
 80176ac:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 80176b0:	f8c7 248c 	str.w	r2, [r7, #1164]	@ 0x48c
 80176b4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80176b8:	330c      	adds	r3, #12
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	2200      	movs	r2, #0
 80176be:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
 80176c2:	f8c7 2484 	str.w	r2, [r7, #1156]	@ 0x484
 80176c6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80176ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80176ce:	462b      	mov	r3, r5
 80176d0:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 80176d4:	e9d2 8900 	ldrd	r8, r9, [r2]
 80176d8:	4642      	mov	r2, r8
 80176da:	fb02 f203 	mul.w	r2, r2, r3
 80176de:	464b      	mov	r3, r9
 80176e0:	4621      	mov	r1, r4
 80176e2:	fb01 f303 	mul.w	r3, r1, r3
 80176e6:	4413      	add	r3, r2
 80176e8:	4622      	mov	r2, r4
 80176ea:	4641      	mov	r1, r8
 80176ec:	fba2 1201 	umull	r1, r2, r2, r1
 80176f0:	f8c7 26d4 	str.w	r2, [r7, #1748]	@ 0x6d4
 80176f4:	460a      	mov	r2, r1
 80176f6:	f8c7 26d0 	str.w	r2, [r7, #1744]	@ 0x6d0
 80176fa:	f8d7 26d4 	ldr.w	r2, [r7, #1748]	@ 0x6d4
 80176fe:	4413      	add	r3, r2
 8017700:	f8c7 36d4 	str.w	r3, [r7, #1748]	@ 0x6d4
 8017704:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801770c:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 8017710:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017714:	4621      	mov	r1, r4
 8017716:	1851      	adds	r1, r2, r1
 8017718:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 801771c:	4629      	mov	r1, r5
 801771e:	eb43 0101 	adc.w	r1, r3, r1
 8017722:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 8017726:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	@ 0x180
 801772a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801772e:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8017732:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017736:	e9d3 0100 	ldrd	r0, r1, [r3]
 801773a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017742:	1884      	adds	r4, r0, r2
 8017744:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8017748:	eb41 0303 	adc.w	r3, r1, r3
 801774c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8017750:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8017754:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8017758:	e9c2 3400 	strd	r3, r4, [r2]
  spint v6 = ((spint)t & mask);
 801775c:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 8017760:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8017764:	4013      	ands	r3, r2
 8017766:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
  t >>= 29;
 801776a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 801776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017772:	f04f 0000 	mov.w	r0, #0
 8017776:	f04f 0100 	mov.w	r1, #0
 801777a:	0f50      	lsrs	r0, r2, #29
 801777c:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8017780:	0f59      	lsrs	r1, r3, #29
 8017782:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017786:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[7];
 801778a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	2200      	movs	r2, #0
 8017792:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 8017796:	f8c7 247c 	str.w	r2, [r7, #1148]	@ 0x47c
 801779a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801779e:	331c      	adds	r3, #28
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	2200      	movs	r2, #0
 80177a4:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
 80177a8:	f8c7 2474 	str.w	r2, [r7, #1140]	@ 0x474
 80177ac:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80177b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80177b4:	462b      	mov	r3, r5
 80177b6:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 80177ba:	e9d2 8900 	ldrd	r8, r9, [r2]
 80177be:	4642      	mov	r2, r8
 80177c0:	fb02 f203 	mul.w	r2, r2, r3
 80177c4:	464b      	mov	r3, r9
 80177c6:	4621      	mov	r1, r4
 80177c8:	fb01 f303 	mul.w	r3, r1, r3
 80177cc:	4413      	add	r3, r2
 80177ce:	4622      	mov	r2, r4
 80177d0:	4641      	mov	r1, r8
 80177d2:	fba2 1201 	umull	r1, r2, r2, r1
 80177d6:	f8c7 25bc 	str.w	r2, [r7, #1468]	@ 0x5bc
 80177da:	460a      	mov	r2, r1
 80177dc:	f8c7 25b8 	str.w	r2, [r7, #1464]	@ 0x5b8
 80177e0:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	@ 0x5bc
 80177e4:	4413      	add	r3, r2
 80177e6:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 80177ea:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80177ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80177f2:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80177f6:	e9c2 3400 	strd	r3, r4, [r2]
 80177fa:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80177fe:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[1] * a[6];
 8017802:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017806:	3304      	adds	r3, #4
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	2200      	movs	r2, #0
 801780c:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
 8017810:	f8c7 246c 	str.w	r2, [r7, #1132]	@ 0x46c
 8017814:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017818:	3318      	adds	r3, #24
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	2200      	movs	r2, #0
 801781e:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8017822:	f8c7 2464 	str.w	r2, [r7, #1124]	@ 0x464
 8017826:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 801782a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801782e:	462b      	mov	r3, r5
 8017830:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 8017834:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017838:	4642      	mov	r2, r8
 801783a:	fb02 f203 	mul.w	r2, r2, r3
 801783e:	464b      	mov	r3, r9
 8017840:	4621      	mov	r1, r4
 8017842:	fb01 f303 	mul.w	r3, r1, r3
 8017846:	4413      	add	r3, r2
 8017848:	4622      	mov	r2, r4
 801784a:	4641      	mov	r1, r8
 801784c:	fba2 1201 	umull	r1, r2, r2, r1
 8017850:	f8c7 26cc 	str.w	r2, [r7, #1740]	@ 0x6cc
 8017854:	460a      	mov	r2, r1
 8017856:	f8c7 26c8 	str.w	r2, [r7, #1736]	@ 0x6c8
 801785a:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	@ 0x6cc
 801785e:	4413      	add	r3, r2
 8017860:	f8c7 36cc 	str.w	r3, [r7, #1740]	@ 0x6cc
 8017864:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8017870:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017874:	4621      	mov	r1, r4
 8017876:	1851      	adds	r1, r2, r1
 8017878:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 801787c:	4629      	mov	r1, r5
 801787e:	eb43 0101 	adc.w	r1, r3, r1
 8017882:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
 8017886:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 801788a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801788e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[2] * a[5];
 8017892:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017896:	3308      	adds	r3, #8
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	2200      	movs	r2, #0
 801789c:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 80178a0:	f8c7 245c 	str.w	r2, [r7, #1116]	@ 0x45c
 80178a4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80178a8:	3314      	adds	r3, #20
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	2200      	movs	r2, #0
 80178ae:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 80178b2:	f8c7 2454 	str.w	r2, [r7, #1108]	@ 0x454
 80178b6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80178ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80178be:	462b      	mov	r3, r5
 80178c0:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 80178c4:	e9d2 8900 	ldrd	r8, r9, [r2]
 80178c8:	4642      	mov	r2, r8
 80178ca:	fb02 f203 	mul.w	r2, r2, r3
 80178ce:	464b      	mov	r3, r9
 80178d0:	4621      	mov	r1, r4
 80178d2:	fb01 f303 	mul.w	r3, r1, r3
 80178d6:	4413      	add	r3, r2
 80178d8:	4622      	mov	r2, r4
 80178da:	4641      	mov	r1, r8
 80178dc:	fba2 1201 	umull	r1, r2, r2, r1
 80178e0:	f8c7 26c4 	str.w	r2, [r7, #1732]	@ 0x6c4
 80178e4:	460a      	mov	r2, r1
 80178e6:	f8c7 26c0 	str.w	r2, [r7, #1728]	@ 0x6c0
 80178ea:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 80178ee:	4413      	add	r3, r2
 80178f0:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
 80178f4:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80178f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178fc:	f507 61d8 	add.w	r1, r7, #1728	@ 0x6c0
 8017900:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017904:	4621      	mov	r1, r4
 8017906:	1851      	adds	r1, r2, r1
 8017908:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 801790c:	4629      	mov	r1, r5
 801790e:	eb43 0101 	adc.w	r1, r3, r1
 8017912:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 8017916:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 801791a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801791e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[3] * a[4];
 8017922:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017926:	330c      	adds	r3, #12
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	2200      	movs	r2, #0
 801792c:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8017930:	f8c7 244c 	str.w	r2, [r7, #1100]	@ 0x44c
 8017934:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017938:	3310      	adds	r3, #16
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	2200      	movs	r2, #0
 801793e:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 8017942:	f8c7 2444 	str.w	r2, [r7, #1092]	@ 0x444
 8017946:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 801794a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801794e:	462b      	mov	r3, r5
 8017950:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 8017954:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017958:	4642      	mov	r2, r8
 801795a:	fb02 f203 	mul.w	r2, r2, r3
 801795e:	464b      	mov	r3, r9
 8017960:	4621      	mov	r1, r4
 8017962:	fb01 f303 	mul.w	r3, r1, r3
 8017966:	4413      	add	r3, r2
 8017968:	4622      	mov	r2, r4
 801796a:	4641      	mov	r1, r8
 801796c:	fba2 1201 	umull	r1, r2, r2, r1
 8017970:	f8c7 26bc 	str.w	r2, [r7, #1724]	@ 0x6bc
 8017974:	460a      	mov	r2, r1
 8017976:	f8c7 26b8 	str.w	r2, [r7, #1720]	@ 0x6b8
 801797a:	f8d7 26bc 	ldr.w	r2, [r7, #1724]	@ 0x6bc
 801797e:	4413      	add	r3, r2
 8017980:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 8017984:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801798c:	f507 61d7 	add.w	r1, r7, #1720	@ 0x6b8
 8017990:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017994:	4621      	mov	r1, r4
 8017996:	1851      	adds	r1, r2, r1
 8017998:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 801799c:	4629      	mov	r1, r5
 801799e:	eb43 0101 	adc.w	r1, r3, r1
 80179a2:	f8c7 1164 	str.w	r1, [r7, #356]	@ 0x164
 80179a6:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	@ 0x160
 80179aa:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80179ae:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 80179b2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80179b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ba:	1891      	adds	r1, r2, r2
 80179bc:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 80179c0:	415b      	adcs	r3, r3
 80179c2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80179c6:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 80179ca:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80179ce:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 80179d2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80179d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179da:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80179de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179e2:	1884      	adds	r4, r0, r2
 80179e4:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 80179e8:	eb41 0303 	adc.w	r3, r1, r3
 80179ec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80179f0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80179f4:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80179f8:	e9c2 3400 	strd	r3, r4, [r2]
  spint v7 = ((spint)t & mask);
 80179fc:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 8017a00:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8017a04:	4013      	ands	r3, r2
 8017a06:	f8c7 3728 	str.w	r3, [r7, #1832]	@ 0x728
  t >>= 29;
 8017a0a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a12:	f04f 0000 	mov.w	r0, #0
 8017a16:	f04f 0100 	mov.w	r1, #0
 8017a1a:	0f50      	lsrs	r0, r2, #29
 8017a1c:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8017a20:	0f59      	lsrs	r1, r3, #29
 8017a22:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017a26:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[0] * a[8];
 8017a2a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2200      	movs	r2, #0
 8017a32:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8017a36:	f8c7 243c 	str.w	r2, [r7, #1084]	@ 0x43c
 8017a3a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017a3e:	3320      	adds	r3, #32
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2200      	movs	r2, #0
 8017a44:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 8017a48:	f8c7 2434 	str.w	r2, [r7, #1076]	@ 0x434
 8017a4c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8017a50:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017a54:	462b      	mov	r3, r5
 8017a56:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 8017a5a:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017a5e:	4642      	mov	r2, r8
 8017a60:	fb02 f203 	mul.w	r2, r2, r3
 8017a64:	464b      	mov	r3, r9
 8017a66:	4621      	mov	r1, r4
 8017a68:	fb01 f303 	mul.w	r3, r1, r3
 8017a6c:	4413      	add	r3, r2
 8017a6e:	4622      	mov	r2, r4
 8017a70:	4641      	mov	r1, r8
 8017a72:	fba2 1201 	umull	r1, r2, r2, r1
 8017a76:	f8c7 25b4 	str.w	r2, [r7, #1460]	@ 0x5b4
 8017a7a:	460a      	mov	r2, r1
 8017a7c:	f8c7 25b0 	str.w	r2, [r7, #1456]	@ 0x5b0
 8017a80:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	@ 0x5b4
 8017a84:	4413      	add	r3, r2
 8017a86:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 8017a8a:	f507 63b6 	add.w	r3, r7, #1456	@ 0x5b0
 8017a8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017a92:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017a96:	e9c2 3400 	strd	r3, r4, [r2]
 8017a9a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017a9e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[1] * a[7];
 8017aa2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017aa6:	3304      	adds	r3, #4
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	2200      	movs	r2, #0
 8017aac:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 8017ab0:	f8c7 242c 	str.w	r2, [r7, #1068]	@ 0x42c
 8017ab4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017ab8:	331c      	adds	r3, #28
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2200      	movs	r2, #0
 8017abe:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
 8017ac2:	f8c7 2424 	str.w	r2, [r7, #1060]	@ 0x424
 8017ac6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8017aca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017ace:	462b      	mov	r3, r5
 8017ad0:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8017ad4:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017ad8:	4642      	mov	r2, r8
 8017ada:	fb02 f203 	mul.w	r2, r2, r3
 8017ade:	464b      	mov	r3, r9
 8017ae0:	4621      	mov	r1, r4
 8017ae2:	fb01 f303 	mul.w	r3, r1, r3
 8017ae6:	4413      	add	r3, r2
 8017ae8:	4622      	mov	r2, r4
 8017aea:	4641      	mov	r1, r8
 8017aec:	fba2 1201 	umull	r1, r2, r2, r1
 8017af0:	f8c7 26b4 	str.w	r2, [r7, #1716]	@ 0x6b4
 8017af4:	460a      	mov	r2, r1
 8017af6:	f8c7 26b0 	str.w	r2, [r7, #1712]	@ 0x6b0
 8017afa:	f8d7 26b4 	ldr.w	r2, [r7, #1716]	@ 0x6b4
 8017afe:	4413      	add	r3, r2
 8017b00:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 8017b04:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b0c:	f507 61d6 	add.w	r1, r7, #1712	@ 0x6b0
 8017b10:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017b14:	4621      	mov	r1, r4
 8017b16:	1851      	adds	r1, r2, r1
 8017b18:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8017b1c:	4629      	mov	r1, r5
 8017b1e:	eb43 0101 	adc.w	r1, r3, r1
 8017b22:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 8017b26:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	@ 0x148
 8017b2a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017b2e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[2] * a[6];
 8017b32:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017b36:	3308      	adds	r3, #8
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8017b40:	f8c7 241c 	str.w	r2, [r7, #1052]	@ 0x41c
 8017b44:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017b48:	3318      	adds	r3, #24
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8017b52:	f8c7 2414 	str.w	r2, [r7, #1044]	@ 0x414
 8017b56:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8017b5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017b5e:	462b      	mov	r3, r5
 8017b60:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8017b64:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017b68:	4642      	mov	r2, r8
 8017b6a:	fb02 f203 	mul.w	r2, r2, r3
 8017b6e:	464b      	mov	r3, r9
 8017b70:	4621      	mov	r1, r4
 8017b72:	fb01 f303 	mul.w	r3, r1, r3
 8017b76:	4413      	add	r3, r2
 8017b78:	4622      	mov	r2, r4
 8017b7a:	4641      	mov	r1, r8
 8017b7c:	fba2 1201 	umull	r1, r2, r2, r1
 8017b80:	f8c7 26ac 	str.w	r2, [r7, #1708]	@ 0x6ac
 8017b84:	460a      	mov	r2, r1
 8017b86:	f8c7 26a8 	str.w	r2, [r7, #1704]	@ 0x6a8
 8017b8a:	f8d7 26ac 	ldr.w	r2, [r7, #1708]	@ 0x6ac
 8017b8e:	4413      	add	r3, r2
 8017b90:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8017b94:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9c:	f507 61d5 	add.w	r1, r7, #1704	@ 0x6a8
 8017ba0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017ba4:	4621      	mov	r1, r4
 8017ba6:	1851      	adds	r1, r2, r1
 8017ba8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
 8017bac:	4629      	mov	r1, r5
 8017bae:	eb43 0101 	adc.w	r1, r3, r1
 8017bb2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
 8017bb6:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8017bba:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017bbe:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[3] * a[5];
 8017bc2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017bc6:	330c      	adds	r3, #12
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	2200      	movs	r2, #0
 8017bcc:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8017bd0:	f8c7 240c 	str.w	r2, [r7, #1036]	@ 0x40c
 8017bd4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017bd8:	3314      	adds	r3, #20
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 8017be2:	f8c7 2404 	str.w	r2, [r7, #1028]	@ 0x404
 8017be6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8017bea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017bee:	462b      	mov	r3, r5
 8017bf0:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8017bf4:	e9d2 8900 	ldrd	r8, r9, [r2]
 8017bf8:	4642      	mov	r2, r8
 8017bfa:	fb02 f203 	mul.w	r2, r2, r3
 8017bfe:	464b      	mov	r3, r9
 8017c00:	4621      	mov	r1, r4
 8017c02:	fb01 f303 	mul.w	r3, r1, r3
 8017c06:	4413      	add	r3, r2
 8017c08:	4622      	mov	r2, r4
 8017c0a:	4641      	mov	r1, r8
 8017c0c:	fba2 1201 	umull	r1, r2, r2, r1
 8017c10:	f8c7 26a4 	str.w	r2, [r7, #1700]	@ 0x6a4
 8017c14:	460a      	mov	r2, r1
 8017c16:	f8c7 26a0 	str.w	r2, [r7, #1696]	@ 0x6a0
 8017c1a:	f8d7 26a4 	ldr.w	r2, [r7, #1700]	@ 0x6a4
 8017c1e:	4413      	add	r3, r2
 8017c20:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 8017c24:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c2c:	f507 61d4 	add.w	r1, r7, #1696	@ 0x6a0
 8017c30:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017c34:	4621      	mov	r1, r4
 8017c36:	1851      	adds	r1, r2, r1
 8017c38:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8017c3c:	4629      	mov	r1, r5
 8017c3e:	eb43 0101 	adc.w	r1, r3, r1
 8017c42:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
 8017c46:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	@ 0x138
 8017c4a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017c4e:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8017c52:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c5a:	1891      	adds	r1, r2, r2
 8017c5c:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8017c60:	415b      	adcs	r3, r3
 8017c62:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8017c66:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8017c6a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017c6e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[4] * a[4];
 8017c72:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017c76:	3310      	adds	r3, #16
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8017c80:	f8c7 23fc 	str.w	r2, [r7, #1020]	@ 0x3fc
 8017c84:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017c88:	3310      	adds	r3, #16
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 8017c92:	f8c7 23f4 	str.w	r2, [r7, #1012]	@ 0x3f4
 8017c96:	e9d7 45fe 	ldrd	r4, r5, [r7, #1016]	@ 0x3f8
 8017c9a:	462b      	mov	r3, r5
 8017c9c:	e9d7 89fc 	ldrd	r8, r9, [r7, #1008]	@ 0x3f0
 8017ca0:	4642      	mov	r2, r8
 8017ca2:	fb02 f203 	mul.w	r2, r2, r3
 8017ca6:	464b      	mov	r3, r9
 8017ca8:	4621      	mov	r1, r4
 8017caa:	fb01 f303 	mul.w	r3, r1, r3
 8017cae:	4413      	add	r3, r2
 8017cb0:	4622      	mov	r2, r4
 8017cb2:	4641      	mov	r1, r8
 8017cb4:	fba2 1201 	umull	r1, r2, r2, r1
 8017cb8:	f8c7 269c 	str.w	r2, [r7, #1692]	@ 0x69c
 8017cbc:	460a      	mov	r2, r1
 8017cbe:	f8c7 2698 	str.w	r2, [r7, #1688]	@ 0x698
 8017cc2:	f8d7 269c 	ldr.w	r2, [r7, #1692]	@ 0x69c
 8017cc6:	4413      	add	r3, r2
 8017cc8:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8017ccc:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd4:	f507 61d3 	add.w	r1, r7, #1688	@ 0x698
 8017cd8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017cdc:	4621      	mov	r1, r4
 8017cde:	1851      	adds	r1, r2, r1
 8017ce0:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8017ce4:	4629      	mov	r1, r5
 8017ce6:	eb43 0101 	adc.w	r1, r3, r1
 8017cea:	f8c7 112c 	str.w	r1, [r7, #300]	@ 0x12c
 8017cee:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8017cf2:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017cf6:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8017cfa:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017d02:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d0a:	1884      	adds	r4, r0, r2
 8017d0c:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8017d10:	eb41 0303 	adc.w	r3, r1, r3
 8017d14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8017d18:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8017d1c:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8017d20:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v0 * p8;
 8017d24:	f8d7 3744 	ldr.w	r3, [r7, #1860]	@ 0x744
 8017d28:	2200      	movs	r2, #0
 8017d2a:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
 8017d2e:	f8c7 23ec 	str.w	r2, [r7, #1004]	@ 0x3ec
 8017d32:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8017d36:	2200      	movs	r2, #0
 8017d38:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 8017d3c:	f8c7 23e4 	str.w	r2, [r7, #996]	@ 0x3e4
 8017d40:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	@ 0x3e8
 8017d44:	462b      	mov	r3, r5
 8017d46:	e9d7 89f8 	ldrd	r8, r9, [r7, #992]	@ 0x3e0
 8017d4a:	4642      	mov	r2, r8
 8017d4c:	fb02 f203 	mul.w	r2, r2, r3
 8017d50:	464b      	mov	r3, r9
 8017d52:	4621      	mov	r1, r4
 8017d54:	fb01 f303 	mul.w	r3, r1, r3
 8017d58:	4413      	add	r3, r2
 8017d5a:	4622      	mov	r2, r4
 8017d5c:	4641      	mov	r1, r8
 8017d5e:	fba2 1201 	umull	r1, r2, r2, r1
 8017d62:	f8c7 2694 	str.w	r2, [r7, #1684]	@ 0x694
 8017d66:	460a      	mov	r2, r1
 8017d68:	f8c7 2690 	str.w	r2, [r7, #1680]	@ 0x690
 8017d6c:	f8d7 2694 	ldr.w	r2, [r7, #1684]	@ 0x694
 8017d70:	4413      	add	r3, r2
 8017d72:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 8017d76:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d7e:	f507 61d2 	add.w	r1, r7, #1680	@ 0x690
 8017d82:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017d86:	4621      	mov	r1, r4
 8017d88:	1851      	adds	r1, r2, r1
 8017d8a:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 8017d8e:	4629      	mov	r1, r5
 8017d90:	eb43 0101 	adc.w	r1, r3, r1
 8017d94:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8017d98:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 8017d9c:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8017da0:	e9c2 3400 	strd	r3, r4, [r2]
  spint v8 = ((spint)t & mask);
 8017da4:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 8017da8:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8017dac:	4013      	ands	r3, r2
 8017dae:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
  t >>= 29;
 8017db2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dba:	f04f 0000 	mov.w	r0, #0
 8017dbe:	f04f 0100 	mov.w	r1, #0
 8017dc2:	0f50      	lsrs	r0, r2, #29
 8017dc4:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8017dc8:	0f59      	lsrs	r1, r3, #29
 8017dca:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8017dce:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[1] * a[8];
 8017dd2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017dd6:	3304      	adds	r3, #4
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	2200      	movs	r2, #0
 8017ddc:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 8017de0:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 8017de4:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017de8:	3320      	adds	r3, #32
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	2200      	movs	r2, #0
 8017dee:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 8017df2:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8017df6:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8017dfa:	462b      	mov	r3, r5
 8017dfc:	e9d7 89f4 	ldrd	r8, r9, [r7, #976]	@ 0x3d0
 8017e00:	4642      	mov	r2, r8
 8017e02:	fb02 f203 	mul.w	r2, r2, r3
 8017e06:	464b      	mov	r3, r9
 8017e08:	4621      	mov	r1, r4
 8017e0a:	fb01 f303 	mul.w	r3, r1, r3
 8017e0e:	4413      	add	r3, r2
 8017e10:	4622      	mov	r2, r4
 8017e12:	4641      	mov	r1, r8
 8017e14:	fba2 1201 	umull	r1, r2, r2, r1
 8017e18:	f8c7 25ac 	str.w	r2, [r7, #1452]	@ 0x5ac
 8017e1c:	460a      	mov	r2, r1
 8017e1e:	f8c7 25a8 	str.w	r2, [r7, #1448]	@ 0x5a8
 8017e22:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	@ 0x5ac
 8017e26:	4413      	add	r3, r2
 8017e28:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 8017e2c:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8017e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017e34:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017e38:	e9c2 3400 	strd	r3, r4, [r2]
 8017e3c:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017e40:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[2] * a[7];
 8017e44:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017e48:	3308      	adds	r3, #8
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 8017e52:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8017e56:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017e5a:	331c      	adds	r3, #28
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8017e64:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8017e68:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	@ 0x3c8
 8017e6c:	462b      	mov	r3, r5
 8017e6e:	e9d7 89f0 	ldrd	r8, r9, [r7, #960]	@ 0x3c0
 8017e72:	4642      	mov	r2, r8
 8017e74:	fb02 f203 	mul.w	r2, r2, r3
 8017e78:	464b      	mov	r3, r9
 8017e7a:	4621      	mov	r1, r4
 8017e7c:	fb01 f303 	mul.w	r3, r1, r3
 8017e80:	4413      	add	r3, r2
 8017e82:	4622      	mov	r2, r4
 8017e84:	4641      	mov	r1, r8
 8017e86:	fba2 1201 	umull	r1, r2, r2, r1
 8017e8a:	f8c7 268c 	str.w	r2, [r7, #1676]	@ 0x68c
 8017e8e:	460a      	mov	r2, r1
 8017e90:	f8c7 2688 	str.w	r2, [r7, #1672]	@ 0x688
 8017e94:	f8d7 268c 	ldr.w	r2, [r7, #1676]	@ 0x68c
 8017e98:	4413      	add	r3, r2
 8017e9a:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
 8017e9e:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ea6:	f507 61d1 	add.w	r1, r7, #1672	@ 0x688
 8017eaa:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017eae:	4621      	mov	r1, r4
 8017eb0:	1851      	adds	r1, r2, r1
 8017eb2:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8017eb6:	4629      	mov	r1, r5
 8017eb8:	eb43 0101 	adc.w	r1, r3, r1
 8017ebc:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 8017ec0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8017ec4:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017ec8:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[3] * a[6];
 8017ecc:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017ed0:	330c      	adds	r3, #12
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 8017eda:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 8017ede:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017ee2:	3318      	adds	r3, #24
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8017eec:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 8017ef0:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8017ef4:	462b      	mov	r3, r5
 8017ef6:	e9d7 89ec 	ldrd	r8, r9, [r7, #944]	@ 0x3b0
 8017efa:	4642      	mov	r2, r8
 8017efc:	fb02 f203 	mul.w	r2, r2, r3
 8017f00:	464b      	mov	r3, r9
 8017f02:	4621      	mov	r1, r4
 8017f04:	fb01 f303 	mul.w	r3, r1, r3
 8017f08:	4413      	add	r3, r2
 8017f0a:	4622      	mov	r2, r4
 8017f0c:	4641      	mov	r1, r8
 8017f0e:	fba2 1201 	umull	r1, r2, r2, r1
 8017f12:	f8c7 2684 	str.w	r2, [r7, #1668]	@ 0x684
 8017f16:	460a      	mov	r2, r1
 8017f18:	f8c7 2680 	str.w	r2, [r7, #1664]	@ 0x680
 8017f1c:	f8d7 2684 	ldr.w	r2, [r7, #1668]	@ 0x684
 8017f20:	4413      	add	r3, r2
 8017f22:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 8017f26:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f2e:	f507 61d0 	add.w	r1, r7, #1664	@ 0x680
 8017f32:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017f36:	4621      	mov	r1, r4
 8017f38:	1851      	adds	r1, r2, r1
 8017f3a:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8017f3e:	4629      	mov	r1, r5
 8017f40:	eb43 0101 	adc.w	r1, r3, r1
 8017f44:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8017f48:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8017f4c:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017f50:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[4] * a[5];
 8017f54:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017f58:	3310      	adds	r3, #16
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8017f62:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 8017f66:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8017f6a:	3314      	adds	r3, #20
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	2200      	movs	r2, #0
 8017f70:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8017f74:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8017f78:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 8017f7c:	462b      	mov	r3, r5
 8017f7e:	e9d7 89e8 	ldrd	r8, r9, [r7, #928]	@ 0x3a0
 8017f82:	4642      	mov	r2, r8
 8017f84:	fb02 f203 	mul.w	r2, r2, r3
 8017f88:	464b      	mov	r3, r9
 8017f8a:	4621      	mov	r1, r4
 8017f8c:	fb01 f303 	mul.w	r3, r1, r3
 8017f90:	4413      	add	r3, r2
 8017f92:	4622      	mov	r2, r4
 8017f94:	4641      	mov	r1, r8
 8017f96:	fba2 1201 	umull	r1, r2, r2, r1
 8017f9a:	f8c7 267c 	str.w	r2, [r7, #1660]	@ 0x67c
 8017f9e:	460a      	mov	r2, r1
 8017fa0:	f8c7 2678 	str.w	r2, [r7, #1656]	@ 0x678
 8017fa4:	f8d7 267c 	ldr.w	r2, [r7, #1660]	@ 0x67c
 8017fa8:	4413      	add	r3, r2
 8017faa:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 8017fae:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb6:	f507 61cf 	add.w	r1, r7, #1656	@ 0x678
 8017fba:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017fbe:	4621      	mov	r1, r4
 8017fc0:	1851      	adds	r1, r2, r1
 8017fc2:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8017fc6:	4629      	mov	r1, r5
 8017fc8:	eb43 0101 	adc.w	r1, r3, r1
 8017fcc:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8017fd0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8017fd4:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017fd8:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8017fdc:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8017fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe4:	1891      	adds	r1, r2, r2
 8017fe6:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8017fea:	415b      	adcs	r3, r3
 8017fec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8017ff0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8017ff4:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8017ff8:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8017ffc:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018004:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801800c:	1884      	adds	r4, r0, r2
 801800e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8018012:	eb41 0303 	adc.w	r3, r1, r3
 8018016:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801801a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 801801e:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018022:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v1 * p8;
 8018026:	f8d7 3740 	ldr.w	r3, [r7, #1856]	@ 0x740
 801802a:	2200      	movs	r2, #0
 801802c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8018030:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 8018034:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8018038:	2200      	movs	r2, #0
 801803a:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 801803e:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 8018042:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 8018046:	462b      	mov	r3, r5
 8018048:	e9d7 89e4 	ldrd	r8, r9, [r7, #912]	@ 0x390
 801804c:	4642      	mov	r2, r8
 801804e:	fb02 f203 	mul.w	r2, r2, r3
 8018052:	464b      	mov	r3, r9
 8018054:	4621      	mov	r1, r4
 8018056:	fb01 f303 	mul.w	r3, r1, r3
 801805a:	4413      	add	r3, r2
 801805c:	4622      	mov	r2, r4
 801805e:	4641      	mov	r1, r8
 8018060:	fba2 1201 	umull	r1, r2, r2, r1
 8018064:	f8c7 2674 	str.w	r2, [r7, #1652]	@ 0x674
 8018068:	460a      	mov	r2, r1
 801806a:	f8c7 2670 	str.w	r2, [r7, #1648]	@ 0x670
 801806e:	f8d7 2674 	ldr.w	r2, [r7, #1652]	@ 0x674
 8018072:	4413      	add	r3, r2
 8018074:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
 8018078:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 801807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018080:	f507 61ce 	add.w	r1, r7, #1648	@ 0x670
 8018084:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018088:	4621      	mov	r1, r4
 801808a:	1851      	adds	r1, r2, r1
 801808c:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 8018090:	4629      	mov	r1, r5
 8018092:	eb43 0101 	adc.w	r1, r3, r1
 8018096:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 801809a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 801809e:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80180a2:	e9c2 3400 	strd	r3, r4, [r2]
  c[0] = ((spint)t & mask);
 80180a6:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 80180aa:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80180ae:	401a      	ands	r2, r3
 80180b0:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 80180b4:	601a      	str	r2, [r3, #0]
  t >>= 29;
 80180b6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80180ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180be:	f04f 0000 	mov.w	r0, #0
 80180c2:	f04f 0100 	mov.w	r1, #0
 80180c6:	0f50      	lsrs	r0, r2, #29
 80180c8:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80180cc:	0f59      	lsrs	r1, r3, #29
 80180ce:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80180d2:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[2] * a[8];
 80180d6:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80180da:	3308      	adds	r3, #8
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	2200      	movs	r2, #0
 80180e0:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 80180e4:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 80180e8:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80180ec:	3320      	adds	r3, #32
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	2200      	movs	r2, #0
 80180f2:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80180f6:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 80180fa:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 80180fe:	462b      	mov	r3, r5
 8018100:	e9d7 89e0 	ldrd	r8, r9, [r7, #896]	@ 0x380
 8018104:	4642      	mov	r2, r8
 8018106:	fb02 f203 	mul.w	r2, r2, r3
 801810a:	464b      	mov	r3, r9
 801810c:	4621      	mov	r1, r4
 801810e:	fb01 f303 	mul.w	r3, r1, r3
 8018112:	4413      	add	r3, r2
 8018114:	4622      	mov	r2, r4
 8018116:	4641      	mov	r1, r8
 8018118:	fba2 1201 	umull	r1, r2, r2, r1
 801811c:	f8c7 25a4 	str.w	r2, [r7, #1444]	@ 0x5a4
 8018120:	460a      	mov	r2, r1
 8018122:	f8c7 25a0 	str.w	r2, [r7, #1440]	@ 0x5a0
 8018126:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	@ 0x5a4
 801812a:	4413      	add	r3, r2
 801812c:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8018130:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8018134:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018138:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801813c:	e9c2 3400 	strd	r3, r4, [r2]
 8018140:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018144:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[3] * a[7];
 8018148:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801814c:	330c      	adds	r3, #12
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	2200      	movs	r2, #0
 8018152:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8018156:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 801815a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801815e:	331c      	adds	r3, #28
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	2200      	movs	r2, #0
 8018164:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 8018168:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 801816c:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8018170:	462b      	mov	r3, r5
 8018172:	e9d7 89dc 	ldrd	r8, r9, [r7, #880]	@ 0x370
 8018176:	4642      	mov	r2, r8
 8018178:	fb02 f203 	mul.w	r2, r2, r3
 801817c:	464b      	mov	r3, r9
 801817e:	4621      	mov	r1, r4
 8018180:	fb01 f303 	mul.w	r3, r1, r3
 8018184:	4413      	add	r3, r2
 8018186:	4622      	mov	r2, r4
 8018188:	4641      	mov	r1, r8
 801818a:	fba2 1201 	umull	r1, r2, r2, r1
 801818e:	f8c7 266c 	str.w	r2, [r7, #1644]	@ 0x66c
 8018192:	460a      	mov	r2, r1
 8018194:	f8c7 2668 	str.w	r2, [r7, #1640]	@ 0x668
 8018198:	f8d7 266c 	ldr.w	r2, [r7, #1644]	@ 0x66c
 801819c:	4413      	add	r3, r2
 801819e:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 80181a2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80181a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181aa:	f507 61cd 	add.w	r1, r7, #1640	@ 0x668
 80181ae:	e9d1 4500 	ldrd	r4, r5, [r1]
 80181b2:	4621      	mov	r1, r4
 80181b4:	1851      	adds	r1, r2, r1
 80181b6:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80181ba:	4629      	mov	r1, r5
 80181bc:	eb43 0101 	adc.w	r1, r3, r1
 80181c0:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80181c4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80181c8:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80181cc:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[4] * a[6];
 80181d0:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80181d4:	3310      	adds	r3, #16
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	2200      	movs	r2, #0
 80181da:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 80181de:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 80181e2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80181e6:	3318      	adds	r3, #24
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	2200      	movs	r2, #0
 80181ec:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 80181f0:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 80181f4:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 80181f8:	462b      	mov	r3, r5
 80181fa:	e9d7 89d8 	ldrd	r8, r9, [r7, #864]	@ 0x360
 80181fe:	4642      	mov	r2, r8
 8018200:	fb02 f203 	mul.w	r2, r2, r3
 8018204:	464b      	mov	r3, r9
 8018206:	4621      	mov	r1, r4
 8018208:	fb01 f303 	mul.w	r3, r1, r3
 801820c:	4413      	add	r3, r2
 801820e:	4622      	mov	r2, r4
 8018210:	4641      	mov	r1, r8
 8018212:	fba2 1201 	umull	r1, r2, r2, r1
 8018216:	f8c7 2664 	str.w	r2, [r7, #1636]	@ 0x664
 801821a:	460a      	mov	r2, r1
 801821c:	f8c7 2660 	str.w	r2, [r7, #1632]	@ 0x660
 8018220:	f8d7 2664 	ldr.w	r2, [r7, #1636]	@ 0x664
 8018224:	4413      	add	r3, r2
 8018226:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 801822a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018232:	f507 61cc 	add.w	r1, r7, #1632	@ 0x660
 8018236:	e9d1 4500 	ldrd	r4, r5, [r1]
 801823a:	4621      	mov	r1, r4
 801823c:	1851      	adds	r1, r2, r1
 801823e:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8018242:	4629      	mov	r1, r5
 8018244:	eb43 0101 	adc.w	r1, r3, r1
 8018248:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 801824c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8018250:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018254:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8018258:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018260:	1891      	adds	r1, r2, r2
 8018262:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8018266:	415b      	adcs	r3, r3
 8018268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801826c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8018270:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018274:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[5] * a[5];
 8018278:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801827c:	3314      	adds	r3, #20
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	2200      	movs	r2, #0
 8018282:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8018286:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 801828a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801828e:	3314      	adds	r3, #20
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	2200      	movs	r2, #0
 8018294:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8018298:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 801829c:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 80182a0:	462b      	mov	r3, r5
 80182a2:	e9d7 89d4 	ldrd	r8, r9, [r7, #848]	@ 0x350
 80182a6:	4642      	mov	r2, r8
 80182a8:	fb02 f203 	mul.w	r2, r2, r3
 80182ac:	464b      	mov	r3, r9
 80182ae:	4621      	mov	r1, r4
 80182b0:	fb01 f303 	mul.w	r3, r1, r3
 80182b4:	4413      	add	r3, r2
 80182b6:	4622      	mov	r2, r4
 80182b8:	4641      	mov	r1, r8
 80182ba:	fba2 1201 	umull	r1, r2, r2, r1
 80182be:	f8c7 265c 	str.w	r2, [r7, #1628]	@ 0x65c
 80182c2:	460a      	mov	r2, r1
 80182c4:	f8c7 2658 	str.w	r2, [r7, #1624]	@ 0x658
 80182c8:	f8d7 265c 	ldr.w	r2, [r7, #1628]	@ 0x65c
 80182cc:	4413      	add	r3, r2
 80182ce:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 80182d2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80182d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182da:	f507 61cb 	add.w	r1, r7, #1624	@ 0x658
 80182de:	e9d1 4500 	ldrd	r4, r5, [r1]
 80182e2:	4621      	mov	r1, r4
 80182e4:	1851      	adds	r1, r2, r1
 80182e6:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80182ea:	4629      	mov	r1, r5
 80182ec:	eb43 0101 	adc.w	r1, r3, r1
 80182f0:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 80182f4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80182f8:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80182fc:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8018300:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018308:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018310:	1884      	adds	r4, r0, r2
 8018312:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 8018316:	eb41 0303 	adc.w	r3, r1, r3
 801831a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801831e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8018322:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018326:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v2 * p8;
 801832a:	f8d7 373c 	ldr.w	r3, [r7, #1852]	@ 0x73c
 801832e:	2200      	movs	r2, #0
 8018330:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8018334:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 8018338:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 801833c:	2200      	movs	r2, #0
 801833e:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8018342:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8018346:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 801834a:	462b      	mov	r3, r5
 801834c:	e9d7 89d0 	ldrd	r8, r9, [r7, #832]	@ 0x340
 8018350:	4642      	mov	r2, r8
 8018352:	fb02 f203 	mul.w	r2, r2, r3
 8018356:	464b      	mov	r3, r9
 8018358:	4621      	mov	r1, r4
 801835a:	fb01 f303 	mul.w	r3, r1, r3
 801835e:	4413      	add	r3, r2
 8018360:	4622      	mov	r2, r4
 8018362:	4641      	mov	r1, r8
 8018364:	fba2 1201 	umull	r1, r2, r2, r1
 8018368:	f8c7 2654 	str.w	r2, [r7, #1620]	@ 0x654
 801836c:	460a      	mov	r2, r1
 801836e:	f8c7 2650 	str.w	r2, [r7, #1616]	@ 0x650
 8018372:	f8d7 2654 	ldr.w	r2, [r7, #1620]	@ 0x654
 8018376:	4413      	add	r3, r2
 8018378:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 801837c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018384:	f507 61ca 	add.w	r1, r7, #1616	@ 0x650
 8018388:	e9d1 4500 	ldrd	r4, r5, [r1]
 801838c:	4621      	mov	r1, r4
 801838e:	1851      	adds	r1, r2, r1
 8018390:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8018394:	4629      	mov	r1, r5
 8018396:	eb43 0101 	adc.w	r1, r3, r1
 801839a:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 801839e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80183a2:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80183a6:	e9c2 3400 	strd	r3, r4, [r2]
  c[1] = ((spint)t & mask);
 80183aa:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 80183ae:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 80183b2:	1d1a      	adds	r2, r3, #4
 80183b4:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80183b8:	400b      	ands	r3, r1
 80183ba:	6013      	str	r3, [r2, #0]
  t >>= 29;
 80183bc:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80183c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c4:	f04f 0000 	mov.w	r0, #0
 80183c8:	f04f 0100 	mov.w	r1, #0
 80183cc:	0f50      	lsrs	r0, r2, #29
 80183ce:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80183d2:	0f59      	lsrs	r1, r3, #29
 80183d4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80183d8:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[3] * a[8];
 80183dc:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80183e0:	330c      	adds	r3, #12
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2200      	movs	r2, #0
 80183e6:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80183ea:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 80183ee:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80183f2:	3320      	adds	r3, #32
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	2200      	movs	r2, #0
 80183f8:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80183fc:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8018400:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8018404:	462b      	mov	r3, r5
 8018406:	e9d7 89cc 	ldrd	r8, r9, [r7, #816]	@ 0x330
 801840a:	4642      	mov	r2, r8
 801840c:	fb02 f203 	mul.w	r2, r2, r3
 8018410:	464b      	mov	r3, r9
 8018412:	4621      	mov	r1, r4
 8018414:	fb01 f303 	mul.w	r3, r1, r3
 8018418:	4413      	add	r3, r2
 801841a:	4622      	mov	r2, r4
 801841c:	4641      	mov	r1, r8
 801841e:	fba2 1201 	umull	r1, r2, r2, r1
 8018422:	f8c7 259c 	str.w	r2, [r7, #1436]	@ 0x59c
 8018426:	460a      	mov	r2, r1
 8018428:	f8c7 2598 	str.w	r2, [r7, #1432]	@ 0x598
 801842c:	f8d7 259c 	ldr.w	r2, [r7, #1436]	@ 0x59c
 8018430:	4413      	add	r3, r2
 8018432:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 8018436:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 801843a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801843e:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018442:	e9c2 3400 	strd	r3, r4, [r2]
 8018446:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801844a:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[4] * a[7];
 801844e:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018452:	3310      	adds	r3, #16
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2200      	movs	r2, #0
 8018458:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 801845c:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8018460:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018464:	331c      	adds	r3, #28
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2200      	movs	r2, #0
 801846a:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 801846e:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 8018472:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8018476:	462b      	mov	r3, r5
 8018478:	e9d7 89c8 	ldrd	r8, r9, [r7, #800]	@ 0x320
 801847c:	4642      	mov	r2, r8
 801847e:	fb02 f203 	mul.w	r2, r2, r3
 8018482:	464b      	mov	r3, r9
 8018484:	4621      	mov	r1, r4
 8018486:	fb01 f303 	mul.w	r3, r1, r3
 801848a:	4413      	add	r3, r2
 801848c:	4622      	mov	r2, r4
 801848e:	4641      	mov	r1, r8
 8018490:	fba2 1201 	umull	r1, r2, r2, r1
 8018494:	f8c7 264c 	str.w	r2, [r7, #1612]	@ 0x64c
 8018498:	460a      	mov	r2, r1
 801849a:	f8c7 2648 	str.w	r2, [r7, #1608]	@ 0x648
 801849e:	f8d7 264c 	ldr.w	r2, [r7, #1612]	@ 0x64c
 80184a2:	4413      	add	r3, r2
 80184a4:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 80184a8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80184ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184b0:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 80184b4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80184b8:	4621      	mov	r1, r4
 80184ba:	1851      	adds	r1, r2, r1
 80184bc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80184c0:	4629      	mov	r1, r5
 80184c2:	eb43 0101 	adc.w	r1, r3, r1
 80184c6:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
 80184ca:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 80184ce:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80184d2:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[5] * a[6];
 80184d6:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80184da:	3314      	adds	r3, #20
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	2200      	movs	r2, #0
 80184e0:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 80184e4:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 80184e8:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80184ec:	3318      	adds	r3, #24
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	2200      	movs	r2, #0
 80184f2:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 80184f6:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 80184fa:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 80184fe:	462b      	mov	r3, r5
 8018500:	e9d7 89c4 	ldrd	r8, r9, [r7, #784]	@ 0x310
 8018504:	4642      	mov	r2, r8
 8018506:	fb02 f203 	mul.w	r2, r2, r3
 801850a:	464b      	mov	r3, r9
 801850c:	4621      	mov	r1, r4
 801850e:	fb01 f303 	mul.w	r3, r1, r3
 8018512:	4413      	add	r3, r2
 8018514:	4622      	mov	r2, r4
 8018516:	4641      	mov	r1, r8
 8018518:	fba2 1201 	umull	r1, r2, r2, r1
 801851c:	f8c7 2644 	str.w	r2, [r7, #1604]	@ 0x644
 8018520:	460a      	mov	r2, r1
 8018522:	f8c7 2640 	str.w	r2, [r7, #1600]	@ 0x640
 8018526:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 801852a:	4413      	add	r3, r2
 801852c:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8018530:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018538:	f507 61c8 	add.w	r1, r7, #1600	@ 0x640
 801853c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018540:	4621      	mov	r1, r4
 8018542:	1851      	adds	r1, r2, r1
 8018544:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8018548:	4629      	mov	r1, r5
 801854a:	eb43 0101 	adc.w	r1, r3, r1
 801854e:	f8c7 10ac 	str.w	r1, [r7, #172]	@ 0xac
 8018552:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8018556:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801855a:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 801855e:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018566:	1891      	adds	r1, r2, r2
 8018568:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 801856c:	415b      	adcs	r3, r3
 801856e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8018572:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8018576:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801857a:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 801857e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018586:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858e:	1884      	adds	r4, r0, r2
 8018590:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8018594:	eb41 0303 	adc.w	r3, r1, r3
 8018598:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801859c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80185a0:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80185a4:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v3 * p8;
 80185a8:	f8d7 3738 	ldr.w	r3, [r7, #1848]	@ 0x738
 80185ac:	2200      	movs	r2, #0
 80185ae:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 80185b2:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80185b6:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 80185ba:	2200      	movs	r2, #0
 80185bc:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 80185c0:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 80185c4:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	@ 0x308
 80185c8:	462b      	mov	r3, r5
 80185ca:	e9d7 89c0 	ldrd	r8, r9, [r7, #768]	@ 0x300
 80185ce:	4642      	mov	r2, r8
 80185d0:	fb02 f203 	mul.w	r2, r2, r3
 80185d4:	464b      	mov	r3, r9
 80185d6:	4621      	mov	r1, r4
 80185d8:	fb01 f303 	mul.w	r3, r1, r3
 80185dc:	4413      	add	r3, r2
 80185de:	4622      	mov	r2, r4
 80185e0:	4641      	mov	r1, r8
 80185e2:	fba2 1201 	umull	r1, r2, r2, r1
 80185e6:	f8c7 263c 	str.w	r2, [r7, #1596]	@ 0x63c
 80185ea:	460a      	mov	r2, r1
 80185ec:	f8c7 2638 	str.w	r2, [r7, #1592]	@ 0x638
 80185f0:	f8d7 263c 	ldr.w	r2, [r7, #1596]	@ 0x63c
 80185f4:	4413      	add	r3, r2
 80185f6:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 80185fa:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80185fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018602:	f507 61c7 	add.w	r1, r7, #1592	@ 0x638
 8018606:	e9d1 4500 	ldrd	r4, r5, [r1]
 801860a:	4621      	mov	r1, r4
 801860c:	1851      	adds	r1, r2, r1
 801860e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8018612:	4629      	mov	r1, r5
 8018614:	eb43 0101 	adc.w	r1, r3, r1
 8018618:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 801861c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8018620:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018624:	e9c2 3400 	strd	r3, r4, [r2]
  c[2] = ((spint)t & mask);
 8018628:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 801862c:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8018630:	f103 0208 	add.w	r2, r3, #8
 8018634:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8018638:	400b      	ands	r3, r1
 801863a:	6013      	str	r3, [r2, #0]
  t >>= 29;
 801863c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018644:	f04f 0000 	mov.w	r0, #0
 8018648:	f04f 0100 	mov.w	r1, #0
 801864c:	0f50      	lsrs	r0, r2, #29
 801864e:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8018652:	0f59      	lsrs	r1, r3, #29
 8018654:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018658:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[4] * a[8];
 801865c:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018660:	3310      	adds	r3, #16
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2200      	movs	r2, #0
 8018666:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 801866a:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801866e:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018672:	3320      	adds	r3, #32
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	2200      	movs	r2, #0
 8018678:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 801867c:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8018680:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8018684:	462b      	mov	r3, r5
 8018686:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 801868a:	4642      	mov	r2, r8
 801868c:	fb02 f203 	mul.w	r2, r2, r3
 8018690:	464b      	mov	r3, r9
 8018692:	4621      	mov	r1, r4
 8018694:	fb01 f303 	mul.w	r3, r1, r3
 8018698:	4413      	add	r3, r2
 801869a:	4622      	mov	r2, r4
 801869c:	4641      	mov	r1, r8
 801869e:	fba2 1201 	umull	r1, r2, r2, r1
 80186a2:	f8c7 2594 	str.w	r2, [r7, #1428]	@ 0x594
 80186a6:	460a      	mov	r2, r1
 80186a8:	f8c7 2590 	str.w	r2, [r7, #1424]	@ 0x590
 80186ac:	f8d7 2594 	ldr.w	r2, [r7, #1428]	@ 0x594
 80186b0:	4413      	add	r3, r2
 80186b2:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 80186b6:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 80186ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80186be:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80186c2:	e9c2 3400 	strd	r3, r4, [r2]
 80186c6:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80186ca:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[5] * a[7];
 80186ce:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80186d2:	3314      	adds	r3, #20
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	2200      	movs	r2, #0
 80186d8:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80186dc:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 80186e0:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80186e4:	331c      	adds	r3, #28
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	2200      	movs	r2, #0
 80186ea:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80186ee:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 80186f2:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 80186f6:	462b      	mov	r3, r5
 80186f8:	e9d7 89b8 	ldrd	r8, r9, [r7, #736]	@ 0x2e0
 80186fc:	4642      	mov	r2, r8
 80186fe:	fb02 f203 	mul.w	r2, r2, r3
 8018702:	464b      	mov	r3, r9
 8018704:	4621      	mov	r1, r4
 8018706:	fb01 f303 	mul.w	r3, r1, r3
 801870a:	4413      	add	r3, r2
 801870c:	4622      	mov	r2, r4
 801870e:	4641      	mov	r1, r8
 8018710:	fba2 1201 	umull	r1, r2, r2, r1
 8018714:	f8c7 2634 	str.w	r2, [r7, #1588]	@ 0x634
 8018718:	460a      	mov	r2, r1
 801871a:	f8c7 2630 	str.w	r2, [r7, #1584]	@ 0x630
 801871e:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8018722:	4413      	add	r3, r2
 8018724:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8018728:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018730:	f507 61c6 	add.w	r1, r7, #1584	@ 0x630
 8018734:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018738:	4621      	mov	r1, r4
 801873a:	1851      	adds	r1, r2, r1
 801873c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8018740:	4629      	mov	r1, r5
 8018742:	eb43 0101 	adc.w	r1, r3, r1
 8018746:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 801874a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 801874e:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018752:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8018756:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 801875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801875e:	1891      	adds	r1, r2, r2
 8018760:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8018764:	415b      	adcs	r3, r3
 8018766:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801876a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 801876e:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018772:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[6] * a[6];
 8018776:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801877a:	3318      	adds	r3, #24
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	2200      	movs	r2, #0
 8018780:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8018784:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8018788:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 801878c:	3318      	adds	r3, #24
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	2200      	movs	r2, #0
 8018792:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8018796:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 801879a:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	@ 0x2d8
 801879e:	462b      	mov	r3, r5
 80187a0:	e9d7 89b4 	ldrd	r8, r9, [r7, #720]	@ 0x2d0
 80187a4:	4642      	mov	r2, r8
 80187a6:	fb02 f203 	mul.w	r2, r2, r3
 80187aa:	464b      	mov	r3, r9
 80187ac:	4621      	mov	r1, r4
 80187ae:	fb01 f303 	mul.w	r3, r1, r3
 80187b2:	4413      	add	r3, r2
 80187b4:	4622      	mov	r2, r4
 80187b6:	4641      	mov	r1, r8
 80187b8:	fba2 1201 	umull	r1, r2, r2, r1
 80187bc:	f8c7 262c 	str.w	r2, [r7, #1580]	@ 0x62c
 80187c0:	460a      	mov	r2, r1
 80187c2:	f8c7 2628 	str.w	r2, [r7, #1576]	@ 0x628
 80187c6:	f8d7 262c 	ldr.w	r2, [r7, #1580]	@ 0x62c
 80187ca:	4413      	add	r3, r2
 80187cc:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 80187d0:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80187d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187d8:	f507 61c5 	add.w	r1, r7, #1576	@ 0x628
 80187dc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80187e0:	4621      	mov	r1, r4
 80187e2:	1851      	adds	r1, r2, r1
 80187e4:	67b9      	str	r1, [r7, #120]	@ 0x78
 80187e6:	4629      	mov	r1, r5
 80187e8:	eb43 0101 	adc.w	r1, r3, r1
 80187ec:	67f9      	str	r1, [r7, #124]	@ 0x7c
 80187ee:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80187f2:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80187f6:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 80187fa:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80187fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018802:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801880a:	1884      	adds	r4, r0, r2
 801880c:	673c      	str	r4, [r7, #112]	@ 0x70
 801880e:	eb41 0303 	adc.w	r3, r1, r3
 8018812:	677b      	str	r3, [r7, #116]	@ 0x74
 8018814:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8018818:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 801881c:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v4 * p8;
 8018820:	f8d7 3734 	ldr.w	r3, [r7, #1844]	@ 0x734
 8018824:	2200      	movs	r2, #0
 8018826:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 801882a:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 801882e:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8018832:	2200      	movs	r2, #0
 8018834:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8018838:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 801883c:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 8018840:	462b      	mov	r3, r5
 8018842:	e9d7 89b0 	ldrd	r8, r9, [r7, #704]	@ 0x2c0
 8018846:	4642      	mov	r2, r8
 8018848:	fb02 f203 	mul.w	r2, r2, r3
 801884c:	464b      	mov	r3, r9
 801884e:	4621      	mov	r1, r4
 8018850:	fb01 f303 	mul.w	r3, r1, r3
 8018854:	4413      	add	r3, r2
 8018856:	4622      	mov	r2, r4
 8018858:	4641      	mov	r1, r8
 801885a:	fba2 1201 	umull	r1, r2, r2, r1
 801885e:	f8c7 2624 	str.w	r2, [r7, #1572]	@ 0x624
 8018862:	460a      	mov	r2, r1
 8018864:	f8c7 2620 	str.w	r2, [r7, #1568]	@ 0x620
 8018868:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 801886c:	4413      	add	r3, r2
 801886e:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8018872:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801887a:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 801887e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018882:	4621      	mov	r1, r4
 8018884:	1851      	adds	r1, r2, r1
 8018886:	66b9      	str	r1, [r7, #104]	@ 0x68
 8018888:	4629      	mov	r1, r5
 801888a:	eb43 0101 	adc.w	r1, r3, r1
 801888e:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8018890:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8018894:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018898:	e9c2 3400 	strd	r3, r4, [r2]
  c[3] = ((spint)t & mask);
 801889c:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 80188a0:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 80188a4:	f103 020c 	add.w	r2, r3, #12
 80188a8:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80188ac:	400b      	ands	r3, r1
 80188ae:	6013      	str	r3, [r2, #0]
  t >>= 29;
 80188b0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80188b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b8:	f04f 0000 	mov.w	r0, #0
 80188bc:	f04f 0100 	mov.w	r1, #0
 80188c0:	0f50      	lsrs	r0, r2, #29
 80188c2:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80188c6:	0f59      	lsrs	r1, r3, #29
 80188c8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80188cc:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[5] * a[8];
 80188d0:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80188d4:	3314      	adds	r3, #20
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	2200      	movs	r2, #0
 80188da:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 80188de:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 80188e2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 80188e6:	3320      	adds	r3, #32
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	2200      	movs	r2, #0
 80188ec:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80188f0:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 80188f4:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	@ 0x2b8
 80188f8:	462b      	mov	r3, r5
 80188fa:	e9d7 89ac 	ldrd	r8, r9, [r7, #688]	@ 0x2b0
 80188fe:	4642      	mov	r2, r8
 8018900:	fb02 f203 	mul.w	r2, r2, r3
 8018904:	464b      	mov	r3, r9
 8018906:	4621      	mov	r1, r4
 8018908:	fb01 f303 	mul.w	r3, r1, r3
 801890c:	4413      	add	r3, r2
 801890e:	4622      	mov	r2, r4
 8018910:	4641      	mov	r1, r8
 8018912:	fba2 1201 	umull	r1, r2, r2, r1
 8018916:	f8c7 258c 	str.w	r2, [r7, #1420]	@ 0x58c
 801891a:	460a      	mov	r2, r1
 801891c:	f8c7 2588 	str.w	r2, [r7, #1416]	@ 0x588
 8018920:	f8d7 258c 	ldr.w	r2, [r7, #1420]	@ 0x58c
 8018924:	4413      	add	r3, r2
 8018926:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 801892a:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 801892e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018932:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018936:	e9c2 3400 	strd	r3, r4, [r2]
 801893a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 801893e:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[6] * a[7];
 8018942:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018946:	3318      	adds	r3, #24
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	2200      	movs	r2, #0
 801894c:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8018950:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8018954:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018958:	331c      	adds	r3, #28
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	2200      	movs	r2, #0
 801895e:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8018962:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 8018966:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	@ 0x2a8
 801896a:	462b      	mov	r3, r5
 801896c:	e9d7 89a8 	ldrd	r8, r9, [r7, #672]	@ 0x2a0
 8018970:	4642      	mov	r2, r8
 8018972:	fb02 f203 	mul.w	r2, r2, r3
 8018976:	464b      	mov	r3, r9
 8018978:	4621      	mov	r1, r4
 801897a:	fb01 f303 	mul.w	r3, r1, r3
 801897e:	4413      	add	r3, r2
 8018980:	4622      	mov	r2, r4
 8018982:	4641      	mov	r1, r8
 8018984:	fba2 1201 	umull	r1, r2, r2, r1
 8018988:	f8c7 261c 	str.w	r2, [r7, #1564]	@ 0x61c
 801898c:	460a      	mov	r2, r1
 801898e:	f8c7 2618 	str.w	r2, [r7, #1560]	@ 0x618
 8018992:	f8d7 261c 	ldr.w	r2, [r7, #1564]	@ 0x61c
 8018996:	4413      	add	r3, r2
 8018998:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 801899c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80189a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a4:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 80189a8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80189ac:	4621      	mov	r1, r4
 80189ae:	1851      	adds	r1, r2, r1
 80189b0:	6639      	str	r1, [r7, #96]	@ 0x60
 80189b2:	4629      	mov	r1, r5
 80189b4:	eb43 0101 	adc.w	r1, r3, r1
 80189b8:	6679      	str	r1, [r7, #100]	@ 0x64
 80189ba:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80189be:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80189c2:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 80189c6:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80189ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ce:	1891      	adds	r1, r2, r2
 80189d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80189d2:	415b      	adcs	r3, r3
 80189d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80189d6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80189da:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80189de:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 80189e2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80189e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80189ea:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80189ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189f2:	1884      	adds	r4, r0, r2
 80189f4:	653c      	str	r4, [r7, #80]	@ 0x50
 80189f6:	eb41 0303 	adc.w	r3, r1, r3
 80189fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80189fc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8018a00:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018a04:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v5 * p8;
 8018a08:	f8d7 3730 	ldr.w	r3, [r7, #1840]	@ 0x730
 8018a0c:	2200      	movs	r2, #0
 8018a0e:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8018a12:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8018a16:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8018a20:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8018a24:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 8018a28:	462b      	mov	r3, r5
 8018a2a:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 8018a2e:	4642      	mov	r2, r8
 8018a30:	fb02 f203 	mul.w	r2, r2, r3
 8018a34:	464b      	mov	r3, r9
 8018a36:	4621      	mov	r1, r4
 8018a38:	fb01 f303 	mul.w	r3, r1, r3
 8018a3c:	4413      	add	r3, r2
 8018a3e:	4622      	mov	r2, r4
 8018a40:	4641      	mov	r1, r8
 8018a42:	fba2 1201 	umull	r1, r2, r2, r1
 8018a46:	f8c7 2614 	str.w	r2, [r7, #1556]	@ 0x614
 8018a4a:	460a      	mov	r2, r1
 8018a4c:	f8c7 2610 	str.w	r2, [r7, #1552]	@ 0x610
 8018a50:	f8d7 2614 	ldr.w	r2, [r7, #1556]	@ 0x614
 8018a54:	4413      	add	r3, r2
 8018a56:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8018a5a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a62:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 8018a66:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018a6a:	4621      	mov	r1, r4
 8018a6c:	1851      	adds	r1, r2, r1
 8018a6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8018a70:	4629      	mov	r1, r5
 8018a72:	eb43 0101 	adc.w	r1, r3, r1
 8018a76:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8018a78:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8018a7c:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018a80:	e9c2 3400 	strd	r3, r4, [r2]
  c[4] = ((spint)t & mask);
 8018a84:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 8018a88:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8018a8c:	f103 0210 	add.w	r2, r3, #16
 8018a90:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8018a94:	400b      	ands	r3, r1
 8018a96:	6013      	str	r3, [r2, #0]
  t >>= 29;
 8018a98:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aa0:	f04f 0000 	mov.w	r0, #0
 8018aa4:	f04f 0100 	mov.w	r1, #0
 8018aa8:	0f50      	lsrs	r0, r2, #29
 8018aaa:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8018aae:	0f59      	lsrs	r1, r3, #29
 8018ab0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018ab4:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[6] * a[8];
 8018ab8:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018abc:	3318      	adds	r3, #24
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8018ac6:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8018aca:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018ace:	3320      	adds	r3, #32
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8018ad8:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8018adc:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 8018ae0:	462b      	mov	r3, r5
 8018ae2:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 8018ae6:	4642      	mov	r2, r8
 8018ae8:	fb02 f203 	mul.w	r2, r2, r3
 8018aec:	464b      	mov	r3, r9
 8018aee:	4621      	mov	r1, r4
 8018af0:	fb01 f303 	mul.w	r3, r1, r3
 8018af4:	4413      	add	r3, r2
 8018af6:	4622      	mov	r2, r4
 8018af8:	4641      	mov	r1, r8
 8018afa:	fba2 1201 	umull	r1, r2, r2, r1
 8018afe:	f8c7 2584 	str.w	r2, [r7, #1412]	@ 0x584
 8018b02:	460a      	mov	r2, r1
 8018b04:	f8c7 2580 	str.w	r2, [r7, #1408]	@ 0x580
 8018b08:	f8d7 2584 	ldr.w	r2, [r7, #1412]	@ 0x584
 8018b0c:	4413      	add	r3, r2
 8018b0e:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 8018b12:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 8018b16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018b1a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018b1e:	e9c2 3400 	strd	r3, r4, [r2]
 8018b22:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018b26:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8018b2a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b32:	1891      	adds	r1, r2, r2
 8018b34:	6439      	str	r1, [r7, #64]	@ 0x40
 8018b36:	415b      	adcs	r3, r3
 8018b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8018b3a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8018b3e:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018b42:	e9c2 3400 	strd	r3, r4, [r2]
  tot += (udpint)a[7] * a[7];
 8018b46:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018b4a:	331c      	adds	r3, #28
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	2200      	movs	r2, #0
 8018b50:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8018b54:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8018b58:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018b5c:	331c      	adds	r3, #28
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	2200      	movs	r2, #0
 8018b62:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8018b66:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8018b6a:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 8018b6e:	462b      	mov	r3, r5
 8018b70:	e9d7 899c 	ldrd	r8, r9, [r7, #624]	@ 0x270
 8018b74:	4642      	mov	r2, r8
 8018b76:	fb02 f203 	mul.w	r2, r2, r3
 8018b7a:	464b      	mov	r3, r9
 8018b7c:	4621      	mov	r1, r4
 8018b7e:	fb01 f303 	mul.w	r3, r1, r3
 8018b82:	4413      	add	r3, r2
 8018b84:	4622      	mov	r2, r4
 8018b86:	4641      	mov	r1, r8
 8018b88:	fba2 1201 	umull	r1, r2, r2, r1
 8018b8c:	f8c7 260c 	str.w	r2, [r7, #1548]	@ 0x60c
 8018b90:	460a      	mov	r2, r1
 8018b92:	f8c7 2608 	str.w	r2, [r7, #1544]	@ 0x608
 8018b96:	f8d7 260c 	ldr.w	r2, [r7, #1548]	@ 0x60c
 8018b9a:	4413      	add	r3, r2
 8018b9c:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 8018ba0:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ba8:	f507 61c1 	add.w	r1, r7, #1544	@ 0x608
 8018bac:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018bb0:	4621      	mov	r1, r4
 8018bb2:	1851      	adds	r1, r2, r1
 8018bb4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	eb43 0101 	adc.w	r1, r3, r1
 8018bbc:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8018bbe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8018bc2:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018bc6:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8018bca:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018bce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018bd2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bda:	1884      	adds	r4, r0, r2
 8018bdc:	633c      	str	r4, [r7, #48]	@ 0x30
 8018bde:	eb41 0303 	adc.w	r3, r1, r3
 8018be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8018be4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8018be8:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018bec:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v6 * p8;
 8018bf0:	f8d7 372c 	ldr.w	r3, [r7, #1836]	@ 0x72c
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8018bfa:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8018bfe:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8018c02:	2200      	movs	r2, #0
 8018c04:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8018c08:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8018c0c:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 8018c10:	462b      	mov	r3, r5
 8018c12:	e9d7 8998 	ldrd	r8, r9, [r7, #608]	@ 0x260
 8018c16:	4642      	mov	r2, r8
 8018c18:	fb02 f203 	mul.w	r2, r2, r3
 8018c1c:	464b      	mov	r3, r9
 8018c1e:	4621      	mov	r1, r4
 8018c20:	fb01 f303 	mul.w	r3, r1, r3
 8018c24:	4413      	add	r3, r2
 8018c26:	4622      	mov	r2, r4
 8018c28:	4641      	mov	r1, r8
 8018c2a:	fba2 1201 	umull	r1, r2, r2, r1
 8018c2e:	f8c7 2604 	str.w	r2, [r7, #1540]	@ 0x604
 8018c32:	460a      	mov	r2, r1
 8018c34:	f8c7 2600 	str.w	r2, [r7, #1536]	@ 0x600
 8018c38:	f8d7 2604 	ldr.w	r2, [r7, #1540]	@ 0x604
 8018c3c:	4413      	add	r3, r2
 8018c3e:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8018c42:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c4a:	f507 61c0 	add.w	r1, r7, #1536	@ 0x600
 8018c4e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018c52:	4621      	mov	r1, r4
 8018c54:	1851      	adds	r1, r2, r1
 8018c56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8018c58:	4629      	mov	r1, r5
 8018c5a:	eb43 0101 	adc.w	r1, r3, r1
 8018c5e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8018c60:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8018c64:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018c68:	e9c2 3400 	strd	r3, r4, [r2]
  c[5] = ((spint)t & mask);
 8018c6c:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 8018c70:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8018c74:	f103 0214 	add.w	r2, r3, #20
 8018c78:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8018c7c:	400b      	ands	r3, r1
 8018c7e:	6013      	str	r3, [r2, #0]
  t >>= 29;
 8018c80:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c88:	f04f 0000 	mov.w	r0, #0
 8018c8c:	f04f 0100 	mov.w	r1, #0
 8018c90:	0f50      	lsrs	r0, r2, #29
 8018c92:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8018c96:	0f59      	lsrs	r1, r3, #29
 8018c98:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018c9c:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[7] * a[8];
 8018ca0:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018ca4:	331c      	adds	r3, #28
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	2200      	movs	r2, #0
 8018caa:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8018cae:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8018cb2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018cb6:	3320      	adds	r3, #32
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2200      	movs	r2, #0
 8018cbc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8018cc0:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8018cc4:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8018cc8:	462b      	mov	r3, r5
 8018cca:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 8018cce:	4642      	mov	r2, r8
 8018cd0:	fb02 f203 	mul.w	r2, r2, r3
 8018cd4:	464b      	mov	r3, r9
 8018cd6:	4621      	mov	r1, r4
 8018cd8:	fb01 f303 	mul.w	r3, r1, r3
 8018cdc:	4413      	add	r3, r2
 8018cde:	4622      	mov	r2, r4
 8018ce0:	4641      	mov	r1, r8
 8018ce2:	fba2 1201 	umull	r1, r2, r2, r1
 8018ce6:	f8c7 257c 	str.w	r2, [r7, #1404]	@ 0x57c
 8018cea:	460a      	mov	r2, r1
 8018cec:	f8c7 2578 	str.w	r2, [r7, #1400]	@ 0x578
 8018cf0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	@ 0x57c
 8018cf4:	4413      	add	r3, r2
 8018cf6:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 8018cfa:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 8018cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018d02:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018d06:	e9c2 3400 	strd	r3, r4, [r2]
 8018d0a:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018d0e:	e9c2 3400 	strd	r3, r4, [r2]
  tot *= 2;
 8018d12:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d1a:	1891      	adds	r1, r2, r2
 8018d1c:	6239      	str	r1, [r7, #32]
 8018d1e:	415b      	adcs	r3, r3
 8018d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d22:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8018d26:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018d2a:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8018d2e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d36:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d3e:	1884      	adds	r4, r0, r2
 8018d40:	61bc      	str	r4, [r7, #24]
 8018d42:	eb41 0303 	adc.w	r3, r1, r3
 8018d46:	61fb      	str	r3, [r7, #28]
 8018d48:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8018d4c:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018d50:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v7 * p8;
 8018d54:	f8d7 3728 	ldr.w	r3, [r7, #1832]	@ 0x728
 8018d58:	2200      	movs	r2, #0
 8018d5a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8018d5e:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8018d62:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8018d66:	2200      	movs	r2, #0
 8018d68:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8018d6c:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8018d70:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 8018d74:	462b      	mov	r3, r5
 8018d76:	e9d7 8990 	ldrd	r8, r9, [r7, #576]	@ 0x240
 8018d7a:	4642      	mov	r2, r8
 8018d7c:	fb02 f203 	mul.w	r2, r2, r3
 8018d80:	464b      	mov	r3, r9
 8018d82:	4621      	mov	r1, r4
 8018d84:	fb01 f303 	mul.w	r3, r1, r3
 8018d88:	4413      	add	r3, r2
 8018d8a:	4622      	mov	r2, r4
 8018d8c:	4641      	mov	r1, r8
 8018d8e:	fba2 1201 	umull	r1, r2, r2, r1
 8018d92:	f8c7 25fc 	str.w	r2, [r7, #1532]	@ 0x5fc
 8018d96:	460a      	mov	r2, r1
 8018d98:	f8c7 25f8 	str.w	r2, [r7, #1528]	@ 0x5f8
 8018d9c:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 8018da0:	4413      	add	r3, r2
 8018da2:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8018da6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dae:	f507 61bf 	add.w	r1, r7, #1528	@ 0x5f8
 8018db2:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018db6:	4621      	mov	r1, r4
 8018db8:	1851      	adds	r1, r2, r1
 8018dba:	6139      	str	r1, [r7, #16]
 8018dbc:	4629      	mov	r1, r5
 8018dbe:	eb43 0101 	adc.w	r1, r3, r1
 8018dc2:	6179      	str	r1, [r7, #20]
 8018dc4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8018dc8:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018dcc:	e9c2 3400 	strd	r3, r4, [r2]
  c[6] = ((spint)t & mask);
 8018dd0:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 8018dd4:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8018dd8:	f103 0218 	add.w	r2, r3, #24
 8018ddc:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8018de0:	400b      	ands	r3, r1
 8018de2:	6013      	str	r3, [r2, #0]
  t >>= 29;
 8018de4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dec:	f04f 0000 	mov.w	r0, #0
 8018df0:	f04f 0100 	mov.w	r1, #0
 8018df4:	0f50      	lsrs	r0, r2, #29
 8018df6:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8018dfa:	0f59      	lsrs	r1, r3, #29
 8018dfc:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018e00:	e9c3 0100 	strd	r0, r1, [r3]
  tot = (udpint)a[8] * a[8];
 8018e04:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018e08:	3320      	adds	r3, #32
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8018e12:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8018e16:	f8d7 371c 	ldr.w	r3, [r7, #1820]	@ 0x71c
 8018e1a:	3320      	adds	r3, #32
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	2200      	movs	r2, #0
 8018e20:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8018e24:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8018e28:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	@ 0x238
 8018e2c:	462b      	mov	r3, r5
 8018e2e:	e9d7 898c 	ldrd	r8, r9, [r7, #560]	@ 0x230
 8018e32:	4642      	mov	r2, r8
 8018e34:	fb02 f203 	mul.w	r2, r2, r3
 8018e38:	464b      	mov	r3, r9
 8018e3a:	4621      	mov	r1, r4
 8018e3c:	fb01 f303 	mul.w	r3, r1, r3
 8018e40:	4413      	add	r3, r2
 8018e42:	4622      	mov	r2, r4
 8018e44:	4641      	mov	r1, r8
 8018e46:	fba2 1201 	umull	r1, r2, r2, r1
 8018e4a:	f8c7 2574 	str.w	r2, [r7, #1396]	@ 0x574
 8018e4e:	460a      	mov	r2, r1
 8018e50:	f8c7 2570 	str.w	r2, [r7, #1392]	@ 0x570
 8018e54:	f8d7 2574 	ldr.w	r2, [r7, #1396]	@ 0x574
 8018e58:	4413      	add	r3, r2
 8018e5a:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 8018e5e:	f507 63ae 	add.w	r3, r7, #1392	@ 0x570
 8018e62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018e66:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018e6a:	e9c2 3400 	strd	r3, r4, [r2]
 8018e6e:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8018e72:	e9c2 3400 	strd	r3, r4, [r2]
  t += tot;
 8018e76:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e7e:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8018e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e86:	1884      	adds	r4, r0, r2
 8018e88:	60bc      	str	r4, [r7, #8]
 8018e8a:	eb41 0303 	adc.w	r3, r1, r3
 8018e8e:	60fb      	str	r3, [r7, #12]
 8018e90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8018e94:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018e98:	e9c2 3400 	strd	r3, r4, [r2]
  t += (udpint)v8 * p8;
 8018e9c:	f8d7 3724 	ldr.w	r3, [r7, #1828]	@ 0x724
 8018ea0:	2200      	movs	r2, #0
 8018ea2:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8018ea6:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8018eaa:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8018eae:	2200      	movs	r2, #0
 8018eb0:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8018eb4:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8018eb8:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 8018ebc:	462b      	mov	r3, r5
 8018ebe:	e9d7 8988 	ldrd	r8, r9, [r7, #544]	@ 0x220
 8018ec2:	4642      	mov	r2, r8
 8018ec4:	fb02 f203 	mul.w	r2, r2, r3
 8018ec8:	464b      	mov	r3, r9
 8018eca:	4621      	mov	r1, r4
 8018ecc:	fb01 f303 	mul.w	r3, r1, r3
 8018ed0:	4413      	add	r3, r2
 8018ed2:	4622      	mov	r2, r4
 8018ed4:	4641      	mov	r1, r8
 8018ed6:	fba2 1201 	umull	r1, r2, r2, r1
 8018eda:	f8c7 25f4 	str.w	r2, [r7, #1524]	@ 0x5f4
 8018ede:	460a      	mov	r2, r1
 8018ee0:	f8c7 25f0 	str.w	r2, [r7, #1520]	@ 0x5f0
 8018ee4:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	@ 0x5f4
 8018ee8:	4413      	add	r3, r2
 8018eea:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 8018eee:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef6:	f507 61be 	add.w	r1, r7, #1520	@ 0x5f0
 8018efa:	e9d1 4500 	ldrd	r4, r5, [r1]
 8018efe:	4621      	mov	r1, r4
 8018f00:	1851      	adds	r1, r2, r1
 8018f02:	6039      	str	r1, [r7, #0]
 8018f04:	4629      	mov	r1, r5
 8018f06:	eb43 0101 	adc.w	r1, r3, r1
 8018f0a:	6079      	str	r1, [r7, #4]
 8018f0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8018f10:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8018f14:	e9c2 3400 	strd	r3, r4, [r2]
  c[7] = ((spint)t & mask);
 8018f18:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 8018f1c:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8018f20:	331c      	adds	r3, #28
 8018f22:	f8d7 2754 	ldr.w	r2, [r7, #1876]	@ 0x754
 8018f26:	400a      	ands	r2, r1
 8018f28:	601a      	str	r2, [r3, #0]
  t >>= 29;
 8018f2a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8018f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018f32:	f04f 0200 	mov.w	r2, #0
 8018f36:	f04f 0300 	mov.w	r3, #0
 8018f3a:	0f42      	lsrs	r2, r0, #29
 8018f3c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8018f40:	0f4b      	lsrs	r3, r1, #29
 8018f42:	f507 61ec 	add.w	r1, r7, #1888	@ 0x760
 8018f46:	e9c1 2300 	strd	r2, r3, [r1]
  c[8] = (spint)t;
 8018f4a:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8018f4e:	3320      	adds	r3, #32
 8018f50:	f8d7 2760 	ldr.w	r2, [r7, #1888]	@ 0x760
 8018f54:	601a      	str	r2, [r3, #0]
}
 8018f56:	bf00      	nop
 8018f58:	f207 776c 	addw	r7, r7, #1900	@ 0x76c
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8018f62:	4770      	bx	lr

08018f64 <modcpy>:

// copy
static void modcpy(const spint *a, spint *c) {
 8018f64:	b480      	push	{r7}
 8018f66:	b085      	sub	sp, #20
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
 8018f6c:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < 9; i++) {
 8018f6e:	2300      	movs	r3, #0
 8018f70:	60fb      	str	r3, [r7, #12]
 8018f72:	e00c      	b.n	8018f8e <modcpy+0x2a>
    c[i] = a[i];
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	009b      	lsls	r3, r3, #2
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	441a      	add	r2, r3
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	009b      	lsls	r3, r3, #2
 8018f80:	6839      	ldr	r1, [r7, #0]
 8018f82:	440b      	add	r3, r1
 8018f84:	6812      	ldr	r2, [r2, #0]
 8018f86:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++) {
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	3301      	adds	r3, #1
 8018f8c:	60fb      	str	r3, [r7, #12]
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	2b08      	cmp	r3, #8
 8018f92:	ddef      	ble.n	8018f74 <modcpy+0x10>
  }
}
 8018f94:	bf00      	nop
 8018f96:	bf00      	nop
 8018f98:	3714      	adds	r7, #20
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa0:	4770      	bx	lr

08018fa2 <modnsqr>:

// square n times
static void modnsqr(spint *a, int n) {
 8018fa2:	b580      	push	{r7, lr}
 8018fa4:	b084      	sub	sp, #16
 8018fa6:	af00      	add	r7, sp, #0
 8018fa8:	6078      	str	r0, [r7, #4]
 8018faa:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < n; i++) {
 8018fac:	2300      	movs	r3, #0
 8018fae:	60fb      	str	r3, [r7, #12]
 8018fb0:	e006      	b.n	8018fc0 <modnsqr+0x1e>
    modsqr(a, a);
 8018fb2:	6879      	ldr	r1, [r7, #4]
 8018fb4:	6878      	ldr	r0, [r7, #4]
 8018fb6:	f7fd fe36 	bl	8016c26 <modsqr>
  for (i = 0; i < n; i++) {
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	3301      	adds	r3, #1
 8018fbe:	60fb      	str	r3, [r7, #12]
 8018fc0:	68fa      	ldr	r2, [r7, #12]
 8018fc2:	683b      	ldr	r3, [r7, #0]
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	dbf4      	blt.n	8018fb2 <modnsqr+0x10>
  }
}
 8018fc8:	bf00      	nop
 8018fca:	bf00      	nop
 8018fcc:	3710      	adds	r7, #16
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}

08018fd2 <modpro>:

// Calculate progenitor
static void modpro(const spint *w, spint *z) {
 8018fd2:	b580      	push	{r7, lr}
 8018fd4:	b0b8      	sub	sp, #224	@ 0xe0
 8018fd6:	af00      	add	r7, sp, #0
 8018fd8:	6078      	str	r0, [r7, #4]
 8018fda:	6039      	str	r1, [r7, #0]
  spint t0[9];
  spint t1[9];
  spint t2[9];
  spint t3[9];
  spint t4[9];
  modcpy(w, x);
 8018fdc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8018fe0:	4619      	mov	r1, r3
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	f7ff ffbe 	bl	8018f64 <modcpy>
  modsqr(x, z);
 8018fe8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8018fec:	6839      	ldr	r1, [r7, #0]
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f7fd fe19 	bl	8016c26 <modsqr>
  modmul(x, z, t0);
 8018ff4:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8018ff8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8018ffc:	6839      	ldr	r1, [r7, #0]
 8018ffe:	4618      	mov	r0, r3
 8019000:	f7fa fbbc 	bl	801377c <modmul>
  modsqr(t0, z);
 8019004:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8019008:	6839      	ldr	r1, [r7, #0]
 801900a:	4618      	mov	r0, r3
 801900c:	f7fd fe0b 	bl	8016c26 <modsqr>
  modmul(x, z, z);
 8019010:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8019014:	683a      	ldr	r2, [r7, #0]
 8019016:	6839      	ldr	r1, [r7, #0]
 8019018:	4618      	mov	r0, r3
 801901a:	f7fa fbaf 	bl	801377c <modmul>
  modsqr(z, t1);
 801901e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019022:	4619      	mov	r1, r3
 8019024:	6838      	ldr	r0, [r7, #0]
 8019026:	f7fd fdfe 	bl	8016c26 <modsqr>
  modsqr(t1, t3);
 801902a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801902e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019032:	4611      	mov	r1, r2
 8019034:	4618      	mov	r0, r3
 8019036:	f7fd fdf6 	bl	8016c26 <modsqr>
  modsqr(t3, t2);
 801903a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801903e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019042:	4611      	mov	r1, r2
 8019044:	4618      	mov	r0, r3
 8019046:	f7fd fdee 	bl	8016c26 <modsqr>
  modcpy(t2, t4);
 801904a:	f107 0208 	add.w	r2, r7, #8
 801904e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019052:	4611      	mov	r1, r2
 8019054:	4618      	mov	r0, r3
 8019056:	f7ff ff85 	bl	8018f64 <modcpy>
  modnsqr(t4, 3);
 801905a:	f107 0308 	add.w	r3, r7, #8
 801905e:	2103      	movs	r1, #3
 8019060:	4618      	mov	r0, r3
 8019062:	f7ff ff9e 	bl	8018fa2 <modnsqr>
  modmul(t2, t4, t2);
 8019066:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801906a:	f107 0108 	add.w	r1, r7, #8
 801906e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019072:	4618      	mov	r0, r3
 8019074:	f7fa fb82 	bl	801377c <modmul>
  modcpy(t2, t4);
 8019078:	f107 0208 	add.w	r2, r7, #8
 801907c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019080:	4611      	mov	r1, r2
 8019082:	4618      	mov	r0, r3
 8019084:	f7ff ff6e 	bl	8018f64 <modcpy>
  modnsqr(t4, 6);
 8019088:	f107 0308 	add.w	r3, r7, #8
 801908c:	2106      	movs	r1, #6
 801908e:	4618      	mov	r0, r3
 8019090:	f7ff ff87 	bl	8018fa2 <modnsqr>
  modmul(t2, t4, t2);
 8019094:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8019098:	f107 0108 	add.w	r1, r7, #8
 801909c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7fa fb6b 	bl	801377c <modmul>
  modcpy(t2, t4);
 80190a6:	f107 0208 	add.w	r2, r7, #8
 80190aa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80190ae:	4611      	mov	r1, r2
 80190b0:	4618      	mov	r0, r3
 80190b2:	f7ff ff57 	bl	8018f64 <modcpy>
  modnsqr(t4, 2);
 80190b6:	f107 0308 	add.w	r3, r7, #8
 80190ba:	2102      	movs	r1, #2
 80190bc:	4618      	mov	r0, r3
 80190be:	f7ff ff70 	bl	8018fa2 <modnsqr>
  modmul(t3, t4, t3);
 80190c2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80190c6:	f107 0108 	add.w	r1, r7, #8
 80190ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80190ce:	4618      	mov	r0, r3
 80190d0:	f7fa fb54 	bl	801377c <modmul>
  modnsqr(t3, 13);
 80190d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80190d8:	210d      	movs	r1, #13
 80190da:	4618      	mov	r0, r3
 80190dc:	f7ff ff61 	bl	8018fa2 <modnsqr>
  modmul(t2, t3, t2);
 80190e0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80190e4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80190e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80190ec:	4618      	mov	r0, r3
 80190ee:	f7fa fb45 	bl	801377c <modmul>
  modcpy(t2, t3);
 80190f2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80190f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80190fa:	4611      	mov	r1, r2
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7ff ff31 	bl	8018f64 <modcpy>
  modnsqr(t3, 27);
 8019102:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019106:	211b      	movs	r1, #27
 8019108:	4618      	mov	r0, r3
 801910a:	f7ff ff4a 	bl	8018fa2 <modnsqr>
  modmul(t2, t3, t2);
 801910e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8019112:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8019116:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801911a:	4618      	mov	r0, r3
 801911c:	f7fa fb2e 	bl	801377c <modmul>
  modmul(z, t2, z);
 8019120:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019124:	683a      	ldr	r2, [r7, #0]
 8019126:	4619      	mov	r1, r3
 8019128:	6838      	ldr	r0, [r7, #0]
 801912a:	f7fa fb27 	bl	801377c <modmul>
  modcpy(z, t2);
 801912e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019132:	4619      	mov	r1, r3
 8019134:	6838      	ldr	r0, [r7, #0]
 8019136:	f7ff ff15 	bl	8018f64 <modcpy>
  modnsqr(t2, 4);
 801913a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801913e:	2104      	movs	r1, #4
 8019140:	4618      	mov	r0, r3
 8019142:	f7ff ff2e 	bl	8018fa2 <modnsqr>
  modmul(t1, t2, t1);
 8019146:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801914a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801914e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019152:	4618      	mov	r0, r3
 8019154:	f7fa fb12 	bl	801377c <modmul>
  modmul(t0, t1, t0);
 8019158:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 801915c:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8019160:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8019164:	4618      	mov	r0, r3
 8019166:	f7fa fb09 	bl	801377c <modmul>
  modmul(t1, t0, t1);
 801916a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801916e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8019172:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019176:	4618      	mov	r0, r3
 8019178:	f7fa fb00 	bl	801377c <modmul>
  modmul(t0, t1, t0);
 801917c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8019180:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8019184:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8019188:	4618      	mov	r0, r3
 801918a:	f7fa faf7 	bl	801377c <modmul>
  modmul(t1, t0, t2);
 801918e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8019192:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8019196:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801919a:	4618      	mov	r0, r3
 801919c:	f7fa faee 	bl	801377c <modmul>
  modmul(t0, t2, t0);
 80191a0:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80191a4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80191a8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7fa fae5 	bl	801377c <modmul>
  modmul(t1, t0, t1);
 80191b2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80191b6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80191ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80191be:	4618      	mov	r0, r3
 80191c0:	f7fa fadc 	bl	801377c <modmul>
  modnsqr(t1, 63);
 80191c4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80191c8:	213f      	movs	r1, #63	@ 0x3f
 80191ca:	4618      	mov	r0, r3
 80191cc:	f7ff fee9 	bl	8018fa2 <modnsqr>
  modmul(t0, t1, t1);
 80191d0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80191d4:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80191d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80191dc:	4618      	mov	r0, r3
 80191de:	f7fa facd 	bl	801377c <modmul>
  modnsqr(t1, 64);
 80191e2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80191e6:	2140      	movs	r1, #64	@ 0x40
 80191e8:	4618      	mov	r0, r3
 80191ea:	f7ff feda 	bl	8018fa2 <modnsqr>
  modmul(t0, t1, t0);
 80191ee:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80191f2:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80191f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80191fa:	4618      	mov	r0, r3
 80191fc:	f7fa fabe 	bl	801377c <modmul>
  modnsqr(t0, 57);
 8019200:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8019204:	2139      	movs	r1, #57	@ 0x39
 8019206:	4618      	mov	r0, r3
 8019208:	f7ff fecb 	bl	8018fa2 <modnsqr>
  modmul(z, t0, z);
 801920c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8019210:	683a      	ldr	r2, [r7, #0]
 8019212:	4619      	mov	r1, r3
 8019214:	6838      	ldr	r0, [r7, #0]
 8019216:	f7fa fab1 	bl	801377c <modmul>
}
 801921a:	bf00      	nop
 801921c:	37e0      	adds	r7, #224	@ 0xe0
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}

08019222 <modinv>:

// calculate inverse, provide progenitor h if available
static void modinv(const spint *x, const spint *h, spint *z) {
 8019222:	b580      	push	{r7, lr}
 8019224:	b096      	sub	sp, #88	@ 0x58
 8019226:	af00      	add	r7, sp, #0
 8019228:	60f8      	str	r0, [r7, #12]
 801922a:	60b9      	str	r1, [r7, #8]
 801922c:	607a      	str	r2, [r7, #4]
  spint s[9];
  spint t[9];
  if (h == NULL) {
 801922e:	68bb      	ldr	r3, [r7, #8]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d106      	bne.n	8019242 <modinv+0x20>
    modpro(x, t);
 8019234:	f107 0310 	add.w	r3, r7, #16
 8019238:	4619      	mov	r1, r3
 801923a:	68f8      	ldr	r0, [r7, #12]
 801923c:	f7ff fec9 	bl	8018fd2 <modpro>
 8019240:	e005      	b.n	801924e <modinv+0x2c>
  } else {
    modcpy(h, t);
 8019242:	f107 0310 	add.w	r3, r7, #16
 8019246:	4619      	mov	r1, r3
 8019248:	68b8      	ldr	r0, [r7, #8]
 801924a:	f7ff fe8b 	bl	8018f64 <modcpy>
  }
  modcpy(x, s);
 801924e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019252:	4619      	mov	r1, r3
 8019254:	68f8      	ldr	r0, [r7, #12]
 8019256:	f7ff fe85 	bl	8018f64 <modcpy>
  modnsqr(t, 2);
 801925a:	f107 0310 	add.w	r3, r7, #16
 801925e:	2102      	movs	r1, #2
 8019260:	4618      	mov	r0, r3
 8019262:	f7ff fe9e 	bl	8018fa2 <modnsqr>
  modmul(s, t, z);
 8019266:	f107 0110 	add.w	r1, r7, #16
 801926a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801926e:	687a      	ldr	r2, [r7, #4]
 8019270:	4618      	mov	r0, r3
 8019272:	f7fa fa83 	bl	801377c <modmul>
}
 8019276:	bf00      	nop
 8019278:	3758      	adds	r7, #88	@ 0x58
 801927a:	46bd      	mov	sp, r7
 801927c:	bd80      	pop	{r7, pc}
	...

08019280 <nres>:

// Convert m to n-residue form, n=nres(m)
static void nres(const spint *m, spint *n) {
 8019280:	b5b0      	push	{r4, r5, r7, lr}
 8019282:	b08c      	sub	sp, #48	@ 0x30
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
 8019288:	6039      	str	r1, [r7, #0]
  const spint c[9] = {0xcf5c28fu,  0x6666666u,  0x13333333u,
 801928a:	4b0a      	ldr	r3, [pc, #40]	@ (80192b4 <nres+0x34>)
 801928c:	f107 040c 	add.w	r4, r7, #12
 8019290:	461d      	mov	r5, r3
 8019292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801929a:	682b      	ldr	r3, [r5, #0]
 801929c:	6023      	str	r3, [r4, #0]
                      0x19999999u, 0xcccccccu,  0x6666666u,
                      0x13333333u, 0x19999999u, 0x1ccccu};
  modmul(m, c, n);
 801929e:	f107 030c 	add.w	r3, r7, #12
 80192a2:	683a      	ldr	r2, [r7, #0]
 80192a4:	4619      	mov	r1, r3
 80192a6:	6878      	ldr	r0, [r7, #4]
 80192a8:	f7fa fa68 	bl	801377c <modmul>
}
 80192ac:	bf00      	nop
 80192ae:	3730      	adds	r7, #48	@ 0x30
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bdb0      	pop	{r4, r5, r7, pc}
 80192b4:	080377d0 	.word	0x080377d0

080192b8 <redc>:

// Convert n back to normal form, m=redc(n)
static void redc(const spint *n, spint *m) {
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b08c      	sub	sp, #48	@ 0x30
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
 80192c0:	6039      	str	r1, [r7, #0]
  int i;
  spint c[9];
  c[0] = 1;
 80192c2:	2301      	movs	r3, #1
 80192c4:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < 9; i++) {
 80192c6:	2301      	movs	r3, #1
 80192c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192ca:	e009      	b.n	80192e0 <redc+0x28>
    c[i] = 0;
 80192cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192ce:	009b      	lsls	r3, r3, #2
 80192d0:	3330      	adds	r3, #48	@ 0x30
 80192d2:	443b      	add	r3, r7
 80192d4:	2200      	movs	r2, #0
 80192d6:	f843 2c28 	str.w	r2, [r3, #-40]
  for (i = 1; i < 9; i++) {
 80192da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192dc:	3301      	adds	r3, #1
 80192de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192e2:	2b08      	cmp	r3, #8
 80192e4:	ddf2      	ble.n	80192cc <redc+0x14>
  }
  modmul(n, c, m);
 80192e6:	f107 0308 	add.w	r3, r7, #8
 80192ea:	683a      	ldr	r2, [r7, #0]
 80192ec:	4619      	mov	r1, r3
 80192ee:	6878      	ldr	r0, [r7, #4]
 80192f0:	f7fa fa44 	bl	801377c <modmul>
  (void)modfsb(m);
 80192f4:	6838      	ldr	r0, [r7, #0]
 80192f6:	f7fa f8c8 	bl	801348a <modfsb>
}
 80192fa:	bf00      	nop
 80192fc:	3730      	adds	r7, #48	@ 0x30
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}

08019302 <modis1>:

// is unity?
static int modis1(const spint *a) {
 8019302:	b580      	push	{r7, lr}
 8019304:	b08e      	sub	sp, #56	@ 0x38
 8019306:	af00      	add	r7, sp, #0
 8019308:	6078      	str	r0, [r7, #4]
  int i;
  spint c[9];
  spint c0;
  spint d = 0;
 801930a:	2300      	movs	r3, #0
 801930c:	633b      	str	r3, [r7, #48]	@ 0x30
  redc(a, c);
 801930e:	f107 0308 	add.w	r3, r7, #8
 8019312:	4619      	mov	r1, r3
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f7ff ffcf 	bl	80192b8 <redc>
  for (i = 1; i < 9; i++) {
 801931a:	2301      	movs	r3, #1
 801931c:	637b      	str	r3, [r7, #52]	@ 0x34
 801931e:	e00b      	b.n	8019338 <modis1+0x36>
    d |= c[i];
 8019320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019322:	009b      	lsls	r3, r3, #2
 8019324:	3338      	adds	r3, #56	@ 0x38
 8019326:	443b      	add	r3, r7
 8019328:	f853 3c30 	ldr.w	r3, [r3, #-48]
 801932c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801932e:	4313      	orrs	r3, r2
 8019330:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 1; i < 9; i++) {
 8019332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019334:	3301      	adds	r3, #1
 8019336:	637b      	str	r3, [r7, #52]	@ 0x34
 8019338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801933a:	2b08      	cmp	r3, #8
 801933c:	ddf0      	ble.n	8019320 <modis1+0x1e>
  }
  c0 = (spint)c[0];
 801933e:	68bb      	ldr	r3, [r7, #8]
 8019340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return ((spint)1 & ((d - (spint)1) >> 29u) &
 8019342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019344:	1e5a      	subs	r2, r3, #1
          (((c0 ^ (spint)1) - (spint)1) >> 29u));
 8019346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019348:	f083 0301 	eor.w	r3, r3, #1
 801934c:	3b01      	subs	r3, #1
  return ((spint)1 & ((d - (spint)1) >> 29u) &
 801934e:	4013      	ands	r3, r2
 8019350:	0f5b      	lsrs	r3, r3, #29
 8019352:	f003 0301 	and.w	r3, r3, #1
}
 8019356:	4618      	mov	r0, r3
 8019358:	3738      	adds	r7, #56	@ 0x38
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}

0801935e <modis0>:

// is zero?
static int modis0(const spint *a) {
 801935e:	b580      	push	{r7, lr}
 8019360:	b08e      	sub	sp, #56	@ 0x38
 8019362:	af00      	add	r7, sp, #0
 8019364:	6078      	str	r0, [r7, #4]
  int i;
  spint c[9];
  spint d = 0;
 8019366:	2300      	movs	r3, #0
 8019368:	633b      	str	r3, [r7, #48]	@ 0x30
  redc(a, c);
 801936a:	f107 030c 	add.w	r3, r7, #12
 801936e:	4619      	mov	r1, r3
 8019370:	6878      	ldr	r0, [r7, #4]
 8019372:	f7ff ffa1 	bl	80192b8 <redc>
  for (i = 0; i < 9; i++) {
 8019376:	2300      	movs	r3, #0
 8019378:	637b      	str	r3, [r7, #52]	@ 0x34
 801937a:	e00b      	b.n	8019394 <modis0+0x36>
    d |= c[i];
 801937c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801937e:	009b      	lsls	r3, r3, #2
 8019380:	3338      	adds	r3, #56	@ 0x38
 8019382:	443b      	add	r3, r7
 8019384:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8019388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801938a:	4313      	orrs	r3, r2
 801938c:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < 9; i++) {
 801938e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019390:	3301      	adds	r3, #1
 8019392:	637b      	str	r3, [r7, #52]	@ 0x34
 8019394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019396:	2b08      	cmp	r3, #8
 8019398:	ddf0      	ble.n	801937c <modis0+0x1e>
  }
  return ((spint)1 & ((d - (spint)1) >> 29u));
 801939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801939c:	3b01      	subs	r3, #1
 801939e:	0f5b      	lsrs	r3, r3, #29
 80193a0:	f003 0301 	and.w	r3, r3, #1
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	3738      	adds	r7, #56	@ 0x38
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}

080193ac <modzer>:

// set to zero
static void modzer(spint *a) {
 80193ac:	b480      	push	{r7}
 80193ae:	b085      	sub	sp, #20
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
  int i;
  for (i = 0; i < 9; i++) {
 80193b4:	2300      	movs	r3, #0
 80193b6:	60fb      	str	r3, [r7, #12]
 80193b8:	e008      	b.n	80193cc <modzer+0x20>
    a[i] = 0;
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	009b      	lsls	r3, r3, #2
 80193be:	687a      	ldr	r2, [r7, #4]
 80193c0:	4413      	add	r3, r2
 80193c2:	2200      	movs	r2, #0
 80193c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++) {
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	3301      	adds	r3, #1
 80193ca:	60fb      	str	r3, [r7, #12]
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	2b08      	cmp	r3, #8
 80193d0:	ddf3      	ble.n	80193ba <modzer+0xe>
  }
}
 80193d2:	bf00      	nop
 80193d4:	bf00      	nop
 80193d6:	3714      	adds	r7, #20
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr

080193e0 <modone>:

// set to one
static void modone(spint *a) {
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b084      	sub	sp, #16
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
  int i;
  a[0] = 1;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	2201      	movs	r2, #1
 80193ec:	601a      	str	r2, [r3, #0]
  for (i = 1; i < 9; i++) {
 80193ee:	2301      	movs	r3, #1
 80193f0:	60fb      	str	r3, [r7, #12]
 80193f2:	e008      	b.n	8019406 <modone+0x26>
    a[i] = 0;
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	009b      	lsls	r3, r3, #2
 80193f8:	687a      	ldr	r2, [r7, #4]
 80193fa:	4413      	add	r3, r2
 80193fc:	2200      	movs	r2, #0
 80193fe:	601a      	str	r2, [r3, #0]
  for (i = 1; i < 9; i++) {
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	3301      	adds	r3, #1
 8019404:	60fb      	str	r3, [r7, #12]
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	2b08      	cmp	r3, #8
 801940a:	ddf3      	ble.n	80193f4 <modone+0x14>
  }
  nres(a, a);
 801940c:	6879      	ldr	r1, [r7, #4]
 801940e:	6878      	ldr	r0, [r7, #4]
 8019410:	f7ff ff36 	bl	8019280 <nres>
}
 8019414:	bf00      	nop
 8019416:	3710      	adds	r7, #16
 8019418:	46bd      	mov	sp, r7
 801941a:	bd80      	pop	{r7, pc}

0801941c <modint>:

// set to integer
static void modint(int x, spint *a) {
 801941c:	b580      	push	{r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
 8019424:	6039      	str	r1, [r7, #0]
  int i;
  a[0] = (spint)x;
 8019426:	687a      	ldr	r2, [r7, #4]
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	601a      	str	r2, [r3, #0]
  for (i = 1; i < 9; i++) {
 801942c:	2301      	movs	r3, #1
 801942e:	60fb      	str	r3, [r7, #12]
 8019430:	e008      	b.n	8019444 <modint+0x28>
    a[i] = 0;
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	009b      	lsls	r3, r3, #2
 8019436:	683a      	ldr	r2, [r7, #0]
 8019438:	4413      	add	r3, r2
 801943a:	2200      	movs	r2, #0
 801943c:	601a      	str	r2, [r3, #0]
  for (i = 1; i < 9; i++) {
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	3301      	adds	r3, #1
 8019442:	60fb      	str	r3, [r7, #12]
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	2b08      	cmp	r3, #8
 8019448:	ddf3      	ble.n	8019432 <modint+0x16>
  }
  nres(a, a);
 801944a:	6839      	ldr	r1, [r7, #0]
 801944c:	6838      	ldr	r0, [r7, #0]
 801944e:	f7ff ff17 	bl	8019280 <nres>
}
 8019452:	bf00      	nop
 8019454:	3710      	adds	r7, #16
 8019456:	46bd      	mov	sp, r7
 8019458:	bd80      	pop	{r7, pc}

0801945a <modmli>:

// Modular multiplication by an integer, c=a*b mod 2p
static void modmli(const spint *a, int b, spint *c) {
 801945a:	b580      	push	{r7, lr}
 801945c:	b08e      	sub	sp, #56	@ 0x38
 801945e:	af00      	add	r7, sp, #0
 8019460:	60f8      	str	r0, [r7, #12]
 8019462:	60b9      	str	r1, [r7, #8]
 8019464:	607a      	str	r2, [r7, #4]
  spint t[9];
  modint(b, t);
 8019466:	f107 0314 	add.w	r3, r7, #20
 801946a:	4619      	mov	r1, r3
 801946c:	68b8      	ldr	r0, [r7, #8]
 801946e:	f7ff ffd5 	bl	801941c <modint>
  modmul(a, t, c);
 8019472:	f107 0314 	add.w	r3, r7, #20
 8019476:	687a      	ldr	r2, [r7, #4]
 8019478:	4619      	mov	r1, r3
 801947a:	68f8      	ldr	r0, [r7, #12]
 801947c:	f7fa f97e 	bl	801377c <modmul>
}
 8019480:	bf00      	nop
 8019482:	3738      	adds	r7, #56	@ 0x38
 8019484:	46bd      	mov	sp, r7
 8019486:	bd80      	pop	{r7, pc}

08019488 <modqr>:

// Test for quadratic residue
static int modqr(const spint *h, const spint *x) {
 8019488:	b590      	push	{r4, r7, lr}
 801948a:	b08d      	sub	sp, #52	@ 0x34
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
 8019490:	6039      	str	r1, [r7, #0]
  spint r[9];
  if (h == NULL) {
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d10e      	bne.n	80194b6 <modqr+0x2e>
    modpro(x, r);
 8019498:	f107 030c 	add.w	r3, r7, #12
 801949c:	4619      	mov	r1, r3
 801949e:	6838      	ldr	r0, [r7, #0]
 80194a0:	f7ff fd97 	bl	8018fd2 <modpro>
    modsqr(r, r);
 80194a4:	f107 020c 	add.w	r2, r7, #12
 80194a8:	f107 030c 	add.w	r3, r7, #12
 80194ac:	4611      	mov	r1, r2
 80194ae:	4618      	mov	r0, r3
 80194b0:	f7fd fbb9 	bl	8016c26 <modsqr>
 80194b4:	e005      	b.n	80194c2 <modqr+0x3a>
  } else {
    modsqr(h, r);
 80194b6:	f107 030c 	add.w	r3, r7, #12
 80194ba:	4619      	mov	r1, r3
 80194bc:	6878      	ldr	r0, [r7, #4]
 80194be:	f7fd fbb2 	bl	8016c26 <modsqr>
  }
  modmul(r, x, r);
 80194c2:	f107 020c 	add.w	r2, r7, #12
 80194c6:	f107 030c 	add.w	r3, r7, #12
 80194ca:	6839      	ldr	r1, [r7, #0]
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7fa f955 	bl	801377c <modmul>
  return modis1(r) | modis0(x);
 80194d2:	f107 030c 	add.w	r3, r7, #12
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7ff ff13 	bl	8019302 <modis1>
 80194dc:	4604      	mov	r4, r0
 80194de:	6838      	ldr	r0, [r7, #0]
 80194e0:	f7ff ff3d 	bl	801935e <modis0>
 80194e4:	4603      	mov	r3, r0
 80194e6:	4323      	orrs	r3, r4
}
 80194e8:	4618      	mov	r0, r3
 80194ea:	3734      	adds	r7, #52	@ 0x34
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bd90      	pop	{r4, r7, pc}

080194f0 <modcsw>:
  }
}

// conditional swap g and f if d=1
// strongly recommend inlining be disabled using compiler specific syntax
static void modcsw(int b, volatile spint *g, volatile spint *f) {
 80194f0:	b480      	push	{r7}
 80194f2:	b08d      	sub	sp, #52	@ 0x34
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	60f8      	str	r0, [r7, #12]
 80194f8:	60b9      	str	r1, [r7, #8]
 80194fa:	607a      	str	r2, [r7, #4]
  int i;
  spint c0, c1, s, t, w;
  spint r = 0x5aa5a55au;
 80194fc:	4b30      	ldr	r3, [pc, #192]	@ (80195c0 <modcsw+0xd0>)
 80194fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  c0 = (1 - b) + r;
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019504:	1ad3      	subs	r3, r2, r3
 8019506:	3301      	adds	r3, #1
 8019508:	627b      	str	r3, [r7, #36]	@ 0x24
  c1 = b + r;
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801950e:	4413      	add	r3, r2
 8019510:	623b      	str	r3, [r7, #32]
  for (i = 0; i < 9; i++) {
 8019512:	2300      	movs	r3, #0
 8019514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019516:	e049      	b.n	80195ac <modcsw+0xbc>
    s = g[i];
 8019518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801951a:	009b      	lsls	r3, r3, #2
 801951c:	68ba      	ldr	r2, [r7, #8]
 801951e:	4413      	add	r3, r2
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	61fb      	str	r3, [r7, #28]
    t = f[i];
 8019524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	687a      	ldr	r2, [r7, #4]
 801952a:	4413      	add	r3, r2
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	61bb      	str	r3, [r7, #24]
    w = r * (t + s);
 8019530:	69ba      	ldr	r2, [r7, #24]
 8019532:	69fb      	ldr	r3, [r7, #28]
 8019534:	441a      	add	r2, r3
 8019536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019538:	fb02 f303 	mul.w	r3, r2, r3
 801953c:	617b      	str	r3, [r7, #20]
    f[i] = c0 * t + c1 * s;
 801953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019540:	69ba      	ldr	r2, [r7, #24]
 8019542:	fb02 f103 	mul.w	r1, r2, r3
 8019546:	6a3b      	ldr	r3, [r7, #32]
 8019548:	69fa      	ldr	r2, [r7, #28]
 801954a:	fb03 f202 	mul.w	r2, r3, r2
 801954e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019550:	009b      	lsls	r3, r3, #2
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	4403      	add	r3, r0
 8019556:	440a      	add	r2, r1
 8019558:	601a      	str	r2, [r3, #0]
    f[i] -= w;
 801955a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801955c:	009b      	lsls	r3, r3, #2
 801955e:	687a      	ldr	r2, [r7, #4]
 8019560:	4413      	add	r3, r2
 8019562:	6819      	ldr	r1, [r3, #0]
 8019564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019566:	009b      	lsls	r3, r3, #2
 8019568:	687a      	ldr	r2, [r7, #4]
 801956a:	4413      	add	r3, r2
 801956c:	697a      	ldr	r2, [r7, #20]
 801956e:	1a8a      	subs	r2, r1, r2
 8019570:	601a      	str	r2, [r3, #0]
    g[i] = c0 * s + c1 * t;
 8019572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019574:	69fa      	ldr	r2, [r7, #28]
 8019576:	fb02 f103 	mul.w	r1, r2, r3
 801957a:	6a3b      	ldr	r3, [r7, #32]
 801957c:	69ba      	ldr	r2, [r7, #24]
 801957e:	fb03 f202 	mul.w	r2, r3, r2
 8019582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019584:	009b      	lsls	r3, r3, #2
 8019586:	68b8      	ldr	r0, [r7, #8]
 8019588:	4403      	add	r3, r0
 801958a:	440a      	add	r2, r1
 801958c:	601a      	str	r2, [r3, #0]
    g[i] -= w;
 801958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019590:	009b      	lsls	r3, r3, #2
 8019592:	68ba      	ldr	r2, [r7, #8]
 8019594:	4413      	add	r3, r2
 8019596:	6819      	ldr	r1, [r3, #0]
 8019598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801959a:	009b      	lsls	r3, r3, #2
 801959c:	68ba      	ldr	r2, [r7, #8]
 801959e:	4413      	add	r3, r2
 80195a0:	697a      	ldr	r2, [r7, #20]
 80195a2:	1a8a      	subs	r2, r1, r2
 80195a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++) {
 80195a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195a8:	3301      	adds	r3, #1
 80195aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80195ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195ae:	2b08      	cmp	r3, #8
 80195b0:	ddb2      	ble.n	8019518 <modcsw+0x28>
  }
}
 80195b2:	bf00      	nop
 80195b4:	bf00      	nop
 80195b6:	3734      	adds	r7, #52	@ 0x34
 80195b8:	46bd      	mov	sp, r7
 80195ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195be:	4770      	bx	lr
 80195c0:	5aa5a55a 	.word	0x5aa5a55a

080195c4 <modsqrt>:

// Modular square root, provide progenitor h if available, NULL if not
static void modsqrt(const spint *x, const spint *h, spint *r) {
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b096      	sub	sp, #88	@ 0x58
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	60f8      	str	r0, [r7, #12]
 80195cc:	60b9      	str	r1, [r7, #8]
 80195ce:	607a      	str	r2, [r7, #4]
  spint s[9];
  spint y[9];
  if (h == NULL) {
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d106      	bne.n	80195e4 <modsqrt+0x20>
    modpro(x, y);
 80195d6:	f107 0310 	add.w	r3, r7, #16
 80195da:	4619      	mov	r1, r3
 80195dc:	68f8      	ldr	r0, [r7, #12]
 80195de:	f7ff fcf8 	bl	8018fd2 <modpro>
 80195e2:	e005      	b.n	80195f0 <modsqrt+0x2c>
  } else {
    modcpy(h, y);
 80195e4:	f107 0310 	add.w	r3, r7, #16
 80195e8:	4619      	mov	r1, r3
 80195ea:	68b8      	ldr	r0, [r7, #8]
 80195ec:	f7ff fcba 	bl	8018f64 <modcpy>
  }
  modmul(y, x, s);
 80195f0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80195f4:	f107 0310 	add.w	r3, r7, #16
 80195f8:	68f9      	ldr	r1, [r7, #12]
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7fa f8be 	bl	801377c <modmul>
  modcpy(s, r);
 8019600:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019604:	6879      	ldr	r1, [r7, #4]
 8019606:	4618      	mov	r0, r3
 8019608:	f7ff fcac 	bl	8018f64 <modcpy>
}
 801960c:	bf00      	nop
 801960e:	3758      	adds	r7, #88	@ 0x58
 8019610:	46bd      	mov	sp, r7
 8019612:	bd80      	pop	{r7, pc}

08019614 <modshl>:

// shift left by less than a word
static void modshl(unsigned int n, spint *a) {
 8019614:	b480      	push	{r7}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	6039      	str	r1, [r7, #0]
  int i;
  a[8] = ((a[8] << n)) | (a[7] >> (29u - n));
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	3320      	adds	r3, #32
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	fa02 f103 	lsl.w	r1, r2, r3
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	331c      	adds	r3, #28
 801962e:	681a      	ldr	r2, [r3, #0]
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f1c3 031d 	rsb	r3, r3, #29
 8019636:	40da      	lsrs	r2, r3
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	3320      	adds	r3, #32
 801963c:	430a      	orrs	r2, r1
 801963e:	601a      	str	r2, [r3, #0]
  for (i = 7; i > 0; i--) {
 8019640:	2307      	movs	r3, #7
 8019642:	60fb      	str	r3, [r7, #12]
 8019644:	e01e      	b.n	8019684 <modshl+0x70>
    a[i] = ((a[i] << n) & (spint)0x1fffffff) | (a[i - 1] >> (29u - n));
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	009b      	lsls	r3, r3, #2
 801964a:	683a      	ldr	r2, [r7, #0]
 801964c:	4413      	add	r3, r2
 801964e:	681a      	ldr	r2, [r3, #0]
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	fa02 f303 	lsl.w	r3, r2, r3
 8019656:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8019660:	3b01      	subs	r3, #1
 8019662:	009b      	lsls	r3, r3, #2
 8019664:	683a      	ldr	r2, [r7, #0]
 8019666:	4413      	add	r3, r2
 8019668:	681a      	ldr	r2, [r3, #0]
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	f1c3 031d 	rsb	r3, r3, #29
 8019670:	40da      	lsrs	r2, r3
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	6838      	ldr	r0, [r7, #0]
 8019678:	4403      	add	r3, r0
 801967a:	430a      	orrs	r2, r1
 801967c:	601a      	str	r2, [r3, #0]
  for (i = 7; i > 0; i--) {
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	3b01      	subs	r3, #1
 8019682:	60fb      	str	r3, [r7, #12]
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2b00      	cmp	r3, #0
 8019688:	dcdd      	bgt.n	8019646 <modshl+0x32>
  }
  a[0] = (a[0] << n) & (spint)0x1fffffff;
 801968a:	683b      	ldr	r3, [r7, #0]
 801968c:	681a      	ldr	r2, [r3, #0]
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	fa02 f303 	lsl.w	r3, r2, r3
 8019694:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8019698:	683b      	ldr	r3, [r7, #0]
 801969a:	601a      	str	r2, [r3, #0]
}
 801969c:	bf00      	nop
 801969e:	3714      	adds	r7, #20
 80196a0:	46bd      	mov	sp, r7
 80196a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a6:	4770      	bx	lr

080196a8 <modshr>:

// shift right by less than a word. Return shifted out part
static int modshr(unsigned int n, spint *a) {
 80196a8:	b480      	push	{r7}
 80196aa:	b085      	sub	sp, #20
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
 80196b0:	6039      	str	r1, [r7, #0]
  int i;
  spint r = a[0] & (((spint)1 << n) - (spint)1);
 80196b2:	683b      	ldr	r3, [r7, #0]
 80196b4:	681a      	ldr	r2, [r3, #0]
 80196b6:	f04f 31ff 	mov.w	r1, #4294967295
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	fa01 f303 	lsl.w	r3, r1, r3
 80196c0:	43db      	mvns	r3, r3
 80196c2:	4013      	ands	r3, r2
 80196c4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 8; i++) {
 80196c6:	2300      	movs	r3, #0
 80196c8:	60fb      	str	r3, [r7, #12]
 80196ca:	e01d      	b.n	8019708 <modshr+0x60>
    a[i] = (a[i] >> n) | ((a[i + 1] << (29u - n)) & (spint)0x1fffffff);
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	009b      	lsls	r3, r3, #2
 80196d0:	683a      	ldr	r2, [r7, #0]
 80196d2:	4413      	add	r3, r2
 80196d4:	681a      	ldr	r2, [r3, #0]
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	fa22 f103 	lsr.w	r1, r2, r3
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	3301      	adds	r3, #1
 80196e0:	009b      	lsls	r3, r3, #2
 80196e2:	683a      	ldr	r2, [r7, #0]
 80196e4:	4413      	add	r3, r2
 80196e6:	681a      	ldr	r2, [r3, #0]
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	f1c3 031d 	rsb	r3, r3, #29
 80196ee:	fa02 f303 	lsl.w	r3, r2, r3
 80196f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	009b      	lsls	r3, r3, #2
 80196fa:	6838      	ldr	r0, [r7, #0]
 80196fc:	4403      	add	r3, r0
 80196fe:	430a      	orrs	r2, r1
 8019700:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	3301      	adds	r3, #1
 8019706:	60fb      	str	r3, [r7, #12]
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	2b07      	cmp	r3, #7
 801970c:	ddde      	ble.n	80196cc <modshr+0x24>
  }
  a[8] = a[8] >> n;
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	3320      	adds	r3, #32
 8019712:	6819      	ldr	r1, [r3, #0]
 8019714:	683b      	ldr	r3, [r7, #0]
 8019716:	3320      	adds	r3, #32
 8019718:	687a      	ldr	r2, [r7, #4]
 801971a:	fa21 f202 	lsr.w	r2, r1, r2
 801971e:	601a      	str	r2, [r3, #0]
  return r;
 8019720:	68bb      	ldr	r3, [r7, #8]
}
 8019722:	4618      	mov	r0, r3
 8019724:	3714      	adds	r7, #20
 8019726:	46bd      	mov	sp, r7
 8019728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801972c:	4770      	bx	lr

0801972e <modcmp>:
  redc(a, c);
  return c[0] % 2;
}

// return true if equal
static int modcmp(const spint *a, const spint *b) {
 801972e:	b580      	push	{r7, lr}
 8019730:	b096      	sub	sp, #88	@ 0x58
 8019732:	af00      	add	r7, sp, #0
 8019734:	6078      	str	r0, [r7, #4]
 8019736:	6039      	str	r1, [r7, #0]
  spint c[9], d[9];
  int i, eq = 1;
 8019738:	2301      	movs	r3, #1
 801973a:	653b      	str	r3, [r7, #80]	@ 0x50
  redc(a, c);
 801973c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019740:	4619      	mov	r1, r3
 8019742:	6878      	ldr	r0, [r7, #4]
 8019744:	f7ff fdb8 	bl	80192b8 <redc>
  redc(b, d);
 8019748:	f107 0308 	add.w	r3, r7, #8
 801974c:	4619      	mov	r1, r3
 801974e:	6838      	ldr	r0, [r7, #0]
 8019750:	f7ff fdb2 	bl	80192b8 <redc>
  for (i = 0; i < 9; i++) {
 8019754:	2300      	movs	r3, #0
 8019756:	657b      	str	r3, [r7, #84]	@ 0x54
 8019758:	e016      	b.n	8019788 <modcmp+0x5a>
    eq &= (((c[i] ^ d[i]) - 1) >> 29) & 1;
 801975a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801975c:	009b      	lsls	r3, r3, #2
 801975e:	3358      	adds	r3, #88	@ 0x58
 8019760:	443b      	add	r3, r7
 8019762:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8019766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019768:	009b      	lsls	r3, r3, #2
 801976a:	3358      	adds	r3, #88	@ 0x58
 801976c:	443b      	add	r3, r7
 801976e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8019772:	4053      	eors	r3, r2
 8019774:	3b01      	subs	r3, #1
 8019776:	0f5a      	lsrs	r2, r3, #29
 8019778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801977a:	4013      	ands	r3, r2
 801977c:	f003 0301 	and.w	r3, r3, #1
 8019780:	653b      	str	r3, [r7, #80]	@ 0x50
  for (i = 0; i < 9; i++) {
 8019782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019784:	3301      	adds	r3, #1
 8019786:	657b      	str	r3, [r7, #84]	@ 0x54
 8019788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801978a:	2b08      	cmp	r3, #8
 801978c:	dde5      	ble.n	801975a <modcmp+0x2c>
  }
  return eq;
 801978e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8019790:	4618      	mov	r0, r3
 8019792:	3758      	adds	r7, #88	@ 0x58
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}

08019798 <fp_set_small>:
static const digit_t R2[NWORDS_FIELD] = { 0x0667ae14, 0x13333333, 0x19999999, 0x0ccccccc, 0x06666666,
                                          0x13333333, 0x19999999, 0x0ccccccc, 0x00026666 };

void
fp_set_small(fp_t *x, const digit_t val)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b082      	sub	sp, #8
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
 80197a0:	6039      	str	r1, [r7, #0]
    modint((int)val, *x);
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	6879      	ldr	r1, [r7, #4]
 80197a6:	4618      	mov	r0, r3
 80197a8:	f7ff fe38 	bl	801941c <modint>
}
 80197ac:	bf00      	nop
 80197ae:	3708      	adds	r7, #8
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}

080197b4 <fp_mul_small>:

void
fp_mul_small(fp_t *x, const fp_t *a, const uint32_t val)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b084      	sub	sp, #16
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	60f8      	str	r0, [r7, #12]
 80197bc:	60b9      	str	r1, [r7, #8]
 80197be:	607a      	str	r2, [r7, #4]
    modmli(*a, (int)val, *x);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	68fa      	ldr	r2, [r7, #12]
 80197c4:	4619      	mov	r1, r3
 80197c6:	68b8      	ldr	r0, [r7, #8]
 80197c8:	f7ff fe47 	bl	801945a <modmli>
}
 80197cc:	bf00      	nop
 80197ce:	3710      	adds	r7, #16
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}

080197d4 <fp_set_zero>:

void
fp_set_zero(fp_t *x)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b082      	sub	sp, #8
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
    modzer(*x);
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f7ff fde5 	bl	80193ac <modzer>
}
 80197e2:	bf00      	nop
 80197e4:	3708      	adds	r7, #8
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}

080197ea <fp_set_one>:

void
fp_set_one(fp_t *x)
{
 80197ea:	b580      	push	{r7, lr}
 80197ec:	b082      	sub	sp, #8
 80197ee:	af00      	add	r7, sp, #0
 80197f0:	6078      	str	r0, [r7, #4]
    modone(*x);
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	f7ff fdf4 	bl	80193e0 <modone>
}
 80197f8:	bf00      	nop
 80197fa:	3708      	adds	r7, #8
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <fp_is_equal>:

uint32_t
fp_is_equal(const fp_t *a, const fp_t *b)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b082      	sub	sp, #8
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
 8019808:	6039      	str	r1, [r7, #0]
    return -(uint32_t)modcmp(*a, *b);
 801980a:	6839      	ldr	r1, [r7, #0]
 801980c:	6878      	ldr	r0, [r7, #4]
 801980e:	f7ff ff8e 	bl	801972e <modcmp>
 8019812:	4603      	mov	r3, r0
 8019814:	425b      	negs	r3, r3
}
 8019816:	4618      	mov	r0, r3
 8019818:	3708      	adds	r7, #8
 801981a:	46bd      	mov	sp, r7
 801981c:	bd80      	pop	{r7, pc}

0801981e <fp_is_zero>:

uint32_t
fp_is_zero(const fp_t *a)
{
 801981e:	b580      	push	{r7, lr}
 8019820:	b082      	sub	sp, #8
 8019822:	af00      	add	r7, sp, #0
 8019824:	6078      	str	r0, [r7, #4]
    return -(uint32_t)modis0(*a);
 8019826:	6878      	ldr	r0, [r7, #4]
 8019828:	f7ff fd99 	bl	801935e <modis0>
 801982c:	4603      	mov	r3, r0
 801982e:	425b      	negs	r3, r3
}
 8019830:	4618      	mov	r0, r3
 8019832:	3708      	adds	r7, #8
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}

08019838 <fp_copy>:

void
fp_copy(fp_t *out, const fp_t *a)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
 8019840:	6039      	str	r1, [r7, #0]
    modcpy(*a, *out);
 8019842:	6879      	ldr	r1, [r7, #4]
 8019844:	6838      	ldr	r0, [r7, #0]
 8019846:	f7ff fb8d 	bl	8018f64 <modcpy>
}
 801984a:	bf00      	nop
 801984c:	3708      	adds	r7, #8
 801984e:	46bd      	mov	sp, r7
 8019850:	bd80      	pop	{r7, pc}

08019852 <fp_cswap>:

void
fp_cswap(fp_t *a, fp_t *b, uint32_t ctl)
{
 8019852:	b580      	push	{r7, lr}
 8019854:	b084      	sub	sp, #16
 8019856:	af00      	add	r7, sp, #0
 8019858:	60f8      	str	r0, [r7, #12]
 801985a:	60b9      	str	r1, [r7, #8]
 801985c:	607a      	str	r2, [r7, #4]
    modcsw((int)(ctl & 0x1), *a, *b);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	f003 0301 	and.w	r3, r3, #1
 8019864:	68ba      	ldr	r2, [r7, #8]
 8019866:	68f9      	ldr	r1, [r7, #12]
 8019868:	4618      	mov	r0, r3
 801986a:	f7ff fe41 	bl	80194f0 <modcsw>
}
 801986e:	bf00      	nop
 8019870:	3710      	adds	r7, #16
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}

08019876 <fp_add>:

void
fp_add(fp_t *out, const fp_t *a, const fp_t *b)
{
 8019876:	b580      	push	{r7, lr}
 8019878:	b084      	sub	sp, #16
 801987a:	af00      	add	r7, sp, #0
 801987c:	60f8      	str	r0, [r7, #12]
 801987e:	60b9      	str	r1, [r7, #8]
 8019880:	607a      	str	r2, [r7, #4]
    modadd(*a, *b, *out);
 8019882:	68fa      	ldr	r2, [r7, #12]
 8019884:	6879      	ldr	r1, [r7, #4]
 8019886:	68b8      	ldr	r0, [r7, #8]
 8019888:	f7f9 fe18 	bl	80134bc <modadd>
}
 801988c:	bf00      	nop
 801988e:	3710      	adds	r7, #16
 8019890:	46bd      	mov	sp, r7
 8019892:	bd80      	pop	{r7, pc}

08019894 <fp_sub>:

void
fp_sub(fp_t *out, const fp_t *a, const fp_t *b)
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b084      	sub	sp, #16
 8019898:	af00      	add	r7, sp, #0
 801989a:	60f8      	str	r0, [r7, #12]
 801989c:	60b9      	str	r1, [r7, #8]
 801989e:	607a      	str	r2, [r7, #4]
    modsub(*a, *b, *out);
 80198a0:	68fa      	ldr	r2, [r7, #12]
 80198a2:	6879      	ldr	r1, [r7, #4]
 80198a4:	68b8      	ldr	r0, [r7, #8]
 80198a6:	f7f9 fe90 	bl	80135ca <modsub>
}
 80198aa:	bf00      	nop
 80198ac:	3710      	adds	r7, #16
 80198ae:	46bd      	mov	sp, r7
 80198b0:	bd80      	pop	{r7, pc}

080198b2 <fp_neg>:

void
fp_neg(fp_t *out, const fp_t *a)
{
 80198b2:	b580      	push	{r7, lr}
 80198b4:	b082      	sub	sp, #8
 80198b6:	af00      	add	r7, sp, #0
 80198b8:	6078      	str	r0, [r7, #4]
 80198ba:	6039      	str	r1, [r7, #0]
    modneg(*a, *out);
 80198bc:	6879      	ldr	r1, [r7, #4]
 80198be:	6838      	ldr	r0, [r7, #0]
 80198c0:	f7f9 fefd 	bl	80136be <modneg>
}
 80198c4:	bf00      	nop
 80198c6:	3708      	adds	r7, #8
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}

080198cc <fp_sqr>:

void
fp_sqr(fp_t *out, const fp_t *a)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b082      	sub	sp, #8
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
 80198d4:	6039      	str	r1, [r7, #0]
    modsqr(*a, *out);
 80198d6:	6879      	ldr	r1, [r7, #4]
 80198d8:	6838      	ldr	r0, [r7, #0]
 80198da:	f7fd f9a4 	bl	8016c26 <modsqr>
}
 80198de:	bf00      	nop
 80198e0:	3708      	adds	r7, #8
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd80      	pop	{r7, pc}

080198e6 <fp_mul>:

void
fp_mul(fp_t *out, const fp_t *a, const fp_t *b)
{
 80198e6:	b580      	push	{r7, lr}
 80198e8:	b084      	sub	sp, #16
 80198ea:	af00      	add	r7, sp, #0
 80198ec:	60f8      	str	r0, [r7, #12]
 80198ee:	60b9      	str	r1, [r7, #8]
 80198f0:	607a      	str	r2, [r7, #4]
    modmul(*a, *b, *out);
 80198f2:	68fa      	ldr	r2, [r7, #12]
 80198f4:	6879      	ldr	r1, [r7, #4]
 80198f6:	68b8      	ldr	r0, [r7, #8]
 80198f8:	f7f9 ff40 	bl	801377c <modmul>
}
 80198fc:	bf00      	nop
 80198fe:	3710      	adds	r7, #16
 8019900:	46bd      	mov	sp, r7
 8019902:	bd80      	pop	{r7, pc}

08019904 <fp_inv>:

void
fp_inv(fp_t *x)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
    modinv(*x, NULL, *x);
 801990c:	687a      	ldr	r2, [r7, #4]
 801990e:	2100      	movs	r1, #0
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f7ff fc86 	bl	8019222 <modinv>
}
 8019916:	bf00      	nop
 8019918:	3708      	adds	r7, #8
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}

0801991e <fp_is_square>:

uint32_t
fp_is_square(const fp_t *a)
{
 801991e:	b580      	push	{r7, lr}
 8019920:	b082      	sub	sp, #8
 8019922:	af00      	add	r7, sp, #0
 8019924:	6078      	str	r0, [r7, #4]
    return -(uint32_t)modqr(NULL, *a);
 8019926:	6879      	ldr	r1, [r7, #4]
 8019928:	2000      	movs	r0, #0
 801992a:	f7ff fdad 	bl	8019488 <modqr>
 801992e:	4603      	mov	r3, r0
 8019930:	425b      	negs	r3, r3
}
 8019932:	4618      	mov	r0, r3
 8019934:	3708      	adds	r7, #8
 8019936:	46bd      	mov	sp, r7
 8019938:	bd80      	pop	{r7, pc}

0801993a <fp_sqrt>:

void
fp_sqrt(fp_t *a)
{
 801993a:	b580      	push	{r7, lr}
 801993c:	b082      	sub	sp, #8
 801993e:	af00      	add	r7, sp, #0
 8019940:	6078      	str	r0, [r7, #4]
    modsqrt(*a, NULL, *a);
 8019942:	687a      	ldr	r2, [r7, #4]
 8019944:	2100      	movs	r1, #0
 8019946:	6878      	ldr	r0, [r7, #4]
 8019948:	f7ff fe3c 	bl	80195c4 <modsqrt>
}
 801994c:	bf00      	nop
 801994e:	3708      	adds	r7, #8
 8019950:	46bd      	mov	sp, r7
 8019952:	bd80      	pop	{r7, pc}

08019954 <fp_half>:

void
fp_half(fp_t *out, const fp_t *a)
{
 8019954:	b580      	push	{r7, lr}
 8019956:	b082      	sub	sp, #8
 8019958:	af00      	add	r7, sp, #0
 801995a:	6078      	str	r0, [r7, #4]
 801995c:	6039      	str	r1, [r7, #0]
    modmul(TWO_INV, *a, *out);
 801995e:	687a      	ldr	r2, [r7, #4]
 8019960:	6839      	ldr	r1, [r7, #0]
 8019962:	4803      	ldr	r0, [pc, #12]	@ (8019970 <fp_half+0x1c>)
 8019964:	f7f9 ff0a 	bl	801377c <modmul>
}
 8019968:	bf00      	nop
 801996a:	3708      	adds	r7, #8
 801996c:	46bd      	mov	sp, r7
 801996e:	bd80      	pop	{r7, pc}
 8019970:	0803b3d4 	.word	0x0803b3d4

08019974 <fp_exp3div4>:

void
fp_exp3div4(fp_t *out, const fp_t *a)
{
 8019974:	b580      	push	{r7, lr}
 8019976:	b082      	sub	sp, #8
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
 801997c:	6039      	str	r1, [r7, #0]
    modpro(*a, *out);
 801997e:	6879      	ldr	r1, [r7, #4]
 8019980:	6838      	ldr	r0, [r7, #0]
 8019982:	f7ff fb26 	bl	8018fd2 <modpro>
}
 8019986:	bf00      	nop
 8019988:	3708      	adds	r7, #8
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}
	...

08019990 <fp_div3>:

void
fp_div3(fp_t *out, const fp_t *a)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b082      	sub	sp, #8
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
 8019998:	6039      	str	r1, [r7, #0]
    modmul(THREE_INV, *a, *out);
 801999a:	687a      	ldr	r2, [r7, #4]
 801999c:	6839      	ldr	r1, [r7, #0]
 801999e:	4803      	ldr	r0, [pc, #12]	@ (80199ac <fp_div3+0x1c>)
 80199a0:	f7f9 feec 	bl	801377c <modmul>
}
 80199a4:	bf00      	nop
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	0803b3f8 	.word	0x0803b3f8

080199b0 <fp_encode>:

void
fp_encode(void *dst, const fp_t *a)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b08c      	sub	sp, #48	@ 0x30
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6039      	str	r1, [r7, #0]
    // Modified version of modexp()
    int i;
    spint c[9];
    redc(*a, c);
 80199ba:	f107 0308 	add.w	r3, r7, #8
 80199be:	4619      	mov	r1, r3
 80199c0:	6838      	ldr	r0, [r7, #0]
 80199c2:	f7ff fc79 	bl	80192b8 <redc>
    for (i = 0; i < 32; i++) {
 80199c6:	2300      	movs	r3, #0
 80199c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80199ca:	e00e      	b.n	80199ea <fp_encode+0x3a>
        ((char *)dst)[i] = c[0] & (spint)0xff;
 80199cc:	68b9      	ldr	r1, [r7, #8]
 80199ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199d0:	687a      	ldr	r2, [r7, #4]
 80199d2:	4413      	add	r3, r2
 80199d4:	b2ca      	uxtb	r2, r1
 80199d6:	701a      	strb	r2, [r3, #0]
        (void)modshr(8, c);
 80199d8:	f107 0308 	add.w	r3, r7, #8
 80199dc:	4619      	mov	r1, r3
 80199de:	2008      	movs	r0, #8
 80199e0:	f7ff fe62 	bl	80196a8 <modshr>
    for (i = 0; i < 32; i++) {
 80199e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199e6:	3301      	adds	r3, #1
 80199e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80199ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199ec:	2b1f      	cmp	r3, #31
 80199ee:	dded      	ble.n	80199cc <fp_encode+0x1c>
    }
}
 80199f0:	bf00      	nop
 80199f2:	bf00      	nop
 80199f4:	3730      	adds	r7, #48	@ 0x30
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd80      	pop	{r7, pc}

080199fa <fp_decode>:

uint32_t
fp_decode(fp_t *d, const void *src)
{
 80199fa:	b580      	push	{r7, lr}
 80199fc:	b086      	sub	sp, #24
 80199fe:	af00      	add	r7, sp, #0
 8019a00:	6078      	str	r0, [r7, #4]
 8019a02:	6039      	str	r1, [r7, #0]
    // Modified version of modimp()
    int i;
    spint res;
    const unsigned char *b = src;
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	613b      	str	r3, [r7, #16]
    for (i = 0; i < 9; i++) {
 8019a08:	2300      	movs	r3, #0
 8019a0a:	617b      	str	r3, [r7, #20]
 8019a0c:	e007      	b.n	8019a1e <fp_decode+0x24>
        (*d)[i] = 0;
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	697a      	ldr	r2, [r7, #20]
 8019a12:	2100      	movs	r1, #0
 8019a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 9; i++) {
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	3301      	adds	r3, #1
 8019a1c:	617b      	str	r3, [r7, #20]
 8019a1e:	697b      	ldr	r3, [r7, #20]
 8019a20:	2b08      	cmp	r3, #8
 8019a22:	ddf4      	ble.n	8019a0e <fp_decode+0x14>
    }
    for (i = 31; i >= 0; i--) {
 8019a24:	231f      	movs	r3, #31
 8019a26:	617b      	str	r3, [r7, #20]
 8019a28:	e00f      	b.n	8019a4a <fp_decode+0x50>
        modshl(8, *d);
 8019a2a:	6879      	ldr	r1, [r7, #4]
 8019a2c:	2008      	movs	r0, #8
 8019a2e:	f7ff fdf1 	bl	8019614 <modshl>
        (*d)[0] += (spint)b[i];
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	697a      	ldr	r2, [r7, #20]
 8019a38:	6939      	ldr	r1, [r7, #16]
 8019a3a:	440a      	add	r2, r1
 8019a3c:	7812      	ldrb	r2, [r2, #0]
 8019a3e:	441a      	add	r2, r3
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	601a      	str	r2, [r3, #0]
    for (i = 31; i >= 0; i--) {
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	3b01      	subs	r3, #1
 8019a48:	617b      	str	r3, [r7, #20]
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	daec      	bge.n	8019a2a <fp_decode+0x30>
    }
    res = (spint)-modfsb(*d);
 8019a50:	6878      	ldr	r0, [r7, #4]
 8019a52:	f7f9 fd1a 	bl	801348a <modfsb>
 8019a56:	4603      	mov	r3, r0
 8019a58:	425b      	negs	r3, r3
 8019a5a:	60fb      	str	r3, [r7, #12]
    nres(*d, *d);
 8019a5c:	6879      	ldr	r1, [r7, #4]
 8019a5e:	6878      	ldr	r0, [r7, #4]
 8019a60:	f7ff fc0e 	bl	8019280 <nres>
    // If the value was canonical then res = -1; otherwise, res = 0
    for (i = 0; i < 9; i++) {
 8019a64:	2300      	movs	r3, #0
 8019a66:	617b      	str	r3, [r7, #20]
 8019a68:	e00d      	b.n	8019a86 <fp_decode+0x8c>
        (*d)[i] &= res;
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	697a      	ldr	r2, [r7, #20]
 8019a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	ea02 0103 	and.w	r1, r2, r3
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	697a      	ldr	r2, [r7, #20]
 8019a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 9; i++) {
 8019a80:	697b      	ldr	r3, [r7, #20]
 8019a82:	3301      	adds	r3, #1
 8019a84:	617b      	str	r3, [r7, #20]
 8019a86:	697b      	ldr	r3, [r7, #20]
 8019a88:	2b08      	cmp	r3, #8
 8019a8a:	ddee      	ble.n	8019a6a <fp_decode+0x70>
    }
    return (uint32_t)res;
 8019a8c:	68fb      	ldr	r3, [r7, #12]
}
 8019a8e:	4618      	mov	r0, r3
 8019a90:	3718      	adds	r7, #24
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bd80      	pop	{r7, pc}

08019a96 <copy_point>:
{
 8019a96:	b580      	push	{r7, lr}
 8019a98:	b082      	sub	sp, #8
 8019a9a:	af00      	add	r7, sp, #0
 8019a9c:	6078      	str	r0, [r7, #4]
 8019a9e:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	683a      	ldr	r2, [r7, #0]
 8019aa4:	4611      	mov	r1, r2
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7f8 ffc0 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8019ab2:	683b      	ldr	r3, [r7, #0]
 8019ab4:	3348      	adds	r3, #72	@ 0x48
 8019ab6:	4619      	mov	r1, r3
 8019ab8:	4610      	mov	r0, r2
 8019aba:	f7f8 ffb7 	bl	8012a2c <fp2_copy>
}
 8019abe:	bf00      	nop
 8019ac0:	3708      	adds	r7, #8
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}

08019ac6 <double_couple_point>:
#include "hd.h"
#include <assert.h>

void
double_couple_point(theta_couple_point_t *out, const theta_couple_point_t *in, const theta_couple_curve_t *E1E2)
{
 8019ac6:	b580      	push	{r7, lr}
 8019ac8:	b084      	sub	sp, #16
 8019aca:	af00      	add	r7, sp, #0
 8019acc:	60f8      	str	r0, [r7, #12]
 8019ace:	60b9      	str	r1, [r7, #8]
 8019ad0:	607a      	str	r2, [r7, #4]
    ec_dbl(&out->P1, &in->P1, &E1E2->E1);
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	68b9      	ldr	r1, [r7, #8]
 8019ad6:	687a      	ldr	r2, [r7, #4]
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f7f2 ffe7 	bl	800caac <ec_dbl>
    ec_dbl(&out->P2, &in->P2, &E1E2->E2);
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8019af0:	461a      	mov	r2, r3
 8019af2:	f7f2 ffdb 	bl	800caac <ec_dbl>
}
 8019af6:	bf00      	nop
 8019af8:	3710      	adds	r7, #16
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}

08019afe <double_couple_point_iter>:
void
double_couple_point_iter(theta_couple_point_t *out,
                         unsigned n,
                         const theta_couple_point_t *in,
                         const theta_couple_curve_t *E1E2)
{
 8019afe:	b580      	push	{r7, lr}
 8019b00:	b086      	sub	sp, #24
 8019b02:	af00      	add	r7, sp, #0
 8019b04:	60f8      	str	r0, [r7, #12]
 8019b06:	60b9      	str	r1, [r7, #8]
 8019b08:	607a      	str	r2, [r7, #4]
 8019b0a:	603b      	str	r3, [r7, #0]
    if (n == 0) {
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d106      	bne.n	8019b20 <double_couple_point_iter+0x22>
        memmove(out, in, sizeof(theta_couple_point_t));
 8019b12:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8019b16:	6879      	ldr	r1, [r7, #4]
 8019b18:	68f8      	ldr	r0, [r7, #12]
 8019b1a:	f01c f857 	bl	8035bcc <memmove>
        double_couple_point(out, in, E1E2);
        for (unsigned i = 0; i < n - 1; i++) {
            double_couple_point(out, out, E1E2);
        }
    }
}
 8019b1e:	e014      	b.n	8019b4a <double_couple_point_iter+0x4c>
        double_couple_point(out, in, E1E2);
 8019b20:	683a      	ldr	r2, [r7, #0]
 8019b22:	6879      	ldr	r1, [r7, #4]
 8019b24:	68f8      	ldr	r0, [r7, #12]
 8019b26:	f7ff ffce 	bl	8019ac6 <double_couple_point>
        for (unsigned i = 0; i < n - 1; i++) {
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	617b      	str	r3, [r7, #20]
 8019b2e:	e007      	b.n	8019b40 <double_couple_point_iter+0x42>
            double_couple_point(out, out, E1E2);
 8019b30:	683a      	ldr	r2, [r7, #0]
 8019b32:	68f9      	ldr	r1, [r7, #12]
 8019b34:	68f8      	ldr	r0, [r7, #12]
 8019b36:	f7ff ffc6 	bl	8019ac6 <double_couple_point>
        for (unsigned i = 0; i < n - 1; i++) {
 8019b3a:	697b      	ldr	r3, [r7, #20]
 8019b3c:	3301      	adds	r3, #1
 8019b3e:	617b      	str	r3, [r7, #20]
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	3b01      	subs	r3, #1
 8019b44:	697a      	ldr	r2, [r7, #20]
 8019b46:	429a      	cmp	r2, r3
 8019b48:	d3f2      	bcc.n	8019b30 <double_couple_point_iter+0x32>
}
 8019b4a:	bf00      	nop
 8019b4c:	3718      	adds	r7, #24
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}

08019b52 <double_couple_jac_point>:

void
double_couple_jac_point(theta_couple_jac_point_t *out,
                        const theta_couple_jac_point_t *in,
                        const theta_couple_curve_t *E1E2)
{
 8019b52:	b580      	push	{r7, lr}
 8019b54:	b084      	sub	sp, #16
 8019b56:	af00      	add	r7, sp, #0
 8019b58:	60f8      	str	r0, [r7, #12]
 8019b5a:	60b9      	str	r1, [r7, #8]
 8019b5c:	607a      	str	r2, [r7, #4]
    DBL(&out->P1, &in->P1, &E1E2->E1);
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	68b9      	ldr	r1, [r7, #8]
 8019b62:	687a      	ldr	r2, [r7, #4]
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7f3 fa9f 	bl	800d0a8 <DBL>
    DBL(&out->P2, &in->P2, &E1E2->E2);
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8019b7c:	461a      	mov	r2, r3
 8019b7e:	f7f3 fa93 	bl	800d0a8 <DBL>
}
 8019b82:	bf00      	nop
 8019b84:	3710      	adds	r7, #16
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <double_couple_jac_point_iter>:
void
double_couple_jac_point_iter(theta_couple_jac_point_t *out,
                             unsigned n,
                             const theta_couple_jac_point_t *in,
                             const theta_couple_curve_t *E1E2)
{
 8019b8a:	b590      	push	{r4, r7, lr}
 8019b8c:	b0d1      	sub	sp, #324	@ 0x144
 8019b8e:	af02      	add	r7, sp, #8
 8019b90:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8019b94:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8019b98:	6020      	str	r0, [r4, #0]
 8019b9a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8019b9e:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8019ba2:	6001      	str	r1, [r0, #0]
 8019ba4:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8019ba8:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8019bac:	600a      	str	r2, [r1, #0]
 8019bae:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8019bb2:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8019bb6:	6013      	str	r3, [r2, #0]
    if (n == 0) {
 8019bb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019bbc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d111      	bne.n	8019bea <double_couple_jac_point_iter+0x60>
        *out = *in;
 8019bc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019bca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019bce:	681a      	ldr	r2, [r3, #0]
 8019bd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019bd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	4610      	mov	r0, r2
 8019bdc:	4619      	mov	r1, r3
 8019bde:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8019be2:	461a      	mov	r2, r3
 8019be4:	f01c f8db 	bl	8035d9e <memcpy>
        }

        jac_from_ws(&out->P1, &out->P1, &a1, &E1E2->E1);
        jac_from_ws(&out->P2, &out->P2, &a2, &E1E2->E2);
    }
}
 8019be8:	e0d3      	b.n	8019d92 <double_couple_jac_point_iter+0x208>
    } else if (n == 1) {
 8019bea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019bee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	2b01      	cmp	r3, #1
 8019bf6:	d111      	bne.n	8019c1c <double_couple_jac_point_iter+0x92>
        double_couple_jac_point(out, in, E1E2);
 8019bf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019bfc:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8019c00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c04:	f5a3 719a 	sub.w	r1, r3, #308	@ 0x134
 8019c08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019c10:	6812      	ldr	r2, [r2, #0]
 8019c12:	6809      	ldr	r1, [r1, #0]
 8019c14:	6818      	ldr	r0, [r3, #0]
 8019c16:	f7ff ff9c 	bl	8019b52 <double_couple_jac_point>
}
 8019c1a:	e0ba      	b.n	8019d92 <double_couple_jac_point_iter+0x208>
        jac_to_ws(&out->P1, &t1, &a1, &in->P1, &E1E2->E1);
 8019c1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019c24:	6818      	ldr	r0, [r3, #0]
 8019c26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8019c2e:	681c      	ldr	r4, [r3, #0]
 8019c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c34:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	f107 0214 	add.w	r2, r7, #20
 8019c3e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8019c42:	9300      	str	r3, [sp, #0]
 8019c44:	4623      	mov	r3, r4
 8019c46:	f7f3 f94d 	bl	800cee4 <jac_to_ws>
        jac_to_ws(&out->P2, &t2, &a2, &in->P2, &E1E2->E2);
 8019c4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8019c58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	f103 04d8 	add.w	r4, r3, #216	@ 0xd8
 8019c66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8019c74:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8019c78:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8019c7c:	9300      	str	r3, [sp, #0]
 8019c7e:	4623      	mov	r3, r4
 8019c80:	f7f3 f930 	bl	800cee4 <jac_to_ws>
        DBLW(&out->P1, &t1, &out->P1, &t1);
 8019c84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019c8c:	6818      	ldr	r0, [r3, #0]
 8019c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019c92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019c96:	681a      	ldr	r2, [r3, #0]
 8019c98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8019c9c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8019ca0:	f7f3 fbb6 	bl	800d410 <DBLW>
        DBLW(&out->P2, &t2, &out->P2, &t2);
 8019ca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8019cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019cb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8019cc0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8019cc4:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8019cc8:	f7f3 fba2 	bl	800d410 <DBLW>
        for (unsigned i = 0; i < n - 1; i++) {
 8019ccc:	2300      	movs	r3, #0
 8019cce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8019cd2:	e028      	b.n	8019d26 <double_couple_jac_point_iter+0x19c>
            DBLW(&out->P1, &t1, &out->P1, &t1);
 8019cd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019cd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019cdc:	6818      	ldr	r0, [r3, #0]
 8019cde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019ce2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019ce6:	681a      	ldr	r2, [r3, #0]
 8019ce8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8019cec:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8019cf0:	f7f3 fb8e 	bl	800d410 <DBLW>
            DBLW(&out->P2, &t2, &out->P2, &t2);
 8019cf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019cf8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8019d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8019d10:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8019d14:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8019d18:	f7f3 fb7a 	bl	800d410 <DBLW>
        for (unsigned i = 0; i < n - 1; i++) {
 8019d1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8019d20:	3301      	adds	r3, #1
 8019d22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8019d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	3b01      	subs	r3, #1
 8019d32:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019d36:	429a      	cmp	r2, r3
 8019d38:	d3cc      	bcc.n	8019cd4 <double_couple_jac_point_iter+0x14a>
        jac_from_ws(&out->P1, &out->P1, &a1, &E1E2->E1);
 8019d3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019d42:	6818      	ldr	r0, [r3, #0]
 8019d44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019d4c:	6819      	ldr	r1, [r3, #0]
 8019d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	f107 0214 	add.w	r2, r7, #20
 8019d5c:	f7f3 f947 	bl	800cfee <jac_from_ws>
        jac_from_ws(&out->P2, &out->P2, &a2, &E1E2->E2);
 8019d60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8019d6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8019d7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019d80:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8019d8a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8019d8e:	f7f3 f92e 	bl	800cfee <jac_from_ws>
}
 8019d92:	bf00      	nop
 8019d94:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd90      	pop	{r4, r7, pc}

08019d9c <couple_jac_to_xz>:

void
couple_jac_to_xz(theta_couple_point_t *P, const theta_couple_jac_point_t *xyP)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
 8019da4:	6039      	str	r1, [r7, #0]
    jac_to_xz(&P->P1, &xyP->P1);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	683a      	ldr	r2, [r7, #0]
 8019daa:	4611      	mov	r1, r2
 8019dac:	4618      	mov	r0, r3
 8019dae:	f7f3 f85f 	bl	800ce70 <jac_to_xz>
    jac_to_xz(&P->P2, &xyP->P2);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	33d8      	adds	r3, #216	@ 0xd8
 8019dbc:	4619      	mov	r1, r3
 8019dbe:	4610      	mov	r0, r2
 8019dc0:	f7f3 f856 	bl	800ce70 <jac_to_xz>
}
 8019dc4:	bf00      	nop
 8019dc6:	3708      	adds	r7, #8
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}

08019dcc <copy_bases_to_kernel>:

void
copy_bases_to_kernel(theta_kernel_couple_points_t *ker, const ec_basis_t *B1, const ec_basis_t *B2)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b084      	sub	sp, #16
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	60f8      	str	r0, [r7, #12]
 8019dd4:	60b9      	str	r1, [r7, #8]
 8019dd6:	607a      	str	r2, [r7, #4]
    // Copy the basis on E1 to (P, _) on T1, T2 and T1 - T2
    copy_point(&ker->T1.P1, &B1->P);
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	68ba      	ldr	r2, [r7, #8]
 8019ddc:	4611      	mov	r1, r2
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7ff fe59 	bl	8019a96 <copy_point>
    copy_point(&ker->T2.P1, &B1->Q);
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8019dea:	68bb      	ldr	r3, [r7, #8]
 8019dec:	3390      	adds	r3, #144	@ 0x90
 8019dee:	4619      	mov	r1, r3
 8019df0:	4610      	mov	r0, r2
 8019df2:	f7ff fe50 	bl	8019a96 <copy_point>
    copy_point(&ker->T1m2.P1, &B1->PmQ);
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 8019dfc:	68bb      	ldr	r3, [r7, #8]
 8019dfe:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8019e02:	4619      	mov	r1, r3
 8019e04:	4610      	mov	r0, r2
 8019e06:	f7ff fe46 	bl	8019a96 <copy_point>

    // Copy the basis on E2 to (_, P) on T1, T2 and T1 - T2
    copy_point(&ker->T1.P2, &B2->P);
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	3390      	adds	r3, #144	@ 0x90
 8019e0e:	687a      	ldr	r2, [r7, #4]
 8019e10:	4611      	mov	r1, r2
 8019e12:	4618      	mov	r0, r3
 8019e14:	f7ff fe3f 	bl	8019a96 <copy_point>
    copy_point(&ker->T2.P2, &B2->Q);
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	3390      	adds	r3, #144	@ 0x90
 8019e22:	4619      	mov	r1, r3
 8019e24:	4610      	mov	r0, r2
 8019e26:	f7ff fe36 	bl	8019a96 <copy_point>
    copy_point(&ker->T1m2.P2, &B2->PmQ);
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	f503 7234 	add.w	r2, r3, #720	@ 0x2d0
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8019e36:	4619      	mov	r1, r3
 8019e38:	4610      	mov	r0, r2
 8019e3a:	f7ff fe2c 	bl	8019a96 <copy_point>
}
 8019e3e:	bf00      	nop
 8019e40:	3710      	adds	r7, #16
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}

08019e46 <sqisign_gen_ibz_vec_4_linear_combination_mod>:
                                 const ibz_t *coeff_a,
                                 const ibz_vec_4_t *vec_a,
                                 const ibz_t *coeff_b,
                                 const ibz_vec_4_t *vec_b,
                                 const ibz_t *mod)
{
 8019e46:	b580      	push	{r7, lr}
 8019e48:	b098      	sub	sp, #96	@ 0x60
 8019e4a:	af00      	add	r7, sp, #0
 8019e4c:	60f8      	str	r0, [r7, #12]
 8019e4e:	60b9      	str	r1, [r7, #8]
 8019e50:	607a      	str	r2, [r7, #4]
 8019e52:	603b      	str	r3, [r7, #0]
    ibz_t prod, m;
    ibz_vec_4_t sums;
    ibz_vec_4_init(&sums);
 8019e54:	f107 0310 	add.w	r3, r7, #16
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f7f4 ffda 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_init(&prod);
 8019e5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019e62:	4618      	mov	r0, r3
 8019e64:	f003 f8cf 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&m);
 8019e68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f003 f8ca 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_copy(&m, mod);
 8019e72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019e76:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f003 f9ff 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 8019e7e:	2300      	movs	r3, #0
 8019e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019e82:	e04c      	b.n	8019f1e <sqisign_gen_ibz_vec_4_linear_combination_mod+0xd8>
        ibz_mul(&(sums[i]), coeff_a, &((*vec_a)[i]));
 8019e84:	f107 0110 	add.w	r1, r7, #16
 8019e88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019e8a:	4613      	mov	r3, r2
 8019e8c:	005b      	lsls	r3, r3, #1
 8019e8e:	4413      	add	r3, r2
 8019e90:	009b      	lsls	r3, r3, #2
 8019e92:	18c8      	adds	r0, r1, r3
 8019e94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019e96:	4613      	mov	r3, r2
 8019e98:	005b      	lsls	r3, r3, #1
 8019e9a:	4413      	add	r3, r2
 8019e9c:	009b      	lsls	r3, r3, #2
 8019e9e:	687a      	ldr	r2, [r7, #4]
 8019ea0:	4413      	add	r3, r2
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	68b9      	ldr	r1, [r7, #8]
 8019ea6:	f003 f8e2 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&prod, coeff_b, &((*vec_b)[i]));
 8019eaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019eac:	4613      	mov	r3, r2
 8019eae:	005b      	lsls	r3, r3, #1
 8019eb0:	4413      	add	r3, r2
 8019eb2:	009b      	lsls	r3, r3, #2
 8019eb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8019eb6:	441a      	add	r2, r3
 8019eb8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019ebc:	6839      	ldr	r1, [r7, #0]
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	f003 f8d5 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_add(&(sums[i]), &(sums[i]), &prod);
 8019ec4:	f107 0110 	add.w	r1, r7, #16
 8019ec8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019eca:	4613      	mov	r3, r2
 8019ecc:	005b      	lsls	r3, r3, #1
 8019ece:	4413      	add	r3, r2
 8019ed0:	009b      	lsls	r3, r3, #2
 8019ed2:	18c8      	adds	r0, r1, r3
 8019ed4:	f107 0110 	add.w	r1, r7, #16
 8019ed8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019eda:	4613      	mov	r3, r2
 8019edc:	005b      	lsls	r3, r3, #1
 8019ede:	4413      	add	r3, r2
 8019ee0:	009b      	lsls	r3, r3, #2
 8019ee2:	440b      	add	r3, r1
 8019ee4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8019ee8:	4619      	mov	r1, r3
 8019eea:	f003 f8a2 	bl	801d032 <sqisign_gen_ibz_add>
        ibz_centered_mod(&(sums[i]), &(sums[i]), &m);
 8019eee:	f107 0110 	add.w	r1, r7, #16
 8019ef2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019ef4:	4613      	mov	r3, r2
 8019ef6:	005b      	lsls	r3, r3, #1
 8019ef8:	4413      	add	r3, r2
 8019efa:	009b      	lsls	r3, r3, #2
 8019efc:	18c8      	adds	r0, r1, r3
 8019efe:	f107 0110 	add.w	r1, r7, #16
 8019f02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019f04:	4613      	mov	r3, r2
 8019f06:	005b      	lsls	r3, r3, #1
 8019f08:	4413      	add	r3, r2
 8019f0a:	009b      	lsls	r3, r3, #2
 8019f0c:	440b      	add	r3, r1
 8019f0e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8019f12:	4619      	mov	r1, r3
 8019f14:	f000 fd26 	bl	801a964 <sqisign_gen_ibz_centered_mod>
    for (int i = 0; i < 4; i++) {
 8019f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f1a:	3301      	adds	r3, #1
 8019f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f20:	2b03      	cmp	r3, #3
 8019f22:	ddaf      	ble.n	8019e84 <sqisign_gen_ibz_vec_4_linear_combination_mod+0x3e>
    }
    for (int i = 0; i < 4; i++) {
 8019f24:	2300      	movs	r3, #0
 8019f26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019f28:	e014      	b.n	8019f54 <sqisign_gen_ibz_vec_4_linear_combination_mod+0x10e>
        ibz_copy(&((*lc)[i]), &(sums[i]));
 8019f2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019f2c:	4613      	mov	r3, r2
 8019f2e:	005b      	lsls	r3, r3, #1
 8019f30:	4413      	add	r3, r2
 8019f32:	009b      	lsls	r3, r3, #2
 8019f34:	68fa      	ldr	r2, [r7, #12]
 8019f36:	18d0      	adds	r0, r2, r3
 8019f38:	f107 0110 	add.w	r1, r7, #16
 8019f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019f3e:	4613      	mov	r3, r2
 8019f40:	005b      	lsls	r3, r3, #1
 8019f42:	4413      	add	r3, r2
 8019f44:	009b      	lsls	r3, r3, #2
 8019f46:	440b      	add	r3, r1
 8019f48:	4619      	mov	r1, r3
 8019f4a:	f003 f997 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 8019f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019f50:	3301      	adds	r3, #1
 8019f52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019f56:	2b03      	cmp	r3, #3
 8019f58:	dde7      	ble.n	8019f2a <sqisign_gen_ibz_vec_4_linear_combination_mod+0xe4>
    }
    ibz_finalize(&prod);
 8019f5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f003 f85c 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&m);
 8019f64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f003 f857 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&sums);
 8019f6e:	f107 0310 	add.w	r3, r7, #16
 8019f72:	4618      	mov	r0, r3
 8019f74:	f7f4 ff69 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 8019f78:	bf00      	nop
 8019f7a:	3760      	adds	r7, #96	@ 0x60
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bd80      	pop	{r7, pc}

08019f80 <sqisign_gen_ibz_vec_4_copy_mod>:

void
ibz_vec_4_copy_mod(ibz_vec_4_t *res, const ibz_vec_4_t *vec, const ibz_t *mod)
{
 8019f80:	b580      	push	{r7, lr}
 8019f82:	b088      	sub	sp, #32
 8019f84:	af00      	add	r7, sp, #0
 8019f86:	60f8      	str	r0, [r7, #12]
 8019f88:	60b9      	str	r1, [r7, #8]
 8019f8a:	607a      	str	r2, [r7, #4]
    ibz_t m;
    ibz_init(&m);
 8019f8c:	f107 0310 	add.w	r3, r7, #16
 8019f90:	4618      	mov	r0, r3
 8019f92:	f003 f838 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_copy(&m, mod);
 8019f96:	f107 0310 	add.w	r3, r7, #16
 8019f9a:	6879      	ldr	r1, [r7, #4]
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f003 f96d 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	61fb      	str	r3, [r7, #28]
 8019fa6:	e015      	b.n	8019fd4 <sqisign_gen_ibz_vec_4_copy_mod+0x54>
        ibz_centered_mod(&((*res)[i]), &((*vec)[i]), &m);
 8019fa8:	69fa      	ldr	r2, [r7, #28]
 8019faa:	4613      	mov	r3, r2
 8019fac:	005b      	lsls	r3, r3, #1
 8019fae:	4413      	add	r3, r2
 8019fb0:	009b      	lsls	r3, r3, #2
 8019fb2:	68fa      	ldr	r2, [r7, #12]
 8019fb4:	18d0      	adds	r0, r2, r3
 8019fb6:	69fa      	ldr	r2, [r7, #28]
 8019fb8:	4613      	mov	r3, r2
 8019fba:	005b      	lsls	r3, r3, #1
 8019fbc:	4413      	add	r3, r2
 8019fbe:	009b      	lsls	r3, r3, #2
 8019fc0:	68ba      	ldr	r2, [r7, #8]
 8019fc2:	4413      	add	r3, r2
 8019fc4:	f107 0210 	add.w	r2, r7, #16
 8019fc8:	4619      	mov	r1, r3
 8019fca:	f000 fccb 	bl	801a964 <sqisign_gen_ibz_centered_mod>
    for (int i = 0; i < 4; i++) {
 8019fce:	69fb      	ldr	r3, [r7, #28]
 8019fd0:	3301      	adds	r3, #1
 8019fd2:	61fb      	str	r3, [r7, #28]
 8019fd4:	69fb      	ldr	r3, [r7, #28]
 8019fd6:	2b03      	cmp	r3, #3
 8019fd8:	dde6      	ble.n	8019fa8 <sqisign_gen_ibz_vec_4_copy_mod+0x28>
    }
    ibz_finalize(&m);
 8019fda:	f107 0310 	add.w	r3, r7, #16
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f003 f81c 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8019fe4:	bf00      	nop
 8019fe6:	3720      	adds	r7, #32
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}

08019fec <sqisign_gen_ibz_vec_4_scalar_mul_mod>:

// no need to center this, and not 0
void
ibz_vec_4_scalar_mul_mod(ibz_vec_4_t *prod, const ibz_t *scalar, const ibz_vec_4_t *vec, const ibz_t *mod)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b08c      	sub	sp, #48	@ 0x30
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	60f8      	str	r0, [r7, #12]
 8019ff4:	60b9      	str	r1, [r7, #8]
 8019ff6:	607a      	str	r2, [r7, #4]
 8019ff8:	603b      	str	r3, [r7, #0]
    ibz_t m, s;
    ibz_init(&m);
 8019ffa:	f107 0320 	add.w	r3, r7, #32
 8019ffe:	4618      	mov	r0, r3
 801a000:	f003 f801 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&s);
 801a004:	f107 0314 	add.w	r3, r7, #20
 801a008:	4618      	mov	r0, r3
 801a00a:	f002 fffc 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_copy(&s, scalar);
 801a00e:	f107 0314 	add.w	r3, r7, #20
 801a012:	68b9      	ldr	r1, [r7, #8]
 801a014:	4618      	mov	r0, r3
 801a016:	f003 f931 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&m, mod);
 801a01a:	f107 0320 	add.w	r3, r7, #32
 801a01e:	6839      	ldr	r1, [r7, #0]
 801a020:	4618      	mov	r0, r3
 801a022:	f003 f92b 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 801a026:	2300      	movs	r3, #0
 801a028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a02a:	e028      	b.n	801a07e <sqisign_gen_ibz_vec_4_scalar_mul_mod+0x92>
        ibz_mul(&((*prod)[i]), &((*vec)[i]), &s);
 801a02c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a02e:	4613      	mov	r3, r2
 801a030:	005b      	lsls	r3, r3, #1
 801a032:	4413      	add	r3, r2
 801a034:	009b      	lsls	r3, r3, #2
 801a036:	68fa      	ldr	r2, [r7, #12]
 801a038:	18d0      	adds	r0, r2, r3
 801a03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a03c:	4613      	mov	r3, r2
 801a03e:	005b      	lsls	r3, r3, #1
 801a040:	4413      	add	r3, r2
 801a042:	009b      	lsls	r3, r3, #2
 801a044:	687a      	ldr	r2, [r7, #4]
 801a046:	4413      	add	r3, r2
 801a048:	f107 0214 	add.w	r2, r7, #20
 801a04c:	4619      	mov	r1, r3
 801a04e:	f003 f80e 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mod(&((*prod)[i]), &((*prod)[i]), &m);
 801a052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a054:	4613      	mov	r3, r2
 801a056:	005b      	lsls	r3, r3, #1
 801a058:	4413      	add	r3, r2
 801a05a:	009b      	lsls	r3, r3, #2
 801a05c:	68fa      	ldr	r2, [r7, #12]
 801a05e:	18d0      	adds	r0, r2, r3
 801a060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a062:	4613      	mov	r3, r2
 801a064:	005b      	lsls	r3, r3, #1
 801a066:	4413      	add	r3, r2
 801a068:	009b      	lsls	r3, r3, #2
 801a06a:	68fa      	ldr	r2, [r7, #12]
 801a06c:	4413      	add	r3, r2
 801a06e:	f107 0220 	add.w	r2, r7, #32
 801a072:	4619      	mov	r1, r3
 801a074:	f003 f855 	bl	801d122 <sqisign_gen_ibz_mod>
    for (int i = 0; i < 4; i++) {
 801a078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a07a:	3301      	adds	r3, #1
 801a07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a080:	2b03      	cmp	r3, #3
 801a082:	ddd3      	ble.n	801a02c <sqisign_gen_ibz_vec_4_scalar_mul_mod+0x40>
    }
    ibz_finalize(&m);
 801a084:	f107 0320 	add.w	r3, r7, #32
 801a088:	4618      	mov	r0, r3
 801a08a:	f002 ffc7 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&s);
 801a08e:	f107 0314 	add.w	r3, r7, #20
 801a092:	4618      	mov	r0, r3
 801a094:	f002 ffc2 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801a098:	bf00      	nop
 801a09a:	3730      	adds	r7, #48	@ 0x30
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bd80      	pop	{r7, pc}

0801a0a0 <sqisign_gen_ibz_mat_4xn_hnf_mod_core>:
// Number Theory" (Springer Verlag, in series "Graduate texts in Mathematics") from 1993
//  assumes ibz_xgcd outputs u,v which are small in absolute value (as described in the
//  book)
void
ibz_mat_4xn_hnf_mod_core(ibz_mat_4x4_t *hnf, int generator_number, const ibz_vec_4_t *generators, const ibz_t *mod)
{
 801a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a4:	b0ef      	sub	sp, #444	@ 0x1bc
 801a0a6:	af02      	add	r7, sp, #8
 801a0a8:	f507 74d8 	add.w	r4, r7, #432	@ 0x1b0
 801a0ac:	f5a4 74c2 	sub.w	r4, r4, #388	@ 0x184
 801a0b0:	6020      	str	r0, [r4, #0]
 801a0b2:	f507 70d8 	add.w	r0, r7, #432	@ 0x1b0
 801a0b6:	f5a0 70c4 	sub.w	r0, r0, #392	@ 0x188
 801a0ba:	6001      	str	r1, [r0, #0]
 801a0bc:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 801a0c0:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 801a0c4:	600a      	str	r2, [r1, #0]
 801a0c6:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 801a0ca:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 801a0ce:	6013      	str	r3, [r2, #0]
 801a0d0:	466b      	mov	r3, sp
 801a0d2:	607b      	str	r3, [r7, #4]
    int i = 3;
 801a0d4:	2303      	movs	r3, #3
 801a0d6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    assert(generator_number > 3);
 801a0da:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a0de:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	2b03      	cmp	r3, #3
 801a0e6:	dc05      	bgt.n	801a0f4 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x54>
 801a0e8:	4ba4      	ldr	r3, [pc, #656]	@ (801a37c <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2dc>)
 801a0ea:	4aa5      	ldr	r2, [pc, #660]	@ (801a380 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2e0>)
 801a0ec:	2177      	movs	r1, #119	@ 0x77
 801a0ee:	48a5      	ldr	r0, [pc, #660]	@ (801a384 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2e4>)
 801a0f0:	f01b f8a2 	bl	8035238 <__assert_func>
    int n = generator_number;
 801a0f4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a0f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    int j = n - 1;
 801a102:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801a106:	3b01      	subs	r3, #1
 801a108:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    int k = n - 1;
 801a10c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801a110:	3b01      	subs	r3, #1
 801a112:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    ibz_t b, u, v, d, q, m, coeff_1, coeff_2, r;
    ibz_vec_4_t c;
    ibz_vec_4_t a[generator_number];
 801a116:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a11a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801a11e:	6819      	ldr	r1, [r3, #0]
 801a120:	1e4b      	subs	r3, r1, #1
 801a122:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801a126:	460a      	mov	r2, r1
 801a128:	2300      	movs	r3, #0
 801a12a:	61ba      	str	r2, [r7, #24]
 801a12c:	61fb      	str	r3, [r7, #28]
 801a12e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a132:	1890      	adds	r0, r2, r2
 801a134:	6138      	str	r0, [r7, #16]
 801a136:	415b      	adcs	r3, r3
 801a138:	617b      	str	r3, [r7, #20]
 801a13a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a13e:	69b8      	ldr	r0, [r7, #24]
 801a140:	eb12 0a00 	adds.w	sl, r2, r0
 801a144:	69f8      	ldr	r0, [r7, #28]
 801a146:	eb43 0b00 	adc.w	fp, r3, r0
 801a14a:	f04f 0200 	mov.w	r2, #0
 801a14e:	f04f 0300 	mov.w	r3, #0
 801a152:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 801a156:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 801a15a:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 801a15e:	460a      	mov	r2, r1
 801a160:	2300      	movs	r3, #0
 801a162:	4615      	mov	r5, r2
 801a164:	461e      	mov	r6, r3
 801a166:	462a      	mov	r2, r5
 801a168:	4633      	mov	r3, r6
 801a16a:	1890      	adds	r0, r2, r2
 801a16c:	60b8      	str	r0, [r7, #8]
 801a16e:	415b      	adcs	r3, r3
 801a170:	60fb      	str	r3, [r7, #12]
 801a172:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a176:	eb12 0805 	adds.w	r8, r2, r5
 801a17a:	eb43 0906 	adc.w	r9, r3, r6
 801a17e:	f04f 0200 	mov.w	r2, #0
 801a182:	f04f 0300 	mov.w	r3, #0
 801a186:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 801a18a:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 801a18e:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 801a192:	460a      	mov	r2, r1
 801a194:	4613      	mov	r3, r2
 801a196:	005b      	lsls	r3, r3, #1
 801a198:	4413      	add	r3, r2
 801a19a:	011b      	lsls	r3, r3, #4
 801a19c:	3307      	adds	r3, #7
 801a19e:	08db      	lsrs	r3, r3, #3
 801a1a0:	00db      	lsls	r3, r3, #3
 801a1a2:	ebad 0d03 	sub.w	sp, sp, r3
 801a1a6:	ab02      	add	r3, sp, #8
 801a1a8:	3303      	adds	r3, #3
 801a1aa:	089b      	lsrs	r3, r3, #2
 801a1ac:	009b      	lsls	r3, r3, #2
 801a1ae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    ibz_vec_4_t w[4];
    ibz_init(&b);
 801a1b2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f002 ff25 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&d);
 801a1bc:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f002 ff20 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&u);
 801a1c6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f002 ff1b 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&v);
 801a1d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801a1d4:	4618      	mov	r0, r3
 801a1d6:	f002 ff16 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&r);
 801a1da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a1de:	4618      	mov	r0, r3
 801a1e0:	f002 ff11 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&m);
 801a1e4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	f002 ff0c 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&q);
 801a1ee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f002 ff07 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&coeff_1);
 801a1f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	f002 ff02 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&coeff_2);
 801a202:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801a206:	4618      	mov	r0, r3
 801a208:	f002 fefd 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&c);
 801a20c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 801a210:	4618      	mov	r0, r3
 801a212:	f7f4 fdfe 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    for (int h = 0; h < n; h++) {
 801a216:	2300      	movs	r3, #0
 801a218:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801a21c:	e08a      	b.n	801a334 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x294>
        if (h < 4)
 801a21e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801a222:	2b03      	cmp	r3, #3
 801a224:	dc0b      	bgt.n	801a23e <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x19e>
            ibz_vec_4_init(&(w[h]));
 801a226:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a22a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a22e:	4613      	mov	r3, r2
 801a230:	005b      	lsls	r3, r3, #1
 801a232:	4413      	add	r3, r2
 801a234:	011b      	lsls	r3, r3, #4
 801a236:	440b      	add	r3, r1
 801a238:	4618      	mov	r0, r3
 801a23a:	f7f4 fdea 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
        ibz_vec_4_init(&(a[h]));
 801a23e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a242:	4613      	mov	r3, r2
 801a244:	005b      	lsls	r3, r3, #1
 801a246:	4413      	add	r3, r2
 801a248:	011b      	lsls	r3, r3, #4
 801a24a:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a24e:	4413      	add	r3, r2
 801a250:	4618      	mov	r0, r3
 801a252:	f7f4 fdde 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
        ibz_copy(&(a[h][0]), &(generators[h][0]));
 801a256:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a25a:	4613      	mov	r3, r2
 801a25c:	005b      	lsls	r3, r3, #1
 801a25e:	4413      	add	r3, r2
 801a260:	011b      	lsls	r3, r3, #4
 801a262:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a266:	18d0      	adds	r0, r2, r3
 801a268:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a26c:	4613      	mov	r3, r2
 801a26e:	005b      	lsls	r3, r3, #1
 801a270:	4413      	add	r3, r2
 801a272:	011b      	lsls	r3, r3, #4
 801a274:	461a      	mov	r2, r3
 801a276:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a27a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	4413      	add	r3, r2
 801a282:	4619      	mov	r1, r3
 801a284:	f002 fffa 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&(a[h][1]), &(generators[h][1]));
 801a288:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a28c:	4613      	mov	r3, r2
 801a28e:	005b      	lsls	r3, r3, #1
 801a290:	4413      	add	r3, r2
 801a292:	011b      	lsls	r3, r3, #4
 801a294:	330c      	adds	r3, #12
 801a296:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a29a:	18d0      	adds	r0, r2, r3
 801a29c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	005b      	lsls	r3, r3, #1
 801a2a4:	4413      	add	r3, r2
 801a2a6:	011b      	lsls	r3, r3, #4
 801a2a8:	461a      	mov	r2, r3
 801a2aa:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a2ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	4413      	add	r3, r2
 801a2b6:	330c      	adds	r3, #12
 801a2b8:	4619      	mov	r1, r3
 801a2ba:	f002 ffdf 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&(a[h][2]), &(generators[h][2]));
 801a2be:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a2c2:	4613      	mov	r3, r2
 801a2c4:	005b      	lsls	r3, r3, #1
 801a2c6:	4413      	add	r3, r2
 801a2c8:	011b      	lsls	r3, r3, #4
 801a2ca:	3318      	adds	r3, #24
 801a2cc:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a2d0:	18d0      	adds	r0, r2, r3
 801a2d2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a2d6:	4613      	mov	r3, r2
 801a2d8:	005b      	lsls	r3, r3, #1
 801a2da:	4413      	add	r3, r2
 801a2dc:	011b      	lsls	r3, r3, #4
 801a2de:	461a      	mov	r2, r3
 801a2e0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a2e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	4413      	add	r3, r2
 801a2ec:	3318      	adds	r3, #24
 801a2ee:	4619      	mov	r1, r3
 801a2f0:	f002 ffc4 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&(a[h][3]), &(generators[h][3]));
 801a2f4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a2f8:	4613      	mov	r3, r2
 801a2fa:	005b      	lsls	r3, r3, #1
 801a2fc:	4413      	add	r3, r2
 801a2fe:	011b      	lsls	r3, r3, #4
 801a300:	3324      	adds	r3, #36	@ 0x24
 801a302:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a306:	18d0      	adds	r0, r2, r3
 801a308:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a30c:	4613      	mov	r3, r2
 801a30e:	005b      	lsls	r3, r3, #1
 801a310:	4413      	add	r3, r2
 801a312:	011b      	lsls	r3, r3, #4
 801a314:	461a      	mov	r2, r3
 801a316:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a31a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	4413      	add	r3, r2
 801a322:	3324      	adds	r3, #36	@ 0x24
 801a324:	4619      	mov	r1, r3
 801a326:	f002 ffa9 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int h = 0; h < n; h++) {
 801a32a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801a32e:	3301      	adds	r3, #1
 801a330:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801a334:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801a338:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801a33c:	429a      	cmp	r2, r3
 801a33e:	f6ff af6e 	blt.w	801a21e <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x17e>
    }
    assert(ibz_cmp(mod, &ibz_const_zero) > 0);
 801a342:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a346:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801a34a:	490f      	ldr	r1, [pc, #60]	@ (801a388 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2e8>)
 801a34c:	6818      	ldr	r0, [r3, #0]
 801a34e:	f002 ff2f 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
 801a356:	dc05      	bgt.n	801a364 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2c4>
 801a358:	4b0c      	ldr	r3, [pc, #48]	@ (801a38c <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2ec>)
 801a35a:	4a09      	ldr	r2, [pc, #36]	@ (801a380 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2e0>)
 801a35c:	2192      	movs	r1, #146	@ 0x92
 801a35e:	4809      	ldr	r0, [pc, #36]	@ (801a384 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2e4>)
 801a360:	f01a ff6a 	bl	8035238 <__assert_func>
    ibz_copy(&m, mod);
 801a364:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a368:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801a36c:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 801a370:	6819      	ldr	r1, [r3, #0]
 801a372:	4610      	mov	r0, r2
 801a374:	f002 ff82 	bl	801d27c <sqisign_gen_ibz_copy>
    while (i != -1) {
 801a378:	e1fb      	b.n	801a772 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x6d2>
 801a37a:	bf00      	nop
 801a37c:	080377f4 	.word	0x080377f4
 801a380:	0803b714 	.word	0x0803b714
 801a384:	0803780c 	.word	0x0803780c
 801a388:	0803b8f4 	.word	0x0803b8f4
 801a38c:	08037820 	.word	0x08037820
        while (j != 0) {
            j = j - 1;
 801a390:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801a394:	3b01      	subs	r3, #1
 801a396:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
            if (!ibz_is_zero(&(a[j][i]))) {
 801a39a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a39e:	461a      	mov	r2, r3
 801a3a0:	0052      	lsls	r2, r2, #1
 801a3a2:	441a      	add	r2, r3
 801a3a4:	0093      	lsls	r3, r2, #2
 801a3a6:	461a      	mov	r2, r3
 801a3a8:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 801a3ac:	460b      	mov	r3, r1
 801a3ae:	005b      	lsls	r3, r3, #1
 801a3b0:	440b      	add	r3, r1
 801a3b2:	011b      	lsls	r3, r3, #4
 801a3b4:	4413      	add	r3, r2
 801a3b6:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a3ba:	4413      	add	r3, r2
 801a3bc:	4618      	mov	r0, r3
 801a3be:	f002 ff06 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	f040 80ba 	bne.w	801a53e <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x49e>
                // assumtion that ibz_xgcd outputs u,v which are small in absolute
                // value is needed here also, needs u non 0, but v can be 0 if needed
                ibz_xgcd_with_u_not_0(&d, &u, &v, &(a[k][i]), &(a[j][i]));
 801a3ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a3ce:	461a      	mov	r2, r3
 801a3d0:	0052      	lsls	r2, r2, #1
 801a3d2:	441a      	add	r2, r3
 801a3d4:	0093      	lsls	r3, r2, #2
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 801a3dc:	460b      	mov	r3, r1
 801a3de:	005b      	lsls	r3, r3, #1
 801a3e0:	440b      	add	r3, r1
 801a3e2:	011b      	lsls	r3, r3, #4
 801a3e4:	4413      	add	r3, r2
 801a3e6:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a3ea:	18d4      	adds	r4, r2, r3
 801a3ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	0052      	lsls	r2, r2, #1
 801a3f4:	441a      	add	r2, r3
 801a3f6:	0093      	lsls	r3, r2, #2
 801a3f8:	461a      	mov	r2, r3
 801a3fa:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 801a3fe:	460b      	mov	r3, r1
 801a400:	005b      	lsls	r3, r3, #1
 801a402:	440b      	add	r3, r1
 801a404:	011b      	lsls	r3, r3, #4
 801a406:	4413      	add	r3, r2
 801a408:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a40c:	4413      	add	r3, r2
 801a40e:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 801a412:	f507 71ba 	add.w	r1, r7, #372	@ 0x174
 801a416:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 801a41a:	9300      	str	r3, [sp, #0]
 801a41c:	4623      	mov	r3, r4
 801a41e:	f000 fb15 	bl	801aa4c <sqisign_gen_ibz_xgcd_with_u_not_0>
                ibz_vec_4_linear_combination(&c, &u, &(a[k]), &v, &(a[j]));
 801a422:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801a426:	4613      	mov	r3, r2
 801a428:	005b      	lsls	r3, r3, #1
 801a42a:	4413      	add	r3, r2
 801a42c:	011b      	lsls	r3, r3, #4
 801a42e:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a432:	18d4      	adds	r4, r2, r3
 801a434:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801a438:	4613      	mov	r3, r2
 801a43a:	005b      	lsls	r3, r3, #1
 801a43c:	4413      	add	r3, r2
 801a43e:	011b      	lsls	r3, r3, #4
 801a440:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a444:	4413      	add	r3, r2
 801a446:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 801a44a:	f507 71ba 	add.w	r1, r7, #372	@ 0x174
 801a44e:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 801a452:	9300      	str	r3, [sp, #0]
 801a454:	4613      	mov	r3, r2
 801a456:	4622      	mov	r2, r4
 801a458:	f7ef fdc3 	bl	8009fe2 <sqisign_gen_ibz_vec_4_linear_combination>
                ibz_div(&coeff_1, &r, &(a[k][i]), &d);
 801a45c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a460:	461a      	mov	r2, r3
 801a462:	0052      	lsls	r2, r2, #1
 801a464:	441a      	add	r2, r3
 801a466:	0093      	lsls	r3, r2, #2
 801a468:	461a      	mov	r2, r3
 801a46a:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 801a46e:	460b      	mov	r3, r1
 801a470:	005b      	lsls	r3, r3, #1
 801a472:	440b      	add	r3, r1
 801a474:	011b      	lsls	r3, r3, #4
 801a476:	4413      	add	r3, r2
 801a478:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a47c:	441a      	add	r2, r3
 801a47e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801a482:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801a486:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 801a48a:	f002 fe19 	bl	801d0c0 <sqisign_gen_ibz_div>
                ibz_div(&coeff_2, &r, &(a[j][i]), &d);
 801a48e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a492:	461a      	mov	r2, r3
 801a494:	0052      	lsls	r2, r2, #1
 801a496:	441a      	add	r2, r3
 801a498:	0093      	lsls	r3, r2, #2
 801a49a:	461a      	mov	r2, r3
 801a49c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 801a4a0:	460b      	mov	r3, r1
 801a4a2:	005b      	lsls	r3, r3, #1
 801a4a4:	440b      	add	r3, r1
 801a4a6:	011b      	lsls	r3, r3, #4
 801a4a8:	4413      	add	r3, r2
 801a4aa:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a4ae:	441a      	add	r2, r3
 801a4b0:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801a4b4:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801a4b8:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 801a4bc:	f002 fe00 	bl	801d0c0 <sqisign_gen_ibz_div>
                ibz_neg(&coeff_2, &coeff_2);
 801a4c0:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 801a4c4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801a4c8:	4611      	mov	r1, r2
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	f002 fdde 	bl	801d08c <sqisign_gen_ibz_neg>
                ibz_vec_4_linear_combination_mod(
 801a4d0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801a4d4:	4613      	mov	r3, r2
 801a4d6:	005b      	lsls	r3, r3, #1
 801a4d8:	4413      	add	r3, r2
 801a4da:	011b      	lsls	r3, r3, #4
 801a4dc:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a4e0:	18d0      	adds	r0, r2, r3
                    &(a[j]), &coeff_1, &(a[j]), &coeff_2, &(a[k]), &m); // do lin comb mod m
 801a4e2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	005b      	lsls	r3, r3, #1
 801a4ea:	4413      	add	r3, r2
 801a4ec:	011b      	lsls	r3, r3, #4
 801a4ee:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a4f2:	18d4      	adds	r4, r2, r3
 801a4f4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801a4f8:	4613      	mov	r3, r2
 801a4fa:	005b      	lsls	r3, r3, #1
 801a4fc:	4413      	add	r3, r2
 801a4fe:	011b      	lsls	r3, r3, #4
 801a500:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a504:	4413      	add	r3, r2
                ibz_vec_4_linear_combination_mod(
 801a506:	f507 7596 	add.w	r5, r7, #300	@ 0x12c
 801a50a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801a50e:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 801a512:	9201      	str	r2, [sp, #4]
 801a514:	9300      	str	r3, [sp, #0]
 801a516:	462b      	mov	r3, r5
 801a518:	4622      	mov	r2, r4
 801a51a:	f7ff fc94 	bl	8019e46 <sqisign_gen_ibz_vec_4_linear_combination_mod>
                ibz_vec_4_copy_mod(&(a[k]), &c, &m);                    // mod m in copy
 801a51e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801a522:	4613      	mov	r3, r2
 801a524:	005b      	lsls	r3, r3, #1
 801a526:	4413      	add	r3, r2
 801a528:	011b      	lsls	r3, r3, #4
 801a52a:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a52e:	4413      	add	r3, r2
 801a530:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 801a534:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 801a538:	4618      	mov	r0, r3
 801a53a:	f7ff fd21 	bl	8019f80 <sqisign_gen_ibz_vec_4_copy_mod>
        while (j != 0) {
 801a53e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801a542:	2b00      	cmp	r3, #0
 801a544:	f47f af24 	bne.w	801a390 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x2f0>
            }
        }
        ibz_xgcd_with_u_not_0(&d, &u, &v, &(a[k][i]), &m);
 801a548:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a54c:	461a      	mov	r2, r3
 801a54e:	0052      	lsls	r2, r2, #1
 801a550:	441a      	add	r2, r3
 801a552:	0093      	lsls	r3, r2, #2
 801a554:	461a      	mov	r2, r3
 801a556:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 801a55a:	460b      	mov	r3, r1
 801a55c:	005b      	lsls	r3, r3, #1
 801a55e:	440b      	add	r3, r1
 801a560:	011b      	lsls	r3, r3, #4
 801a562:	4413      	add	r3, r2
 801a564:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a568:	18d4      	adds	r4, r2, r3
 801a56a:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 801a56e:	f507 71ba 	add.w	r1, r7, #372	@ 0x174
 801a572:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 801a576:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 801a57a:	9300      	str	r3, [sp, #0]
 801a57c:	4623      	mov	r3, r4
 801a57e:	f000 fa65 	bl	801aa4c <sqisign_gen_ibz_xgcd_with_u_not_0>
        ibz_vec_4_scalar_mul_mod(&(w[i]), &u, &(a[k]), &m); // mod m in scalar mult
 801a582:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a586:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 801a58a:	4613      	mov	r3, r2
 801a58c:	005b      	lsls	r3, r3, #1
 801a58e:	4413      	add	r3, r2
 801a590:	011b      	lsls	r3, r3, #4
 801a592:	18c8      	adds	r0, r1, r3
 801a594:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801a598:	4613      	mov	r3, r2
 801a59a:	005b      	lsls	r3, r3, #1
 801a59c:	4413      	add	r3, r2
 801a59e:	011b      	lsls	r3, r3, #4
 801a5a0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a5a4:	441a      	add	r2, r3
 801a5a6:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 801a5aa:	f507 71ba 	add.w	r1, r7, #372	@ 0x174
 801a5ae:	f7ff fd1d 	bl	8019fec <sqisign_gen_ibz_vec_4_scalar_mul_mod>
        if (ibz_is_zero(&(w[i][i]))) {
 801a5b2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a5b6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 801a5ba:	4613      	mov	r3, r2
 801a5bc:	011b      	lsls	r3, r3, #4
 801a5be:	1a9b      	subs	r3, r3, r2
 801a5c0:	009b      	lsls	r3, r3, #2
 801a5c2:	440b      	add	r3, r1
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f002 fe02 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d00e      	beq.n	801a5ee <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x54e>
            ibz_copy(&(w[i][i]), &m);
 801a5d0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a5d4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 801a5d8:	4613      	mov	r3, r2
 801a5da:	011b      	lsls	r3, r3, #4
 801a5dc:	1a9b      	subs	r3, r3, r2
 801a5de:	009b      	lsls	r3, r3, #2
 801a5e0:	440b      	add	r3, r1
 801a5e2:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 801a5e6:	4611      	mov	r1, r2
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	f002 fe47 	bl	801d27c <sqisign_gen_ibz_copy>
        }
        for (int h = i + 1; h < 4; h++) {
 801a5ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a5f2:	3301      	adds	r3, #1
 801a5f4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 801a5f8:	e050      	b.n	801a69c <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x5fc>
            ibz_div_floor(&q, &r, &(w[h][i]), &(w[i][i]));
 801a5fa:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801a5fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a602:	461a      	mov	r2, r3
 801a604:	0052      	lsls	r2, r2, #1
 801a606:	441a      	add	r2, r3
 801a608:	0093      	lsls	r3, r2, #2
 801a60a:	461a      	mov	r2, r3
 801a60c:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 801a610:	460b      	mov	r3, r1
 801a612:	005b      	lsls	r3, r3, #1
 801a614:	440b      	add	r3, r1
 801a616:	011b      	lsls	r3, r3, #4
 801a618:	4413      	add	r3, r2
 801a61a:	18c4      	adds	r4, r0, r3
 801a61c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a620:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 801a624:	4613      	mov	r3, r2
 801a626:	011b      	lsls	r3, r3, #4
 801a628:	1a9b      	subs	r3, r3, r2
 801a62a:	009b      	lsls	r3, r3, #2
 801a62c:	440b      	add	r3, r1
 801a62e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801a632:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 801a636:	4622      	mov	r2, r4
 801a638:	f002 fd62 	bl	801d100 <sqisign_gen_ibz_div_floor>
            ibz_neg(&q, &q);
 801a63c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 801a640:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801a644:	4611      	mov	r1, r2
 801a646:	4618      	mov	r0, r3
 801a648:	f002 fd20 	bl	801d08c <sqisign_gen_ibz_neg>
            ibz_vec_4_linear_combination(&(w[h]), &ibz_const_one, &(w[h]), &q, &(w[i]));
 801a64c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a650:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 801a654:	4613      	mov	r3, r2
 801a656:	005b      	lsls	r3, r3, #1
 801a658:	4413      	add	r3, r2
 801a65a:	011b      	lsls	r3, r3, #4
 801a65c:	18c8      	adds	r0, r1, r3
 801a65e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a662:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 801a666:	4613      	mov	r3, r2
 801a668:	005b      	lsls	r3, r3, #1
 801a66a:	4413      	add	r3, r2
 801a66c:	011b      	lsls	r3, r3, #4
 801a66e:	18cc      	adds	r4, r1, r3
 801a670:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a674:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 801a678:	4613      	mov	r3, r2
 801a67a:	005b      	lsls	r3, r3, #1
 801a67c:	4413      	add	r3, r2
 801a67e:	011b      	lsls	r3, r3, #4
 801a680:	440b      	add	r3, r1
 801a682:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 801a686:	9300      	str	r3, [sp, #0]
 801a688:	4613      	mov	r3, r2
 801a68a:	4622      	mov	r2, r4
 801a68c:	4990      	ldr	r1, [pc, #576]	@ (801a8d0 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x830>)
 801a68e:	f7ef fca8 	bl	8009fe2 <sqisign_gen_ibz_vec_4_linear_combination>
        for (int h = i + 1; h < 4; h++) {
 801a692:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 801a696:	3301      	adds	r3, #1
 801a698:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 801a69c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 801a6a0:	2b03      	cmp	r3, #3
 801a6a2:	ddaa      	ble.n	801a5fa <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x55a>
        }
        ibz_div(&m, &r, &m, &d);
 801a6a4:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801a6a8:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 801a6ac:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801a6b0:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 801a6b4:	f002 fd04 	bl	801d0c0 <sqisign_gen_ibz_div>
        assert(ibz_is_zero(&r));
 801a6b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f002 fd86 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d105      	bne.n	801a6d4 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x634>
 801a6c8:	4b82      	ldr	r3, [pc, #520]	@ (801a8d4 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x834>)
 801a6ca:	4a83      	ldr	r2, [pc, #524]	@ (801a8d8 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x838>)
 801a6cc:	21af      	movs	r1, #175	@ 0xaf
 801a6ce:	4883      	ldr	r0, [pc, #524]	@ (801a8dc <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x83c>)
 801a6d0:	f01a fdb2 	bl	8035238 <__assert_func>
        if (i != 0) {
 801a6d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d03c      	beq.n	801a756 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x6b6>
            k = k - 1;
 801a6dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801a6e0:	3b01      	subs	r3, #1
 801a6e2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
            i = i - 1;
 801a6e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a6ea:	3b01      	subs	r3, #1
 801a6ec:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
            j = k;
 801a6f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801a6f4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
            if (ibz_is_zero(&(a[k][i])))
 801a6f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a6fc:	461a      	mov	r2, r3
 801a6fe:	0052      	lsls	r2, r2, #1
 801a700:	441a      	add	r2, r3
 801a702:	0093      	lsls	r3, r2, #2
 801a704:	461a      	mov	r2, r3
 801a706:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 801a70a:	460b      	mov	r3, r1
 801a70c:	005b      	lsls	r3, r3, #1
 801a70e:	440b      	add	r3, r1
 801a710:	011b      	lsls	r3, r3, #4
 801a712:	4413      	add	r3, r2
 801a714:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a718:	4413      	add	r3, r2
 801a71a:	4618      	mov	r0, r3
 801a71c:	f002 fd57 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801a720:	4603      	mov	r3, r0
 801a722:	2b00      	cmp	r3, #0
 801a724:	d025      	beq.n	801a772 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x6d2>
                ibz_copy(&(a[k][i]), &m);
 801a726:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a72a:	461a      	mov	r2, r3
 801a72c:	0052      	lsls	r2, r2, #1
 801a72e:	441a      	add	r2, r3
 801a730:	0093      	lsls	r3, r2, #2
 801a732:	461a      	mov	r2, r3
 801a734:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 801a738:	460b      	mov	r3, r1
 801a73a:	005b      	lsls	r3, r3, #1
 801a73c:	440b      	add	r3, r1
 801a73e:	011b      	lsls	r3, r3, #4
 801a740:	4413      	add	r3, r2
 801a742:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a746:	4413      	add	r3, r2
 801a748:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 801a74c:	4611      	mov	r1, r2
 801a74e:	4618      	mov	r0, r3
 801a750:	f002 fd94 	bl	801d27c <sqisign_gen_ibz_copy>
 801a754:	e00d      	b.n	801a772 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x6d2>

        } else {
            k = k - 1;
 801a756:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801a75a:	3b01      	subs	r3, #1
 801a75c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
            i = i - 1;
 801a760:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a764:	3b01      	subs	r3, #1
 801a766:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
            j = k;
 801a76a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801a76e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    while (i != -1) {
 801a772:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a77a:	f47f aee0 	bne.w	801a53e <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x49e>
        }
    }
    for (j = 0; j < 4; j++) {
 801a77e:	2300      	movs	r3, #0
 801a780:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801a784:	e03a      	b.n	801a7fc <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x75c>
        for (i = 0; i < 4; i++) {
 801a786:	2300      	movs	r3, #0
 801a788:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 801a78c:	e02d      	b.n	801a7ea <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x74a>
            ibz_copy(&((*hnf)[i][j]), &(w[j][i]));
 801a78e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 801a792:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 801a796:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801a79a:	461a      	mov	r2, r3
 801a79c:	0052      	lsls	r2, r2, #1
 801a79e:	441a      	add	r2, r3
 801a7a0:	0093      	lsls	r3, r2, #2
 801a7a2:	461a      	mov	r2, r3
 801a7a4:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 801a7a8:	460b      	mov	r3, r1
 801a7aa:	005b      	lsls	r3, r3, #1
 801a7ac:	440b      	add	r3, r1
 801a7ae:	011b      	lsls	r3, r3, #4
 801a7b0:	4413      	add	r3, r2
 801a7b2:	6802      	ldr	r2, [r0, #0]
 801a7b4:	18d4      	adds	r4, r2, r3
 801a7b6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801a7ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a7be:	461a      	mov	r2, r3
 801a7c0:	0052      	lsls	r2, r2, #1
 801a7c2:	441a      	add	r2, r3
 801a7c4:	0093      	lsls	r3, r2, #2
 801a7c6:	461a      	mov	r2, r3
 801a7c8:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 801a7cc:	460b      	mov	r3, r1
 801a7ce:	005b      	lsls	r3, r3, #1
 801a7d0:	440b      	add	r3, r1
 801a7d2:	011b      	lsls	r3, r3, #4
 801a7d4:	4413      	add	r3, r2
 801a7d6:	4403      	add	r3, r0
 801a7d8:	4619      	mov	r1, r3
 801a7da:	4620      	mov	r0, r4
 801a7dc:	f002 fd4e 	bl	801d27c <sqisign_gen_ibz_copy>
        for (i = 0; i < 4; i++) {
 801a7e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a7e4:	3301      	adds	r3, #1
 801a7e6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 801a7ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801a7ee:	2b03      	cmp	r3, #3
 801a7f0:	ddcd      	ble.n	801a78e <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x6ee>
    for (j = 0; j < 4; j++) {
 801a7f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801a7f6:	3301      	adds	r3, #1
 801a7f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801a7fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801a800:	2b03      	cmp	r3, #3
 801a802:	ddc0      	ble.n	801a786 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x6e6>
        }
    }

    ibz_finalize(&b);
 801a804:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 801a808:	4618      	mov	r0, r3
 801a80a:	f002 fc07 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&d);
 801a80e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801a812:	4618      	mov	r0, r3
 801a814:	f002 fc02 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&u);
 801a818:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 801a81c:	4618      	mov	r0, r3
 801a81e:	f002 fbfd 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&v);
 801a822:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801a826:	4618      	mov	r0, r3
 801a828:	f002 fbf8 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&r);
 801a82c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a830:	4618      	mov	r0, r3
 801a832:	f002 fbf3 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&q);
 801a836:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801a83a:	4618      	mov	r0, r3
 801a83c:	f002 fbee 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&coeff_1);
 801a840:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801a844:	4618      	mov	r0, r3
 801a846:	f002 fbe9 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&coeff_2);
 801a84a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801a84e:	4618      	mov	r0, r3
 801a850:	f002 fbe4 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&m);
 801a854:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 801a858:	4618      	mov	r0, r3
 801a85a:	f002 fbdf 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&c);
 801a85e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 801a862:	4618      	mov	r0, r3
 801a864:	f7f4 faf1 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    for (int h = 0; h < n; h++) {
 801a868:	2300      	movs	r3, #0
 801a86a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801a86e:	e020      	b.n	801a8b2 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x812>
        if (h < 4)
 801a870:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801a874:	2b03      	cmp	r3, #3
 801a876:	dc0b      	bgt.n	801a890 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x7f0>
            ibz_vec_4_finalize(&(w[h]));
 801a878:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a87c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801a880:	4613      	mov	r3, r2
 801a882:	005b      	lsls	r3, r3, #1
 801a884:	4413      	add	r3, r2
 801a886:	011b      	lsls	r3, r3, #4
 801a888:	440b      	add	r3, r1
 801a88a:	4618      	mov	r0, r3
 801a88c:	f7f4 fadd 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
        ibz_vec_4_finalize(&(a[h]));
 801a890:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801a894:	4613      	mov	r3, r2
 801a896:	005b      	lsls	r3, r3, #1
 801a898:	4413      	add	r3, r2
 801a89a:	011b      	lsls	r3, r3, #4
 801a89c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801a8a0:	4413      	add	r3, r2
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	f7f4 fad1 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    for (int h = 0; h < n; h++) {
 801a8a8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801a8ac:	3301      	adds	r3, #1
 801a8ae:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801a8b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801a8b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	dbd8      	blt.n	801a870 <sqisign_gen_ibz_mat_4xn_hnf_mod_core+0x7d0>
 801a8be:	f8d7 d004 	ldr.w	sp, [r7, #4]
    }
 801a8c2:	bf00      	nop
 801a8c4:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8ce:	bf00      	nop
 801a8d0:	0803b900 	.word	0x0803b900
 801a8d4:	08037844 	.word	0x08037844
 801a8d8:	0803b714 	.word	0x0803b714
 801a8dc:	0803780c 	.word	0x0803780c

0801a8e0 <sqisign_gen_ibz_mod_not_zero>:
#include "internal.h"

// Small helper for integers
void
ibz_mod_not_zero(ibz_t *res, const ibz_t *x, const ibz_t *mod)
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b08a      	sub	sp, #40	@ 0x28
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	60f8      	str	r0, [r7, #12]
 801a8e8:	60b9      	str	r1, [r7, #8]
 801a8ea:	607a      	str	r2, [r7, #4]
    ibz_t m, t;
    ibz_init(&m);
 801a8ec:	f107 031c 	add.w	r3, r7, #28
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f002 fb88 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&t);
 801a8f6:	f107 0310 	add.w	r3, r7, #16
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f002 fb83 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mod(&m, x, mod);
 801a900:	f107 031c 	add.w	r3, r7, #28
 801a904:	687a      	ldr	r2, [r7, #4]
 801a906:	68b9      	ldr	r1, [r7, #8]
 801a908:	4618      	mov	r0, r3
 801a90a:	f002 fc0a 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_set(&t, ibz_is_zero(&m));
 801a90e:	f107 031c 	add.w	r3, r7, #28
 801a912:	4618      	mov	r0, r3
 801a914:	f002 fc5b 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801a918:	4602      	mov	r2, r0
 801a91a:	f107 0310 	add.w	r3, r7, #16
 801a91e:	4611      	mov	r1, r2
 801a920:	4618      	mov	r0, r3
 801a922:	f002 fc9e 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_mul(&t, &t, mod);
 801a926:	f107 0110 	add.w	r1, r7, #16
 801a92a:	f107 0310 	add.w	r3, r7, #16
 801a92e:	687a      	ldr	r2, [r7, #4]
 801a930:	4618      	mov	r0, r3
 801a932:	f002 fb9c 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(res, &m, &t);
 801a936:	f107 0210 	add.w	r2, r7, #16
 801a93a:	f107 031c 	add.w	r3, r7, #28
 801a93e:	4619      	mov	r1, r3
 801a940:	68f8      	ldr	r0, [r7, #12]
 801a942:	f002 fb76 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_finalize(&m);
 801a946:	f107 031c 	add.w	r3, r7, #28
 801a94a:	4618      	mov	r0, r3
 801a94c:	f002 fb66 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&t);
 801a950:	f107 0310 	add.w	r3, r7, #16
 801a954:	4618      	mov	r0, r3
 801a956:	f002 fb61 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801a95a:	bf00      	nop
 801a95c:	3728      	adds	r7, #40	@ 0x28
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd80      	pop	{r7, pc}
	...

0801a964 <sqisign_gen_ibz_centered_mod>:

// centered and rather positive then negative
void
ibz_centered_mod(ibz_t *remainder, const ibz_t *a, const ibz_t *mod)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b08e      	sub	sp, #56	@ 0x38
 801a968:	af00      	add	r7, sp, #0
 801a96a:	60f8      	str	r0, [r7, #12]
 801a96c:	60b9      	str	r1, [r7, #8]
 801a96e:	607a      	str	r2, [r7, #4]
    assert(ibz_cmp(mod, &ibz_const_zero) > 0);
 801a970:	4931      	ldr	r1, [pc, #196]	@ (801aa38 <sqisign_gen_ibz_centered_mod+0xd4>)
 801a972:	6878      	ldr	r0, [r7, #4]
 801a974:	f002 fc1c 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801a978:	4603      	mov	r3, r0
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	dc05      	bgt.n	801a98a <sqisign_gen_ibz_centered_mod+0x26>
 801a97e:	4b2f      	ldr	r3, [pc, #188]	@ (801aa3c <sqisign_gen_ibz_centered_mod+0xd8>)
 801a980:	4a2f      	ldr	r2, [pc, #188]	@ (801aa40 <sqisign_gen_ibz_centered_mod+0xdc>)
 801a982:	2117      	movs	r1, #23
 801a984:	482f      	ldr	r0, [pc, #188]	@ (801aa44 <sqisign_gen_ibz_centered_mod+0xe0>)
 801a986:	f01a fc57 	bl	8035238 <__assert_func>
    ibz_t tmp, d, t;
    ibz_init(&tmp);
 801a98a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a98e:	4618      	mov	r0, r3
 801a990:	f002 fb39 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&d);
 801a994:	f107 0320 	add.w	r3, r7, #32
 801a998:	4618      	mov	r0, r3
 801a99a:	f002 fb34 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&t);
 801a99e:	f107 0314 	add.w	r3, r7, #20
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	f002 fb2f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_div_floor(&d, &tmp, mod, &ibz_const_two);
 801a9a8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801a9ac:	f107 0020 	add.w	r0, r7, #32
 801a9b0:	4b25      	ldr	r3, [pc, #148]	@ (801aa48 <sqisign_gen_ibz_centered_mod+0xe4>)
 801a9b2:	687a      	ldr	r2, [r7, #4]
 801a9b4:	f002 fba4 	bl	801d100 <sqisign_gen_ibz_div_floor>
    ibz_mod_not_zero(&tmp, a, mod);
 801a9b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a9bc:	687a      	ldr	r2, [r7, #4]
 801a9be:	68b9      	ldr	r1, [r7, #8]
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	f7ff ff8d 	bl	801a8e0 <sqisign_gen_ibz_mod_not_zero>
    ibz_set(&t, ibz_cmp(&tmp, &d) > 0);
 801a9c6:	f107 0220 	add.w	r2, r7, #32
 801a9ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a9ce:	4611      	mov	r1, r2
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	f002 fbed 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	bfcc      	ite	gt
 801a9dc:	2301      	movgt	r3, #1
 801a9de:	2300      	movle	r3, #0
 801a9e0:	b2db      	uxtb	r3, r3
 801a9e2:	461a      	mov	r2, r3
 801a9e4:	f107 0314 	add.w	r3, r7, #20
 801a9e8:	4611      	mov	r1, r2
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f002 fc39 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_mul(&t, &t, mod);
 801a9f0:	f107 0114 	add.w	r1, r7, #20
 801a9f4:	f107 0314 	add.w	r3, r7, #20
 801a9f8:	687a      	ldr	r2, [r7, #4]
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	f002 fb37 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sub(remainder, &tmp, &t);
 801aa00:	f107 0214 	add.w	r2, r7, #20
 801aa04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801aa08:	4619      	mov	r1, r3
 801aa0a:	68f8      	ldr	r0, [r7, #12]
 801aa0c:	f002 fb20 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_finalize(&tmp);
 801aa10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801aa14:	4618      	mov	r0, r3
 801aa16:	f002 fb01 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&d);
 801aa1a:	f107 0320 	add.w	r3, r7, #32
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f002 fafc 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&t);
 801aa24:	f107 0314 	add.w	r3, r7, #20
 801aa28:	4618      	mov	r0, r3
 801aa2a:	f002 faf7 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801aa2e:	bf00      	nop
 801aa30:	3738      	adds	r7, #56	@ 0x38
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}
 801aa36:	bf00      	nop
 801aa38:	0803b8f4 	.word	0x0803b8f4
 801aa3c:	08037854 	.word	0x08037854
 801aa40:	0803b73c 	.word	0x0803b73c
 801aa44:	08037878 	.word	0x08037878
 801aa48:	0803b90c 	.word	0x0803b90c

0801aa4c <sqisign_gen_ibz_xgcd_with_u_not_0>:
}

// mpz_gcdext specification specifies unique outputs used here
void
ibz_xgcd_with_u_not_0(ibz_t *d, ibz_t *u, ibz_t *v, const ibz_t *x, const ibz_t *y)
{
 801aa4c:	b590      	push	{r4, r7, lr}
 801aa4e:	b0a1      	sub	sp, #132	@ 0x84
 801aa50:	af02      	add	r7, sp, #8
 801aa52:	60f8      	str	r0, [r7, #12]
 801aa54:	60b9      	str	r1, [r7, #8]
 801aa56:	607a      	str	r2, [r7, #4]
 801aa58:	603b      	str	r3, [r7, #0]
    if (ibz_is_zero(x) & ibz_is_zero(y)) {
 801aa5a:	6838      	ldr	r0, [r7, #0]
 801aa5c:	f002 fbb7 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801aa60:	4604      	mov	r4, r0
 801aa62:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801aa66:	f002 fbb2 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	4023      	ands	r3, r4
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d00c      	beq.n	801aa8c <sqisign_gen_ibz_xgcd_with_u_not_0+0x40>
        ibz_set(d, 1);
 801aa72:	2101      	movs	r1, #1
 801aa74:	68f8      	ldr	r0, [r7, #12]
 801aa76:	f002 fbf4 	bl	801d262 <sqisign_gen_ibz_set>
        ibz_set(u, 1);
 801aa7a:	2101      	movs	r1, #1
 801aa7c:	68b8      	ldr	r0, [r7, #8]
 801aa7e:	f002 fbf0 	bl	801d262 <sqisign_gen_ibz_set>
        ibz_set(v, 0);
 801aa82:	2100      	movs	r1, #0
 801aa84:	6878      	ldr	r0, [r7, #4]
 801aa86:	f002 fbec 	bl	801d262 <sqisign_gen_ibz_set>
 801aa8a:	e2e9      	b.n	801b060 <sqisign_gen_ibz_xgcd_with_u_not_0+0x614>
        return;
    }
    ibz_t q, r, x1, y1;
    ibz_init(&q);
 801aa8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801aa90:	4618      	mov	r0, r3
 801aa92:	f002 fab8 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&r);
 801aa96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f002 fab3 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&x1);
 801aaa0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f002 faae 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&y1);
 801aaaa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801aaae:	4618      	mov	r0, r3
 801aab0:	f002 faa9 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_copy(&x1, x);
 801aab4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801aab8:	6839      	ldr	r1, [r7, #0]
 801aaba:	4618      	mov	r0, r3
 801aabc:	f002 fbde 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&y1, y);
 801aac0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801aac4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801aac8:	4618      	mov	r0, r3
 801aaca:	f002 fbd7 	bl	801d27c <sqisign_gen_ibz_copy>

    // xgcd
    ibz_xgcd(d, u, v, &x1, &y1);
 801aace:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801aad2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801aad6:	9300      	str	r3, [sp, #0]
 801aad8:	4613      	mov	r3, r2
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	68b9      	ldr	r1, [r7, #8]
 801aade:	68f8      	ldr	r0, [r7, #12]
 801aae0:	f000 faca 	bl	801b078 <sqisign_gen_ibz_xgcd>

    // make sure u!=0 (v can be 0 if needed)
    // following GMP specification, u == 0 implies y|x
    if (ibz_is_zero(u)) {
 801aae4:	68b8      	ldr	r0, [r7, #8]
 801aae6:	f002 fb72 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801aaea:	4603      	mov	r3, r0
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d038      	beq.n	801ab62 <sqisign_gen_ibz_xgcd_with_u_not_0+0x116>
        if (!ibz_is_zero(&x1)) {
 801aaf0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	f002 fb6a 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801aafa:	4603      	mov	r3, r0
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d12c      	bne.n	801ab5a <sqisign_gen_ibz_xgcd_with_u_not_0+0x10e>
            if (ibz_is_zero(&y1)) {
 801ab00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ab04:	4618      	mov	r0, r3
 801ab06:	f002 fb62 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d005      	beq.n	801ab1c <sqisign_gen_ibz_xgcd_with_u_not_0+0xd0>
                ibz_set(&y1, 1);
 801ab10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ab14:	2101      	movs	r1, #1
 801ab16:	4618      	mov	r0, r3
 801ab18:	f002 fba3 	bl	801d262 <sqisign_gen_ibz_set>
            }
            ibz_div(&q, &r, &x1, &y1);
 801ab1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ab20:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801ab24:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801ab28:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 801ab2c:	f002 fac8 	bl	801d0c0 <sqisign_gen_ibz_div>
            assert(ibz_is_zero(&r));
 801ab30:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ab34:	4618      	mov	r0, r3
 801ab36:	f002 fb4a 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d105      	bne.n	801ab4c <sqisign_gen_ibz_xgcd_with_u_not_0+0x100>
 801ab40:	4b77      	ldr	r3, [pc, #476]	@ (801ad20 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2d4>)
 801ab42:	4a78      	ldr	r2, [pc, #480]	@ (801ad24 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2d8>)
 801ab44:	2155      	movs	r1, #85	@ 0x55
 801ab46:	4878      	ldr	r0, [pc, #480]	@ (801ad28 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2dc>)
 801ab48:	f01a fb76 	bl	8035238 <__assert_func>
            ibz_sub(v, v, &q);
 801ab4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ab50:	461a      	mov	r2, r3
 801ab52:	6879      	ldr	r1, [r7, #4]
 801ab54:	6878      	ldr	r0, [r7, #4]
 801ab56:	f002 fa7b 	bl	801d050 <sqisign_gen_ibz_sub>
        }
        ibz_set(u, 1);
 801ab5a:	2101      	movs	r1, #1
 801ab5c:	68b8      	ldr	r0, [r7, #8]
 801ab5e:	f002 fb80 	bl	801d262 <sqisign_gen_ibz_set>
    }
    if (!ibz_is_zero(&x1)) {
 801ab62:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801ab66:	4618      	mov	r0, r3
 801ab68:	f002 fb31 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ab6c:	4603      	mov	r3, r0
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	f040 808c 	bne.w	801ac8c <sqisign_gen_ibz_xgcd_with_u_not_0+0x240>
        // Make sure ux > 0 (and as small as possible)
        assert(ibz_cmp(d, &ibz_const_zero) > 0);
 801ab74:	496d      	ldr	r1, [pc, #436]	@ (801ad2c <sqisign_gen_ibz_xgcd_with_u_not_0+0x2e0>)
 801ab76:	68f8      	ldr	r0, [r7, #12]
 801ab78:	f002 fb1a 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	dc05      	bgt.n	801ab8e <sqisign_gen_ibz_xgcd_with_u_not_0+0x142>
 801ab82:	4b6b      	ldr	r3, [pc, #428]	@ (801ad30 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2e4>)
 801ab84:	4a67      	ldr	r2, [pc, #412]	@ (801ad24 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2d8>)
 801ab86:	215c      	movs	r1, #92	@ 0x5c
 801ab88:	4867      	ldr	r0, [pc, #412]	@ (801ad28 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2dc>)
 801ab8a:	f01a fb55 	bl	8035238 <__assert_func>
        ibz_mul(&r, &x1, &y1);
 801ab8e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801ab92:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801ab96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f002 fa67 	bl	801d06e <sqisign_gen_ibz_mul>
        int neg = ibz_cmp(&r, &ibz_const_zero) < 0;
 801aba0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801aba4:	4961      	ldr	r1, [pc, #388]	@ (801ad2c <sqisign_gen_ibz_xgcd_with_u_not_0+0x2e0>)
 801aba6:	4618      	mov	r0, r3
 801aba8:	f002 fb02 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801abac:	4603      	mov	r3, r0
 801abae:	0fdb      	lsrs	r3, r3, #31
 801abb0:	b2db      	uxtb	r3, r3
 801abb2:	673b      	str	r3, [r7, #112]	@ 0x70
        ibz_mul(&q, &x1, u);
 801abb4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801abb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801abbc:	68ba      	ldr	r2, [r7, #8]
 801abbe:	4618      	mov	r0, r3
 801abc0:	f002 fa55 	bl	801d06e <sqisign_gen_ibz_mul>
        while (ibz_cmp(&q, &ibz_const_zero) <= 0) {
 801abc4:	e059      	b.n	801ac7a <sqisign_gen_ibz_xgcd_with_u_not_0+0x22e>
            ibz_div(&q, &r, &y1, d);
 801abc6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801abca:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801abce:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	f002 fa74 	bl	801d0c0 <sqisign_gen_ibz_div>
            assert(ibz_is_zero(&r));
 801abd8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801abdc:	4618      	mov	r0, r3
 801abde:	f002 faf6 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801abe2:	4603      	mov	r3, r0
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d105      	bne.n	801abf4 <sqisign_gen_ibz_xgcd_with_u_not_0+0x1a8>
 801abe8:	4b4d      	ldr	r3, [pc, #308]	@ (801ad20 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2d4>)
 801abea:	4a4e      	ldr	r2, [pc, #312]	@ (801ad24 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2d8>)
 801abec:	2162      	movs	r1, #98	@ 0x62
 801abee:	484e      	ldr	r0, [pc, #312]	@ (801ad28 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2dc>)
 801abf0:	f01a fb22 	bl	8035238 <__assert_func>
            if (neg) {
 801abf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d007      	beq.n	801ac0a <sqisign_gen_ibz_xgcd_with_u_not_0+0x1be>
                ibz_neg(&q, &q);
 801abfa:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 801abfe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ac02:	4611      	mov	r1, r2
 801ac04:	4618      	mov	r0, r3
 801ac06:	f002 fa41 	bl	801d08c <sqisign_gen_ibz_neg>
            }
            ibz_add(u, u, &q);
 801ac0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ac0e:	461a      	mov	r2, r3
 801ac10:	68b9      	ldr	r1, [r7, #8]
 801ac12:	68b8      	ldr	r0, [r7, #8]
 801ac14:	f002 fa0d 	bl	801d032 <sqisign_gen_ibz_add>
            ibz_div(&q, &r, &x1, d);
 801ac18:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801ac1c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801ac20:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	f002 fa4b 	bl	801d0c0 <sqisign_gen_ibz_div>
            assert(ibz_is_zero(&r));
 801ac2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f002 facd 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ac34:	4603      	mov	r3, r0
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d105      	bne.n	801ac46 <sqisign_gen_ibz_xgcd_with_u_not_0+0x1fa>
 801ac3a:	4b39      	ldr	r3, [pc, #228]	@ (801ad20 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2d4>)
 801ac3c:	4a39      	ldr	r2, [pc, #228]	@ (801ad24 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2d8>)
 801ac3e:	2168      	movs	r1, #104	@ 0x68
 801ac40:	4839      	ldr	r0, [pc, #228]	@ (801ad28 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2dc>)
 801ac42:	f01a faf9 	bl	8035238 <__assert_func>
            if (neg) {
 801ac46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d007      	beq.n	801ac5c <sqisign_gen_ibz_xgcd_with_u_not_0+0x210>
                ibz_neg(&q, &q);
 801ac4c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 801ac50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ac54:	4611      	mov	r1, r2
 801ac56:	4618      	mov	r0, r3
 801ac58:	f002 fa18 	bl	801d08c <sqisign_gen_ibz_neg>
            }
            ibz_sub(v, v, &q);
 801ac5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ac60:	461a      	mov	r2, r3
 801ac62:	6879      	ldr	r1, [r7, #4]
 801ac64:	6878      	ldr	r0, [r7, #4]
 801ac66:	f002 f9f3 	bl	801d050 <sqisign_gen_ibz_sub>

            ibz_mul(&q, &x1, u);
 801ac6a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801ac6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ac72:	68ba      	ldr	r2, [r7, #8]
 801ac74:	4618      	mov	r0, r3
 801ac76:	f002 f9fa 	bl	801d06e <sqisign_gen_ibz_mul>
        while (ibz_cmp(&q, &ibz_const_zero) <= 0) {
 801ac7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ac7e:	492b      	ldr	r1, [pc, #172]	@ (801ad2c <sqisign_gen_ibz_xgcd_with_u_not_0+0x2e0>)
 801ac80:	4618      	mov	r0, r3
 801ac82:	f002 fa95 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801ac86:	4603      	mov	r3, r0
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	dd9c      	ble.n	801abc6 <sqisign_gen_ibz_xgcd_with_u_not_0+0x17a>
        }
    }

#ifndef NDEBUG
    int res = 0;
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	677b      	str	r3, [r7, #116]	@ 0x74
    ibz_t sum, prod, test, cmp;
    ibz_init(&sum);
 801ac90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ac94:	4618      	mov	r0, r3
 801ac96:	f002 f9b6 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&prod);
 801ac9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f002 f9b1 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&cmp);
 801aca4:	f107 0310 	add.w	r3, r7, #16
 801aca8:	4618      	mov	r0, r3
 801acaa:	f002 f9ac 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&test);
 801acae:	f107 031c 	add.w	r3, r7, #28
 801acb2:	4618      	mov	r0, r3
 801acb4:	f002 f9a7 	bl	801d006 <sqisign_gen_ibz_init>
    // sign correct
    res = res | !(ibz_cmp(d, &ibz_const_zero) >= 0);
 801acb8:	491c      	ldr	r1, [pc, #112]	@ (801ad2c <sqisign_gen_ibz_xgcd_with_u_not_0+0x2e0>)
 801acba:	68f8      	ldr	r0, [r7, #12]
 801acbc:	f002 fa78 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801acc0:	4603      	mov	r3, r0
 801acc2:	0fdb      	lsrs	r3, r3, #31
 801acc4:	b2db      	uxtb	r3, r3
 801acc6:	461a      	mov	r2, r3
 801acc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801acca:	4313      	orrs	r3, r2
 801accc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (ibz_is_zero(&x1) && ibz_is_zero(&y1)) {
 801acce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801acd2:	4618      	mov	r0, r3
 801acd4:	f002 fa7b 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801acd8:	4603      	mov	r3, r0
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d02a      	beq.n	801ad34 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2e8>
 801acde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ace2:	4618      	mov	r0, r3
 801ace4:	f002 fa73 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ace8:	4603      	mov	r3, r0
 801acea:	2b00      	cmp	r3, #0
 801acec:	d022      	beq.n	801ad34 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2e8>
        res = res | !(ibz_is_zero(v) && ibz_is_one(u) && ibz_is_one(d));
 801acee:	6878      	ldr	r0, [r7, #4]
 801acf0:	f002 fa6d 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801acf4:	4603      	mov	r3, r0
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d00b      	beq.n	801ad12 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2c6>
 801acfa:	68b8      	ldr	r0, [r7, #8]
 801acfc:	f002 fa7b 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801ad00:	4603      	mov	r3, r0
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d005      	beq.n	801ad12 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2c6>
 801ad06:	68f8      	ldr	r0, [r7, #12]
 801ad08:	f002 fa75 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d101      	bne.n	801ad16 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2ca>
 801ad12:	2301      	movs	r3, #1
 801ad14:	e000      	b.n	801ad18 <sqisign_gen_ibz_xgcd_with_u_not_0+0x2cc>
 801ad16:	2300      	movs	r3, #0
 801ad18:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801ad1a:	4313      	orrs	r3, r2
 801ad1c:	677b      	str	r3, [r7, #116]	@ 0x74
 801ad1e:	e16e      	b.n	801affe <sqisign_gen_ibz_xgcd_with_u_not_0+0x5b2>
 801ad20:	08037894 	.word	0x08037894
 801ad24:	0803b75c 	.word	0x0803b75c
 801ad28:	08037878 	.word	0x08037878
 801ad2c:	0803b8f4 	.word	0x0803b8f4
 801ad30:	080378a4 	.word	0x080378a4
    } else {
        if (!ibz_is_zero(&x1) && !ibz_is_zero(&y1)) {
 801ad34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801ad38:	4618      	mov	r0, r3
 801ad3a:	f002 fa48 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	f040 80ae 	bne.w	801aea2 <sqisign_gen_ibz_xgcd_with_u_not_0+0x456>
 801ad46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	f002 fa3f 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ad50:	4603      	mov	r3, r0
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	f040 80a5 	bne.w	801aea2 <sqisign_gen_ibz_xgcd_with_u_not_0+0x456>
            // GCD divides x
            ibz_div(&sum, &prod, &x1, d);
 801ad58:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801ad5c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801ad60:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	f002 f9ab 	bl	801d0c0 <sqisign_gen_ibz_div>
            res = res | !ibz_is_zero(&prod);
 801ad6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f002 fa2d 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ad74:	4603      	mov	r3, r0
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	bf0c      	ite	eq
 801ad7a:	2301      	moveq	r3, #1
 801ad7c:	2300      	movne	r3, #0
 801ad7e:	b2db      	uxtb	r3, r3
 801ad80:	461a      	mov	r2, r3
 801ad82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad84:	4313      	orrs	r3, r2
 801ad86:	677b      	str	r3, [r7, #116]	@ 0x74
            // Small enough
            ibz_mul(&prod, &x1, u);
 801ad88:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801ad8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ad90:	68ba      	ldr	r2, [r7, #8]
 801ad92:	4618      	mov	r0, r3
 801ad94:	f002 f96b 	bl	801d06e <sqisign_gen_ibz_mul>
            res = res | !(ibz_cmp(&prod, &ibz_const_zero) > 0);
 801ad98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ad9c:	49b2      	ldr	r1, [pc, #712]	@ (801b068 <sqisign_gen_ibz_xgcd_with_u_not_0+0x61c>)
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f002 fa06 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801ada4:	4603      	mov	r3, r0
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	bfd4      	ite	le
 801adaa:	2301      	movle	r3, #1
 801adac:	2300      	movgt	r3, #0
 801adae:	b2db      	uxtb	r3, r3
 801adb0:	461a      	mov	r2, r3
 801adb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801adb4:	4313      	orrs	r3, r2
 801adb6:	677b      	str	r3, [r7, #116]	@ 0x74
            ibz_mul(&sum, &sum, &y1);
 801adb8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801adbc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801adc0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801adc4:	4618      	mov	r0, r3
 801adc6:	f002 f952 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_abs(&sum, &sum);
 801adca:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801adce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801add2:	4611      	mov	r1, r2
 801add4:	4618      	mov	r0, r3
 801add6:	f002 f966 	bl	801d0a6 <sqisign_gen_ibz_abs>
            res = res | !(ibz_cmp(&prod, &sum) <= 0);
 801adda:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801adde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ade2:	4611      	mov	r1, r2
 801ade4:	4618      	mov	r0, r3
 801ade6:	f002 f9e3 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801adea:	4603      	mov	r3, r0
 801adec:	2b00      	cmp	r3, #0
 801adee:	bfcc      	ite	gt
 801adf0:	2301      	movgt	r3, #1
 801adf2:	2300      	movle	r3, #0
 801adf4:	b2db      	uxtb	r3, r3
 801adf6:	461a      	mov	r2, r3
 801adf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801adfa:	4313      	orrs	r3, r2
 801adfc:	677b      	str	r3, [r7, #116]	@ 0x74

            // GCD divides y
            ibz_div(&sum, &prod, &y1, d);
 801adfe:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801ae02:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801ae06:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	f002 f958 	bl	801d0c0 <sqisign_gen_ibz_div>
            res = res | !ibz_is_zero(&prod);
 801ae10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ae14:	4618      	mov	r0, r3
 801ae16:	f002 f9da 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	bf0c      	ite	eq
 801ae20:	2301      	moveq	r3, #1
 801ae22:	2300      	movne	r3, #0
 801ae24:	b2db      	uxtb	r3, r3
 801ae26:	461a      	mov	r2, r3
 801ae28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ae2a:	4313      	orrs	r3, r2
 801ae2c:	677b      	str	r3, [r7, #116]	@ 0x74
            // Small enough
            ibz_mul(&prod, &y1, v);
 801ae2e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801ae32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ae36:	687a      	ldr	r2, [r7, #4]
 801ae38:	4618      	mov	r0, r3
 801ae3a:	f002 f918 	bl	801d06e <sqisign_gen_ibz_mul>
            res = res | !(ibz_cmp(&prod, &ibz_const_zero) <= 0);
 801ae3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ae42:	4989      	ldr	r1, [pc, #548]	@ (801b068 <sqisign_gen_ibz_xgcd_with_u_not_0+0x61c>)
 801ae44:	4618      	mov	r0, r3
 801ae46:	f002 f9b3 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	bfcc      	ite	gt
 801ae50:	2301      	movgt	r3, #1
 801ae52:	2300      	movle	r3, #0
 801ae54:	b2db      	uxtb	r3, r3
 801ae56:	461a      	mov	r2, r3
 801ae58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ae5a:	4313      	orrs	r3, r2
 801ae5c:	677b      	str	r3, [r7, #116]	@ 0x74
            ibz_mul(&sum, &sum, &x1);
 801ae5e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801ae62:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801ae66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	f002 f8ff 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_abs(&sum, &sum);
 801ae70:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801ae74:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ae78:	4611      	mov	r1, r2
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f002 f913 	bl	801d0a6 <sqisign_gen_ibz_abs>
            res = res | !(ibz_cmp(&prod, &sum) < 0);
 801ae80:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801ae84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ae88:	4611      	mov	r1, r2
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	f002 f990 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801ae90:	4603      	mov	r3, r0
 801ae92:	43db      	mvns	r3, r3
 801ae94:	0fdb      	lsrs	r3, r3, #31
 801ae96:	b2db      	uxtb	r3, r3
 801ae98:	461a      	mov	r2, r3
 801ae9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ae9c:	4313      	orrs	r3, r2
 801ae9e:	677b      	str	r3, [r7, #116]	@ 0x74
 801aea0:	e084      	b.n	801afac <sqisign_gen_ibz_xgcd_with_u_not_0+0x560>
        } else {
            // GCD divides x
            ibz_div(&sum, &prod, &x1, d);
 801aea2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801aea6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801aeaa:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	f002 f906 	bl	801d0c0 <sqisign_gen_ibz_div>
            res = res | !ibz_is_zero(&prod);
 801aeb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f002 f988 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801aebe:	4603      	mov	r3, r0
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	bf0c      	ite	eq
 801aec4:	2301      	moveq	r3, #1
 801aec6:	2300      	movne	r3, #0
 801aec8:	b2db      	uxtb	r3, r3
 801aeca:	461a      	mov	r2, r3
 801aecc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801aece:	4313      	orrs	r3, r2
 801aed0:	677b      	str	r3, [r7, #116]	@ 0x74
            // GCD divides y
            ibz_div(&sum, &prod, &y1, d);
 801aed2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801aed6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801aeda:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	f002 f8ee 	bl	801d0c0 <sqisign_gen_ibz_div>
            res = res | !ibz_is_zero(&prod);
 801aee4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801aee8:	4618      	mov	r0, r3
 801aeea:	f002 f970 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801aeee:	4603      	mov	r3, r0
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	bf0c      	ite	eq
 801aef4:	2301      	moveq	r3, #1
 801aef6:	2300      	movne	r3, #0
 801aef8:	b2db      	uxtb	r3, r3
 801aefa:	461a      	mov	r2, r3
 801aefc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801aefe:	4313      	orrs	r3, r2
 801af00:	677b      	str	r3, [r7, #116]	@ 0x74
            if (ibz_is_zero(&x1) && !ibz_is_zero(&y1)) {
 801af02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801af06:	4618      	mov	r0, r3
 801af08:	f002 f961 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801af0c:	4603      	mov	r3, r0
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d02a      	beq.n	801af68 <sqisign_gen_ibz_xgcd_with_u_not_0+0x51c>
 801af12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801af16:	4618      	mov	r0, r3
 801af18:	f002 f959 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801af1c:	4603      	mov	r3, r0
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d122      	bne.n	801af68 <sqisign_gen_ibz_xgcd_with_u_not_0+0x51c>
                ibz_abs(&prod, v);
 801af22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801af26:	6879      	ldr	r1, [r7, #4]
 801af28:	4618      	mov	r0, r3
 801af2a:	f002 f8bc 	bl	801d0a6 <sqisign_gen_ibz_abs>
                res = res | !(ibz_is_one(&prod));
 801af2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801af32:	4618      	mov	r0, r3
 801af34:	f002 f95f 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801af38:	4603      	mov	r3, r0
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	bf0c      	ite	eq
 801af3e:	2301      	moveq	r3, #1
 801af40:	2300      	movne	r3, #0
 801af42:	b2db      	uxtb	r3, r3
 801af44:	461a      	mov	r2, r3
 801af46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801af48:	4313      	orrs	r3, r2
 801af4a:	677b      	str	r3, [r7, #116]	@ 0x74
                res = res | !(ibz_is_one(u));
 801af4c:	68b8      	ldr	r0, [r7, #8]
 801af4e:	f002 f952 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801af52:	4603      	mov	r3, r0
 801af54:	2b00      	cmp	r3, #0
 801af56:	bf0c      	ite	eq
 801af58:	2301      	moveq	r3, #1
 801af5a:	2300      	movne	r3, #0
 801af5c:	b2db      	uxtb	r3, r3
 801af5e:	461a      	mov	r2, r3
 801af60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801af62:	4313      	orrs	r3, r2
 801af64:	677b      	str	r3, [r7, #116]	@ 0x74
 801af66:	e021      	b.n	801afac <sqisign_gen_ibz_xgcd_with_u_not_0+0x560>
            } else {
                ibz_abs(&prod, u);
 801af68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801af6c:	68b9      	ldr	r1, [r7, #8]
 801af6e:	4618      	mov	r0, r3
 801af70:	f002 f899 	bl	801d0a6 <sqisign_gen_ibz_abs>
                res = res | !(ibz_is_one(&prod));
 801af74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801af78:	4618      	mov	r0, r3
 801af7a:	f002 f93c 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801af7e:	4603      	mov	r3, r0
 801af80:	2b00      	cmp	r3, #0
 801af82:	bf0c      	ite	eq
 801af84:	2301      	moveq	r3, #1
 801af86:	2300      	movne	r3, #0
 801af88:	b2db      	uxtb	r3, r3
 801af8a:	461a      	mov	r2, r3
 801af8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801af8e:	4313      	orrs	r3, r2
 801af90:	677b      	str	r3, [r7, #116]	@ 0x74
                res = res | !(ibz_is_zero(v));
 801af92:	6878      	ldr	r0, [r7, #4]
 801af94:	f002 f91b 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801af98:	4603      	mov	r3, r0
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	bf0c      	ite	eq
 801af9e:	2301      	moveq	r3, #1
 801afa0:	2300      	movne	r3, #0
 801afa2:	b2db      	uxtb	r3, r3
 801afa4:	461a      	mov	r2, r3
 801afa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801afa8:	4313      	orrs	r3, r2
 801afaa:	677b      	str	r3, [r7, #116]	@ 0x74
            }
        }

        // Bezout coeffs
        ibz_mul(&sum, &x1, u);
 801afac:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801afb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801afb4:	68ba      	ldr	r2, [r7, #8]
 801afb6:	4618      	mov	r0, r3
 801afb8:	f002 f859 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&prod, &y1, v);
 801afbc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801afc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801afc4:	687a      	ldr	r2, [r7, #4]
 801afc6:	4618      	mov	r0, r3
 801afc8:	f002 f851 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_add(&sum, &sum, &prod);
 801afcc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801afd0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801afd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801afd8:	4618      	mov	r0, r3
 801afda:	f002 f82a 	bl	801d032 <sqisign_gen_ibz_add>
        res = res | !(ibz_cmp(&sum, d) == 0);
 801afde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801afe2:	68f9      	ldr	r1, [r7, #12]
 801afe4:	4618      	mov	r0, r3
 801afe6:	f002 f8e3 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801afea:	4603      	mov	r3, r0
 801afec:	2b00      	cmp	r3, #0
 801afee:	bf14      	ite	ne
 801aff0:	2301      	movne	r3, #1
 801aff2:	2300      	moveq	r3, #0
 801aff4:	b2db      	uxtb	r3, r3
 801aff6:	461a      	mov	r2, r3
 801aff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801affa:	4313      	orrs	r3, r2
 801affc:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    assert(!res);
 801affe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b000:	2b00      	cmp	r3, #0
 801b002:	d005      	beq.n	801b010 <sqisign_gen_ibz_xgcd_with_u_not_0+0x5c4>
 801b004:	4b19      	ldr	r3, [pc, #100]	@ (801b06c <sqisign_gen_ibz_xgcd_with_u_not_0+0x620>)
 801b006:	4a1a      	ldr	r2, [pc, #104]	@ (801b070 <sqisign_gen_ibz_xgcd_with_u_not_0+0x624>)
 801b008:	21aa      	movs	r1, #170	@ 0xaa
 801b00a:	481a      	ldr	r0, [pc, #104]	@ (801b074 <sqisign_gen_ibz_xgcd_with_u_not_0+0x628>)
 801b00c:	f01a f914 	bl	8035238 <__assert_func>
    ibz_finalize(&sum);
 801b010:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b014:	4618      	mov	r0, r3
 801b016:	f002 f801 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&prod);
 801b01a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801b01e:	4618      	mov	r0, r3
 801b020:	f001 fffc 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&cmp);
 801b024:	f107 0310 	add.w	r3, r7, #16
 801b028:	4618      	mov	r0, r3
 801b02a:	f001 fff7 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&test);
 801b02e:	f107 031c 	add.w	r3, r7, #28
 801b032:	4618      	mov	r0, r3
 801b034:	f001 fff2 	bl	801d01c <sqisign_gen_ibz_finalize>

#endif

    ibz_finalize(&x1);
 801b038:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801b03c:	4618      	mov	r0, r3
 801b03e:	f001 ffed 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&y1);
 801b042:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b046:	4618      	mov	r0, r3
 801b048:	f001 ffe8 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&q);
 801b04c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801b050:	4618      	mov	r0, r3
 801b052:	f001 ffe3 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&r);
 801b056:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b05a:	4618      	mov	r0, r3
 801b05c:	f001 ffde 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801b060:	377c      	adds	r7, #124	@ 0x7c
 801b062:	46bd      	mov	sp, r7
 801b064:	bd90      	pop	{r4, r7, pc}
 801b066:	bf00      	nop
 801b068:	0803b8f4 	.word	0x0803b8f4
 801b06c:	080378c4 	.word	0x080378c4
 801b070:	0803b75c 	.word	0x0803b75c
 801b074:	08037878 	.word	0x08037878

0801b078 <sqisign_gen_ibz_xgcd>:
#include <gmp.h>
#endif

void
ibz_xgcd(ibz_t *gcd, ibz_t *u, ibz_t *v, const ibz_t *a, const ibz_t *b)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b086      	sub	sp, #24
 801b07c:	af02      	add	r7, sp, #8
 801b07e:	60f8      	str	r0, [r7, #12]
 801b080:	60b9      	str	r1, [r7, #8]
 801b082:	607a      	str	r2, [r7, #4]
 801b084:	603b      	str	r3, [r7, #0]
    mpz_gcdext(*gcd, *u, *v, *a, *b);
 801b086:	69bb      	ldr	r3, [r7, #24]
 801b088:	9300      	str	r3, [sp, #0]
 801b08a:	683b      	ldr	r3, [r7, #0]
 801b08c:	687a      	ldr	r2, [r7, #4]
 801b08e:	68b9      	ldr	r1, [r7, #8]
 801b090:	68f8      	ldr	r0, [r7, #12]
 801b092:	f00a fed9 	bl	8025e48 <mpz_gcdext>
}
 801b096:	bf00      	nop
 801b098:	3710      	adds	r7, #16
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bd80      	pop	{r7, pc}

0801b09e <copy_point>:
{
 801b09e:	b580      	push	{r7, lr}
 801b0a0:	b082      	sub	sp, #8
 801b0a2:	af00      	add	r7, sp, #0
 801b0a4:	6078      	str	r0, [r7, #4]
 801b0a6:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	683a      	ldr	r2, [r7, #0]
 801b0ac:	4611      	mov	r1, r2
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	f7f7 fcbc 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801b0ba:	683b      	ldr	r3, [r7, #0]
 801b0bc:	3348      	adds	r3, #72	@ 0x48
 801b0be:	4619      	mov	r1, r3
 801b0c0:	4610      	mov	r0, r2
 801b0c2:	f7f7 fcb3 	bl	8012a2c <fp2_copy>
}
 801b0c6:	bf00      	nop
 801b0c8:	3708      	adds	r7, #8
 801b0ca:	46bd      	mov	sp, r7
 801b0cc:	bd80      	pop	{r7, pc}

0801b0ce <copy_basis>:
{
 801b0ce:	b580      	push	{r7, lr}
 801b0d0:	b082      	sub	sp, #8
 801b0d2:	af00      	add	r7, sp, #0
 801b0d4:	6078      	str	r0, [r7, #4]
 801b0d6:	6039      	str	r1, [r7, #0]
    copy_point(&B1->P, &B0->P);
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	683a      	ldr	r2, [r7, #0]
 801b0dc:	4611      	mov	r1, r2
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f7ff ffdd 	bl	801b09e <copy_point>
    copy_point(&B1->Q, &B0->Q);
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801b0ea:	683b      	ldr	r3, [r7, #0]
 801b0ec:	3390      	adds	r3, #144	@ 0x90
 801b0ee:	4619      	mov	r1, r3
 801b0f0:	4610      	mov	r0, r2
 801b0f2:	f7ff ffd4 	bl	801b09e <copy_point>
    copy_point(&B1->PmQ, &B0->PmQ);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801b102:	4619      	mov	r1, r3
 801b104:	4610      	mov	r0, r2
 801b106:	f7ff ffca 	bl	801b09e <copy_point>
}
 801b10a:	bf00      	nop
 801b10c:	3708      	adds	r7, #8
 801b10e:	46bd      	mov	sp, r7
 801b110:	bd80      	pop	{r7, pc}

0801b112 <copy_curve>:
{
 801b112:	b580      	push	{r7, lr}
 801b114:	b082      	sub	sp, #8
 801b116:	af00      	add	r7, sp, #0
 801b118:	6078      	str	r0, [r7, #4]
 801b11a:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	683a      	ldr	r2, [r7, #0]
 801b120:	4611      	mov	r1, r2
 801b122:	4618      	mov	r0, r3
 801b124:	f7f7 fc82 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801b12e:	683b      	ldr	r3, [r7, #0]
 801b130:	3348      	adds	r3, #72	@ 0x48
 801b132:	4619      	mov	r1, r3
 801b134:	4610      	mov	r0, r2
 801b136:	f7f7 fc79 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 801b13a:	683b      	ldr	r3, [r7, #0]
 801b13c:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	3390      	adds	r3, #144	@ 0x90
 801b150:	4619      	mov	r1, r3
 801b152:	4610      	mov	r0, r2
 801b154:	f7ff ffa3 	bl	801b09e <copy_point>
}
 801b158:	bf00      	nop
 801b15a:	3708      	adds	r7, #8
 801b15c:	46bd      	mov	sp, r7
 801b15e:	bd80      	pop	{r7, pc}

0801b160 <test_point_order_twof>:
{
 801b160:	b580      	push	{r7, lr}
 801b162:	b0f2      	sub	sp, #456	@ 0x1c8
 801b164:	af00      	add	r7, sp, #0
 801b166:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801b16a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801b16e:	6018      	str	r0, [r3, #0]
 801b170:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801b174:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801b178:	6019      	str	r1, [r3, #0]
 801b17a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801b17e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801b182:	601a      	str	r2, [r3, #0]
    test = *P;
 801b184:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801b188:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801b18c:	681a      	ldr	r2, [r3, #0]
 801b18e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801b192:	4611      	mov	r1, r2
 801b194:	2290      	movs	r2, #144	@ 0x90
 801b196:	4618      	mov	r0, r3
 801b198:	f01a fe01 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 801b19c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801b1a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801b1a4:	f107 0214 	add.w	r2, r7, #20
 801b1a8:	6819      	ldr	r1, [r3, #0]
 801b1aa:	4610      	mov	r0, r2
 801b1ac:	f7ff ffb1 	bl	801b112 <copy_curve>
    if (ec_is_zero(&test))
 801b1b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	f7f0 fa36 	bl	800b626 <ec_is_zero>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d001      	beq.n	801b1c4 <test_point_order_twof+0x64>
        return 0;
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	e026      	b.n	801b212 <test_point_order_twof+0xb2>
    ec_dbl_iter(&test, t - 1, &test, &curve);
 801b1c4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801b1c8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	1e59      	subs	r1, r3, #1
 801b1d0:	f107 0314 	add.w	r3, r7, #20
 801b1d4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801b1d8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 801b1dc:	f7f1 fc98 	bl	800cb10 <ec_dbl_iter>
    if (ec_is_zero(&test))
 801b1e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	f7f0 fa1e 	bl	800b626 <ec_is_zero>
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d001      	beq.n	801b1f4 <test_point_order_twof+0x94>
        return 0;
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	e00e      	b.n	801b212 <test_point_order_twof+0xb2>
    ec_dbl(&test, &test, &curve);
 801b1f4:	f107 0214 	add.w	r2, r7, #20
 801b1f8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801b1fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801b200:	4618      	mov	r0, r3
 801b202:	f7f1 fc53 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 801b206:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801b20a:	4618      	mov	r0, r3
 801b20c:	f7f0 fa0b 	bl	800b626 <ec_is_zero>
 801b210:	4603      	mov	r3, r0
}
 801b212:	4618      	mov	r0, r3
 801b214:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 801b218:	46bd      	mov	sp, r7
 801b21a:	bd80      	pop	{r7, pc}

0801b21c <test_basis_order_twof>:
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b088      	sub	sp, #32
 801b220:	af00      	add	r7, sp, #0
 801b222:	60f8      	str	r0, [r7, #12]
 801b224:	60b9      	str	r1, [r7, #8]
 801b226:	607a      	str	r2, [r7, #4]
    int check_P = test_point_order_twof(&B->P, E, t);
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	687a      	ldr	r2, [r7, #4]
 801b22c:	68b9      	ldr	r1, [r7, #8]
 801b22e:	4618      	mov	r0, r3
 801b230:	f7ff ff96 	bl	801b160 <test_point_order_twof>
 801b234:	61f8      	str	r0, [r7, #28]
    int check_Q = test_point_order_twof(&B->Q, E, t);
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	3390      	adds	r3, #144	@ 0x90
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	68b9      	ldr	r1, [r7, #8]
 801b23e:	4618      	mov	r0, r3
 801b240:	f7ff ff8e 	bl	801b160 <test_point_order_twof>
 801b244:	61b8      	str	r0, [r7, #24]
    int check_PmQ = test_point_order_twof(&B->PmQ, E, t);
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801b24c:	687a      	ldr	r2, [r7, #4]
 801b24e:	68b9      	ldr	r1, [r7, #8]
 801b250:	4618      	mov	r0, r3
 801b252:	f7ff ff85 	bl	801b160 <test_point_order_twof>
 801b256:	6178      	str	r0, [r7, #20]
    return check_P & check_Q & check_PmQ;
 801b258:	69fa      	ldr	r2, [r7, #28]
 801b25a:	69bb      	ldr	r3, [r7, #24]
 801b25c:	401a      	ands	r2, r3
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	4013      	ands	r3, r2
}
 801b262:	4618      	mov	r0, r3
 801b264:	3720      	adds	r7, #32
 801b266:	46bd      	mov	sp, r7
 801b268:	bd80      	pop	{r7, pc}

0801b26a <ec_biscalar_mul_ibz_vec>:
ec_biscalar_mul_ibz_vec(ec_point_t *res,
                        const ibz_vec_2_t *scalar_vec,
                        const int f,
                        const ec_basis_t *PQ,
                        const ec_curve_t *curve)
{
 801b26a:	b580      	push	{r7, lr}
 801b26c:	b096      	sub	sp, #88	@ 0x58
 801b26e:	af02      	add	r7, sp, #8
 801b270:	60f8      	str	r0, [r7, #12]
 801b272:	60b9      	str	r1, [r7, #8]
 801b274:	607a      	str	r2, [r7, #4]
 801b276:	603b      	str	r3, [r7, #0]
    digit_t scalars[2][NWORDS_ORDER];
    ibz_to_digit_array(scalars[0], &(*scalar_vec)[0]);
 801b278:	f107 0310 	add.w	r3, r7, #16
 801b27c:	2220      	movs	r2, #32
 801b27e:	2100      	movs	r1, #0
 801b280:	4618      	mov	r0, r3
 801b282:	f01a fcbd 	bl	8035c00 <memset>
 801b286:	68ba      	ldr	r2, [r7, #8]
 801b288:	f107 0310 	add.w	r3, r7, #16
 801b28c:	4611      	mov	r1, r2
 801b28e:	4618      	mov	r0, r3
 801b290:	f002 f986 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ibz_to_digit_array(scalars[1], &(*scalar_vec)[1]);
 801b294:	f107 0310 	add.w	r3, r7, #16
 801b298:	3320      	adds	r3, #32
 801b29a:	2220      	movs	r2, #32
 801b29c:	2100      	movs	r1, #0
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f01a fcae 	bl	8035c00 <memset>
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	f103 020c 	add.w	r2, r3, #12
 801b2aa:	f107 0310 	add.w	r3, r7, #16
 801b2ae:	3320      	adds	r3, #32
 801b2b0:	4611      	mov	r1, r2
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	f002 f974 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ec_biscalar_mul(res, scalars[0], scalars[1], f, PQ, curve);
 801b2b8:	f107 0310 	add.w	r3, r7, #16
 801b2bc:	f103 0220 	add.w	r2, r3, #32
 801b2c0:	f107 0110 	add.w	r1, r7, #16
 801b2c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b2c6:	9301      	str	r3, [sp, #4]
 801b2c8:	683b      	ldr	r3, [r7, #0]
 801b2ca:	9300      	str	r3, [sp, #0]
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	68f8      	ldr	r0, [r7, #12]
 801b2d0:	f7f1 fcce 	bl	800cc70 <ec_biscalar_mul>
}
 801b2d4:	bf00      	nop
 801b2d6:	3750      	adds	r7, #80	@ 0x50
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	bd80      	pop	{r7, pc}

0801b2dc <id2iso_ideal_to_kernel_dlogs_even>:

// Given an ideal, computes the scalars s0, s1 which determine the kernel generator
// of the equivalent isogeny
void
id2iso_ideal_to_kernel_dlogs_even(ibz_vec_2_t *vec, const quat_left_ideal_t *lideal)
{
 801b2dc:	b590      	push	{r4, r7, lr}
 801b2de:	b0b1      	sub	sp, #196	@ 0xc4
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	6078      	str	r0, [r7, #4]
 801b2e4:	6039      	str	r1, [r7, #0]
    ibz_t tmp;
    ibz_init(&tmp);
 801b2e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	f001 fe8b 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_mat_2x2_t mat;
    ibz_mat_2x2_init(&mat);
 801b2f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	f7f3 fdc4 	bl	800ee82 <sqisign_gen_ibz_mat_2x2_init>

    // construct the matrix of the dual of alpha on the 2^f-torsion
    {
        quat_alg_elem_t alpha;
        quat_alg_elem_init(&alpha);
 801b2fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801b2fe:	4618      	mov	r0, r3
 801b300:	f7f3 fd3e 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>

        int lideal_generator_ok UNUSED = quat_lideal_generator(&alpha, lideal, &QUATALG_PINFTY);
 801b304:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801b308:	4acb      	ldr	r2, [pc, #812]	@ (801b638 <id2iso_ideal_to_kernel_dlogs_even+0x35c>)
 801b30a:	6839      	ldr	r1, [r7, #0]
 801b30c:	4618      	mov	r0, r3
 801b30e:	f001 f9d1 	bl	801c6b4 <sqisign_gen_quat_lideal_generator>
 801b312:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
        assert(lideal_generator_ok);
 801b316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d105      	bne.n	801b32a <id2iso_ideal_to_kernel_dlogs_even+0x4e>
 801b31e:	4bc7      	ldr	r3, [pc, #796]	@ (801b63c <id2iso_ideal_to_kernel_dlogs_even+0x360>)
 801b320:	4ac7      	ldr	r2, [pc, #796]	@ (801b640 <id2iso_ideal_to_kernel_dlogs_even+0x364>)
 801b322:	212b      	movs	r1, #43	@ 0x2b
 801b324:	48c7      	ldr	r0, [pc, #796]	@ (801b644 <id2iso_ideal_to_kernel_dlogs_even+0x368>)
 801b326:	f019 ff87 	bl	8035238 <__assert_func>
        quat_alg_conj(&alpha, &alpha);
 801b32a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 801b32e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801b332:	4611      	mov	r1, r2
 801b334:	4618      	mov	r0, r3
 801b336:	f7e6 f92c 	bl	8001592 <sqisign_gen_quat_alg_conj>

        ibz_vec_4_t coeffs;
        ibz_vec_4_init(&coeffs);
 801b33a:	f107 0308 	add.w	r3, r7, #8
 801b33e:	4618      	mov	r0, r3
 801b340:	f7f3 fd67 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
        quat_change_to_O0_basis(&coeffs, &alpha);
 801b344:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 801b348:	f107 0308 	add.w	r3, r7, #8
 801b34c:	4611      	mov	r1, r2
 801b34e:	4618      	mov	r0, r3
 801b350:	f00e f8e4 	bl	802951c <sqisign_gen_quat_change_to_O0_basis>

        for (unsigned i = 0; i < 2; ++i) {
 801b354:	2300      	movs	r3, #0
 801b356:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801b35a:	e0f2      	b.n	801b542 <id2iso_ideal_to_kernel_dlogs_even+0x266>
            ibz_add(&mat[i][i], &mat[i][i], &coeffs[0]);
 801b35c:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801b360:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b364:	4613      	mov	r3, r2
 801b366:	00db      	lsls	r3, r3, #3
 801b368:	4413      	add	r3, r2
 801b36a:	009b      	lsls	r3, r3, #2
 801b36c:	18c8      	adds	r0, r1, r3
 801b36e:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801b372:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b376:	4613      	mov	r3, r2
 801b378:	00db      	lsls	r3, r3, #3
 801b37a:	4413      	add	r3, r2
 801b37c:	009b      	lsls	r3, r3, #2
 801b37e:	440b      	add	r3, r1
 801b380:	f107 0208 	add.w	r2, r7, #8
 801b384:	4619      	mov	r1, r3
 801b386:	f001 fe54 	bl	801d032 <sqisign_gen_ibz_add>
            for (unsigned j = 0; j < 2; ++j) {
 801b38a:	2300      	movs	r3, #0
 801b38c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b390:	e0cd      	b.n	801b52e <id2iso_ideal_to_kernel_dlogs_even+0x252>
                ibz_mul(&tmp, &ACTION_GEN2[i][j], &coeffs[1]);
 801b392:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b396:	4613      	mov	r3, r2
 801b398:	005b      	lsls	r3, r3, #1
 801b39a:	4413      	add	r3, r2
 801b39c:	00db      	lsls	r3, r3, #3
 801b39e:	4619      	mov	r1, r3
 801b3a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b3a4:	4613      	mov	r3, r2
 801b3a6:	005b      	lsls	r3, r3, #1
 801b3a8:	4413      	add	r3, r2
 801b3aa:	009b      	lsls	r3, r3, #2
 801b3ac:	440b      	add	r3, r1
 801b3ae:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 801b3b2:	4aa5      	ldr	r2, [pc, #660]	@ (801b648 <id2iso_ideal_to_kernel_dlogs_even+0x36c>)
 801b3b4:	1899      	adds	r1, r3, r2
 801b3b6:	f107 0308 	add.w	r3, r7, #8
 801b3ba:	f103 020c 	add.w	r2, r3, #12
 801b3be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	f001 fe53 	bl	801d06e <sqisign_gen_ibz_mul>
                ibz_add(&mat[i][j], &mat[i][j], &tmp);
 801b3c8:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801b3cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	0052      	lsls	r2, r2, #1
 801b3d4:	441a      	add	r2, r3
 801b3d6:	0093      	lsls	r3, r2, #2
 801b3d8:	461a      	mov	r2, r3
 801b3da:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801b3de:	460b      	mov	r3, r1
 801b3e0:	005b      	lsls	r3, r3, #1
 801b3e2:	440b      	add	r3, r1
 801b3e4:	00db      	lsls	r3, r3, #3
 801b3e6:	4413      	add	r3, r2
 801b3e8:	18c4      	adds	r4, r0, r3
 801b3ea:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801b3ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b3f2:	461a      	mov	r2, r3
 801b3f4:	0052      	lsls	r2, r2, #1
 801b3f6:	441a      	add	r2, r3
 801b3f8:	0093      	lsls	r3, r2, #2
 801b3fa:	461a      	mov	r2, r3
 801b3fc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801b400:	460b      	mov	r3, r1
 801b402:	005b      	lsls	r3, r3, #1
 801b404:	440b      	add	r3, r1
 801b406:	00db      	lsls	r3, r3, #3
 801b408:	4413      	add	r3, r2
 801b40a:	4403      	add	r3, r0
 801b40c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 801b410:	4619      	mov	r1, r3
 801b412:	4620      	mov	r0, r4
 801b414:	f001 fe0d 	bl	801d032 <sqisign_gen_ibz_add>
                ibz_mul(&tmp, &ACTION_GEN3[i][j], &coeffs[2]);
 801b418:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b41c:	4613      	mov	r3, r2
 801b41e:	005b      	lsls	r3, r3, #1
 801b420:	4413      	add	r3, r2
 801b422:	00db      	lsls	r3, r3, #3
 801b424:	4619      	mov	r1, r3
 801b426:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b42a:	4613      	mov	r3, r2
 801b42c:	005b      	lsls	r3, r3, #1
 801b42e:	4413      	add	r3, r2
 801b430:	009b      	lsls	r3, r3, #2
 801b432:	440b      	add	r3, r1
 801b434:	f503 7365 	add.w	r3, r3, #916	@ 0x394
 801b438:	4a83      	ldr	r2, [pc, #524]	@ (801b648 <id2iso_ideal_to_kernel_dlogs_even+0x36c>)
 801b43a:	1899      	adds	r1, r3, r2
 801b43c:	f107 0308 	add.w	r3, r7, #8
 801b440:	f103 0218 	add.w	r2, r3, #24
 801b444:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b448:	4618      	mov	r0, r3
 801b44a:	f001 fe10 	bl	801d06e <sqisign_gen_ibz_mul>
                ibz_add(&mat[i][j], &mat[i][j], &tmp);
 801b44e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801b452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b456:	461a      	mov	r2, r3
 801b458:	0052      	lsls	r2, r2, #1
 801b45a:	441a      	add	r2, r3
 801b45c:	0093      	lsls	r3, r2, #2
 801b45e:	461a      	mov	r2, r3
 801b460:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801b464:	460b      	mov	r3, r1
 801b466:	005b      	lsls	r3, r3, #1
 801b468:	440b      	add	r3, r1
 801b46a:	00db      	lsls	r3, r3, #3
 801b46c:	4413      	add	r3, r2
 801b46e:	18c4      	adds	r4, r0, r3
 801b470:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801b474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b478:	461a      	mov	r2, r3
 801b47a:	0052      	lsls	r2, r2, #1
 801b47c:	441a      	add	r2, r3
 801b47e:	0093      	lsls	r3, r2, #2
 801b480:	461a      	mov	r2, r3
 801b482:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801b486:	460b      	mov	r3, r1
 801b488:	005b      	lsls	r3, r3, #1
 801b48a:	440b      	add	r3, r1
 801b48c:	00db      	lsls	r3, r3, #3
 801b48e:	4413      	add	r3, r2
 801b490:	4403      	add	r3, r0
 801b492:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 801b496:	4619      	mov	r1, r3
 801b498:	4620      	mov	r0, r4
 801b49a:	f001 fdca 	bl	801d032 <sqisign_gen_ibz_add>
                ibz_mul(&tmp, &ACTION_GEN4[i][j], &coeffs[3]);
 801b49e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b4a2:	4613      	mov	r3, r2
 801b4a4:	005b      	lsls	r3, r3, #1
 801b4a6:	4413      	add	r3, r2
 801b4a8:	00db      	lsls	r3, r3, #3
 801b4aa:	4619      	mov	r1, r3
 801b4ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b4b0:	4613      	mov	r3, r2
 801b4b2:	005b      	lsls	r3, r3, #1
 801b4b4:	4413      	add	r3, r2
 801b4b6:	009b      	lsls	r3, r3, #2
 801b4b8:	440b      	add	r3, r1
 801b4ba:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 801b4be:	4a62      	ldr	r2, [pc, #392]	@ (801b648 <id2iso_ideal_to_kernel_dlogs_even+0x36c>)
 801b4c0:	1899      	adds	r1, r3, r2
 801b4c2:	f107 0308 	add.w	r3, r7, #8
 801b4c6:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801b4ca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	f001 fdcd 	bl	801d06e <sqisign_gen_ibz_mul>
                ibz_add(&mat[i][j], &mat[i][j], &tmp);
 801b4d4:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801b4d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b4dc:	461a      	mov	r2, r3
 801b4de:	0052      	lsls	r2, r2, #1
 801b4e0:	441a      	add	r2, r3
 801b4e2:	0093      	lsls	r3, r2, #2
 801b4e4:	461a      	mov	r2, r3
 801b4e6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	005b      	lsls	r3, r3, #1
 801b4ee:	440b      	add	r3, r1
 801b4f0:	00db      	lsls	r3, r3, #3
 801b4f2:	4413      	add	r3, r2
 801b4f4:	18c4      	adds	r4, r0, r3
 801b4f6:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801b4fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b4fe:	461a      	mov	r2, r3
 801b500:	0052      	lsls	r2, r2, #1
 801b502:	441a      	add	r2, r3
 801b504:	0093      	lsls	r3, r2, #2
 801b506:	461a      	mov	r2, r3
 801b508:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801b50c:	460b      	mov	r3, r1
 801b50e:	005b      	lsls	r3, r3, #1
 801b510:	440b      	add	r3, r1
 801b512:	00db      	lsls	r3, r3, #3
 801b514:	4413      	add	r3, r2
 801b516:	4403      	add	r3, r0
 801b518:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 801b51c:	4619      	mov	r1, r3
 801b51e:	4620      	mov	r0, r4
 801b520:	f001 fd87 	bl	801d032 <sqisign_gen_ibz_add>
            for (unsigned j = 0; j < 2; ++j) {
 801b524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b528:	3301      	adds	r3, #1
 801b52a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b52e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b532:	2b01      	cmp	r3, #1
 801b534:	f67f af2d 	bls.w	801b392 <id2iso_ideal_to_kernel_dlogs_even+0xb6>
        for (unsigned i = 0; i < 2; ++i) {
 801b538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b53c:	3301      	adds	r3, #1
 801b53e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801b542:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b546:	2b01      	cmp	r3, #1
 801b548:	f67f af08 	bls.w	801b35c <id2iso_ideal_to_kernel_dlogs_even+0x80>
            }
        }

        ibz_vec_4_finalize(&coeffs);
 801b54c:	f107 0308 	add.w	r3, r7, #8
 801b550:	4618      	mov	r0, r3
 801b552:	f7f3 fc7a 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
        quat_alg_elem_finalize(&alpha);
 801b556:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801b55a:	4618      	mov	r0, r3
 801b55c:	f7f3 fc26 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    }

    // find the kernel of alpha modulo the norm of the ideal
    {
        const ibz_t *const norm = &lideal->norm;
 801b560:	683b      	ldr	r3, [r7, #0]
 801b562:	33cc      	adds	r3, #204	@ 0xcc
 801b564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

        ibz_mod(&(*vec)[0], &mat[0][0], norm);
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801b56e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b572:	4618      	mov	r0, r3
 801b574:	f001 fdd5 	bl	801d122 <sqisign_gen_ibz_mod>
        ibz_mod(&(*vec)[1], &mat[1][0], norm);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	f103 000c 	add.w	r0, r3, #12
 801b57e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801b582:	3318      	adds	r3, #24
 801b584:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b588:	4619      	mov	r1, r3
 801b58a:	f001 fdca 	bl	801d122 <sqisign_gen_ibz_mod>
        ibz_gcd(&tmp, &(*vec)[0], &(*vec)[1]);
 801b58e:	6879      	ldr	r1, [r7, #4]
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	f103 020c 	add.w	r2, r3, #12
 801b596:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b59a:	4618      	mov	r0, r3
 801b59c:	f002 f828 	bl	801d5f0 <sqisign_gen_ibz_gcd>
        if (ibz_is_even(&tmp)) {
 801b5a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	f001 fe3a 	bl	801d21e <sqisign_gen_ibz_is_even>
 801b5aa:	4603      	mov	r3, r0
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d013      	beq.n	801b5d8 <id2iso_ideal_to_kernel_dlogs_even+0x2fc>
            ibz_mod(&(*vec)[0], &mat[0][1], norm);
 801b5b0:	6878      	ldr	r0, [r7, #4]
 801b5b2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801b5b6:	330c      	adds	r3, #12
 801b5b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b5bc:	4619      	mov	r1, r3
 801b5be:	f001 fdb0 	bl	801d122 <sqisign_gen_ibz_mod>
            ibz_mod(&(*vec)[1], &mat[1][1], norm);
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	f103 000c 	add.w	r0, r3, #12
 801b5c8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801b5cc:	3324      	adds	r3, #36	@ 0x24
 801b5ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b5d2:	4619      	mov	r1, r3
 801b5d4:	f001 fda5 	bl	801d122 <sqisign_gen_ibz_mod>
        }
#ifndef NDEBUG
        ibz_gcd(&tmp, &(*vec)[0], norm);
 801b5d8:	6879      	ldr	r1, [r7, #4]
 801b5da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b5de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	f002 f804 	bl	801d5f0 <sqisign_gen_ibz_gcd>
        ibz_gcd(&tmp, &(*vec)[1], &tmp);
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	f103 010c 	add.w	r1, r3, #12
 801b5ee:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 801b5f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f001 fffa 	bl	801d5f0 <sqisign_gen_ibz_gcd>
        assert(!ibz_cmp(&tmp, &ibz_const_one));
 801b5fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b600:	4912      	ldr	r1, [pc, #72]	@ (801b64c <id2iso_ideal_to_kernel_dlogs_even+0x370>)
 801b602:	4618      	mov	r0, r3
 801b604:	f001 fdd4 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801b608:	4603      	mov	r3, r0
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d005      	beq.n	801b61a <id2iso_ideal_to_kernel_dlogs_even+0x33e>
 801b60e:	4b10      	ldr	r3, [pc, #64]	@ (801b650 <id2iso_ideal_to_kernel_dlogs_even+0x374>)
 801b610:	4a0b      	ldr	r2, [pc, #44]	@ (801b640 <id2iso_ideal_to_kernel_dlogs_even+0x364>)
 801b612:	2150      	movs	r1, #80	@ 0x50
 801b614:	480b      	ldr	r0, [pc, #44]	@ (801b644 <id2iso_ideal_to_kernel_dlogs_even+0x368>)
 801b616:	f019 fe0f 	bl	8035238 <__assert_func>
#endif
    }

    ibz_mat_2x2_finalize(&mat);
 801b61a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801b61e:	4618      	mov	r0, r3
 801b620:	f7f3 fc5b 	bl	800eeda <sqisign_gen_ibz_mat_2x2_finalize>
    ibz_finalize(&tmp);
 801b624:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801b628:	4618      	mov	r0, r3
 801b62a:	f001 fcf7 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801b62e:	bf00      	nop
 801b630:	37c4      	adds	r7, #196	@ 0xc4
 801b632:	46bd      	mov	sp, r7
 801b634:	bd90      	pop	{r4, r7, pc}
 801b636:	bf00      	nop
 801b638:	0803bf30 	.word	0x0803bf30
 801b63c:	080378d8 	.word	0x080378d8
 801b640:	080378ec 	.word	0x080378ec
 801b644:	080378f0 	.word	0x080378f0
 801b648:	08039740 	.word	0x08039740
 801b64c:	0803b900 	.word	0x0803b900
 801b650:	08037908 	.word	0x08037908

0801b654 <matrix_application_even_basis>:

// helper function to apply a matrix to a basis of E[2^f]
// works in place
int
matrix_application_even_basis(ec_basis_t *bas, const ec_curve_t *E, ibz_mat_2x2_t *mat, int f)
{
 801b654:	b590      	push	{r4, r7, lr}
 801b656:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 801b65a:	af02      	add	r7, sp, #8
 801b65c:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 801b660:	f5a4 7405 	sub.w	r4, r4, #532	@ 0x214
 801b664:	6020      	str	r0, [r4, #0]
 801b666:	f507 7008 	add.w	r0, r7, #544	@ 0x220
 801b66a:	f5a0 7006 	sub.w	r0, r0, #536	@ 0x218
 801b66e:	6001      	str	r1, [r0, #0]
 801b670:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 801b674:	f5a1 7107 	sub.w	r1, r1, #540	@ 0x21c
 801b678:	600a      	str	r2, [r1, #0]
 801b67a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801b67e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801b682:	6013      	str	r3, [r2, #0]
    digit_t scalars[2][NWORDS_ORDER] = { 0 };
 801b684:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b688:	2240      	movs	r2, #64	@ 0x40
 801b68a:	2100      	movs	r1, #0
 801b68c:	4618      	mov	r0, r3
 801b68e:	f01a fab7 	bl	8035c00 <memset>
    int ret;

    ibz_t tmp, pow_two;
    ibz_init(&tmp);
 801b692:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801b696:	4618      	mov	r0, r3
 801b698:	f001 fcb5 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&pow_two);
 801b69c:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f001 fcb0 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_pow(&pow_two, &ibz_const_two, f);
 801b6a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b6ae:	681a      	ldr	r2, [r3, #0]
 801b6b0:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 801b6b4:	49b2      	ldr	r1, [pc, #712]	@ (801b980 <matrix_application_even_basis+0x32c>)
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f001 fd5e 	bl	801d178 <sqisign_gen_ibz_pow>

    ec_basis_t tmp_bas;
    copy_basis(&tmp_bas, bas);
 801b6bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6c0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801b6c4:	f107 0214 	add.w	r2, r7, #20
 801b6c8:	6819      	ldr	r1, [r3, #0]
 801b6ca:	4610      	mov	r0, r2
 801b6cc:	f7ff fcff 	bl	801b0ce <copy_basis>

    // reduction mod 2f
    ibz_mod(&(*mat)[0][0], &(*mat)[0][0], &pow_two);
 801b6d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6d4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b6d8:	6818      	ldr	r0, [r3, #0]
 801b6da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6de:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 801b6e8:	4619      	mov	r1, r3
 801b6ea:	f001 fd1a 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_mod(&(*mat)[0][1], &(*mat)[0][1], &pow_two);
 801b6ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b6f2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	f103 000c 	add.w	r0, r3, #12
 801b6fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b700:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	330c      	adds	r3, #12
 801b708:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 801b70c:	4619      	mov	r1, r3
 801b70e:	f001 fd08 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_mod(&(*mat)[1][0], &(*mat)[1][0], &pow_two);
 801b712:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b716:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	f103 0018 	add.w	r0, r3, #24
 801b720:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b724:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	3318      	adds	r3, #24
 801b72c:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 801b730:	4619      	mov	r1, r3
 801b732:	f001 fcf6 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_mod(&(*mat)[1][1], &(*mat)[1][1], &pow_two);
 801b736:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b73a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801b744:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b748:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	3324      	adds	r3, #36	@ 0x24
 801b750:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 801b754:	4619      	mov	r1, r3
 801b756:	f001 fce4 	bl	801d122 <sqisign_gen_ibz_mod>

    // For a matrix [[a, c], [b, d]] we compute:
    //
    // first basis element R = [a]P + [b]Q
    ibz_to_digit_array(scalars[0], &(*mat)[0][0]);
 801b75a:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b75e:	2220      	movs	r2, #32
 801b760:	2100      	movs	r1, #0
 801b762:	4618      	mov	r0, r3
 801b764:	f01a fa4c 	bl	8035c00 <memset>
 801b768:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b76c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b770:	681a      	ldr	r2, [r3, #0]
 801b772:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b776:	4611      	mov	r1, r2
 801b778:	4618      	mov	r0, r3
 801b77a:	f001 ff11 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ibz_to_digit_array(scalars[1], &(*mat)[1][0]);
 801b77e:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b782:	3320      	adds	r3, #32
 801b784:	2220      	movs	r2, #32
 801b786:	2100      	movs	r1, #0
 801b788:	4618      	mov	r0, r3
 801b78a:	f01a fa39 	bl	8035c00 <memset>
 801b78e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b792:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	f103 0218 	add.w	r2, r3, #24
 801b79c:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b7a0:	3320      	adds	r3, #32
 801b7a2:	4611      	mov	r1, r2
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f001 fefb 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ec_biscalar_mul(&bas->P, scalars[0], scalars[1], f, &tmp_bas, E);
 801b7aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b7ae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801b7b2:	6818      	ldr	r0, [r3, #0]
 801b7b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b7b8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b7bc:	f507 72ee 	add.w	r2, r7, #476	@ 0x1dc
 801b7c0:	f102 0420 	add.w	r4, r2, #32
 801b7c4:	f507 71ee 	add.w	r1, r7, #476	@ 0x1dc
 801b7c8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801b7cc:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 801b7d0:	6812      	ldr	r2, [r2, #0]
 801b7d2:	9201      	str	r2, [sp, #4]
 801b7d4:	f107 0214 	add.w	r2, r7, #20
 801b7d8:	9200      	str	r2, [sp, #0]
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	4622      	mov	r2, r4
 801b7de:	f7f1 fa47 	bl	800cc70 <ec_biscalar_mul>

    // second basis element S = [c]P + [d]Q
    ibz_to_digit_array(scalars[0], &(*mat)[0][1]);
 801b7e2:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b7e6:	2220      	movs	r2, #32
 801b7e8:	2100      	movs	r1, #0
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	f01a fa08 	bl	8035c00 <memset>
 801b7f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b7f4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	f103 020c 	add.w	r2, r3, #12
 801b7fe:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b802:	4611      	mov	r1, r2
 801b804:	4618      	mov	r0, r3
 801b806:	f001 fecb 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ibz_to_digit_array(scalars[1], &(*mat)[1][1]);
 801b80a:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b80e:	3320      	adds	r3, #32
 801b810:	2220      	movs	r2, #32
 801b812:	2100      	movs	r1, #0
 801b814:	4618      	mov	r0, r3
 801b816:	f01a f9f3 	bl	8035c00 <memset>
 801b81a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b81e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801b828:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b82c:	3320      	adds	r3, #32
 801b82e:	4611      	mov	r1, r2
 801b830:	4618      	mov	r0, r3
 801b832:	f001 feb5 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ec_biscalar_mul(&bas->Q, scalars[0], scalars[1], f, &tmp_bas, E);
 801b836:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b83a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 801b844:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b848:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b84c:	f507 72ee 	add.w	r2, r7, #476	@ 0x1dc
 801b850:	f102 0420 	add.w	r4, r2, #32
 801b854:	f507 71ee 	add.w	r1, r7, #476	@ 0x1dc
 801b858:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801b85c:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 801b860:	6812      	ldr	r2, [r2, #0]
 801b862:	9201      	str	r2, [sp, #4]
 801b864:	f107 0214 	add.w	r2, r7, #20
 801b868:	9200      	str	r2, [sp, #0]
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	4622      	mov	r2, r4
 801b86e:	f7f1 f9ff 	bl	800cc70 <ec_biscalar_mul>

    // Their difference R - S = [a - c]P + [b - d]Q
    ibz_sub(&tmp, &(*mat)[0][0], &(*mat)[0][1]);
 801b872:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b876:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b87a:	6819      	ldr	r1, [r3, #0]
 801b87c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b880:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	f103 020c 	add.w	r2, r3, #12
 801b88a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801b88e:	4618      	mov	r0, r3
 801b890:	f001 fbde 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mod(&tmp, &tmp, &pow_two);
 801b894:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 801b898:	f507 71e8 	add.w	r1, r7, #464	@ 0x1d0
 801b89c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f001 fc3e 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_to_digit_array(scalars[0], &tmp);
 801b8a6:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b8aa:	2220      	movs	r2, #32
 801b8ac:	2100      	movs	r1, #0
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	f01a f9a6 	bl	8035c00 <memset>
 801b8b4:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 801b8b8:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b8bc:	4611      	mov	r1, r2
 801b8be:	4618      	mov	r0, r3
 801b8c0:	f001 fe6e 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ibz_sub(&tmp, &(*mat)[1][0], &(*mat)[1][1]);
 801b8c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b8c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	f103 0118 	add.w	r1, r3, #24
 801b8d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b8d6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801b8e0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801b8e4:	4618      	mov	r0, r3
 801b8e6:	f001 fbb3 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mod(&tmp, &tmp, &pow_two);
 801b8ea:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 801b8ee:	f507 71e8 	add.w	r1, r7, #464	@ 0x1d0
 801b8f2:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f001 fc13 	bl	801d122 <sqisign_gen_ibz_mod>
    ibz_to_digit_array(scalars[1], &tmp);
 801b8fc:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b900:	3320      	adds	r3, #32
 801b902:	2220      	movs	r2, #32
 801b904:	2100      	movs	r1, #0
 801b906:	4618      	mov	r0, r3
 801b908:	f01a f97a 	bl	8035c00 <memset>
 801b90c:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 801b910:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 801b914:	3320      	adds	r3, #32
 801b916:	4611      	mov	r1, r2
 801b918:	4618      	mov	r0, r3
 801b91a:	f001 fe41 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ret = ec_biscalar_mul(&bas->PmQ, scalars[0], scalars[1], f, &tmp_bas, E);
 801b91e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b922:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 801b92c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801b930:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801b934:	f507 72ee 	add.w	r2, r7, #476	@ 0x1dc
 801b938:	f102 0420 	add.w	r4, r2, #32
 801b93c:	f507 71ee 	add.w	r1, r7, #476	@ 0x1dc
 801b940:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801b944:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 801b948:	6812      	ldr	r2, [r2, #0]
 801b94a:	9201      	str	r2, [sp, #4]
 801b94c:	f107 0214 	add.w	r2, r7, #20
 801b950:	9200      	str	r2, [sp, #0]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	4622      	mov	r2, r4
 801b956:	f7f1 f98b 	bl	800cc70 <ec_biscalar_mul>
 801b95a:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c

    ibz_finalize(&tmp);
 801b95e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801b962:	4618      	mov	r0, r3
 801b964:	f001 fb5a 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&pow_two);
 801b968:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 801b96c:	4618      	mov	r0, r3
 801b96e:	f001 fb55 	bl	801d01c <sqisign_gen_ibz_finalize>

    return ret;
 801b972:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
}
 801b976:	4618      	mov	r0, r3
 801b978:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd90      	pop	{r4, r7, pc}
 801b980:	0803b90c 	.word	0x0803b90c

0801b984 <endomorphism_application_even_basis>:
endomorphism_application_even_basis(ec_basis_t *bas,
                                    const int index_alternate_curve,
                                    const ec_curve_t *E,
                                    const quat_alg_elem_t *theta,
                                    int f)
{
 801b984:	b590      	push	{r4, r7, lr}
 801b986:	b0a5      	sub	sp, #148	@ 0x94
 801b988:	af00      	add	r7, sp, #0
 801b98a:	60f8      	str	r0, [r7, #12]
 801b98c:	60b9      	str	r1, [r7, #8]
 801b98e:	607a      	str	r2, [r7, #4]
 801b990:	603b      	str	r3, [r7, #0]
    ibz_t tmp;
    ibz_init(&tmp);
 801b992:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801b996:	4618      	mov	r0, r3
 801b998:	f001 fb35 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_t coeffs;
    ibz_vec_4_init(&coeffs);
 801b99c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	f7f3 fa36 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_mat_2x2_t mat;
    ibz_mat_2x2_init(&mat);
 801b9a6:	f107 031c 	add.w	r3, r7, #28
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	f7f3 fa69 	bl	800ee82 <sqisign_gen_ibz_mat_2x2_init>

    ibz_t content;
    ibz_init(&content);
 801b9b0:	f107 0310 	add.w	r3, r7, #16
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	f001 fb26 	bl	801d006 <sqisign_gen_ibz_init>

    // decomposing theta on the basis
    quat_alg_make_primitive(&coeffs, &content, theta, &EXTREMAL_ORDERS[index_alternate_curve].order);
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 801b9c0:	fb02 f303 	mul.w	r3, r2, r3
 801b9c4:	4ac5      	ldr	r2, [pc, #788]	@ (801bcdc <endomorphism_application_even_basis+0x358>)
 801b9c6:	4413      	add	r3, r2
 801b9c8:	f107 0110 	add.w	r1, r7, #16
 801b9cc:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 801b9d0:	683a      	ldr	r2, [r7, #0]
 801b9d2:	f7e5 fe11 	bl	80015f8 <sqisign_gen_quat_alg_make_primitive>
    assert(ibz_is_odd(&content));
 801b9d6:	f107 0310 	add.w	r3, r7, #16
 801b9da:	4618      	mov	r0, r3
 801b9dc:	f001 fc33 	bl	801d246 <sqisign_gen_ibz_is_odd>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d105      	bne.n	801b9f2 <endomorphism_application_even_basis+0x6e>
 801b9e6:	4bbe      	ldr	r3, [pc, #760]	@ (801bce0 <endomorphism_application_even_basis+0x35c>)
 801b9e8:	4abe      	ldr	r2, [pc, #760]	@ (801bce4 <endomorphism_application_even_basis+0x360>)
 801b9ea:	219e      	movs	r1, #158	@ 0x9e
 801b9ec:	48be      	ldr	r0, [pc, #760]	@ (801bce8 <endomorphism_application_even_basis+0x364>)
 801b9ee:	f019 fc23 	bl	8035238 <__assert_func>

    ibz_set(&mat[0][0], 0);
 801b9f2:	f107 031c 	add.w	r3, r7, #28
 801b9f6:	2100      	movs	r1, #0
 801b9f8:	4618      	mov	r0, r3
 801b9fa:	f001 fc32 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&mat[0][1], 0);
 801b9fe:	f107 031c 	add.w	r3, r7, #28
 801ba02:	330c      	adds	r3, #12
 801ba04:	2100      	movs	r1, #0
 801ba06:	4618      	mov	r0, r3
 801ba08:	f001 fc2b 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&mat[1][0], 0);
 801ba0c:	f107 031c 	add.w	r3, r7, #28
 801ba10:	3318      	adds	r3, #24
 801ba12:	2100      	movs	r1, #0
 801ba14:	4618      	mov	r0, r3
 801ba16:	f001 fc24 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_set(&mat[1][1], 0);
 801ba1a:	f107 031c 	add.w	r3, r7, #28
 801ba1e:	3324      	adds	r3, #36	@ 0x24
 801ba20:	2100      	movs	r1, #0
 801ba22:	4618      	mov	r0, r3
 801ba24:	f001 fc1d 	bl	801d262 <sqisign_gen_ibz_set>

    // computing the matrix

    for (unsigned i = 0; i < 2; ++i) {
 801ba28:	2300      	movs	r3, #0
 801ba2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801ba2e:	e12f      	b.n	801bc90 <endomorphism_application_even_basis+0x30c>
        ibz_add(&mat[i][i], &mat[i][i], &coeffs[0]);
 801ba30:	f107 011c 	add.w	r1, r7, #28
 801ba34:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801ba38:	4613      	mov	r3, r2
 801ba3a:	00db      	lsls	r3, r3, #3
 801ba3c:	4413      	add	r3, r2
 801ba3e:	009b      	lsls	r3, r3, #2
 801ba40:	18c8      	adds	r0, r1, r3
 801ba42:	f107 011c 	add.w	r1, r7, #28
 801ba46:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801ba4a:	4613      	mov	r3, r2
 801ba4c:	00db      	lsls	r3, r3, #3
 801ba4e:	4413      	add	r3, r2
 801ba50:	009b      	lsls	r3, r3, #2
 801ba52:	440b      	add	r3, r1
 801ba54:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801ba58:	4619      	mov	r1, r3
 801ba5a:	f001 faea 	bl	801d032 <sqisign_gen_ibz_add>
        for (unsigned j = 0; j < 2; ++j) {
 801ba5e:	2300      	movs	r3, #0
 801ba60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801ba64:	e10a      	b.n	801bc7c <endomorphism_application_even_basis+0x2f8>
            ibz_mul(&tmp, &CURVES_WITH_ENDOMORPHISMS[index_alternate_curve].action_gen2[i][j], &coeffs[1]);
 801ba66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ba6a:	461a      	mov	r2, r3
 801ba6c:	0052      	lsls	r2, r2, #1
 801ba6e:	441a      	add	r2, r3
 801ba70:	0093      	lsls	r3, r2, #2
 801ba72:	461a      	mov	r2, r3
 801ba74:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801ba78:	460b      	mov	r3, r1
 801ba7a:	005b      	lsls	r3, r3, #1
 801ba7c:	440b      	add	r3, r1
 801ba7e:	00db      	lsls	r3, r3, #3
 801ba80:	441a      	add	r2, r3
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	f44f 717d 	mov.w	r1, #1012	@ 0x3f4
 801ba88:	fb01 f303 	mul.w	r3, r1, r3
 801ba8c:	4413      	add	r3, r2
 801ba8e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801ba92:	4a96      	ldr	r2, [pc, #600]	@ (801bcec <endomorphism_application_even_basis+0x368>)
 801ba94:	4413      	add	r3, r2
 801ba96:	1d19      	adds	r1, r3, #4
 801ba98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801ba9c:	f103 020c 	add.w	r2, r3, #12
 801baa0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801baa4:	4618      	mov	r0, r3
 801baa6:	f001 fae2 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&mat[i][j], &mat[i][j], &tmp);
 801baaa:	f107 001c 	add.w	r0, r7, #28
 801baae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bab2:	461a      	mov	r2, r3
 801bab4:	0052      	lsls	r2, r2, #1
 801bab6:	441a      	add	r2, r3
 801bab8:	0093      	lsls	r3, r2, #2
 801baba:	461a      	mov	r2, r3
 801babc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bac0:	460b      	mov	r3, r1
 801bac2:	005b      	lsls	r3, r3, #1
 801bac4:	440b      	add	r3, r1
 801bac6:	00db      	lsls	r3, r3, #3
 801bac8:	4413      	add	r3, r2
 801baca:	18c4      	adds	r4, r0, r3
 801bacc:	f107 001c 	add.w	r0, r7, #28
 801bad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bad4:	461a      	mov	r2, r3
 801bad6:	0052      	lsls	r2, r2, #1
 801bad8:	441a      	add	r2, r3
 801bada:	0093      	lsls	r3, r2, #2
 801badc:	461a      	mov	r2, r3
 801bade:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bae2:	460b      	mov	r3, r1
 801bae4:	005b      	lsls	r3, r3, #1
 801bae6:	440b      	add	r3, r1
 801bae8:	00db      	lsls	r3, r3, #3
 801baea:	4413      	add	r3, r2
 801baec:	4403      	add	r3, r0
 801baee:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801baf2:	4619      	mov	r1, r3
 801baf4:	4620      	mov	r0, r4
 801baf6:	f001 fa9c 	bl	801d032 <sqisign_gen_ibz_add>
            ibz_mul(&tmp, &CURVES_WITH_ENDOMORPHISMS[index_alternate_curve].action_gen3[i][j], &coeffs[2]);
 801bafa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bafe:	461a      	mov	r2, r3
 801bb00:	0052      	lsls	r2, r2, #1
 801bb02:	441a      	add	r2, r3
 801bb04:	0093      	lsls	r3, r2, #2
 801bb06:	461a      	mov	r2, r3
 801bb08:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bb0c:	460b      	mov	r3, r1
 801bb0e:	005b      	lsls	r3, r3, #1
 801bb10:	440b      	add	r3, r1
 801bb12:	00db      	lsls	r3, r3, #3
 801bb14:	441a      	add	r2, r3
 801bb16:	68bb      	ldr	r3, [r7, #8]
 801bb18:	f44f 717d 	mov.w	r1, #1012	@ 0x3f4
 801bb1c:	fb01 f303 	mul.w	r3, r1, r3
 801bb20:	4413      	add	r3, r2
 801bb22:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 801bb26:	4a71      	ldr	r2, [pc, #452]	@ (801bcec <endomorphism_application_even_basis+0x368>)
 801bb28:	4413      	add	r3, r2
 801bb2a:	1d19      	adds	r1, r3, #4
 801bb2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801bb30:	f103 0218 	add.w	r2, r3, #24
 801bb34:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801bb38:	4618      	mov	r0, r3
 801bb3a:	f001 fa98 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&mat[i][j], &mat[i][j], &tmp);
 801bb3e:	f107 001c 	add.w	r0, r7, #28
 801bb42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bb46:	461a      	mov	r2, r3
 801bb48:	0052      	lsls	r2, r2, #1
 801bb4a:	441a      	add	r2, r3
 801bb4c:	0093      	lsls	r3, r2, #2
 801bb4e:	461a      	mov	r2, r3
 801bb50:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bb54:	460b      	mov	r3, r1
 801bb56:	005b      	lsls	r3, r3, #1
 801bb58:	440b      	add	r3, r1
 801bb5a:	00db      	lsls	r3, r3, #3
 801bb5c:	4413      	add	r3, r2
 801bb5e:	18c4      	adds	r4, r0, r3
 801bb60:	f107 001c 	add.w	r0, r7, #28
 801bb64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bb68:	461a      	mov	r2, r3
 801bb6a:	0052      	lsls	r2, r2, #1
 801bb6c:	441a      	add	r2, r3
 801bb6e:	0093      	lsls	r3, r2, #2
 801bb70:	461a      	mov	r2, r3
 801bb72:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bb76:	460b      	mov	r3, r1
 801bb78:	005b      	lsls	r3, r3, #1
 801bb7a:	440b      	add	r3, r1
 801bb7c:	00db      	lsls	r3, r3, #3
 801bb7e:	4413      	add	r3, r2
 801bb80:	4403      	add	r3, r0
 801bb82:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801bb86:	4619      	mov	r1, r3
 801bb88:	4620      	mov	r0, r4
 801bb8a:	f001 fa52 	bl	801d032 <sqisign_gen_ibz_add>
            ibz_mul(&tmp, &CURVES_WITH_ENDOMORPHISMS[index_alternate_curve].action_gen4[i][j], &coeffs[3]);
 801bb8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bb92:	461a      	mov	r2, r3
 801bb94:	0052      	lsls	r2, r2, #1
 801bb96:	441a      	add	r2, r3
 801bb98:	0093      	lsls	r3, r2, #2
 801bb9a:	461a      	mov	r2, r3
 801bb9c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bba0:	460b      	mov	r3, r1
 801bba2:	005b      	lsls	r3, r3, #1
 801bba4:	440b      	add	r3, r1
 801bba6:	00db      	lsls	r3, r3, #3
 801bba8:	441a      	add	r2, r3
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	f44f 717d 	mov.w	r1, #1012	@ 0x3f4
 801bbb0:	fb01 f303 	mul.w	r3, r1, r3
 801bbb4:	4413      	add	r3, r2
 801bbb6:	f503 7370 	add.w	r3, r3, #960	@ 0x3c0
 801bbba:	4a4c      	ldr	r2, [pc, #304]	@ (801bcec <endomorphism_application_even_basis+0x368>)
 801bbbc:	4413      	add	r3, r2
 801bbbe:	1d19      	adds	r1, r3, #4
 801bbc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801bbc4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801bbc8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f001 fa4e 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&mat[i][j], &mat[i][j], &tmp);
 801bbd2:	f107 001c 	add.w	r0, r7, #28
 801bbd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bbda:	461a      	mov	r2, r3
 801bbdc:	0052      	lsls	r2, r2, #1
 801bbde:	441a      	add	r2, r3
 801bbe0:	0093      	lsls	r3, r2, #2
 801bbe2:	461a      	mov	r2, r3
 801bbe4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bbe8:	460b      	mov	r3, r1
 801bbea:	005b      	lsls	r3, r3, #1
 801bbec:	440b      	add	r3, r1
 801bbee:	00db      	lsls	r3, r3, #3
 801bbf0:	4413      	add	r3, r2
 801bbf2:	18c4      	adds	r4, r0, r3
 801bbf4:	f107 001c 	add.w	r0, r7, #28
 801bbf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bbfc:	461a      	mov	r2, r3
 801bbfe:	0052      	lsls	r2, r2, #1
 801bc00:	441a      	add	r2, r3
 801bc02:	0093      	lsls	r3, r2, #2
 801bc04:	461a      	mov	r2, r3
 801bc06:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bc0a:	460b      	mov	r3, r1
 801bc0c:	005b      	lsls	r3, r3, #1
 801bc0e:	440b      	add	r3, r1
 801bc10:	00db      	lsls	r3, r3, #3
 801bc12:	4413      	add	r3, r2
 801bc14:	4403      	add	r3, r0
 801bc16:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801bc1a:	4619      	mov	r1, r3
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	f001 fa08 	bl	801d032 <sqisign_gen_ibz_add>
            ibz_mul(&mat[i][j], &mat[i][j], &content);
 801bc22:	f107 001c 	add.w	r0, r7, #28
 801bc26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bc2a:	461a      	mov	r2, r3
 801bc2c:	0052      	lsls	r2, r2, #1
 801bc2e:	441a      	add	r2, r3
 801bc30:	0093      	lsls	r3, r2, #2
 801bc32:	461a      	mov	r2, r3
 801bc34:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bc38:	460b      	mov	r3, r1
 801bc3a:	005b      	lsls	r3, r3, #1
 801bc3c:	440b      	add	r3, r1
 801bc3e:	00db      	lsls	r3, r3, #3
 801bc40:	4413      	add	r3, r2
 801bc42:	18c4      	adds	r4, r0, r3
 801bc44:	f107 001c 	add.w	r0, r7, #28
 801bc48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bc4c:	461a      	mov	r2, r3
 801bc4e:	0052      	lsls	r2, r2, #1
 801bc50:	441a      	add	r2, r3
 801bc52:	0093      	lsls	r3, r2, #2
 801bc54:	461a      	mov	r2, r3
 801bc56:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bc5a:	460b      	mov	r3, r1
 801bc5c:	005b      	lsls	r3, r3, #1
 801bc5e:	440b      	add	r3, r1
 801bc60:	00db      	lsls	r3, r3, #3
 801bc62:	4413      	add	r3, r2
 801bc64:	4403      	add	r3, r0
 801bc66:	f107 0210 	add.w	r2, r7, #16
 801bc6a:	4619      	mov	r1, r3
 801bc6c:	4620      	mov	r0, r4
 801bc6e:	f001 f9fe 	bl	801d06e <sqisign_gen_ibz_mul>
        for (unsigned j = 0; j < 2; ++j) {
 801bc72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bc76:	3301      	adds	r3, #1
 801bc78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801bc7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bc80:	2b01      	cmp	r3, #1
 801bc82:	f67f aef0 	bls.w	801ba66 <endomorphism_application_even_basis+0xe2>
    for (unsigned i = 0; i < 2; ++i) {
 801bc86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801bc8a:	3301      	adds	r3, #1
 801bc8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801bc90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801bc94:	2b01      	cmp	r3, #1
 801bc96:	f67f aecb 	bls.w	801ba30 <endomorphism_application_even_basis+0xac>
        }
    }

    // and now we apply it
    matrix_application_even_basis(bas, E, &mat, f);
 801bc9a:	f107 021c 	add.w	r2, r7, #28
 801bc9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bca2:	6879      	ldr	r1, [r7, #4]
 801bca4:	68f8      	ldr	r0, [r7, #12]
 801bca6:	f7ff fcd5 	bl	801b654 <matrix_application_even_basis>

    ibz_vec_4_finalize(&coeffs);
 801bcaa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f7f3 f8cb 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_mat_2x2_finalize(&mat);
 801bcb4:	f107 031c 	add.w	r3, r7, #28
 801bcb8:	4618      	mov	r0, r3
 801bcba:	f7f3 f90e 	bl	800eeda <sqisign_gen_ibz_mat_2x2_finalize>
    ibz_finalize(&content);
 801bcbe:	f107 0310 	add.w	r3, r7, #16
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	f001 f9aa 	bl	801d01c <sqisign_gen_ibz_finalize>

    ibz_finalize(&tmp);
 801bcc8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801bccc:	4618      	mov	r0, r3
 801bcce:	f001 f9a5 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801bcd2:	bf00      	nop
 801bcd4:	3794      	adds	r7, #148	@ 0x94
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd90      	pop	{r4, r7, pc}
 801bcda:	bf00      	nop
 801bcdc:	0803bf3c 	.word	0x0803bf3c
 801bce0:	08037928 	.word	0x08037928
 801bce4:	080378ec 	.word	0x080378ec
 801bce8:	080378f0 	.word	0x080378f0
 801bcec:	08039740 	.word	0x08039740

0801bcf0 <id2iso_kernel_dlogs_to_ideal_even>:

// compute the ideal whose kernel is generated by vec2[0]*BO[0] + vec2[1]*B0[1] where B0 is the
// canonical basis of E0
void
id2iso_kernel_dlogs_to_ideal_even(quat_left_ideal_t *lideal, const ibz_vec_2_t *vec2, int f)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b0b8      	sub	sp, #224	@ 0xe0
 801bcf4:	af02      	add	r7, sp, #8
 801bcf6:	60f8      	str	r0, [r7, #12]
 801bcf8:	60b9      	str	r1, [r7, #8]
 801bcfa:	607a      	str	r2, [r7, #4]
    // then apply i to the kernel point and decompose over said basis.
    // hence we have an equation a*P + b*[j+(1+k)/2]P == [i]P, which will
    // easily reveal an endomorphism that kills P.

    ibz_t two_pow;
    ibz_init(&two_pow);
 801bcfc:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 801bd00:	4618      	mov	r0, r3
 801bd02:	f001 f980 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_vec_2_t vec;
    ibz_vec_2_init(&vec);
 801bd06:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	f7f3 f85f 	bl	800edce <sqisign_gen_ibz_vec_2_init>

    if (f == TORSION_EVEN_POWER) {
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	2bf8      	cmp	r3, #248	@ 0xf8
 801bd14:	d106      	bne.n	801bd24 <id2iso_kernel_dlogs_to_ideal_even+0x34>
        ibz_copy(&two_pow, &TORSION_PLUS_2POWER);
 801bd16:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 801bd1a:	498e      	ldr	r1, [pc, #568]	@ (801bf54 <id2iso_kernel_dlogs_to_ideal_even+0x264>)
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	f001 faad 	bl	801d27c <sqisign_gen_ibz_copy>
 801bd22:	e006      	b.n	801bd32 <id2iso_kernel_dlogs_to_ideal_even+0x42>
    } else {
        ibz_pow(&two_pow, &ibz_const_two, f);
 801bd24:	687a      	ldr	r2, [r7, #4]
 801bd26:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 801bd2a:	498b      	ldr	r1, [pc, #556]	@ (801bf58 <id2iso_kernel_dlogs_to_ideal_even+0x268>)
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	f001 fa23 	bl	801d178 <sqisign_gen_ibz_pow>
    }

    {
        ibz_mat_2x2_t mat;
        ibz_mat_2x2_init(&mat);
 801bd32:	f107 0314 	add.w	r3, r7, #20
 801bd36:	4618      	mov	r0, r3
 801bd38:	f7f3 f8a3 	bl	800ee82 <sqisign_gen_ibz_mat_2x2_init>

        ibz_copy(&mat[0][0], &(*vec2)[0]);
 801bd3c:	68ba      	ldr	r2, [r7, #8]
 801bd3e:	f107 0314 	add.w	r3, r7, #20
 801bd42:	4611      	mov	r1, r2
 801bd44:	4618      	mov	r0, r3
 801bd46:	f001 fa99 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&mat[1][0], &(*vec2)[1]);
 801bd4a:	68bb      	ldr	r3, [r7, #8]
 801bd4c:	f103 020c 	add.w	r2, r3, #12
 801bd50:	f107 0314 	add.w	r3, r7, #20
 801bd54:	3318      	adds	r3, #24
 801bd56:	4611      	mov	r1, r2
 801bd58:	4618      	mov	r0, r3
 801bd5a:	f001 fa8f 	bl	801d27c <sqisign_gen_ibz_copy>

        ibz_mat_2x2_eval(&vec, &ACTION_J, vec2);
 801bd5e:	497f      	ldr	r1, [pc, #508]	@ (801bf5c <id2iso_kernel_dlogs_to_ideal_even+0x26c>)
 801bd60:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801bd64:	68ba      	ldr	r2, [r7, #8]
 801bd66:	4618      	mov	r0, r3
 801bd68:	f7e8 fefa 	bl	8004b60 <sqisign_gen_ibz_mat_2x2_eval>
        ibz_copy(&mat[0][1], &vec[0]);
 801bd6c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 801bd70:	f107 0314 	add.w	r3, r7, #20
 801bd74:	330c      	adds	r3, #12
 801bd76:	4611      	mov	r1, r2
 801bd78:	4618      	mov	r0, r3
 801bd7a:	f001 fa7f 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&mat[1][1], &vec[1]);
 801bd7e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801bd82:	f103 020c 	add.w	r2, r3, #12
 801bd86:	f107 0314 	add.w	r3, r7, #20
 801bd8a:	3324      	adds	r3, #36	@ 0x24
 801bd8c:	4611      	mov	r1, r2
 801bd8e:	4618      	mov	r0, r3
 801bd90:	f001 fa74 	bl	801d27c <sqisign_gen_ibz_copy>

        ibz_mat_2x2_eval(&vec, &ACTION_GEN4, vec2);
 801bd94:	4972      	ldr	r1, [pc, #456]	@ (801bf60 <id2iso_kernel_dlogs_to_ideal_even+0x270>)
 801bd96:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801bd9a:	68ba      	ldr	r2, [r7, #8]
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	f7e8 fedf 	bl	8004b60 <sqisign_gen_ibz_mat_2x2_eval>
        ibz_add(&mat[0][1], &mat[0][1], &vec[0]);
 801bda2:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 801bda6:	f107 0314 	add.w	r3, r7, #20
 801bdaa:	f103 010c 	add.w	r1, r3, #12
 801bdae:	f107 0314 	add.w	r3, r7, #20
 801bdb2:	330c      	adds	r3, #12
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	f001 f93c 	bl	801d032 <sqisign_gen_ibz_add>
        ibz_add(&mat[1][1], &mat[1][1], &vec[1]);
 801bdba:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801bdbe:	f103 020c 	add.w	r2, r3, #12
 801bdc2:	f107 0314 	add.w	r3, r7, #20
 801bdc6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801bdca:	f107 0314 	add.w	r3, r7, #20
 801bdce:	3324      	adds	r3, #36	@ 0x24
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f001 f92e 	bl	801d032 <sqisign_gen_ibz_add>

        ibz_mod(&mat[0][1], &mat[0][1], &two_pow);
 801bdd6:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 801bdda:	f107 0314 	add.w	r3, r7, #20
 801bdde:	f103 010c 	add.w	r1, r3, #12
 801bde2:	f107 0314 	add.w	r3, r7, #20
 801bde6:	330c      	adds	r3, #12
 801bde8:	4618      	mov	r0, r3
 801bdea:	f001 f99a 	bl	801d122 <sqisign_gen_ibz_mod>
        ibz_mod(&mat[1][1], &mat[1][1], &two_pow);
 801bdee:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 801bdf2:	f107 0314 	add.w	r3, r7, #20
 801bdf6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801bdfa:	f107 0314 	add.w	r3, r7, #20
 801bdfe:	3324      	adds	r3, #36	@ 0x24
 801be00:	4618      	mov	r0, r3
 801be02:	f001 f98e 	bl	801d122 <sqisign_gen_ibz_mod>

        ibz_mat_2x2_t inv;
        ibz_mat_2x2_init(&inv);
 801be06:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801be0a:	4618      	mov	r0, r3
 801be0c:	f7f3 f839 	bl	800ee82 <sqisign_gen_ibz_mat_2x2_init>
        {
            int inv_ok UNUSED = ibz_mat_2x2_inv_mod(&inv, &mat, &two_pow);
 801be10:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 801be14:	f107 0114 	add.w	r1, r7, #20
 801be18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7e8 ff1a 	bl	8004c56 <sqisign_gen_ibz_mat_2x2_inv_mod>
 801be22:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
            assert(inv_ok);
 801be26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d105      	bne.n	801be3a <id2iso_kernel_dlogs_to_ideal_even+0x14a>
 801be2e:	4b4d      	ldr	r3, [pc, #308]	@ (801bf64 <id2iso_kernel_dlogs_to_ideal_even+0x274>)
 801be30:	4a4d      	ldr	r2, [pc, #308]	@ (801bf68 <id2iso_kernel_dlogs_to_ideal_even+0x278>)
 801be32:	21ec      	movs	r1, #236	@ 0xec
 801be34:	484d      	ldr	r0, [pc, #308]	@ (801bf6c <id2iso_kernel_dlogs_to_ideal_even+0x27c>)
 801be36:	f019 f9ff 	bl	8035238 <__assert_func>
        }
        ibz_mat_2x2_finalize(&mat);
 801be3a:	f107 0314 	add.w	r3, r7, #20
 801be3e:	4618      	mov	r0, r3
 801be40:	f7f3 f84b 	bl	800eeda <sqisign_gen_ibz_mat_2x2_finalize>

        ibz_mat_2x2_eval(&vec, &ACTION_I, vec2);
 801be44:	494a      	ldr	r1, [pc, #296]	@ (801bf70 <id2iso_kernel_dlogs_to_ideal_even+0x280>)
 801be46:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801be4a:	68ba      	ldr	r2, [r7, #8]
 801be4c:	4618      	mov	r0, r3
 801be4e:	f7e8 fe87 	bl	8004b60 <sqisign_gen_ibz_mat_2x2_eval>
        ibz_mat_2x2_eval(&vec, &inv, &vec);
 801be52:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 801be56:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 801be5a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801be5e:	4618      	mov	r0, r3
 801be60:	f7e8 fe7e 	bl	8004b60 <sqisign_gen_ibz_mat_2x2_eval>

        ibz_mat_2x2_finalize(&inv);
 801be64:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801be68:	4618      	mov	r0, r3
 801be6a:	f7f3 f836 	bl	800eeda <sqisign_gen_ibz_mat_2x2_finalize>
    }

    // final result: a - i + b*(j+(1+k)/2)
    quat_alg_elem_t gen;
    quat_alg_elem_init(&gen);
 801be6e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801be72:	4618      	mov	r0, r3
 801be74:	f7f2 ff84 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    ibz_set(&gen.denom, 2);
 801be78:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801be7c:	2102      	movs	r1, #2
 801be7e:	4618      	mov	r0, r3
 801be80:	f001 f9ef 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_add(&gen.coord[0], &vec[0], &vec[0]);
 801be84:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 801be88:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 801be8c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801be90:	330c      	adds	r3, #12
 801be92:	4618      	mov	r0, r3
 801be94:	f001 f8cd 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_set(&gen.coord[1], -2);
 801be98:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801be9c:	3318      	adds	r3, #24
 801be9e:	f06f 0101 	mvn.w	r1, #1
 801bea2:	4618      	mov	r0, r3
 801bea4:	f001 f9dd 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_add(&gen.coord[2], &vec[1], &vec[1]);
 801bea8:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801beac:	f103 020c 	add.w	r2, r3, #12
 801beb0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801beb4:	f103 010c 	add.w	r1, r3, #12
 801beb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801bebc:	3324      	adds	r3, #36	@ 0x24
 801bebe:	4618      	mov	r0, r3
 801bec0:	f001 f8b7 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_copy(&gen.coord[3], &vec[1]);
 801bec4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801bec8:	f103 020c 	add.w	r2, r3, #12
 801becc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801bed0:	3330      	adds	r3, #48	@ 0x30
 801bed2:	4611      	mov	r1, r2
 801bed4:	4618      	mov	r0, r3
 801bed6:	f001 f9d1 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_add(&gen.coord[0], &gen.coord[0], &vec[1]);
 801beda:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801bede:	f103 020c 	add.w	r2, r3, #12
 801bee2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801bee6:	f103 010c 	add.w	r1, r3, #12
 801beea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801beee:	330c      	adds	r3, #12
 801bef0:	4618      	mov	r0, r3
 801bef2:	f001 f89e 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_vec_2_finalize(&vec);
 801bef6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801befa:	4618      	mov	r0, r3
 801befc:	f7f2 ff78 	bl	800edf0 <sqisign_gen_ibz_vec_2_finalize>

    quat_lideal_create(lideal, &gen, &two_pow, &MAXORD_O0, &QUATALG_PINFTY);
 801bf00:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 801bf04:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801bf08:	4b1a      	ldr	r3, [pc, #104]	@ (801bf74 <id2iso_kernel_dlogs_to_ideal_even+0x284>)
 801bf0a:	9300      	str	r3, [sp, #0]
 801bf0c:	4b1a      	ldr	r3, [pc, #104]	@ (801bf78 <id2iso_kernel_dlogs_to_ideal_even+0x288>)
 801bf0e:	68f8      	ldr	r0, [r7, #12]
 801bf10:	f000 fb72 	bl	801c5f8 <sqisign_gen_quat_lideal_create>

    assert(0 == ibz_cmp(&lideal->norm, &two_pow));
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	33cc      	adds	r3, #204	@ 0xcc
 801bf18:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 801bf1c:	4611      	mov	r1, r2
 801bf1e:	4618      	mov	r0, r3
 801bf20:	f001 f946 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801bf24:	4603      	mov	r3, r0
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d006      	beq.n	801bf38 <id2iso_kernel_dlogs_to_ideal_even+0x248>
 801bf2a:	4b14      	ldr	r3, [pc, #80]	@ (801bf7c <id2iso_kernel_dlogs_to_ideal_even+0x28c>)
 801bf2c:	4a0e      	ldr	r2, [pc, #56]	@ (801bf68 <id2iso_kernel_dlogs_to_ideal_even+0x278>)
 801bf2e:	f240 1103 	movw	r1, #259	@ 0x103
 801bf32:	480e      	ldr	r0, [pc, #56]	@ (801bf6c <id2iso_kernel_dlogs_to_ideal_even+0x27c>)
 801bf34:	f019 f980 	bl	8035238 <__assert_func>

    quat_alg_elem_finalize(&gen);
 801bf38:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	f7f2 ff35 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    ibz_finalize(&two_pow);
 801bf42:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 801bf46:	4618      	mov	r0, r3
 801bf48:	f001 f868 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801bf4c:	bf00      	nop
 801bf4e:	37d8      	adds	r7, #216	@ 0xd8
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}
 801bf54:	0803ce5c 	.word	0x0803ce5c
 801bf58:	0803b90c 	.word	0x0803b90c
 801bf5c:	08039a44 	.word	0x08039a44
 801bf60:	08039b04 	.word	0x08039b04
 801bf64:	08037940 	.word	0x08037940
 801bf68:	080378ec 	.word	0x080378ec
 801bf6c:	080378f0 	.word	0x080378f0
 801bf70:	08039a14 	.word	0x08039a14
 801bf74:	0803bf30 	.word	0x0803bf30
 801bf78:	0803bf3c 	.word	0x0803bf3c
 801bf7c:	08037948 	.word	0x08037948

0801bf80 <_change_of_basis_matrix_tate>:
                             const ec_basis_t *B1,
                             const ec_basis_t *B2,
                             ec_curve_t *E,
                             int f,
                             bool invert)
{
 801bf80:	b590      	push	{r4, r7, lr}
 801bf82:	b0f3      	sub	sp, #460	@ 0x1cc
 801bf84:	af04      	add	r7, sp, #16
 801bf86:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 801bf8a:	f5a4 74d6 	sub.w	r4, r4, #428	@ 0x1ac
 801bf8e:	6020      	str	r0, [r4, #0]
 801bf90:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 801bf94:	f5a0 70d8 	sub.w	r0, r0, #432	@ 0x1b0
 801bf98:	6001      	str	r1, [r0, #0]
 801bf9a:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 801bf9e:	f5a1 71da 	sub.w	r1, r1, #436	@ 0x1b4
 801bfa2:	600a      	str	r2, [r1, #0]
 801bfa4:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 801bfa8:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 801bfac:	6013      	str	r3, [r2, #0]
    digit_t x1[NWORDS_ORDER] = { 0 }, x2[NWORDS_ORDER] = { 0 }, x3[NWORDS_ORDER] = { 0 }, x4[NWORDS_ORDER] = { 0 };
 801bfae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bfb2:	2220      	movs	r2, #32
 801bfb4:	2100      	movs	r1, #0
 801bfb6:	4618      	mov	r0, r3
 801bfb8:	f019 fe22 	bl	8035c00 <memset>
 801bfbc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801bfc0:	2220      	movs	r2, #32
 801bfc2:	2100      	movs	r1, #0
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f019 fe1b 	bl	8035c00 <memset>
 801bfca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801bfce:	2220      	movs	r2, #32
 801bfd0:	2100      	movs	r1, #0
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f019 fe14 	bl	8035c00 <memset>
 801bfd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801bfdc:	2220      	movs	r2, #32
 801bfde:	2100      	movs	r1, #0
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	f019 fe0d 	bl	8035c00 <memset>

#ifndef NDEBUG
    int e_full = TORSION_EVEN_POWER;
 801bfe6:	23f8      	movs	r3, #248	@ 0xf8
 801bfe8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    int e_diff = e_full - f;
 801bfec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801bff0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801bff4:	1ad3      	subs	r3, r2, r3
 801bff6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
#endif

    // Ensure the input basis has points of order 2^f
    if (invert) {
 801bffa:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d048      	beq.n	801c094 <_change_of_basis_matrix_tate+0x114>
        assert(test_basis_order_twof(B1, E, e_full));
 801c002:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c006:	f5a3 71dc 	sub.w	r1, r3, #440	@ 0x1b8
 801c00a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c00e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801c012:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801c016:	6809      	ldr	r1, [r1, #0]
 801c018:	6818      	ldr	r0, [r3, #0]
 801c01a:	f7ff f8ff 	bl	801b21c <test_basis_order_twof>
 801c01e:	4603      	mov	r3, r0
 801c020:	2b00      	cmp	r3, #0
 801c022:	d106      	bne.n	801c032 <_change_of_basis_matrix_tate+0xb2>
 801c024:	4bc5      	ldr	r3, [pc, #788]	@ (801c33c <_change_of_basis_matrix_tate+0x3bc>)
 801c026:	4ac6      	ldr	r2, [pc, #792]	@ (801c340 <_change_of_basis_matrix_tate+0x3c0>)
 801c028:	f240 1121 	movw	r1, #289	@ 0x121
 801c02c:	48c5      	ldr	r0, [pc, #788]	@ (801c344 <_change_of_basis_matrix_tate+0x3c4>)
 801c02e:	f019 f903 	bl	8035238 <__assert_func>
        ec_dlog_2_tate(x1, x2, x3, x4, B1, B2, E, f);
 801c032:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 801c036:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 801c03a:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 801c03e:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 801c042:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801c046:	9303      	str	r3, [sp, #12]
 801c048:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c04c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	9302      	str	r3, [sp, #8]
 801c054:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c058:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	9301      	str	r3, [sp, #4]
 801c060:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c064:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	9300      	str	r3, [sp, #0]
 801c06c:	4623      	mov	r3, r4
 801c06e:	f7e8 fb0f 	bl	8004690 <ec_dlog_2_tate>
        mp_invert_matrix(x1, x2, x3, x4, f, NWORDS_ORDER);
 801c072:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 801c076:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 801c07a:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 801c07e:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 801c082:	2308      	movs	r3, #8
 801c084:	9301      	str	r3, [sp, #4]
 801c086:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801c08a:	9300      	str	r3, [sp, #0]
 801c08c:	4623      	mov	r3, r4
 801c08e:	f00c fa75 	bl	802857c <sqisign_gen_mp_invert_matrix>
 801c092:	e037      	b.n	801c104 <_change_of_basis_matrix_tate+0x184>
    } else {
        assert(test_basis_order_twof(B2, E, e_full));
 801c094:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c098:	f5a3 71dc 	sub.w	r1, r3, #440	@ 0x1b8
 801c09c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c0a0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801c0a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801c0a8:	6809      	ldr	r1, [r1, #0]
 801c0aa:	6818      	ldr	r0, [r3, #0]
 801c0ac:	f7ff f8b6 	bl	801b21c <test_basis_order_twof>
 801c0b0:	4603      	mov	r3, r0
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d106      	bne.n	801c0c4 <_change_of_basis_matrix_tate+0x144>
 801c0b6:	4ba4      	ldr	r3, [pc, #656]	@ (801c348 <_change_of_basis_matrix_tate+0x3c8>)
 801c0b8:	4aa1      	ldr	r2, [pc, #644]	@ (801c340 <_change_of_basis_matrix_tate+0x3c0>)
 801c0ba:	f240 1125 	movw	r1, #293	@ 0x125
 801c0be:	48a1      	ldr	r0, [pc, #644]	@ (801c344 <_change_of_basis_matrix_tate+0x3c4>)
 801c0c0:	f019 f8ba 	bl	8035238 <__assert_func>
        ec_dlog_2_tate(x1, x2, x3, x4, B2, B1, E, f);
 801c0c4:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 801c0c8:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 801c0cc:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 801c0d0:	f507 70c8 	add.w	r0, r7, #400	@ 0x190
 801c0d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801c0d8:	9303      	str	r3, [sp, #12]
 801c0da:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c0de:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	9302      	str	r3, [sp, #8]
 801c0e6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c0ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	9301      	str	r3, [sp, #4]
 801c0f2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c0f6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	9300      	str	r3, [sp, #0]
 801c0fe:	4623      	mov	r3, r4
 801c100:	f7e8 fac6 	bl	8004690 <ec_dlog_2_tate>
    }

#ifndef NDEBUG
    {
        if (invert) {
 801c104:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d071      	beq.n	801c1f0 <_change_of_basis_matrix_tate+0x270>
            ec_point_t test, test2;
            ec_biscalar_mul(&test, x1, x2, f, B2, E);
 801c10c:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 801c110:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 801c114:	f107 0010 	add.w	r0, r7, #16
 801c118:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c11c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	9301      	str	r3, [sp, #4]
 801c124:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c128:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	9300      	str	r3, [sp, #0]
 801c130:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801c134:	f7f0 fd9c 	bl	800cc70 <ec_biscalar_mul>
            ec_dbl_iter(&test2, e_diff, &B1->P, E);
 801c138:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c13c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801c140:	681a      	ldr	r2, [r3, #0]
 801c142:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c146:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c14a:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 801c154:	f7f0 fcdc 	bl	800cb10 <ec_dbl_iter>
            assert(ec_is_equal(&test, &test2));
 801c158:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801c15c:	f107 0310 	add.w	r3, r7, #16
 801c160:	4611      	mov	r1, r2
 801c162:	4618      	mov	r0, r3
 801c164:	f7ef fa81 	bl	800b66a <ec_is_equal>
 801c168:	4603      	mov	r3, r0
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d106      	bne.n	801c17c <_change_of_basis_matrix_tate+0x1fc>
 801c16e:	4b77      	ldr	r3, [pc, #476]	@ (801c34c <_change_of_basis_matrix_tate+0x3cc>)
 801c170:	4a73      	ldr	r2, [pc, #460]	@ (801c340 <_change_of_basis_matrix_tate+0x3c0>)
 801c172:	f240 112f 	movw	r1, #303	@ 0x12f
 801c176:	4873      	ldr	r0, [pc, #460]	@ (801c344 <_change_of_basis_matrix_tate+0x3c4>)
 801c178:	f019 f85e 	bl	8035238 <__assert_func>

            ec_biscalar_mul(&test, x3, x4, f, B2, E);
 801c17c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801c180:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 801c184:	f107 0010 	add.w	r0, r7, #16
 801c188:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c18c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	9301      	str	r3, [sp, #4]
 801c194:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c198:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	9300      	str	r3, [sp, #0]
 801c1a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801c1a4:	f7f0 fd64 	bl	800cc70 <ec_biscalar_mul>
            ec_dbl_iter(&test2, e_diff, &B1->Q, E);
 801c1a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c1ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801c1b6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c1ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c1be:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 801c1c8:	f7f0 fca2 	bl	800cb10 <ec_dbl_iter>
            assert(ec_is_equal(&test, &test2));
 801c1cc:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801c1d0:	f107 0310 	add.w	r3, r7, #16
 801c1d4:	4611      	mov	r1, r2
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	f7ef fa47 	bl	800b66a <ec_is_equal>
 801c1dc:	4603      	mov	r3, r0
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d178      	bne.n	801c2d4 <_change_of_basis_matrix_tate+0x354>
 801c1e2:	4b5a      	ldr	r3, [pc, #360]	@ (801c34c <_change_of_basis_matrix_tate+0x3cc>)
 801c1e4:	4a56      	ldr	r2, [pc, #344]	@ (801c340 <_change_of_basis_matrix_tate+0x3c0>)
 801c1e6:	f240 1133 	movw	r1, #307	@ 0x133
 801c1ea:	4856      	ldr	r0, [pc, #344]	@ (801c344 <_change_of_basis_matrix_tate+0x3c4>)
 801c1ec:	f019 f824 	bl	8035238 <__assert_func>
        } else {
            ec_point_t test;
            ec_biscalar_mul(&test, x1, x2, f, B2, E);
 801c1f0:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 801c1f4:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 801c1f8:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801c1fc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c200:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	9301      	str	r3, [sp, #4]
 801c208:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c20c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	9300      	str	r3, [sp, #0]
 801c214:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801c218:	f7f0 fd2a 	bl	800cc70 <ec_biscalar_mul>
            ec_dbl_iter(&test, e_diff, &test, E);
 801c21c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c220:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c224:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801c228:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 801c232:	f7f0 fc6d 	bl	800cb10 <ec_dbl_iter>
            assert(ec_is_equal(&test, &(B1->P)));
 801c236:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c23a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801c23e:	681a      	ldr	r2, [r3, #0]
 801c240:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c244:	4611      	mov	r1, r2
 801c246:	4618      	mov	r0, r3
 801c248:	f7ef fa0f 	bl	800b66a <ec_is_equal>
 801c24c:	4603      	mov	r3, r0
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d106      	bne.n	801c260 <_change_of_basis_matrix_tate+0x2e0>
 801c252:	4b3f      	ldr	r3, [pc, #252]	@ (801c350 <_change_of_basis_matrix_tate+0x3d0>)
 801c254:	4a3a      	ldr	r2, [pc, #232]	@ (801c340 <_change_of_basis_matrix_tate+0x3c0>)
 801c256:	f44f 719c 	mov.w	r1, #312	@ 0x138
 801c25a:	483a      	ldr	r0, [pc, #232]	@ (801c344 <_change_of_basis_matrix_tate+0x3c4>)
 801c25c:	f018 ffec 	bl	8035238 <__assert_func>

            ec_biscalar_mul(&test, x3, x4, f, B2, E);
 801c260:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801c264:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 801c268:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801c26c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c270:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	9301      	str	r3, [sp, #4]
 801c278:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c27c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	9300      	str	r3, [sp, #0]
 801c284:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801c288:	f7f0 fcf2 	bl	800cc70 <ec_biscalar_mul>
            ec_dbl_iter(&test, e_diff, &test, E);
 801c28c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c290:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801c294:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801c298:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 801c2a2:	f7f0 fc35 	bl	800cb10 <ec_dbl_iter>
            assert(ec_is_equal(&test, &(B1->Q)));
 801c2a6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c2aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801c2b4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c2b8:	4611      	mov	r1, r2
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7ef f9d5 	bl	800b66a <ec_is_equal>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d106      	bne.n	801c2d4 <_change_of_basis_matrix_tate+0x354>
 801c2c6:	4b23      	ldr	r3, [pc, #140]	@ (801c354 <_change_of_basis_matrix_tate+0x3d4>)
 801c2c8:	4a1d      	ldr	r2, [pc, #116]	@ (801c340 <_change_of_basis_matrix_tate+0x3c0>)
 801c2ca:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801c2ce:	481d      	ldr	r0, [pc, #116]	@ (801c344 <_change_of_basis_matrix_tate+0x3c4>)
 801c2d0:	f018 ffb2 	bl	8035238 <__assert_func>
        }
    }
#endif

    // Copy the results into the matrix
    ibz_copy_digit_array(&((*mat)[0][0]), x1);
 801c2d4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c2d8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 801c2e2:	2208      	movs	r2, #8
 801c2e4:	4618      	mov	r0, r3
 801c2e6:	f001 f944 	bl	801d572 <sqisign_gen_ibz_copy_digits>
    ibz_copy_digit_array(&((*mat)[1][0]), x2);
 801c2ea:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c2ee:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	3318      	adds	r3, #24
 801c2f6:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 801c2fa:	2208      	movs	r2, #8
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	f001 f938 	bl	801d572 <sqisign_gen_ibz_copy_digits>
    ibz_copy_digit_array(&((*mat)[0][1]), x3);
 801c302:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c306:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	330c      	adds	r3, #12
 801c30e:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 801c312:	2208      	movs	r2, #8
 801c314:	4618      	mov	r0, r3
 801c316:	f001 f92c 	bl	801d572 <sqisign_gen_ibz_copy_digits>
    ibz_copy_digit_array(&((*mat)[1][1]), x4);
 801c31a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801c31e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	3324      	adds	r3, #36	@ 0x24
 801c326:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801c32a:	2208      	movs	r2, #8
 801c32c:	4618      	mov	r0, r3
 801c32e:	f001 f920 	bl	801d572 <sqisign_gen_ibz_copy_digits>
}
 801c332:	bf00      	nop
 801c334:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 801c338:	46bd      	mov	sp, r7
 801c33a:	bd90      	pop	{r4, r7, pc}
 801c33c:	08037970 	.word	0x08037970
 801c340:	080378ec 	.word	0x080378ec
 801c344:	080378f0 	.word	0x080378f0
 801c348:	08037998 	.word	0x08037998
 801c34c:	080379c0 	.word	0x080379c0
 801c350:	080379dc 	.word	0x080379dc
 801c354:	080379fc 	.word	0x080379fc

0801c358 <change_of_basis_matrix_tate>:

void
change_of_basis_matrix_tate(ibz_mat_2x2_t *mat, const ec_basis_t *B1, const ec_basis_t *B2, ec_curve_t *E, int f)
{
 801c358:	b580      	push	{r7, lr}
 801c35a:	b086      	sub	sp, #24
 801c35c:	af02      	add	r7, sp, #8
 801c35e:	60f8      	str	r0, [r7, #12]
 801c360:	60b9      	str	r1, [r7, #8]
 801c362:	607a      	str	r2, [r7, #4]
 801c364:	603b      	str	r3, [r7, #0]
    _change_of_basis_matrix_tate(mat, B1, B2, E, f, false);
 801c366:	2300      	movs	r3, #0
 801c368:	9301      	str	r3, [sp, #4]
 801c36a:	69bb      	ldr	r3, [r7, #24]
 801c36c:	9300      	str	r3, [sp, #0]
 801c36e:	683b      	ldr	r3, [r7, #0]
 801c370:	687a      	ldr	r2, [r7, #4]
 801c372:	68b9      	ldr	r1, [r7, #8]
 801c374:	68f8      	ldr	r0, [r7, #12]
 801c376:	f7ff fe03 	bl	801bf80 <_change_of_basis_matrix_tate>
}
 801c37a:	bf00      	nop
 801c37c:	3710      	adds	r7, #16
 801c37e:	46bd      	mov	sp, r7
 801c380:	bd80      	pop	{r7, pc}

0801c382 <change_of_basis_matrix_tate_invert>:

void
change_of_basis_matrix_tate_invert(ibz_mat_2x2_t *mat, const ec_basis_t *B1, const ec_basis_t *B2, ec_curve_t *E, int f)
{
 801c382:	b580      	push	{r7, lr}
 801c384:	b086      	sub	sp, #24
 801c386:	af02      	add	r7, sp, #8
 801c388:	60f8      	str	r0, [r7, #12]
 801c38a:	60b9      	str	r1, [r7, #8]
 801c38c:	607a      	str	r2, [r7, #4]
 801c38e:	603b      	str	r3, [r7, #0]
    _change_of_basis_matrix_tate(mat, B1, B2, E, f, true);
 801c390:	2301      	movs	r3, #1
 801c392:	9301      	str	r3, [sp, #4]
 801c394:	69bb      	ldr	r3, [r7, #24]
 801c396:	9300      	str	r3, [sp, #0]
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	687a      	ldr	r2, [r7, #4]
 801c39c:	68b9      	ldr	r1, [r7, #8]
 801c39e:	68f8      	ldr	r0, [r7, #12]
 801c3a0:	f7ff fdee 	bl	801bf80 <_change_of_basis_matrix_tate>
}
 801c3a4:	bf00      	nop
 801c3a6:	3710      	adds	r7, #16
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	bd80      	pop	{r7, pc}

0801c3ac <sqisign_gen_quat_lideal_norm>:
#include "internal.h"

// assumes parent order and lattice correctly set, computes and sets the norm
void
quat_lideal_norm(quat_left_ideal_t *lideal)
{
 801c3ac:	b580      	push	{r7, lr}
 801c3ae:	b084      	sub	sp, #16
 801c3b0:	af00      	add	r7, sp, #0
 801c3b2:	6078      	str	r0, [r7, #4]
    quat_lattice_index(&(lideal->norm), &(lideal->lattice), (lideal->parent_order));
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 801c3ba:	6879      	ldr	r1, [r7, #4]
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801c3c2:	461a      	mov	r2, r3
 801c3c4:	f005 f858 	bl	8021478 <sqisign_gen_quat_lattice_index>
    int ok UNUSED = ibz_sqrt(&(lideal->norm), &(lideal->norm));
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	33cc      	adds	r3, #204	@ 0xcc
 801c3d2:	4619      	mov	r1, r3
 801c3d4:	4610      	mov	r0, r2
 801c3d6:	f001 f92f 	bl	801d638 <sqisign_gen_ibz_sqrt>
 801c3da:	60f8      	str	r0, [r7, #12]
    assert(ok);
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d105      	bne.n	801c3ee <sqisign_gen_quat_lideal_norm+0x42>
 801c3e2:	4b05      	ldr	r3, [pc, #20]	@ (801c3f8 <sqisign_gen_quat_lideal_norm+0x4c>)
 801c3e4:	4a05      	ldr	r2, [pc, #20]	@ (801c3fc <sqisign_gen_quat_lideal_norm+0x50>)
 801c3e6:	210b      	movs	r1, #11
 801c3e8:	4805      	ldr	r0, [pc, #20]	@ (801c400 <sqisign_gen_quat_lideal_norm+0x54>)
 801c3ea:	f018 ff25 	bl	8035238 <__assert_func>
}
 801c3ee:	bf00      	nop
 801c3f0:	3710      	adds	r7, #16
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	bd80      	pop	{r7, pc}
 801c3f6:	bf00      	nop
 801c3f8:	08037a1c 	.word	0x08037a1c
 801c3fc:	0803b780 	.word	0x0803b780
 801c400:	08037a20 	.word	0x08037a20

0801c404 <quat_lideal_norm_verify>:

// assumes parent order and lattice correctly set, recomputes and verifies its norm
static int
quat_lideal_norm_verify(const quat_left_ideal_t *lideal)
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b086      	sub	sp, #24
 801c408:	af00      	add	r7, sp, #0
 801c40a:	6078      	str	r0, [r7, #4]
    int res;
    ibz_t index;
    ibz_init(&index);
 801c40c:	f107 0308 	add.w	r3, r7, #8
 801c410:	4618      	mov	r0, r3
 801c412:	f000 fdf8 	bl	801d006 <sqisign_gen_ibz_init>
    quat_lattice_index(&index, &(lideal->lattice), (lideal->parent_order));
 801c416:	6879      	ldr	r1, [r7, #4]
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801c41e:	f107 0308 	add.w	r3, r7, #8
 801c422:	4618      	mov	r0, r3
 801c424:	f005 f828 	bl	8021478 <sqisign_gen_quat_lattice_index>
    ibz_sqrt(&index, &index);
 801c428:	f107 0208 	add.w	r2, r7, #8
 801c42c:	f107 0308 	add.w	r3, r7, #8
 801c430:	4611      	mov	r1, r2
 801c432:	4618      	mov	r0, r3
 801c434:	f001 f900 	bl	801d638 <sqisign_gen_ibz_sqrt>
    res = (ibz_cmp(&(lideal->norm), &index) == 0);
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	33cc      	adds	r3, #204	@ 0xcc
 801c43c:	f107 0208 	add.w	r2, r7, #8
 801c440:	4611      	mov	r1, r2
 801c442:	4618      	mov	r0, r3
 801c444:	f000 feb4 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801c448:	4603      	mov	r3, r0
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	bf0c      	ite	eq
 801c44e:	2301      	moveq	r3, #1
 801c450:	2300      	movne	r3, #0
 801c452:	b2db      	uxtb	r3, r3
 801c454:	617b      	str	r3, [r7, #20]
    ibz_finalize(&index);
 801c456:	f107 0308 	add.w	r3, r7, #8
 801c45a:	4618      	mov	r0, r3
 801c45c:	f000 fdde 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (res);
 801c460:	697b      	ldr	r3, [r7, #20]
}
 801c462:	4618      	mov	r0, r3
 801c464:	3718      	adds	r7, #24
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}

0801c46a <sqisign_gen_quat_lideal_copy>:

void
quat_lideal_copy(quat_left_ideal_t *copy, const quat_left_ideal_t *copied)
{
 801c46a:	b580      	push	{r7, lr}
 801c46c:	b084      	sub	sp, #16
 801c46e:	af00      	add	r7, sp, #0
 801c470:	6078      	str	r0, [r7, #4]
 801c472:	6039      	str	r1, [r7, #0]
    copy->parent_order = copied->parent_order;
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    ibz_copy(&copy->norm, &copied->norm);
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 801c486:	683b      	ldr	r3, [r7, #0]
 801c488:	33cc      	adds	r3, #204	@ 0xcc
 801c48a:	4619      	mov	r1, r3
 801c48c:	4610      	mov	r0, r2
 801c48e:	f000 fef5 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&copy->lattice.denom, &copied->lattice.denom);
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	683a      	ldr	r2, [r7, #0]
 801c496:	4611      	mov	r1, r2
 801c498:	4618      	mov	r0, r3
 801c49a:	f000 feef 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 801c49e:	2300      	movs	r3, #0
 801c4a0:	60fb      	str	r3, [r7, #12]
 801c4a2:	e02e      	b.n	801c502 <sqisign_gen_quat_lideal_copy+0x98>
        for (int j = 0; j < 4; j++) {
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	60bb      	str	r3, [r7, #8]
 801c4a8:	e025      	b.n	801c4f6 <sqisign_gen_quat_lideal_copy+0x8c>
            ibz_copy(&copy->lattice.basis[i][j], &copied->lattice.basis[i][j]);
 801c4aa:	68bb      	ldr	r3, [r7, #8]
 801c4ac:	461a      	mov	r2, r3
 801c4ae:	0052      	lsls	r2, r2, #1
 801c4b0:	441a      	add	r2, r3
 801c4b2:	0093      	lsls	r3, r2, #2
 801c4b4:	461a      	mov	r2, r3
 801c4b6:	68f9      	ldr	r1, [r7, #12]
 801c4b8:	460b      	mov	r3, r1
 801c4ba:	005b      	lsls	r3, r3, #1
 801c4bc:	440b      	add	r3, r1
 801c4be:	011b      	lsls	r3, r3, #4
 801c4c0:	4413      	add	r3, r2
 801c4c2:	3308      	adds	r3, #8
 801c4c4:	687a      	ldr	r2, [r7, #4]
 801c4c6:	4413      	add	r3, r2
 801c4c8:	1d18      	adds	r0, r3, #4
 801c4ca:	68bb      	ldr	r3, [r7, #8]
 801c4cc:	461a      	mov	r2, r3
 801c4ce:	0052      	lsls	r2, r2, #1
 801c4d0:	441a      	add	r2, r3
 801c4d2:	0093      	lsls	r3, r2, #2
 801c4d4:	461a      	mov	r2, r3
 801c4d6:	68f9      	ldr	r1, [r7, #12]
 801c4d8:	460b      	mov	r3, r1
 801c4da:	005b      	lsls	r3, r3, #1
 801c4dc:	440b      	add	r3, r1
 801c4de:	011b      	lsls	r3, r3, #4
 801c4e0:	4413      	add	r3, r2
 801c4e2:	3308      	adds	r3, #8
 801c4e4:	683a      	ldr	r2, [r7, #0]
 801c4e6:	4413      	add	r3, r2
 801c4e8:	3304      	adds	r3, #4
 801c4ea:	4619      	mov	r1, r3
 801c4ec:	f000 fec6 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j < 4; j++) {
 801c4f0:	68bb      	ldr	r3, [r7, #8]
 801c4f2:	3301      	adds	r3, #1
 801c4f4:	60bb      	str	r3, [r7, #8]
 801c4f6:	68bb      	ldr	r3, [r7, #8]
 801c4f8:	2b03      	cmp	r3, #3
 801c4fa:	ddd6      	ble.n	801c4aa <sqisign_gen_quat_lideal_copy+0x40>
    for (int i = 0; i < 4; i++) {
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	3301      	adds	r3, #1
 801c500:	60fb      	str	r3, [r7, #12]
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	2b03      	cmp	r3, #3
 801c506:	ddcd      	ble.n	801c4a4 <sqisign_gen_quat_lideal_copy+0x3a>
        }
    }
}
 801c508:	bf00      	nop
 801c50a:	bf00      	nop
 801c50c:	3710      	adds	r7, #16
 801c50e:	46bd      	mov	sp, r7
 801c510:	bd80      	pop	{r7, pc}
	...

0801c514 <sqisign_gen_quat_lideal_create_principal>:
void
quat_lideal_create_principal(quat_left_ideal_t *lideal,
                             const quat_alg_elem_t *x,
                             const quat_lattice_t *order,
                             const quat_alg_t *alg)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b08a      	sub	sp, #40	@ 0x28
 801c518:	af00      	add	r7, sp, #0
 801c51a:	60f8      	str	r0, [r7, #12]
 801c51c:	60b9      	str	r1, [r7, #8]
 801c51e:	607a      	str	r2, [r7, #4]
 801c520:	603b      	str	r3, [r7, #0]
    assert(quat_order_is_maximal(order, alg));
 801c522:	6839      	ldr	r1, [r7, #0]
 801c524:	6878      	ldr	r0, [r7, #4]
 801c526:	f000 fd45 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801c52a:	4603      	mov	r3, r0
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d105      	bne.n	801c53c <sqisign_gen_quat_lideal_create_principal+0x28>
 801c530:	4b2c      	ldr	r3, [pc, #176]	@ (801c5e4 <sqisign_gen_quat_lideal_create_principal+0xd0>)
 801c532:	4a2d      	ldr	r2, [pc, #180]	@ (801c5e8 <sqisign_gen_quat_lideal_create_principal+0xd4>)
 801c534:	212f      	movs	r1, #47	@ 0x2f
 801c536:	482d      	ldr	r0, [pc, #180]	@ (801c5ec <sqisign_gen_quat_lideal_create_principal+0xd8>)
 801c538:	f018 fe7e 	bl	8035238 <__assert_func>
    assert(quat_lattice_contains(NULL, order, x));
 801c53c:	68ba      	ldr	r2, [r7, #8]
 801c53e:	6879      	ldr	r1, [r7, #4]
 801c540:	2000      	movs	r0, #0
 801c542:	f004 fed1 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 801c546:	4603      	mov	r3, r0
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d105      	bne.n	801c558 <sqisign_gen_quat_lideal_create_principal+0x44>
 801c54c:	4b28      	ldr	r3, [pc, #160]	@ (801c5f0 <sqisign_gen_quat_lideal_create_principal+0xdc>)
 801c54e:	4a26      	ldr	r2, [pc, #152]	@ (801c5e8 <sqisign_gen_quat_lideal_create_principal+0xd4>)
 801c550:	2130      	movs	r1, #48	@ 0x30
 801c552:	4826      	ldr	r0, [pc, #152]	@ (801c5ec <sqisign_gen_quat_lideal_create_principal+0xd8>)
 801c554:	f018 fe70 	bl	8035238 <__assert_func>
    ibz_t norm_n, norm_d;
    ibz_init(&norm_n);
 801c558:	f107 031c 	add.w	r3, r7, #28
 801c55c:	4618      	mov	r0, r3
 801c55e:	f000 fd52 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm_d);
 801c562:	f107 0310 	add.w	r3, r7, #16
 801c566:	4618      	mov	r0, r3
 801c568:	f000 fd4d 	bl	801d006 <sqisign_gen_ibz_init>

    // Multiply order on the right by x
    quat_lattice_alg_elem_mul(&(lideal->lattice), order, x, alg);
 801c56c:	68f8      	ldr	r0, [r7, #12]
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	68ba      	ldr	r2, [r7, #8]
 801c572:	6879      	ldr	r1, [r7, #4]
 801c574:	f004 fcd8 	bl	8020f28 <sqisign_gen_quat_lattice_alg_elem_mul>

    // Reduce denominator. This conserves HNF
    quat_lattice_reduce_denom(&lideal->lattice, &lideal->lattice);
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	68fa      	ldr	r2, [r7, #12]
 801c57c:	4611      	mov	r1, r2
 801c57e:	4618      	mov	r0, r3
 801c580:	f004 f994 	bl	80208ac <sqisign_gen_quat_lattice_reduce_denom>

    // Compute norm and check it's integral
    quat_alg_norm(&norm_n, &norm_d, x, alg);
 801c584:	f107 0110 	add.w	r1, r7, #16
 801c588:	f107 001c 	add.w	r0, r7, #28
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	68ba      	ldr	r2, [r7, #8]
 801c590:	f7e4 ff64 	bl	800145c <sqisign_gen_quat_alg_norm>
    assert(ibz_is_one(&norm_d));
 801c594:	f107 0310 	add.w	r3, r7, #16
 801c598:	4618      	mov	r0, r3
 801c59a:	f000 fe2c 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801c59e:	4603      	mov	r3, r0
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d105      	bne.n	801c5b0 <sqisign_gen_quat_lideal_create_principal+0x9c>
 801c5a4:	4b13      	ldr	r3, [pc, #76]	@ (801c5f4 <sqisign_gen_quat_lideal_create_principal+0xe0>)
 801c5a6:	4a10      	ldr	r2, [pc, #64]	@ (801c5e8 <sqisign_gen_quat_lideal_create_principal+0xd4>)
 801c5a8:	213d      	movs	r1, #61	@ 0x3d
 801c5aa:	4810      	ldr	r0, [pc, #64]	@ (801c5ec <sqisign_gen_quat_lideal_create_principal+0xd8>)
 801c5ac:	f018 fe44 	bl	8035238 <__assert_func>
    ibz_copy(&lideal->norm, &norm_n);
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	33cc      	adds	r3, #204	@ 0xcc
 801c5b4:	f107 021c 	add.w	r2, r7, #28
 801c5b8:	4611      	mov	r1, r2
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f000 fe5e 	bl	801d27c <sqisign_gen_ibz_copy>

    // Set order
    lideal->parent_order = order;
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    ibz_finalize(&norm_n);
 801c5c8:	f107 031c 	add.w	r3, r7, #28
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f000 fd25 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm_d);
 801c5d2:	f107 0310 	add.w	r3, r7, #16
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	f000 fd20 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801c5dc:	bf00      	nop
 801c5de:	3728      	adds	r7, #40	@ 0x28
 801c5e0:	46bd      	mov	sp, r7
 801c5e2:	bd80      	pop	{r7, pc}
 801c5e4:	08037a34 	.word	0x08037a34
 801c5e8:	0803b7a0 	.word	0x0803b7a0
 801c5ec:	08037a20 	.word	0x08037a20
 801c5f0:	08037a58 	.word	0x08037a58
 801c5f4:	08037a80 	.word	0x08037a80

0801c5f8 <sqisign_gen_quat_lideal_create>:
quat_lideal_create(quat_left_ideal_t *lideal,
                   const quat_alg_elem_t *x,
                   const ibz_t *N,
                   const quat_lattice_t *order,
                   const quat_alg_t *alg)
{
 801c5f8:	b580      	push	{r7, lr}
 801c5fa:	b0b8      	sub	sp, #224	@ 0xe0
 801c5fc:	af00      	add	r7, sp, #0
 801c5fe:	60f8      	str	r0, [r7, #12]
 801c600:	60b9      	str	r1, [r7, #8]
 801c602:	607a      	str	r2, [r7, #4]
 801c604:	603b      	str	r3, [r7, #0]
    assert(quat_order_is_maximal(order, alg));
 801c606:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801c60a:	6838      	ldr	r0, [r7, #0]
 801c60c:	f000 fcd2 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801c610:	4603      	mov	r3, r0
 801c612:	2b00      	cmp	r3, #0
 801c614:	d105      	bne.n	801c622 <sqisign_gen_quat_lideal_create+0x2a>
 801c616:	4b23      	ldr	r3, [pc, #140]	@ (801c6a4 <sqisign_gen_quat_lideal_create+0xac>)
 801c618:	4a23      	ldr	r2, [pc, #140]	@ (801c6a8 <sqisign_gen_quat_lideal_create+0xb0>)
 801c61a:	214d      	movs	r1, #77	@ 0x4d
 801c61c:	4823      	ldr	r0, [pc, #140]	@ (801c6ac <sqisign_gen_quat_lideal_create+0xb4>)
 801c61e:	f018 fe0b 	bl	8035238 <__assert_func>
    assert(!quat_alg_elem_is_zero(x));
 801c622:	68b8      	ldr	r0, [r7, #8]
 801c624:	f7e5 f8a4 	bl	8001770 <sqisign_gen_quat_alg_elem_is_zero>
 801c628:	4603      	mov	r3, r0
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d005      	beq.n	801c63a <sqisign_gen_quat_lideal_create+0x42>
 801c62e:	4b20      	ldr	r3, [pc, #128]	@ (801c6b0 <sqisign_gen_quat_lideal_create+0xb8>)
 801c630:	4a1d      	ldr	r2, [pc, #116]	@ (801c6a8 <sqisign_gen_quat_lideal_create+0xb0>)
 801c632:	214e      	movs	r1, #78	@ 0x4e
 801c634:	481d      	ldr	r0, [pc, #116]	@ (801c6ac <sqisign_gen_quat_lideal_create+0xb4>)
 801c636:	f018 fdff 	bl	8035238 <__assert_func>

    quat_lattice_t ON;
    quat_lattice_init(&ON);
 801c63a:	f107 0314 	add.w	r3, r7, #20
 801c63e:	4618      	mov	r0, r3
 801c640:	f7f2 fccf 	bl	800efe2 <sqisign_gen_quat_lattice_init>

    // Compute ideal generated by x
    quat_lideal_create_principal(lideal, x, order, alg);
 801c644:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801c648:	683a      	ldr	r2, [r7, #0]
 801c64a:	68b9      	ldr	r1, [r7, #8]
 801c64c:	68f8      	ldr	r0, [r7, #12]
 801c64e:	f7ff ff61 	bl	801c514 <sqisign_gen_quat_lideal_create_principal>

    // Compute ideal generated by N (without reducing denominator)
    ibz_mat_4x4_scalar_mul(&ON.basis, N, &order->basis);
 801c652:	683b      	ldr	r3, [r7, #0]
 801c654:	f103 020c 	add.w	r2, r3, #12
 801c658:	f107 0314 	add.w	r3, r7, #20
 801c65c:	330c      	adds	r3, #12
 801c65e:	6879      	ldr	r1, [r7, #4]
 801c660:	4618      	mov	r0, r3
 801c662:	f7ed fe68 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
    ibz_copy(&ON.denom, &order->denom);
 801c666:	683a      	ldr	r2, [r7, #0]
 801c668:	f107 0314 	add.w	r3, r7, #20
 801c66c:	4611      	mov	r1, r2
 801c66e:	4618      	mov	r0, r3
 801c670:	f000 fe04 	bl	801d27c <sqisign_gen_ibz_copy>

    // Add lattices (reduces denominators)
    quat_lattice_add(&lideal->lattice, &lideal->lattice, &ON);
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	68f9      	ldr	r1, [r7, #12]
 801c678:	f107 0214 	add.w	r2, r7, #20
 801c67c:	4618      	mov	r0, r3
 801c67e:	f004 f9df 	bl	8020a40 <sqisign_gen_quat_lattice_add>
    // Set order
    lideal->parent_order = order;
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	683a      	ldr	r2, [r7, #0]
 801c686:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    // Compute norm
    quat_lideal_norm(lideal);
 801c68a:	68f8      	ldr	r0, [r7, #12]
 801c68c:	f7ff fe8e 	bl	801c3ac <sqisign_gen_quat_lideal_norm>

    quat_lattice_finalize(&ON);
 801c690:	f107 0314 	add.w	r3, r7, #20
 801c694:	4618      	mov	r0, r3
 801c696:	f7f2 fcba 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
}
 801c69a:	bf00      	nop
 801c69c:	37e0      	adds	r7, #224	@ 0xe0
 801c69e:	46bd      	mov	sp, r7
 801c6a0:	bd80      	pop	{r7, pc}
 801c6a2:	bf00      	nop
 801c6a4:	08037a34 	.word	0x08037a34
 801c6a8:	0803b7cc 	.word	0x0803b7cc
 801c6ac:	08037a20 	.word	0x08037a20
 801c6b0:	08037a94 	.word	0x08037a94

0801c6b4 <sqisign_gen_quat_lideal_generator>:

int
quat_lideal_generator(quat_alg_elem_t *gen, const quat_left_ideal_t *lideal, const quat_alg_t *alg)
{
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b0aa      	sub	sp, #168	@ 0xa8
 801c6b8:	af02      	add	r7, sp, #8
 801c6ba:	60f8      	str	r0, [r7, #12]
 801c6bc:	60b9      	str	r1, [r7, #8]
 801c6be:	607a      	str	r2, [r7, #4]
    ibz_t norm_int, norm_n, gcd, r, q, norm_denom;
    ibz_vec_4_t vec;
    ibz_vec_4_init(&vec);
 801c6c0:	f107 0310 	add.w	r3, r7, #16
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	f7f2 fba4 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_init(&norm_denom);
 801c6ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c6ce:	4618      	mov	r0, r3
 801c6d0:	f000 fc99 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm_int);
 801c6d4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801c6d8:	4618      	mov	r0, r3
 801c6da:	f000 fc94 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm_n);
 801c6de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	f000 fc8f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&r);
 801c6e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801c6ec:	4618      	mov	r0, r3
 801c6ee:	f000 fc8a 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&q);
 801c6f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801c6f6:	4618      	mov	r0, r3
 801c6f8:	f000 fc85 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&gcd);
 801c6fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801c700:	4618      	mov	r0, r3
 801c702:	f000 fc80 	bl	801d006 <sqisign_gen_ibz_init>
    int a, b, c, d;
    int found = 0;
 801c706:	2300      	movs	r3, #0
 801c708:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    int int_norm = 0;
 801c70c:	2300      	movs	r3, #0
 801c70e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    while (1) {
        int_norm++;
 801c712:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c716:	3301      	adds	r3, #1
 801c718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        for (a = -int_norm; a <= int_norm; a++) {
 801c71c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c720:	425b      	negs	r3, r3
 801c722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801c726:	e0d9      	b.n	801c8dc <sqisign_gen_quat_lideal_generator+0x228>
            for (b = -int_norm + abs(a); b <= int_norm - abs(a); b++) {
 801c728:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c72c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801c730:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801c734:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c738:	1ad3      	subs	r3, r2, r3
 801c73a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801c73e:	e0bb      	b.n	801c8b8 <sqisign_gen_quat_lideal_generator+0x204>
                for (c = -int_norm + abs(a) + abs(b); c <= int_norm - abs(a) - abs(b); c++) {
 801c740:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c744:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801c748:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801c74c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c750:	1ad2      	subs	r2, r2, r3
 801c752:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c756:	2b00      	cmp	r3, #0
 801c758:	bfb8      	it	lt
 801c75a:	425b      	neglt	r3, r3
 801c75c:	4413      	add	r3, r2
 801c75e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801c762:	e091      	b.n	801c888 <sqisign_gen_quat_lideal_generator+0x1d4>
                    d = int_norm - abs(a) - abs(b) - abs(c);
 801c764:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c768:	2b00      	cmp	r3, #0
 801c76a:	bfb8      	it	lt
 801c76c:	425b      	neglt	r3, r3
 801c76e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c772:	1ad2      	subs	r2, r2, r3
 801c774:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c778:	2b00      	cmp	r3, #0
 801c77a:	bfb8      	it	lt
 801c77c:	425b      	neglt	r3, r3
 801c77e:	1ad2      	subs	r2, r2, r3
 801c780:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c784:	2b00      	cmp	r3, #0
 801c786:	bfb8      	it	lt
 801c788:	425b      	neglt	r3, r3
 801c78a:	1ad3      	subs	r3, r2, r3
 801c78c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    ibz_vec_4_set(&vec, a, b, c, d);
 801c790:	f107 0010 	add.w	r0, r7, #16
 801c794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c798:	9300      	str	r3, [sp, #0]
 801c79a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c79e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c7a2:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801c7a6:	f7ed fb43 	bl	8009e30 <sqisign_gen_ibz_vec_4_set>
                    ibz_vec_4_content(&gcd, &vec);
 801c7aa:	f107 0210 	add.w	r2, r7, #16
 801c7ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801c7b2:	4611      	mov	r1, r2
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	f7ed fba3 	bl	8009f00 <sqisign_gen_ibz_vec_4_content>
                    if (ibz_is_one(&gcd)) {
 801c7ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f000 fd19 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801c7c4:	4603      	mov	r3, r0
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d059      	beq.n	801c87e <sqisign_gen_quat_lideal_generator+0x1ca>
                        ibz_mat_4x4_eval(&(gen->coord), &(lideal->lattice.basis), &vec);
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	f103 000c 	add.w	r0, r3, #12
 801c7d0:	68bb      	ldr	r3, [r7, #8]
 801c7d2:	330c      	adds	r3, #12
 801c7d4:	f107 0210 	add.w	r2, r7, #16
 801c7d8:	4619      	mov	r1, r3
 801c7da:	f7ee fc76 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
                        ibz_copy(&(gen->denom), &(lideal->lattice.denom));
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	68ba      	ldr	r2, [r7, #8]
 801c7e2:	4611      	mov	r1, r2
 801c7e4:	4618      	mov	r0, r3
 801c7e6:	f000 fd49 	bl	801d27c <sqisign_gen_ibz_copy>
                        quat_alg_norm(&norm_int, &norm_denom, gen, alg);
 801c7ea:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801c7ee:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	68fa      	ldr	r2, [r7, #12]
 801c7f6:	f7e4 fe31 	bl	800145c <sqisign_gen_quat_alg_norm>
                        assert(ibz_is_one(&norm_denom));
 801c7fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c7fe:	4618      	mov	r0, r3
 801c800:	f000 fcf9 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801c804:	4603      	mov	r3, r0
 801c806:	2b00      	cmp	r3, #0
 801c808:	d105      	bne.n	801c816 <sqisign_gen_quat_lideal_generator+0x162>
 801c80a:	4b4d      	ldr	r3, [pc, #308]	@ (801c940 <sqisign_gen_quat_lideal_generator+0x28c>)
 801c80c:	4a4d      	ldr	r2, [pc, #308]	@ (801c944 <sqisign_gen_quat_lideal_generator+0x290>)
 801c80e:	217f      	movs	r1, #127	@ 0x7f
 801c810:	484d      	ldr	r0, [pc, #308]	@ (801c948 <sqisign_gen_quat_lideal_generator+0x294>)
 801c812:	f018 fd11 	bl	8035238 <__assert_func>
                        ibz_div(&q, &r, &norm_int, &(lideal->norm));
 801c816:	68bb      	ldr	r3, [r7, #8]
 801c818:	33cc      	adds	r3, #204	@ 0xcc
 801c81a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801c81e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801c822:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 801c826:	f000 fc4b 	bl	801d0c0 <sqisign_gen_ibz_div>
                        assert(ibz_is_zero(&r));
 801c82a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801c82e:	4618      	mov	r0, r3
 801c830:	f000 fccd 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801c834:	4603      	mov	r3, r0
 801c836:	2b00      	cmp	r3, #0
 801c838:	d105      	bne.n	801c846 <sqisign_gen_quat_lideal_generator+0x192>
 801c83a:	4b44      	ldr	r3, [pc, #272]	@ (801c94c <sqisign_gen_quat_lideal_generator+0x298>)
 801c83c:	4a41      	ldr	r2, [pc, #260]	@ (801c944 <sqisign_gen_quat_lideal_generator+0x290>)
 801c83e:	2181      	movs	r1, #129	@ 0x81
 801c840:	4841      	ldr	r0, [pc, #260]	@ (801c948 <sqisign_gen_quat_lideal_generator+0x294>)
 801c842:	f018 fcf9 	bl	8035238 <__assert_func>
                        ibz_gcd(&gcd, &(lideal->norm), &q);
 801c846:	68bb      	ldr	r3, [r7, #8]
 801c848:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 801c84c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801c850:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801c854:	4618      	mov	r0, r3
 801c856:	f000 fecb 	bl	801d5f0 <sqisign_gen_ibz_gcd>
                        found = (0 == ibz_cmp(&gcd, &ibz_const_one));
 801c85a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801c85e:	493c      	ldr	r1, [pc, #240]	@ (801c950 <sqisign_gen_quat_lideal_generator+0x29c>)
 801c860:	4618      	mov	r0, r3
 801c862:	f000 fca5 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801c866:	4603      	mov	r3, r0
 801c868:	2b00      	cmp	r3, #0
 801c86a:	bf0c      	ite	eq
 801c86c:	2301      	moveq	r3, #1
 801c86e:	2300      	movne	r3, #0
 801c870:	b2db      	uxtb	r3, r3
 801c872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                        if (found)
 801c876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	d136      	bne.n	801c8ec <sqisign_gen_quat_lideal_generator+0x238>
                for (c = -int_norm + abs(a) + abs(b); c <= int_norm - abs(a) - abs(b); c++) {
 801c87e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c882:	3301      	adds	r3, #1
 801c884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801c888:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	bfb8      	it	lt
 801c890:	425b      	neglt	r3, r3
 801c892:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c896:	1ad2      	subs	r2, r2, r3
 801c898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	bfb8      	it	lt
 801c8a0:	425b      	neglt	r3, r3
 801c8a2:	1ad3      	subs	r3, r2, r3
 801c8a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	f77f af5b 	ble.w	801c764 <sqisign_gen_quat_lideal_generator+0xb0>
            for (b = -int_norm + abs(a); b <= int_norm - abs(a); b++) {
 801c8ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c8b2:	3301      	adds	r3, #1
 801c8b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801c8b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	bfb8      	it	lt
 801c8c0:	425b      	neglt	r3, r3
 801c8c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c8c6:	1ad3      	subs	r3, r2, r3
 801c8c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c8cc:	429a      	cmp	r2, r3
 801c8ce:	f77f af37 	ble.w	801c740 <sqisign_gen_quat_lideal_generator+0x8c>
        for (a = -int_norm; a <= int_norm; a++) {
 801c8d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c8d6:	3301      	adds	r3, #1
 801c8d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801c8dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801c8e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	f77f af1f 	ble.w	801c728 <sqisign_gen_quat_lideal_generator+0x74>
        int_norm++;
 801c8ea:	e712      	b.n	801c712 <sqisign_gen_quat_lideal_generator+0x5e>
                            goto fin;
 801c8ec:	bf00      	nop
                }
            }
        }
    }
fin:;
    ibz_finalize(&r);
 801c8ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	f000 fb92 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&q);
 801c8f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801c8fc:	4618      	mov	r0, r3
 801c8fe:	f000 fb8d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm_denom);
 801c902:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c906:	4618      	mov	r0, r3
 801c908:	f000 fb88 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm_int);
 801c90c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801c910:	4618      	mov	r0, r3
 801c912:	f000 fb83 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm_n);
 801c916:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801c91a:	4618      	mov	r0, r3
 801c91c:	f000 fb7e 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&vec);
 801c920:	f107 0310 	add.w	r3, r7, #16
 801c924:	4618      	mov	r0, r3
 801c926:	f7f2 fa90 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_finalize(&gcd);
 801c92a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801c92e:	4618      	mov	r0, r3
 801c930:	f000 fb74 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (found);
 801c934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 801c938:	4618      	mov	r0, r3
 801c93a:	37a0      	adds	r7, #160	@ 0xa0
 801c93c:	46bd      	mov	sp, r7
 801c93e:	bd80      	pop	{r7, pc}
 801c940:	08037ab0 	.word	0x08037ab0
 801c944:	0803b7ec 	.word	0x0803b7ec
 801c948:	08037a20 	.word	0x08037a20
 801c94c:	08037ac8 	.word	0x08037ac8
 801c950:	0803b900 	.word	0x0803b900

0801c954 <sqisign_gen_quat_lideal_mul>:
void
quat_lideal_mul(quat_left_ideal_t *product,
                const quat_left_ideal_t *lideal,
                const quat_alg_elem_t *alpha,
                const quat_alg_t *alg)
{
 801c954:	b580      	push	{r7, lr}
 801c956:	b08a      	sub	sp, #40	@ 0x28
 801c958:	af00      	add	r7, sp, #0
 801c95a:	60f8      	str	r0, [r7, #12]
 801c95c:	60b9      	str	r1, [r7, #8]
 801c95e:	607a      	str	r2, [r7, #4]
 801c960:	603b      	str	r3, [r7, #0]
    assert(quat_order_is_maximal((lideal->parent_order), alg));
 801c962:	68bb      	ldr	r3, [r7, #8]
 801c964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801c968:	6839      	ldr	r1, [r7, #0]
 801c96a:	4618      	mov	r0, r3
 801c96c:	f000 fb22 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801c970:	4603      	mov	r3, r0
 801c972:	2b00      	cmp	r3, #0
 801c974:	d105      	bne.n	801c982 <sqisign_gen_quat_lideal_mul+0x2e>
 801c976:	4b32      	ldr	r3, [pc, #200]	@ (801ca40 <sqisign_gen_quat_lideal_mul+0xec>)
 801c978:	4a32      	ldr	r2, [pc, #200]	@ (801ca44 <sqisign_gen_quat_lideal_mul+0xf0>)
 801c97a:	219c      	movs	r1, #156	@ 0x9c
 801c97c:	4832      	ldr	r0, [pc, #200]	@ (801ca48 <sqisign_gen_quat_lideal_mul+0xf4>)
 801c97e:	f018 fc5b 	bl	8035238 <__assert_func>
    ibz_t norm, norm_d;
    ibz_init(&norm);
 801c982:	f107 031c 	add.w	r3, r7, #28
 801c986:	4618      	mov	r0, r3
 801c988:	f000 fb3d 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm_d);
 801c98c:	f107 0310 	add.w	r3, r7, #16
 801c990:	4618      	mov	r0, r3
 801c992:	f000 fb38 	bl	801d006 <sqisign_gen_ibz_init>
    quat_lattice_alg_elem_mul(&(product->lattice), &(lideal->lattice), alpha, alg);
 801c996:	68f8      	ldr	r0, [r7, #12]
 801c998:	68b9      	ldr	r1, [r7, #8]
 801c99a:	683b      	ldr	r3, [r7, #0]
 801c99c:	687a      	ldr	r2, [r7, #4]
 801c99e:	f004 fac3 	bl	8020f28 <sqisign_gen_quat_lattice_alg_elem_mul>
    product->parent_order = lideal->parent_order;
 801c9a2:	68bb      	ldr	r3, [r7, #8]
 801c9a4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    quat_alg_norm(&norm, &norm_d, alpha, alg);
 801c9ae:	f107 0110 	add.w	r1, r7, #16
 801c9b2:	f107 001c 	add.w	r0, r7, #28
 801c9b6:	683b      	ldr	r3, [r7, #0]
 801c9b8:	687a      	ldr	r2, [r7, #4]
 801c9ba:	f7e4 fd4f 	bl	800145c <sqisign_gen_quat_alg_norm>
    ibz_mul(&(product->norm), &(lideal->norm), &norm);
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 801c9c4:	68bb      	ldr	r3, [r7, #8]
 801c9c6:	33cc      	adds	r3, #204	@ 0xcc
 801c9c8:	f107 021c 	add.w	r2, r7, #28
 801c9cc:	4619      	mov	r1, r3
 801c9ce:	f000 fb4e 	bl	801d06e <sqisign_gen_ibz_mul>
    assert(ibz_divides(&(product->norm), &norm_d));
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	33cc      	adds	r3, #204	@ 0xcc
 801c9d6:	f107 0210 	add.w	r2, r7, #16
 801c9da:	4611      	mov	r1, r2
 801c9dc:	4618      	mov	r0, r3
 801c9de:	f000 fbbd 	bl	801d15c <sqisign_gen_ibz_divides>
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d105      	bne.n	801c9f4 <sqisign_gen_quat_lideal_mul+0xa0>
 801c9e8:	4b18      	ldr	r3, [pc, #96]	@ (801ca4c <sqisign_gen_quat_lideal_mul+0xf8>)
 801c9ea:	4a16      	ldr	r2, [pc, #88]	@ (801ca44 <sqisign_gen_quat_lideal_mul+0xf0>)
 801c9ec:	21a4      	movs	r1, #164	@ 0xa4
 801c9ee:	4816      	ldr	r0, [pc, #88]	@ (801ca48 <sqisign_gen_quat_lideal_mul+0xf4>)
 801c9f0:	f018 fc22 	bl	8035238 <__assert_func>
    ibz_div(&(product->norm), &norm, &(product->norm), &norm_d);
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 801ca00:	f107 0310 	add.w	r3, r7, #16
 801ca04:	f107 011c 	add.w	r1, r7, #28
 801ca08:	f000 fb5a 	bl	801d0c0 <sqisign_gen_ibz_div>
    assert(quat_lideal_norm_verify(lideal));
 801ca0c:	68b8      	ldr	r0, [r7, #8]
 801ca0e:	f7ff fcf9 	bl	801c404 <quat_lideal_norm_verify>
 801ca12:	4603      	mov	r3, r0
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d105      	bne.n	801ca24 <sqisign_gen_quat_lideal_mul+0xd0>
 801ca18:	4b0d      	ldr	r3, [pc, #52]	@ (801ca50 <sqisign_gen_quat_lideal_mul+0xfc>)
 801ca1a:	4a0a      	ldr	r2, [pc, #40]	@ (801ca44 <sqisign_gen_quat_lideal_mul+0xf0>)
 801ca1c:	21a6      	movs	r1, #166	@ 0xa6
 801ca1e:	480a      	ldr	r0, [pc, #40]	@ (801ca48 <sqisign_gen_quat_lideal_mul+0xf4>)
 801ca20:	f018 fc0a 	bl	8035238 <__assert_func>
    ibz_finalize(&norm_d);
 801ca24:	f107 0310 	add.w	r3, r7, #16
 801ca28:	4618      	mov	r0, r3
 801ca2a:	f000 faf7 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm);
 801ca2e:	f107 031c 	add.w	r3, r7, #28
 801ca32:	4618      	mov	r0, r3
 801ca34:	f000 faf2 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801ca38:	bf00      	nop
 801ca3a:	3728      	adds	r7, #40	@ 0x28
 801ca3c:	46bd      	mov	sp, r7
 801ca3e:	bd80      	pop	{r7, pc}
 801ca40:	08037ad8 	.word	0x08037ad8
 801ca44:	0803b810 	.word	0x0803b810
 801ca48:	08037a20 	.word	0x08037a20
 801ca4c:	08037b0c 	.word	0x08037b0c
 801ca50:	08037b34 	.word	0x08037b34

0801ca54 <sqisign_gen_quat_lideal_inter>:
void
quat_lideal_inter(quat_left_ideal_t *inter,
                  const quat_left_ideal_t *I1,
                  const quat_left_ideal_t *I2,
                  const quat_alg_t *alg)
{
 801ca54:	b580      	push	{r7, lr}
 801ca56:	b084      	sub	sp, #16
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	60f8      	str	r0, [r7, #12]
 801ca5c:	60b9      	str	r1, [r7, #8]
 801ca5e:	607a      	str	r2, [r7, #4]
 801ca60:	603b      	str	r3, [r7, #0]
    assert(I1->parent_order == I2->parent_order);
 801ca62:	68bb      	ldr	r3, [r7, #8]
 801ca64:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ca6e:	429a      	cmp	r2, r3
 801ca70:	d005      	beq.n	801ca7e <sqisign_gen_quat_lideal_inter+0x2a>
 801ca72:	4b14      	ldr	r3, [pc, #80]	@ (801cac4 <sqisign_gen_quat_lideal_inter+0x70>)
 801ca74:	4a14      	ldr	r2, [pc, #80]	@ (801cac8 <sqisign_gen_quat_lideal_inter+0x74>)
 801ca76:	21bb      	movs	r1, #187	@ 0xbb
 801ca78:	4814      	ldr	r0, [pc, #80]	@ (801cacc <sqisign_gen_quat_lideal_inter+0x78>)
 801ca7a:	f018 fbdd 	bl	8035238 <__assert_func>
    assert(quat_order_is_maximal((I2->parent_order), alg));
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801ca84:	6839      	ldr	r1, [r7, #0]
 801ca86:	4618      	mov	r0, r3
 801ca88:	f000 fa94 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801ca8c:	4603      	mov	r3, r0
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d105      	bne.n	801ca9e <sqisign_gen_quat_lideal_inter+0x4a>
 801ca92:	4b0f      	ldr	r3, [pc, #60]	@ (801cad0 <sqisign_gen_quat_lideal_inter+0x7c>)
 801ca94:	4a0c      	ldr	r2, [pc, #48]	@ (801cac8 <sqisign_gen_quat_lideal_inter+0x74>)
 801ca96:	21bc      	movs	r1, #188	@ 0xbc
 801ca98:	480c      	ldr	r0, [pc, #48]	@ (801cacc <sqisign_gen_quat_lideal_inter+0x78>)
 801ca9a:	f018 fbcd 	bl	8035238 <__assert_func>
    quat_lattice_intersect(&inter->lattice, &I1->lattice, &I2->lattice);
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	68b9      	ldr	r1, [r7, #8]
 801caa2:	687a      	ldr	r2, [r7, #4]
 801caa4:	4618      	mov	r0, r3
 801caa6:	f004 f94b 	bl	8020d40 <sqisign_gen_quat_lattice_intersect>
    inter->parent_order = I1->parent_order;
 801caaa:	68bb      	ldr	r3, [r7, #8]
 801caac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    quat_lideal_norm(inter);
 801cab6:	68f8      	ldr	r0, [r7, #12]
 801cab8:	f7ff fc78 	bl	801c3ac <sqisign_gen_quat_lideal_norm>
}
 801cabc:	bf00      	nop
 801cabe:	3710      	adds	r7, #16
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bd80      	pop	{r7, pc}
 801cac4:	08037b54 	.word	0x08037b54
 801cac8:	0803b82c 	.word	0x0803b82c
 801cacc:	08037a20 	.word	0x08037a20
 801cad0:	08037b7c 	.word	0x08037b7c

0801cad4 <sqisign_gen_quat_lideal_inverse_lattice_without_hnf>:
           quat_lattice_equal(&I1->lattice, &I2->lattice);
}

void
quat_lideal_inverse_lattice_without_hnf(quat_lattice_t *inv, const quat_left_ideal_t *lideal, const quat_alg_t *alg)
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b084      	sub	sp, #16
 801cad8:	af00      	add	r7, sp, #0
 801cada:	60f8      	str	r0, [r7, #12]
 801cadc:	60b9      	str	r1, [r7, #8]
 801cade:	607a      	str	r2, [r7, #4]
    assert(quat_order_is_maximal((lideal->parent_order), alg));
 801cae0:	68bb      	ldr	r3, [r7, #8]
 801cae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801cae6:	6879      	ldr	r1, [r7, #4]
 801cae8:	4618      	mov	r0, r3
 801caea:	f000 fa63 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801caee:	4603      	mov	r3, r0
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d105      	bne.n	801cb00 <sqisign_gen_quat_lideal_inverse_lattice_without_hnf+0x2c>
 801caf4:	4b0a      	ldr	r3, [pc, #40]	@ (801cb20 <sqisign_gen_quat_lideal_inverse_lattice_without_hnf+0x4c>)
 801caf6:	4a0b      	ldr	r2, [pc, #44]	@ (801cb24 <sqisign_gen_quat_lideal_inverse_lattice_without_hnf+0x50>)
 801caf8:	21ce      	movs	r1, #206	@ 0xce
 801cafa:	480b      	ldr	r0, [pc, #44]	@ (801cb28 <sqisign_gen_quat_lideal_inverse_lattice_without_hnf+0x54>)
 801cafc:	f018 fb9c 	bl	8035238 <__assert_func>
    quat_lattice_conjugate_without_hnf(inv, &(lideal->lattice));
 801cb00:	68bb      	ldr	r3, [r7, #8]
 801cb02:	4619      	mov	r1, r3
 801cb04:	68f8      	ldr	r0, [r7, #12]
 801cb06:	f003 ff0e 	bl	8020926 <sqisign_gen_quat_lattice_conjugate_without_hnf>
    ibz_mul(&(inv->denom), &(inv->denom), &(lideal->norm));
 801cb0a:	68f8      	ldr	r0, [r7, #12]
 801cb0c:	68f9      	ldr	r1, [r7, #12]
 801cb0e:	68bb      	ldr	r3, [r7, #8]
 801cb10:	33cc      	adds	r3, #204	@ 0xcc
 801cb12:	461a      	mov	r2, r3
 801cb14:	f000 faab 	bl	801d06e <sqisign_gen_ibz_mul>
}
 801cb18:	bf00      	nop
 801cb1a:	3710      	adds	r7, #16
 801cb1c:	46bd      	mov	sp, r7
 801cb1e:	bd80      	pop	{r7, pc}
 801cb20:	08037ad8 	.word	0x08037ad8
 801cb24:	0803b84c 	.word	0x0803b84c
 801cb28:	08037a20 	.word	0x08037a20

0801cb2c <sqisign_gen_quat_lideal_right_transporter>:
void
quat_lideal_right_transporter(quat_lattice_t *trans,
                              const quat_left_ideal_t *lideal1,
                              const quat_left_ideal_t *lideal2,
                              const quat_alg_t *alg)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b0b8      	sub	sp, #224	@ 0xe0
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	60f8      	str	r0, [r7, #12]
 801cb34:	60b9      	str	r1, [r7, #8]
 801cb36:	607a      	str	r2, [r7, #4]
 801cb38:	603b      	str	r3, [r7, #0]
    assert(quat_order_is_maximal((lideal1->parent_order), alg));
 801cb3a:	68bb      	ldr	r3, [r7, #8]
 801cb3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801cb40:	6839      	ldr	r1, [r7, #0]
 801cb42:	4618      	mov	r0, r3
 801cb44:	f000 fa36 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801cb48:	4603      	mov	r3, r0
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d105      	bne.n	801cb5a <sqisign_gen_quat_lideal_right_transporter+0x2e>
 801cb4e:	4b20      	ldr	r3, [pc, #128]	@ (801cbd0 <sqisign_gen_quat_lideal_right_transporter+0xa4>)
 801cb50:	4a20      	ldr	r2, [pc, #128]	@ (801cbd4 <sqisign_gen_quat_lideal_right_transporter+0xa8>)
 801cb52:	21db      	movs	r1, #219	@ 0xdb
 801cb54:	4820      	ldr	r0, [pc, #128]	@ (801cbd8 <sqisign_gen_quat_lideal_right_transporter+0xac>)
 801cb56:	f018 fb6f 	bl	8035238 <__assert_func>
    assert(quat_order_is_maximal((lideal2->parent_order), alg));
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801cb60:	6839      	ldr	r1, [r7, #0]
 801cb62:	4618      	mov	r0, r3
 801cb64:	f000 fa26 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801cb68:	4603      	mov	r3, r0
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d105      	bne.n	801cb7a <sqisign_gen_quat_lideal_right_transporter+0x4e>
 801cb6e:	4b1b      	ldr	r3, [pc, #108]	@ (801cbdc <sqisign_gen_quat_lideal_right_transporter+0xb0>)
 801cb70:	4a18      	ldr	r2, [pc, #96]	@ (801cbd4 <sqisign_gen_quat_lideal_right_transporter+0xa8>)
 801cb72:	21dc      	movs	r1, #220	@ 0xdc
 801cb74:	4818      	ldr	r0, [pc, #96]	@ (801cbd8 <sqisign_gen_quat_lideal_right_transporter+0xac>)
 801cb76:	f018 fb5f 	bl	8035238 <__assert_func>
    assert(lideal1->parent_order == lideal2->parent_order);
 801cb7a:	68bb      	ldr	r3, [r7, #8]
 801cb7c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801cb86:	429a      	cmp	r2, r3
 801cb88:	d005      	beq.n	801cb96 <sqisign_gen_quat_lideal_right_transporter+0x6a>
 801cb8a:	4b15      	ldr	r3, [pc, #84]	@ (801cbe0 <sqisign_gen_quat_lideal_right_transporter+0xb4>)
 801cb8c:	4a11      	ldr	r2, [pc, #68]	@ (801cbd4 <sqisign_gen_quat_lideal_right_transporter+0xa8>)
 801cb8e:	21dd      	movs	r1, #221	@ 0xdd
 801cb90:	4811      	ldr	r0, [pc, #68]	@ (801cbd8 <sqisign_gen_quat_lideal_right_transporter+0xac>)
 801cb92:	f018 fb51 	bl	8035238 <__assert_func>
    quat_lattice_t inv;
    quat_lattice_init(&inv);
 801cb96:	f107 0314 	add.w	r3, r7, #20
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	f7f2 fa21 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    quat_lideal_inverse_lattice_without_hnf(&inv, lideal1, alg);
 801cba0:	f107 0314 	add.w	r3, r7, #20
 801cba4:	683a      	ldr	r2, [r7, #0]
 801cba6:	68b9      	ldr	r1, [r7, #8]
 801cba8:	4618      	mov	r0, r3
 801cbaa:	f7ff ff93 	bl	801cad4 <sqisign_gen_quat_lideal_inverse_lattice_without_hnf>
    quat_lattice_mul(trans, &inv, &(lideal2->lattice), alg);
 801cbae:	687a      	ldr	r2, [r7, #4]
 801cbb0:	f107 0114 	add.w	r1, r7, #20
 801cbb4:	683b      	ldr	r3, [r7, #0]
 801cbb6:	68f8      	ldr	r0, [r7, #12]
 801cbb8:	f004 f9d6 	bl	8020f68 <sqisign_gen_quat_lattice_mul>
    quat_lattice_finalize(&inv);
 801cbbc:	f107 0314 	add.w	r3, r7, #20
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	f7f2 fa24 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
}
 801cbc6:	bf00      	nop
 801cbc8:	37e0      	adds	r7, #224	@ 0xe0
 801cbca:	46bd      	mov	sp, r7
 801cbcc:	bd80      	pop	{r7, pc}
 801cbce:	bf00      	nop
 801cbd0:	08037bdc 	.word	0x08037bdc
 801cbd4:	0803b880 	.word	0x0803b880
 801cbd8:	08037a20 	.word	0x08037a20
 801cbdc:	08037c10 	.word	0x08037c10
 801cbe0:	08037c44 	.word	0x08037c44

0801cbe4 <sqisign_gen_quat_lideal_right_order>:

void
quat_lideal_right_order(quat_lattice_t *order, const quat_left_ideal_t *lideal, const quat_alg_t *alg)
{
 801cbe4:	b580      	push	{r7, lr}
 801cbe6:	b084      	sub	sp, #16
 801cbe8:	af00      	add	r7, sp, #0
 801cbea:	60f8      	str	r0, [r7, #12]
 801cbec:	60b9      	str	r1, [r7, #8]
 801cbee:	607a      	str	r2, [r7, #4]
    assert(quat_order_is_maximal((lideal->parent_order), alg));
 801cbf0:	68bb      	ldr	r3, [r7, #8]
 801cbf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801cbf6:	6879      	ldr	r1, [r7, #4]
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	f000 f9db 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 801cbfe:	4603      	mov	r3, r0
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d105      	bne.n	801cc10 <sqisign_gen_quat_lideal_right_order+0x2c>
 801cc04:	4b07      	ldr	r3, [pc, #28]	@ (801cc24 <sqisign_gen_quat_lideal_right_order+0x40>)
 801cc06:	4a08      	ldr	r2, [pc, #32]	@ (801cc28 <sqisign_gen_quat_lideal_right_order+0x44>)
 801cc08:	21e8      	movs	r1, #232	@ 0xe8
 801cc0a:	4808      	ldr	r0, [pc, #32]	@ (801cc2c <sqisign_gen_quat_lideal_right_order+0x48>)
 801cc0c:	f018 fb14 	bl	8035238 <__assert_func>
    quat_lideal_right_transporter(order, lideal, lideal, alg);
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	68ba      	ldr	r2, [r7, #8]
 801cc14:	68b9      	ldr	r1, [r7, #8]
 801cc16:	68f8      	ldr	r0, [r7, #12]
 801cc18:	f7ff ff88 	bl	801cb2c <sqisign_gen_quat_lideal_right_transporter>
}
 801cc1c:	bf00      	nop
 801cc1e:	3710      	adds	r7, #16
 801cc20:	46bd      	mov	sp, r7
 801cc22:	bd80      	pop	{r7, pc}
 801cc24:	08037ad8 	.word	0x08037ad8
 801cc28:	0803b8ac 	.word	0x0803b8ac
 801cc2c:	08037a20 	.word	0x08037a20

0801cc30 <sqisign_gen_quat_lideal_class_gram>:

void
quat_lideal_class_gram(ibz_mat_4x4_t *G, const quat_left_ideal_t *lideal, const quat_alg_t *alg)
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b08e      	sub	sp, #56	@ 0x38
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	60f8      	str	r0, [r7, #12]
 801cc38:	60b9      	str	r1, [r7, #8]
 801cc3a:	607a      	str	r2, [r7, #4]
    quat_lattice_gram(G, &(lideal->lattice), alg);
 801cc3c:	68bb      	ldr	r3, [r7, #8]
 801cc3e:	687a      	ldr	r2, [r7, #4]
 801cc40:	4619      	mov	r1, r3
 801cc42:	68f8      	ldr	r0, [r7, #12]
 801cc44:	f004 fd3e 	bl	80216c4 <sqisign_gen_quat_lattice_gram>

    // divide by norm · denominator²
    ibz_t divisor, rmd;
    ibz_init(&divisor);
 801cc48:	f107 031c 	add.w	r3, r7, #28
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	f000 f9da 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&rmd);
 801cc52:	f107 0310 	add.w	r3, r7, #16
 801cc56:	4618      	mov	r0, r3
 801cc58:	f000 f9d5 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_mul(&divisor, &(lideal->lattice.denom), &(lideal->lattice.denom));
 801cc5c:	68b9      	ldr	r1, [r7, #8]
 801cc5e:	68ba      	ldr	r2, [r7, #8]
 801cc60:	f107 031c 	add.w	r3, r7, #28
 801cc64:	4618      	mov	r0, r3
 801cc66:	f000 fa02 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&divisor, &divisor, &(lideal->norm));
 801cc6a:	68bb      	ldr	r3, [r7, #8]
 801cc6c:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 801cc70:	f107 011c 	add.w	r1, r7, #28
 801cc74:	f107 031c 	add.w	r3, r7, #28
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f000 f9f8 	bl	801d06e <sqisign_gen_ibz_mul>

    for (int i = 0; i < 4; i++) {
 801cc7e:	2300      	movs	r3, #0
 801cc80:	637b      	str	r3, [r7, #52]	@ 0x34
 801cc82:	e03c      	b.n	801ccfe <sqisign_gen_quat_lideal_class_gram+0xce>
        for (int j = 0; j <= i; j++) {
 801cc84:	2300      	movs	r3, #0
 801cc86:	633b      	str	r3, [r7, #48]	@ 0x30
 801cc88:	e032      	b.n	801ccf0 <sqisign_gen_quat_lideal_class_gram+0xc0>
            ibz_div(&(*G)[i][j], &rmd, &(*G)[i][j], &divisor);
 801cc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc8c:	461a      	mov	r2, r3
 801cc8e:	0052      	lsls	r2, r2, #1
 801cc90:	441a      	add	r2, r3
 801cc92:	0093      	lsls	r3, r2, #2
 801cc94:	461a      	mov	r2, r3
 801cc96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cc98:	460b      	mov	r3, r1
 801cc9a:	005b      	lsls	r3, r3, #1
 801cc9c:	440b      	add	r3, r1
 801cc9e:	011b      	lsls	r3, r3, #4
 801cca0:	4413      	add	r3, r2
 801cca2:	68fa      	ldr	r2, [r7, #12]
 801cca4:	18d0      	adds	r0, r2, r3
 801cca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cca8:	461a      	mov	r2, r3
 801ccaa:	0052      	lsls	r2, r2, #1
 801ccac:	441a      	add	r2, r3
 801ccae:	0093      	lsls	r3, r2, #2
 801ccb0:	461a      	mov	r2, r3
 801ccb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ccb4:	460b      	mov	r3, r1
 801ccb6:	005b      	lsls	r3, r3, #1
 801ccb8:	440b      	add	r3, r1
 801ccba:	011b      	lsls	r3, r3, #4
 801ccbc:	4413      	add	r3, r2
 801ccbe:	68fa      	ldr	r2, [r7, #12]
 801ccc0:	441a      	add	r2, r3
 801ccc2:	f107 031c 	add.w	r3, r7, #28
 801ccc6:	f107 0110 	add.w	r1, r7, #16
 801ccca:	f000 f9f9 	bl	801d0c0 <sqisign_gen_ibz_div>
            assert(ibz_is_zero(&rmd));
 801ccce:	f107 0310 	add.w	r3, r7, #16
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	f000 fa7b 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801ccd8:	4603      	mov	r3, r0
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d105      	bne.n	801ccea <sqisign_gen_quat_lideal_class_gram+0xba>
 801ccde:	4b29      	ldr	r3, [pc, #164]	@ (801cd84 <sqisign_gen_quat_lideal_class_gram+0x154>)
 801cce0:	4a29      	ldr	r2, [pc, #164]	@ (801cd88 <sqisign_gen_quat_lideal_class_gram+0x158>)
 801cce2:	21fc      	movs	r1, #252	@ 0xfc
 801cce4:	4829      	ldr	r0, [pc, #164]	@ (801cd8c <sqisign_gen_quat_lideal_class_gram+0x15c>)
 801cce6:	f018 faa7 	bl	8035238 <__assert_func>
        for (int j = 0; j <= i; j++) {
 801ccea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ccec:	3301      	adds	r3, #1
 801ccee:	633b      	str	r3, [r7, #48]	@ 0x30
 801ccf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ccf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccf4:	429a      	cmp	r2, r3
 801ccf6:	ddc8      	ble.n	801cc8a <sqisign_gen_quat_lideal_class_gram+0x5a>
    for (int i = 0; i < 4; i++) {
 801ccf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccfa:	3301      	adds	r3, #1
 801ccfc:	637b      	str	r3, [r7, #52]	@ 0x34
 801ccfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cd00:	2b03      	cmp	r3, #3
 801cd02:	ddbf      	ble.n	801cc84 <sqisign_gen_quat_lideal_class_gram+0x54>
        }
    }
    for (int i = 0; i < 4; i++) {
 801cd04:	2300      	movs	r3, #0
 801cd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd08:	e02b      	b.n	801cd62 <sqisign_gen_quat_lideal_class_gram+0x132>
        for (int j = 0; j <= i - 1; j++) {
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cd0e:	e021      	b.n	801cd54 <sqisign_gen_quat_lideal_class_gram+0x124>
            ibz_copy(&(*G)[j][i], &(*G)[i][j]);
 801cd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd12:	461a      	mov	r2, r3
 801cd14:	0052      	lsls	r2, r2, #1
 801cd16:	441a      	add	r2, r3
 801cd18:	0093      	lsls	r3, r2, #2
 801cd1a:	461a      	mov	r2, r3
 801cd1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cd1e:	460b      	mov	r3, r1
 801cd20:	005b      	lsls	r3, r3, #1
 801cd22:	440b      	add	r3, r1
 801cd24:	011b      	lsls	r3, r3, #4
 801cd26:	4413      	add	r3, r2
 801cd28:	68fa      	ldr	r2, [r7, #12]
 801cd2a:	18d0      	adds	r0, r2, r3
 801cd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd2e:	461a      	mov	r2, r3
 801cd30:	0052      	lsls	r2, r2, #1
 801cd32:	441a      	add	r2, r3
 801cd34:	0093      	lsls	r3, r2, #2
 801cd36:	461a      	mov	r2, r3
 801cd38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cd3a:	460b      	mov	r3, r1
 801cd3c:	005b      	lsls	r3, r3, #1
 801cd3e:	440b      	add	r3, r1
 801cd40:	011b      	lsls	r3, r3, #4
 801cd42:	4413      	add	r3, r2
 801cd44:	68fa      	ldr	r2, [r7, #12]
 801cd46:	4413      	add	r3, r2
 801cd48:	4619      	mov	r1, r3
 801cd4a:	f000 fa97 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j <= i - 1; j++) {
 801cd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd50:	3301      	adds	r3, #1
 801cd52:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cd54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd58:	429a      	cmp	r2, r3
 801cd5a:	dcd9      	bgt.n	801cd10 <sqisign_gen_quat_lideal_class_gram+0xe0>
    for (int i = 0; i < 4; i++) {
 801cd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd5e:	3301      	adds	r3, #1
 801cd60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd64:	2b03      	cmp	r3, #3
 801cd66:	ddd0      	ble.n	801cd0a <sqisign_gen_quat_lideal_class_gram+0xda>
        }
    }

    ibz_finalize(&rmd);
 801cd68:	f107 0310 	add.w	r3, r7, #16
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	f000 f955 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&divisor);
 801cd72:	f107 031c 	add.w	r3, r7, #28
 801cd76:	4618      	mov	r0, r3
 801cd78:	f000 f950 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 801cd7c:	bf00      	nop
 801cd7e:	3738      	adds	r7, #56	@ 0x38
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bd80      	pop	{r7, pc}
 801cd84:	08037c74 	.word	0x08037c74
 801cd88:	0803b8d0 	.word	0x0803b8d0
 801cd8c:	08037a20 	.word	0x08037a20

0801cd90 <sqisign_gen_quat_lideal_conjugate_without_hnf>:
void
quat_lideal_conjugate_without_hnf(quat_left_ideal_t *conj,
                                  quat_lattice_t *new_parent_order,
                                  const quat_left_ideal_t *lideal,
                                  const quat_alg_t *alg)
{
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b084      	sub	sp, #16
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	60f8      	str	r0, [r7, #12]
 801cd98:	60b9      	str	r1, [r7, #8]
 801cd9a:	607a      	str	r2, [r7, #4]
 801cd9c:	603b      	str	r3, [r7, #0]
    quat_lideal_right_order(new_parent_order, lideal, alg);
 801cd9e:	683a      	ldr	r2, [r7, #0]
 801cda0:	6879      	ldr	r1, [r7, #4]
 801cda2:	68b8      	ldr	r0, [r7, #8]
 801cda4:	f7ff ff1e 	bl	801cbe4 <sqisign_gen_quat_lideal_right_order>
    quat_lattice_conjugate_without_hnf(&(conj->lattice), &(lideal->lattice));
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	687a      	ldr	r2, [r7, #4]
 801cdac:	4611      	mov	r1, r2
 801cdae:	4618      	mov	r0, r3
 801cdb0:	f003 fdb9 	bl	8020926 <sqisign_gen_quat_lattice_conjugate_without_hnf>
    conj->parent_order = new_parent_order;
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	68ba      	ldr	r2, [r7, #8]
 801cdb8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    ibz_copy(&(conj->norm), &(lideal->norm));
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	33cc      	adds	r3, #204	@ 0xcc
 801cdc6:	4619      	mov	r1, r3
 801cdc8:	4610      	mov	r0, r2
 801cdca:	f000 fa57 	bl	801d27c <sqisign_gen_ibz_copy>
}
 801cdce:	bf00      	nop
 801cdd0:	3710      	adds	r7, #16
 801cdd2:	46bd      	mov	sp, r7
 801cdd4:	bd80      	pop	{r7, pc}
	...

0801cdd8 <sqisign_gen_quat_order_discriminant>:

int
quat_order_discriminant(ibz_t *disc, const quat_lattice_t *order, const quat_alg_t *alg)
{
 801cdd8:	b580      	push	{r7, lr}
 801cdda:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
 801cdde:	af00      	add	r7, sp, #0
 801cde0:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801cde4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 801cde8:	6018      	str	r0, [r3, #0]
 801cdea:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801cdee:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 801cdf2:	6019      	str	r1, [r3, #0]
 801cdf4:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801cdf8:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801cdfc:	601a      	str	r2, [r3, #0]
    int ok = 0;
 801cdfe:	2300      	movs	r3, #0
 801ce00:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
    ibz_t det, sqr, div;
    ibz_mat_4x4_t transposed, norm, prod;
    ibz_init(&det);
 801ce04:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f000 f8fc 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&sqr);
 801ce0e:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 801ce12:	4618      	mov	r0, r3
 801ce14:	f000 f8f7 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&div);
 801ce18:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f000 f8f2 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mat_4x4_init(&transposed);
 801ce22:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ce26:	4618      	mov	r0, r3
 801ce28:	f7f2 f883 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_init(&norm);
 801ce2c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801ce30:	4618      	mov	r0, r3
 801ce32:	f7f2 f87e 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_init(&prod);
 801ce36:	f107 0310 	add.w	r3, r7, #16
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	f7f2 f879 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_transpose(&transposed, &(order->basis));
 801ce40:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801ce44:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	f103 020c 	add.w	r2, r3, #12
 801ce4e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ce52:	4611      	mov	r1, r2
 801ce54:	4618      	mov	r0, r3
 801ce56:	f7ed f9df 	bl	800a218 <sqisign_gen_ibz_mat_4x4_transpose>
    // multiply gram matrix by 2 because of reduced trace
    ibz_mat_4x4_identity(&norm);
 801ce5a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f7ed fa31 	bl	800a2c6 <sqisign_gen_ibz_mat_4x4_identity>
    ibz_copy(&(norm[2][2]), &(alg->p));
 801ce64:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801ce68:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801ce6c:	681a      	ldr	r2, [r3, #0]
 801ce6e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801ce72:	3378      	adds	r3, #120	@ 0x78
 801ce74:	4611      	mov	r1, r2
 801ce76:	4618      	mov	r0, r3
 801ce78:	f000 fa00 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&(norm[3][3]), &(alg->p));
 801ce7c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801ce80:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801ce84:	681a      	ldr	r2, [r3, #0]
 801ce86:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801ce8a:	33b4      	adds	r3, #180	@ 0xb4
 801ce8c:	4611      	mov	r1, r2
 801ce8e:	4618      	mov	r0, r3
 801ce90:	f000 f9f4 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_mat_4x4_scalar_mul(&norm, &ibz_const_two, &norm);
 801ce94:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801ce98:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801ce9c:	4944      	ldr	r1, [pc, #272]	@ (801cfb0 <sqisign_gen_quat_order_discriminant+0x1d8>)
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7ed fa49 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
    ibz_mat_4x4_mul(&prod, &transposed, &norm);
 801cea4:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801cea8:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 801ceac:	f107 0310 	add.w	r3, r7, #16
 801ceb0:	4618      	mov	r0, r3
 801ceb2:	f7ec fed5 	bl	8009c60 <sqisign_gen_ibz_mat_4x4_mul>
    ibz_mat_4x4_mul(&prod, &prod, &(order->basis));
 801ceb6:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801ceba:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	f103 020c 	add.w	r2, r3, #12
 801cec4:	f107 0110 	add.w	r1, r7, #16
 801cec8:	f107 0310 	add.w	r3, r7, #16
 801cecc:	4618      	mov	r0, r3
 801cece:	f7ec fec7 	bl	8009c60 <sqisign_gen_ibz_mat_4x4_mul>
    ibz_mat_4x4_inv_with_det_as_denom(NULL, &det, &prod);
 801ced2:	f107 0210 	add.w	r2, r7, #16
 801ced6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801ceda:	4619      	mov	r1, r3
 801cedc:	2000      	movs	r0, #0
 801cede:	f7ed fb91 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    ibz_mul(&div, &(order->denom), &(order->denom));
 801cee2:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801cee6:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 801ceea:	6819      	ldr	r1, [r3, #0]
 801ceec:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801cef0:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 801cef4:	681a      	ldr	r2, [r3, #0]
 801cef6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801cefa:	4618      	mov	r0, r3
 801cefc:	f000 f8b7 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&div, &div, &div);
 801cf00:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 801cf04:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 801cf08:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801cf0c:	4618      	mov	r0, r3
 801cf0e:	f000 f8ae 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&div, &div, &div);
 801cf12:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 801cf16:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 801cf1a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f000 f8a5 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_div(&sqr, &div, &det, &div);
 801cf24:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801cf28:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 801cf2c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 801cf30:	f507 7017 	add.w	r0, r7, #604	@ 0x25c
 801cf34:	f000 f8c4 	bl	801d0c0 <sqisign_gen_ibz_div>
    ok = ibz_is_zero(&div);
 801cf38:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f000 f946 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801cf42:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
    ok = ok & ibz_sqrt(disc, &sqr);
 801cf46:	f507 7217 	add.w	r2, r7, #604	@ 0x25c
 801cf4a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801cf4e:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 801cf52:	4611      	mov	r1, r2
 801cf54:	6818      	ldr	r0, [r3, #0]
 801cf56:	f000 fb6f 	bl	801d638 <sqisign_gen_ibz_sqrt>
 801cf5a:	4602      	mov	r2, r0
 801cf5c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801cf60:	4013      	ands	r3, r2
 801cf62:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
    ibz_finalize(&det);
 801cf66:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f000 f856 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&div);
 801cf70:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801cf74:	4618      	mov	r0, r3
 801cf76:	f000 f851 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&sqr);
 801cf7a:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 801cf7e:	4618      	mov	r0, r3
 801cf80:	f000 f84c 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_mat_4x4_finalize(&transposed);
 801cf84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7f1 fffe 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_mat_4x4_finalize(&norm);
 801cf8e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801cf92:	4618      	mov	r0, r3
 801cf94:	f7f1 fff9 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_mat_4x4_finalize(&prod);
 801cf98:	f107 0310 	add.w	r3, r7, #16
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f7f1 fff4 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    return (ok);
 801cfa2:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
}
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f507 771e 	add.w	r7, r7, #632	@ 0x278
 801cfac:	46bd      	mov	sp, r7
 801cfae:	bd80      	pop	{r7, pc}
 801cfb0:	0803b90c 	.word	0x0803b90c

0801cfb4 <sqisign_gen_quat_order_is_maximal>:

int
quat_order_is_maximal(const quat_lattice_t *order, const quat_alg_t *alg)
{
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b086      	sub	sp, #24
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	6078      	str	r0, [r7, #4]
 801cfbc:	6039      	str	r1, [r7, #0]
    int res;
    ibz_t disc;
    ibz_init(&disc);
 801cfbe:	f107 0308 	add.w	r3, r7, #8
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	f000 f81f 	bl	801d006 <sqisign_gen_ibz_init>
    quat_order_discriminant(&disc, order, alg);
 801cfc8:	f107 0308 	add.w	r3, r7, #8
 801cfcc:	683a      	ldr	r2, [r7, #0]
 801cfce:	6879      	ldr	r1, [r7, #4]
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7ff ff01 	bl	801cdd8 <sqisign_gen_quat_order_discriminant>
    res = (ibz_cmp(&disc, &(alg->p)) == 0);
 801cfd6:	683a      	ldr	r2, [r7, #0]
 801cfd8:	f107 0308 	add.w	r3, r7, #8
 801cfdc:	4611      	mov	r1, r2
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f000 f8e6 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	bf0c      	ite	eq
 801cfea:	2301      	moveq	r3, #1
 801cfec:	2300      	movne	r3, #0
 801cfee:	b2db      	uxtb	r3, r3
 801cff0:	617b      	str	r3, [r7, #20]
    ibz_finalize(&disc);
 801cff2:	f107 0308 	add.w	r3, r7, #8
 801cff6:	4618      	mov	r0, r3
 801cff8:	f000 f810 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (res);
 801cffc:	697b      	ldr	r3, [r7, #20]
}
 801cffe:	4618      	mov	r0, r3
 801d000:	3718      	adds	r7, #24
 801d002:	46bd      	mov	sp, r7
 801d004:	bd80      	pop	{r7, pc}

0801d006 <sqisign_gen_ibz_init>:
     }
};

void
ibz_init(ibz_t *x)
{
 801d006:	b580      	push	{r7, lr}
 801d008:	b082      	sub	sp, #8
 801d00a:	af00      	add	r7, sp, #0
 801d00c:	6078      	str	r0, [r7, #4]
    mpz_init(*x);
 801d00e:	6878      	ldr	r0, [r7, #4]
 801d010:	f007 fa4e 	bl	80244b0 <mpz_init>
}
 801d014:	bf00      	nop
 801d016:	3708      	adds	r7, #8
 801d018:	46bd      	mov	sp, r7
 801d01a:	bd80      	pop	{r7, pc}

0801d01c <sqisign_gen_ibz_finalize>:

void
ibz_finalize(ibz_t *x)
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b082      	sub	sp, #8
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
    mpz_clear(*x);
 801d024:	6878      	ldr	r0, [r7, #4]
 801d026:	f007 fa7c 	bl	8024522 <mpz_clear>
}
 801d02a:	bf00      	nop
 801d02c:	3708      	adds	r7, #8
 801d02e:	46bd      	mov	sp, r7
 801d030:	bd80      	pop	{r7, pc}

0801d032 <sqisign_gen_ibz_add>:

void
ibz_add(ibz_t *sum, const ibz_t *a, const ibz_t *b)
{
 801d032:	b580      	push	{r7, lr}
 801d034:	b084      	sub	sp, #16
 801d036:	af00      	add	r7, sp, #0
 801d038:	60f8      	str	r0, [r7, #12]
 801d03a:	60b9      	str	r1, [r7, #8]
 801d03c:	607a      	str	r2, [r7, #4]
    ibz_init(&a_cp);
    ibz_init(&b_cp);
    ibz_copy(&a_cp, a);
    ibz_copy(&b_cp, b);
#endif
    mpz_add(*sum, *a, *b);
 801d03e:	687a      	ldr	r2, [r7, #4]
 801d040:	68b9      	ldr	r1, [r7, #8]
 801d042:	68f8      	ldr	r0, [r7, #12]
 801d044:	f007 ffa6 	bl	8024f94 <mpz_add>
#ifdef DEBUG_VERBOSE
    DEBUG_STR_FUN_3("ibz_add", sum, &a_cp, &b_cp);
    ibz_finalize(&a_cp);
    ibz_finalize(&b_cp);
#endif
}
 801d048:	bf00      	nop
 801d04a:	3710      	adds	r7, #16
 801d04c:	46bd      	mov	sp, r7
 801d04e:	bd80      	pop	{r7, pc}

0801d050 <sqisign_gen_ibz_sub>:

void
ibz_sub(ibz_t *diff, const ibz_t *a, const ibz_t *b)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b084      	sub	sp, #16
 801d054:	af00      	add	r7, sp, #0
 801d056:	60f8      	str	r0, [r7, #12]
 801d058:	60b9      	str	r1, [r7, #8]
 801d05a:	607a      	str	r2, [r7, #4]
    ibz_init(&a_cp);
    ibz_init(&b_cp);
    ibz_copy(&a_cp, a);
    ibz_copy(&b_cp, b);
#endif
    mpz_sub(*diff, *a, *b);
 801d05c:	687a      	ldr	r2, [r7, #4]
 801d05e:	68b9      	ldr	r1, [r7, #8]
 801d060:	68f8      	ldr	r0, [r7, #12]
 801d062:	f007 ffbf 	bl	8024fe4 <mpz_sub>
#ifdef DEBUG_VERBOSE
    DEBUG_STR_FUN_3("ibz_sub", diff, &a_cp, &b_cp);
    ibz_finalize(&a_cp);
    ibz_finalize(&b_cp);
#endif
}
 801d066:	bf00      	nop
 801d068:	3710      	adds	r7, #16
 801d06a:	46bd      	mov	sp, r7
 801d06c:	bd80      	pop	{r7, pc}

0801d06e <sqisign_gen_ibz_mul>:

void
ibz_mul(ibz_t *prod, const ibz_t *a, const ibz_t *b)
{
 801d06e:	b580      	push	{r7, lr}
 801d070:	b084      	sub	sp, #16
 801d072:	af00      	add	r7, sp, #0
 801d074:	60f8      	str	r0, [r7, #12]
 801d076:	60b9      	str	r1, [r7, #8]
 801d078:	607a      	str	r2, [r7, #4]
    ibz_init(&a_cp);
    ibz_init(&b_cp);
    ibz_copy(&a_cp, a);
    ibz_copy(&b_cp, b);
#endif
    mpz_mul(*prod, *a, *b);
 801d07a:	687a      	ldr	r2, [r7, #4]
 801d07c:	68b9      	ldr	r1, [r7, #8]
 801d07e:	68f8      	ldr	r0, [r7, #12]
 801d080:	f008 f813 	bl	80250aa <mpz_mul>
#ifdef DEBUG_VERBOSE
    DEBUG_STR_FUN_3("ibz_mul", prod, &a_cp, &b_cp);
    ibz_finalize(&a_cp);
    ibz_finalize(&b_cp);
#endif
}
 801d084:	bf00      	nop
 801d086:	3710      	adds	r7, #16
 801d088:	46bd      	mov	sp, r7
 801d08a:	bd80      	pop	{r7, pc}

0801d08c <sqisign_gen_ibz_neg>:

void
ibz_neg(ibz_t *neg, const ibz_t *a)
{
 801d08c:	b580      	push	{r7, lr}
 801d08e:	b082      	sub	sp, #8
 801d090:	af00      	add	r7, sp, #0
 801d092:	6078      	str	r0, [r7, #4]
 801d094:	6039      	str	r1, [r7, #0]
    mpz_neg(*neg, *a);
 801d096:	6839      	ldr	r1, [r7, #0]
 801d098:	6878      	ldr	r0, [r7, #4]
 801d09a:	f007 fe30 	bl	8024cfe <mpz_neg>
}
 801d09e:	bf00      	nop
 801d0a0:	3708      	adds	r7, #8
 801d0a2:	46bd      	mov	sp, r7
 801d0a4:	bd80      	pop	{r7, pc}

0801d0a6 <sqisign_gen_ibz_abs>:

void
ibz_abs(ibz_t *abs, const ibz_t *a)
{
 801d0a6:	b580      	push	{r7, lr}
 801d0a8:	b082      	sub	sp, #8
 801d0aa:	af00      	add	r7, sp, #0
 801d0ac:	6078      	str	r0, [r7, #4]
 801d0ae:	6039      	str	r1, [r7, #0]
    mpz_abs(*abs, *a);
 801d0b0:	6839      	ldr	r1, [r7, #0]
 801d0b2:	6878      	ldr	r0, [r7, #4]
 801d0b4:	f007 fe0e 	bl	8024cd4 <mpz_abs>
}
 801d0b8:	bf00      	nop
 801d0ba:	3708      	adds	r7, #8
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd80      	pop	{r7, pc}

0801d0c0 <sqisign_gen_ibz_div>:

void
ibz_div(ibz_t *quotient, ibz_t *remainder, const ibz_t *a, const ibz_t *b)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b084      	sub	sp, #16
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	60f8      	str	r0, [r7, #12]
 801d0c8:	60b9      	str	r1, [r7, #8]
 801d0ca:	607a      	str	r2, [r7, #4]
 801d0cc:	603b      	str	r3, [r7, #0]
    ibz_init(&a_cp);
    ibz_init(&b_cp);
    ibz_copy(&a_cp, a);
    ibz_copy(&b_cp, b);
#endif
    mpz_tdiv_qr(*quotient, *remainder, *a, *b);
 801d0ce:	683b      	ldr	r3, [r7, #0]
 801d0d0:	687a      	ldr	r2, [r7, #4]
 801d0d2:	68b9      	ldr	r1, [r7, #8]
 801d0d4:	68f8      	ldr	r0, [r7, #12]
 801d0d6:	f008 fa36 	bl	8025546 <mpz_tdiv_qr>
#ifdef DEBUG_VERBOSE
    DEBUG_STR_FUN_4("ibz_div", quotient, remainder, &a_cp, &b_cp);
    ibz_finalize(&a_cp);
    ibz_finalize(&b_cp);
#endif
}
 801d0da:	bf00      	nop
 801d0dc:	3710      	adds	r7, #16
 801d0de:	46bd      	mov	sp, r7
 801d0e0:	bd80      	pop	{r7, pc}

0801d0e2 <sqisign_gen_ibz_div_2exp>:

void
ibz_div_2exp(ibz_t *quotient, const ibz_t *a, uint32_t exp)
{
 801d0e2:	b580      	push	{r7, lr}
 801d0e4:	b084      	sub	sp, #16
 801d0e6:	af00      	add	r7, sp, #0
 801d0e8:	60f8      	str	r0, [r7, #12]
 801d0ea:	60b9      	str	r1, [r7, #8]
 801d0ec:	607a      	str	r2, [r7, #4]
#ifdef DEBUG_VERBOSE
    ibz_t a_cp;
    ibz_init(&a_cp);
    ibz_copy(&a_cp, a);
#endif
    mpz_tdiv_q_2exp(*quotient, *a, exp);
 801d0ee:	687a      	ldr	r2, [r7, #4]
 801d0f0:	68b9      	ldr	r1, [r7, #8]
 801d0f2:	68f8      	ldr	r0, [r7, #12]
 801d0f4:	f008 fb20 	bl	8025738 <mpz_tdiv_q_2exp>
#ifdef DEBUG_VERBOSE
    DEBUG_STR_FUN_MP2_INT("ibz_div_2exp,%Zx,%Zx,%x\n", quotient, &a_cp, exp);
    ibz_finalize(&a_cp);
#endif
}
 801d0f8:	bf00      	nop
 801d0fa:	3710      	adds	r7, #16
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	bd80      	pop	{r7, pc}

0801d100 <sqisign_gen_ibz_div_floor>:

void
ibz_div_floor(ibz_t *q, ibz_t *r, const ibz_t *n, const ibz_t *d)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b084      	sub	sp, #16
 801d104:	af00      	add	r7, sp, #0
 801d106:	60f8      	str	r0, [r7, #12]
 801d108:	60b9      	str	r1, [r7, #8]
 801d10a:	607a      	str	r2, [r7, #4]
 801d10c:	603b      	str	r3, [r7, #0]
    mpz_fdiv_qr(*q, *r, *n, *d);
 801d10e:	683b      	ldr	r3, [r7, #0]
 801d110:	687a      	ldr	r2, [r7, #4]
 801d112:	68b9      	ldr	r1, [r7, #8]
 801d114:	68f8      	ldr	r0, [r7, #12]
 801d116:	f008 fa03 	bl	8025520 <mpz_fdiv_qr>
}
 801d11a:	bf00      	nop
 801d11c:	3710      	adds	r7, #16
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}

0801d122 <sqisign_gen_ibz_mod>:

void
ibz_mod(ibz_t *r, const ibz_t *a, const ibz_t *b)
{
 801d122:	b580      	push	{r7, lr}
 801d124:	b084      	sub	sp, #16
 801d126:	af00      	add	r7, sp, #0
 801d128:	60f8      	str	r0, [r7, #12]
 801d12a:	60b9      	str	r1, [r7, #8]
 801d12c:	607a      	str	r2, [r7, #4]
    mpz_mod(*r, *a, *b);
 801d12e:	687a      	ldr	r2, [r7, #4]
 801d130:	68b9      	ldr	r1, [r7, #8]
 801d132:	68f8      	ldr	r0, [r7, #12]
 801d134:	f008 fa3e 	bl	80255b4 <mpz_mod>
}
 801d138:	bf00      	nop
 801d13a:	3710      	adds	r7, #16
 801d13c:	46bd      	mov	sp, r7
 801d13e:	bd80      	pop	{r7, pc}

0801d140 <sqisign_gen_ibz_mod_ui>:

unsigned long int
ibz_mod_ui(const mpz_t *n, unsigned long int d)
{
 801d140:	b580      	push	{r7, lr}
 801d142:	b082      	sub	sp, #8
 801d144:	af00      	add	r7, sp, #0
 801d146:	6078      	str	r0, [r7, #4]
 801d148:	6039      	str	r1, [r7, #0]
    return mpz_fdiv_ui(*n, d);
 801d14a:	6839      	ldr	r1, [r7, #0]
 801d14c:	6878      	ldr	r0, [r7, #4]
 801d14e:	f008 fb8d 	bl	802586c <mpz_fdiv_ui>
 801d152:	4603      	mov	r3, r0
}
 801d154:	4618      	mov	r0, r3
 801d156:	3708      	adds	r7, #8
 801d158:	46bd      	mov	sp, r7
 801d15a:	bd80      	pop	{r7, pc}

0801d15c <sqisign_gen_ibz_divides>:

int
ibz_divides(const ibz_t *a, const ibz_t *b)
{
 801d15c:	b580      	push	{r7, lr}
 801d15e:	b082      	sub	sp, #8
 801d160:	af00      	add	r7, sp, #0
 801d162:	6078      	str	r0, [r7, #4]
 801d164:	6039      	str	r1, [r7, #0]
    return mpz_divisible_p(*a, *b);
 801d166:	6839      	ldr	r1, [r7, #0]
 801d168:	6878      	ldr	r0, [r7, #4]
 801d16a:	f008 fb19 	bl	80257a0 <mpz_divisible_p>
 801d16e:	4603      	mov	r3, r0
}
 801d170:	4618      	mov	r0, r3
 801d172:	3708      	adds	r7, #8
 801d174:	46bd      	mov	sp, r7
 801d176:	bd80      	pop	{r7, pc}

0801d178 <sqisign_gen_ibz_pow>:

void
ibz_pow(ibz_t *pow, const ibz_t *x, uint32_t e)
{
 801d178:	b580      	push	{r7, lr}
 801d17a:	b084      	sub	sp, #16
 801d17c:	af00      	add	r7, sp, #0
 801d17e:	60f8      	str	r0, [r7, #12]
 801d180:	60b9      	str	r1, [r7, #8]
 801d182:	607a      	str	r2, [r7, #4]
    mpz_pow_ui(*pow, *x, e);
 801d184:	687a      	ldr	r2, [r7, #4]
 801d186:	68b9      	ldr	r1, [r7, #8]
 801d188:	68f8      	ldr	r0, [r7, #12]
 801d18a:	f009 f953 	bl	8026434 <mpz_pow_ui>
}
 801d18e:	bf00      	nop
 801d190:	3710      	adds	r7, #16
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}

0801d196 <sqisign_gen_ibz_two_adic>:
    DEBUG_STR_FUN_4("ibz_pow_mod", pow, x, e, m);
}

int
ibz_two_adic(ibz_t *pow)
{
 801d196:	b580      	push	{r7, lr}
 801d198:	b082      	sub	sp, #8
 801d19a:	af00      	add	r7, sp, #0
 801d19c:	6078      	str	r0, [r7, #4]
    return mpz_scan1(*pow, 0);
 801d19e:	2100      	movs	r1, #0
 801d1a0:	6878      	ldr	r0, [r7, #4]
 801d1a2:	f00a f936 	bl	8027412 <mpz_scan1>
 801d1a6:	4603      	mov	r3, r0
}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3708      	adds	r7, #8
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}

0801d1b0 <sqisign_gen_ibz_cmp>:

int
ibz_cmp(const ibz_t *a, const ibz_t *b)
{
 801d1b0:	b580      	push	{r7, lr}
 801d1b2:	b084      	sub	sp, #16
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6078      	str	r0, [r7, #4]
 801d1b8:	6039      	str	r1, [r7, #0]
    int ret = mpz_cmp(*a, *b);
 801d1ba:	6839      	ldr	r1, [r7, #0]
 801d1bc:	6878      	ldr	r0, [r7, #4]
 801d1be:	f007 fd0d 	bl	8024bdc <mpz_cmp>
 801d1c2:	60f8      	str	r0, [r7, #12]
    DEBUG_STR_FUN_INT_MP2("ibz_cmp", ret, a, b);
    return ret;
 801d1c4:	68fb      	ldr	r3, [r7, #12]
}
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	3710      	adds	r7, #16
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bd80      	pop	{r7, pc}

0801d1ce <sqisign_gen_ibz_is_zero>:

int
ibz_is_zero(const ibz_t *x)
{
 801d1ce:	b580      	push	{r7, lr}
 801d1d0:	b084      	sub	sp, #16
 801d1d2:	af00      	add	r7, sp, #0
 801d1d4:	6078      	str	r0, [r7, #4]
    int ret = !mpz_cmp_ui(*x, 0);
 801d1d6:	2100      	movs	r1, #0
 801d1d8:	6878      	ldr	r0, [r7, #4]
 801d1da:	f007 fce8 	bl	8024bae <mpz_cmp_ui>
 801d1de:	4603      	mov	r3, r0
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	bf0c      	ite	eq
 801d1e4:	2301      	moveq	r3, #1
 801d1e6:	2300      	movne	r3, #0
 801d1e8:	b2db      	uxtb	r3, r3
 801d1ea:	60fb      	str	r3, [r7, #12]
    DEBUG_STR_FUN_INT_MP("ibz_is_zero", ret, x);
    return ret;
 801d1ec:	68fb      	ldr	r3, [r7, #12]
}
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	3710      	adds	r7, #16
 801d1f2:	46bd      	mov	sp, r7
 801d1f4:	bd80      	pop	{r7, pc}

0801d1f6 <sqisign_gen_ibz_is_one>:

int
ibz_is_one(const ibz_t *x)
{
 801d1f6:	b580      	push	{r7, lr}
 801d1f8:	b084      	sub	sp, #16
 801d1fa:	af00      	add	r7, sp, #0
 801d1fc:	6078      	str	r0, [r7, #4]
    int ret = !mpz_cmp_ui(*x, 1);
 801d1fe:	2101      	movs	r1, #1
 801d200:	6878      	ldr	r0, [r7, #4]
 801d202:	f007 fcd4 	bl	8024bae <mpz_cmp_ui>
 801d206:	4603      	mov	r3, r0
 801d208:	2b00      	cmp	r3, #0
 801d20a:	bf0c      	ite	eq
 801d20c:	2301      	moveq	r3, #1
 801d20e:	2300      	movne	r3, #0
 801d210:	b2db      	uxtb	r3, r3
 801d212:	60fb      	str	r3, [r7, #12]
    DEBUG_STR_FUN_INT_MP("ibz_is_one", ret, x);
    return ret;
 801d214:	68fb      	ldr	r3, [r7, #12]
}
 801d216:	4618      	mov	r0, r3
 801d218:	3710      	adds	r7, #16
 801d21a:	46bd      	mov	sp, r7
 801d21c:	bd80      	pop	{r7, pc}

0801d21e <sqisign_gen_ibz_is_even>:
    return ret;
}

int
ibz_is_even(const ibz_t *x)
{
 801d21e:	b580      	push	{r7, lr}
 801d220:	b084      	sub	sp, #16
 801d222:	af00      	add	r7, sp, #0
 801d224:	6078      	str	r0, [r7, #4]
    int ret = !mpz_tstbit(*x, 0);
 801d226:	2100      	movs	r1, #0
 801d228:	6878      	ldr	r0, [r7, #4]
 801d22a:	f009 ffa9 	bl	8027180 <mpz_tstbit>
 801d22e:	4603      	mov	r3, r0
 801d230:	2b00      	cmp	r3, #0
 801d232:	bf0c      	ite	eq
 801d234:	2301      	moveq	r3, #1
 801d236:	2300      	movne	r3, #0
 801d238:	b2db      	uxtb	r3, r3
 801d23a:	60fb      	str	r3, [r7, #12]
    DEBUG_STR_FUN_INT_MP("ibz_is_even", ret, x);
    return ret;
 801d23c:	68fb      	ldr	r3, [r7, #12]
}
 801d23e:	4618      	mov	r0, r3
 801d240:	3710      	adds	r7, #16
 801d242:	46bd      	mov	sp, r7
 801d244:	bd80      	pop	{r7, pc}

0801d246 <sqisign_gen_ibz_is_odd>:

int
ibz_is_odd(const ibz_t *x)
{
 801d246:	b580      	push	{r7, lr}
 801d248:	b084      	sub	sp, #16
 801d24a:	af00      	add	r7, sp, #0
 801d24c:	6078      	str	r0, [r7, #4]
    int ret = mpz_tstbit(*x, 0);
 801d24e:	2100      	movs	r1, #0
 801d250:	6878      	ldr	r0, [r7, #4]
 801d252:	f009 ff95 	bl	8027180 <mpz_tstbit>
 801d256:	60f8      	str	r0, [r7, #12]
    DEBUG_STR_FUN_INT_MP("ibz_is_odd", ret, x);
    return ret;
 801d258:	68fb      	ldr	r3, [r7, #12]
}
 801d25a:	4618      	mov	r0, r3
 801d25c:	3710      	adds	r7, #16
 801d25e:	46bd      	mov	sp, r7
 801d260:	bd80      	pop	{r7, pc}

0801d262 <sqisign_gen_ibz_set>:

void
ibz_set(ibz_t *i, int32_t x)
{
 801d262:	b580      	push	{r7, lr}
 801d264:	b082      	sub	sp, #8
 801d266:	af00      	add	r7, sp, #0
 801d268:	6078      	str	r0, [r7, #4]
 801d26a:	6039      	str	r1, [r7, #0]
    mpz_set_si(*i, x);
 801d26c:	6839      	ldr	r1, [r7, #0]
 801d26e:	6878      	ldr	r0, [r7, #4]
 801d270:	f007 f99f 	bl	80245b2 <mpz_set_si>
}
 801d274:	bf00      	nop
 801d276:	3708      	adds	r7, #8
 801d278:	46bd      	mov	sp, r7
 801d27a:	bd80      	pop	{r7, pc}

0801d27c <sqisign_gen_ibz_copy>:
    return (1 + mpz_set_str(*i, str, base));
}

void
ibz_copy(ibz_t *target, const ibz_t *value)
{
 801d27c:	b580      	push	{r7, lr}
 801d27e:	b082      	sub	sp, #8
 801d280:	af00      	add	r7, sp, #0
 801d282:	6078      	str	r0, [r7, #4]
 801d284:	6039      	str	r1, [r7, #0]
    mpz_set(*target, *value);
 801d286:	6839      	ldr	r1, [r7, #0]
 801d288:	6878      	ldr	r0, [r7, #4]
 801d28a:	f007 f9d8 	bl	802463e <mpz_set>
}
 801d28e:	bf00      	nop
 801d290:	3708      	adds	r7, #8
 801d292:	46bd      	mov	sp, r7
 801d294:	bd80      	pop	{r7, pc}

0801d296 <sqisign_gen_ibz_swap>:

void
ibz_swap(ibz_t *a, ibz_t *b)
{
 801d296:	b580      	push	{r7, lr}
 801d298:	b082      	sub	sp, #8
 801d29a:	af00      	add	r7, sp, #0
 801d29c:	6078      	str	r0, [r7, #4]
 801d29e:	6039      	str	r1, [r7, #0]
    mpz_swap(*a, *b);
 801d2a0:	6839      	ldr	r1, [r7, #0]
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f007 fd3d 	bl	8024d22 <mpz_swap>
}
 801d2a8:	bf00      	nop
 801d2aa:	3708      	adds	r7, #8
 801d2ac:	46bd      	mov	sp, r7
 801d2ae:	bd80      	pop	{r7, pc}

0801d2b0 <sqisign_gen_ibz_get>:

int32_t
ibz_get(const ibz_t *i)
{
 801d2b0:	b580      	push	{r7, lr}
 801d2b2:	b082      	sub	sp, #8
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	6078      	str	r0, [r7, #4]
#if LONG_MAX == INT32_MAX
    return (int32_t)mpz_get_si(*i);
 801d2b8:	6878      	ldr	r0, [r7, #4]
 801d2ba:	f007 fa3f 	bl	802473c <mpz_get_si>
 801d2be:	4603      	mov	r3, r0
    signed long int t = mpz_get_si(*i);
    return (int32_t)((t >> (sizeof(signed long int) * 8 - 32)) & INT32_C(0x80000000)) | (t & INT32_C(0x7FFFFFFF));
#else
#error Unsupported configuration: LONG_MAX must be >= INT32_MAX
#endif
}
 801d2c0:	4618      	mov	r0, r3
 801d2c2:	3708      	adds	r7, #8
 801d2c4:	46bd      	mov	sp, r7
 801d2c6:	bd80      	pop	{r7, pc}

0801d2c8 <sqisign_gen_ibz_rand_interval>:

int
ibz_rand_interval(ibz_t *rand, const ibz_t *a, const ibz_t *b)
{
 801d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2cc:	b09d      	sub	sp, #116	@ 0x74
 801d2ce:	af00      	add	r7, sp, #0
 801d2d0:	60f8      	str	r0, [r7, #12]
 801d2d2:	60b9      	str	r1, [r7, #8]
 801d2d4:	607a      	str	r2, [r7, #4]
 801d2d6:	466b      	mov	r3, sp
 801d2d8:	461e      	mov	r6, r3
    int randret;
    int ret = 1;
 801d2da:	2301      	movs	r3, #1
 801d2dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    mpz_t tmp;
    mpz_t bmina;
    mpz_init(bmina);
 801d2de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801d2e2:	4618      	mov	r0, r3
 801d2e4:	f007 f8e4 	bl	80244b0 <mpz_init>
    mpz_sub(bmina, *b, *a);
 801d2e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801d2ec:	68ba      	ldr	r2, [r7, #8]
 801d2ee:	6879      	ldr	r1, [r7, #4]
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	f007 fe77 	bl	8024fe4 <mpz_sub>

    if (mpz_sgn(bmina) == 0) {
 801d2f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f007 fc40 	bl	8024b80 <mpz_sgn>
 801d300:	4603      	mov	r3, r0
 801d302:	2b00      	cmp	r3, #0
 801d304:	d10a      	bne.n	801d31c <sqisign_gen_ibz_rand_interval+0x54>
        mpz_set(*rand, *a);
 801d306:	68b9      	ldr	r1, [r7, #8]
 801d308:	68f8      	ldr	r0, [r7, #12]
 801d30a:	f007 f998 	bl	802463e <mpz_set>
        mpz_clear(bmina);
 801d30e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801d312:	4618      	mov	r0, r3
 801d314:	f007 f905 	bl	8024522 <mpz_clear>
        return 1;
 801d318:	2301      	movs	r3, #1
 801d31a:	e0de      	b.n	801d4da <sqisign_gen_ibz_rand_interval+0x212>
    }

    size_t len_bits = mpz_sizeinbase(bmina, 2);
 801d31c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801d320:	2102      	movs	r1, #2
 801d322:	4618      	mov	r0, r3
 801d324:	f00a f8ce 	bl	80274c4 <mpz_sizeinbase>
 801d328:	6678      	str	r0, [r7, #100]	@ 0x64
    size_t len_bytes = (len_bits + 7) / 8;
 801d32a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d32c:	3307      	adds	r3, #7
 801d32e:	08db      	lsrs	r3, r3, #3
 801d330:	663b      	str	r3, [r7, #96]	@ 0x60
    size_t sizeof_limb = sizeof(mp_limb_t);
 801d332:	2304      	movs	r3, #4
 801d334:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t sizeof_limb_bits = sizeof_limb * 8;
 801d336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d338:	00db      	lsls	r3, r3, #3
 801d33a:	65bb      	str	r3, [r7, #88]	@ 0x58
    size_t len_limbs = (len_bytes + sizeof_limb - 1) / sizeof_limb;
 801d33c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d33e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d340:	4413      	add	r3, r2
 801d342:	1e5a      	subs	r2, r3, #1
 801d344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d346:	fbb2 f3f3 	udiv	r3, r2, r3
 801d34a:	657b      	str	r3, [r7, #84]	@ 0x54

    mp_limb_t mask = ((mp_limb_t)-1) >> (sizeof_limb_bits - len_bits) % sizeof_limb_bits;
 801d34c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801d34e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d350:	1ad3      	subs	r3, r2, r3
 801d352:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801d354:	fbb3 f2f2 	udiv	r2, r3, r2
 801d358:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d35a:	fb01 f202 	mul.w	r2, r1, r2
 801d35e:	1a9b      	subs	r3, r3, r2
 801d360:	f04f 32ff 	mov.w	r2, #4294967295
 801d364:	fa22 f303 	lsr.w	r3, r2, r3
 801d368:	653b      	str	r3, [r7, #80]	@ 0x50
    mp_limb_t r[len_limbs];
 801d36a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d36c:	460b      	mov	r3, r1
 801d36e:	3b01      	subs	r3, #1
 801d370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d372:	2300      	movs	r3, #0
 801d374:	4688      	mov	r8, r1
 801d376:	4699      	mov	r9, r3
 801d378:	f04f 0200 	mov.w	r2, #0
 801d37c:	f04f 0300 	mov.w	r3, #0
 801d380:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801d384:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 801d388:	ea4f 1248 	mov.w	r2, r8, lsl #5
 801d38c:	2300      	movs	r3, #0
 801d38e:	460c      	mov	r4, r1
 801d390:	461d      	mov	r5, r3
 801d392:	f04f 0200 	mov.w	r2, #0
 801d396:	f04f 0300 	mov.w	r3, #0
 801d39a:	016b      	lsls	r3, r5, #5
 801d39c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 801d3a0:	0162      	lsls	r2, r4, #5
 801d3a2:	008b      	lsls	r3, r1, #2
 801d3a4:	3307      	adds	r3, #7
 801d3a6:	08db      	lsrs	r3, r3, #3
 801d3a8:	00db      	lsls	r3, r3, #3
 801d3aa:	ebad 0d03 	sub.w	sp, sp, r3
 801d3ae:	466b      	mov	r3, sp
 801d3b0:	3303      	adds	r3, #3
 801d3b2:	089b      	lsrs	r3, r3, #2
 801d3b4:	009b      	lsls	r3, r3, #2
 801d3b6:	64bb      	str	r3, [r7, #72]	@ 0x48

#ifndef NDEBUG
    {
        for (size_t i = 0; i < len_limbs; ++i)
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 801d3bc:	e008      	b.n	801d3d0 <sqisign_gen_ibz_rand_interval+0x108>
            r[i] = (mp_limb_t)-1;
 801d3be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d3c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d3c2:	f04f 31ff 	mov.w	r1, #4294967295
 801d3c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < len_limbs; ++i)
 801d3ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d3cc:	3301      	adds	r3, #1
 801d3ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 801d3d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d3d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d3d4:	429a      	cmp	r2, r3
 801d3d6:	d3f2      	bcc.n	801d3be <sqisign_gen_ibz_rand_interval+0xf6>
        r[len_limbs - 1] = mask;
 801d3d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d3da:	1e5a      	subs	r2, r3, #1
 801d3dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d3de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d3e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        mpz_t check;
        mpz_roinit_n(check, r, len_limbs);
 801d3e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d3e6:	f107 0320 	add.w	r3, r7, #32
 801d3ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	f007 fa09 	bl	8024804 <mpz_roinit_n>
        assert(mpz_cmp(check, bmina) >= 0); // max sampled value >= b - a
 801d3f2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801d3f6:	f107 0320 	add.w	r3, r7, #32
 801d3fa:	4611      	mov	r1, r2
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f007 fbed 	bl	8024bdc <mpz_cmp>
 801d402:	4603      	mov	r3, r0
 801d404:	2b00      	cmp	r3, #0
 801d406:	da06      	bge.n	801d416 <sqisign_gen_ibz_rand_interval+0x14e>
 801d408:	4b37      	ldr	r3, [pc, #220]	@ (801d4e8 <sqisign_gen_ibz_rand_interval+0x220>)
 801d40a:	4a38      	ldr	r2, [pc, #224]	@ (801d4ec <sqisign_gen_ibz_rand_interval+0x224>)
 801d40c:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 801d410:	4837      	ldr	r0, [pc, #220]	@ (801d4f0 <sqisign_gen_ibz_rand_interval+0x228>)
 801d412:	f017 ff11 	bl	8035238 <__assert_func>
        mpz_t bmina2;
        mpz_init(bmina2);
 801d416:	f107 0314 	add.w	r3, r7, #20
 801d41a:	4618      	mov	r0, r3
 801d41c:	f007 f848 	bl	80244b0 <mpz_init>
        mpz_add(bmina2, bmina, bmina);
 801d420:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801d424:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801d428:	f107 0314 	add.w	r3, r7, #20
 801d42c:	4618      	mov	r0, r3
 801d42e:	f007 fdb1 	bl	8024f94 <mpz_add>
        assert(mpz_cmp(check, bmina2) < 0); // max sampled value < 2 * (b - a)
 801d432:	f107 0214 	add.w	r2, r7, #20
 801d436:	f107 0320 	add.w	r3, r7, #32
 801d43a:	4611      	mov	r1, r2
 801d43c:	4618      	mov	r0, r3
 801d43e:	f007 fbcd 	bl	8024bdc <mpz_cmp>
 801d442:	4603      	mov	r3, r0
 801d444:	2b00      	cmp	r3, #0
 801d446:	db06      	blt.n	801d456 <sqisign_gen_ibz_rand_interval+0x18e>
 801d448:	4b2a      	ldr	r3, [pc, #168]	@ (801d4f4 <sqisign_gen_ibz_rand_interval+0x22c>)
 801d44a:	4a28      	ldr	r2, [pc, #160]	@ (801d4ec <sqisign_gen_ibz_rand_interval+0x224>)
 801d44c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 801d450:	4827      	ldr	r0, [pc, #156]	@ (801d4f0 <sqisign_gen_ibz_rand_interval+0x228>)
 801d452:	f017 fef1 	bl	8035238 <__assert_func>
        mpz_clear(bmina2);
 801d456:	f107 0314 	add.w	r3, r7, #20
 801d45a:	4618      	mov	r0, r3
 801d45c:	f007 f861 	bl	8024522 <mpz_clear>
    }
#endif

    do {
        randret = randombytes((unsigned char *)r, len_bytes);
 801d460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d462:	2200      	movs	r2, #0
 801d464:	469a      	mov	sl, r3
 801d466:	4693      	mov	fp, r2
 801d468:	4652      	mov	r2, sl
 801d46a:	465b      	mov	r3, fp
 801d46c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801d46e:	f00c f983 	bl	8029778 <randombytes>
 801d472:	6478      	str	r0, [r7, #68]	@ 0x44
        if (randret != 0) {
 801d474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d476:	2b00      	cmp	r3, #0
 801d478:	d002      	beq.n	801d480 <sqisign_gen_ibz_rand_interval+0x1b8>
            ret = 0;
 801d47a:	2300      	movs	r3, #0
 801d47c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto err;
 801d47e:	e026      	b.n	801d4ce <sqisign_gen_ibz_rand_interval+0x206>
        }
#ifdef TARGET_BIG_ENDIAN
        for (size_t i = 0; i < len_limbs; ++i)
            r[i] = BSWAP_DIGIT(r[i]);
#endif
        r[len_limbs - 1] &= mask;
 801d480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d482:	1e5a      	subs	r2, r3, #1
 801d484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d486:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d48a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d48c:	1e5a      	subs	r2, r3, #1
 801d48e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d490:	4019      	ands	r1, r3
 801d492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        mpz_roinit_n(tmp, r, len_limbs);
 801d498:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d49a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801d49e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	f007 f9af 	bl	8024804 <mpz_roinit_n>
        if (mpz_cmp(tmp, bmina) <= 0)
 801d4a6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801d4aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801d4ae:	4611      	mov	r1, r2
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	f007 fb93 	bl	8024bdc <mpz_cmp>
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	dd00      	ble.n	801d4be <sqisign_gen_ibz_rand_interval+0x1f6>
        randret = randombytes((unsigned char *)r, len_bytes);
 801d4bc:	e7d0      	b.n	801d460 <sqisign_gen_ibz_rand_interval+0x198>
            break;
 801d4be:	bf00      	nop
    } while (1);

    mpz_add(*rand, tmp, *a);
 801d4c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801d4c4:	68ba      	ldr	r2, [r7, #8]
 801d4c6:	4619      	mov	r1, r3
 801d4c8:	68f8      	ldr	r0, [r7, #12]
 801d4ca:	f007 fd63 	bl	8024f94 <mpz_add>
err:
    mpz_clear(bmina);
 801d4ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801d4d2:	4618      	mov	r0, r3
 801d4d4:	f007 f825 	bl	8024522 <mpz_clear>
    return ret;
 801d4d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d4da:	46b5      	mov	sp, r6
}
 801d4dc:	4618      	mov	r0, r3
 801d4de:	3774      	adds	r7, #116	@ 0x74
 801d4e0:	46bd      	mov	sp, r7
 801d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4e6:	bf00      	nop
 801d4e8:	08037cc0 	.word	0x08037cc0
 801d4ec:	0803b918 	.word	0x0803b918
 801d4f0:	08037ca4 	.word	0x08037ca4
 801d4f4:	08037cdc 	.word	0x08037cdc

0801d4f8 <sqisign_gen_ibz_rand_interval_minm_m>:
    return 1;
}

int
ibz_rand_interval_minm_m(ibz_t *rand, int32_t m)
{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b086      	sub	sp, #24
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	6078      	str	r0, [r7, #4]
 801d500:	6039      	str	r1, [r7, #0]
    int ret = 1;
 801d502:	2301      	movs	r3, #1
 801d504:	617b      	str	r3, [r7, #20]
    mpz_t m_big;

    // m_big = 2 * m
    mpz_init_set_si(m_big, m);
 801d506:	f107 0308 	add.w	r3, r7, #8
 801d50a:	6839      	ldr	r1, [r7, #0]
 801d50c:	4618      	mov	r0, r3
 801d50e:	f007 f8c2 	bl	8024696 <mpz_init_set_si>
    mpz_add(m_big, m_big, m_big);
 801d512:	f107 0208 	add.w	r2, r7, #8
 801d516:	f107 0108 	add.w	r1, r7, #8
 801d51a:	f107 0308 	add.w	r3, r7, #8
 801d51e:	4618      	mov	r0, r3
 801d520:	f007 fd38 	bl	8024f94 <mpz_add>

    // Sample in [0, 2*m]
    ret = ibz_rand_interval(rand, &ibz_const_zero, &m_big);
 801d524:	f107 0308 	add.w	r3, r7, #8
 801d528:	461a      	mov	r2, r3
 801d52a:	490a      	ldr	r1, [pc, #40]	@ (801d554 <sqisign_gen_ibz_rand_interval_minm_m+0x5c>)
 801d52c:	6878      	ldr	r0, [r7, #4]
 801d52e:	f7ff fecb 	bl	801d2c8 <sqisign_gen_ibz_rand_interval>
 801d532:	6178      	str	r0, [r7, #20]

    // Adjust to range [-m, m]
    mpz_sub_ui(*rand, *rand, m);
 801d534:	683b      	ldr	r3, [r7, #0]
 801d536:	461a      	mov	r2, r3
 801d538:	6879      	ldr	r1, [r7, #4]
 801d53a:	6878      	ldr	r0, [r7, #4]
 801d53c:	f007 fc36 	bl	8024dac <mpz_sub_ui>

    mpz_clear(m_big);
 801d540:	f107 0308 	add.w	r3, r7, #8
 801d544:	4618      	mov	r0, r3
 801d546:	f006 ffec 	bl	8024522 <mpz_clear>

    return ret;
 801d54a:	697b      	ldr	r3, [r7, #20]
}
 801d54c:	4618      	mov	r0, r3
 801d54e:	3718      	adds	r7, #24
 801d550:	46bd      	mov	sp, r7
 801d552:	bd80      	pop	{r7, pc}
 801d554:	0803b8f4 	.word	0x0803b8f4

0801d558 <sqisign_gen_ibz_bitsize>:
    return ret;
}

int
ibz_bitsize(const ibz_t *a)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b082      	sub	sp, #8
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	6078      	str	r0, [r7, #4]
    return (int)mpz_sizeinbase(*a, 2);
 801d560:	2102      	movs	r1, #2
 801d562:	6878      	ldr	r0, [r7, #4]
 801d564:	f009 ffae 	bl	80274c4 <mpz_sizeinbase>
 801d568:	4603      	mov	r3, r0
}
 801d56a:	4618      	mov	r0, r3
 801d56c:	3708      	adds	r7, #8
 801d56e:	46bd      	mov	sp, r7
 801d570:	bd80      	pop	{r7, pc}

0801d572 <sqisign_gen_ibz_copy_digits>:
    return (int)mpz_sizeinbase(*a, base);
}

void
ibz_copy_digits(ibz_t *target, const digit_t *dig, int dig_len)
{
 801d572:	b580      	push	{r7, lr}
 801d574:	b088      	sub	sp, #32
 801d576:	af04      	add	r7, sp, #16
 801d578:	60f8      	str	r0, [r7, #12]
 801d57a:	60b9      	str	r1, [r7, #8]
 801d57c:	607a      	str	r2, [r7, #4]
    mpz_import(*target, dig_len, -1, sizeof(digit_t), 0, 0, dig);
 801d57e:	6879      	ldr	r1, [r7, #4]
 801d580:	68bb      	ldr	r3, [r7, #8]
 801d582:	9302      	str	r3, [sp, #8]
 801d584:	2300      	movs	r3, #0
 801d586:	9301      	str	r3, [sp, #4]
 801d588:	2300      	movs	r3, #0
 801d58a:	9300      	str	r3, [sp, #0]
 801d58c:	2304      	movs	r3, #4
 801d58e:	f04f 32ff 	mov.w	r2, #4294967295
 801d592:	68f8      	ldr	r0, [r7, #12]
 801d594:	f00a f886 	bl	80276a4 <mpz_import>
}
 801d598:	bf00      	nop
 801d59a:	3710      	adds	r7, #16
 801d59c:	46bd      	mov	sp, r7
 801d59e:	bd80      	pop	{r7, pc}

0801d5a0 <sqisign_gen_ibz_to_digits>:

void
ibz_to_digits(digit_t *target, const ibz_t *ibz)
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b086      	sub	sp, #24
 801d5a4:	af04      	add	r7, sp, #16
 801d5a6:	6078      	str	r0, [r7, #4]
 801d5a8:	6039      	str	r1, [r7, #0]
    // From the GMP documentation:
    // "If op is zero then the count returned will be zero and nothing written to rop."
    // The next line ensures zero is written to the first limb of target if ibz is zero;
    // target is then overwritten by the actual value if it is not.
    target[0] = 0;
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	601a      	str	r2, [r3, #0]
    mpz_export(target, NULL, -1, sizeof(digit_t), 0, 0, *ibz);
 801d5b0:	683b      	ldr	r3, [r7, #0]
 801d5b2:	9302      	str	r3, [sp, #8]
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	9301      	str	r3, [sp, #4]
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	9300      	str	r3, [sp, #0]
 801d5bc:	2304      	movs	r3, #4
 801d5be:	f04f 32ff 	mov.w	r2, #4294967295
 801d5c2:	2100      	movs	r1, #0
 801d5c4:	6878      	ldr	r0, [r7, #4]
 801d5c6:	f00a f945 	bl	8027854 <mpz_export>
}
 801d5ca:	bf00      	nop
 801d5cc:	3708      	adds	r7, #8
 801d5ce:	46bd      	mov	sp, r7
 801d5d0:	bd80      	pop	{r7, pc}

0801d5d2 <sqisign_gen_ibz_probab_prime>:

int
ibz_probab_prime(const ibz_t *n, int reps)
{
 801d5d2:	b580      	push	{r7, lr}
 801d5d4:	b084      	sub	sp, #16
 801d5d6:	af00      	add	r7, sp, #0
 801d5d8:	6078      	str	r0, [r7, #4]
 801d5da:	6039      	str	r1, [r7, #0]
    int ret = mpz_probab_prime_p(*n, reps);
 801d5dc:	6839      	ldr	r1, [r7, #0]
 801d5de:	6878      	ldr	r0, [r7, #4]
 801d5e0:	f009 fcd4 	bl	8026f8c <mpz_probab_prime_p>
 801d5e4:	60f8      	str	r0, [r7, #12]
    DEBUG_STR_FUN_INT_MP_INT("ibz_probab_prime", ret, n, reps);
    return ret;
 801d5e6:	68fb      	ldr	r3, [r7, #12]
}
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	3710      	adds	r7, #16
 801d5ec:	46bd      	mov	sp, r7
 801d5ee:	bd80      	pop	{r7, pc}

0801d5f0 <sqisign_gen_ibz_gcd>:

void
ibz_gcd(ibz_t *gcd, const ibz_t *a, const ibz_t *b)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b084      	sub	sp, #16
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	60f8      	str	r0, [r7, #12]
 801d5f8:	60b9      	str	r1, [r7, #8]
 801d5fa:	607a      	str	r2, [r7, #4]
    mpz_gcd(*gcd, *a, *b);
 801d5fc:	687a      	ldr	r2, [r7, #4]
 801d5fe:	68b9      	ldr	r1, [r7, #8]
 801d600:	68f8      	ldr	r0, [r7, #12]
 801d602:	f008 fbb5 	bl	8025d70 <mpz_gcd>
}
 801d606:	bf00      	nop
 801d608:	3710      	adds	r7, #16
 801d60a:	46bd      	mov	sp, r7
 801d60c:	bd80      	pop	{r7, pc}

0801d60e <sqisign_gen_ibz_invmod>:

int
ibz_invmod(ibz_t *inv, const ibz_t *a, const ibz_t *mod)
{
 801d60e:	b580      	push	{r7, lr}
 801d610:	b084      	sub	sp, #16
 801d612:	af00      	add	r7, sp, #0
 801d614:	60f8      	str	r0, [r7, #12]
 801d616:	60b9      	str	r1, [r7, #8]
 801d618:	607a      	str	r2, [r7, #4]
    return (mpz_invert(*inv, *a, *mod) ? 1 : 0);
 801d61a:	687a      	ldr	r2, [r7, #4]
 801d61c:	68b9      	ldr	r1, [r7, #8]
 801d61e:	68f8      	ldr	r0, [r7, #12]
 801d620:	f008 fea4 	bl	802636c <mpz_invert>
 801d624:	4603      	mov	r3, r0
 801d626:	2b00      	cmp	r3, #0
 801d628:	bf14      	ite	ne
 801d62a:	2301      	movne	r3, #1
 801d62c:	2300      	moveq	r3, #0
 801d62e:	b2db      	uxtb	r3, r3
}
 801d630:	4618      	mov	r0, r3
 801d632:	3710      	adds	r7, #16
 801d634:	46bd      	mov	sp, r7
 801d636:	bd80      	pop	{r7, pc}

0801d638 <sqisign_gen_ibz_sqrt>:
    return mpz_legendre(*a, *p);
}

int
ibz_sqrt(ibz_t *sqrt, const ibz_t *a)
{
 801d638:	b580      	push	{r7, lr}
 801d63a:	b082      	sub	sp, #8
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	6078      	str	r0, [r7, #4]
 801d640:	6039      	str	r1, [r7, #0]
    if (mpz_perfect_square_p(*a)) {
 801d642:	6838      	ldr	r0, [r7, #0]
 801d644:	f009 f9b2 	bl	80269ac <mpz_perfect_square_p>
 801d648:	4603      	mov	r3, r0
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d005      	beq.n	801d65a <sqisign_gen_ibz_sqrt+0x22>
        mpz_sqrt(*sqrt, *a);
 801d64e:	6839      	ldr	r1, [r7, #0]
 801d650:	6878      	ldr	r0, [r7, #4]
 801d652:	f009 f99c 	bl	802698e <mpz_sqrt>
        return 1;
 801d656:	2301      	movs	r3, #1
 801d658:	e000      	b.n	801d65c <sqisign_gen_ibz_sqrt+0x24>
    } else {
        return 0;
 801d65a:	2300      	movs	r3, #0
    }
}
 801d65c:	4618      	mov	r0, r3
 801d65e:	3708      	adds	r7, #8
 801d660:	46bd      	mov	sp, r7
 801d662:	bd80      	pop	{r7, pc}

0801d664 <sqisign_gen_ibz_sqrt_floor>:

void
ibz_sqrt_floor(ibz_t *sqrt, const ibz_t *a)
{
 801d664:	b580      	push	{r7, lr}
 801d666:	b082      	sub	sp, #8
 801d668:	af00      	add	r7, sp, #0
 801d66a:	6078      	str	r0, [r7, #4]
 801d66c:	6039      	str	r1, [r7, #0]
    mpz_sqrt(*sqrt, *a);
 801d66e:	6839      	ldr	r1, [r7, #0]
 801d670:	6878      	ldr	r0, [r7, #4]
 801d672:	f009 f98c 	bl	802698e <mpz_sqrt>
}
 801d676:	bf00      	nop
 801d678:	3708      	adds	r7, #8
 801d67a:	46bd      	mov	sp, r7
 801d67c:	bd80      	pop	{r7, pc}
	...

0801d680 <sqisign_gen_ibz_sqrt_mod_p>:

int
ibz_sqrt_mod_p(ibz_t *sqrt, const ibz_t *a, const ibz_t *p)
{
 801d680:	b580      	push	{r7, lr}
 801d682:	b0ae      	sub	sp, #184	@ 0xb8
 801d684:	af00      	add	r7, sp, #0
 801d686:	60f8      	str	r0, [r7, #12]
 801d688:	60b9      	str	r1, [r7, #8]
 801d68a:	607a      	str	r2, [r7, #4]
#ifndef NDEBUG
    assert(ibz_probab_prime(p, 100));
 801d68c:	2164      	movs	r1, #100	@ 0x64
 801d68e:	6878      	ldr	r0, [r7, #4]
 801d690:	f7ff ff9f 	bl	801d5d2 <sqisign_gen_ibz_probab_prime>
 801d694:	4603      	mov	r3, r0
 801d696:	2b00      	cmp	r3, #0
 801d698:	d106      	bne.n	801d6a8 <sqisign_gen_ibz_sqrt_mod_p+0x28>
 801d69a:	4bd9      	ldr	r3, [pc, #868]	@ (801da00 <sqisign_gen_ibz_sqrt_mod_p+0x380>)
 801d69c:	4ad9      	ldr	r2, [pc, #868]	@ (801da04 <sqisign_gen_ibz_sqrt_mod_p+0x384>)
 801d69e:	f240 218d 	movw	r1, #653	@ 0x28d
 801d6a2:	48d9      	ldr	r0, [pc, #868]	@ (801da08 <sqisign_gen_ibz_sqrt_mod_p+0x388>)
 801d6a4:	f017 fdc8 	bl	8035238 <__assert_func>
#endif
    // Case a = 0
    {
        ibz_t test;
        ibz_init(&test);
 801d6a8:	f107 0310 	add.w	r3, r7, #16
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f7ff fcaa 	bl	801d006 <sqisign_gen_ibz_init>
        ibz_mod(&test, a, p);
 801d6b2:	f107 0310 	add.w	r3, r7, #16
 801d6b6:	687a      	ldr	r2, [r7, #4]
 801d6b8:	68b9      	ldr	r1, [r7, #8]
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	f7ff fd31 	bl	801d122 <sqisign_gen_ibz_mod>
        if (ibz_is_zero(&test)) {
 801d6c0:	f107 0310 	add.w	r3, r7, #16
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	f7ff fd82 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d003      	beq.n	801d6d8 <sqisign_gen_ibz_sqrt_mod_p+0x58>
            ibz_set(sqrt, 0);
 801d6d0:	2100      	movs	r1, #0
 801d6d2:	68f8      	ldr	r0, [r7, #12]
 801d6d4:	f7ff fdc5 	bl	801d262 <sqisign_gen_ibz_set>
        }
        ibz_finalize(&test);
 801d6d8:	f107 0310 	add.w	r3, r7, #16
 801d6dc:	4618      	mov	r0, r3
 801d6de:	f7ff fc9d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_copy(&a_cp, a);
    ibz_copy(&p_cp, p);
#endif

    mpz_t amod, tmp, exp, a4, a2, q, z, qnr, x, y, b, pm1;
    mpz_init(amod);
 801d6e2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d6e6:	4618      	mov	r0, r3
 801d6e8:	f006 fee2 	bl	80244b0 <mpz_init>
    mpz_init(tmp);
 801d6ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	f006 fedd 	bl	80244b0 <mpz_init>
    mpz_init(exp);
 801d6f6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f006 fed8 	bl	80244b0 <mpz_init>
    mpz_init(a4);
 801d700:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801d704:	4618      	mov	r0, r3
 801d706:	f006 fed3 	bl	80244b0 <mpz_init>
    mpz_init(a2);
 801d70a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d70e:	4618      	mov	r0, r3
 801d710:	f006 fece 	bl	80244b0 <mpz_init>
    mpz_init(q);
 801d714:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801d718:	4618      	mov	r0, r3
 801d71a:	f006 fec9 	bl	80244b0 <mpz_init>
    mpz_init(z);
 801d71e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801d722:	4618      	mov	r0, r3
 801d724:	f006 fec4 	bl	80244b0 <mpz_init>
    mpz_init(qnr);
 801d728:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801d72c:	4618      	mov	r0, r3
 801d72e:	f006 febf 	bl	80244b0 <mpz_init>
    mpz_init(x);
 801d732:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801d736:	4618      	mov	r0, r3
 801d738:	f006 feba 	bl	80244b0 <mpz_init>
    mpz_init(y);
 801d73c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801d740:	4618      	mov	r0, r3
 801d742:	f006 feb5 	bl	80244b0 <mpz_init>
    mpz_init(b);
 801d746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801d74a:	4618      	mov	r0, r3
 801d74c:	f006 feb0 	bl	80244b0 <mpz_init>
    mpz_init(pm1);
 801d750:	f107 031c 	add.w	r3, r7, #28
 801d754:	4618      	mov	r0, r3
 801d756:	f006 feab 	bl	80244b0 <mpz_init>

    int ret = 1;
 801d75a:	2301      	movs	r3, #1
 801d75c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    mpz_mod(amod, *a, *p);
 801d760:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d764:	687a      	ldr	r2, [r7, #4]
 801d766:	68b9      	ldr	r1, [r7, #8]
 801d768:	4618      	mov	r0, r3
 801d76a:	f007 ff23 	bl	80255b4 <mpz_mod>
    if (mpz_cmp_ui(amod, 0) < 0) {
 801d76e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d772:	2100      	movs	r1, #0
 801d774:	4618      	mov	r0, r3
 801d776:	f007 fa1a 	bl	8024bae <mpz_cmp_ui>
 801d77a:	4603      	mov	r3, r0
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	da07      	bge.n	801d790 <sqisign_gen_ibz_sqrt_mod_p+0x110>
        mpz_add(amod, *p, amod);
 801d780:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801d784:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d788:	6879      	ldr	r1, [r7, #4]
 801d78a:	4618      	mov	r0, r3
 801d78c:	f007 fc02 	bl	8024f94 <mpz_add>
    }

    if (mpz_legendre(amod, *p) != 1) {
 801d790:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d794:	6879      	ldr	r1, [r7, #4]
 801d796:	4618      	mov	r0, r3
 801d798:	f004 fec8 	bl	802252c <mpz_legendre>
 801d79c:	4603      	mov	r3, r0
 801d79e:	2b01      	cmp	r3, #1
 801d7a0:	d003      	beq.n	801d7aa <sqisign_gen_ibz_sqrt_mod_p+0x12a>
        ret = 0;
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        goto end;
 801d7a8:	e190      	b.n	801dacc <sqisign_gen_ibz_sqrt_mod_p+0x44c>
    }

    mpz_sub_ui(pm1, *p, 1);
 801d7aa:	f107 031c 	add.w	r3, r7, #28
 801d7ae:	2201      	movs	r2, #1
 801d7b0:	6879      	ldr	r1, [r7, #4]
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f007 fafa 	bl	8024dac <mpz_sub_ui>

    if (mpz_mod_ui(tmp, *p, 4) == 3) {
 801d7b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d7bc:	2204      	movs	r2, #4
 801d7be:	6879      	ldr	r1, [r7, #4]
 801d7c0:	4618      	mov	r0, r3
 801d7c2:	f008 f877 	bl	80258b4 <mpz_mod_ui>
 801d7c6:	4603      	mov	r3, r0
 801d7c8:	2b03      	cmp	r3, #3
 801d7ca:	d117      	bne.n	801d7fc <sqisign_gen_ibz_sqrt_mod_p+0x17c>
        // p % 4 == 3
        mpz_add_ui(tmp, *p, 1);
 801d7cc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d7d0:	2201      	movs	r2, #1
 801d7d2:	6879      	ldr	r1, [r7, #4]
 801d7d4:	4618      	mov	r0, r3
 801d7d6:	f007 facd 	bl	8024d74 <mpz_add_ui>
        mpz_fdiv_q_2exp(tmp, tmp, 2);
 801d7da:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 801d7de:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d7e2:	2202      	movs	r2, #2
 801d7e4:	4618      	mov	r0, r3
 801d7e6:	f007 ff97 	bl	8025718 <mpz_fdiv_q_2exp>
        mpz_powm(*sqrt, amod, tmp, *p);
 801d7ea:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 801d7ee:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	68f8      	ldr	r0, [r7, #12]
 801d7f6:	f008 fe57 	bl	80264a8 <mpz_powm>
 801d7fa:	e167      	b.n	801dacc <sqisign_gen_ibz_sqrt_mod_p+0x44c>
    } else if (mpz_mod_ui(tmp, *p, 8) == 5) {
 801d7fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d800:	2208      	movs	r2, #8
 801d802:	6879      	ldr	r1, [r7, #4]
 801d804:	4618      	mov	r0, r3
 801d806:	f008 f855 	bl	80258b4 <mpz_mod_ui>
 801d80a:	4603      	mov	r3, r0
 801d80c:	2b05      	cmp	r3, #5
 801d80e:	d171      	bne.n	801d8f4 <sqisign_gen_ibz_sqrt_mod_p+0x274>
        // p % 8 == 5
        mpz_sub_ui(tmp, *p, 1);
 801d810:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d814:	2201      	movs	r2, #1
 801d816:	6879      	ldr	r1, [r7, #4]
 801d818:	4618      	mov	r0, r3
 801d81a:	f007 fac7 	bl	8024dac <mpz_sub_ui>
        mpz_fdiv_q_2exp(tmp, tmp, 2);
 801d81e:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 801d822:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d826:	2202      	movs	r2, #2
 801d828:	4618      	mov	r0, r3
 801d82a:	f007 ff75 	bl	8025718 <mpz_fdiv_q_2exp>
        mpz_powm(tmp, amod, tmp, *p); // a^{(p-1)/4} mod p
 801d82e:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 801d832:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801d836:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	f008 fe34 	bl	80264a8 <mpz_powm>
        if (!mpz_cmp_ui(tmp, 1)) {
 801d840:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d844:	2101      	movs	r1, #1
 801d846:	4618      	mov	r0, r3
 801d848:	f007 f9b1 	bl	8024bae <mpz_cmp_ui>
 801d84c:	4603      	mov	r3, r0
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d117      	bne.n	801d882 <sqisign_gen_ibz_sqrt_mod_p+0x202>
            mpz_add_ui(tmp, *p, 3);
 801d852:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d856:	2203      	movs	r2, #3
 801d858:	6879      	ldr	r1, [r7, #4]
 801d85a:	4618      	mov	r0, r3
 801d85c:	f007 fa8a 	bl	8024d74 <mpz_add_ui>
            mpz_fdiv_q_2exp(tmp, tmp, 3);
 801d860:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 801d864:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d868:	2203      	movs	r2, #3
 801d86a:	4618      	mov	r0, r3
 801d86c:	f007 ff54 	bl	8025718 <mpz_fdiv_q_2exp>
            mpz_powm(*sqrt, amod, tmp, *p); // a^{(p+3)/8} mod p
 801d870:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 801d874:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	68f8      	ldr	r0, [r7, #12]
 801d87c:	f008 fe14 	bl	80264a8 <mpz_powm>
 801d880:	e124      	b.n	801dacc <sqisign_gen_ibz_sqrt_mod_p+0x44c>
        } else {
            mpz_sub_ui(tmp, *p, 5);
 801d882:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d886:	2205      	movs	r2, #5
 801d888:	6879      	ldr	r1, [r7, #4]
 801d88a:	4618      	mov	r0, r3
 801d88c:	f007 fa8e 	bl	8024dac <mpz_sub_ui>
            mpz_fdiv_q_2exp(tmp, tmp, 3); // (p - 5) / 8
 801d890:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 801d894:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d898:	2203      	movs	r2, #3
 801d89a:	4618      	mov	r0, r3
 801d89c:	f007 ff3c 	bl	8025718 <mpz_fdiv_q_2exp>
            mpz_mul_2exp(a4, amod, 2);    // 4*a
 801d8a0:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801d8a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801d8a8:	2202      	movs	r2, #2
 801d8aa:	4618      	mov	r0, r3
 801d8ac:	f007 fc76 	bl	802519c <mpz_mul_2exp>
            mpz_powm(tmp, a4, tmp, *p);
 801d8b0:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 801d8b4:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801d8b8:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	f008 fdf3 	bl	80264a8 <mpz_powm>

            mpz_mul_2exp(a2, amod, 1);
 801d8c2:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801d8c6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d8ca:	2201      	movs	r2, #1
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	f007 fc65 	bl	802519c <mpz_mul_2exp>
            mpz_mul(tmp, a2, tmp);
 801d8d2:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 801d8d6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801d8da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d8de:	4618      	mov	r0, r3
 801d8e0:	f007 fbe3 	bl	80250aa <mpz_mul>
            mpz_mod(*sqrt, tmp, *p);
 801d8e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d8e8:	687a      	ldr	r2, [r7, #4]
 801d8ea:	4619      	mov	r1, r3
 801d8ec:	68f8      	ldr	r0, [r7, #12]
 801d8ee:	f007 fe61 	bl	80255b4 <mpz_mod>
 801d8f2:	e0eb      	b.n	801dacc <sqisign_gen_ibz_sqrt_mod_p+0x44c>
        }
    } else {
        // p % 8 == 1 -> Shanks-Tonelli
        int e = 0;
 801d8f4:	2300      	movs	r3, #0
 801d8f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        mpz_sub_ui(q, *p, 1);
 801d8fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801d8fe:	2201      	movs	r2, #1
 801d900:	6879      	ldr	r1, [r7, #4]
 801d902:	4618      	mov	r0, r3
 801d904:	f007 fa52 	bl	8024dac <mpz_sub_ui>
        while (mpz_tstbit(q, e) == 0)
 801d908:	e004      	b.n	801d914 <sqisign_gen_ibz_sqrt_mod_p+0x294>
            e++;
 801d90a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d90e:	3301      	adds	r3, #1
 801d910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while (mpz_tstbit(q, e) == 0)
 801d914:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801d918:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801d91c:	4611      	mov	r1, r2
 801d91e:	4618      	mov	r0, r3
 801d920:	f009 fc2e 	bl	8027180 <mpz_tstbit>
 801d924:	4603      	mov	r3, r0
 801d926:	2b00      	cmp	r3, #0
 801d928:	d0ef      	beq.n	801d90a <sqisign_gen_ibz_sqrt_mod_p+0x28a>
        mpz_fdiv_q_2exp(q, q, e);
 801d92a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801d92e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 801d932:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801d936:	4618      	mov	r0, r3
 801d938:	f007 feee 	bl	8025718 <mpz_fdiv_q_2exp>

        // 1. find generator - non-quadratic residue
        mpz_set_ui(qnr, 2);
 801d93c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801d940:	2102      	movs	r1, #2
 801d942:	4618      	mov	r0, r3
 801d944:	f006 fe5a 	bl	80245fc <mpz_set_ui>
        while (mpz_legendre(qnr, *p) != -1)
 801d948:	e007      	b.n	801d95a <sqisign_gen_ibz_sqrt_mod_p+0x2da>
            mpz_add_ui(qnr, qnr, 1);
 801d94a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801d94e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801d952:	2201      	movs	r2, #1
 801d954:	4618      	mov	r0, r3
 801d956:	f007 fa0d 	bl	8024d74 <mpz_add_ui>
        while (mpz_legendre(qnr, *p) != -1)
 801d95a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801d95e:	6879      	ldr	r1, [r7, #4]
 801d960:	4618      	mov	r0, r3
 801d962:	f004 fde3 	bl	802252c <mpz_legendre>
 801d966:	4603      	mov	r3, r0
 801d968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d96c:	d1ed      	bne.n	801d94a <sqisign_gen_ibz_sqrt_mod_p+0x2ca>
        mpz_powm(z, qnr, q, *p);
 801d96e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 801d972:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801d976:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	f008 fd94 	bl	80264a8 <mpz_powm>

        // 2. Initialize
        mpz_set(y, z);
 801d980:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801d984:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801d988:	4611      	mov	r1, r2
 801d98a:	4618      	mov	r0, r3
 801d98c:	f006 fe57 	bl	802463e <mpz_set>
        mpz_powm(y, amod, q, *p); // y = a^q mod p
 801d990:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 801d994:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801d998:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	f008 fd83 	bl	80264a8 <mpz_powm>

        mpz_add_ui(tmp, q, 1); // tmp = (q + 1) / 2
 801d9a2:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 801d9a6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d9aa:	2201      	movs	r2, #1
 801d9ac:	4618      	mov	r0, r3
 801d9ae:	f007 f9e1 	bl	8024d74 <mpz_add_ui>
        mpz_fdiv_q_2exp(tmp, tmp, 1);
 801d9b2:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 801d9b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801d9ba:	2201      	movs	r2, #1
 801d9bc:	4618      	mov	r0, r3
 801d9be:	f007 feab 	bl	8025718 <mpz_fdiv_q_2exp>

        mpz_powm(x, amod, tmp, *p); // x = a^(q + 1)/2 mod p
 801d9c2:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 801d9c6:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801d9ca:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	f008 fd6a 	bl	80264a8 <mpz_powm>

        mpz_set_ui(exp, 1);
 801d9d4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801d9d8:	2101      	movs	r1, #1
 801d9da:	4618      	mov	r0, r3
 801d9dc:	f006 fe0e 	bl	80245fc <mpz_set_ui>
        mpz_mul_2exp(exp, exp, e - 2);
 801d9e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d9e4:	3b02      	subs	r3, #2
 801d9e6:	461a      	mov	r2, r3
 801d9e8:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 801d9ec:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	f007 fbd3 	bl	802519c <mpz_mul_2exp>

        for (int i = 0; i < e; ++i) {
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801d9fc:	e05a      	b.n	801dab4 <sqisign_gen_ibz_sqrt_mod_p+0x434>
 801d9fe:	bf00      	nop
 801da00:	08037d44 	.word	0x08037d44
 801da04:	0803b938 	.word	0x0803b938
 801da08:	08037ca4 	.word	0x08037ca4
            mpz_powm(b, y, exp, *p);
 801da0c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 801da10:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801da14:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	f008 fd45 	bl	80264a8 <mpz_powm>

            if (!mpz_cmp(b, pm1)) {
 801da1e:	f107 021c 	add.w	r2, r7, #28
 801da22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801da26:	4611      	mov	r1, r2
 801da28:	4618      	mov	r0, r3
 801da2a:	f007 f8d7 	bl	8024bdc <mpz_cmp>
 801da2e:	4603      	mov	r3, r0
 801da30:	2b00      	cmp	r3, #0
 801da32:	d12a      	bne.n	801da8a <sqisign_gen_ibz_sqrt_mod_p+0x40a>
                mpz_mul(x, x, z);
 801da34:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801da38:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801da3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801da40:	4618      	mov	r0, r3
 801da42:	f007 fb32 	bl	80250aa <mpz_mul>
                mpz_mod(x, x, *p);
 801da46:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801da4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801da4e:	687a      	ldr	r2, [r7, #4]
 801da50:	4618      	mov	r0, r3
 801da52:	f007 fdaf 	bl	80255b4 <mpz_mod>

                mpz_mul(y, y, z);
 801da56:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801da5a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801da5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801da62:	4618      	mov	r0, r3
 801da64:	f007 fb21 	bl	80250aa <mpz_mul>
                mpz_mul(y, y, z);
 801da68:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801da6c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801da70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801da74:	4618      	mov	r0, r3
 801da76:	f007 fb18 	bl	80250aa <mpz_mul>
                mpz_mod(y, y, *p);
 801da7a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801da7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801da82:	687a      	ldr	r2, [r7, #4]
 801da84:	4618      	mov	r0, r3
 801da86:	f007 fd95 	bl	80255b4 <mpz_mod>
            }

            mpz_powm_ui(z, z, 2, *p);
 801da8a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801da8e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	2202      	movs	r2, #2
 801da96:	f008 fe3b 	bl	8026710 <mpz_powm_ui>
            mpz_fdiv_q_2exp(exp, exp, 1);
 801da9a:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 801da9e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801daa2:	2201      	movs	r2, #1
 801daa4:	4618      	mov	r0, r3
 801daa6:	f007 fe37 	bl	8025718 <mpz_fdiv_q_2exp>
        for (int i = 0; i < e; ++i) {
 801daaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801daae:	3301      	adds	r3, #1
 801dab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801dab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801dab8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801dabc:	429a      	cmp	r2, r3
 801dabe:	dba5      	blt.n	801da0c <sqisign_gen_ibz_sqrt_mod_p+0x38c>
        }

        mpz_set(*sqrt, x);
 801dac0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801dac4:	4619      	mov	r1, r3
 801dac6:	68f8      	ldr	r0, [r7, #12]
 801dac8:	f006 fdb9 	bl	802463e <mpz_set>
    ibz_finalize(&a_cp);
    ibz_finalize(&p_cp);
#endif

end:
    mpz_clear(amod);
 801dacc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801dad0:	4618      	mov	r0, r3
 801dad2:	f006 fd26 	bl	8024522 <mpz_clear>
    mpz_clear(tmp);
 801dad6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801dada:	4618      	mov	r0, r3
 801dadc:	f006 fd21 	bl	8024522 <mpz_clear>
    mpz_clear(exp);
 801dae0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801dae4:	4618      	mov	r0, r3
 801dae6:	f006 fd1c 	bl	8024522 <mpz_clear>
    mpz_clear(a4);
 801daea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801daee:	4618      	mov	r0, r3
 801daf0:	f006 fd17 	bl	8024522 <mpz_clear>
    mpz_clear(a2);
 801daf4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801daf8:	4618      	mov	r0, r3
 801dafa:	f006 fd12 	bl	8024522 <mpz_clear>
    mpz_clear(q);
 801dafe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801db02:	4618      	mov	r0, r3
 801db04:	f006 fd0d 	bl	8024522 <mpz_clear>
    mpz_clear(z);
 801db08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801db0c:	4618      	mov	r0, r3
 801db0e:	f006 fd08 	bl	8024522 <mpz_clear>
    mpz_clear(qnr);
 801db12:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801db16:	4618      	mov	r0, r3
 801db18:	f006 fd03 	bl	8024522 <mpz_clear>
    mpz_clear(x);
 801db1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801db20:	4618      	mov	r0, r3
 801db22:	f006 fcfe 	bl	8024522 <mpz_clear>
    mpz_clear(y);
 801db26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801db2a:	4618      	mov	r0, r3
 801db2c:	f006 fcf9 	bl	8024522 <mpz_clear>
    mpz_clear(b);
 801db30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801db34:	4618      	mov	r0, r3
 801db36:	f006 fcf4 	bl	8024522 <mpz_clear>
    mpz_clear(pm1);
 801db3a:	f107 031c 	add.w	r3, r7, #28
 801db3e:	4618      	mov	r0, r3
 801db40:	f006 fcef 	bl	8024522 <mpz_clear>

    return ret;
 801db44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
}
 801db48:	4618      	mov	r0, r3
 801db4a:	37b8      	adds	r7, #184	@ 0xb8
 801db4c:	46bd      	mov	sp, r7
 801db4e:	bd80      	pop	{r7, pc}

0801db50 <sqisign_gen_ibz_cornacchia_prime>:

// solves x^2 + n y^2 == p for positive integers x, y
// assumes that p is prime and -n mod p is a square
int
ibz_cornacchia_prime(ibz_t *x, ibz_t *y, const ibz_t *n, const ibz_t *p)
{
 801db50:	b580      	push	{r7, lr}
 801db52:	b094      	sub	sp, #80	@ 0x50
 801db54:	af00      	add	r7, sp, #0
 801db56:	60f8      	str	r0, [r7, #12]
 801db58:	60b9      	str	r1, [r7, #8]
 801db5a:	607a      	str	r2, [r7, #4]
 801db5c:	603b      	str	r3, [r7, #0]
    ibz_t r0, r1, r2, a, prod;
    ibz_init(&r0);
 801db5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801db62:	4618      	mov	r0, r3
 801db64:	f7ff fa4f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&r1);
 801db68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801db6c:	4618      	mov	r0, r3
 801db6e:	f7ff fa4a 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&r2);
 801db72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801db76:	4618      	mov	r0, r3
 801db78:	f7ff fa45 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&a);
 801db7c:	f107 031c 	add.w	r3, r7, #28
 801db80:	4618      	mov	r0, r3
 801db82:	f7ff fa40 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&prod);
 801db86:	f107 0310 	add.w	r3, r7, #16
 801db8a:	4618      	mov	r0, r3
 801db8c:	f7ff fa3b 	bl	801d006 <sqisign_gen_ibz_init>

    int res = 0;
 801db90:	2300      	movs	r3, #0
 801db92:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // manage case p = 2 separately
    if (!ibz_cmp(p, &ibz_const_two)) {
 801db94:	4980      	ldr	r1, [pc, #512]	@ (801dd98 <sqisign_gen_ibz_cornacchia_prime+0x248>)
 801db96:	6838      	ldr	r0, [r7, #0]
 801db98:	f7ff fb0a 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801db9c:	4603      	mov	r3, r0
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d111      	bne.n	801dbc6 <sqisign_gen_ibz_cornacchia_prime+0x76>
        if (ibz_is_one(n)) {
 801dba2:	6878      	ldr	r0, [r7, #4]
 801dba4:	f7ff fb27 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801dba8:	4603      	mov	r3, r0
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	f000 80cc 	beq.w	801dd48 <sqisign_gen_ibz_cornacchia_prime+0x1f8>
            ibz_set(x, 1);
 801dbb0:	2101      	movs	r1, #1
 801dbb2:	68f8      	ldr	r0, [r7, #12]
 801dbb4:	f7ff fb55 	bl	801d262 <sqisign_gen_ibz_set>
            ibz_set(y, 1);
 801dbb8:	2101      	movs	r1, #1
 801dbba:	68b8      	ldr	r0, [r7, #8]
 801dbbc:	f7ff fb51 	bl	801d262 <sqisign_gen_ibz_set>
            res = 1;
 801dbc0:	2301      	movs	r3, #1
 801dbc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        goto done;
 801dbc4:	e0c0      	b.n	801dd48 <sqisign_gen_ibz_cornacchia_prime+0x1f8>
    }
    // manage case p = n separately
    if (!ibz_cmp(p, n)) {
 801dbc6:	6879      	ldr	r1, [r7, #4]
 801dbc8:	6838      	ldr	r0, [r7, #0]
 801dbca:	f7ff faf1 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801dbce:	4603      	mov	r3, r0
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d10a      	bne.n	801dbea <sqisign_gen_ibz_cornacchia_prime+0x9a>
        ibz_set(x, 0);
 801dbd4:	2100      	movs	r1, #0
 801dbd6:	68f8      	ldr	r0, [r7, #12]
 801dbd8:	f7ff fb43 	bl	801d262 <sqisign_gen_ibz_set>
        ibz_set(y, 1);
 801dbdc:	2101      	movs	r1, #1
 801dbde:	68b8      	ldr	r0, [r7, #8]
 801dbe0:	f7ff fb3f 	bl	801d262 <sqisign_gen_ibz_set>
        res = 1;
 801dbe4:	2301      	movs	r3, #1
 801dbe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        goto done;
 801dbe8:	e0b7      	b.n	801dd5a <sqisign_gen_ibz_cornacchia_prime+0x20a>
    }

    // test coprimality (should always be ok in our cases)
    ibz_gcd(&r2, p, n);
 801dbea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dbee:	687a      	ldr	r2, [r7, #4]
 801dbf0:	6839      	ldr	r1, [r7, #0]
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	f7ff fcfc 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    if (!ibz_is_one(&r2))
 801dbf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dbfc:	4618      	mov	r0, r3
 801dbfe:	f7ff fafa 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 801dc02:	4603      	mov	r3, r0
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	f000 80a1 	beq.w	801dd4c <sqisign_gen_ibz_cornacchia_prime+0x1fc>
        goto done;

    // get sqrt of -n mod p
    ibz_neg(&r2, n);
 801dc0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dc0e:	6879      	ldr	r1, [r7, #4]
 801dc10:	4618      	mov	r0, r3
 801dc12:	f7ff fa3b 	bl	801d08c <sqisign_gen_ibz_neg>
    if (!ibz_sqrt_mod_p(&r2, &r2, p))
 801dc16:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801dc1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dc1e:	683a      	ldr	r2, [r7, #0]
 801dc20:	4618      	mov	r0, r3
 801dc22:	f7ff fd2d 	bl	801d680 <sqisign_gen_ibz_sqrt_mod_p>
 801dc26:	4603      	mov	r3, r0
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	f000 8091 	beq.w	801dd50 <sqisign_gen_ibz_cornacchia_prime+0x200>
        goto done;

    // run loop
    ibz_copy(&prod, p);
 801dc2e:	f107 0310 	add.w	r3, r7, #16
 801dc32:	6839      	ldr	r1, [r7, #0]
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7ff fb21 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&r1, p);
 801dc3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801dc3e:	6839      	ldr	r1, [r7, #0]
 801dc40:	4618      	mov	r0, r3
 801dc42:	f7ff fb1b 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_copy(&r0, p);
 801dc46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801dc4a:	6839      	ldr	r1, [r7, #0]
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	f7ff fb15 	bl	801d27c <sqisign_gen_ibz_copy>
    while (ibz_cmp(&prod, p) >= 0) {
 801dc52:	e022      	b.n	801dc9a <sqisign_gen_ibz_cornacchia_prime+0x14a>
        ibz_div(&a, &r0, &r2, &r1);
 801dc54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801dc58:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801dc5c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801dc60:	f107 001c 	add.w	r0, r7, #28
 801dc64:	f7ff fa2c 	bl	801d0c0 <sqisign_gen_ibz_div>
        ibz_mul(&prod, &r0, &r0);
 801dc68:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801dc6c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801dc70:	f107 0310 	add.w	r3, r7, #16
 801dc74:	4618      	mov	r0, r3
 801dc76:	f7ff f9fa 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_copy(&r2, &r1);
 801dc7a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801dc7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dc82:	4611      	mov	r1, r2
 801dc84:	4618      	mov	r0, r3
 801dc86:	f7ff faf9 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&r1, &r0);
 801dc8a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801dc8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801dc92:	4611      	mov	r1, r2
 801dc94:	4618      	mov	r0, r3
 801dc96:	f7ff faf1 	bl	801d27c <sqisign_gen_ibz_copy>
    while (ibz_cmp(&prod, p) >= 0) {
 801dc9a:	f107 0310 	add.w	r3, r7, #16
 801dc9e:	6839      	ldr	r1, [r7, #0]
 801dca0:	4618      	mov	r0, r3
 801dca2:	f7ff fa85 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801dca6:	4603      	mov	r3, r0
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	dad3      	bge.n	801dc54 <sqisign_gen_ibz_cornacchia_prime+0x104>
    }
    // test if result is solution
    ibz_sub(&a, p, &prod);
 801dcac:	f107 0210 	add.w	r2, r7, #16
 801dcb0:	f107 031c 	add.w	r3, r7, #28
 801dcb4:	6839      	ldr	r1, [r7, #0]
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	f7ff f9ca 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_div(&a, &r2, &a, n);
 801dcbc:	f107 021c 	add.w	r2, r7, #28
 801dcc0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801dcc4:	f107 001c 	add.w	r0, r7, #28
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	f7ff f9f9 	bl	801d0c0 <sqisign_gen_ibz_div>
    if (!ibz_is_zero(&r2))
 801dcce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dcd2:	4618      	mov	r0, r3
 801dcd4:	f7ff fa7b 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 801dcd8:	4603      	mov	r3, r0
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	d03a      	beq.n	801dd54 <sqisign_gen_ibz_cornacchia_prime+0x204>
        goto done;
    if (!ibz_sqrt(y, &a))
 801dcde:	f107 031c 	add.w	r3, r7, #28
 801dce2:	4619      	mov	r1, r3
 801dce4:	68b8      	ldr	r0, [r7, #8]
 801dce6:	f7ff fca7 	bl	801d638 <sqisign_gen_ibz_sqrt>
 801dcea:	4603      	mov	r3, r0
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d033      	beq.n	801dd58 <sqisign_gen_ibz_cornacchia_prime+0x208>
        goto done;

    ibz_copy(x, &r0);
 801dcf0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801dcf4:	4619      	mov	r1, r3
 801dcf6:	68f8      	ldr	r0, [r7, #12]
 801dcf8:	f7ff fac0 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_mul(&a, y, y);
 801dcfc:	f107 031c 	add.w	r3, r7, #28
 801dd00:	68ba      	ldr	r2, [r7, #8]
 801dd02:	68b9      	ldr	r1, [r7, #8]
 801dd04:	4618      	mov	r0, r3
 801dd06:	f7ff f9b2 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&a, &a, n);
 801dd0a:	f107 011c 	add.w	r1, r7, #28
 801dd0e:	f107 031c 	add.w	r3, r7, #28
 801dd12:	687a      	ldr	r2, [r7, #4]
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7ff f9aa 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_add(&prod, &prod, &a);
 801dd1a:	f107 021c 	add.w	r2, r7, #28
 801dd1e:	f107 0110 	add.w	r1, r7, #16
 801dd22:	f107 0310 	add.w	r3, r7, #16
 801dd26:	4618      	mov	r0, r3
 801dd28:	f7ff f983 	bl	801d032 <sqisign_gen_ibz_add>
    res = !ibz_cmp(&prod, p);
 801dd2c:	f107 0310 	add.w	r3, r7, #16
 801dd30:	6839      	ldr	r1, [r7, #0]
 801dd32:	4618      	mov	r0, r3
 801dd34:	f7ff fa3c 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 801dd38:	4603      	mov	r3, r0
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	bf0c      	ite	eq
 801dd3e:	2301      	moveq	r3, #1
 801dd40:	2300      	movne	r3, #0
 801dd42:	b2db      	uxtb	r3, r3
 801dd44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801dd46:	e008      	b.n	801dd5a <sqisign_gen_ibz_cornacchia_prime+0x20a>
        goto done;
 801dd48:	bf00      	nop
 801dd4a:	e006      	b.n	801dd5a <sqisign_gen_ibz_cornacchia_prime+0x20a>
        goto done;
 801dd4c:	bf00      	nop
 801dd4e:	e004      	b.n	801dd5a <sqisign_gen_ibz_cornacchia_prime+0x20a>
        goto done;
 801dd50:	bf00      	nop
 801dd52:	e002      	b.n	801dd5a <sqisign_gen_ibz_cornacchia_prime+0x20a>
        goto done;
 801dd54:	bf00      	nop
 801dd56:	e000      	b.n	801dd5a <sqisign_gen_ibz_cornacchia_prime+0x20a>
        goto done;
 801dd58:	bf00      	nop

done:
    ibz_finalize(&r0);
 801dd5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801dd5e:	4618      	mov	r0, r3
 801dd60:	f7ff f95c 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&r1);
 801dd64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f7ff f957 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&r2);
 801dd6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801dd72:	4618      	mov	r0, r3
 801dd74:	f7ff f952 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&a);
 801dd78:	f107 031c 	add.w	r3, r7, #28
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	f7ff f94d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&prod);
 801dd82:	f107 0310 	add.w	r3, r7, #16
 801dd86:	4618      	mov	r0, r3
 801dd88:	f7ff f948 	bl	801d01c <sqisign_gen_ibz_finalize>
    return res;
 801dd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 801dd8e:	4618      	mov	r0, r3
 801dd90:	3750      	adds	r7, #80	@ 0x50
 801dd92:	46bd      	mov	sp, r7
 801dd94:	bd80      	pop	{r7, pc}
 801dd96:	bf00      	nop
 801dd98:	0803b90c 	.word	0x0803b90c

0801dd9c <copy_point>:
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b082      	sub	sp, #8
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
 801dda4:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	683a      	ldr	r2, [r7, #0]
 801ddaa:	4611      	mov	r1, r2
 801ddac:	4618      	mov	r0, r3
 801ddae:	f7f4 fe3d 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801ddb8:	683b      	ldr	r3, [r7, #0]
 801ddba:	3348      	adds	r3, #72	@ 0x48
 801ddbc:	4619      	mov	r1, r3
 801ddbe:	4610      	mov	r0, r2
 801ddc0:	f7f4 fe34 	bl	8012a2c <fp2_copy>
}
 801ddc4:	bf00      	nop
 801ddc6:	3708      	adds	r7, #8
 801ddc8:	46bd      	mov	sp, r7
 801ddca:	bd80      	pop	{r7, pc}

0801ddcc <copy_curve>:
{
 801ddcc:	b580      	push	{r7, lr}
 801ddce:	b082      	sub	sp, #8
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	6078      	str	r0, [r7, #4]
 801ddd4:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	683a      	ldr	r2, [r7, #0]
 801ddda:	4611      	mov	r1, r2
 801dddc:	4618      	mov	r0, r3
 801ddde:	f7f4 fe25 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801dde8:	683b      	ldr	r3, [r7, #0]
 801ddea:	3348      	adds	r3, #72	@ 0x48
 801ddec:	4619      	mov	r1, r3
 801ddee:	4610      	mov	r0, r2
 801ddf0:	f7f4 fe1c 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 801ddf4:	683b      	ldr	r3, [r7, #0]
 801ddf6:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801de06:	683b      	ldr	r3, [r7, #0]
 801de08:	3390      	adds	r3, #144	@ 0x90
 801de0a:	4619      	mov	r1, r3
 801de0c:	4610      	mov	r0, r2
 801de0e:	f7ff ffc5 	bl	801dd9c <copy_point>
}
 801de12:	bf00      	nop
 801de14:	3708      	adds	r7, #8
 801de16:	46bd      	mov	sp, r7
 801de18:	bd80      	pop	{r7, pc}

0801de1a <AC_to_A24>:
{
 801de1a:	b580      	push	{r7, lr}
 801de1c:	b082      	sub	sp, #8
 801de1e:	af00      	add	r7, sp, #0
 801de20:	6078      	str	r0, [r7, #4]
 801de22:	6039      	str	r1, [r7, #0]
    if (E->is_A24_computed_and_normalized) {
 801de24:	683b      	ldr	r3, [r7, #0]
 801de26:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d006      	beq.n	801de3c <AC_to_A24+0x22>
        copy_point(A24, &E->A24);
 801de2e:	683b      	ldr	r3, [r7, #0]
 801de30:	3390      	adds	r3, #144	@ 0x90
 801de32:	4619      	mov	r1, r3
 801de34:	6878      	ldr	r0, [r7, #4]
 801de36:	f7ff ffb1 	bl	801dd9c <copy_point>
        return;
 801de3a:	e01c      	b.n	801de76 <AC_to_A24+0x5c>
    fp2_add(&A24->z, &E->C, &E->C);
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801de42:	683b      	ldr	r3, [r7, #0]
 801de44:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801de48:	683b      	ldr	r3, [r7, #0]
 801de4a:	3348      	adds	r3, #72	@ 0x48
 801de4c:	461a      	mov	r2, r3
 801de4e:	f7f4 fe05 	bl	8012a5c <fp2_add>
    fp2_add(&A24->x, &E->A, &A24->z);
 801de52:	6878      	ldr	r0, [r7, #4]
 801de54:	6839      	ldr	r1, [r7, #0]
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	3348      	adds	r3, #72	@ 0x48
 801de5a:	461a      	mov	r2, r3
 801de5c:	f7f4 fdfe 	bl	8012a5c <fp2_add>
    fp2_add(&A24->z, &A24->z, &A24->z);
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	3348      	adds	r3, #72	@ 0x48
 801de70:	461a      	mov	r2, r3
 801de72:	f7f4 fdf3 	bl	8012a5c <fp2_add>
}
 801de76:	3708      	adds	r7, #8
 801de78:	46bd      	mov	sp, r7
 801de7a:	bd80      	pop	{r7, pc}

0801de7c <A24_to_AC>:
{
 801de7c:	b580      	push	{r7, lr}
 801de7e:	b082      	sub	sp, #8
 801de80:	af00      	add	r7, sp, #0
 801de82:	6078      	str	r0, [r7, #4]
 801de84:	6039      	str	r1, [r7, #0]
    fp2_add(&E->A, &A24->x, &A24->x);
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	6839      	ldr	r1, [r7, #0]
 801de8a:	683a      	ldr	r2, [r7, #0]
 801de8c:	4618      	mov	r0, r3
 801de8e:	f7f4 fde5 	bl	8012a5c <fp2_add>
    fp2_sub(&E->A, &E->A, &A24->z);
 801de92:	6878      	ldr	r0, [r7, #4]
 801de94:	6879      	ldr	r1, [r7, #4]
 801de96:	683b      	ldr	r3, [r7, #0]
 801de98:	3348      	adds	r3, #72	@ 0x48
 801de9a:	461a      	mov	r2, r3
 801de9c:	f7f4 fe14 	bl	8012ac8 <fp2_sub>
    fp2_add(&E->A, &E->A, &E->A);
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	6879      	ldr	r1, [r7, #4]
 801dea4:	687a      	ldr	r2, [r7, #4]
 801dea6:	4618      	mov	r0, r3
 801dea8:	f7f4 fdd8 	bl	8012a5c <fp2_add>
    fp2_copy(&E->C, &A24->z);
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801deb2:	683b      	ldr	r3, [r7, #0]
 801deb4:	3348      	adds	r3, #72	@ 0x48
 801deb6:	4619      	mov	r1, r3
 801deb8:	4610      	mov	r0, r2
 801deba:	f7f4 fdb7 	bl	8012a2c <fp2_copy>
}
 801debe:	bf00      	nop
 801dec0:	3708      	adds	r7, #8
 801dec2:	46bd      	mov	sp, r7
 801dec4:	bd80      	pop	{r7, pc}
	...

0801dec8 <ec_eval_even_strategy>:
ec_eval_even_strategy(ec_curve_t *curve,
                      ec_point_t *points,
                      unsigned len_points,
                      const ec_point_t *kernel,
                      const int isog_len)
{
 801dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801decc:	f5ad 7d6d 	sub.w	sp, sp, #948	@ 0x3b4
 801ded0:	af22      	add	r7, sp, #136	@ 0x88
 801ded2:	f507 744a 	add.w	r4, r7, #808	@ 0x328
 801ded6:	f5a4 743f 	sub.w	r4, r4, #764	@ 0x2fc
 801deda:	6020      	str	r0, [r4, #0]
 801dedc:	f507 704a 	add.w	r0, r7, #808	@ 0x328
 801dee0:	f5a0 7040 	sub.w	r0, r0, #768	@ 0x300
 801dee4:	6001      	str	r1, [r0, #0]
 801dee6:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 801deea:	f5a1 7141 	sub.w	r1, r1, #772	@ 0x304
 801deee:	600a      	str	r2, [r1, #0]
 801def0:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 801def4:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 801def8:	6013      	str	r3, [r2, #0]
 801defa:	466b      	mov	r3, sp
 801defc:	607b      	str	r3, [r7, #4]
    ec_curve_normalize_A24(curve);
 801defe:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801df02:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 801df06:	6818      	ldr	r0, [r3, #0]
 801df08:	f7ed fb0a 	bl	800b520 <ec_curve_normalize_A24>
    ec_point_t A24;
    copy_point(&A24, &curve->A24);
 801df0c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801df10:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801df1a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 801df1e:	4611      	mov	r1, r2
 801df20:	4618      	mov	r0, r3
 801df22:	f7ff ff3b 	bl	801dd9c <copy_point>

    int space = 1;
 801df26:	2301      	movs	r3, #1
 801df28:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
    for (int i = 1; i < isog_len; i *= 2)
 801df2c:	2301      	movs	r3, #1
 801df2e:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 801df32:	e009      	b.n	801df48 <ec_eval_even_strategy+0x80>
        ++space;
 801df34:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801df38:	3301      	adds	r3, #1
 801df3a:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
    for (int i = 1; i < isog_len; i *= 2)
 801df3e:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 801df42:	005b      	lsls	r3, r3, #1
 801df44:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 801df48:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 801df4c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801df50:	429a      	cmp	r2, r3
 801df52:	dbef      	blt.n	801df34 <ec_eval_even_strategy+0x6c>

    // Stack of remaining kernel points and their associated orders
    ec_point_t splits[space];
 801df54:	f8d7 4324 	ldr.w	r4, [r7, #804]	@ 0x324
 801df58:	1e63      	subs	r3, r4, #1
 801df5a:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801df5e:	4622      	mov	r2, r4
 801df60:	2300      	movs	r3, #0
 801df62:	61ba      	str	r2, [r7, #24]
 801df64:	61fb      	str	r3, [r7, #28]
 801df66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801df6a:	f04f 0000 	mov.w	r0, #0
 801df6e:	f04f 0100 	mov.w	r1, #0
 801df72:	00d9      	lsls	r1, r3, #3
 801df74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801df78:	00d0      	lsls	r0, r2, #3
 801df7a:	4602      	mov	r2, r0
 801df7c:	460b      	mov	r3, r1
 801df7e:	69b9      	ldr	r1, [r7, #24]
 801df80:	eb12 0801 	adds.w	r8, r2, r1
 801df84:	69f9      	ldr	r1, [r7, #28]
 801df86:	eb43 0901 	adc.w	r9, r3, r1
 801df8a:	f04f 0200 	mov.w	r2, #0
 801df8e:	f04f 0300 	mov.w	r3, #0
 801df92:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 801df96:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 801df9a:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 801df9e:	4622      	mov	r2, r4
 801dfa0:	2300      	movs	r3, #0
 801dfa2:	613a      	str	r2, [r7, #16]
 801dfa4:	617b      	str	r3, [r7, #20]
 801dfa6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 801dfaa:	4642      	mov	r2, r8
 801dfac:	464b      	mov	r3, r9
 801dfae:	f04f 0000 	mov.w	r0, #0
 801dfb2:	f04f 0100 	mov.w	r1, #0
 801dfb6:	00d9      	lsls	r1, r3, #3
 801dfb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801dfbc:	00d0      	lsls	r0, r2, #3
 801dfbe:	4602      	mov	r2, r0
 801dfc0:	460b      	mov	r3, r1
 801dfc2:	4641      	mov	r1, r8
 801dfc4:	eb12 0a01 	adds.w	sl, r2, r1
 801dfc8:	4649      	mov	r1, r9
 801dfca:	eb43 0b01 	adc.w	fp, r3, r1
 801dfce:	f04f 0200 	mov.w	r2, #0
 801dfd2:	f04f 0300 	mov.w	r3, #0
 801dfd6:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 801dfda:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 801dfde:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 801dfe2:	4622      	mov	r2, r4
 801dfe4:	4613      	mov	r3, r2
 801dfe6:	00db      	lsls	r3, r3, #3
 801dfe8:	4413      	add	r3, r2
 801dfea:	011b      	lsls	r3, r3, #4
 801dfec:	3307      	adds	r3, #7
 801dfee:	08db      	lsrs	r3, r3, #3
 801dff0:	00db      	lsls	r3, r3, #3
 801dff2:	ebad 0d03 	sub.w	sp, sp, r3
 801dff6:	ab22      	add	r3, sp, #136	@ 0x88
 801dff8:	3303      	adds	r3, #3
 801dffa:	089b      	lsrs	r3, r3, #2
 801dffc:	009b      	lsls	r3, r3, #2
 801dffe:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
    uint16_t todo[space];
 801e002:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 801e006:	1e4b      	subs	r3, r1, #1
 801e008:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 801e00c:	460a      	mov	r2, r1
 801e00e:	2300      	movs	r3, #0
 801e010:	60ba      	str	r2, [r7, #8]
 801e012:	60fb      	str	r3, [r7, #12]
 801e014:	f04f 0200 	mov.w	r2, #0
 801e018:	f04f 0300 	mov.w	r3, #0
 801e01c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801e020:	4648      	mov	r0, r9
 801e022:	0103      	lsls	r3, r0, #4
 801e024:	4640      	mov	r0, r8
 801e026:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 801e02a:	4640      	mov	r0, r8
 801e02c:	0102      	lsls	r2, r0, #4
 801e02e:	460a      	mov	r2, r1
 801e030:	2300      	movs	r3, #0
 801e032:	4615      	mov	r5, r2
 801e034:	461e      	mov	r6, r3
 801e036:	f04f 0200 	mov.w	r2, #0
 801e03a:	f04f 0300 	mov.w	r3, #0
 801e03e:	0133      	lsls	r3, r6, #4
 801e040:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
 801e044:	012a      	lsls	r2, r5, #4
 801e046:	460b      	mov	r3, r1
 801e048:	005b      	lsls	r3, r3, #1
 801e04a:	3307      	adds	r3, #7
 801e04c:	08db      	lsrs	r3, r3, #3
 801e04e:	00db      	lsls	r3, r3, #3
 801e050:	ebad 0d03 	sub.w	sp, sp, r3
 801e054:	ab22      	add	r3, sp, #136	@ 0x88
 801e056:	3301      	adds	r3, #1
 801e058:	085b      	lsrs	r3, r3, #1
 801e05a:	005b      	lsls	r3, r3, #1
 801e05c:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
    splits[0] = *kernel;
 801e060:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e064:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801e068:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 801e06c:	681b      	ldr	r3, [r3, #0]
 801e06e:	4610      	mov	r0, r2
 801e070:	4619      	mov	r1, r3
 801e072:	2390      	movs	r3, #144	@ 0x90
 801e074:	461a      	mov	r2, r3
 801e076:	f017 fe92 	bl	8035d9e <memcpy>
    todo[0] = isog_len;
 801e07a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801e07e:	b29a      	uxth	r2, r3
 801e080:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e084:	801a      	strh	r2, [r3, #0]

    int current = 0; // Pointer to current top of stack
 801e086:	2300      	movs	r3, #0
 801e088:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c

    // Chain of 4-isogenies
    for (int j = 0; j < isog_len / 2; ++j) {
 801e08c:	2300      	movs	r3, #0
 801e08e:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 801e092:	e1bb      	b.n	801e40c <ec_eval_even_strategy+0x544>
        assert(current >= 0);
 801e094:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e098:	2b00      	cmp	r3, #0
 801e09a:	da05      	bge.n	801e0a8 <ec_eval_even_strategy+0x1e0>
 801e09c:	4bb3      	ldr	r3, [pc, #716]	@ (801e36c <ec_eval_even_strategy+0x4a4>)
 801e09e:	4ab4      	ldr	r2, [pc, #720]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e0a0:	211e      	movs	r1, #30
 801e0a2:	48b4      	ldr	r0, [pc, #720]	@ (801e374 <ec_eval_even_strategy+0x4ac>)
 801e0a4:	f017 f8c8 	bl	8035238 <__assert_func>
        assert(todo[current] >= 1);
 801e0a8:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e0ac:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e0b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	f040 8082 	bne.w	801e1be <ec_eval_even_strategy+0x2f6>
 801e0ba:	4baf      	ldr	r3, [pc, #700]	@ (801e378 <ec_eval_even_strategy+0x4b0>)
 801e0bc:	4aac      	ldr	r2, [pc, #688]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e0be:	211f      	movs	r1, #31
 801e0c0:	48ac      	ldr	r0, [pc, #688]	@ (801e374 <ec_eval_even_strategy+0x4ac>)
 801e0c2:	f017 f8b9 	bl	8035238 <__assert_func>
        // Get the next point of order 4
        while (todo[current] != 2) {
            assert(todo[current] >= 3);
 801e0c6:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e0ca:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e0ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e0d2:	2b02      	cmp	r3, #2
 801e0d4:	d805      	bhi.n	801e0e2 <ec_eval_even_strategy+0x21a>
 801e0d6:	4ba9      	ldr	r3, [pc, #676]	@ (801e37c <ec_eval_even_strategy+0x4b4>)
 801e0d8:	4aa5      	ldr	r2, [pc, #660]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e0da:	2122      	movs	r1, #34	@ 0x22
 801e0dc:	48a5      	ldr	r0, [pc, #660]	@ (801e374 <ec_eval_even_strategy+0x4ac>)
 801e0de:	f017 f8ab 	bl	8035238 <__assert_func>
            // A new split will be added
            ++current;
 801e0e2:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e0e6:	3301      	adds	r3, #1
 801e0e8:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
            assert(current < space);
 801e0ec:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e0f0:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801e0f4:	429a      	cmp	r2, r3
 801e0f6:	db05      	blt.n	801e104 <ec_eval_even_strategy+0x23c>
 801e0f8:	4ba1      	ldr	r3, [pc, #644]	@ (801e380 <ec_eval_even_strategy+0x4b8>)
 801e0fa:	4a9d      	ldr	r2, [pc, #628]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e0fc:	2125      	movs	r1, #37	@ 0x25
 801e0fe:	489d      	ldr	r0, [pc, #628]	@ (801e374 <ec_eval_even_strategy+0x4ac>)
 801e100:	f017 f89a 	bl	8035238 <__assert_func>
            // We set the seed of the new split to be computed and saved
            copy_point(&splits[current], &splits[current - 1]);
 801e104:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e108:	4613      	mov	r3, r2
 801e10a:	00db      	lsls	r3, r3, #3
 801e10c:	4413      	add	r3, r2
 801e10e:	011b      	lsls	r3, r3, #4
 801e110:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e114:	18d0      	adds	r0, r2, r3
 801e116:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e11a:	1e5a      	subs	r2, r3, #1
 801e11c:	4613      	mov	r3, r2
 801e11e:	00db      	lsls	r3, r3, #3
 801e120:	4413      	add	r3, r2
 801e122:	011b      	lsls	r3, r3, #4
 801e124:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e128:	4413      	add	r3, r2
 801e12a:	4619      	mov	r1, r3
 801e12c:	f7ff fe36 	bl	801dd9c <copy_point>
            // if we copied from the very first element, then we perform one additional doubling
            unsigned num_dbls = todo[current - 1] / 4 * 2 + todo[current - 1] % 2;
 801e130:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e134:	1e5a      	subs	r2, r3, #1
 801e136:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e13a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e13e:	089b      	lsrs	r3, r3, #2
 801e140:	b29b      	uxth	r3, r3
 801e142:	005a      	lsls	r2, r3, #1
 801e144:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e148:	1e59      	subs	r1, r3, #1
 801e14a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e14e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801e152:	f003 0301 	and.w	r3, r3, #1
 801e156:	4413      	add	r3, r2
 801e158:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
            todo[current] = todo[current - 1] - num_dbls;
 801e15c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e160:	1e5a      	subs	r2, r3, #1
 801e162:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e166:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e16a:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801e16e:	b29b      	uxth	r3, r3
 801e170:	1ad3      	subs	r3, r2, r3
 801e172:	b299      	uxth	r1, r3
 801e174:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e178:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e17c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            while (num_dbls--)
 801e180:	e016      	b.n	801e1b0 <ec_eval_even_strategy+0x2e8>
                xDBL_A24(&splits[current], &splits[current], &A24, false);
 801e182:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e186:	4613      	mov	r3, r2
 801e188:	00db      	lsls	r3, r3, #3
 801e18a:	4413      	add	r3, r2
 801e18c:	011b      	lsls	r3, r3, #4
 801e18e:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e192:	18d0      	adds	r0, r2, r3
 801e194:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e198:	4613      	mov	r3, r2
 801e19a:	00db      	lsls	r3, r3, #3
 801e19c:	4413      	add	r3, r2
 801e19e:	011b      	lsls	r3, r3, #4
 801e1a0:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e1a4:	18d1      	adds	r1, r2, r3
 801e1a6:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	f7ed fd6e 	bl	800bc8c <xDBL_A24>
            while (num_dbls--)
 801e1b0:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801e1b4:	1e5a      	subs	r2, r3, #1
 801e1b6:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d1e1      	bne.n	801e182 <ec_eval_even_strategy+0x2ba>
        while (todo[current] != 2) {
 801e1be:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e1c2:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e1c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e1ca:	2b02      	cmp	r3, #2
 801e1cc:	f47f af7b 	bne.w	801e0c6 <ec_eval_even_strategy+0x1fe>
        }

        if (j == 0) {
 801e1d0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	d140      	bne.n	801e25a <ec_eval_even_strategy+0x392>
            assert(fp2_is_one(&A24.z));
 801e1d8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 801e1dc:	3348      	adds	r3, #72	@ 0x48
 801e1de:	4618      	mov	r0, r3
 801e1e0:	f7f4 fc0c 	bl	80129fc <fp2_is_one>
 801e1e4:	4603      	mov	r3, r0
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d105      	bne.n	801e1f6 <ec_eval_even_strategy+0x32e>
 801e1ea:	4b66      	ldr	r3, [pc, #408]	@ (801e384 <ec_eval_even_strategy+0x4bc>)
 801e1ec:	4a60      	ldr	r2, [pc, #384]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e1ee:	2130      	movs	r1, #48	@ 0x30
 801e1f0:	4860      	ldr	r0, [pc, #384]	@ (801e374 <ec_eval_even_strategy+0x4ac>)
 801e1f2:	f017 f821 	bl	8035238 <__assert_func>
            if (!ec_is_four_torsion(&splits[current], curve))
 801e1f6:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e1fa:	4613      	mov	r3, r2
 801e1fc:	00db      	lsls	r3, r3, #3
 801e1fe:	4413      	add	r3, r2
 801e200:	011b      	lsls	r3, r3, #4
 801e202:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e206:	441a      	add	r2, r3
 801e208:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801e20c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 801e210:	6819      	ldr	r1, [r3, #0]
 801e212:	4610      	mov	r0, r2
 801e214:	f7ed fae4 	bl	800b7e0 <ec_is_four_torsion>
 801e218:	4603      	mov	r3, r0
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d102      	bne.n	801e224 <ec_eval_even_strategy+0x35c>
                return -1;
 801e21e:	f04f 33ff 	mov.w	r3, #4294967295
 801e222:	e1ad      	b.n	801e580 <ec_eval_even_strategy+0x6b8>

            ec_point_t T;
            xDBL_A24(&T, &splits[current], &A24, false);
 801e224:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e228:	4613      	mov	r3, r2
 801e22a:	00db      	lsls	r3, r3, #3
 801e22c:	4413      	add	r3, r2
 801e22e:	011b      	lsls	r3, r3, #4
 801e230:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e234:	18d1      	adds	r1, r2, r3
 801e236:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 801e23a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 801e23e:	2300      	movs	r3, #0
 801e240:	f7ed fd24 	bl	800bc8c <xDBL_A24>
            if (fp2_is_zero(&T.x))
 801e244:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e248:	4618      	mov	r0, r3
 801e24a:	f7f4 fba7 	bl	801299c <fp2_is_zero>
 801e24e:	4603      	mov	r3, r0
 801e250:	2b00      	cmp	r3, #0
 801e252:	d063      	beq.n	801e31c <ec_eval_even_strategy+0x454>
                return -1; // special isogenies not allowed
 801e254:	f04f 33ff 	mov.w	r3, #4294967295
 801e258:	e192      	b.n	801e580 <ec_eval_even_strategy+0x6b8>
        } else {
            assert(todo[current] == 2);
 801e25a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e25e:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e262:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e266:	2b02      	cmp	r3, #2
 801e268:	d005      	beq.n	801e276 <ec_eval_even_strategy+0x3ae>
 801e26a:	4b47      	ldr	r3, [pc, #284]	@ (801e388 <ec_eval_even_strategy+0x4c0>)
 801e26c:	4a40      	ldr	r2, [pc, #256]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e26e:	2139      	movs	r1, #57	@ 0x39
 801e270:	4840      	ldr	r0, [pc, #256]	@ (801e374 <ec_eval_even_strategy+0x4ac>)
 801e272:	f016 ffe1 	bl	8035238 <__assert_func>
#ifndef NDEBUG
            if (fp2_is_zero(&splits[current].z))
 801e276:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e27a:	4613      	mov	r3, r2
 801e27c:	00db      	lsls	r3, r3, #3
 801e27e:	4413      	add	r3, r2
 801e280:	011b      	lsls	r3, r3, #4
 801e282:	3348      	adds	r3, #72	@ 0x48
 801e284:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e288:	4413      	add	r3, r2
 801e28a:	4618      	mov	r0, r3
 801e28c:	f7f4 fb86 	bl	801299c <fp2_is_zero>
 801e290:	4603      	mov	r3, r0
 801e292:	2b00      	cmp	r3, #0
 801e294:	d007      	beq.n	801e2a6 <ec_eval_even_strategy+0x3de>
                debug_print("splitting point z coordinate is unexpectedly zero");
 801e296:	4b36      	ldr	r3, [pc, #216]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e298:	9300      	str	r3, [sp, #0]
 801e29a:	233c      	movs	r3, #60	@ 0x3c
 801e29c:	4a3b      	ldr	r2, [pc, #236]	@ (801e38c <ec_eval_even_strategy+0x4c4>)
 801e29e:	493c      	ldr	r1, [pc, #240]	@ (801e390 <ec_eval_even_strategy+0x4c8>)
 801e2a0:	483c      	ldr	r0, [pc, #240]	@ (801e394 <ec_eval_even_strategy+0x4cc>)
 801e2a2:	f017 fb4b 	bl	803593c <iprintf>

            ec_point_t test;
            xDBL_A24(&test, &splits[current], &A24, false);
 801e2a6:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e2aa:	4613      	mov	r3, r2
 801e2ac:	00db      	lsls	r3, r3, #3
 801e2ae:	4413      	add	r3, r2
 801e2b0:	011b      	lsls	r3, r3, #4
 801e2b2:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e2b6:	18d1      	adds	r1, r2, r3
 801e2b8:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 801e2bc:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 801e2c0:	2300      	movs	r3, #0
 801e2c2:	f7ed fce3 	bl	800bc8c <xDBL_A24>
            if (fp2_is_zero(&test.z))
 801e2c6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e2ca:	3348      	adds	r3, #72	@ 0x48
 801e2cc:	4618      	mov	r0, r3
 801e2ce:	f7f4 fb65 	bl	801299c <fp2_is_zero>
 801e2d2:	4603      	mov	r3, r0
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d007      	beq.n	801e2e8 <ec_eval_even_strategy+0x420>
                debug_print("z coordinate is unexpectedly zero before doubling");
 801e2d8:	4b25      	ldr	r3, [pc, #148]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e2da:	9300      	str	r3, [sp, #0]
 801e2dc:	2341      	movs	r3, #65	@ 0x41
 801e2de:	4a2b      	ldr	r2, [pc, #172]	@ (801e38c <ec_eval_even_strategy+0x4c4>)
 801e2e0:	492d      	ldr	r1, [pc, #180]	@ (801e398 <ec_eval_even_strategy+0x4d0>)
 801e2e2:	482c      	ldr	r0, [pc, #176]	@ (801e394 <ec_eval_even_strategy+0x4cc>)
 801e2e4:	f017 fb2a 	bl	803593c <iprintf>
            xDBL_A24(&test, &test, &A24, false);
 801e2e8:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 801e2ec:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801e2f0:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	f7ed fcc9 	bl	800bc8c <xDBL_A24>
            if (!fp2_is_zero(&test.z))
 801e2fa:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e2fe:	3348      	adds	r3, #72	@ 0x48
 801e300:	4618      	mov	r0, r3
 801e302:	f7f4 fb4b 	bl	801299c <fp2_is_zero>
 801e306:	4603      	mov	r3, r0
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d107      	bne.n	801e31c <ec_eval_even_strategy+0x454>
                debug_print("z coordinate is unexpectedly not zero after doubling");
 801e30c:	4b18      	ldr	r3, [pc, #96]	@ (801e370 <ec_eval_even_strategy+0x4a8>)
 801e30e:	9300      	str	r3, [sp, #0]
 801e310:	2344      	movs	r3, #68	@ 0x44
 801e312:	4a1e      	ldr	r2, [pc, #120]	@ (801e38c <ec_eval_even_strategy+0x4c4>)
 801e314:	4921      	ldr	r1, [pc, #132]	@ (801e39c <ec_eval_even_strategy+0x4d4>)
 801e316:	481f      	ldr	r0, [pc, #124]	@ (801e394 <ec_eval_even_strategy+0x4cc>)
 801e318:	f017 fb10 	bl	803593c <iprintf>
#endif
        }

        // Evaluate 4-isogeny
        ec_kps4_t kps4;
        xisog_4(&kps4, &A24, splits[current]);
 801e31c:	f8d7 1308 	ldr.w	r1, [r7, #776]	@ 0x308
 801e320:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e324:	4613      	mov	r3, r2
 801e326:	00db      	lsls	r3, r3, #3
 801e328:	4413      	add	r3, r2
 801e32a:	011b      	lsls	r3, r3, #4
 801e32c:	18cc      	adds	r4, r1, r3
 801e32e:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 801e332:	f107 05c0 	add.w	r5, r7, #192	@ 0xc0
 801e336:	4668      	mov	r0, sp
 801e338:	f104 0308 	add.w	r3, r4, #8
 801e33c:	2288      	movs	r2, #136	@ 0x88
 801e33e:	4619      	mov	r1, r3
 801e340:	f017 fd2d 	bl	8035d9e <memcpy>
 801e344:	e894 000c 	ldmia.w	r4, {r2, r3}
 801e348:	4631      	mov	r1, r6
 801e34a:	4628      	mov	r0, r5
 801e34c:	f013 fe30 	bl	8031fb0 <xisog_4>
        xeval_4(splits, splits, current, &kps4);
 801e350:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e354:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801e358:	f8d7 1308 	ldr.w	r1, [r7, #776]	@ 0x308
 801e35c:	f8d7 0308 	ldr.w	r0, [r7, #776]	@ 0x308
 801e360:	f013 fc29 	bl	8031bb6 <xeval_4>
        for (int i = 0; i < current; ++i)
 801e364:	2300      	movs	r3, #0
 801e366:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 801e36a:	e02c      	b.n	801e3c6 <ec_eval_even_strategy+0x4fe>
 801e36c:	08037d6c 	.word	0x08037d6c
 801e370:	08037d7c 	.word	0x08037d7c
 801e374:	08037d80 	.word	0x08037d80
 801e378:	08037d9c 	.word	0x08037d9c
 801e37c:	08037db0 	.word	0x08037db0
 801e380:	08037dc4 	.word	0x08037dc4
 801e384:	08037dd4 	.word	0x08037dd4
 801e388:	08037de8 	.word	0x08037de8
 801e38c:	08037dfc 	.word	0x08037dfc
 801e390:	08037e0c 	.word	0x08037e0c
 801e394:	08037e40 	.word	0x08037e40
 801e398:	08037e70 	.word	0x08037e70
 801e39c:	08037ea4 	.word	0x08037ea4
            todo[i] -= 2;
 801e3a0:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e3a4:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 801e3a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e3ac:	3b02      	subs	r3, #2
 801e3ae:	b299      	uxth	r1, r3
 801e3b0:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801e3b4:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 801e3b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i = 0; i < current; ++i)
 801e3bc:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801e3c0:	3301      	adds	r3, #1
 801e3c2:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 801e3c6:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 801e3ca:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e3ce:	429a      	cmp	r2, r3
 801e3d0:	dbe6      	blt.n	801e3a0 <ec_eval_even_strategy+0x4d8>
        xeval_4(points, points, len_points, &kps4);
 801e3d2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801e3d6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801e3da:	681a      	ldr	r2, [r3, #0]
 801e3dc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e3e0:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 801e3e4:	f5a1 7140 	sub.w	r1, r1, #768	@ 0x300
 801e3e8:	f507 704a 	add.w	r0, r7, #808	@ 0x328
 801e3ec:	f5a0 7040 	sub.w	r0, r0, #768	@ 0x300
 801e3f0:	6809      	ldr	r1, [r1, #0]
 801e3f2:	6800      	ldr	r0, [r0, #0]
 801e3f4:	f013 fbdf 	bl	8031bb6 <xeval_4>

        --current;
 801e3f8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e3fc:	3b01      	subs	r3, #1
 801e3fe:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
    for (int j = 0; j < isog_len / 2; ++j) {
 801e402:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801e406:	3301      	adds	r3, #1
 801e408:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 801e40c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801e410:	0fda      	lsrs	r2, r3, #31
 801e412:	4413      	add	r3, r2
 801e414:	105b      	asrs	r3, r3, #1
 801e416:	461a      	mov	r2, r3
 801e418:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801e41c:	4293      	cmp	r3, r2
 801e41e:	f6ff ae39 	blt.w	801e094 <ec_eval_even_strategy+0x1cc>
    }
    assert(isog_len % 2 ? !current : current == -1);
 801e422:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801e426:	f003 0301 	and.w	r3, r3, #1
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d007      	beq.n	801e43e <ec_eval_even_strategy+0x576>
 801e42e:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e432:	2b00      	cmp	r3, #0
 801e434:	bf0c      	ite	eq
 801e436:	2301      	moveq	r3, #1
 801e438:	2300      	movne	r3, #0
 801e43a:	b2db      	uxtb	r3, r3
 801e43c:	e007      	b.n	801e44e <ec_eval_even_strategy+0x586>
 801e43e:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801e442:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e446:	bf0c      	ite	eq
 801e448:	2301      	moveq	r3, #1
 801e44a:	2300      	movne	r3, #0
 801e44c:	b2db      	uxtb	r3, r3
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d105      	bne.n	801e45e <ec_eval_even_strategy+0x596>
 801e452:	4b4f      	ldr	r3, [pc, #316]	@ (801e590 <ec_eval_even_strategy+0x6c8>)
 801e454:	4a4f      	ldr	r2, [pc, #316]	@ (801e594 <ec_eval_even_strategy+0x6cc>)
 801e456:	2152      	movs	r1, #82	@ 0x52
 801e458:	484f      	ldr	r0, [pc, #316]	@ (801e598 <ec_eval_even_strategy+0x6d0>)
 801e45a:	f016 feed 	bl	8035238 <__assert_func>

    // Final 2-isogeny
    if (isog_len % 2) {
 801e45e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801e462:	f003 0301 	and.w	r3, r3, #1
 801e466:	2b00      	cmp	r3, #0
 801e468:	d077      	beq.n	801e55a <ec_eval_even_strategy+0x692>
#ifndef NDEBUG
        if (fp2_is_zero(&splits[0].z))
 801e46a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801e46e:	3348      	adds	r3, #72	@ 0x48
 801e470:	4618      	mov	r0, r3
 801e472:	f7f4 fa93 	bl	801299c <fp2_is_zero>
 801e476:	4603      	mov	r3, r0
 801e478:	2b00      	cmp	r3, #0
 801e47a:	d007      	beq.n	801e48c <ec_eval_even_strategy+0x5c4>
            debug_print("splitting point z coordinate is unexpectedly zero");
 801e47c:	4b45      	ldr	r3, [pc, #276]	@ (801e594 <ec_eval_even_strategy+0x6cc>)
 801e47e:	9300      	str	r3, [sp, #0]
 801e480:	2358      	movs	r3, #88	@ 0x58
 801e482:	4a46      	ldr	r2, [pc, #280]	@ (801e59c <ec_eval_even_strategy+0x6d4>)
 801e484:	4946      	ldr	r1, [pc, #280]	@ (801e5a0 <ec_eval_even_strategy+0x6d8>)
 801e486:	4847      	ldr	r0, [pc, #284]	@ (801e5a4 <ec_eval_even_strategy+0x6dc>)
 801e488:	f017 fa58 	bl	803593c <iprintf>
        ec_point_t test;
        copy_point(&test, &splits[0]);
 801e48c:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e490:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e494:	4611      	mov	r1, r2
 801e496:	4618      	mov	r0, r3
 801e498:	f7ff fc80 	bl	801dd9c <copy_point>
        xDBL_A24(&test, &test, &A24, false);
 801e49c:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 801e4a0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e4a4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801e4a8:	2300      	movs	r3, #0
 801e4aa:	f7ed fbef 	bl	800bc8c <xDBL_A24>
        if (!fp2_is_zero(&test.z))
 801e4ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e4b2:	3348      	adds	r3, #72	@ 0x48
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	f7f4 fa71 	bl	801299c <fp2_is_zero>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d107      	bne.n	801e4d0 <ec_eval_even_strategy+0x608>
            debug_print("z coordinate is unexpectedly not zero after doubling");
 801e4c0:	4b34      	ldr	r3, [pc, #208]	@ (801e594 <ec_eval_even_strategy+0x6cc>)
 801e4c2:	9300      	str	r3, [sp, #0]
 801e4c4:	235d      	movs	r3, #93	@ 0x5d
 801e4c6:	4a35      	ldr	r2, [pc, #212]	@ (801e59c <ec_eval_even_strategy+0x6d4>)
 801e4c8:	4937      	ldr	r1, [pc, #220]	@ (801e5a8 <ec_eval_even_strategy+0x6e0>)
 801e4ca:	4836      	ldr	r0, [pc, #216]	@ (801e5a4 <ec_eval_even_strategy+0x6dc>)
 801e4cc:	f017 fa36 	bl	803593c <iprintf>
#endif

        // We need to check the order of this point in case there were no 4-isogenies
        if (isog_len == 1 && !ec_is_two_torsion(&splits[0], curve))
 801e4d0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801e4d4:	2b01      	cmp	r3, #1
 801e4d6:	d10f      	bne.n	801e4f8 <ec_eval_even_strategy+0x630>
 801e4d8:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801e4dc:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801e4e0:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 801e4e4:	6819      	ldr	r1, [r3, #0]
 801e4e6:	4610      	mov	r0, r2
 801e4e8:	f7ed f8ff 	bl	800b6ea <ec_is_two_torsion>
 801e4ec:	4603      	mov	r3, r0
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d102      	bne.n	801e4f8 <ec_eval_even_strategy+0x630>
            return -1;
 801e4f2:	f04f 33ff 	mov.w	r3, #4294967295
 801e4f6:	e043      	b.n	801e580 <ec_eval_even_strategy+0x6b8>
        if (fp2_is_zero(&splits[0].x)) {
 801e4f8:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801e4fc:	4618      	mov	r0, r3
 801e4fe:	f7f4 fa4d 	bl	801299c <fp2_is_zero>
 801e502:	4603      	mov	r3, r0
 801e504:	2b00      	cmp	r3, #0
 801e506:	d002      	beq.n	801e50e <ec_eval_even_strategy+0x646>
            // special isogenies not allowed
            // this case can only happen if isog_len == 1; otherwise the
            // previous 4-isogenies we computed ensure that $T=(0:1)$ is put
            // as the kernel of the dual isogeny
            return -1;
 801e508:	f04f 33ff 	mov.w	r3, #4294967295
 801e50c:	e038      	b.n	801e580 <ec_eval_even_strategy+0x6b8>
        }

        ec_kps2_t kps2;
        xisog_2(&kps2, &A24, splits[0]);
 801e50e:	f8d7 4308 	ldr.w	r4, [r7, #776]	@ 0x308
 801e512:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 801e516:	f107 05c0 	add.w	r5, r7, #192	@ 0xc0
 801e51a:	4668      	mov	r0, sp
 801e51c:	f104 0308 	add.w	r3, r4, #8
 801e520:	2288      	movs	r2, #136	@ 0x88
 801e522:	4619      	mov	r1, r3
 801e524:	f017 fc3b 	bl	8035d9e <memcpy>
 801e528:	e894 000c 	ldmia.w	r4, {r2, r3}
 801e52c:	4631      	mov	r1, r6
 801e52e:	4628      	mov	r0, r5
 801e530:	f013 fc7f 	bl	8031e32 <xisog_2>
        xeval_2(points, points, len_points, &kps2);
 801e534:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801e538:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801e53c:	681a      	ldr	r2, [r3, #0]
 801e53e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e542:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 801e546:	f5a1 7140 	sub.w	r1, r1, #768	@ 0x300
 801e54a:	f507 704a 	add.w	r0, r7, #808	@ 0x328
 801e54e:	f5a0 7040 	sub.w	r0, r0, #768	@ 0x300
 801e552:	6809      	ldr	r1, [r1, #0]
 801e554:	6800      	ldr	r0, [r0, #0]
 801e556:	f013 f9dd 	bl	8031914 <xeval_2>
    }

    // Output curve in the form (A:C)
    A24_to_AC(curve, &A24);
 801e55a:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 801e55e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801e562:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 801e566:	4611      	mov	r1, r2
 801e568:	6818      	ldr	r0, [r3, #0]
 801e56a:	f7ff fc87 	bl	801de7c <A24_to_AC>

    curve->is_A24_computed_and_normalized = false;
 801e56e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801e572:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	2200      	movs	r2, #0
 801e57a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    return 0;
 801e57e:	2300      	movs	r3, #0
 801e580:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 801e584:	4618      	mov	r0, r3
 801e586:	f507 774b 	add.w	r7, r7, #812	@ 0x32c
 801e58a:	46bd      	mov	sp, r7
 801e58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e590:	08037edc 	.word	0x08037edc
 801e594:	08037d7c 	.word	0x08037d7c
 801e598:	08037d80 	.word	0x08037d80
 801e59c:	08037dfc 	.word	0x08037dfc
 801e5a0:	08037e0c 	.word	0x08037e0c
 801e5a4:	08037e40 	.word	0x08037e40
 801e5a8:	08037ea4 	.word	0x08037ea4

0801e5ac <ec_eval_even>:

uint32_t
ec_eval_even(ec_curve_t *image, ec_isog_even_t *phi, ec_point_t *points, unsigned len_points)
{
 801e5ac:	b580      	push	{r7, lr}
 801e5ae:	b086      	sub	sp, #24
 801e5b0:	af02      	add	r7, sp, #8
 801e5b2:	60f8      	str	r0, [r7, #12]
 801e5b4:	60b9      	str	r1, [r7, #8]
 801e5b6:	607a      	str	r2, [r7, #4]
 801e5b8:	603b      	str	r3, [r7, #0]
    copy_curve(image, &phi->curve);
 801e5ba:	68bb      	ldr	r3, [r7, #8]
 801e5bc:	4619      	mov	r1, r3
 801e5be:	68f8      	ldr	r0, [r7, #12]
 801e5c0:	f7ff fc04 	bl	801ddcc <copy_curve>
    return ec_eval_even_strategy(image, points, len_points, &phi->kernel, phi->length);
 801e5c4:	68bb      	ldr	r3, [r7, #8]
 801e5c6:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 801e5ca:	68bb      	ldr	r3, [r7, #8]
 801e5cc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 801e5d0:	9300      	str	r3, [sp, #0]
 801e5d2:	4613      	mov	r3, r2
 801e5d4:	683a      	ldr	r2, [r7, #0]
 801e5d6:	6879      	ldr	r1, [r7, #4]
 801e5d8:	68f8      	ldr	r0, [r7, #12]
 801e5da:	f7ff fc75 	bl	801dec8 <ec_eval_even_strategy>
 801e5de:	4603      	mov	r3, r0
}
 801e5e0:	4618      	mov	r0, r3
 801e5e2:	3710      	adds	r7, #16
 801e5e4:	46bd      	mov	sp, r7
 801e5e6:	bd80      	pop	{r7, pc}

0801e5e8 <ec_eval_small_chain>:
                    const ec_point_t *kernel,
                    int len,
                    ec_point_t *points,
                    unsigned len_points,
                    bool special) // do we allow special isogenies?
{
 801e5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5ea:	f5ad 7d5d 	sub.w	sp, sp, #884	@ 0x374
 801e5ee:	af22      	add	r7, sp, #136	@ 0x88
 801e5f0:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 801e5f4:	f5a4 7437 	sub.w	r4, r4, #732	@ 0x2dc
 801e5f8:	6020      	str	r0, [r4, #0]
 801e5fa:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 801e5fe:	f5a0 7038 	sub.w	r0, r0, #736	@ 0x2e0
 801e602:	6001      	str	r1, [r0, #0]
 801e604:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 801e608:	f5a1 7139 	sub.w	r1, r1, #740	@ 0x2e4
 801e60c:	600a      	str	r2, [r1, #0]
 801e60e:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 801e612:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 801e616:	6013      	str	r3, [r2, #0]

    ec_point_t A24;
    AC_to_A24(&A24, curve);
 801e618:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e61c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801e620:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 801e624:	6819      	ldr	r1, [r3, #0]
 801e626:	4610      	mov	r0, r2
 801e628:	f7ff fbf7 	bl	801de1a <AC_to_A24>

    ec_kps2_t kps;
    ec_point_t small_K, big_K;
    copy_point(&big_K, kernel);
 801e62c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e630:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801e634:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e638:	6819      	ldr	r1, [r3, #0]
 801e63a:	4610      	mov	r0, r2
 801e63c:	f7ff fbae 	bl	801dd9c <copy_point>

    for (int i = 0; i < len; i++) {
 801e640:	2300      	movs	r3, #0
 801e642:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 801e646:	e0b0      	b.n	801e7aa <ec_eval_small_chain+0x1c2>
        copy_point(&small_K, &big_K);
 801e648:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e64c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801e650:	4611      	mov	r1, r2
 801e652:	4618      	mov	r0, r3
 801e654:	f7ff fba2 	bl	801dd9c <copy_point>
        // small_K = big_K;
        for (int j = 0; j < len - i - 1; j++) {
 801e658:	2300      	movs	r3, #0
 801e65a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801e65e:	e00d      	b.n	801e67c <ec_eval_small_chain+0x94>
            xDBL_A24(&small_K, &small_K, &A24, false);
 801e660:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 801e664:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801e668:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 801e66c:	2300      	movs	r3, #0
 801e66e:	f7ed fb0d 	bl	800bc8c <xDBL_A24>
        for (int j = 0; j < len - i - 1; j++) {
 801e672:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 801e676:	3301      	adds	r3, #1
 801e678:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801e67c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e680:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 801e684:	681a      	ldr	r2, [r3, #0]
 801e686:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801e68a:	1ad3      	subs	r3, r2, r3
 801e68c:	3b01      	subs	r3, #1
 801e68e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801e692:	429a      	cmp	r2, r3
 801e694:	dbe4      	blt.n	801e660 <ec_eval_small_chain+0x78>
        }
        // Check the order of the point before the first isogeny step
        if (i == 0 && !ec_is_two_torsion(&small_K, curve))
 801e696:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d10f      	bne.n	801e6be <ec_eval_small_chain+0xd6>
 801e69e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e6a2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801e6a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801e6aa:	6819      	ldr	r1, [r3, #0]
 801e6ac:	4610      	mov	r0, r2
 801e6ae:	f7ed f81c 	bl	800b6ea <ec_is_two_torsion>
 801e6b2:	4603      	mov	r3, r0
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d102      	bne.n	801e6be <ec_eval_small_chain+0xd6>
            return (uint32_t)-1;
 801e6b8:	f04f 33ff 	mov.w	r3, #4294967295
 801e6bc:	e092      	b.n	801e7e4 <ec_eval_small_chain+0x1fc>
        // Perform isogeny step
        if (fp2_is_zero(&small_K.x)) {
 801e6be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801e6c2:	4618      	mov	r0, r3
 801e6c4:	f7f4 f96a 	bl	801299c <fp2_is_zero>
 801e6c8:	4603      	mov	r3, r0
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	d03a      	beq.n	801e744 <ec_eval_small_chain+0x15c>
            if (special) {
 801e6ce:	f897 3304 	ldrb.w	r3, [r7, #772]	@ 0x304
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d033      	beq.n	801e73e <ec_eval_small_chain+0x156>
                ec_point_t B24;
                xisog_2_singular(&kps, &B24, A24);
 801e6d6:	f107 0510 	add.w	r5, r7, #16
 801e6da:	f507 74e0 	add.w	r4, r7, #448	@ 0x1c0
 801e6de:	4668      	mov	r0, sp
 801e6e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 801e6e4:	2288      	movs	r2, #136	@ 0x88
 801e6e6:	4619      	mov	r1, r3
 801e6e8:	f017 fb59 	bl	8035d9e <memcpy>
 801e6ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801e6f0:	cb0c      	ldmia	r3, {r2, r3}
 801e6f2:	4629      	mov	r1, r5
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	f013 fbd3 	bl	8031ea0 <xisog_2_singular>
                xeval_2_singular(&big_K, &big_K, 1, &kps);
 801e6fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e6fe:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801e702:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801e706:	2201      	movs	r2, #1
 801e708:	f013 f9aa 	bl	8031a60 <xeval_2_singular>
                xeval_2_singular(points, points, len_points, &kps);
 801e70c:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 801e710:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e714:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 801e718:	f5a1 713a 	sub.w	r1, r1, #744	@ 0x2e8
 801e71c:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 801e720:	f5a0 703a 	sub.w	r0, r0, #744	@ 0x2e8
 801e724:	6809      	ldr	r1, [r1, #0]
 801e726:	6800      	ldr	r0, [r0, #0]
 801e728:	f013 f99a 	bl	8031a60 <xeval_2_singular>
                copy_point(&A24, &B24);
 801e72c:	f107 0210 	add.w	r2, r7, #16
 801e730:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 801e734:	4611      	mov	r1, r2
 801e736:	4618      	mov	r0, r3
 801e738:	f7ff fb30 	bl	801dd9c <copy_point>
 801e73c:	e030      	b.n	801e7a0 <ec_eval_small_chain+0x1b8>
            } else {
                return (uint32_t)-1;
 801e73e:	f04f 33ff 	mov.w	r3, #4294967295
 801e742:	e04f      	b.n	801e7e4 <ec_eval_small_chain+0x1fc>
            }
        } else {
            xisog_2(&kps, &A24, small_K);
 801e744:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e748:	f5a3 74dc 	sub.w	r4, r3, #440	@ 0x1b8
 801e74c:	f507 7614 	add.w	r6, r7, #592	@ 0x250
 801e750:	f507 75e0 	add.w	r5, r7, #448	@ 0x1c0
 801e754:	4668      	mov	r0, sp
 801e756:	f104 0308 	add.w	r3, r4, #8
 801e75a:	2288      	movs	r2, #136	@ 0x88
 801e75c:	4619      	mov	r1, r3
 801e75e:	f017 fb1e 	bl	8035d9e <memcpy>
 801e762:	e894 000c 	ldmia.w	r4, {r2, r3}
 801e766:	4631      	mov	r1, r6
 801e768:	4628      	mov	r0, r5
 801e76a:	f013 fb62 	bl	8031e32 <xisog_2>
            xeval_2(&big_K, &big_K, 1, &kps);
 801e76e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e772:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801e776:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801e77a:	2201      	movs	r2, #1
 801e77c:	f013 f8ca 	bl	8031914 <xeval_2>
            xeval_2(points, points, len_points, &kps);
 801e780:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 801e784:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e788:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 801e78c:	f5a1 713a 	sub.w	r1, r1, #744	@ 0x2e8
 801e790:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 801e794:	f5a0 703a 	sub.w	r0, r0, #744	@ 0x2e8
 801e798:	6809      	ldr	r1, [r1, #0]
 801e79a:	6800      	ldr	r0, [r0, #0]
 801e79c:	f013 f8ba 	bl	8031914 <xeval_2>
    for (int i = 0; i < len; i++) {
 801e7a0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801e7a4:	3301      	adds	r3, #1
 801e7a6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 801e7aa:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e7ae:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 801e7b2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	429a      	cmp	r2, r3
 801e7ba:	f6ff af45 	blt.w	801e648 <ec_eval_small_chain+0x60>
        }
    }
    A24_to_AC(curve, &A24);
 801e7be:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 801e7c2:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e7c6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801e7ca:	4611      	mov	r1, r2
 801e7cc:	6818      	ldr	r0, [r3, #0]
 801e7ce:	f7ff fb55 	bl	801de7c <A24_to_AC>

    curve->is_A24_computed_and_normalized = false;
 801e7d2:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 801e7d6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	2200      	movs	r2, #0
 801e7de:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    return 0;
 801e7e2:	2300      	movs	r3, #0
}
 801e7e4:	4618      	mov	r0, r3
 801e7e6:	f507 773b 	add.w	r7, r7, #748	@ 0x2ec
 801e7ea:	46bd      	mov	sp, r7
 801e7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e7ee <ec_isomorphism>:

uint32_t
ec_isomorphism(ec_isom_t *isom, const ec_curve_t *from, const ec_curve_t *to)
{
 801e7ee:	b590      	push	{r4, r7, lr}
 801e7f0:	b0df      	sub	sp, #380	@ 0x17c
 801e7f2:	af00      	add	r7, sp, #0
 801e7f4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e7f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801e7fc:	6018      	str	r0, [r3, #0]
 801e7fe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e802:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801e806:	6019      	str	r1, [r3, #0]
 801e808:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e80c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801e810:	601a      	str	r2, [r3, #0]
    fp2_t t0, t1, t2, t3, t4;

    fp2_mul(&t0, &from->A, &from->C);
 801e812:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e816:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801e81a:	6819      	ldr	r1, [r3, #0]
 801e81c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e820:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801e824:	681b      	ldr	r3, [r3, #0]
 801e826:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801e82a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801e82e:	4618      	mov	r0, r3
 801e830:	f7f4 f97d 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &to->A, &to->C);
 801e834:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e838:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801e83c:	6819      	ldr	r1, [r3, #0]
 801e83e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e842:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801e84c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801e850:	4618      	mov	r0, r3
 801e852:	f7f4 f96c 	bl	8012b2e <fp2_mul>

    fp2_mul(&t2, &t1, &to->C); // toA*toC^2
 801e856:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e85a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801e864:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 801e868:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801e86c:	4618      	mov	r0, r3
 801e86e:	f7f4 f95e 	bl	8012b2e <fp2_mul>
    fp2_add(&t3, &t2, &t2);
 801e872:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e876:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801e87a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e87e:	4618      	mov	r0, r3
 801e880:	f7f4 f8ec 	bl	8012a5c <fp2_add>
    fp2_add(&t3, &t3, &t3);
 801e884:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e888:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e88c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e890:	4618      	mov	r0, r3
 801e892:	f7f4 f8e3 	bl	8012a5c <fp2_add>
    fp2_add(&t3, &t3, &t3);
 801e896:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e89a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e89e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e8a2:	4618      	mov	r0, r3
 801e8a4:	f7f4 f8da 	bl	8012a5c <fp2_add>
    fp2_add(&t2, &t2, &t3); // 9*toA*toC^2
 801e8a8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e8ac:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801e8b0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	f7f4 f8d1 	bl	8012a5c <fp2_add>
    fp2_sqr(&t3, &to->A);
 801e8ba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e8be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801e8c2:	681a      	ldr	r2, [r3, #0]
 801e8c4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e8c8:	4611      	mov	r1, r2
 801e8ca:	4618      	mov	r0, r3
 801e8cc:	f7f4 f97e 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t3, &t3, &to->A); // toA^3
 801e8d0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e8d4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801e8d8:	681a      	ldr	r2, [r3, #0]
 801e8da:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e8de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	f7f4 f923 	bl	8012b2e <fp2_mul>
    fp2_add(&t3, &t3, &t3);
 801e8e8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e8ec:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e8f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e8f4:	4618      	mov	r0, r3
 801e8f6:	f7f4 f8b1 	bl	8012a5c <fp2_add>
    fp2_sub(&isom->Nx, &t3, &t2); // 2*toA^3-9*toA*toC^2
 801e8fa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e8fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e908:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e90c:	4618      	mov	r0, r3
 801e90e:	f7f4 f8db 	bl	8012ac8 <fp2_sub>
    fp2_mul(&t2, &t0, &from->A);  // fromA^2*fromC
 801e912:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e916:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801e91a:	681a      	ldr	r2, [r3, #0]
 801e91c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801e920:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801e924:	4618      	mov	r0, r3
 801e926:	f7f4 f902 	bl	8012b2e <fp2_mul>
    fp2_sqr(&t3, &from->C);
 801e92a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e92e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801e938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e93c:	4611      	mov	r1, r2
 801e93e:	4618      	mov	r0, r3
 801e940:	f7f4 f944 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t3, &t3, &from->C); // fromC^3
 801e944:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e948:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801e952:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e956:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e95a:	4618      	mov	r0, r3
 801e95c:	f7f4 f8e7 	bl	8012b2e <fp2_mul>
    fp2_add(&t4, &t3, &t3);
 801e960:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e964:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e968:	f107 0310 	add.w	r3, r7, #16
 801e96c:	4618      	mov	r0, r3
 801e96e:	f7f4 f875 	bl	8012a5c <fp2_add>
    fp2_add(&t3, &t4, &t3);             // 3*fromC^3
 801e972:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e976:	f107 0110 	add.w	r1, r7, #16
 801e97a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e97e:	4618      	mov	r0, r3
 801e980:	f7f4 f86c 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &t3, &t2);             // 3*fromC^3-fromA^2*fromC
 801e984:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e988:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e98c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e990:	4618      	mov	r0, r3
 801e992:	f7f4 f899 	bl	8012ac8 <fp2_sub>
    fp2_mul(&isom->Nx, &isom->Nx, &t3); // lambda_x = (2*toA^3-9*toA*toC^2)*(3*fromC^3-fromA^2*fromC)
 801e996:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e99a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801e99e:	6818      	ldr	r0, [r3, #0]
 801e9a0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e9a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e9ae:	4619      	mov	r1, r3
 801e9b0:	f7f4 f8bd 	bl	8012b2e <fp2_mul>

    fp2_mul(&t2, &t0, &from->C); // fromA*fromC^2
 801e9b4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801e9b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801e9c2:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801e9c6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801e9ca:	4618      	mov	r0, r3
 801e9cc:	f7f4 f8af 	bl	8012b2e <fp2_mul>
    fp2_add(&t3, &t2, &t2);
 801e9d0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e9d4:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801e9d8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e9dc:	4618      	mov	r0, r3
 801e9de:	f7f4 f83d 	bl	8012a5c <fp2_add>
    fp2_add(&t3, &t3, &t3);
 801e9e2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e9e6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e9ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e9ee:	4618      	mov	r0, r3
 801e9f0:	f7f4 f834 	bl	8012a5c <fp2_add>
    fp2_add(&t3, &t3, &t3);
 801e9f4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e9f8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e9fc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7f4 f82b 	bl	8012a5c <fp2_add>
    fp2_add(&t2, &t2, &t3); // 9*fromA*fromC^2
 801ea06:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801ea0a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801ea0e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801ea12:	4618      	mov	r0, r3
 801ea14:	f7f4 f822 	bl	8012a5c <fp2_add>
    fp2_sqr(&t3, &from->A);
 801ea18:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ea1c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801ea20:	681a      	ldr	r2, [r3, #0]
 801ea22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ea26:	4611      	mov	r1, r2
 801ea28:	4618      	mov	r0, r3
 801ea2a:	f7f4 f8cf 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t3, &t3, &from->A); // fromA^3
 801ea2e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ea32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801ea36:	681a      	ldr	r2, [r3, #0]
 801ea38:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801ea3c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ea40:	4618      	mov	r0, r3
 801ea42:	f7f4 f874 	bl	8012b2e <fp2_mul>
    fp2_add(&t3, &t3, &t3);
 801ea46:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801ea4a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801ea4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ea52:	4618      	mov	r0, r3
 801ea54:	f7f4 f802 	bl	8012a5c <fp2_add>
    fp2_sub(&isom->D, &t3, &t2); // 2*fromA^3-9*fromA*fromC^2
 801ea58:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ea5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	3390      	adds	r3, #144	@ 0x90
 801ea64:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801ea68:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801ea6c:	4618      	mov	r0, r3
 801ea6e:	f7f4 f82b 	bl	8012ac8 <fp2_sub>
    fp2_mul(&t2, &t1, &to->A);   // toA^2*toC
 801ea72:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ea76:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801ea7a:	681a      	ldr	r2, [r3, #0]
 801ea7c:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 801ea80:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801ea84:	4618      	mov	r0, r3
 801ea86:	f7f4 f852 	bl	8012b2e <fp2_mul>
    fp2_sqr(&t3, &to->C);
 801ea8a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ea8e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801ea98:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ea9c:	4611      	mov	r1, r2
 801ea9e:	4618      	mov	r0, r3
 801eaa0:	f7f4 f894 	bl	8012bcc <fp2_sqr>
    fp2_mul(&t3, &t3, &to->C); // toC^3
 801eaa4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eaa8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801eab2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801eab6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801eaba:	4618      	mov	r0, r3
 801eabc:	f7f4 f837 	bl	8012b2e <fp2_mul>
    fp2_add(&t4, &t3, &t3);
 801eac0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801eac4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801eac8:	f107 0310 	add.w	r3, r7, #16
 801eacc:	4618      	mov	r0, r3
 801eace:	f7f3 ffc5 	bl	8012a5c <fp2_add>
    fp2_add(&t3, &t4, &t3);           // 3*toC^3
 801ead2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801ead6:	f107 0110 	add.w	r1, r7, #16
 801eada:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801eade:	4618      	mov	r0, r3
 801eae0:	f7f3 ffbc 	bl	8012a5c <fp2_add>
    fp2_sub(&t3, &t3, &t2);           // 3*toC^3-toA^2*toC
 801eae4:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801eae8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801eaec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801eaf0:	4618      	mov	r0, r3
 801eaf2:	f7f3 ffe9 	bl	8012ac8 <fp2_sub>
    fp2_mul(&isom->D, &isom->D, &t3); // lambda_z = (2*fromA^3-9*fromA*fromC^2)*(3*toC^3-toA^2*toC)
 801eaf6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eafa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801eafe:	681b      	ldr	r3, [r3, #0]
 801eb00:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 801eb04:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801eb0c:	681b      	ldr	r3, [r3, #0]
 801eb0e:	3390      	adds	r3, #144	@ 0x90
 801eb10:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801eb14:	4619      	mov	r1, r3
 801eb16:	f7f4 f80a 	bl	8012b2e <fp2_mul>

    // Mont -> SW -> SW -> Mont
    fp2_mul(&t0, &to->C, &from->A);
 801eb1a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb1e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801eb28:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801eb30:	681a      	ldr	r2, [r3, #0]
 801eb32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801eb36:	4618      	mov	r0, r3
 801eb38:	f7f3 fff9 	bl	8012b2e <fp2_mul>
    fp2_mul(&t0, &t0, &isom->Nx); // lambda_x*toC*fromA
 801eb3c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb40:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801eb44:	681a      	ldr	r2, [r3, #0]
 801eb46:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801eb4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801eb4e:	4618      	mov	r0, r3
 801eb50:	f7f3 ffed 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &from->C, &to->A);
 801eb54:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb58:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801eb62:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb66:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801eb6a:	681a      	ldr	r2, [r3, #0]
 801eb6c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801eb70:	4618      	mov	r0, r3
 801eb72:	f7f3 ffdc 	bl	8012b2e <fp2_mul>
    fp2_mul(&t1, &t1, &isom->D);  // lambda_z*fromC*toA
 801eb76:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb7a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801eb84:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 801eb88:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801eb8c:	4618      	mov	r0, r3
 801eb8e:	f7f3 ffce 	bl	8012b2e <fp2_mul>
    fp2_sub(&isom->Nz, &t0, &t1); // lambda_x*toC*fromA - lambda_z*fromC*toA
 801eb92:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801eb96:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	3348      	adds	r3, #72	@ 0x48
 801eb9e:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 801eba2:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801eba6:	4618      	mov	r0, r3
 801eba8:	f7f3 ff8e 	bl	8012ac8 <fp2_sub>
    fp2_mul(&t0, &from->C, &to->C);
 801ebac:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ebb0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801ebba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ebbe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801ebc2:	681b      	ldr	r3, [r3, #0]
 801ebc4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801ebc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801ebcc:	4618      	mov	r0, r3
 801ebce:	f7f3 ffae 	bl	8012b2e <fp2_mul>
    fp2_add(&t1, &t0, &t0);
 801ebd2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801ebd6:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801ebda:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801ebde:	4618      	mov	r0, r3
 801ebe0:	f7f3 ff3c 	bl	8012a5c <fp2_add>
    fp2_add(&t0, &t0, &t1);             // 3*fromC*toC
 801ebe4:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 801ebe8:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801ebec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801ebf0:	4618      	mov	r0, r3
 801ebf2:	f7f3 ff33 	bl	8012a5c <fp2_add>
    fp2_mul(&isom->D, &isom->D, &t0);   // 3*lambda_z*fromC*toC
 801ebf6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ebfa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 801ec04:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ec08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801ec0c:	681b      	ldr	r3, [r3, #0]
 801ec0e:	3390      	adds	r3, #144	@ 0x90
 801ec10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801ec14:	4619      	mov	r1, r3
 801ec16:	f7f3 ff8a 	bl	8012b2e <fp2_mul>
    fp2_mul(&isom->Nx, &isom->Nx, &t0); // 3*lambda_x*fromC*toC
 801ec1a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ec1e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801ec22:	6818      	ldr	r0, [r3, #0]
 801ec24:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ec28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801ec32:	4619      	mov	r1, r3
 801ec34:	f7f3 ff7b 	bl	8012b2e <fp2_mul>

    return (fp2_is_zero(&isom->Nx) | fp2_is_zero(&isom->D));
 801ec38:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ec3c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	4618      	mov	r0, r3
 801ec44:	f7f3 feaa 	bl	801299c <fp2_is_zero>
 801ec48:	4604      	mov	r4, r0
 801ec4a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 801ec4e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	3390      	adds	r3, #144	@ 0x90
 801ec56:	4618      	mov	r0, r3
 801ec58:	f7f3 fea0 	bl	801299c <fp2_is_zero>
 801ec5c:	4603      	mov	r3, r0
 801ec5e:	4323      	orrs	r3, r4
}
 801ec60:	4618      	mov	r0, r3
 801ec62:	f507 77be 	add.w	r7, r7, #380	@ 0x17c
 801ec66:	46bd      	mov	sp, r7
 801ec68:	bd90      	pop	{r4, r7, pc}

0801ec6a <ec_iso_eval>:

void
ec_iso_eval(ec_point_t *P, ec_isom_t *isom)
{
 801ec6a:	b580      	push	{r7, lr}
 801ec6c:	b094      	sub	sp, #80	@ 0x50
 801ec6e:	af00      	add	r7, sp, #0
 801ec70:	6078      	str	r0, [r7, #4]
 801ec72:	6039      	str	r1, [r7, #0]
    fp2_t tmp;
    fp2_mul(&P->x, &P->x, &isom->Nx);
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	6879      	ldr	r1, [r7, #4]
 801ec78:	683a      	ldr	r2, [r7, #0]
 801ec7a:	4618      	mov	r0, r3
 801ec7c:	f7f3 ff57 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &P->z, &isom->Nz);
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801ec86:	683b      	ldr	r3, [r7, #0]
 801ec88:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801ec8c:	f107 0308 	add.w	r3, r7, #8
 801ec90:	4618      	mov	r0, r3
 801ec92:	f7f3 ff4c 	bl	8012b2e <fp2_mul>
    fp2_add(&P->x, &P->x, &tmp);
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	6879      	ldr	r1, [r7, #4]
 801ec9a:	f107 0208 	add.w	r2, r7, #8
 801ec9e:	4618      	mov	r0, r3
 801eca0:	f7f3 fedc 	bl	8012a5c <fp2_add>
    fp2_mul(&P->z, &P->z, &isom->D);
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801ecb0:	683b      	ldr	r3, [r7, #0]
 801ecb2:	3390      	adds	r3, #144	@ 0x90
 801ecb4:	461a      	mov	r2, r3
 801ecb6:	f7f3 ff3a 	bl	8012b2e <fp2_mul>
}
 801ecba:	bf00      	nop
 801ecbc:	3750      	adds	r7, #80	@ 0x50
 801ecbe:	46bd      	mov	sp, r7
 801ecc0:	bd80      	pop	{r7, pc}

0801ecc2 <copy_point>:
{
 801ecc2:	b580      	push	{r7, lr}
 801ecc4:	b082      	sub	sp, #8
 801ecc6:	af00      	add	r7, sp, #0
 801ecc8:	6078      	str	r0, [r7, #4]
 801ecca:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	683a      	ldr	r2, [r7, #0]
 801ecd0:	4611      	mov	r1, r2
 801ecd2:	4618      	mov	r0, r3
 801ecd4:	f7f3 feaa 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801ecde:	683b      	ldr	r3, [r7, #0]
 801ece0:	3348      	adds	r3, #72	@ 0x48
 801ece2:	4619      	mov	r1, r3
 801ece4:	4610      	mov	r0, r2
 801ece6:	f7f3 fea1 	bl	8012a2c <fp2_copy>
}
 801ecea:	bf00      	nop
 801ecec:	3708      	adds	r7, #8
 801ecee:	46bd      	mov	sp, r7
 801ecf0:	bd80      	pop	{r7, pc}

0801ecf2 <copy_curve>:
{
 801ecf2:	b580      	push	{r7, lr}
 801ecf4:	b082      	sub	sp, #8
 801ecf6:	af00      	add	r7, sp, #0
 801ecf8:	6078      	str	r0, [r7, #4]
 801ecfa:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	683a      	ldr	r2, [r7, #0]
 801ed00:	4611      	mov	r1, r2
 801ed02:	4618      	mov	r0, r3
 801ed04:	f7f3 fe92 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801ed0e:	683b      	ldr	r3, [r7, #0]
 801ed10:	3348      	adds	r3, #72	@ 0x48
 801ed12:	4619      	mov	r1, r3
 801ed14:	4610      	mov	r0, r2
 801ed16:	f7f3 fe89 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 801ed1a:	683b      	ldr	r3, [r7, #0]
 801ed1c:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 801ed2c:	683b      	ldr	r3, [r7, #0]
 801ed2e:	3390      	adds	r3, #144	@ 0x90
 801ed30:	4619      	mov	r1, r3
 801ed32:	4610      	mov	r0, r2
 801ed34:	f7ff ffc5 	bl	801ecc2 <copy_point>
}
 801ed38:	bf00      	nop
 801ed3a:	3708      	adds	r7, #8
 801ed3c:	46bd      	mov	sp, r7
 801ed3e:	bd80      	pop	{r7, pc}

0801ed40 <test_point_order_twof>:
{
 801ed40:	b580      	push	{r7, lr}
 801ed42:	b0f2      	sub	sp, #456	@ 0x1c8
 801ed44:	af00      	add	r7, sp, #0
 801ed46:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801ed4a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801ed4e:	6018      	str	r0, [r3, #0]
 801ed50:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801ed54:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ed58:	6019      	str	r1, [r3, #0]
 801ed5a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801ed5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801ed62:	601a      	str	r2, [r3, #0]
    test = *P;
 801ed64:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801ed68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801ed6c:	681a      	ldr	r2, [r3, #0]
 801ed6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801ed72:	4611      	mov	r1, r2
 801ed74:	2290      	movs	r2, #144	@ 0x90
 801ed76:	4618      	mov	r0, r3
 801ed78:	f017 f811 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 801ed7c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801ed80:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ed84:	f107 0214 	add.w	r2, r7, #20
 801ed88:	6819      	ldr	r1, [r3, #0]
 801ed8a:	4610      	mov	r0, r2
 801ed8c:	f7ff ffb1 	bl	801ecf2 <copy_curve>
    if (ec_is_zero(&test))
 801ed90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801ed94:	4618      	mov	r0, r3
 801ed96:	f7ec fc46 	bl	800b626 <ec_is_zero>
 801ed9a:	4603      	mov	r3, r0
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d001      	beq.n	801eda4 <test_point_order_twof+0x64>
        return 0;
 801eda0:	2300      	movs	r3, #0
 801eda2:	e026      	b.n	801edf2 <test_point_order_twof+0xb2>
    ec_dbl_iter(&test, t - 1, &test, &curve);
 801eda4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801eda8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	1e59      	subs	r1, r3, #1
 801edb0:	f107 0314 	add.w	r3, r7, #20
 801edb4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801edb8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 801edbc:	f7ed fea8 	bl	800cb10 <ec_dbl_iter>
    if (ec_is_zero(&test))
 801edc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801edc4:	4618      	mov	r0, r3
 801edc6:	f7ec fc2e 	bl	800b626 <ec_is_zero>
 801edca:	4603      	mov	r3, r0
 801edcc:	2b00      	cmp	r3, #0
 801edce:	d001      	beq.n	801edd4 <test_point_order_twof+0x94>
        return 0;
 801edd0:	2300      	movs	r3, #0
 801edd2:	e00e      	b.n	801edf2 <test_point_order_twof+0xb2>
    ec_dbl(&test, &test, &curve);
 801edd4:	f107 0214 	add.w	r2, r7, #20
 801edd8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801eddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801ede0:	4618      	mov	r0, r3
 801ede2:	f7ed fe63 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 801ede6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801edea:	4618      	mov	r0, r3
 801edec:	f7ec fc1b 	bl	800b626 <ec_is_zero>
 801edf0:	4603      	mov	r3, r0
}
 801edf2:	4618      	mov	r0, r3
 801edf4:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 801edf8:	46bd      	mov	sp, r7
 801edfa:	bd80      	pop	{r7, pc}

0801edfc <test_basis_order_twof>:
{
 801edfc:	b580      	push	{r7, lr}
 801edfe:	b088      	sub	sp, #32
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	60f8      	str	r0, [r7, #12]
 801ee04:	60b9      	str	r1, [r7, #8]
 801ee06:	607a      	str	r2, [r7, #4]
    int check_P = test_point_order_twof(&B->P, E, t);
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	687a      	ldr	r2, [r7, #4]
 801ee0c:	68b9      	ldr	r1, [r7, #8]
 801ee0e:	4618      	mov	r0, r3
 801ee10:	f7ff ff96 	bl	801ed40 <test_point_order_twof>
 801ee14:	61f8      	str	r0, [r7, #28]
    int check_Q = test_point_order_twof(&B->Q, E, t);
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	3390      	adds	r3, #144	@ 0x90
 801ee1a:	687a      	ldr	r2, [r7, #4]
 801ee1c:	68b9      	ldr	r1, [r7, #8]
 801ee1e:	4618      	mov	r0, r3
 801ee20:	f7ff ff8e 	bl	801ed40 <test_point_order_twof>
 801ee24:	61b8      	str	r0, [r7, #24]
    int check_PmQ = test_point_order_twof(&B->PmQ, E, t);
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801ee2c:	687a      	ldr	r2, [r7, #4]
 801ee2e:	68b9      	ldr	r1, [r7, #8]
 801ee30:	4618      	mov	r0, r3
 801ee32:	f7ff ff85 	bl	801ed40 <test_point_order_twof>
 801ee36:	6178      	str	r0, [r7, #20]
    return check_P & check_Q & check_PmQ;
 801ee38:	69fa      	ldr	r2, [r7, #28]
 801ee3a:	69bb      	ldr	r3, [r7, #24]
 801ee3c:	401a      	ands	r2, r3
 801ee3e:	697b      	ldr	r3, [r7, #20]
 801ee40:	4013      	ands	r3, r2
}
 801ee42:	4618      	mov	r0, r3
 801ee44:	3720      	adds	r7, #32
 801ee46:	46bd      	mov	sp, r7
 801ee48:	bd80      	pop	{r7, pc}

0801ee4a <secret_key_init>:
#include "id2iso.h"
#include "torsion_constants.h"

void
secret_key_init(secret_key_t *sk)
{
 801ee4a:	b580      	push	{r7, lr}
 801ee4c:	b082      	sub	sp, #8
 801ee4e:	af00      	add	r7, sp, #0
 801ee50:	6078      	str	r0, [r7, #4]
    quat_left_ideal_init(&(sk->secret_ideal));
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 801ee58:	4618      	mov	r0, r3
 801ee5a:	f7f0 f8e9 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    ibz_mat_2x2_init(&(sk->mat_BAcan_to_BA0_two));
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801ee64:	4618      	mov	r0, r3
 801ee66:	f7f0 f80c 	bl	800ee82 <sqisign_gen_ibz_mat_2x2_init>
    ec_curve_init(&sk->curve);
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	4618      	mov	r0, r3
 801ee6e:	f7ec fad4 	bl	800b41a <ec_curve_init>
}
 801ee72:	bf00      	nop
 801ee74:	3708      	adds	r7, #8
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}

0801ee7a <secret_key_finalize>:

void
secret_key_finalize(secret_key_t *sk)
{
 801ee7a:	b580      	push	{r7, lr}
 801ee7c:	b082      	sub	sp, #8
 801ee7e:	af00      	add	r7, sp, #0
 801ee80:	6078      	str	r0, [r7, #4]
    quat_left_ideal_finalize(&(sk->secret_ideal));
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 801ee88:	4618      	mov	r0, r3
 801ee8a:	f7f0 f8e6 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
    ibz_mat_2x2_finalize(&(sk->mat_BAcan_to_BA0_two));
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801ee94:	4618      	mov	r0, r3
 801ee96:	f7f0 f820 	bl	800eeda <sqisign_gen_ibz_mat_2x2_finalize>
}
 801ee9a:	bf00      	nop
 801ee9c:	3708      	adds	r7, #8
 801ee9e:	46bd      	mov	sp, r7
 801eea0:	bd80      	pop	{r7, pc}
	...

0801eea4 <protocols_keygen>:

int
protocols_keygen(public_key_t *pk, secret_key_t *sk)
{
 801eea4:	b590      	push	{r4, r7, lr}
 801eea6:	b0f3      	sub	sp, #460	@ 0x1cc
 801eea8:	af02      	add	r7, sp, #8
 801eeaa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801eeae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801eeb2:	6018      	str	r0, [r3, #0]
 801eeb4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801eeb8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801eebc:	6019      	str	r1, [r3, #0]
    int found = 0;
 801eebe:	2300      	movs	r3, #0
 801eec0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    ec_basis_t B_0_two;

    // iterating until a solution has been found
    while (!found) {
 801eec4:	e044      	b.n	801ef50 <protocols_keygen+0xac>

        found = quat_sampling_random_ideal_O0_given_norm(
 801eec6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801eeca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 801eed4:	2300      	movs	r3, #0
 801eed6:	9300      	str	r3, [sp, #0]
 801eed8:	4b67      	ldr	r3, [pc, #412]	@ (801f078 <protocols_keygen+0x1d4>)
 801eeda:	2201      	movs	r2, #1
 801eedc:	4967      	ldr	r1, [pc, #412]	@ (801f07c <protocols_keygen+0x1d8>)
 801eede:	f00a f959 	bl	8029194 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm>
 801eee2:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
            &sk->secret_ideal, &SEC_DEGREE, 1, &QUAT_represent_integer_params, NULL);

        // replacing the secret key ideal by a shorter equivalent one for efficiency
        found = found && quat_lideal_prime_norm_reduced_equivalent(
 801eee6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d010      	beq.n	801ef10 <protocols_keygen+0x6c>
 801eeee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801eef2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 801eefc:	2340      	movs	r3, #64	@ 0x40
 801eefe:	2220      	movs	r2, #32
 801ef00:	495f      	ldr	r1, [pc, #380]	@ (801f080 <protocols_keygen+0x1dc>)
 801ef02:	f002 fd7f 	bl	8021a04 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent>
 801ef06:	4603      	mov	r3, r0
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d001      	beq.n	801ef10 <protocols_keygen+0x6c>
 801ef0c:	2301      	movs	r3, #1
 801ef0e:	e000      	b.n	801ef12 <protocols_keygen+0x6e>
 801ef10:	2300      	movs	r3, #0
 801ef12:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                             &sk->secret_ideal, &QUATALG_PINFTY, QUAT_primality_num_iter, QUAT_equiv_bound_coeff);

        // ideal to isogeny clapotis

        found = found && dim2id2iso_arbitrary_isogeny_evaluation(&B_0_two, &sk->curve, &sk->secret_ideal);
 801ef16:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d015      	beq.n	801ef4a <protocols_keygen+0xa6>
 801ef1e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801ef22:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ef26:	6819      	ldr	r1, [r3, #0]
 801ef28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801ef2c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ef30:	681b      	ldr	r3, [r3, #0]
 801ef32:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 801ef36:	f107 030c 	add.w	r3, r7, #12
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	f7ea fe2a 	bl	8009b94 <dim2id2iso_arbitrary_isogeny_evaluation>
 801ef40:	4603      	mov	r3, r0
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	d001      	beq.n	801ef4a <protocols_keygen+0xa6>
 801ef46:	2301      	movs	r3, #1
 801ef48:	e000      	b.n	801ef4c <protocols_keygen+0xa8>
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    while (!found) {
 801ef50:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d0b6      	beq.n	801eec6 <protocols_keygen+0x22>
    }

    // Assert the isogeny was found and images have the correct order
    assert(test_basis_order_twof(&B_0_two, &sk->curve, TORSION_EVEN_POWER));
 801ef58:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801ef5c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ef60:	6819      	ldr	r1, [r3, #0]
 801ef62:	f107 030c 	add.w	r3, r7, #12
 801ef66:	22f8      	movs	r2, #248	@ 0xf8
 801ef68:	4618      	mov	r0, r3
 801ef6a:	f7ff ff47 	bl	801edfc <test_basis_order_twof>
 801ef6e:	4603      	mov	r3, r0
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	d105      	bne.n	801ef80 <protocols_keygen+0xdc>
 801ef74:	4b43      	ldr	r3, [pc, #268]	@ (801f084 <protocols_keygen+0x1e0>)
 801ef76:	4a44      	ldr	r2, [pc, #272]	@ (801f088 <protocols_keygen+0x1e4>)
 801ef78:	212c      	movs	r1, #44	@ 0x2c
 801ef7a:	4844      	ldr	r0, [pc, #272]	@ (801f08c <protocols_keygen+0x1e8>)
 801ef7c:	f016 f95c 	bl	8035238 <__assert_func>

    // Compute a deterministic basis with a hint to speed up verification
    pk->hint_pk = ec_curve_to_basis_2f_to_hint(&sk->canonical_basis, &sk->curve, TORSION_EVEN_POWER);
 801ef80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801ef84:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 801ef8e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801ef92:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	22f8      	movs	r2, #248	@ 0xf8
 801ef9a:	4619      	mov	r1, r3
 801ef9c:	f7e3 fb6a 	bl	8002674 <ec_curve_to_basis_2f_to_hint>
 801efa0:	4603      	mov	r3, r0
 801efa2:	461a      	mov	r2, r3
 801efa4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801efa8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124

    // Assert the deterministic basis we computed has the correct order
    assert(test_basis_order_twof(&sk->canonical_basis, &sk->curve, TORSION_EVEN_POWER));
 801efb2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801efb6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	f503 700c 	add.w	r0, r3, #560	@ 0x230
 801efc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801efc4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	22f8      	movs	r2, #248	@ 0xf8
 801efcc:	4619      	mov	r1, r3
 801efce:	f7ff ff15 	bl	801edfc <test_basis_order_twof>
 801efd2:	4603      	mov	r3, r0
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d105      	bne.n	801efe4 <protocols_keygen+0x140>
 801efd8:	4b2d      	ldr	r3, [pc, #180]	@ (801f090 <protocols_keygen+0x1ec>)
 801efda:	4a2b      	ldr	r2, [pc, #172]	@ (801f088 <protocols_keygen+0x1e4>)
 801efdc:	2132      	movs	r1, #50	@ 0x32
 801efde:	482b      	ldr	r0, [pc, #172]	@ (801f08c <protocols_keygen+0x1e8>)
 801efe0:	f016 f92a 	bl	8035238 <__assert_func>

    // Compute the 2x2 matrix basis change from the canonical basis to the evaluation of our secret
    // isogeny
    change_of_basis_matrix_tate(
 801efe4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801efe8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	f503 7000 	add.w	r0, r3, #512	@ 0x200
        &sk->mat_BAcan_to_BA0_two, &sk->canonical_basis, &B_0_two, &sk->curve, TORSION_EVEN_POWER);
 801eff2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801eff6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801effa:	681b      	ldr	r3, [r3, #0]
 801effc:	f503 710c 	add.w	r1, r3, #560	@ 0x230
    change_of_basis_matrix_tate(
 801f000:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801f004:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	f107 020c 	add.w	r2, r7, #12
 801f00e:	24f8      	movs	r4, #248	@ 0xf8
 801f010:	9400      	str	r4, [sp, #0]
 801f012:	f7fd f9a1 	bl	801c358 <change_of_basis_matrix_tate>

    // Set the public key from the codomain curve
    copy_curve(&pk->curve, &sk->curve);
 801f016:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801f01a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801f01e:	681a      	ldr	r2, [r3, #0]
 801f020:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801f024:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	4619      	mov	r1, r3
 801f02c:	4610      	mov	r0, r2
 801f02e:	f7ff fe60 	bl	801ecf2 <copy_curve>
    pk->curve.is_A24_computed_and_normalized = false; // We don't send any precomputation
 801f032:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801f036:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	2200      	movs	r2, #0
 801f03e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    assert(fp2_is_one(&pk->curve.C) == 0xFFFFFFFF);
 801f042:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801f046:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	3348      	adds	r3, #72	@ 0x48
 801f04e:	4618      	mov	r0, r3
 801f050:	f7f3 fcd4 	bl	80129fc <fp2_is_one>
 801f054:	4603      	mov	r3, r0
 801f056:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f05a:	d005      	beq.n	801f068 <protocols_keygen+0x1c4>
 801f05c:	4b0d      	ldr	r3, [pc, #52]	@ (801f094 <protocols_keygen+0x1f0>)
 801f05e:	4a0a      	ldr	r2, [pc, #40]	@ (801f088 <protocols_keygen+0x1e4>)
 801f060:	213d      	movs	r1, #61	@ 0x3d
 801f062:	480a      	ldr	r0, [pc, #40]	@ (801f08c <protocols_keygen+0x1e8>)
 801f064:	f016 f8e8 	bl	8035238 <__assert_func>

    return found;
 801f068:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
}
 801f06c:	4618      	mov	r0, r3
 801f06e:	f507 77e2 	add.w	r7, r7, #452	@ 0x1c4
 801f072:	46bd      	mov	sp, r7
 801f074:	bd90      	pop	{r4, r7, pc}
 801f076:	bf00      	nop
 801f078:	0803b954 	.word	0x0803b954
 801f07c:	0803ce68 	.word	0x0803ce68
 801f080:	0803bf30 	.word	0x0803bf30
 801f084:	08037f10 	.word	0x08037f10
 801f088:	08037f50 	.word	0x08037f50
 801f08c:	08037f54 	.word	0x08037f54
 801f090:	08037f6c 	.word	0x08037f6c
 801f094:	08037fb8 	.word	0x08037fb8

0801f098 <dpe_init>:
#define DPE_INLINE static inline

/* initialize */
DPE_INLINE void 
dpe_init (dpe_t x DPE_UNUSED_ATTR)
{
 801f098:	b480      	push	{r7}
 801f09a:	b083      	sub	sp, #12
 801f09c:	af00      	add	r7, sp, #0
 801f09e:	6078      	str	r0, [r7, #4]
}     
 801f0a0:	bf00      	nop
 801f0a2:	370c      	adds	r7, #12
 801f0a4:	46bd      	mov	sp, r7
 801f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0aa:	4770      	bx	lr

0801f0ac <dpe_clear>:

/* clear */
DPE_INLINE void 
dpe_clear (dpe_t x DPE_UNUSED_ATTR)
{
 801f0ac:	b480      	push	{r7}
 801f0ae:	b083      	sub	sp, #12
 801f0b0:	af00      	add	r7, sp, #0
 801f0b2:	6078      	str	r0, [r7, #4]
}
 801f0b4:	bf00      	nop
 801f0b6:	370c      	adds	r7, #12
 801f0b8:	46bd      	mov	sp, r7
 801f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0be:	4770      	bx	lr

0801f0c0 <dpe_set>:

/* set x to y */
DPE_INLINE void
dpe_set (dpe_t x, dpe_t y)
{
 801f0c0:	b480      	push	{r7}
 801f0c2:	b083      	sub	sp, #12
 801f0c4:	af00      	add	r7, sp, #0
 801f0c6:	6078      	str	r0, [r7, #4]
 801f0c8:	6039      	str	r1, [r7, #0]
  DPE_MANT(x) = DPE_MANT(y);
 801f0ca:	683b      	ldr	r3, [r7, #0]
 801f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0d0:	6879      	ldr	r1, [r7, #4]
 801f0d2:	e9c1 2300 	strd	r2, r3, [r1]
  DPE_EXP(x) = DPE_EXP(y);
 801f0d6:	683b      	ldr	r3, [r7, #0]
 801f0d8:	689a      	ldr	r2, [r3, #8]
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	609a      	str	r2, [r3, #8]
}
 801f0de:	bf00      	nop
 801f0e0:	370c      	adds	r7, #12
 801f0e2:	46bd      	mov	sp, r7
 801f0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0e8:	4770      	bx	lr

0801f0ea <dpe_neg>:

/* set x to -y */
DPE_INLINE void
dpe_neg (dpe_t x, dpe_t y)
{
 801f0ea:	b480      	push	{r7}
 801f0ec:	b083      	sub	sp, #12
 801f0ee:	af00      	add	r7, sp, #0
 801f0f0:	6078      	str	r0, [r7, #4]
 801f0f2:	6039      	str	r1, [r7, #0]
  DPE_MANT(x) = -DPE_MANT(y);
 801f0f4:	6839      	ldr	r1, [r7, #0]
 801f0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0fa:	4602      	mov	r2, r0
 801f0fc:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 801f100:	6879      	ldr	r1, [r7, #4]
 801f102:	e9c1 2300 	strd	r2, r3, [r1]
  DPE_EXP(x) = DPE_EXP(y);
 801f106:	683b      	ldr	r3, [r7, #0]
 801f108:	689a      	ldr	r2, [r3, #8]
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	609a      	str	r2, [r3, #8]
}
 801f10e:	bf00      	nop
 801f110:	370c      	adds	r7, #12
 801f112:	46bd      	mov	sp, r7
 801f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f118:	4770      	bx	lr

0801f11a <dpe_abs>:

/* set x to |y| */
DPE_INLINE void
dpe_abs (dpe_t x, dpe_t y)
{
 801f11a:	b5b0      	push	{r4, r5, r7, lr}
 801f11c:	b082      	sub	sp, #8
 801f11e:	af00      	add	r7, sp, #0
 801f120:	6078      	str	r0, [r7, #4]
 801f122:	6039      	str	r1, [r7, #0]
  DPE_MANT(x) = (DPE_MANT(y) >= 0) ? DPE_MANT(y) : -DPE_MANT(y);
 801f124:	683b      	ldr	r3, [r7, #0]
 801f126:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f12a:	f04f 0200 	mov.w	r2, #0
 801f12e:	f04f 0300 	mov.w	r3, #0
 801f132:	f7e1 fcef 	bl	8000b14 <__aeabi_dcmpge>
 801f136:	4603      	mov	r3, r0
 801f138:	2b00      	cmp	r3, #0
 801f13a:	d003      	beq.n	801f144 <dpe_abs+0x2a>
 801f13c:	683b      	ldr	r3, [r7, #0]
 801f13e:	e9d3 4500 	ldrd	r4, r5, [r3]
 801f142:	e005      	b.n	801f150 <dpe_abs+0x36>
 801f144:	683b      	ldr	r3, [r7, #0]
 801f146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f14a:	4614      	mov	r4, r2
 801f14c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	e9c3 4500 	strd	r4, r5, [r3]
  DPE_EXP(x) = DPE_EXP(y);
 801f156:	683b      	ldr	r3, [r7, #0]
 801f158:	689a      	ldr	r2, [r3, #8]
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	609a      	str	r2, [r3, #8]
}
 801f15e:	bf00      	nop
 801f160:	3708      	adds	r7, #8
 801f162:	46bd      	mov	sp, r7
 801f164:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801f168 <dpe_normalize>:

/* set mantissa in [1/2, 1), except for 0 which has minimum exponent */
/* FIXME: don't inline this function yet ? */
static void
dpe_normalize (dpe_t x)
{
 801f168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f16a:	b087      	sub	sp, #28
 801f16c:	af00      	add	r7, sp, #0
 801f16e:	6078      	str	r0, [r7, #4]
  if (DPE_UNLIKELY (DPE_MANT(x) == 0.0 || DPE_ISFINITE (DPE_MANT(x)) == 0))
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f176:	2301      	movs	r3, #1
 801f178:	461e      	mov	r6, r3
 801f17a:	f04f 0200 	mov.w	r2, #0
 801f17e:	f04f 0300 	mov.w	r3, #0
 801f182:	f7e1 fca9 	bl	8000ad8 <__aeabi_dcmpeq>
 801f186:	4603      	mov	r3, r0
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d101      	bne.n	801f190 <dpe_normalize+0x28>
 801f18c:	2300      	movs	r3, #0
 801f18e:	461e      	mov	r6, r3
 801f190:	b2f3      	uxtb	r3, r6
 801f192:	2b00      	cmp	r3, #0
 801f194:	d128      	bne.n	801f1e8 <dpe_normalize+0x80>
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f19c:	4614      	mov	r4, r2
 801f19e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 801f1a2:	2301      	movs	r3, #1
 801f1a4:	461e      	mov	r6, r3
 801f1a6:	f04f 32ff 	mov.w	r2, #4294967295
 801f1aa:	4b27      	ldr	r3, [pc, #156]	@ (801f248 <dpe_normalize+0xe0>)
 801f1ac:	4620      	mov	r0, r4
 801f1ae:	4629      	mov	r1, r5
 801f1b0:	f7e1 fcc4 	bl	8000b3c <__aeabi_dcmpun>
 801f1b4:	4603      	mov	r3, r0
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d10b      	bne.n	801f1d2 <dpe_normalize+0x6a>
 801f1ba:	f04f 32ff 	mov.w	r2, #4294967295
 801f1be:	4b22      	ldr	r3, [pc, #136]	@ (801f248 <dpe_normalize+0xe0>)
 801f1c0:	4620      	mov	r0, r4
 801f1c2:	4629      	mov	r1, r5
 801f1c4:	f7e1 fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 801f1c8:	4603      	mov	r3, r0
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	d101      	bne.n	801f1d2 <dpe_normalize+0x6a>
 801f1ce:	2300      	movs	r3, #0
 801f1d0:	461e      	mov	r6, r3
 801f1d2:	b2f3      	uxtb	r3, r6
 801f1d4:	f083 0301 	eor.w	r3, r3, #1
 801f1d8:	b2db      	uxtb	r3, r3
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	bf0c      	ite	eq
 801f1de:	2301      	moveq	r3, #1
 801f1e0:	2300      	movne	r3, #0
 801f1e2:	b2db      	uxtb	r3, r3
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d010      	beq.n	801f20a <dpe_normalize+0xa2>
    {
      if (DPE_MANT(x) == 0.0)
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f1ee:	f04f 0200 	mov.w	r2, #0
 801f1f2:	f04f 0300 	mov.w	r3, #0
 801f1f6:	f7e1 fc6f 	bl	8000ad8 <__aeabi_dcmpeq>
 801f1fa:	4603      	mov	r3, r0
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	d01e      	beq.n	801f23e <dpe_normalize+0xd6>
        DPE_EXP(x) = DPE_EXPMIN;
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801f206:	609a      	str	r2, [r3, #8]
      if (DPE_MANT(x) == 0.0)
 801f208:	e019      	b.n	801f23e <dpe_normalize+0xd6>
      e = (dw.i[1] >> 20) & 0x7FF; /* unbiased exponent, 1022 for m=1/2 */
      DPE_EXP(x) += e - 1022;
      dw.i[1] = (dw.i[1] & 0x800FFFFF) | 0x3FE00000;
      DPE_MANT(x) = dw.d;
#else /* portable code */
      double m = DPE_MANT(x);
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f210:	e9c7 2304 	strd	r2, r3, [r7, #16]
      DPE_MANT(x) = DPE_FREXP (m, &e);
 801f214:	f107 030c 	add.w	r3, r7, #12
 801f218:	4618      	mov	r0, r3
 801f21a:	ed97 0b04 	vldr	d0, [r7, #16]
 801f21e:	f016 fdff 	bl	8035e20 <frexp>
 801f222:	eeb0 7a40 	vmov.f32	s14, s0
 801f226:	eef0 7a60 	vmov.f32	s15, s1
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	ed83 7b00 	vstr	d7, [r3]
      DPE_EXP(x) += e;
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	689a      	ldr	r2, [r3, #8]
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	441a      	add	r2, r3
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	609a      	str	r2, [r3, #8]
#endif
    }
}
 801f23c:	bf00      	nop
 801f23e:	bf00      	nop
 801f240:	371c      	adds	r7, #28
 801f242:	46bd      	mov	sp, r7
 801f244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f246:	bf00      	nop
 801f248:	7fefffff 	.word	0x7fefffff

0801f24c <dpe_scale>:
  0x1P-49, 0x1P-50, 0x1P-51, 0x1P-52, 0x1P-53};
#endif

DPE_INLINE DPE_DOUBLE 
dpe_scale (DPE_DOUBLE d, int s)
{
 801f24c:	b580      	push	{r7, lr}
 801f24e:	b084      	sub	sp, #16
 801f250:	af00      	add	r7, sp, #0
 801f252:	ed87 0b02 	vstr	d0, [r7, #8]
 801f256:	6078      	str	r0, [r7, #4]
  /* -DPE_BITSIZE < s <= 0 and 1/2 <= d < 1 */
#if defined(DPE_USE_DOUBLE)
  return d * dpe_scale_tab [-s];
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	425b      	negs	r3, r3
 801f25c:	4a09      	ldr	r2, [pc, #36]	@ (801f284 <dpe_scale+0x38>)
 801f25e:	00db      	lsls	r3, r3, #3
 801f260:	4413      	add	r3, r2
 801f262:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801f26a:	f7e1 f9cd 	bl	8000608 <__aeabi_dmul>
 801f26e:	4602      	mov	r2, r0
 801f270:	460b      	mov	r3, r1
 801f272:	ec43 2b17 	vmov	d7, r2, r3
#else /* portable code */
  return DPE_LDEXP (d, s);
#endif
}
 801f276:	eeb0 0a47 	vmov.f32	s0, s14
 801f27a:	eef0 0a67 	vmov.f32	s1, s15
 801f27e:	3710      	adds	r7, #16
 801f280:	46bd      	mov	sp, r7
 801f282:	bd80      	pop	{r7, pc}
 801f284:	0803b960 	.word	0x0803b960

0801f288 <dpe_set_d>:

/* set x to y */
DPE_INLINE void
dpe_set_d (dpe_t x, double y)
{
 801f288:	b580      	push	{r7, lr}
 801f28a:	b084      	sub	sp, #16
 801f28c:	af00      	add	r7, sp, #0
 801f28e:	60f8      	str	r0, [r7, #12]
 801f290:	ed87 0b00 	vstr	d0, [r7]
  DPE_MANT(x) = (DPE_DOUBLE) y;
 801f294:	68f9      	ldr	r1, [r7, #12]
 801f296:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f29a:	e9c1 2300 	strd	r2, r3, [r1]
  DPE_EXP(x) = 0;
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	2200      	movs	r2, #0
 801f2a2:	609a      	str	r2, [r3, #8]
  dpe_normalize (x);
 801f2a4:	68f8      	ldr	r0, [r7, #12]
 801f2a6:	f7ff ff5f 	bl	801f168 <dpe_normalize>
}
 801f2aa:	bf00      	nop
 801f2ac:	3710      	adds	r7, #16
 801f2ae:	46bd      	mov	sp, r7
 801f2b0:	bd80      	pop	{r7, pc}

0801f2b2 <dpe_set_ui>:
}

/* set x to y */
DPE_INLINE void
dpe_set_ui (dpe_t x, unsigned long y)
{
 801f2b2:	b580      	push	{r7, lr}
 801f2b4:	b082      	sub	sp, #8
 801f2b6:	af00      	add	r7, sp, #0
 801f2b8:	6078      	str	r0, [r7, #4]
 801f2ba:	6039      	str	r1, [r7, #0]
  DPE_MANT(x) = (DPE_DOUBLE) y;
 801f2bc:	6838      	ldr	r0, [r7, #0]
 801f2be:	f7e1 f929 	bl	8000514 <__aeabi_ui2d>
 801f2c2:	4602      	mov	r2, r0
 801f2c4:	460b      	mov	r3, r1
 801f2c6:	6879      	ldr	r1, [r7, #4]
 801f2c8:	e9c1 2300 	strd	r2, r3, [r1]
  DPE_EXP(x) = 0;
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	2200      	movs	r2, #0
 801f2d0:	609a      	str	r2, [r3, #8]
  dpe_normalize (x);
 801f2d2:	6878      	ldr	r0, [r7, #4]
 801f2d4:	f7ff ff48 	bl	801f168 <dpe_normalize>
}
 801f2d8:	bf00      	nop
 801f2da:	3708      	adds	r7, #8
 801f2dc:	46bd      	mov	sp, r7
 801f2de:	bd80      	pop	{r7, pc}

0801f2e0 <dpe_set_z>:

#if defined(__GMP_H__) || defined(__MINI_GMP_H__)
/* set x to y */
DPE_INLINE void
dpe_set_z (dpe_t x, mpz_t y)
{
 801f2e0:	b580      	push	{r7, lr}
 801f2e2:	b084      	sub	sp, #16
 801f2e4:	af00      	add	r7, sp, #0
 801f2e6:	6078      	str	r0, [r7, #4]
 801f2e8:	6039      	str	r1, [r7, #0]
  long e;
  DPE_MANT(x) = mpz_get_d_2exp (&e, y);
 801f2ea:	f107 030c 	add.w	r3, r7, #12
 801f2ee:	6839      	ldr	r1, [r7, #0]
 801f2f0:	4618      	mov	r0, r3
 801f2f2:	f003 f980 	bl	80225f6 <mpz_get_d_2exp>
 801f2f6:	eeb0 7a40 	vmov.f32	s14, s0
 801f2fa:	eef0 7a60 	vmov.f32	s15, s1
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	ed83 7b00 	vstr	d7, [r3]
  DPE_EXP(x) = (DPE_EXP_T) e;
 801f304:	68fa      	ldr	r2, [r7, #12]
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	609a      	str	r2, [r3, #8]
}
 801f30a:	bf00      	nop
 801f30c:	3710      	adds	r7, #16
 801f30e:	46bd      	mov	sp, r7
 801f310:	bd80      	pop	{r7, pc}
	...

0801f314 <dpe_get_z>:

/* set x to y, rounded to nearest */
DPE_INLINE void
dpe_get_z (mpz_t x, dpe_t y)
{
 801f314:	b580      	push	{r7, lr}
 801f316:	b088      	sub	sp, #32
 801f318:	af00      	add	r7, sp, #0
 801f31a:	6078      	str	r0, [r7, #4]
 801f31c:	6039      	str	r1, [r7, #0]
  DPE_EXP_T ey = DPE_EXP(y);
 801f31e:	683b      	ldr	r3, [r7, #0]
 801f320:	689b      	ldr	r3, [r3, #8]
 801f322:	61fb      	str	r3, [r7, #28]
  if (ey >= DPE_BITSIZE) /* y is an integer */
 801f324:	69fb      	ldr	r3, [r7, #28]
 801f326:	2b34      	cmp	r3, #52	@ 0x34
 801f328:	dd18      	ble.n	801f35c <dpe_get_z+0x48>
    {
      DPE_DOUBLE d = DPE_MANT(y) * DPE_2_POW_BITSIZE; /* d is an integer */
 801f32a:	683b      	ldr	r3, [r7, #0]
 801f32c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f330:	f04f 0200 	mov.w	r2, #0
 801f334:	4b1e      	ldr	r3, [pc, #120]	@ (801f3b0 <dpe_get_z+0x9c>)
 801f336:	f7e1 f967 	bl	8000608 <__aeabi_dmul>
 801f33a:	4602      	mov	r2, r0
 801f33c:	460b      	mov	r3, r1
 801f33e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      mpz_set_d (x, d); /* should be exact */
 801f342:	ed97 0b02 	vldr	d0, [r7, #8]
 801f346:	6878      	ldr	r0, [r7, #4]
 801f348:	f005 fa70 	bl	802482c <mpz_set_d>
      mpz_mul_2exp (x, x, (unsigned long) ey - DPE_BITSIZE);
 801f34c:	69fb      	ldr	r3, [r7, #28]
 801f34e:	3b35      	subs	r3, #53	@ 0x35
 801f350:	461a      	mov	r2, r3
 801f352:	6879      	ldr	r1, [r7, #4]
 801f354:	6878      	ldr	r0, [r7, #4]
 801f356:	f005 ff21 	bl	802519c <mpz_mul_2exp>
        {
          DPE_DOUBLE d = DPE_LDEXP(DPE_MANT(y), ey);
          mpz_set_d (x, (double) DPE_ROUND(d));
        }
    }
}
 801f35a:	e024      	b.n	801f3a6 <dpe_get_z+0x92>
      if (DPE_UNLIKELY (ey < 0)) /* |y| < 1/2 */
 801f35c:	69fb      	ldr	r3, [r7, #28]
 801f35e:	0fdb      	lsrs	r3, r3, #31
 801f360:	b2db      	uxtb	r3, r3
 801f362:	2b00      	cmp	r3, #0
 801f364:	d004      	beq.n	801f370 <dpe_get_z+0x5c>
        mpz_set_ui (x, 0);
 801f366:	2100      	movs	r1, #0
 801f368:	6878      	ldr	r0, [r7, #4]
 801f36a:	f005 f947 	bl	80245fc <mpz_set_ui>
}
 801f36e:	e01a      	b.n	801f3a6 <dpe_get_z+0x92>
          DPE_DOUBLE d = DPE_LDEXP(DPE_MANT(y), ey);
 801f370:	683b      	ldr	r3, [r7, #0]
 801f372:	ed93 7b00 	vldr	d7, [r3]
 801f376:	69f8      	ldr	r0, [r7, #28]
 801f378:	eeb0 0a47 	vmov.f32	s0, s14
 801f37c:	eef0 0a67 	vmov.f32	s1, s15
 801f380:	f016 fd1b 	bl	8035dba <ldexp>
 801f384:	ed87 0b04 	vstr	d0, [r7, #16]
          mpz_set_d (x, (double) DPE_ROUND(d));
 801f388:	ed97 0b04 	vldr	d0, [r7, #16]
 801f38c:	f017 fa52 	bl	8036834 <round>
 801f390:	eeb0 7a40 	vmov.f32	s14, s0
 801f394:	eef0 7a60 	vmov.f32	s15, s1
 801f398:	eeb0 0a47 	vmov.f32	s0, s14
 801f39c:	eef0 0a67 	vmov.f32	s1, s15
 801f3a0:	6878      	ldr	r0, [r7, #4]
 801f3a2:	f005 fa43 	bl	802482c <mpz_set_d>
}
 801f3a6:	bf00      	nop
 801f3a8:	3720      	adds	r7, #32
 801f3aa:	46bd      	mov	sp, r7
 801f3ac:	bd80      	pop	{r7, pc}
 801f3ae:	bf00      	nop
 801f3b0:	43400000 	.word	0x43400000

0801f3b4 <dpe_sub>:
}

/* x <- y - z, assuming y and z are normalized, returns x normalized */
DPE_INLINE void
dpe_sub (dpe_t x, dpe_t y, dpe_t z)
{
 801f3b4:	b5b0      	push	{r4, r5, r7, lr}
 801f3b6:	b086      	sub	sp, #24
 801f3b8:	af00      	add	r7, sp, #0
 801f3ba:	60f8      	str	r0, [r7, #12]
 801f3bc:	60b9      	str	r1, [r7, #8]
 801f3be:	607a      	str	r2, [r7, #4]
  if (DPE_UNLIKELY (DPE_EXP(y) > DPE_EXP(z) + DPE_BITSIZE))
 801f3c0:	68bb      	ldr	r3, [r7, #8]
 801f3c2:	689a      	ldr	r2, [r3, #8]
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	689b      	ldr	r3, [r3, #8]
 801f3c8:	3335      	adds	r3, #53	@ 0x35
 801f3ca:	429a      	cmp	r2, r3
 801f3cc:	bfcc      	ite	gt
 801f3ce:	2301      	movgt	r3, #1
 801f3d0:	2300      	movle	r3, #0
 801f3d2:	b2db      	uxtb	r3, r3
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d004      	beq.n	801f3e2 <dpe_sub+0x2e>
    /* |z| < 1/2*ulp(y), thus o(y-z) = y */
    dpe_set (x, y);
 801f3d8:	68b9      	ldr	r1, [r7, #8]
 801f3da:	68f8      	ldr	r0, [r7, #12]
 801f3dc:	f7ff fe70 	bl	801f0c0 <dpe_set>
          DPE_MANT(x) = dpe_scale (DPE_MANT(y), d) - DPE_MANT(z);
          DPE_EXP(x) = DPE_EXP(z);
        }
      dpe_normalize (x);
    }
}
 801f3e0:	e055      	b.n	801f48e <dpe_sub+0xda>
  else if (DPE_UNLIKELY (DPE_EXP(z) > DPE_EXP(y) + DPE_BITSIZE))
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	689a      	ldr	r2, [r3, #8]
 801f3e6:	68bb      	ldr	r3, [r7, #8]
 801f3e8:	689b      	ldr	r3, [r3, #8]
 801f3ea:	3335      	adds	r3, #53	@ 0x35
 801f3ec:	429a      	cmp	r2, r3
 801f3ee:	bfcc      	ite	gt
 801f3f0:	2301      	movgt	r3, #1
 801f3f2:	2300      	movle	r3, #0
 801f3f4:	b2db      	uxtb	r3, r3
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d004      	beq.n	801f404 <dpe_sub+0x50>
    dpe_neg (x, z);
 801f3fa:	6879      	ldr	r1, [r7, #4]
 801f3fc:	68f8      	ldr	r0, [r7, #12]
 801f3fe:	f7ff fe74 	bl	801f0ea <dpe_neg>
}
 801f402:	e044      	b.n	801f48e <dpe_sub+0xda>
      DPE_EXP_T d = DPE_EXP(y) - DPE_EXP(z); /* |d| <= DPE_BITSIZE */
 801f404:	68bb      	ldr	r3, [r7, #8]
 801f406:	689a      	ldr	r2, [r3, #8]
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	689b      	ldr	r3, [r3, #8]
 801f40c:	1ad3      	subs	r3, r2, r3
 801f40e:	617b      	str	r3, [r7, #20]
      if (d >= 0)
 801f410:	697b      	ldr	r3, [r7, #20]
 801f412:	2b00      	cmp	r3, #0
 801f414:	db1e      	blt.n	801f454 <dpe_sub+0xa0>
          DPE_MANT(x) = DPE_MANT(y) - dpe_scale (DPE_MANT(z), -d);
 801f416:	68bb      	ldr	r3, [r7, #8]
 801f418:	e9d3 4500 	ldrd	r4, r5, [r3]
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	ed93 7b00 	vldr	d7, [r3]
 801f422:	697b      	ldr	r3, [r7, #20]
 801f424:	425b      	negs	r3, r3
 801f426:	4618      	mov	r0, r3
 801f428:	eeb0 0a47 	vmov.f32	s0, s14
 801f42c:	eef0 0a67 	vmov.f32	s1, s15
 801f430:	f7ff ff0c 	bl	801f24c <dpe_scale>
 801f434:	ec53 2b10 	vmov	r2, r3, d0
 801f438:	4620      	mov	r0, r4
 801f43a:	4629      	mov	r1, r5
 801f43c:	f7e0 ff2c 	bl	8000298 <__aeabi_dsub>
 801f440:	4602      	mov	r2, r0
 801f442:	460b      	mov	r3, r1
 801f444:	68f9      	ldr	r1, [r7, #12]
 801f446:	e9c1 2300 	strd	r2, r3, [r1]
          DPE_EXP(x) = DPE_EXP(y);
 801f44a:	68bb      	ldr	r3, [r7, #8]
 801f44c:	689a      	ldr	r2, [r3, #8]
 801f44e:	68fb      	ldr	r3, [r7, #12]
 801f450:	609a      	str	r2, [r3, #8]
 801f452:	e019      	b.n	801f488 <dpe_sub+0xd4>
          DPE_MANT(x) = dpe_scale (DPE_MANT(y), d) - DPE_MANT(z);
 801f454:	68bb      	ldr	r3, [r7, #8]
 801f456:	ed93 7b00 	vldr	d7, [r3]
 801f45a:	6978      	ldr	r0, [r7, #20]
 801f45c:	eeb0 0a47 	vmov.f32	s0, s14
 801f460:	eef0 0a67 	vmov.f32	s1, s15
 801f464:	f7ff fef2 	bl	801f24c <dpe_scale>
 801f468:	ec51 0b10 	vmov	r0, r1, d0
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f472:	f7e0 ff11 	bl	8000298 <__aeabi_dsub>
 801f476:	4602      	mov	r2, r0
 801f478:	460b      	mov	r3, r1
 801f47a:	68f9      	ldr	r1, [r7, #12]
 801f47c:	e9c1 2300 	strd	r2, r3, [r1]
          DPE_EXP(x) = DPE_EXP(z);
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	689a      	ldr	r2, [r3, #8]
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	609a      	str	r2, [r3, #8]
      dpe_normalize (x);
 801f488:	68f8      	ldr	r0, [r7, #12]
 801f48a:	f7ff fe6d 	bl	801f168 <dpe_normalize>
}
 801f48e:	bf00      	nop
 801f490:	3718      	adds	r7, #24
 801f492:	46bd      	mov	sp, r7
 801f494:	bdb0      	pop	{r4, r5, r7, pc}

0801f496 <dpe_mul>:

/* x <- y * z, assuming y and z are normalized, returns x normalized */
DPE_INLINE void
dpe_mul (dpe_t x, dpe_t y, dpe_t z)
{
 801f496:	b580      	push	{r7, lr}
 801f498:	b084      	sub	sp, #16
 801f49a:	af00      	add	r7, sp, #0
 801f49c:	60f8      	str	r0, [r7, #12]
 801f49e:	60b9      	str	r1, [r7, #8]
 801f4a0:	607a      	str	r2, [r7, #4]
  DPE_MANT(x) = DPE_MANT(y) * DPE_MANT(z);
 801f4a2:	68bb      	ldr	r3, [r7, #8]
 801f4a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4ae:	f7e1 f8ab 	bl	8000608 <__aeabi_dmul>
 801f4b2:	4602      	mov	r2, r0
 801f4b4:	460b      	mov	r3, r1
 801f4b6:	68f9      	ldr	r1, [r7, #12]
 801f4b8:	e9c1 2300 	strd	r2, r3, [r1]
  DPE_EXP(x) = DPE_EXP(y) + DPE_EXP(z);
 801f4bc:	68bb      	ldr	r3, [r7, #8]
 801f4be:	689a      	ldr	r2, [r3, #8]
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	689b      	ldr	r3, [r3, #8]
 801f4c4:	441a      	add	r2, r3
 801f4c6:	68fb      	ldr	r3, [r7, #12]
 801f4c8:	609a      	str	r2, [r3, #8]
  dpe_normalize (x);
 801f4ca:	68f8      	ldr	r0, [r7, #12]
 801f4cc:	f7ff fe4c 	bl	801f168 <dpe_normalize>
}
 801f4d0:	bf00      	nop
 801f4d2:	3710      	adds	r7, #16
 801f4d4:	46bd      	mov	sp, r7
 801f4d6:	bd80      	pop	{r7, pc}

0801f4d8 <dpe_div>:

/* x <- y / z, assuming y and z are normalized, returns x normalized.
   Assumes z is not zero. */
DPE_INLINE void
dpe_div (dpe_t x, dpe_t y, dpe_t z)
{
 801f4d8:	b580      	push	{r7, lr}
 801f4da:	b084      	sub	sp, #16
 801f4dc:	af00      	add	r7, sp, #0
 801f4de:	60f8      	str	r0, [r7, #12]
 801f4e0:	60b9      	str	r1, [r7, #8]
 801f4e2:	607a      	str	r2, [r7, #4]
  DPE_MANT(x) = DPE_MANT(y) / DPE_MANT(z);
 801f4e4:	68bb      	ldr	r3, [r7, #8]
 801f4e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4f0:	f7e1 f9b4 	bl	800085c <__aeabi_ddiv>
 801f4f4:	4602      	mov	r2, r0
 801f4f6:	460b      	mov	r3, r1
 801f4f8:	68f9      	ldr	r1, [r7, #12]
 801f4fa:	e9c1 2300 	strd	r2, r3, [r1]
  DPE_EXP(x) = DPE_EXP(y) - DPE_EXP(z);
 801f4fe:	68bb      	ldr	r3, [r7, #8]
 801f500:	689a      	ldr	r2, [r3, #8]
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	689b      	ldr	r3, [r3, #8]
 801f506:	1ad2      	subs	r2, r2, r3
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	609a      	str	r2, [r3, #8]
  dpe_normalize (x);
 801f50c:	68f8      	ldr	r0, [r7, #12]
 801f50e:	f7ff fe2b 	bl	801f168 <dpe_normalize>
}
 801f512:	bf00      	nop
 801f514:	3710      	adds	r7, #16
 801f516:	46bd      	mov	sp, r7
 801f518:	bd80      	pop	{r7, pc}

0801f51a <dpe_cmp>:
/* return a positive value if x > y
          a negative value if x < y
          and 0 otherwise (x=y). */
DPE_INLINE int
dpe_cmp (dpe_t x, dpe_t y)
{
 801f51a:	b590      	push	{r4, r7, lr}
 801f51c:	b085      	sub	sp, #20
 801f51e:	af00      	add	r7, sp, #0
 801f520:	6078      	str	r0, [r7, #4]
 801f522:	6039      	str	r1, [r7, #0]
  int sx = DPE_SIGN(x);
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f52a:	f04f 0200 	mov.w	r2, #0
 801f52e:	f04f 0300 	mov.w	r3, #0
 801f532:	f7e1 fadb 	bl	8000aec <__aeabi_dcmplt>
 801f536:	4603      	mov	r3, r0
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d002      	beq.n	801f542 <dpe_cmp+0x28>
 801f53c:	f04f 33ff 	mov.w	r3, #4294967295
 801f540:	e010      	b.n	801f564 <dpe_cmp+0x4a>
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f548:	2301      	movs	r3, #1
 801f54a:	461c      	mov	r4, r3
 801f54c:	f04f 0200 	mov.w	r2, #0
 801f550:	f04f 0300 	mov.w	r3, #0
 801f554:	f7e1 fae8 	bl	8000b28 <__aeabi_dcmpgt>
 801f558:	4603      	mov	r3, r0
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d101      	bne.n	801f562 <dpe_cmp+0x48>
 801f55e:	2300      	movs	r3, #0
 801f560:	461c      	mov	r4, r3
 801f562:	b2e3      	uxtb	r3, r4
 801f564:	60fb      	str	r3, [r7, #12]
  int d = sx - DPE_SIGN(y);
 801f566:	683b      	ldr	r3, [r7, #0]
 801f568:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f56c:	f04f 0200 	mov.w	r2, #0
 801f570:	f04f 0300 	mov.w	r3, #0
 801f574:	f7e1 faba 	bl	8000aec <__aeabi_dcmplt>
 801f578:	4603      	mov	r3, r0
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	d002      	beq.n	801f584 <dpe_cmp+0x6a>
 801f57e:	f04f 32ff 	mov.w	r2, #4294967295
 801f582:	e011      	b.n	801f5a8 <dpe_cmp+0x8e>
 801f584:	683b      	ldr	r3, [r7, #0]
 801f586:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f58a:	2301      	movs	r3, #1
 801f58c:	461c      	mov	r4, r3
 801f58e:	f04f 0200 	mov.w	r2, #0
 801f592:	f04f 0300 	mov.w	r3, #0
 801f596:	f7e1 fac7 	bl	8000b28 <__aeabi_dcmpgt>
 801f59a:	4603      	mov	r3, r0
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	d101      	bne.n	801f5a4 <dpe_cmp+0x8a>
 801f5a0:	2300      	movs	r3, #0
 801f5a2:	461c      	mov	r4, r3
 801f5a4:	b2e3      	uxtb	r3, r4
 801f5a6:	461a      	mov	r2, r3
 801f5a8:	68fb      	ldr	r3, [r7, #12]
 801f5aa:	1a9b      	subs	r3, r3, r2
 801f5ac:	60bb      	str	r3, [r7, #8]

  if (d != 0)
 801f5ae:	68bb      	ldr	r3, [r7, #8]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d001      	beq.n	801f5b8 <dpe_cmp+0x9e>
    return d;
 801f5b4:	68bb      	ldr	r3, [r7, #8]
 801f5b6:	e038      	b.n	801f62a <dpe_cmp+0x110>
  else if (DPE_EXP(x) > DPE_EXP(y))
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	689a      	ldr	r2, [r3, #8]
 801f5bc:	683b      	ldr	r3, [r7, #0]
 801f5be:	689b      	ldr	r3, [r3, #8]
 801f5c0:	429a      	cmp	r2, r3
 801f5c2:	dd07      	ble.n	801f5d4 <dpe_cmp+0xba>
    return (sx > 0) ? 1 : -1;
 801f5c4:	68fb      	ldr	r3, [r7, #12]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	dd01      	ble.n	801f5ce <dpe_cmp+0xb4>
 801f5ca:	2301      	movs	r3, #1
 801f5cc:	e02d      	b.n	801f62a <dpe_cmp+0x110>
 801f5ce:	f04f 33ff 	mov.w	r3, #4294967295
 801f5d2:	e02a      	b.n	801f62a <dpe_cmp+0x110>
  else if (DPE_EXP(y) > DPE_EXP(x))
 801f5d4:	683b      	ldr	r3, [r7, #0]
 801f5d6:	689a      	ldr	r2, [r3, #8]
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	689b      	ldr	r3, [r3, #8]
 801f5dc:	429a      	cmp	r2, r3
 801f5de:	dd07      	ble.n	801f5f0 <dpe_cmp+0xd6>
    return (sx > 0) ? -1 : 1;
 801f5e0:	68fb      	ldr	r3, [r7, #12]
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	dd02      	ble.n	801f5ec <dpe_cmp+0xd2>
 801f5e6:	f04f 33ff 	mov.w	r3, #4294967295
 801f5ea:	e01e      	b.n	801f62a <dpe_cmp+0x110>
 801f5ec:	2301      	movs	r3, #1
 801f5ee:	e01c      	b.n	801f62a <dpe_cmp+0x110>
  else /* DPE_EXP(x) = DPE_EXP(y) */
    return (DPE_MANT(x) < DPE_MANT(y)) ? -1 : (DPE_MANT(x) > DPE_MANT(y));
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f5f6:	683b      	ldr	r3, [r7, #0]
 801f5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5fc:	f7e1 fa76 	bl	8000aec <__aeabi_dcmplt>
 801f600:	4603      	mov	r3, r0
 801f602:	2b00      	cmp	r3, #0
 801f604:	d002      	beq.n	801f60c <dpe_cmp+0xf2>
 801f606:	f04f 33ff 	mov.w	r3, #4294967295
 801f60a:	e00e      	b.n	801f62a <dpe_cmp+0x110>
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f612:	683b      	ldr	r3, [r7, #0]
 801f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f618:	2401      	movs	r4, #1
 801f61a:	f7e1 fa85 	bl	8000b28 <__aeabi_dcmpgt>
 801f61e:	4603      	mov	r3, r0
 801f620:	2b00      	cmp	r3, #0
 801f622:	d101      	bne.n	801f628 <dpe_cmp+0x10e>
 801f624:	2300      	movs	r3, #0
 801f626:	461c      	mov	r4, r3
 801f628:	b2e3      	uxtb	r3, r4
}
 801f62a:	4618      	mov	r0, r3
 801f62c:	3714      	adds	r7, #20
 801f62e:	46bd      	mov	sp, r7
 801f630:	bd90      	pop	{r4, r7, pc}

0801f632 <dpe_cmp_d>:

DPE_INLINE int
dpe_cmp_d (dpe_t x, double d)
{
 801f632:	b580      	push	{r7, lr}
 801f634:	b088      	sub	sp, #32
 801f636:	af00      	add	r7, sp, #0
 801f638:	60f8      	str	r0, [r7, #12]
 801f63a:	ed87 0b00 	vstr	d0, [r7]
  dpe_t y;
  dpe_set_d (y, d);
 801f63e:	f107 0310 	add.w	r3, r7, #16
 801f642:	ed97 0b00 	vldr	d0, [r7]
 801f646:	4618      	mov	r0, r3
 801f648:	f7ff fe1e 	bl	801f288 <dpe_set_d>
  return dpe_cmp (x, y);
 801f64c:	f107 0310 	add.w	r3, r7, #16
 801f650:	4619      	mov	r1, r3
 801f652:	68f8      	ldr	r0, [r7, #12]
 801f654:	f7ff ff61 	bl	801f51a <dpe_cmp>
 801f658:	4603      	mov	r3, r0
}
 801f65a:	4618      	mov	r0, r3
 801f65c:	3720      	adds	r7, #32
 801f65e:	46bd      	mov	sp, r7
 801f660:	bd80      	pop	{r7, pc}

0801f662 <dpe_round>:
}

/* set x to integer nearest to y */
DPE_INLINE void
dpe_round (dpe_t x, dpe_t y)
{
 801f662:	b580      	push	{r7, lr}
 801f664:	b084      	sub	sp, #16
 801f666:	af00      	add	r7, sp, #0
 801f668:	6078      	str	r0, [r7, #4]
 801f66a:	6039      	str	r1, [r7, #0]
  if (DPE_EXP(y) < 0) /* |y| < 1/2 */
 801f66c:	683b      	ldr	r3, [r7, #0]
 801f66e:	689b      	ldr	r3, [r3, #8]
 801f670:	2b00      	cmp	r3, #0
 801f672:	da04      	bge.n	801f67e <dpe_round+0x1c>
    dpe_set_ui (x, 0);
 801f674:	2100      	movs	r1, #0
 801f676:	6878      	ldr	r0, [r7, #4]
 801f678:	f7ff fe1b 	bl	801f2b2 <dpe_set_ui>
    {
      DPE_DOUBLE d;
      d = DPE_LDEXP(DPE_MANT(y), DPE_EXP(y));
      dpe_set_d (x, DPE_ROUND(d));
    }
}
 801f67c:	e025      	b.n	801f6ca <dpe_round+0x68>
  else if (DPE_EXP(y) >= DPE_BITSIZE) /* y is an integer */
 801f67e:	683b      	ldr	r3, [r7, #0]
 801f680:	689b      	ldr	r3, [r3, #8]
 801f682:	2b34      	cmp	r3, #52	@ 0x34
 801f684:	dd04      	ble.n	801f690 <dpe_round+0x2e>
    dpe_set (x, y);
 801f686:	6839      	ldr	r1, [r7, #0]
 801f688:	6878      	ldr	r0, [r7, #4]
 801f68a:	f7ff fd19 	bl	801f0c0 <dpe_set>
}
 801f68e:	e01c      	b.n	801f6ca <dpe_round+0x68>
      d = DPE_LDEXP(DPE_MANT(y), DPE_EXP(y));
 801f690:	683b      	ldr	r3, [r7, #0]
 801f692:	ed93 7b00 	vldr	d7, [r3]
 801f696:	683b      	ldr	r3, [r7, #0]
 801f698:	689b      	ldr	r3, [r3, #8]
 801f69a:	4618      	mov	r0, r3
 801f69c:	eeb0 0a47 	vmov.f32	s0, s14
 801f6a0:	eef0 0a67 	vmov.f32	s1, s15
 801f6a4:	f016 fb89 	bl	8035dba <ldexp>
 801f6a8:	ed87 0b02 	vstr	d0, [r7, #8]
      dpe_set_d (x, DPE_ROUND(d));
 801f6ac:	ed97 0b02 	vldr	d0, [r7, #8]
 801f6b0:	f017 f8c0 	bl	8036834 <round>
 801f6b4:	eeb0 7a40 	vmov.f32	s14, s0
 801f6b8:	eef0 7a60 	vmov.f32	s15, s1
 801f6bc:	eeb0 0a47 	vmov.f32	s0, s14
 801f6c0:	eef0 0a67 	vmov.f32	s1, s15
 801f6c4:	6878      	ldr	r0, [r7, #4]
 801f6c6:	f7ff fddf 	bl	801f288 <dpe_set_d>
}
 801f6ca:	bf00      	nop
 801f6cc:	3710      	adds	r7, #16
 801f6ce:	46bd      	mov	sp, r7
 801f6d0:	bd80      	pop	{r7, pc}
 801f6d2:	0000      	movs	r0, r0
 801f6d4:	0000      	movs	r0, r0
	...

0801f6d8 <sqisign_gen_quat_lll_core>:
// Access entry of symmetric matrix
#define SYM(M, i, j) (i < j ? &M[j][i] : &M[i][j])

void
quat_lll_core(ibz_mat_4x4_t *G, ibz_mat_4x4_t *basis)
{
 801f6d8:	b590      	push	{r4, r7, lr}
 801f6da:	f5ad 7d43 	sub.w	sp, sp, #780	@ 0x30c
 801f6de:	af00      	add	r7, sp, #0
 801f6e0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801f6e4:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801f6e8:	6018      	str	r0, [r3, #0]
 801f6ea:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801f6ee:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 801f6f2:	6019      	str	r1, [r3, #0]
    dpe_t dpe_const_one, dpe_const_DELTABAR;

    dpe_init(dpe_const_one);
 801f6f4:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 801f6f8:	4618      	mov	r0, r3
 801f6fa:	f7ff fccd 	bl	801f098 <dpe_init>
    dpe_set_ui(dpe_const_one, 1);
 801f6fe:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 801f702:	2101      	movs	r1, #1
 801f704:	4618      	mov	r0, r3
 801f706:	f7ff fdd4 	bl	801f2b2 <dpe_set_ui>

    dpe_init(dpe_const_DELTABAR);
 801f70a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 801f70e:	4618      	mov	r0, r3
 801f710:	f7ff fcc2 	bl	801f098 <dpe_init>
    dpe_set_d(dpe_const_DELTABAR, DELTABAR);
 801f714:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 801f718:	ed9f 0bb3 	vldr	d0, [pc, #716]	@ 801f9e8 <sqisign_gen_quat_lll_core+0x310>
 801f71c:	4618      	mov	r0, r3
 801f71e:	f7ff fdb3 	bl	801f288 <dpe_set_d>

    // fp variables for Gram-Schmidt orthogonalization and Lovasz' conditions
    dpe_t r[4][4], u[4][4], lovasz[4];
    for (int i = 0; i < 4; i++) {
 801f722:	2300      	movs	r3, #0
 801f724:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 801f728:	e036      	b.n	801f798 <sqisign_gen_quat_lll_core+0xc0>
        dpe_init(lovasz[i]);
 801f72a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801f72e:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801f732:	011b      	lsls	r3, r3, #4
 801f734:	4413      	add	r3, r2
 801f736:	4618      	mov	r0, r3
 801f738:	f7ff fcae 	bl	801f098 <dpe_init>
        for (int j = 0; j <= i; j++) {
 801f73c:	2300      	movs	r3, #0
 801f73e:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 801f742:	e01e      	b.n	801f782 <sqisign_gen_quat_lll_core+0xaa>
            dpe_init(r[i][j]);
 801f744:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801f748:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801f74c:	0099      	lsls	r1, r3, #2
 801f74e:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801f752:	440b      	add	r3, r1
 801f754:	011b      	lsls	r3, r3, #4
 801f756:	4413      	add	r3, r2
 801f758:	4618      	mov	r0, r3
 801f75a:	f7ff fc9d 	bl	801f098 <dpe_init>
            dpe_init(u[i][j]);
 801f75e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801f762:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801f766:	0099      	lsls	r1, r3, #2
 801f768:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801f76c:	440b      	add	r3, r1
 801f76e:	011b      	lsls	r3, r3, #4
 801f770:	4413      	add	r3, r2
 801f772:	4618      	mov	r0, r3
 801f774:	f7ff fc90 	bl	801f098 <dpe_init>
        for (int j = 0; j <= i; j++) {
 801f778:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801f77c:	3301      	adds	r3, #1
 801f77e:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 801f782:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 801f786:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801f78a:	429a      	cmp	r2, r3
 801f78c:	ddda      	ble.n	801f744 <sqisign_gen_quat_lll_core+0x6c>
    for (int i = 0; i < 4; i++) {
 801f78e:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801f792:	3301      	adds	r3, #1
 801f794:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 801f798:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801f79c:	2b03      	cmp	r3, #3
 801f79e:	ddc4      	ble.n	801f72a <sqisign_gen_quat_lll_core+0x52>
        }
    }

    // threshold for swaps
    dpe_t delta_bar;
    dpe_init(delta_bar);
 801f7a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801f7a4:	4618      	mov	r0, r3
 801f7a6:	f7ff fc77 	bl	801f098 <dpe_init>
    dpe_set_d(delta_bar, DELTABAR);
 801f7aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801f7ae:	ed9f 0b8e 	vldr	d0, [pc, #568]	@ 801f9e8 <sqisign_gen_quat_lll_core+0x310>
 801f7b2:	4618      	mov	r0, r3
 801f7b4:	f7ff fd68 	bl	801f288 <dpe_set_d>

    // Other work variables
    dpe_t Xf, tmpF;
    dpe_init(Xf);
 801f7b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f7bc:	4618      	mov	r0, r3
 801f7be:	f7ff fc6b 	bl	801f098 <dpe_init>
    dpe_init(tmpF);
 801f7c2:	f107 0320 	add.w	r3, r7, #32
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f7ff fc66 	bl	801f098 <dpe_init>
    ibz_t X, tmpI;
    ibz_init(&X);
 801f7cc:	f107 0314 	add.w	r3, r7, #20
 801f7d0:	4618      	mov	r0, r3
 801f7d2:	f7fd fc18 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&tmpI);
 801f7d6:	f107 0308 	add.w	r3, r7, #8
 801f7da:	4618      	mov	r0, r3
 801f7dc:	f7fd fc13 	bl	801d006 <sqisign_gen_ibz_init>

    // Main L² loop
    dpe_set_z(r[0][0], (*G)[0][0]);
 801f7e0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801f7e4:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801f7e8:	681a      	ldr	r2, [r3, #0]
 801f7ea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801f7ee:	4611      	mov	r1, r2
 801f7f0:	4618      	mov	r0, r3
 801f7f2:	f7ff fd75 	bl	801f2e0 <dpe_set_z>
    int kappa = 1;
 801f7f6:	2301      	movs	r3, #1
 801f7f8:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
    while (kappa < 4) {
 801f7fc:	f000 bc33 	b.w	8020066 <sqisign_gen_quat_lll_core+0x98e>
        // size reduce b_κ
        int done = 0;
 801f800:	2300      	movs	r3, #0
 801f802:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
        while (!done) {
 801f806:	e26f      	b.n	801fce8 <sqisign_gen_quat_lll_core+0x610>
            // Recompute the κ-th row of the Choleski Factorisation
            // Loop invariant:
            //     r[κ][j] ≈ u[κ][j] ‖b_j*‖² ≈ 〈b_κ, b_j*〉
            for (int j = 0; j <= kappa; j++) {
 801f808:	2300      	movs	r3, #0
 801f80a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 801f80e:	e08f      	b.n	801f930 <sqisign_gen_quat_lll_core+0x258>
                dpe_set_z(r[kappa][j], (*G)[kappa][j]);
 801f810:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801f814:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f818:	0099      	lsls	r1, r3, #2
 801f81a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f81e:	440b      	add	r3, r1
 801f820:	011b      	lsls	r3, r3, #4
 801f822:	18d4      	adds	r4, r2, r3
 801f824:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801f828:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801f82c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f830:	461a      	mov	r2, r3
 801f832:	0052      	lsls	r2, r2, #1
 801f834:	441a      	add	r2, r3
 801f836:	0093      	lsls	r3, r2, #2
 801f838:	461a      	mov	r2, r3
 801f83a:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 801f83e:	460b      	mov	r3, r1
 801f840:	005b      	lsls	r3, r3, #1
 801f842:	440b      	add	r3, r1
 801f844:	011b      	lsls	r3, r3, #4
 801f846:	4413      	add	r3, r2
 801f848:	6802      	ldr	r2, [r0, #0]
 801f84a:	4413      	add	r3, r2
 801f84c:	4619      	mov	r1, r3
 801f84e:	4620      	mov	r0, r4
 801f850:	f7ff fd46 	bl	801f2e0 <dpe_set_z>
                for (int k = 0; k < j; k++) {
 801f854:	2300      	movs	r3, #0
 801f856:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 801f85a:	e037      	b.n	801f8cc <sqisign_gen_quat_lll_core+0x1f4>
                    dpe_mul(tmpF, r[kappa][k], u[j][k]);
 801f85c:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801f860:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f864:	0099      	lsls	r1, r3, #2
 801f866:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801f86a:	440b      	add	r3, r1
 801f86c:	011b      	lsls	r3, r3, #4
 801f86e:	18d0      	adds	r0, r2, r3
 801f870:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801f874:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f878:	0099      	lsls	r1, r3, #2
 801f87a:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801f87e:	440b      	add	r3, r1
 801f880:	011b      	lsls	r3, r3, #4
 801f882:	441a      	add	r2, r3
 801f884:	f107 0320 	add.w	r3, r7, #32
 801f888:	4601      	mov	r1, r0
 801f88a:	4618      	mov	r0, r3
 801f88c:	f7ff fe03 	bl	801f496 <dpe_mul>
                    dpe_sub(r[kappa][j], r[kappa][j], tmpF);
 801f890:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801f894:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f898:	0099      	lsls	r1, r3, #2
 801f89a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f89e:	440b      	add	r3, r1
 801f8a0:	011b      	lsls	r3, r3, #4
 801f8a2:	18d0      	adds	r0, r2, r3
 801f8a4:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801f8a8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f8ac:	0099      	lsls	r1, r3, #2
 801f8ae:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f8b2:	440b      	add	r3, r1
 801f8b4:	011b      	lsls	r3, r3, #4
 801f8b6:	4413      	add	r3, r2
 801f8b8:	f107 0220 	add.w	r2, r7, #32
 801f8bc:	4619      	mov	r1, r3
 801f8be:	f7ff fd79 	bl	801f3b4 <dpe_sub>
                for (int k = 0; k < j; k++) {
 801f8c2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801f8c6:	3301      	adds	r3, #1
 801f8c8:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 801f8cc:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 801f8d0:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f8d4:	429a      	cmp	r2, r3
 801f8d6:	dbc1      	blt.n	801f85c <sqisign_gen_quat_lll_core+0x184>
                }
                if (j < kappa)
 801f8d8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801f8dc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f8e0:	429a      	cmp	r2, r3
 801f8e2:	da20      	bge.n	801f926 <sqisign_gen_quat_lll_core+0x24e>
                    dpe_div(u[kappa][j], r[kappa][j], r[j][j]);
 801f8e4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801f8e8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f8ec:	0099      	lsls	r1, r3, #2
 801f8ee:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f8f2:	440b      	add	r3, r1
 801f8f4:	011b      	lsls	r3, r3, #4
 801f8f6:	18d0      	adds	r0, r2, r3
 801f8f8:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801f8fc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f900:	0099      	lsls	r1, r3, #2
 801f902:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f906:	440b      	add	r3, r1
 801f908:	011b      	lsls	r3, r3, #4
 801f90a:	18d4      	adds	r4, r2, r3
 801f90c:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 801f910:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801f914:	4613      	mov	r3, r2
 801f916:	009b      	lsls	r3, r3, #2
 801f918:	4413      	add	r3, r2
 801f91a:	011b      	lsls	r3, r3, #4
 801f91c:	440b      	add	r3, r1
 801f91e:	461a      	mov	r2, r3
 801f920:	4621      	mov	r1, r4
 801f922:	f7ff fdd9 	bl	801f4d8 <dpe_div>
            for (int j = 0; j <= kappa; j++) {
 801f926:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801f92a:	3301      	adds	r3, #1
 801f92c:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 801f930:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801f934:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f938:	429a      	cmp	r2, r3
 801f93a:	f77f af69 	ble.w	801f810 <sqisign_gen_quat_lll_core+0x138>
            }

            done = 1;
 801f93e:	2301      	movs	r3, #1
 801f940:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
            // size reduce
            for (int i = kappa - 1; i >= 0; i--) {
 801f944:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f948:	3b01      	subs	r3, #1
 801f94a:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801f94e:	e1c6      	b.n	801fcde <sqisign_gen_quat_lll_core+0x606>
                if (dpe_cmp_d(u[kappa][i], ETABAR) > 0 || dpe_cmp_d(u[kappa][i], -ETABAR) < 0) {
 801f950:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801f954:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f958:	0099      	lsls	r1, r3, #2
 801f95a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801f95e:	440b      	add	r3, r1
 801f960:	011b      	lsls	r3, r3, #4
 801f962:	4413      	add	r3, r2
 801f964:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 801f9f0 <sqisign_gen_quat_lll_core+0x318>
 801f968:	4618      	mov	r0, r3
 801f96a:	f7ff fe62 	bl	801f632 <dpe_cmp_d>
 801f96e:	4603      	mov	r3, r0
 801f970:	2b00      	cmp	r3, #0
 801f972:	dc12      	bgt.n	801f99a <sqisign_gen_quat_lll_core+0x2c2>
 801f974:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801f978:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f97c:	0099      	lsls	r1, r3, #2
 801f97e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801f982:	440b      	add	r3, r1
 801f984:	011b      	lsls	r3, r3, #4
 801f986:	4413      	add	r3, r2
 801f988:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 801f9f8 <sqisign_gen_quat_lll_core+0x320>
 801f98c:	4618      	mov	r0, r3
 801f98e:	f7ff fe50 	bl	801f632 <dpe_cmp_d>
 801f992:	4603      	mov	r3, r0
 801f994:	2b00      	cmp	r3, #0
 801f996:	f280 819d 	bge.w	801fcd4 <sqisign_gen_quat_lll_core+0x5fc>
                    done = 0;
 801f99a:	2300      	movs	r3, #0
 801f99c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
                    dpe_set(Xf, u[kappa][i]);
 801f9a0:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801f9a4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801f9a8:	0099      	lsls	r1, r3, #2
 801f9aa:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801f9ae:	440b      	add	r3, r1
 801f9b0:	011b      	lsls	r3, r3, #4
 801f9b2:	441a      	add	r2, r3
 801f9b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f9b8:	4611      	mov	r1, r2
 801f9ba:	4618      	mov	r0, r3
 801f9bc:	f7ff fb80 	bl	801f0c0 <dpe_set>
                    dpe_round(Xf, Xf);
 801f9c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f9c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f9c8:	4611      	mov	r1, r2
 801f9ca:	4618      	mov	r0, r3
 801f9cc:	f7ff fe49 	bl	801f662 <dpe_round>
                    dpe_get_z(X, Xf);
 801f9d0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f9d4:	f107 0314 	add.w	r3, r7, #20
 801f9d8:	4611      	mov	r1, r2
 801f9da:	4618      	mov	r0, r3
 801f9dc:	f7ff fc9a 	bl	801f314 <dpe_get_z>
                    // Update basis: b_κ ← b_κ - X·b_i
                    for (int j = 0; j < 4; j++) {
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 801f9e6:	e059      	b.n	801fa9c <sqisign_gen_quat_lll_core+0x3c4>
 801f9e8:	3d70a3d7 	.word	0x3d70a3d7
 801f9ec:	3fefd70a 	.word	0x3fefd70a
 801f9f0:	c28f5c29 	.word	0xc28f5c29
 801f9f4:	3fe028f5 	.word	0x3fe028f5
 801f9f8:	c28f5c29 	.word	0xc28f5c29
 801f9fc:	bfe028f5 	.word	0xbfe028f5
                        ibz_mul(&tmpI, &X, &(*basis)[j][i]);
 801fa00:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fa04:	f5a3 7042 	sub.w	r0, r3, #776	@ 0x308
 801fa08:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801fa0c:	461a      	mov	r2, r3
 801fa0e:	0052      	lsls	r2, r2, #1
 801fa10:	441a      	add	r2, r3
 801fa12:	0093      	lsls	r3, r2, #2
 801fa14:	461a      	mov	r2, r3
 801fa16:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 801fa1a:	460b      	mov	r3, r1
 801fa1c:	005b      	lsls	r3, r3, #1
 801fa1e:	440b      	add	r3, r1
 801fa20:	011b      	lsls	r3, r3, #4
 801fa22:	4413      	add	r3, r2
 801fa24:	6802      	ldr	r2, [r0, #0]
 801fa26:	441a      	add	r2, r3
 801fa28:	f107 0114 	add.w	r1, r7, #20
 801fa2c:	f107 0308 	add.w	r3, r7, #8
 801fa30:	4618      	mov	r0, r3
 801fa32:	f7fd fb1c 	bl	801d06e <sqisign_gen_ibz_mul>
                        ibz_sub(&(*basis)[j][kappa], &(*basis)[j][kappa], &tmpI);
 801fa36:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fa3a:	f5a3 7042 	sub.w	r0, r3, #776	@ 0x308
 801fa3e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fa42:	461a      	mov	r2, r3
 801fa44:	0052      	lsls	r2, r2, #1
 801fa46:	441a      	add	r2, r3
 801fa48:	0093      	lsls	r3, r2, #2
 801fa4a:	461a      	mov	r2, r3
 801fa4c:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 801fa50:	460b      	mov	r3, r1
 801fa52:	005b      	lsls	r3, r3, #1
 801fa54:	440b      	add	r3, r1
 801fa56:	011b      	lsls	r3, r3, #4
 801fa58:	4413      	add	r3, r2
 801fa5a:	6802      	ldr	r2, [r0, #0]
 801fa5c:	18d4      	adds	r4, r2, r3
 801fa5e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fa62:	f5a3 7042 	sub.w	r0, r3, #776	@ 0x308
 801fa66:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fa6a:	461a      	mov	r2, r3
 801fa6c:	0052      	lsls	r2, r2, #1
 801fa6e:	441a      	add	r2, r3
 801fa70:	0093      	lsls	r3, r2, #2
 801fa72:	461a      	mov	r2, r3
 801fa74:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 801fa78:	460b      	mov	r3, r1
 801fa7a:	005b      	lsls	r3, r3, #1
 801fa7c:	440b      	add	r3, r1
 801fa7e:	011b      	lsls	r3, r3, #4
 801fa80:	4413      	add	r3, r2
 801fa82:	6802      	ldr	r2, [r0, #0]
 801fa84:	4413      	add	r3, r2
 801fa86:	f107 0208 	add.w	r2, r7, #8
 801fa8a:	4619      	mov	r1, r3
 801fa8c:	4620      	mov	r0, r4
 801fa8e:	f7fd fadf 	bl	801d050 <sqisign_gen_ibz_sub>
                    for (int j = 0; j < 4; j++) {
 801fa92:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801fa96:	3301      	adds	r3, #1
 801fa98:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 801fa9c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801faa0:	2b03      	cmp	r3, #3
 801faa2:	ddad      	ble.n	801fa00 <sqisign_gen_quat_lll_core+0x328>
                    }
                    // Update lower half of the Gram matrix
                    // <b_κ - X·b_i, b_κ - X·b_i> = <b_κ, b_κ> - 2X<b_κ, b_i> + X²<b_i, b_i> =
                    // <b_κ,b_κ> - X<b_κ,b_i> - X(<b_κ,b_i> - X·<b_i, b_i>)
                    //// 〈b_κ, b_κ〉 ← 〈b_κ, b_κ〉 - X·〈b_κ, b_i〉
                    ibz_mul(&tmpI, &X, &(*G)[kappa][i]);
 801faa4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801faa8:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801faac:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801fab0:	461a      	mov	r2, r3
 801fab2:	0052      	lsls	r2, r2, #1
 801fab4:	441a      	add	r2, r3
 801fab6:	0093      	lsls	r3, r2, #2
 801fab8:	461a      	mov	r2, r3
 801faba:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 801fabe:	460b      	mov	r3, r1
 801fac0:	005b      	lsls	r3, r3, #1
 801fac2:	440b      	add	r3, r1
 801fac4:	011b      	lsls	r3, r3, #4
 801fac6:	4413      	add	r3, r2
 801fac8:	6802      	ldr	r2, [r0, #0]
 801faca:	441a      	add	r2, r3
 801facc:	f107 0114 	add.w	r1, r7, #20
 801fad0:	f107 0308 	add.w	r3, r7, #8
 801fad4:	4618      	mov	r0, r3
 801fad6:	f7fd faca 	bl	801d06e <sqisign_gen_ibz_mul>
                    ibz_sub(&(*G)[kappa][kappa], &(*G)[kappa][kappa], &tmpI);
 801fada:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fade:	f5a3 7141 	sub.w	r1, r3, #772	@ 0x304
 801fae2:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801fae6:	4613      	mov	r3, r2
 801fae8:	011b      	lsls	r3, r3, #4
 801faea:	1a9b      	subs	r3, r3, r2
 801faec:	009b      	lsls	r3, r3, #2
 801faee:	680a      	ldr	r2, [r1, #0]
 801faf0:	18d0      	adds	r0, r2, r3
 801faf2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801faf6:	f5a3 7141 	sub.w	r1, r3, #772	@ 0x304
 801fafa:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801fafe:	4613      	mov	r3, r2
 801fb00:	011b      	lsls	r3, r3, #4
 801fb02:	1a9b      	subs	r3, r3, r2
 801fb04:	009b      	lsls	r3, r3, #2
 801fb06:	680a      	ldr	r2, [r1, #0]
 801fb08:	4413      	add	r3, r2
 801fb0a:	f107 0208 	add.w	r2, r7, #8
 801fb0e:	4619      	mov	r1, r3
 801fb10:	f7fd fa9e 	bl	801d050 <sqisign_gen_ibz_sub>
                    for (int j = 0; j < 4; j++) { // works because i < κ
 801fb14:	2300      	movs	r3, #0
 801fb16:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 801fb1a:	e09d      	b.n	801fc58 <sqisign_gen_quat_lll_core+0x580>
                        // 〈b_κ, b_j〉 ← 〈b_κ, b_j〉 - X·〈b_i, b_j〉
                        ibz_mul(&tmpI, &X, SYM((*G), i, j));
 801fb1c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801fb20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fb24:	429a      	cmp	r2, r3
 801fb26:	da14      	bge.n	801fb52 <sqisign_gen_quat_lll_core+0x47a>
 801fb28:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fb2c:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801fb30:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801fb34:	461a      	mov	r2, r3
 801fb36:	0052      	lsls	r2, r2, #1
 801fb38:	441a      	add	r2, r3
 801fb3a:	0093      	lsls	r3, r2, #2
 801fb3c:	461a      	mov	r2, r3
 801fb3e:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801fb42:	460b      	mov	r3, r1
 801fb44:	005b      	lsls	r3, r3, #1
 801fb46:	440b      	add	r3, r1
 801fb48:	011b      	lsls	r3, r3, #4
 801fb4a:	4413      	add	r3, r2
 801fb4c:	6802      	ldr	r2, [r0, #0]
 801fb4e:	4413      	add	r3, r2
 801fb50:	e013      	b.n	801fb7a <sqisign_gen_quat_lll_core+0x4a2>
 801fb52:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fb56:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801fb5a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fb5e:	461a      	mov	r2, r3
 801fb60:	0052      	lsls	r2, r2, #1
 801fb62:	441a      	add	r2, r3
 801fb64:	0093      	lsls	r3, r2, #2
 801fb66:	461a      	mov	r2, r3
 801fb68:	f8d7 12ec 	ldr.w	r1, [r7, #748]	@ 0x2ec
 801fb6c:	460b      	mov	r3, r1
 801fb6e:	005b      	lsls	r3, r3, #1
 801fb70:	440b      	add	r3, r1
 801fb72:	011b      	lsls	r3, r3, #4
 801fb74:	4413      	add	r3, r2
 801fb76:	6802      	ldr	r2, [r0, #0]
 801fb78:	4413      	add	r3, r2
 801fb7a:	f107 0114 	add.w	r1, r7, #20
 801fb7e:	f107 0008 	add.w	r0, r7, #8
 801fb82:	461a      	mov	r2, r3
 801fb84:	f7fd fa73 	bl	801d06e <sqisign_gen_ibz_mul>
                        ibz_sub(SYM((*G), kappa, j), SYM((*G), kappa, j), &tmpI);
 801fb88:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801fb8c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fb90:	429a      	cmp	r2, r3
 801fb92:	da14      	bge.n	801fbbe <sqisign_gen_quat_lll_core+0x4e6>
 801fb94:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fb98:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801fb9c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fba0:	461a      	mov	r2, r3
 801fba2:	0052      	lsls	r2, r2, #1
 801fba4:	441a      	add	r2, r3
 801fba6:	0093      	lsls	r3, r2, #2
 801fba8:	461a      	mov	r2, r3
 801fbaa:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801fbae:	460b      	mov	r3, r1
 801fbb0:	005b      	lsls	r3, r3, #1
 801fbb2:	440b      	add	r3, r1
 801fbb4:	011b      	lsls	r3, r3, #4
 801fbb6:	4413      	add	r3, r2
 801fbb8:	6802      	ldr	r2, [r0, #0]
 801fbba:	18d0      	adds	r0, r2, r3
 801fbbc:	e013      	b.n	801fbe6 <sqisign_gen_quat_lll_core+0x50e>
 801fbbe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fbc2:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801fbc6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fbca:	461a      	mov	r2, r3
 801fbcc:	0052      	lsls	r2, r2, #1
 801fbce:	441a      	add	r2, r3
 801fbd0:	0093      	lsls	r3, r2, #2
 801fbd2:	461a      	mov	r2, r3
 801fbd4:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 801fbd8:	460b      	mov	r3, r1
 801fbda:	005b      	lsls	r3, r3, #1
 801fbdc:	440b      	add	r3, r1
 801fbde:	011b      	lsls	r3, r3, #4
 801fbe0:	4413      	add	r3, r2
 801fbe2:	6802      	ldr	r2, [r0, #0]
 801fbe4:	18d0      	adds	r0, r2, r3
 801fbe6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801fbea:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fbee:	429a      	cmp	r2, r3
 801fbf0:	da14      	bge.n	801fc1c <sqisign_gen_quat_lll_core+0x544>
 801fbf2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fbf6:	f5a3 7441 	sub.w	r4, r3, #772	@ 0x304
 801fbfa:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fbfe:	461a      	mov	r2, r3
 801fc00:	0052      	lsls	r2, r2, #1
 801fc02:	441a      	add	r2, r3
 801fc04:	0093      	lsls	r3, r2, #2
 801fc06:	461a      	mov	r2, r3
 801fc08:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801fc0c:	460b      	mov	r3, r1
 801fc0e:	005b      	lsls	r3, r3, #1
 801fc10:	440b      	add	r3, r1
 801fc12:	011b      	lsls	r3, r3, #4
 801fc14:	4413      	add	r3, r2
 801fc16:	6822      	ldr	r2, [r4, #0]
 801fc18:	4413      	add	r3, r2
 801fc1a:	e013      	b.n	801fc44 <sqisign_gen_quat_lll_core+0x56c>
 801fc1c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fc20:	f5a3 7441 	sub.w	r4, r3, #772	@ 0x304
 801fc24:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fc28:	461a      	mov	r2, r3
 801fc2a:	0052      	lsls	r2, r2, #1
 801fc2c:	441a      	add	r2, r3
 801fc2e:	0093      	lsls	r3, r2, #2
 801fc30:	461a      	mov	r2, r3
 801fc32:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 801fc36:	460b      	mov	r3, r1
 801fc38:	005b      	lsls	r3, r3, #1
 801fc3a:	440b      	add	r3, r1
 801fc3c:	011b      	lsls	r3, r3, #4
 801fc3e:	4413      	add	r3, r2
 801fc40:	6822      	ldr	r2, [r4, #0]
 801fc42:	4413      	add	r3, r2
 801fc44:	f107 0208 	add.w	r2, r7, #8
 801fc48:	4619      	mov	r1, r3
 801fc4a:	f7fd fa01 	bl	801d050 <sqisign_gen_ibz_sub>
                    for (int j = 0; j < 4; j++) { // works because i < κ
 801fc4e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fc52:	3301      	adds	r3, #1
 801fc54:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 801fc58:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801fc5c:	2b03      	cmp	r3, #3
 801fc5e:	f77f af5d 	ble.w	801fb1c <sqisign_gen_quat_lll_core+0x444>
                    // After the loop:
                    //// 〈b_κ,b_κ〉 ← 〈b_κ,b_κ〉 - X·〈b_κ,b_i〉 - X·(〈b_κ,b_i〉 - X·〈b_i,
                    /// b_i〉) = 〈b_κ - X·b_i, b_κ - X·b_i〉
                    //
                    // Update u[kappa][j]
                    for (int j = 0; j < i; j++) {
 801fc62:	2300      	movs	r3, #0
 801fc64:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801fc68:	e02e      	b.n	801fcc8 <sqisign_gen_quat_lll_core+0x5f0>
                        dpe_mul(tmpF, Xf, u[i][j]);
 801fc6a:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801fc6e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801fc72:	0099      	lsls	r1, r3, #2
 801fc74:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 801fc78:	440b      	add	r3, r1
 801fc7a:	011b      	lsls	r3, r3, #4
 801fc7c:	441a      	add	r2, r3
 801fc7e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801fc82:	f107 0320 	add.w	r3, r7, #32
 801fc86:	4618      	mov	r0, r3
 801fc88:	f7ff fc05 	bl	801f496 <dpe_mul>
                        dpe_sub(u[kappa][j], u[kappa][j], tmpF);
 801fc8c:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801fc90:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fc94:	0099      	lsls	r1, r3, #2
 801fc96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 801fc9a:	440b      	add	r3, r1
 801fc9c:	011b      	lsls	r3, r3, #4
 801fc9e:	18d0      	adds	r0, r2, r3
 801fca0:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801fca4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fca8:	0099      	lsls	r1, r3, #2
 801fcaa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 801fcae:	440b      	add	r3, r1
 801fcb0:	011b      	lsls	r3, r3, #4
 801fcb2:	4413      	add	r3, r2
 801fcb4:	f107 0220 	add.w	r2, r7, #32
 801fcb8:	4619      	mov	r1, r3
 801fcba:	f7ff fb7b 	bl	801f3b4 <dpe_sub>
                    for (int j = 0; j < i; j++) {
 801fcbe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 801fcc2:	3301      	adds	r3, #1
 801fcc4:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801fcc8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801fccc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801fcd0:	429a      	cmp	r2, r3
 801fcd2:	dbca      	blt.n	801fc6a <sqisign_gen_quat_lll_core+0x592>
            for (int i = kappa - 1; i >= 0; i--) {
 801fcd4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801fcd8:	3b01      	subs	r3, #1
 801fcda:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801fcde:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	f6bf ae34 	bge.w	801f950 <sqisign_gen_quat_lll_core+0x278>
        while (!done) {
 801fce8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	f43f ad8b 	beq.w	801f808 <sqisign_gen_quat_lll_core+0x130>
            }
        }

        // Check Lovasz' conditions
        // lovasz[0] = ‖b_κ‖²
        dpe_set_z(lovasz[0], (*G)[kappa][kappa]);
 801fcf2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fcf6:	f5a3 7141 	sub.w	r1, r3, #772	@ 0x304
 801fcfa:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801fcfe:	4613      	mov	r3, r2
 801fd00:	011b      	lsls	r3, r3, #4
 801fd02:	1a9b      	subs	r3, r3, r2
 801fd04:	009b      	lsls	r3, r3, #2
 801fd06:	680a      	ldr	r2, [r1, #0]
 801fd08:	441a      	add	r2, r3
 801fd0a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801fd0e:	4611      	mov	r1, r2
 801fd10:	4618      	mov	r0, r3
 801fd12:	f7ff fae5 	bl	801f2e0 <dpe_set_z>
        // lovasz[i] = lovasz[i-1] - u[κ][i-1]·r[κ][i-1]
        for (int i = 1; i < kappa; i++) {
 801fd16:	2301      	movs	r3, #1
 801fd18:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 801fd1c:	e032      	b.n	801fd84 <sqisign_gen_quat_lll_core+0x6ac>
            dpe_mul(tmpF, u[kappa][i - 1], r[kappa][i - 1]);
 801fd1e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801fd22:	3b01      	subs	r3, #1
 801fd24:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801fd28:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 801fd2c:	0089      	lsls	r1, r1, #2
 801fd2e:	440b      	add	r3, r1
 801fd30:	011b      	lsls	r3, r3, #4
 801fd32:	18d0      	adds	r0, r2, r3
 801fd34:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801fd38:	3b01      	subs	r3, #1
 801fd3a:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801fd3e:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 801fd42:	0089      	lsls	r1, r1, #2
 801fd44:	440b      	add	r3, r1
 801fd46:	011b      	lsls	r3, r3, #4
 801fd48:	441a      	add	r2, r3
 801fd4a:	f107 0320 	add.w	r3, r7, #32
 801fd4e:	4601      	mov	r1, r0
 801fd50:	4618      	mov	r0, r3
 801fd52:	f7ff fba0 	bl	801f496 <dpe_mul>
            dpe_sub(lovasz[i], lovasz[i - 1], tmpF);
 801fd56:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801fd5a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801fd5e:	011b      	lsls	r3, r3, #4
 801fd60:	18d0      	adds	r0, r2, r3
 801fd62:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801fd66:	3b01      	subs	r3, #1
 801fd68:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801fd6c:	011b      	lsls	r3, r3, #4
 801fd6e:	4413      	add	r3, r2
 801fd70:	f107 0220 	add.w	r2, r7, #32
 801fd74:	4619      	mov	r1, r3
 801fd76:	f7ff fb1d 	bl	801f3b4 <dpe_sub>
        for (int i = 1; i < kappa; i++) {
 801fd7a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801fd7e:	3301      	adds	r3, #1
 801fd80:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 801fd84:	f8d7 22dc 	ldr.w	r2, [r7, #732]	@ 0x2dc
 801fd88:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fd8c:	429a      	cmp	r2, r3
 801fd8e:	dbc6      	blt.n	801fd1e <sqisign_gen_quat_lll_core+0x646>
        }
        int swap;
        for (swap = kappa; swap > 0; swap--) {
 801fd90:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fd94:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801fd98:	e027      	b.n	801fdea <sqisign_gen_quat_lll_core+0x712>
            dpe_mul(tmpF, delta_bar, r[swap - 1][swap - 1]);
 801fd9a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801fd9e:	1e59      	subs	r1, r3, #1
 801fda0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801fda4:	3b01      	subs	r3, #1
 801fda6:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801fdaa:	0089      	lsls	r1, r1, #2
 801fdac:	440b      	add	r3, r1
 801fdae:	011b      	lsls	r3, r3, #4
 801fdb0:	441a      	add	r2, r3
 801fdb2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801fdb6:	f107 0320 	add.w	r3, r7, #32
 801fdba:	4618      	mov	r0, r3
 801fdbc:	f7ff fb6b 	bl	801f496 <dpe_mul>
            if (dpe_cmp(tmpF, lovasz[swap - 1]) < 0)
 801fdc0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801fdc4:	3b01      	subs	r3, #1
 801fdc6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801fdca:	011b      	lsls	r3, r3, #4
 801fdcc:	441a      	add	r2, r3
 801fdce:	f107 0320 	add.w	r3, r7, #32
 801fdd2:	4611      	mov	r1, r2
 801fdd4:	4618      	mov	r0, r3
 801fdd6:	f7ff fba0 	bl	801f51a <dpe_cmp>
 801fdda:	4603      	mov	r3, r0
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	db09      	blt.n	801fdf4 <sqisign_gen_quat_lll_core+0x71c>
        for (swap = kappa; swap > 0; swap--) {
 801fde0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801fde4:	3b01      	subs	r3, #1
 801fde6:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801fdea:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	dcd3      	bgt.n	801fd9a <sqisign_gen_quat_lll_core+0x6c2>
 801fdf2:	e000      	b.n	801fdf6 <sqisign_gen_quat_lll_core+0x71e>
                break;
 801fdf4:	bf00      	nop
        }

        // Insert b_κ before b_swap
        if (kappa != swap) {
 801fdf6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801fdfa:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801fdfe:	429a      	cmp	r2, r3
 801fe00:	f000 812c 	beq.w	802005c <sqisign_gen_quat_lll_core+0x984>
            // Insert b_κ before b_swap in the basis and in the lower half Gram matrix
            for (int j = kappa; j > swap; j--) {
 801fe04:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801fe08:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 801fe0c:	e0cc      	b.n	801ffa8 <sqisign_gen_quat_lll_core+0x8d0>
                for (int i = 0; i < 4; i++) {
 801fe0e:	2300      	movs	r3, #0
 801fe10:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801fe14:	e0be      	b.n	801ff94 <sqisign_gen_quat_lll_core+0x8bc>
                    ibz_swap(&(*basis)[i][j], &(*basis)[i][j - 1]);
 801fe16:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fe1a:	f5a3 7042 	sub.w	r0, r3, #776	@ 0x308
 801fe1e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801fe22:	461a      	mov	r2, r3
 801fe24:	0052      	lsls	r2, r2, #1
 801fe26:	441a      	add	r2, r3
 801fe28:	0093      	lsls	r3, r2, #2
 801fe2a:	461a      	mov	r2, r3
 801fe2c:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 801fe30:	460b      	mov	r3, r1
 801fe32:	005b      	lsls	r3, r3, #1
 801fe34:	440b      	add	r3, r1
 801fe36:	011b      	lsls	r3, r3, #4
 801fe38:	4413      	add	r3, r2
 801fe3a:	6802      	ldr	r2, [r0, #0]
 801fe3c:	18d4      	adds	r4, r2, r3
 801fe3e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801fe42:	3b01      	subs	r3, #1
 801fe44:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 801fe48:	f5a2 7042 	sub.w	r0, r2, #776	@ 0x308
 801fe4c:	461a      	mov	r2, r3
 801fe4e:	0052      	lsls	r2, r2, #1
 801fe50:	441a      	add	r2, r3
 801fe52:	0093      	lsls	r3, r2, #2
 801fe54:	461a      	mov	r2, r3
 801fe56:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 801fe5a:	460b      	mov	r3, r1
 801fe5c:	005b      	lsls	r3, r3, #1
 801fe5e:	440b      	add	r3, r1
 801fe60:	011b      	lsls	r3, r3, #4
 801fe62:	4413      	add	r3, r2
 801fe64:	6802      	ldr	r2, [r0, #0]
 801fe66:	4413      	add	r3, r2
 801fe68:	4619      	mov	r1, r3
 801fe6a:	4620      	mov	r0, r4
 801fe6c:	f7fd fa13 	bl	801d296 <sqisign_gen_ibz_swap>
                    if (i == j - 1)
 801fe70:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801fe74:	3b01      	subs	r3, #1
 801fe76:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801fe7a:	429a      	cmp	r2, r3
 801fe7c:	d11b      	bne.n	801feb6 <sqisign_gen_quat_lll_core+0x7de>
                        ibz_swap(&(*G)[i][i], &(*G)[j][j]);
 801fe7e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fe82:	f5a3 7141 	sub.w	r1, r3, #772	@ 0x304
 801fe86:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801fe8a:	4613      	mov	r3, r2
 801fe8c:	011b      	lsls	r3, r3, #4
 801fe8e:	1a9b      	subs	r3, r3, r2
 801fe90:	009b      	lsls	r3, r3, #2
 801fe92:	680a      	ldr	r2, [r1, #0]
 801fe94:	18d0      	adds	r0, r2, r3
 801fe96:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fe9a:	f5a3 7141 	sub.w	r1, r3, #772	@ 0x304
 801fe9e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 801fea2:	4613      	mov	r3, r2
 801fea4:	011b      	lsls	r3, r3, #4
 801fea6:	1a9b      	subs	r3, r3, r2
 801fea8:	009b      	lsls	r3, r3, #2
 801feaa:	680a      	ldr	r2, [r1, #0]
 801feac:	4413      	add	r3, r2
 801feae:	4619      	mov	r1, r3
 801feb0:	f7fd f9f1 	bl	801d296 <sqisign_gen_ibz_swap>
 801feb4:	e069      	b.n	801ff8a <sqisign_gen_quat_lll_core+0x8b2>
                    else if (i != j)
 801feb6:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801feba:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801febe:	429a      	cmp	r2, r3
 801fec0:	d063      	beq.n	801ff8a <sqisign_gen_quat_lll_core+0x8b2>
                        ibz_swap(SYM((*G), i, j), SYM((*G), i, j - 1));
 801fec2:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801fec6:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801feca:	429a      	cmp	r2, r3
 801fecc:	da14      	bge.n	801fef8 <sqisign_gen_quat_lll_core+0x820>
 801fece:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fed2:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801fed6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 801feda:	461a      	mov	r2, r3
 801fedc:	0052      	lsls	r2, r2, #1
 801fede:	441a      	add	r2, r3
 801fee0:	0093      	lsls	r3, r2, #2
 801fee2:	461a      	mov	r2, r3
 801fee4:	f8d7 12d4 	ldr.w	r1, [r7, #724]	@ 0x2d4
 801fee8:	460b      	mov	r3, r1
 801feea:	005b      	lsls	r3, r3, #1
 801feec:	440b      	add	r3, r1
 801feee:	011b      	lsls	r3, r3, #4
 801fef0:	4413      	add	r3, r2
 801fef2:	6802      	ldr	r2, [r0, #0]
 801fef4:	18d0      	adds	r0, r2, r3
 801fef6:	e013      	b.n	801ff20 <sqisign_gen_quat_lll_core+0x848>
 801fef8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801fefc:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 801ff00:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801ff04:	461a      	mov	r2, r3
 801ff06:	0052      	lsls	r2, r2, #1
 801ff08:	441a      	add	r2, r3
 801ff0a:	0093      	lsls	r3, r2, #2
 801ff0c:	461a      	mov	r2, r3
 801ff0e:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 801ff12:	460b      	mov	r3, r1
 801ff14:	005b      	lsls	r3, r3, #1
 801ff16:	440b      	add	r3, r1
 801ff18:	011b      	lsls	r3, r3, #4
 801ff1a:	4413      	add	r3, r2
 801ff1c:	6802      	ldr	r2, [r0, #0]
 801ff1e:	18d0      	adds	r0, r2, r3
 801ff20:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801ff24:	3b01      	subs	r3, #1
 801ff26:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801ff2a:	429a      	cmp	r2, r3
 801ff2c:	da15      	bge.n	801ff5a <sqisign_gen_quat_lll_core+0x882>
 801ff2e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801ff32:	1e59      	subs	r1, r3, #1
 801ff34:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 801ff38:	f5a3 7441 	sub.w	r4, r3, #772	@ 0x304
 801ff3c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 801ff40:	461a      	mov	r2, r3
 801ff42:	0052      	lsls	r2, r2, #1
 801ff44:	441a      	add	r2, r3
 801ff46:	0093      	lsls	r3, r2, #2
 801ff48:	461a      	mov	r2, r3
 801ff4a:	460b      	mov	r3, r1
 801ff4c:	005b      	lsls	r3, r3, #1
 801ff4e:	440b      	add	r3, r1
 801ff50:	011b      	lsls	r3, r3, #4
 801ff52:	4413      	add	r3, r2
 801ff54:	6822      	ldr	r2, [r4, #0]
 801ff56:	4413      	add	r3, r2
 801ff58:	e014      	b.n	801ff84 <sqisign_gen_quat_lll_core+0x8ac>
 801ff5a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801ff5e:	3b01      	subs	r3, #1
 801ff60:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 801ff64:	f5a2 7441 	sub.w	r4, r2, #772	@ 0x304
 801ff68:	461a      	mov	r2, r3
 801ff6a:	0052      	lsls	r2, r2, #1
 801ff6c:	441a      	add	r2, r3
 801ff6e:	0093      	lsls	r3, r2, #2
 801ff70:	461a      	mov	r2, r3
 801ff72:	f8d7 12d0 	ldr.w	r1, [r7, #720]	@ 0x2d0
 801ff76:	460b      	mov	r3, r1
 801ff78:	005b      	lsls	r3, r3, #1
 801ff7a:	440b      	add	r3, r1
 801ff7c:	011b      	lsls	r3, r3, #4
 801ff7e:	4413      	add	r3, r2
 801ff80:	6822      	ldr	r2, [r4, #0]
 801ff82:	4413      	add	r3, r2
 801ff84:	4619      	mov	r1, r3
 801ff86:	f7fd f986 	bl	801d296 <sqisign_gen_ibz_swap>
                for (int i = 0; i < 4; i++) {
 801ff8a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 801ff8e:	3301      	adds	r3, #1
 801ff90:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801ff94:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 801ff98:	2b03      	cmp	r3, #3
 801ff9a:	f77f af3c 	ble.w	801fe16 <sqisign_gen_quat_lll_core+0x73e>
            for (int j = kappa; j > swap; j--) {
 801ff9e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 801ffa2:	3b01      	subs	r3, #1
 801ffa4:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 801ffa8:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 801ffac:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801ffb0:	429a      	cmp	r2, r3
 801ffb2:	f73f af2c 	bgt.w	801fe0e <sqisign_gen_quat_lll_core+0x736>
                }
            }
            // Copy row u[κ] and r[κ] in swap position, ignore what follows
            for (int i = 0; i < swap; i++) {
 801ffb6:	2300      	movs	r3, #0
 801ffb8:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 801ffbc:	e032      	b.n	8020024 <sqisign_gen_quat_lll_core+0x94c>
                dpe_set(u[swap][i], u[kappa][i]);
 801ffbe:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801ffc2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801ffc6:	0099      	lsls	r1, r3, #2
 801ffc8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801ffcc:	440b      	add	r3, r1
 801ffce:	011b      	lsls	r3, r3, #4
 801ffd0:	18d0      	adds	r0, r2, r3
 801ffd2:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801ffd6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801ffda:	0099      	lsls	r1, r3, #2
 801ffdc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801ffe0:	440b      	add	r3, r1
 801ffe2:	011b      	lsls	r3, r3, #4
 801ffe4:	4413      	add	r3, r2
 801ffe6:	4619      	mov	r1, r3
 801ffe8:	f7ff f86a 	bl	801f0c0 <dpe_set>
                dpe_set(r[swap][i], r[kappa][i]);
 801ffec:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801fff0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 801fff4:	0099      	lsls	r1, r3, #2
 801fff6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801fffa:	440b      	add	r3, r1
 801fffc:	011b      	lsls	r3, r3, #4
 801fffe:	18d0      	adds	r0, r2, r3
 8020000:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8020004:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8020008:	0099      	lsls	r1, r3, #2
 802000a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 802000e:	440b      	add	r3, r1
 8020010:	011b      	lsls	r3, r3, #4
 8020012:	4413      	add	r3, r2
 8020014:	4619      	mov	r1, r3
 8020016:	f7ff f853 	bl	801f0c0 <dpe_set>
            for (int i = 0; i < swap; i++) {
 802001a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 802001e:	3301      	adds	r3, #1
 8020020:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8020024:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8020028:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 802002c:	429a      	cmp	r2, r3
 802002e:	dbc6      	blt.n	801ffbe <sqisign_gen_quat_lll_core+0x8e6>
            }
            dpe_set(r[swap][swap], lovasz[swap]);
 8020030:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8020034:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 8020038:	4613      	mov	r3, r2
 802003a:	009b      	lsls	r3, r3, #2
 802003c:	4413      	add	r3, r2
 802003e:	011b      	lsls	r3, r3, #4
 8020040:	18c8      	adds	r0, r1, r3
 8020042:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020046:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 802004a:	011b      	lsls	r3, r3, #4
 802004c:	4413      	add	r3, r2
 802004e:	4619      	mov	r1, r3
 8020050:	f7ff f836 	bl	801f0c0 <dpe_set>
            // swap complete
            kappa = swap;
 8020054:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8020058:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
        }

        kappa += 1;
 802005c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8020060:	3301      	adds	r3, #1
 8020062:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
    while (kappa < 4) {
 8020066:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 802006a:	2b03      	cmp	r3, #3
 802006c:	f77f abc8 	ble.w	801f800 <sqisign_gen_quat_lll_core+0x128>
    }

#ifndef NDEBUG
    // Check size-reducedness
    for (int i = 0; i < 4; i++)
 8020070:	2300      	movs	r3, #0
 8020072:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8020076:	e042      	b.n	80200fe <sqisign_gen_quat_lll_core+0xa26>
        for (int j = 0; j < i; j++) {
 8020078:	2300      	movs	r3, #0
 802007a:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 802007e:	e033      	b.n	80200e8 <sqisign_gen_quat_lll_core+0xa10>
            dpe_abs(u[i][j], u[i][j]);
 8020080:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8020084:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8020088:	0099      	lsls	r1, r3, #2
 802008a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 802008e:	440b      	add	r3, r1
 8020090:	011b      	lsls	r3, r3, #4
 8020092:	18d0      	adds	r0, r2, r3
 8020094:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8020098:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 802009c:	0099      	lsls	r1, r3, #2
 802009e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 80200a2:	440b      	add	r3, r1
 80200a4:	011b      	lsls	r3, r3, #4
 80200a6:	4413      	add	r3, r2
 80200a8:	4619      	mov	r1, r3
 80200aa:	f7ff f836 	bl	801f11a <dpe_abs>
            assert(dpe_cmp_d(u[i][j], ETABAR) <= 0);
 80200ae:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80200b2:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80200b6:	0099      	lsls	r1, r3, #2
 80200b8:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 80200bc:	440b      	add	r3, r1
 80200be:	011b      	lsls	r3, r3, #4
 80200c0:	4413      	add	r3, r2
 80200c2:	ed9f 0b97 	vldr	d0, [pc, #604]	@ 8020320 <sqisign_gen_quat_lll_core+0xc48>
 80200c6:	4618      	mov	r0, r3
 80200c8:	f7ff fab3 	bl	801f632 <dpe_cmp_d>
 80200cc:	4603      	mov	r3, r0
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	dd05      	ble.n	80200de <sqisign_gen_quat_lll_core+0xa06>
 80200d2:	4b95      	ldr	r3, [pc, #596]	@ (8020328 <sqisign_gen_quat_lll_core+0xc50>)
 80200d4:	4a95      	ldr	r2, [pc, #596]	@ (802032c <sqisign_gen_quat_lll_core+0xc54>)
 80200d6:	2192      	movs	r1, #146	@ 0x92
 80200d8:	4895      	ldr	r0, [pc, #596]	@ (8020330 <sqisign_gen_quat_lll_core+0xc58>)
 80200da:	f015 f8ad 	bl	8035238 <__assert_func>
        for (int j = 0; j < i; j++) {
 80200de:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 80200e2:	3301      	adds	r3, #1
 80200e4:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80200e8:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 80200ec:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80200f0:	429a      	cmp	r2, r3
 80200f2:	dbc5      	blt.n	8020080 <sqisign_gen_quat_lll_core+0x9a8>
    for (int i = 0; i < 4; i++)
 80200f4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80200f8:	3301      	adds	r3, #1
 80200fa:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80200fe:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8020102:	2b03      	cmp	r3, #3
 8020104:	ddb8      	ble.n	8020078 <sqisign_gen_quat_lll_core+0x9a0>
        }
    // Check Lovasz' conditions
    for (int i = 1; i < 4; i++) {
 8020106:	2301      	movs	r3, #1
 8020108:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 802010c:	e054      	b.n	80201b8 <sqisign_gen_quat_lll_core+0xae0>
        dpe_mul(tmpF, u[i][i - 1], u[i][i - 1]);
 802010e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8020112:	3b01      	subs	r3, #1
 8020114:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8020118:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 802011c:	0089      	lsls	r1, r1, #2
 802011e:	440b      	add	r3, r1
 8020120:	011b      	lsls	r3, r3, #4
 8020122:	18d0      	adds	r0, r2, r3
 8020124:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8020128:	3b01      	subs	r3, #1
 802012a:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 802012e:	f8d7 12c0 	ldr.w	r1, [r7, #704]	@ 0x2c0
 8020132:	0089      	lsls	r1, r1, #2
 8020134:	440b      	add	r3, r1
 8020136:	011b      	lsls	r3, r3, #4
 8020138:	441a      	add	r2, r3
 802013a:	f107 0320 	add.w	r3, r7, #32
 802013e:	4601      	mov	r1, r0
 8020140:	4618      	mov	r0, r3
 8020142:	f7ff f9a8 	bl	801f496 <dpe_mul>
        dpe_sub(tmpF, dpe_const_DELTABAR, tmpF);
 8020146:	f107 0220 	add.w	r2, r7, #32
 802014a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 802014e:	f107 0320 	add.w	r3, r7, #32
 8020152:	4618      	mov	r0, r3
 8020154:	f7ff f92e 	bl	801f3b4 <dpe_sub>
        dpe_mul(tmpF, tmpF, r[i - 1][i - 1]);
 8020158:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 802015c:	1e59      	subs	r1, r3, #1
 802015e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8020162:	3b01      	subs	r3, #1
 8020164:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8020168:	0089      	lsls	r1, r1, #2
 802016a:	440b      	add	r3, r1
 802016c:	011b      	lsls	r3, r3, #4
 802016e:	441a      	add	r2, r3
 8020170:	f107 0120 	add.w	r1, r7, #32
 8020174:	f107 0320 	add.w	r3, r7, #32
 8020178:	4618      	mov	r0, r3
 802017a:	f7ff f98c 	bl	801f496 <dpe_mul>
        assert(dpe_cmp(tmpF, r[i][i]) <= 0);
 802017e:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8020182:	f8d7 22c0 	ldr.w	r2, [r7, #704]	@ 0x2c0
 8020186:	4613      	mov	r3, r2
 8020188:	009b      	lsls	r3, r3, #2
 802018a:	4413      	add	r3, r2
 802018c:	011b      	lsls	r3, r3, #4
 802018e:	18ca      	adds	r2, r1, r3
 8020190:	f107 0320 	add.w	r3, r7, #32
 8020194:	4611      	mov	r1, r2
 8020196:	4618      	mov	r0, r3
 8020198:	f7ff f9bf 	bl	801f51a <dpe_cmp>
 802019c:	4603      	mov	r3, r0
 802019e:	2b00      	cmp	r3, #0
 80201a0:	dd05      	ble.n	80201ae <sqisign_gen_quat_lll_core+0xad6>
 80201a2:	4b64      	ldr	r3, [pc, #400]	@ (8020334 <sqisign_gen_quat_lll_core+0xc5c>)
 80201a4:	4a61      	ldr	r2, [pc, #388]	@ (802032c <sqisign_gen_quat_lll_core+0xc54>)
 80201a6:	2199      	movs	r1, #153	@ 0x99
 80201a8:	4861      	ldr	r0, [pc, #388]	@ (8020330 <sqisign_gen_quat_lll_core+0xc58>)
 80201aa:	f015 f845 	bl	8035238 <__assert_func>
    for (int i = 1; i < 4; i++) {
 80201ae:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 80201b2:	3301      	adds	r3, #1
 80201b4:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80201b8:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 80201bc:	2b03      	cmp	r3, #3
 80201be:	dda6      	ble.n	802010e <sqisign_gen_quat_lll_core+0xa36>
    }
#endif

    // Fill in the upper half of the Gram matrix
    for (int i = 0; i < 4; i++) {
 80201c0:	2300      	movs	r3, #0
 80201c2:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 80201c6:	e03f      	b.n	8020248 <sqisign_gen_quat_lll_core+0xb70>
        for (int j = i + 1; j < 4; j++)
 80201c8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 80201cc:	3301      	adds	r3, #1
 80201ce:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 80201d2:	e030      	b.n	8020236 <sqisign_gen_quat_lll_core+0xb5e>
            ibz_copy(&(*G)[i][j], &(*G)[j][i]);
 80201d4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80201d8:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 80201dc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 80201e0:	461a      	mov	r2, r3
 80201e2:	0052      	lsls	r2, r2, #1
 80201e4:	441a      	add	r2, r3
 80201e6:	0093      	lsls	r3, r2, #2
 80201e8:	461a      	mov	r2, r3
 80201ea:	f8d7 12bc 	ldr.w	r1, [r7, #700]	@ 0x2bc
 80201ee:	460b      	mov	r3, r1
 80201f0:	005b      	lsls	r3, r3, #1
 80201f2:	440b      	add	r3, r1
 80201f4:	011b      	lsls	r3, r3, #4
 80201f6:	4413      	add	r3, r2
 80201f8:	6802      	ldr	r2, [r0, #0]
 80201fa:	18d4      	adds	r4, r2, r3
 80201fc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8020200:	f5a3 7041 	sub.w	r0, r3, #772	@ 0x304
 8020204:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8020208:	461a      	mov	r2, r3
 802020a:	0052      	lsls	r2, r2, #1
 802020c:	441a      	add	r2, r3
 802020e:	0093      	lsls	r3, r2, #2
 8020210:	461a      	mov	r2, r3
 8020212:	f8d7 12b8 	ldr.w	r1, [r7, #696]	@ 0x2b8
 8020216:	460b      	mov	r3, r1
 8020218:	005b      	lsls	r3, r3, #1
 802021a:	440b      	add	r3, r1
 802021c:	011b      	lsls	r3, r3, #4
 802021e:	4413      	add	r3, r2
 8020220:	6802      	ldr	r2, [r0, #0]
 8020222:	4413      	add	r3, r2
 8020224:	4619      	mov	r1, r3
 8020226:	4620      	mov	r0, r4
 8020228:	f7fd f828 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = i + 1; j < 4; j++)
 802022c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8020230:	3301      	adds	r3, #1
 8020232:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8020236:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 802023a:	2b03      	cmp	r3, #3
 802023c:	ddca      	ble.n	80201d4 <sqisign_gen_quat_lll_core+0xafc>
    for (int i = 0; i < 4; i++) {
 802023e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8020242:	3301      	adds	r3, #1
 8020244:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8020248:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 802024c:	2b03      	cmp	r3, #3
 802024e:	ddbb      	ble.n	80201c8 <sqisign_gen_quat_lll_core+0xaf0>
    }

    // Clearinghouse
    ibz_finalize(&X);
 8020250:	f107 0314 	add.w	r3, r7, #20
 8020254:	4618      	mov	r0, r3
 8020256:	f7fc fee1 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&tmpI);
 802025a:	f107 0308 	add.w	r3, r7, #8
 802025e:	4618      	mov	r0, r3
 8020260:	f7fc fedc 	bl	801d01c <sqisign_gen_ibz_finalize>
    dpe_clear(dpe_const_one);
 8020264:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8020268:	4618      	mov	r0, r3
 802026a:	f7fe ff1f 	bl	801f0ac <dpe_clear>
    dpe_clear(dpe_const_DELTABAR);
 802026e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020272:	4618      	mov	r0, r3
 8020274:	f7fe ff1a 	bl	801f0ac <dpe_clear>
    dpe_clear(Xf);
 8020278:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 802027c:	4618      	mov	r0, r3
 802027e:	f7fe ff15 	bl	801f0ac <dpe_clear>
    dpe_clear(tmpF);
 8020282:	f107 0320 	add.w	r3, r7, #32
 8020286:	4618      	mov	r0, r3
 8020288:	f7fe ff10 	bl	801f0ac <dpe_clear>
    dpe_clear(delta_bar);
 802028c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8020290:	4618      	mov	r0, r3
 8020292:	f7fe ff0b 	bl	801f0ac <dpe_clear>
    for (int i = 0; i < 4; i++) {
 8020296:	2300      	movs	r3, #0
 8020298:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 802029c:	e036      	b.n	802030c <sqisign_gen_quat_lll_core+0xc34>
        dpe_clear(lovasz[i]);
 802029e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80202a2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80202a6:	011b      	lsls	r3, r3, #4
 80202a8:	4413      	add	r3, r2
 80202aa:	4618      	mov	r0, r3
 80202ac:	f7fe fefe 	bl	801f0ac <dpe_clear>
        for (int j = 0; j <= i; j++) {
 80202b0:	2300      	movs	r3, #0
 80202b2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80202b6:	e01e      	b.n	80202f6 <sqisign_gen_quat_lll_core+0xc1e>
            dpe_clear(r[i][j]);
 80202b8:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 80202bc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80202c0:	0099      	lsls	r1, r3, #2
 80202c2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80202c6:	440b      	add	r3, r1
 80202c8:	011b      	lsls	r3, r3, #4
 80202ca:	4413      	add	r3, r2
 80202cc:	4618      	mov	r0, r3
 80202ce:	f7fe feed 	bl	801f0ac <dpe_clear>
            dpe_clear(u[i][j]);
 80202d2:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80202d6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80202da:	0099      	lsls	r1, r3, #2
 80202dc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80202e0:	440b      	add	r3, r1
 80202e2:	011b      	lsls	r3, r3, #4
 80202e4:	4413      	add	r3, r2
 80202e6:	4618      	mov	r0, r3
 80202e8:	f7fe fee0 	bl	801f0ac <dpe_clear>
        for (int j = 0; j <= i; j++) {
 80202ec:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80202f0:	3301      	adds	r3, #1
 80202f2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80202f6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 80202fa:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80202fe:	429a      	cmp	r2, r3
 8020300:	ddda      	ble.n	80202b8 <sqisign_gen_quat_lll_core+0xbe0>
    for (int i = 0; i < 4; i++) {
 8020302:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8020306:	3301      	adds	r3, #1
 8020308:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 802030c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8020310:	2b03      	cmp	r3, #3
 8020312:	ddc4      	ble.n	802029e <sqisign_gen_quat_lll_core+0xbc6>
        }
    }
}
 8020314:	bf00      	nop
 8020316:	bf00      	nop
 8020318:	f507 7743 	add.w	r7, r7, #780	@ 0x30c
 802031c:	46bd      	mov	sp, r7
 802031e:	bd90      	pop	{r4, r7, pc}
 8020320:	c28f5c29 	.word	0xc28f5c29
 8020324:	3fe028f5 	.word	0x3fe028f5
 8020328:	08038028 	.word	0x08038028
 802032c:	0803bb10 	.word	0x0803bb10
 8020330:	08038048 	.word	0x08038048
 8020334:	0803805c 	.word	0x0803805c

08020338 <sqisign_gen_quat_lattice_bound_parallelogram>:
#include "internal.h"
#include "lll_internals.h"

int
quat_lattice_bound_parallelogram(ibz_vec_4_t *box, ibz_mat_4x4_t *U, const ibz_mat_4x4_t *G, const ibz_t *radius)
{
 8020338:	b580      	push	{r7, lr}
 802033a:	b0be      	sub	sp, #248	@ 0xf8
 802033c:	af00      	add	r7, sp, #0
 802033e:	60f8      	str	r0, [r7, #12]
 8020340:	60b9      	str	r1, [r7, #8]
 8020342:	607a      	str	r2, [r7, #4]
 8020344:	603b      	str	r3, [r7, #0]
    ibz_t denom, rem;
    ibz_init(&denom);
 8020346:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 802034a:	4618      	mov	r0, r3
 802034c:	f7fc fe5b 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&rem);
 8020350:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8020354:	4618      	mov	r0, r3
 8020356:	f7fc fe56 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mat_4x4_t dualG;
    ibz_mat_4x4_init(&dualG);
 802035a:	f107 0310 	add.w	r3, r7, #16
 802035e:	4618      	mov	r0, r3
 8020360:	f7ee fde7 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>

// Compute the Gram matrix of the dual lattice
#ifndef NDEBUG
    int inv_check = ibz_mat_4x4_inv_with_det_as_denom(&dualG, &denom, G);
 8020364:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8020368:	f107 0310 	add.w	r3, r7, #16
 802036c:	687a      	ldr	r2, [r7, #4]
 802036e:	4618      	mov	r0, r3
 8020370:	f7ea f948 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
 8020374:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    assert(inv_check);
 8020378:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 802037c:	2b00      	cmp	r3, #0
 802037e:	d105      	bne.n	802038c <sqisign_gen_quat_lattice_bound_parallelogram+0x54>
 8020380:	4b5b      	ldr	r3, [pc, #364]	@ (80204f0 <sqisign_gen_quat_lattice_bound_parallelogram+0x1b8>)
 8020382:	4a5c      	ldr	r2, [pc, #368]	@ (80204f4 <sqisign_gen_quat_lattice_bound_parallelogram+0x1bc>)
 8020384:	2113      	movs	r1, #19
 8020386:	485c      	ldr	r0, [pc, #368]	@ (80204f8 <sqisign_gen_quat_lattice_bound_parallelogram+0x1c0>)
 8020388:	f014 ff56 	bl	8035238 <__assert_func>
#else
    (void)ibz_mat_4x4_inv_with_det_as_denom(&dualG, &denom, G);
#endif
    // Initialize the dual lattice basis to the identity matrix
    ibz_mat_4x4_identity(U);
 802038c:	68b8      	ldr	r0, [r7, #8]
 802038e:	f7e9 ff9a 	bl	800a2c6 <sqisign_gen_ibz_mat_4x4_identity>
    // Reduce the dual lattice
    quat_lll_core(&dualG, U);
 8020392:	f107 0310 	add.w	r3, r7, #16
 8020396:	68b9      	ldr	r1, [r7, #8]
 8020398:	4618      	mov	r0, r3
 802039a:	f7ff f99d 	bl	801f6d8 <sqisign_gen_quat_lll_core>

    // Compute the parallelogram's bounds
    int trivial = 1;
 802039e:	2301      	movs	r3, #1
 80203a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (int i = 0; i < 4; i++) {
 80203a4:	2300      	movs	r3, #0
 80203a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80203aa:	e053      	b.n	8020454 <sqisign_gen_quat_lattice_bound_parallelogram+0x11c>
        ibz_mul(&(*box)[i], &dualG[i][i], radius);
 80203ac:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80203b0:	4613      	mov	r3, r2
 80203b2:	005b      	lsls	r3, r3, #1
 80203b4:	4413      	add	r3, r2
 80203b6:	009b      	lsls	r3, r3, #2
 80203b8:	68fa      	ldr	r2, [r7, #12]
 80203ba:	18d0      	adds	r0, r2, r3
 80203bc:	f107 0110 	add.w	r1, r7, #16
 80203c0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80203c4:	4613      	mov	r3, r2
 80203c6:	011b      	lsls	r3, r3, #4
 80203c8:	1a9b      	subs	r3, r3, r2
 80203ca:	009b      	lsls	r3, r3, #2
 80203cc:	440b      	add	r3, r1
 80203ce:	683a      	ldr	r2, [r7, #0]
 80203d0:	4619      	mov	r1, r3
 80203d2:	f7fc fe4c 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_div(&(*box)[i], &rem, &(*box)[i], &denom);
 80203d6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80203da:	4613      	mov	r3, r2
 80203dc:	005b      	lsls	r3, r3, #1
 80203de:	4413      	add	r3, r2
 80203e0:	009b      	lsls	r3, r3, #2
 80203e2:	68fa      	ldr	r2, [r7, #12]
 80203e4:	18d0      	adds	r0, r2, r3
 80203e6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80203ea:	4613      	mov	r3, r2
 80203ec:	005b      	lsls	r3, r3, #1
 80203ee:	4413      	add	r3, r2
 80203f0:	009b      	lsls	r3, r3, #2
 80203f2:	68fa      	ldr	r2, [r7, #12]
 80203f4:	441a      	add	r2, r3
 80203f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80203fa:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 80203fe:	f7fc fe5f 	bl	801d0c0 <sqisign_gen_ibz_div>
        ibz_sqrt_floor(&(*box)[i], &(*box)[i]);
 8020402:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8020406:	4613      	mov	r3, r2
 8020408:	005b      	lsls	r3, r3, #1
 802040a:	4413      	add	r3, r2
 802040c:	009b      	lsls	r3, r3, #2
 802040e:	68fa      	ldr	r2, [r7, #12]
 8020410:	18d0      	adds	r0, r2, r3
 8020412:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8020416:	4613      	mov	r3, r2
 8020418:	005b      	lsls	r3, r3, #1
 802041a:	4413      	add	r3, r2
 802041c:	009b      	lsls	r3, r3, #2
 802041e:	68fa      	ldr	r2, [r7, #12]
 8020420:	4413      	add	r3, r2
 8020422:	4619      	mov	r1, r3
 8020424:	f7fd f91e 	bl	801d664 <sqisign_gen_ibz_sqrt_floor>
        trivial &= ibz_is_zero(&(*box)[i]);
 8020428:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 802042c:	4613      	mov	r3, r2
 802042e:	005b      	lsls	r3, r3, #1
 8020430:	4413      	add	r3, r2
 8020432:	009b      	lsls	r3, r3, #2
 8020434:	68fa      	ldr	r2, [r7, #12]
 8020436:	4413      	add	r3, r2
 8020438:	4618      	mov	r0, r3
 802043a:	f7fc fec8 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 802043e:	4602      	mov	r2, r0
 8020440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020444:	4013      	ands	r3, r2
 8020446:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (int i = 0; i < 4; i++) {
 802044a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802044e:	3301      	adds	r3, #1
 8020450:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8020454:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8020458:	2b03      	cmp	r3, #3
 802045a:	dda7      	ble.n	80203ac <sqisign_gen_quat_lattice_bound_parallelogram+0x74>
    }

    // Compute the transpose transformation matrix
#ifndef NDEBUG
    int inv = ibz_mat_4x4_inv_with_det_as_denom(U, &denom, U);
 802045c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8020460:	68ba      	ldr	r2, [r7, #8]
 8020462:	4619      	mov	r1, r3
 8020464:	68b8      	ldr	r0, [r7, #8]
 8020466:	f7ea f8cd 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
 802046a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
#else
    (void)ibz_mat_4x4_inv_with_det_as_denom(U, &denom, U);
#endif
    // U is unitary, det(U) = ± 1
    ibz_mat_4x4_scalar_mul(U, &denom, U);
 802046e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8020472:	68ba      	ldr	r2, [r7, #8]
 8020474:	4619      	mov	r1, r3
 8020476:	68b8      	ldr	r0, [r7, #8]
 8020478:	f7e9 ff5d 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
#ifndef NDEBUG
    assert(inv);
 802047c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8020480:	2b00      	cmp	r3, #0
 8020482:	d105      	bne.n	8020490 <sqisign_gen_quat_lattice_bound_parallelogram+0x158>
 8020484:	4b1d      	ldr	r3, [pc, #116]	@ (80204fc <sqisign_gen_quat_lattice_bound_parallelogram+0x1c4>)
 8020486:	4a1b      	ldr	r2, [pc, #108]	@ (80204f4 <sqisign_gen_quat_lattice_bound_parallelogram+0x1bc>)
 8020488:	212e      	movs	r1, #46	@ 0x2e
 802048a:	481b      	ldr	r0, [pc, #108]	@ (80204f8 <sqisign_gen_quat_lattice_bound_parallelogram+0x1c0>)
 802048c:	f014 fed4 	bl	8035238 <__assert_func>
    ibz_abs(&denom, &denom);
 8020490:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8020494:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8020498:	4611      	mov	r1, r2
 802049a:	4618      	mov	r0, r3
 802049c:	f7fc fe03 	bl	801d0a6 <sqisign_gen_ibz_abs>
    assert(ibz_is_one(&denom));
 80204a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80204a4:	4618      	mov	r0, r3
 80204a6:	f7fc fea6 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 80204aa:	4603      	mov	r3, r0
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d105      	bne.n	80204bc <sqisign_gen_quat_lattice_bound_parallelogram+0x184>
 80204b0:	4b13      	ldr	r3, [pc, #76]	@ (8020500 <sqisign_gen_quat_lattice_bound_parallelogram+0x1c8>)
 80204b2:	4a10      	ldr	r2, [pc, #64]	@ (80204f4 <sqisign_gen_quat_lattice_bound_parallelogram+0x1bc>)
 80204b4:	2130      	movs	r1, #48	@ 0x30
 80204b6:	4810      	ldr	r0, [pc, #64]	@ (80204f8 <sqisign_gen_quat_lattice_bound_parallelogram+0x1c0>)
 80204b8:	f014 febe 	bl	8035238 <__assert_func>
#endif

    ibz_mat_4x4_finalize(&dualG);
 80204bc:	f107 0310 	add.w	r3, r7, #16
 80204c0:	4618      	mov	r0, r3
 80204c2:	f7ee fd62 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_finalize(&denom);
 80204c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80204ca:	4618      	mov	r0, r3
 80204cc:	f7fc fda6 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&rem);
 80204d0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80204d4:	4618      	mov	r0, r3
 80204d6:	f7fc fda1 	bl	801d01c <sqisign_gen_ibz_finalize>
    return !trivial;
 80204da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80204de:	2b00      	cmp	r3, #0
 80204e0:	bf0c      	ite	eq
 80204e2:	2301      	moveq	r3, #1
 80204e4:	2300      	movne	r3, #0
 80204e6:	b2db      	uxtb	r3, r3
}
 80204e8:	4618      	mov	r0, r3
 80204ea:	37f8      	adds	r7, #248	@ 0xf8
 80204ec:	46bd      	mov	sp, r7
 80204ee:	bd80      	pop	{r7, pc}
 80204f0:	08038078 	.word	0x08038078
 80204f4:	0803bb2c 	.word	0x0803bb2c
 80204f8:	08038084 	.word	0x08038084
 80204fc:	0803809c 	.word	0x0803809c
 8020500:	080380a0 	.word	0x080380a0

08020504 <sqisign_gen_quat_lattice_sample_from_ball>:
int
quat_lattice_sample_from_ball(quat_alg_elem_t *res,
                              const quat_lattice_t *lattice,
                              const quat_alg_t *alg,
                              const ibz_t *radius)
{
 8020504:	b590      	push	{r4, r7, lr}
 8020506:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 802050a:	af00      	add	r7, sp, #0
 802050c:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8020510:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8020514:	6020      	str	r0, [r4, #0]
 8020516:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 802051a:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 802051e:	6001      	str	r1, [r0, #0]
 8020520:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8020524:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8020528:	600a      	str	r2, [r1, #0]
 802052a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 802052e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8020532:	6013      	str	r3, [r2, #0]
    assert(ibz_cmp(radius, &ibz_const_zero) > 0);
 8020534:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8020538:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 802053c:	49d3      	ldr	r1, [pc, #844]	@ (802088c <sqisign_gen_quat_lattice_sample_from_ball+0x388>)
 802053e:	6818      	ldr	r0, [r3, #0]
 8020540:	f7fc fe36 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8020544:	4603      	mov	r3, r0
 8020546:	2b00      	cmp	r3, #0
 8020548:	dc05      	bgt.n	8020556 <sqisign_gen_quat_lattice_sample_from_ball+0x52>
 802054a:	4bd1      	ldr	r3, [pc, #836]	@ (8020890 <sqisign_gen_quat_lattice_sample_from_ball+0x38c>)
 802054c:	4ad1      	ldr	r2, [pc, #836]	@ (8020894 <sqisign_gen_quat_lattice_sample_from_ball+0x390>)
 802054e:	213f      	movs	r1, #63	@ 0x3f
 8020550:	48d1      	ldr	r0, [pc, #836]	@ (8020898 <sqisign_gen_quat_lattice_sample_from_ball+0x394>)
 8020552:	f014 fe71 	bl	8035238 <__assert_func>

    ibz_vec_4_t box;
    ibz_vec_4_init(&box);
 8020556:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 802055a:	4618      	mov	r0, r3
 802055c:	f7ee fc59 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_mat_4x4_t U, G;
    ibz_mat_4x4_init(&U);
 8020560:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8020564:	4618      	mov	r0, r3
 8020566:	f7ee fce4 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_init(&G);
 802056a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802056e:	4618      	mov	r0, r3
 8020570:	f7ee fcdf 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_vec_4_t x;
    ibz_vec_4_init(&x);
 8020574:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8020578:	4618      	mov	r0, r3
 802057a:	f7ee fc4a 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_t rad, tmp;
    ibz_init(&rad);
 802057e:	f107 0320 	add.w	r3, r7, #32
 8020582:	4618      	mov	r0, r3
 8020584:	f7fc fd3f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&tmp);
 8020588:	f107 0314 	add.w	r3, r7, #20
 802058c:	4618      	mov	r0, r3
 802058e:	f7fc fd3a 	bl	801d006 <sqisign_gen_ibz_init>

    // Compute the Gram matrix of the lattice
    quat_lattice_gram(&G, lattice, alg);
 8020592:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8020596:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 802059a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 802059e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80205a2:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80205a6:	6812      	ldr	r2, [r2, #0]
 80205a8:	6819      	ldr	r1, [r3, #0]
 80205aa:	f001 f88b 	bl	80216c4 <sqisign_gen_quat_lattice_gram>

    // Correct ball radius by the denominator
    ibz_mul(&rad, radius, &lattice->denom);
 80205ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80205b2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80205b6:	681a      	ldr	r2, [r3, #0]
 80205b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80205bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80205c0:	f107 0020 	add.w	r0, r7, #32
 80205c4:	6819      	ldr	r1, [r3, #0]
 80205c6:	f7fc fd52 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&rad, &rad, &lattice->denom);
 80205ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80205ce:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80205d2:	681a      	ldr	r2, [r3, #0]
 80205d4:	f107 0120 	add.w	r1, r7, #32
 80205d8:	f107 0320 	add.w	r3, r7, #32
 80205dc:	4618      	mov	r0, r3
 80205de:	f7fc fd46 	bl	801d06e <sqisign_gen_ibz_mul>
    // Correct by 2 (Gram matrix corresponds to twice the norm)
    ibz_mul(&rad, &rad, &ibz_const_two);
 80205e2:	f107 0120 	add.w	r1, r7, #32
 80205e6:	f107 0320 	add.w	r3, r7, #32
 80205ea:	4aac      	ldr	r2, [pc, #688]	@ (802089c <sqisign_gen_quat_lattice_sample_from_ball+0x398>)
 80205ec:	4618      	mov	r0, r3
 80205ee:	f7fc fd3e 	bl	801d06e <sqisign_gen_ibz_mul>

    // Compute a bounding parallelogram for the ball, stop if it only
    // contains the origin
    int ok = quat_lattice_bound_parallelogram(&box, &U, &G, &rad);
 80205f2:	f107 0320 	add.w	r3, r7, #32
 80205f6:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80205fa:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 80205fe:	f507 70ee 	add.w	r0, r7, #476	@ 0x1dc
 8020602:	f7ff fe99 	bl	8020338 <sqisign_gen_quat_lattice_bound_parallelogram>
 8020606:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
    if (!ok)
 802060a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 802060e:	2b00      	cmp	r3, #0
 8020610:	f000 8112 	beq.w	8020838 <sqisign_gen_quat_lattice_sample_from_ball+0x334>
        goto err;

    // Rejection sampling from the parallelogram
#ifndef NDEBUG
    int cnt = 0;
 8020614:	2300      	movs	r3, #0
 8020616:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
#endif
    do {
        // Sample vector
        for (int i = 0; i < 4; i++) {
 802061a:	2300      	movs	r3, #0
 802061c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8020620:	e072      	b.n	8020708 <sqisign_gen_quat_lattice_sample_from_ball+0x204>
            if (ibz_is_zero(&box[i])) {
 8020622:	f507 71ee 	add.w	r1, r7, #476	@ 0x1dc
 8020626:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 802062a:	4613      	mov	r3, r2
 802062c:	005b      	lsls	r3, r3, #1
 802062e:	4413      	add	r3, r2
 8020630:	009b      	lsls	r3, r3, #2
 8020632:	440b      	add	r3, r1
 8020634:	4618      	mov	r0, r3
 8020636:	f7fc fdca 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 802063a:	4603      	mov	r3, r0
 802063c:	2b00      	cmp	r3, #0
 802063e:	d00d      	beq.n	802065c <sqisign_gen_quat_lattice_sample_from_ball+0x158>
                ibz_copy(&x[i], &ibz_const_zero);
 8020640:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8020644:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8020648:	4613      	mov	r3, r2
 802064a:	005b      	lsls	r3, r3, #1
 802064c:	4413      	add	r3, r2
 802064e:	009b      	lsls	r3, r3, #2
 8020650:	440b      	add	r3, r1
 8020652:	498e      	ldr	r1, [pc, #568]	@ (802088c <sqisign_gen_quat_lattice_sample_from_ball+0x388>)
 8020654:	4618      	mov	r0, r3
 8020656:	f7fc fe11 	bl	801d27c <sqisign_gen_ibz_copy>
 802065a:	e050      	b.n	80206fe <sqisign_gen_quat_lattice_sample_from_ball+0x1fa>
            } else {
                ibz_add(&tmp, &box[i], &box[i]);
 802065c:	f507 71ee 	add.w	r1, r7, #476	@ 0x1dc
 8020660:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8020664:	4613      	mov	r3, r2
 8020666:	005b      	lsls	r3, r3, #1
 8020668:	4413      	add	r3, r2
 802066a:	009b      	lsls	r3, r3, #2
 802066c:	18c8      	adds	r0, r1, r3
 802066e:	f507 71ee 	add.w	r1, r7, #476	@ 0x1dc
 8020672:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8020676:	4613      	mov	r3, r2
 8020678:	005b      	lsls	r3, r3, #1
 802067a:	4413      	add	r3, r2
 802067c:	009b      	lsls	r3, r3, #2
 802067e:	18ca      	adds	r2, r1, r3
 8020680:	f107 0314 	add.w	r3, r7, #20
 8020684:	4601      	mov	r1, r0
 8020686:	4618      	mov	r0, r3
 8020688:	f7fc fcd3 	bl	801d032 <sqisign_gen_ibz_add>
                ok &= ibz_rand_interval(&x[i], &ibz_const_zero, &tmp);
 802068c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8020690:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8020694:	4613      	mov	r3, r2
 8020696:	005b      	lsls	r3, r3, #1
 8020698:	4413      	add	r3, r2
 802069a:	009b      	lsls	r3, r3, #2
 802069c:	440b      	add	r3, r1
 802069e:	f107 0214 	add.w	r2, r7, #20
 80206a2:	497a      	ldr	r1, [pc, #488]	@ (802088c <sqisign_gen_quat_lattice_sample_from_ball+0x388>)
 80206a4:	4618      	mov	r0, r3
 80206a6:	f7fc fe0f 	bl	801d2c8 <sqisign_gen_ibz_rand_interval>
 80206aa:	4602      	mov	r2, r0
 80206ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80206b0:	4013      	ands	r3, r2
 80206b2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
                ibz_sub(&x[i], &x[i], &box[i]);
 80206b6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80206ba:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80206be:	4613      	mov	r3, r2
 80206c0:	005b      	lsls	r3, r3, #1
 80206c2:	4413      	add	r3, r2
 80206c4:	009b      	lsls	r3, r3, #2
 80206c6:	18c8      	adds	r0, r1, r3
 80206c8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80206cc:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80206d0:	4613      	mov	r3, r2
 80206d2:	005b      	lsls	r3, r3, #1
 80206d4:	4413      	add	r3, r2
 80206d6:	009b      	lsls	r3, r3, #2
 80206d8:	18cc      	adds	r4, r1, r3
 80206da:	f507 71ee 	add.w	r1, r7, #476	@ 0x1dc
 80206de:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80206e2:	4613      	mov	r3, r2
 80206e4:	005b      	lsls	r3, r3, #1
 80206e6:	4413      	add	r3, r2
 80206e8:	009b      	lsls	r3, r3, #2
 80206ea:	440b      	add	r3, r1
 80206ec:	461a      	mov	r2, r3
 80206ee:	4621      	mov	r1, r4
 80206f0:	f7fc fcae 	bl	801d050 <sqisign_gen_ibz_sub>
                if (!ok)
 80206f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	f000 809f 	beq.w	802083c <sqisign_gen_quat_lattice_sample_from_ball+0x338>
        for (int i = 0; i < 4; i++) {
 80206fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020702:	3301      	adds	r3, #1
 8020704:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8020708:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 802070c:	2b03      	cmp	r3, #3
 802070e:	dd88      	ble.n	8020622 <sqisign_gen_quat_lattice_sample_from_ball+0x11e>
                    goto err;
            }
        }
        // Map to parallelogram
        ibz_mat_4x4_eval_t(&x, &x, &U);
 8020710:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8020714:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8020718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802071c:	4618      	mov	r0, r3
 802071e:	f7ea fd39 	bl	800b194 <sqisign_gen_ibz_mat_4x4_eval_t>
        // Evaluate quadratic form
        quat_qf_eval(&tmp, &G, &x);
 8020722:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8020726:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 802072a:	f107 0314 	add.w	r3, r7, #20
 802072e:	4618      	mov	r0, r3
 8020730:	f7ea fd95 	bl	800b25e <sqisign_gen_quat_qf_eval>
#ifndef NDEBUG
        cnt++;
 8020734:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8020738:	3301      	adds	r3, #1
 802073a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
        if (cnt % 100 == 0)
 802073e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8020742:	4b57      	ldr	r3, [pc, #348]	@ (80208a0 <sqisign_gen_quat_lattice_sample_from_ball+0x39c>)
 8020744:	fb83 1302 	smull	r1, r3, r3, r2
 8020748:	1159      	asrs	r1, r3, #5
 802074a:	17d3      	asrs	r3, r2, #31
 802074c:	1acb      	subs	r3, r1, r3
 802074e:	2164      	movs	r1, #100	@ 0x64
 8020750:	fb01 f303 	mul.w	r3, r1, r3
 8020754:	1ad3      	subs	r3, r2, r3
 8020756:	2b00      	cmp	r3, #0
 8020758:	d106      	bne.n	8020768 <sqisign_gen_quat_lattice_sample_from_ball+0x264>
            printf("Lattice sampling rejected %d times", cnt - 1);
 802075a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 802075e:	3b01      	subs	r3, #1
 8020760:	4619      	mov	r1, r3
 8020762:	4850      	ldr	r0, [pc, #320]	@ (80208a4 <sqisign_gen_quat_lattice_sample_from_ball+0x3a0>)
 8020764:	f015 f8ea 	bl	803593c <iprintf>
#endif
    } while (ibz_is_zero(&tmp) || (ibz_cmp(&tmp, &rad) > 0));
 8020768:	f107 0314 	add.w	r3, r7, #20
 802076c:	4618      	mov	r0, r3
 802076e:	f7fc fd2e 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	f47f af50 	bne.w	802061a <sqisign_gen_quat_lattice_sample_from_ball+0x116>
 802077a:	f107 0220 	add.w	r2, r7, #32
 802077e:	f107 0314 	add.w	r3, r7, #20
 8020782:	4611      	mov	r1, r2
 8020784:	4618      	mov	r0, r3
 8020786:	f7fc fd13 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 802078a:	4603      	mov	r3, r0
 802078c:	2b00      	cmp	r3, #0
 802078e:	f73f af44 	bgt.w	802061a <sqisign_gen_quat_lattice_sample_from_ball+0x116>

    // Evaluate linear combination
    ibz_mat_4x4_eval(&(res->coord), &(lattice->basis), &x);
 8020792:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8020796:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 802079a:	681b      	ldr	r3, [r3, #0]
 802079c:	f103 000c 	add.w	r0, r3, #12
 80207a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80207a4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	330c      	adds	r3, #12
 80207ac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80207b0:	4619      	mov	r1, r3
 80207b2:	f7ea fc8a 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
    ibz_copy(&(res->denom), &(lattice->denom));
 80207b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80207ba:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80207be:	681a      	ldr	r2, [r3, #0]
 80207c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80207c4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80207c8:	681b      	ldr	r3, [r3, #0]
 80207ca:	4619      	mov	r1, r3
 80207cc:	4610      	mov	r0, r2
 80207ce:	f7fc fd55 	bl	801d27c <sqisign_gen_ibz_copy>
    quat_alg_normalize(res);
 80207d2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80207d6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80207da:	6818      	ldr	r0, [r3, #0]
 80207dc:	f7e0 ff58 	bl	8001690 <sqisign_gen_quat_alg_normalize>

#ifndef NDEBUG
    // Check norm is smaller than radius
    quat_alg_norm(&tmp, &rad, res, alg);
 80207e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80207e4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80207e8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80207ec:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80207f0:	f107 0120 	add.w	r1, r7, #32
 80207f4:	f107 0014 	add.w	r0, r7, #20
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	6812      	ldr	r2, [r2, #0]
 80207fc:	f7e0 fe2e 	bl	800145c <sqisign_gen_quat_alg_norm>
    ibz_mul(&rad, &rad, radius);
 8020800:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8020804:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8020808:	f107 0120 	add.w	r1, r7, #32
 802080c:	f107 0020 	add.w	r0, r7, #32
 8020810:	681a      	ldr	r2, [r3, #0]
 8020812:	f7fc fc2c 	bl	801d06e <sqisign_gen_ibz_mul>
    assert(ibz_cmp(&tmp, &rad) <= 0);
 8020816:	f107 0220 	add.w	r2, r7, #32
 802081a:	f107 0314 	add.w	r3, r7, #20
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f7fc fcc5 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	dd09      	ble.n	8020840 <sqisign_gen_quat_lattice_sample_from_ball+0x33c>
 802082c:	4b1e      	ldr	r3, [pc, #120]	@ (80208a8 <sqisign_gen_quat_lattice_sample_from_ball+0x3a4>)
 802082e:	4a19      	ldr	r2, [pc, #100]	@ (8020894 <sqisign_gen_quat_lattice_sample_from_ball+0x390>)
 8020830:	2180      	movs	r1, #128	@ 0x80
 8020832:	4819      	ldr	r0, [pc, #100]	@ (8020898 <sqisign_gen_quat_lattice_sample_from_ball+0x394>)
 8020834:	f014 fd00 	bl	8035238 <__assert_func>
        goto err;
 8020838:	bf00      	nop
 802083a:	e002      	b.n	8020842 <sqisign_gen_quat_lattice_sample_from_ball+0x33e>
                    goto err;
 802083c:	bf00      	nop
 802083e:	e000      	b.n	8020842 <sqisign_gen_quat_lattice_sample_from_ball+0x33e>
#endif

err:
 8020840:	bf00      	nop
    ibz_finalize(&rad);
 8020842:	f107 0320 	add.w	r3, r7, #32
 8020846:	4618      	mov	r0, r3
 8020848:	f7fc fbe8 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&tmp);
 802084c:	f107 0314 	add.w	r3, r7, #20
 8020850:	4618      	mov	r0, r3
 8020852:	f7fc fbe3 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&x);
 8020856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802085a:	4618      	mov	r0, r3
 802085c:	f7ee faf5 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_mat_4x4_finalize(&U);
 8020860:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8020864:	4618      	mov	r0, r3
 8020866:	f7ee fb90 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_mat_4x4_finalize(&G);
 802086a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802086e:	4618      	mov	r0, r3
 8020870:	f7ee fb8b 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_vec_4_finalize(&box);
 8020874:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 8020878:	4618      	mov	r0, r3
 802087a:	f7ee fae6 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    return ok;
 802087e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
}
 8020882:	4618      	mov	r0, r3
 8020884:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8020888:	46bd      	mov	sp, r7
 802088a:	bd90      	pop	{r4, r7, pc}
 802088c:	0803b8f4 	.word	0x0803b8f4
 8020890:	080380b4 	.word	0x080380b4
 8020894:	0803bb5c 	.word	0x0803bb5c
 8020898:	08038084 	.word	0x08038084
 802089c:	0803b90c 	.word	0x0803b90c
 80208a0:	51eb851f 	.word	0x51eb851f
 80208a4:	080380dc 	.word	0x080380dc
 80208a8:	08038100 	.word	0x08038100

080208ac <sqisign_gen_quat_lattice_reduce_denom>:
    return (res);
}

void
quat_lattice_reduce_denom(quat_lattice_t *reduced, const quat_lattice_t *lat)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	b086      	sub	sp, #24
 80208b0:	af00      	add	r7, sp, #0
 80208b2:	6078      	str	r0, [r7, #4]
 80208b4:	6039      	str	r1, [r7, #0]
    ibz_t gcd;
    ibz_init(&gcd);
 80208b6:	f107 030c 	add.w	r3, r7, #12
 80208ba:	4618      	mov	r0, r3
 80208bc:	f7fc fba3 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mat_4x4_gcd(&gcd, &(lat->basis));
 80208c0:	683b      	ldr	r3, [r7, #0]
 80208c2:	f103 020c 	add.w	r2, r3, #12
 80208c6:	f107 030c 	add.w	r3, r7, #12
 80208ca:	4611      	mov	r1, r2
 80208cc:	4618      	mov	r0, r3
 80208ce:	f7e9 fd6f 	bl	800a3b0 <sqisign_gen_ibz_mat_4x4_gcd>
    ibz_gcd(&gcd, &gcd, &(lat->denom));
 80208d2:	683a      	ldr	r2, [r7, #0]
 80208d4:	f107 010c 	add.w	r1, r7, #12
 80208d8:	f107 030c 	add.w	r3, r7, #12
 80208dc:	4618      	mov	r0, r3
 80208de:	f7fc fe87 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    ibz_mat_4x4_scalar_div(&(reduced->basis), &gcd, &(lat->basis));
 80208e2:	687b      	ldr	r3, [r7, #4]
 80208e4:	f103 000c 	add.w	r0, r3, #12
 80208e8:	683b      	ldr	r3, [r7, #0]
 80208ea:	f103 020c 	add.w	r2, r3, #12
 80208ee:	f107 030c 	add.w	r3, r7, #12
 80208f2:	4619      	mov	r1, r3
 80208f4:	f7e9 fda3 	bl	800a43e <sqisign_gen_ibz_mat_4x4_scalar_div>
    ibz_div(&(reduced->denom), &gcd, &(lat->denom), &gcd);
 80208f8:	6878      	ldr	r0, [r7, #4]
 80208fa:	683a      	ldr	r2, [r7, #0]
 80208fc:	f107 030c 	add.w	r3, r7, #12
 8020900:	f107 010c 	add.w	r1, r7, #12
 8020904:	f7fc fbdc 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_abs(&(reduced->denom), &(reduced->denom));
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	687a      	ldr	r2, [r7, #4]
 802090c:	4611      	mov	r1, r2
 802090e:	4618      	mov	r0, r3
 8020910:	f7fc fbc9 	bl	801d0a6 <sqisign_gen_ibz_abs>
    ibz_finalize(&gcd);
 8020914:	f107 030c 	add.w	r3, r7, #12
 8020918:	4618      	mov	r0, r3
 802091a:	f7fc fb7f 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 802091e:	bf00      	nop
 8020920:	3718      	adds	r7, #24
 8020922:	46bd      	mov	sp, r7
 8020924:	bd80      	pop	{r7, pc}

08020926 <sqisign_gen_quat_lattice_conjugate_without_hnf>:

void
quat_lattice_conjugate_without_hnf(quat_lattice_t *conj, const quat_lattice_t *lat)
{
 8020926:	b580      	push	{r7, lr}
 8020928:	b084      	sub	sp, #16
 802092a:	af00      	add	r7, sp, #0
 802092c:	6078      	str	r0, [r7, #4]
 802092e:	6039      	str	r1, [r7, #0]
    ibz_mat_4x4_copy(&(conj->basis), &(lat->basis));
 8020930:	687b      	ldr	r3, [r7, #4]
 8020932:	f103 020c 	add.w	r2, r3, #12
 8020936:	683b      	ldr	r3, [r7, #0]
 8020938:	330c      	adds	r3, #12
 802093a:	4619      	mov	r1, r3
 802093c:	4610      	mov	r0, r2
 802093e:	f7e9 fc30 	bl	800a1a2 <sqisign_gen_ibz_mat_4x4_copy>
    ibz_copy(&(conj->denom), &(lat->denom));
 8020942:	687b      	ldr	r3, [r7, #4]
 8020944:	683a      	ldr	r2, [r7, #0]
 8020946:	4611      	mov	r1, r2
 8020948:	4618      	mov	r0, r3
 802094a:	f7fc fc97 	bl	801d27c <sqisign_gen_ibz_copy>

    for (int row = 1; row < 4; ++row) {
 802094e:	2301      	movs	r3, #1
 8020950:	60fb      	str	r3, [r7, #12]
 8020952:	e02e      	b.n	80209b2 <sqisign_gen_quat_lattice_conjugate_without_hnf+0x8c>
        for (int col = 0; col < 4; ++col) {
 8020954:	2300      	movs	r3, #0
 8020956:	60bb      	str	r3, [r7, #8]
 8020958:	e025      	b.n	80209a6 <sqisign_gen_quat_lattice_conjugate_without_hnf+0x80>
            ibz_neg(&(conj->basis[row][col]), &(conj->basis[row][col]));
 802095a:	68bb      	ldr	r3, [r7, #8]
 802095c:	461a      	mov	r2, r3
 802095e:	0052      	lsls	r2, r2, #1
 8020960:	441a      	add	r2, r3
 8020962:	0093      	lsls	r3, r2, #2
 8020964:	461a      	mov	r2, r3
 8020966:	68f9      	ldr	r1, [r7, #12]
 8020968:	460b      	mov	r3, r1
 802096a:	005b      	lsls	r3, r3, #1
 802096c:	440b      	add	r3, r1
 802096e:	011b      	lsls	r3, r3, #4
 8020970:	4413      	add	r3, r2
 8020972:	3308      	adds	r3, #8
 8020974:	687a      	ldr	r2, [r7, #4]
 8020976:	4413      	add	r3, r2
 8020978:	1d18      	adds	r0, r3, #4
 802097a:	68bb      	ldr	r3, [r7, #8]
 802097c:	461a      	mov	r2, r3
 802097e:	0052      	lsls	r2, r2, #1
 8020980:	441a      	add	r2, r3
 8020982:	0093      	lsls	r3, r2, #2
 8020984:	461a      	mov	r2, r3
 8020986:	68f9      	ldr	r1, [r7, #12]
 8020988:	460b      	mov	r3, r1
 802098a:	005b      	lsls	r3, r3, #1
 802098c:	440b      	add	r3, r1
 802098e:	011b      	lsls	r3, r3, #4
 8020990:	4413      	add	r3, r2
 8020992:	3308      	adds	r3, #8
 8020994:	687a      	ldr	r2, [r7, #4]
 8020996:	4413      	add	r3, r2
 8020998:	3304      	adds	r3, #4
 802099a:	4619      	mov	r1, r3
 802099c:	f7fc fb76 	bl	801d08c <sqisign_gen_ibz_neg>
        for (int col = 0; col < 4; ++col) {
 80209a0:	68bb      	ldr	r3, [r7, #8]
 80209a2:	3301      	adds	r3, #1
 80209a4:	60bb      	str	r3, [r7, #8]
 80209a6:	68bb      	ldr	r3, [r7, #8]
 80209a8:	2b03      	cmp	r3, #3
 80209aa:	ddd6      	ble.n	802095a <sqisign_gen_quat_lattice_conjugate_without_hnf+0x34>
    for (int row = 1; row < 4; ++row) {
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	3301      	adds	r3, #1
 80209b0:	60fb      	str	r3, [r7, #12]
 80209b2:	68fb      	ldr	r3, [r7, #12]
 80209b4:	2b03      	cmp	r3, #3
 80209b6:	ddcd      	ble.n	8020954 <sqisign_gen_quat_lattice_conjugate_without_hnf+0x2e>
        }
    }
}
 80209b8:	bf00      	nop
 80209ba:	bf00      	nop
 80209bc:	3710      	adds	r7, #16
 80209be:	46bd      	mov	sp, r7
 80209c0:	bd80      	pop	{r7, pc}

080209c2 <sqisign_gen_quat_lattice_dual_without_hnf>:

// Method described in https://cseweb.ucsd.edu/classes/sp14/cse206A-a/lec4.pdf consulted on 19 of
// May 2023, 12h40 CEST
void
quat_lattice_dual_without_hnf(quat_lattice_t *dual, const quat_lattice_t *lat)
{
 80209c2:	b580      	push	{r7, lr}
 80209c4:	b0b6      	sub	sp, #216	@ 0xd8
 80209c6:	af00      	add	r7, sp, #0
 80209c8:	6078      	str	r0, [r7, #4]
 80209ca:	6039      	str	r1, [r7, #0]
    ibz_mat_4x4_t inv;
    ibz_t det;
    ibz_init(&det);
 80209cc:	f107 030c 	add.w	r3, r7, #12
 80209d0:	4618      	mov	r0, r3
 80209d2:	f7fc fb18 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mat_4x4_init(&inv);
 80209d6:	f107 0318 	add.w	r3, r7, #24
 80209da:	4618      	mov	r0, r3
 80209dc:	f7ee faa9 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_inv_with_det_as_denom(&inv, &det, &(lat->basis));
 80209e0:	683b      	ldr	r3, [r7, #0]
 80209e2:	f103 020c 	add.w	r2, r3, #12
 80209e6:	f107 010c 	add.w	r1, r7, #12
 80209ea:	f107 0318 	add.w	r3, r7, #24
 80209ee:	4618      	mov	r0, r3
 80209f0:	f7e9 fe08 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    ibz_mat_4x4_transpose(&inv, &inv);
 80209f4:	f107 0218 	add.w	r2, r7, #24
 80209f8:	f107 0318 	add.w	r3, r7, #24
 80209fc:	4611      	mov	r1, r2
 80209fe:	4618      	mov	r0, r3
 8020a00:	f7e9 fc0a 	bl	800a218 <sqisign_gen_ibz_mat_4x4_transpose>
    // dual_denom = det/lat_denom
    ibz_mat_4x4_scalar_mul(&(dual->basis), &(lat->denom), &inv);
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	330c      	adds	r3, #12
 8020a08:	6839      	ldr	r1, [r7, #0]
 8020a0a:	f107 0218 	add.w	r2, r7, #24
 8020a0e:	4618      	mov	r0, r3
 8020a10:	f7e9 fc91 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
    ibz_copy(&(dual->denom), &det);
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	f107 020c 	add.w	r2, r7, #12
 8020a1a:	4611      	mov	r1, r2
 8020a1c:	4618      	mov	r0, r3
 8020a1e:	f7fc fc2d 	bl	801d27c <sqisign_gen_ibz_copy>

    ibz_finalize(&det);
 8020a22:	f107 030c 	add.w	r3, r7, #12
 8020a26:	4618      	mov	r0, r3
 8020a28:	f7fc faf8 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_mat_4x4_finalize(&inv);
 8020a2c:	f107 0318 	add.w	r3, r7, #24
 8020a30:	4618      	mov	r0, r3
 8020a32:	f7ee faaa 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
}
 8020a36:	bf00      	nop
 8020a38:	37d8      	adds	r7, #216	@ 0xd8
 8020a3a:	46bd      	mov	sp, r7
 8020a3c:	bd80      	pop	{r7, pc}
	...

08020a40 <sqisign_gen_quat_lattice_add>:

void
quat_lattice_add(quat_lattice_t *res, const quat_lattice_t *lat1, const quat_lattice_t *lat2)
{
 8020a40:	b590      	push	{r4, r7, lr}
 8020a42:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 8020a46:	af00      	add	r7, sp, #0
 8020a48:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020a4c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8020a50:	6018      	str	r0, [r3, #0]
 8020a52:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020a56:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8020a5a:	6019      	str	r1, [r3, #0]
 8020a5c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020a60:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8020a64:	601a      	str	r2, [r3, #0]
    ibz_vec_4_t generators[8];
    ibz_mat_4x4_t tmp;
    ibz_t det1, det2, detprod;
    ibz_init(&det1);
 8020a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8020a6a:	4618      	mov	r0, r3
 8020a6c:	f7fc facb 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&det2);
 8020a70:	f107 0320 	add.w	r3, r7, #32
 8020a74:	4618      	mov	r0, r3
 8020a76:	f7fc fac6 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&detprod);
 8020a7a:	f107 0314 	add.w	r3, r7, #20
 8020a7e:	4618      	mov	r0, r3
 8020a80:	f7fc fac1 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 8; i++)
 8020a84:	2300      	movs	r3, #0
 8020a86:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8020a8a:	e010      	b.n	8020aae <sqisign_gen_quat_lattice_add+0x6e>
        ibz_vec_4_init(&(generators[i]));
 8020a8c:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8020a90:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 8020a94:	4613      	mov	r3, r2
 8020a96:	005b      	lsls	r3, r3, #1
 8020a98:	4413      	add	r3, r2
 8020a9a:	011b      	lsls	r3, r3, #4
 8020a9c:	440b      	add	r3, r1
 8020a9e:	4618      	mov	r0, r3
 8020aa0:	f7ee f9b7 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    for (int i = 0; i < 8; i++)
 8020aa4:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8020aa8:	3301      	adds	r3, #1
 8020aaa:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8020aae:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8020ab2:	2b07      	cmp	r3, #7
 8020ab4:	ddea      	ble.n	8020a8c <sqisign_gen_quat_lattice_add+0x4c>
    ibz_mat_4x4_init(&tmp);
 8020ab6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8020aba:	4618      	mov	r0, r3
 8020abc:	f7ee fa39 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_scalar_mul(&tmp, &(lat1->denom), &(lat2->basis));
 8020ac0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020ac4:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8020ac8:	6819      	ldr	r1, [r3, #0]
 8020aca:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020ace:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	f103 020c 	add.w	r2, r3, #12
 8020ad8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8020adc:	4618      	mov	r0, r3
 8020ade:	f7e9 fc2a 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
    for (int i = 0; i < 4; i++) {
 8020ae2:	2300      	movs	r3, #0
 8020ae4:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8020ae8:	e037      	b.n	8020b5a <sqisign_gen_quat_lattice_add+0x11a>
        for (int j = 0; j < 4; j++) {
 8020aea:	2300      	movs	r3, #0
 8020aec:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8020af0:	e02a      	b.n	8020b48 <sqisign_gen_quat_lattice_add+0x108>
            ibz_copy(&(generators[j][i]), &(tmp[i][j]));
 8020af2:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8020af6:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8020afa:	461a      	mov	r2, r3
 8020afc:	0052      	lsls	r2, r2, #1
 8020afe:	441a      	add	r2, r3
 8020b00:	0093      	lsls	r3, r2, #2
 8020b02:	461a      	mov	r2, r3
 8020b04:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 8020b08:	460b      	mov	r3, r1
 8020b0a:	005b      	lsls	r3, r3, #1
 8020b0c:	440b      	add	r3, r1
 8020b0e:	011b      	lsls	r3, r3, #4
 8020b10:	4413      	add	r3, r2
 8020b12:	18c4      	adds	r4, r0, r3
 8020b14:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8020b18:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8020b1c:	461a      	mov	r2, r3
 8020b1e:	0052      	lsls	r2, r2, #1
 8020b20:	441a      	add	r2, r3
 8020b22:	0093      	lsls	r3, r2, #2
 8020b24:	461a      	mov	r2, r3
 8020b26:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 8020b2a:	460b      	mov	r3, r1
 8020b2c:	005b      	lsls	r3, r3, #1
 8020b2e:	440b      	add	r3, r1
 8020b30:	011b      	lsls	r3, r3, #4
 8020b32:	4413      	add	r3, r2
 8020b34:	4403      	add	r3, r0
 8020b36:	4619      	mov	r1, r3
 8020b38:	4620      	mov	r0, r4
 8020b3a:	f7fc fb9f 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j < 4; j++) {
 8020b3e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8020b42:	3301      	adds	r3, #1
 8020b44:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8020b48:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8020b4c:	2b03      	cmp	r3, #3
 8020b4e:	ddd0      	ble.n	8020af2 <sqisign_gen_quat_lattice_add+0xb2>
    for (int i = 0; i < 4; i++) {
 8020b50:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8020b54:	3301      	adds	r3, #1
 8020b56:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8020b5a:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8020b5e:	2b03      	cmp	r3, #3
 8020b60:	ddc3      	ble.n	8020aea <sqisign_gen_quat_lattice_add+0xaa>
        }
    }
    ibz_mat_4x4_inv_with_det_as_denom(NULL, &det1, &tmp);
 8020b62:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8020b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8020b6a:	4619      	mov	r1, r3
 8020b6c:	2000      	movs	r0, #0
 8020b6e:	f7e9 fd49 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    ibz_mat_4x4_scalar_mul(&tmp, &(lat2->denom), &(lat1->basis));
 8020b72:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020b76:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8020b7a:	6819      	ldr	r1, [r3, #0]
 8020b7c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020b80:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	f103 020c 	add.w	r2, r3, #12
 8020b8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8020b8e:	4618      	mov	r0, r3
 8020b90:	f7e9 fbd1 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
    for (int i = 0; i < 4; i++) {
 8020b94:	2300      	movs	r3, #0
 8020b96:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8020b9a:	e038      	b.n	8020c0e <sqisign_gen_quat_lattice_add+0x1ce>
        for (int j = 0; j < 4; j++) {
 8020b9c:	2300      	movs	r3, #0
 8020b9e:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8020ba2:	e02b      	b.n	8020bfc <sqisign_gen_quat_lattice_add+0x1bc>
            ibz_copy(&(generators[4 + j][i]), &(tmp[i][j]));
 8020ba4:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8020ba8:	1d19      	adds	r1, r3, #4
 8020baa:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8020bae:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8020bb2:	461a      	mov	r2, r3
 8020bb4:	0052      	lsls	r2, r2, #1
 8020bb6:	441a      	add	r2, r3
 8020bb8:	0093      	lsls	r3, r2, #2
 8020bba:	461a      	mov	r2, r3
 8020bbc:	460b      	mov	r3, r1
 8020bbe:	005b      	lsls	r3, r3, #1
 8020bc0:	440b      	add	r3, r1
 8020bc2:	011b      	lsls	r3, r3, #4
 8020bc4:	4413      	add	r3, r2
 8020bc6:	18c4      	adds	r4, r0, r3
 8020bc8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8020bcc:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8020bd0:	461a      	mov	r2, r3
 8020bd2:	0052      	lsls	r2, r2, #1
 8020bd4:	441a      	add	r2, r3
 8020bd6:	0093      	lsls	r3, r2, #2
 8020bd8:	461a      	mov	r2, r3
 8020bda:	f8d7 1280 	ldr.w	r1, [r7, #640]	@ 0x280
 8020bde:	460b      	mov	r3, r1
 8020be0:	005b      	lsls	r3, r3, #1
 8020be2:	440b      	add	r3, r1
 8020be4:	011b      	lsls	r3, r3, #4
 8020be6:	4413      	add	r3, r2
 8020be8:	4403      	add	r3, r0
 8020bea:	4619      	mov	r1, r3
 8020bec:	4620      	mov	r0, r4
 8020bee:	f7fc fb45 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j < 4; j++) {
 8020bf2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8020bf6:	3301      	adds	r3, #1
 8020bf8:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8020bfc:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8020c00:	2b03      	cmp	r3, #3
 8020c02:	ddcf      	ble.n	8020ba4 <sqisign_gen_quat_lattice_add+0x164>
    for (int i = 0; i < 4; i++) {
 8020c04:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8020c08:	3301      	adds	r3, #1
 8020c0a:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8020c0e:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8020c12:	2b03      	cmp	r3, #3
 8020c14:	ddc2      	ble.n	8020b9c <sqisign_gen_quat_lattice_add+0x15c>
        }
    }
    ibz_mat_4x4_inv_with_det_as_denom(NULL, &det2, &tmp);
 8020c16:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8020c1a:	f107 0320 	add.w	r3, r7, #32
 8020c1e:	4619      	mov	r1, r3
 8020c20:	2000      	movs	r0, #0
 8020c22:	f7e9 fcef 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    assert(!ibz_is_zero(&det1));
 8020c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	f7fc facf 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8020c30:	4603      	mov	r3, r0
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d005      	beq.n	8020c42 <sqisign_gen_quat_lattice_add+0x202>
 8020c36:	4b3e      	ldr	r3, [pc, #248]	@ (8020d30 <sqisign_gen_quat_lattice_add+0x2f0>)
 8020c38:	4a3e      	ldr	r2, [pc, #248]	@ (8020d34 <sqisign_gen_quat_lattice_add+0x2f4>)
 8020c3a:	216e      	movs	r1, #110	@ 0x6e
 8020c3c:	483e      	ldr	r0, [pc, #248]	@ (8020d38 <sqisign_gen_quat_lattice_add+0x2f8>)
 8020c3e:	f014 fafb 	bl	8035238 <__assert_func>
    assert(!ibz_is_zero(&det2));
 8020c42:	f107 0320 	add.w	r3, r7, #32
 8020c46:	4618      	mov	r0, r3
 8020c48:	f7fc fac1 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8020c4c:	4603      	mov	r3, r0
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	d005      	beq.n	8020c5e <sqisign_gen_quat_lattice_add+0x21e>
 8020c52:	4b3a      	ldr	r3, [pc, #232]	@ (8020d3c <sqisign_gen_quat_lattice_add+0x2fc>)
 8020c54:	4a37      	ldr	r2, [pc, #220]	@ (8020d34 <sqisign_gen_quat_lattice_add+0x2f4>)
 8020c56:	216f      	movs	r1, #111	@ 0x6f
 8020c58:	4837      	ldr	r0, [pc, #220]	@ (8020d38 <sqisign_gen_quat_lattice_add+0x2f8>)
 8020c5a:	f014 faed 	bl	8035238 <__assert_func>
    ibz_gcd(&detprod, &det1, &det2);
 8020c5e:	f107 0220 	add.w	r2, r7, #32
 8020c62:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8020c66:	f107 0314 	add.w	r3, r7, #20
 8020c6a:	4618      	mov	r0, r3
 8020c6c:	f7fc fcc0 	bl	801d5f0 <sqisign_gen_ibz_gcd>
    ibz_mat_4xn_hnf_mod_core(&(res->basis), 8, generators, &detprod);
 8020c70:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020c74:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	f103 000c 	add.w	r0, r3, #12
 8020c7e:	f107 0314 	add.w	r3, r7, #20
 8020c82:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8020c86:	2108      	movs	r1, #8
 8020c88:	f7f9 fa0a 	bl	801a0a0 <sqisign_gen_ibz_mat_4xn_hnf_mod_core>
    ibz_mul(&(res->denom), &(lat1->denom), &(lat2->denom));
 8020c8c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020c90:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8020c94:	6818      	ldr	r0, [r3, #0]
 8020c96:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020c9a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8020c9e:	6819      	ldr	r1, [r3, #0]
 8020ca0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020ca4:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8020ca8:	681b      	ldr	r3, [r3, #0]
 8020caa:	461a      	mov	r2, r3
 8020cac:	f7fc f9df 	bl	801d06e <sqisign_gen_ibz_mul>
    quat_lattice_reduce_denom(res, res);
 8020cb0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020cb4:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8020cb8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8020cbc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8020cc0:	6811      	ldr	r1, [r2, #0]
 8020cc2:	6818      	ldr	r0, [r3, #0]
 8020cc4:	f7ff fdf2 	bl	80208ac <sqisign_gen_quat_lattice_reduce_denom>
    ibz_mat_4x4_finalize(&tmp);
 8020cc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8020ccc:	4618      	mov	r0, r3
 8020cce:	f7ee f95c 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_finalize(&det1);
 8020cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8020cd6:	4618      	mov	r0, r3
 8020cd8:	f7fc f9a0 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&det2);
 8020cdc:	f107 0320 	add.w	r3, r7, #32
 8020ce0:	4618      	mov	r0, r3
 8020ce2:	f7fc f99b 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&detprod);
 8020ce6:	f107 0314 	add.w	r3, r7, #20
 8020cea:	4618      	mov	r0, r3
 8020cec:	f7fc f996 	bl	801d01c <sqisign_gen_ibz_finalize>
    for (int i = 0; i < 8; i++)
 8020cf0:	2300      	movs	r3, #0
 8020cf2:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8020cf6:	e010      	b.n	8020d1a <sqisign_gen_quat_lattice_add+0x2da>
        ibz_vec_4_finalize(&(generators[i]));
 8020cf8:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8020cfc:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8020d00:	4613      	mov	r3, r2
 8020d02:	005b      	lsls	r3, r3, #1
 8020d04:	4413      	add	r3, r2
 8020d06:	011b      	lsls	r3, r3, #4
 8020d08:	440b      	add	r3, r1
 8020d0a:	4618      	mov	r0, r3
 8020d0c:	f7ee f89d 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    for (int i = 0; i < 8; i++)
 8020d10:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8020d14:	3301      	adds	r3, #1
 8020d16:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8020d1a:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8020d1e:	2b07      	cmp	r3, #7
 8020d20:	ddea      	ble.n	8020cf8 <sqisign_gen_quat_lattice_add+0x2b8>
}
 8020d22:	bf00      	nop
 8020d24:	bf00      	nop
 8020d26:	f507 7725 	add.w	r7, r7, #660	@ 0x294
 8020d2a:	46bd      	mov	sp, r7
 8020d2c:	bd90      	pop	{r4, r7, pc}
 8020d2e:	bf00      	nop
 8020d30:	0803811c 	.word	0x0803811c
 8020d34:	0803bb88 	.word	0x0803bb88
 8020d38:	08038130 	.word	0x08038130
 8020d3c:	08038148 	.word	0x08038148

08020d40 <sqisign_gen_quat_lattice_intersect>:

// method described in https://cseweb.ucsd.edu/classes/sp14/cse206A-a/lec4.pdf consulted on 19 of
// May 2023, 12h40 CEST
void
quat_lattice_intersect(quat_lattice_t *res, const quat_lattice_t *lat1, const quat_lattice_t *lat2)
{
 8020d40:	b580      	push	{r7, lr}
 8020d42:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
 8020d46:	af00      	add	r7, sp, #0
 8020d48:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8020d4c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8020d50:	6018      	str	r0, [r3, #0]
 8020d52:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8020d56:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8020d5a:	6019      	str	r1, [r3, #0]
 8020d5c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8020d60:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8020d64:	601a      	str	r2, [r3, #0]
    quat_lattice_t dual1, dual2, dual_res;
    quat_lattice_init(&dual1);
 8020d66:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ee f939 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    quat_lattice_init(&dual2);
 8020d70:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020d74:	4618      	mov	r0, r3
 8020d76:	f7ee f934 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    quat_lattice_init(&dual_res);
 8020d7a:	f107 0314 	add.w	r3, r7, #20
 8020d7e:	4618      	mov	r0, r3
 8020d80:	f7ee f92f 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    quat_lattice_dual_without_hnf(&dual1, lat1);
 8020d84:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8020d88:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8020d8c:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
 8020d90:	6819      	ldr	r1, [r3, #0]
 8020d92:	4610      	mov	r0, r2
 8020d94:	f7ff fe15 	bl	80209c2 <sqisign_gen_quat_lattice_dual_without_hnf>

    quat_lattice_dual_without_hnf(&dual2, lat2);
 8020d98:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8020d9c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8020da0:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8020da4:	6819      	ldr	r1, [r3, #0]
 8020da6:	4610      	mov	r0, r2
 8020da8:	f7ff fe0b 	bl	80209c2 <sqisign_gen_quat_lattice_dual_without_hnf>
    quat_lattice_add(&dual_res, &dual1, &dual2);
 8020dac:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8020db0:	f507 71d6 	add.w	r1, r7, #428	@ 0x1ac
 8020db4:	f107 0314 	add.w	r3, r7, #20
 8020db8:	4618      	mov	r0, r3
 8020dba:	f7ff fe41 	bl	8020a40 <sqisign_gen_quat_lattice_add>
    quat_lattice_dual_without_hnf(res, &dual_res);
 8020dbe:	f107 0214 	add.w	r2, r7, #20
 8020dc2:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8020dc6:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8020dca:	4611      	mov	r1, r2
 8020dcc:	6818      	ldr	r0, [r3, #0]
 8020dce:	f7ff fdf8 	bl	80209c2 <sqisign_gen_quat_lattice_dual_without_hnf>
    quat_lattice_hnf(res); // could be removed if we do not expect HNF any more
 8020dd2:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8020dd6:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8020dda:	6818      	ldr	r0, [r3, #0]
 8020ddc:	f000 fbce 	bl	802157c <sqisign_gen_quat_lattice_hnf>
    quat_lattice_finalize(&dual1);
 8020de0:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8020de4:	4618      	mov	r0, r3
 8020de6:	f7ee f912 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
    quat_lattice_finalize(&dual2);
 8020dea:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020dee:	4618      	mov	r0, r3
 8020df0:	f7ee f90d 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
    quat_lattice_finalize(&dual_res);
 8020df4:	f107 0314 	add.w	r3, r7, #20
 8020df8:	4618      	mov	r0, r3
 8020dfa:	f7ee f908 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
}
 8020dfe:	bf00      	nop
 8020e00:	f507 771e 	add.w	r7, r7, #632	@ 0x278
 8020e04:	46bd      	mov	sp, r7
 8020e06:	bd80      	pop	{r7, pc}

08020e08 <sqisign_gen_quat_lattice_mat_alg_coord_mul_without_hnf>:
void
quat_lattice_mat_alg_coord_mul_without_hnf(ibz_mat_4x4_t *prod,
                                           const ibz_mat_4x4_t *lat,
                                           const ibz_vec_4_t *coord,
                                           const quat_alg_t *alg)
{
 8020e08:	b5b0      	push	{r4, r5, r7, lr}
 8020e0a:	b0a0      	sub	sp, #128	@ 0x80
 8020e0c:	af02      	add	r7, sp, #8
 8020e0e:	60f8      	str	r0, [r7, #12]
 8020e10:	60b9      	str	r1, [r7, #8]
 8020e12:	607a      	str	r2, [r7, #4]
 8020e14:	603b      	str	r3, [r7, #0]
    ibz_vec_4_t p, a;
    ibz_vec_4_init(&p);
 8020e16:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8020e1a:	4618      	mov	r0, r3
 8020e1c:	f7ed fff9 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_vec_4_init(&a);
 8020e20:	f107 0314 	add.w	r3, r7, #20
 8020e24:	4618      	mov	r0, r3
 8020e26:	f7ed fff4 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    for (int i = 0; i < 4; i++) {
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8020e2e:	e06a      	b.n	8020f06 <sqisign_gen_quat_lattice_mat_alg_coord_mul_without_hnf+0xfe>
        ibz_vec_4_copy_ibz(&a, &((*lat)[0][i]), &((*lat)[1][i]), &((*lat)[2][i]), &((*lat)[3][i]));
 8020e30:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020e32:	4613      	mov	r3, r2
 8020e34:	005b      	lsls	r3, r3, #1
 8020e36:	4413      	add	r3, r2
 8020e38:	009b      	lsls	r3, r3, #2
 8020e3a:	68ba      	ldr	r2, [r7, #8]
 8020e3c:	18d1      	adds	r1, r2, r3
 8020e3e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020e40:	4613      	mov	r3, r2
 8020e42:	005b      	lsls	r3, r3, #1
 8020e44:	4413      	add	r3, r2
 8020e46:	009b      	lsls	r3, r3, #2
 8020e48:	3330      	adds	r3, #48	@ 0x30
 8020e4a:	68ba      	ldr	r2, [r7, #8]
 8020e4c:	18d4      	adds	r4, r2, r3
 8020e4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020e50:	4613      	mov	r3, r2
 8020e52:	005b      	lsls	r3, r3, #1
 8020e54:	4413      	add	r3, r2
 8020e56:	009b      	lsls	r3, r3, #2
 8020e58:	3360      	adds	r3, #96	@ 0x60
 8020e5a:	68ba      	ldr	r2, [r7, #8]
 8020e5c:	18d5      	adds	r5, r2, r3
 8020e5e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020e60:	4613      	mov	r3, r2
 8020e62:	005b      	lsls	r3, r3, #1
 8020e64:	4413      	add	r3, r2
 8020e66:	009b      	lsls	r3, r3, #2
 8020e68:	3390      	adds	r3, #144	@ 0x90
 8020e6a:	68ba      	ldr	r2, [r7, #8]
 8020e6c:	4413      	add	r3, r2
 8020e6e:	f107 0014 	add.w	r0, r7, #20
 8020e72:	9300      	str	r3, [sp, #0]
 8020e74:	462b      	mov	r3, r5
 8020e76:	4622      	mov	r2, r4
 8020e78:	f7e9 f820 	bl	8009ebc <sqisign_gen_ibz_vec_4_copy_ibz>
        quat_alg_coord_mul(&p, &a, coord, alg);
 8020e7c:	f107 0114 	add.w	r1, r7, #20
 8020e80:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8020e84:	683b      	ldr	r3, [r7, #0]
 8020e86:	687a      	ldr	r2, [r7, #4]
 8020e88:	f7e0 f84c 	bl	8000f24 <sqisign_gen_quat_alg_coord_mul>
        ibz_copy(&((*prod)[0][i]), &(p[0]));
 8020e8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020e8e:	4613      	mov	r3, r2
 8020e90:	005b      	lsls	r3, r3, #1
 8020e92:	4413      	add	r3, r2
 8020e94:	009b      	lsls	r3, r3, #2
 8020e96:	68fa      	ldr	r2, [r7, #12]
 8020e98:	4413      	add	r3, r2
 8020e9a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8020e9e:	4611      	mov	r1, r2
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	f7fc f9eb 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&((*prod)[1][i]), &(p[1]));
 8020ea6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020ea8:	4613      	mov	r3, r2
 8020eaa:	005b      	lsls	r3, r3, #1
 8020eac:	4413      	add	r3, r2
 8020eae:	009b      	lsls	r3, r3, #2
 8020eb0:	3330      	adds	r3, #48	@ 0x30
 8020eb2:	68fa      	ldr	r2, [r7, #12]
 8020eb4:	441a      	add	r2, r3
 8020eb6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8020eba:	330c      	adds	r3, #12
 8020ebc:	4619      	mov	r1, r3
 8020ebe:	4610      	mov	r0, r2
 8020ec0:	f7fc f9dc 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&((*prod)[2][i]), &(p[2]));
 8020ec4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020ec6:	4613      	mov	r3, r2
 8020ec8:	005b      	lsls	r3, r3, #1
 8020eca:	4413      	add	r3, r2
 8020ecc:	009b      	lsls	r3, r3, #2
 8020ece:	3360      	adds	r3, #96	@ 0x60
 8020ed0:	68fa      	ldr	r2, [r7, #12]
 8020ed2:	441a      	add	r2, r3
 8020ed4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8020ed8:	3318      	adds	r3, #24
 8020eda:	4619      	mov	r1, r3
 8020edc:	4610      	mov	r0, r2
 8020ede:	f7fc f9cd 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&((*prod)[3][i]), &(p[3]));
 8020ee2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8020ee4:	4613      	mov	r3, r2
 8020ee6:	005b      	lsls	r3, r3, #1
 8020ee8:	4413      	add	r3, r2
 8020eea:	009b      	lsls	r3, r3, #2
 8020eec:	3390      	adds	r3, #144	@ 0x90
 8020eee:	68fa      	ldr	r2, [r7, #12]
 8020ef0:	441a      	add	r2, r3
 8020ef2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8020ef6:	3324      	adds	r3, #36	@ 0x24
 8020ef8:	4619      	mov	r1, r3
 8020efa:	4610      	mov	r0, r2
 8020efc:	f7fc f9be 	bl	801d27c <sqisign_gen_ibz_copy>
    for (int i = 0; i < 4; i++) {
 8020f00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8020f02:	3301      	adds	r3, #1
 8020f04:	677b      	str	r3, [r7, #116]	@ 0x74
 8020f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8020f08:	2b03      	cmp	r3, #3
 8020f0a:	dd91      	ble.n	8020e30 <sqisign_gen_quat_lattice_mat_alg_coord_mul_without_hnf+0x28>
    }
    ibz_vec_4_finalize(&p);
 8020f0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8020f10:	4618      	mov	r0, r3
 8020f12:	f7ed ff9a 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_vec_4_finalize(&a);
 8020f16:	f107 0314 	add.w	r3, r7, #20
 8020f1a:	4618      	mov	r0, r3
 8020f1c:	f7ed ff95 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 8020f20:	bf00      	nop
 8020f22:	3778      	adds	r7, #120	@ 0x78
 8020f24:	46bd      	mov	sp, r7
 8020f26:	bdb0      	pop	{r4, r5, r7, pc}

08020f28 <sqisign_gen_quat_lattice_alg_elem_mul>:
void
quat_lattice_alg_elem_mul(quat_lattice_t *prod,
                          const quat_lattice_t *lat,
                          const quat_alg_elem_t *elem,
                          const quat_alg_t *alg)
{
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	b084      	sub	sp, #16
 8020f2c:	af00      	add	r7, sp, #0
 8020f2e:	60f8      	str	r0, [r7, #12]
 8020f30:	60b9      	str	r1, [r7, #8]
 8020f32:	607a      	str	r2, [r7, #4]
 8020f34:	603b      	str	r3, [r7, #0]
    quat_lattice_mat_alg_coord_mul_without_hnf(&(prod->basis), &(lat->basis), &(elem->coord), alg);
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	f103 000c 	add.w	r0, r3, #12
 8020f3c:	68bb      	ldr	r3, [r7, #8]
 8020f3e:	f103 010c 	add.w	r1, r3, #12
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	f103 020c 	add.w	r2, r3, #12
 8020f48:	683b      	ldr	r3, [r7, #0]
 8020f4a:	f7ff ff5d 	bl	8020e08 <sqisign_gen_quat_lattice_mat_alg_coord_mul_without_hnf>
    ibz_mul(&(prod->denom), &(lat->denom), &(elem->denom));
 8020f4e:	68fb      	ldr	r3, [r7, #12]
 8020f50:	68b9      	ldr	r1, [r7, #8]
 8020f52:	687a      	ldr	r2, [r7, #4]
 8020f54:	4618      	mov	r0, r3
 8020f56:	f7fc f88a 	bl	801d06e <sqisign_gen_ibz_mul>
    quat_lattice_hnf(prod);
 8020f5a:	68f8      	ldr	r0, [r7, #12]
 8020f5c:	f000 fb0e 	bl	802157c <sqisign_gen_quat_lattice_hnf>
}
 8020f60:	bf00      	nop
 8020f62:	3710      	adds	r7, #16
 8020f64:	46bd      	mov	sp, r7
 8020f66:	bd80      	pop	{r7, pc}

08020f68 <sqisign_gen_quat_lattice_mul>:

void
quat_lattice_mul(quat_lattice_t *res, const quat_lattice_t *lat1, const quat_lattice_t *lat2, const quat_alg_t *alg)
{
 8020f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f6a:	f2ad 5d5c 	subw	sp, sp, #1372	@ 0x55c
 8020f6e:	af02      	add	r7, sp, #8
 8020f70:	f507 64aa 	add.w	r4, r7, #1360	@ 0x550
 8020f74:	f2a4 5444 	subw	r4, r4, #1348	@ 0x544
 8020f78:	6020      	str	r0, [r4, #0]
 8020f7a:	f507 60aa 	add.w	r0, r7, #1360	@ 0x550
 8020f7e:	f5a0 60a9 	sub.w	r0, r0, #1352	@ 0x548
 8020f82:	6001      	str	r1, [r0, #0]
 8020f84:	f507 61aa 	add.w	r1, r7, #1360	@ 0x550
 8020f88:	f2a1 514c 	subw	r1, r1, #1356	@ 0x54c
 8020f8c:	600a      	str	r2, [r1, #0]
 8020f8e:	f507 62aa 	add.w	r2, r7, #1360	@ 0x550
 8020f92:	f5a2 62aa 	sub.w	r2, r2, #1360	@ 0x550
 8020f96:	6013      	str	r3, [r2, #0]
    ibz_vec_4_t elem1, elem2, elem_res;
    ibz_vec_4_t generators[16];
    ibz_mat_4x4_t detmat;
    ibz_t det;
    quat_lattice_t lat_res;
    ibz_init(&det);
 8020f98:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020f9c:	4618      	mov	r0, r3
 8020f9e:	f7fc f832 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mat_4x4_init(&detmat);
 8020fa2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	f7ed ffc3 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    quat_lattice_init(&lat_res);
 8020fac:	f107 0314 	add.w	r3, r7, #20
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	f7ee f816 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    ibz_vec_4_init(&elem1);
 8020fb6:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8020fba:	4618      	mov	r0, r3
 8020fbc:	f7ed ff29 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_vec_4_init(&elem2);
 8020fc0:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8020fc4:	4618      	mov	r0, r3
 8020fc6:	f7ed ff24 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_vec_4_init(&elem_res);
 8020fca:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 8020fce:	4618      	mov	r0, r3
 8020fd0:	f7ed ff1f 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    for (int i = 0; i < 16; i++)
 8020fd4:	2300      	movs	r3, #0
 8020fd6:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 8020fda:	e010      	b.n	8020ffe <sqisign_gen_quat_lattice_mul+0x96>
        ibz_vec_4_init(&(generators[i]));
 8020fdc:	f507 71d6 	add.w	r1, r7, #428	@ 0x1ac
 8020fe0:	f8d7 254c 	ldr.w	r2, [r7, #1356]	@ 0x54c
 8020fe4:	4613      	mov	r3, r2
 8020fe6:	005b      	lsls	r3, r3, #1
 8020fe8:	4413      	add	r3, r2
 8020fea:	011b      	lsls	r3, r3, #4
 8020fec:	440b      	add	r3, r1
 8020fee:	4618      	mov	r0, r3
 8020ff0:	f7ed ff0f 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    for (int i = 0; i < 16; i++)
 8020ff4:	f8d7 354c 	ldr.w	r3, [r7, #1356]	@ 0x54c
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 8020ffe:	f8d7 354c 	ldr.w	r3, [r7, #1356]	@ 0x54c
 8021002:	2b0f      	cmp	r3, #15
 8021004:	ddea      	ble.n	8020fdc <sqisign_gen_quat_lattice_mul+0x74>
    for (int k = 0; k < 4; k++) {
 8021006:	2300      	movs	r3, #0
 8021008:	f8c7 3548 	str.w	r3, [r7, #1352]	@ 0x548
 802100c:	e0ee      	b.n	80211ec <sqisign_gen_quat_lattice_mul+0x284>
        ibz_vec_4_copy_ibz(
 802100e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 8021012:	f5a3 61a9 	sub.w	r1, r3, #1352	@ 0x548
 8021016:	f8d7 2548 	ldr.w	r2, [r7, #1352]	@ 0x548
 802101a:	4613      	mov	r3, r2
 802101c:	005b      	lsls	r3, r3, #1
 802101e:	4413      	add	r3, r2
 8021020:	009b      	lsls	r3, r3, #2
 8021022:	3308      	adds	r3, #8
 8021024:	680a      	ldr	r2, [r1, #0]
 8021026:	4413      	add	r3, r2
 8021028:	1d1c      	adds	r4, r3, #4
 802102a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 802102e:	f5a3 61a9 	sub.w	r1, r3, #1352	@ 0x548
 8021032:	f8d7 2548 	ldr.w	r2, [r7, #1352]	@ 0x548
 8021036:	4613      	mov	r3, r2
 8021038:	005b      	lsls	r3, r3, #1
 802103a:	4413      	add	r3, r2
 802103c:	009b      	lsls	r3, r3, #2
 802103e:	3338      	adds	r3, #56	@ 0x38
 8021040:	680a      	ldr	r2, [r1, #0]
 8021042:	4413      	add	r3, r2
 8021044:	1d1d      	adds	r5, r3, #4
 8021046:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 802104a:	f5a3 61a9 	sub.w	r1, r3, #1352	@ 0x548
 802104e:	f8d7 2548 	ldr.w	r2, [r7, #1352]	@ 0x548
 8021052:	4613      	mov	r3, r2
 8021054:	005b      	lsls	r3, r3, #1
 8021056:	4413      	add	r3, r2
 8021058:	009b      	lsls	r3, r3, #2
 802105a:	3368      	adds	r3, #104	@ 0x68
 802105c:	680a      	ldr	r2, [r1, #0]
 802105e:	4413      	add	r3, r2
 8021060:	1d1e      	adds	r6, r3, #4
 8021062:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 8021066:	f5a3 61a9 	sub.w	r1, r3, #1352	@ 0x548
 802106a:	f8d7 2548 	ldr.w	r2, [r7, #1352]	@ 0x548
 802106e:	4613      	mov	r3, r2
 8021070:	005b      	lsls	r3, r3, #1
 8021072:	4413      	add	r3, r2
 8021074:	009b      	lsls	r3, r3, #2
 8021076:	3398      	adds	r3, #152	@ 0x98
 8021078:	680a      	ldr	r2, [r1, #0]
 802107a:	4413      	add	r3, r2
 802107c:	3304      	adds	r3, #4
 802107e:	f207 500c 	addw	r0, r7, #1292	@ 0x50c
 8021082:	9300      	str	r3, [sp, #0]
 8021084:	4633      	mov	r3, r6
 8021086:	462a      	mov	r2, r5
 8021088:	4621      	mov	r1, r4
 802108a:	f7e8 ff17 	bl	8009ebc <sqisign_gen_ibz_vec_4_copy_ibz>
            &elem1, &(lat1->basis[0][k]), &(lat1->basis[1][k]), &(lat1->basis[2][k]), &(lat1->basis[3][k]));
        for (int i = 0; i < 4; i++) {
 802108e:	2300      	movs	r3, #0
 8021090:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8021094:	e0a0      	b.n	80211d8 <sqisign_gen_quat_lattice_mul+0x270>
            ibz_vec_4_copy_ibz(
 8021096:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 802109a:	f2a3 514c 	subw	r1, r3, #1356	@ 0x54c
 802109e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 80210a2:	4613      	mov	r3, r2
 80210a4:	005b      	lsls	r3, r3, #1
 80210a6:	4413      	add	r3, r2
 80210a8:	009b      	lsls	r3, r3, #2
 80210aa:	3308      	adds	r3, #8
 80210ac:	680a      	ldr	r2, [r1, #0]
 80210ae:	4413      	add	r3, r2
 80210b0:	1d1c      	adds	r4, r3, #4
 80210b2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 80210b6:	f2a3 514c 	subw	r1, r3, #1356	@ 0x54c
 80210ba:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 80210be:	4613      	mov	r3, r2
 80210c0:	005b      	lsls	r3, r3, #1
 80210c2:	4413      	add	r3, r2
 80210c4:	009b      	lsls	r3, r3, #2
 80210c6:	3338      	adds	r3, #56	@ 0x38
 80210c8:	680a      	ldr	r2, [r1, #0]
 80210ca:	4413      	add	r3, r2
 80210cc:	1d1d      	adds	r5, r3, #4
 80210ce:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 80210d2:	f2a3 514c 	subw	r1, r3, #1356	@ 0x54c
 80210d6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 80210da:	4613      	mov	r3, r2
 80210dc:	005b      	lsls	r3, r3, #1
 80210de:	4413      	add	r3, r2
 80210e0:	009b      	lsls	r3, r3, #2
 80210e2:	3368      	adds	r3, #104	@ 0x68
 80210e4:	680a      	ldr	r2, [r1, #0]
 80210e6:	4413      	add	r3, r2
 80210e8:	1d1e      	adds	r6, r3, #4
 80210ea:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 80210ee:	f2a3 514c 	subw	r1, r3, #1356	@ 0x54c
 80210f2:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 80210f6:	4613      	mov	r3, r2
 80210f8:	005b      	lsls	r3, r3, #1
 80210fa:	4413      	add	r3, r2
 80210fc:	009b      	lsls	r3, r3, #2
 80210fe:	3398      	adds	r3, #152	@ 0x98
 8021100:	680a      	ldr	r2, [r1, #0]
 8021102:	4413      	add	r3, r2
 8021104:	3304      	adds	r3, #4
 8021106:	f207 40dc 	addw	r0, r7, #1244	@ 0x4dc
 802110a:	9300      	str	r3, [sp, #0]
 802110c:	4633      	mov	r3, r6
 802110e:	462a      	mov	r2, r5
 8021110:	4621      	mov	r1, r4
 8021112:	f7e8 fed3 	bl	8009ebc <sqisign_gen_ibz_vec_4_copy_ibz>
                &elem2, &(lat2->basis[0][i]), &(lat2->basis[1][i]), &(lat2->basis[2][i]), &(lat2->basis[3][i]));
            quat_alg_coord_mul(&elem_res, &elem1, &elem2, alg);
 8021116:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 802111a:	f5a3 63aa 	sub.w	r3, r3, #1360	@ 0x550
 802111e:	f207 42dc 	addw	r2, r7, #1244	@ 0x4dc
 8021122:	f207 510c 	addw	r1, r7, #1292	@ 0x50c
 8021126:	f207 40ac 	addw	r0, r7, #1196	@ 0x4ac
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	f7df fefa 	bl	8000f24 <sqisign_gen_quat_alg_coord_mul>
            for (int j = 0; j < 4; j++) {
 8021130:	2300      	movs	r3, #0
 8021132:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8021136:	e046      	b.n	80211c6 <sqisign_gen_quat_lattice_mul+0x25e>
                if (k == 0)
 8021138:	f8d7 3548 	ldr.w	r3, [r7, #1352]	@ 0x548
 802113c:	2b00      	cmp	r3, #0
 802113e:	d11c      	bne.n	802117a <sqisign_gen_quat_lattice_mul+0x212>
                    ibz_copy(&(detmat[i][j]), &(elem_res[j]));
 8021140:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 8021144:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8021148:	461a      	mov	r2, r3
 802114a:	0052      	lsls	r2, r2, #1
 802114c:	441a      	add	r2, r3
 802114e:	0093      	lsls	r3, r2, #2
 8021150:	461a      	mov	r2, r3
 8021152:	f8d7 1544 	ldr.w	r1, [r7, #1348]	@ 0x544
 8021156:	460b      	mov	r3, r1
 8021158:	005b      	lsls	r3, r3, #1
 802115a:	440b      	add	r3, r1
 802115c:	011b      	lsls	r3, r3, #4
 802115e:	4413      	add	r3, r2
 8021160:	4418      	add	r0, r3
 8021162:	f207 41ac 	addw	r1, r7, #1196	@ 0x4ac
 8021166:	f8d7 2540 	ldr.w	r2, [r7, #1344]	@ 0x540
 802116a:	4613      	mov	r3, r2
 802116c:	005b      	lsls	r3, r3, #1
 802116e:	4413      	add	r3, r2
 8021170:	009b      	lsls	r3, r3, #2
 8021172:	440b      	add	r3, r1
 8021174:	4619      	mov	r1, r3
 8021176:	f7fc f881 	bl	801d27c <sqisign_gen_ibz_copy>
                ibz_copy(&(generators[4 * k + i][j]), &(elem_res[j]));
 802117a:	f8d7 3548 	ldr.w	r3, [r7, #1352]	@ 0x548
 802117e:	009a      	lsls	r2, r3, #2
 8021180:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8021184:	18d1      	adds	r1, r2, r3
 8021186:	f507 70d6 	add.w	r0, r7, #428	@ 0x1ac
 802118a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 802118e:	461a      	mov	r2, r3
 8021190:	0052      	lsls	r2, r2, #1
 8021192:	441a      	add	r2, r3
 8021194:	0093      	lsls	r3, r2, #2
 8021196:	461a      	mov	r2, r3
 8021198:	460b      	mov	r3, r1
 802119a:	005b      	lsls	r3, r3, #1
 802119c:	440b      	add	r3, r1
 802119e:	011b      	lsls	r3, r3, #4
 80211a0:	4413      	add	r3, r2
 80211a2:	4418      	add	r0, r3
 80211a4:	f207 41ac 	addw	r1, r7, #1196	@ 0x4ac
 80211a8:	f8d7 2540 	ldr.w	r2, [r7, #1344]	@ 0x540
 80211ac:	4613      	mov	r3, r2
 80211ae:	005b      	lsls	r3, r3, #1
 80211b0:	4413      	add	r3, r2
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	440b      	add	r3, r1
 80211b6:	4619      	mov	r1, r3
 80211b8:	f7fc f860 	bl	801d27c <sqisign_gen_ibz_copy>
            for (int j = 0; j < 4; j++) {
 80211bc:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 80211c0:	3301      	adds	r3, #1
 80211c2:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 80211c6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 80211ca:	2b03      	cmp	r3, #3
 80211cc:	ddb4      	ble.n	8021138 <sqisign_gen_quat_lattice_mul+0x1d0>
        for (int i = 0; i < 4; i++) {
 80211ce:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 80211d2:	3301      	adds	r3, #1
 80211d4:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 80211d8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 80211dc:	2b03      	cmp	r3, #3
 80211de:	f77f af5a 	ble.w	8021096 <sqisign_gen_quat_lattice_mul+0x12e>
    for (int k = 0; k < 4; k++) {
 80211e2:	f8d7 3548 	ldr.w	r3, [r7, #1352]	@ 0x548
 80211e6:	3301      	adds	r3, #1
 80211e8:	f8c7 3548 	str.w	r3, [r7, #1352]	@ 0x548
 80211ec:	f8d7 3548 	ldr.w	r3, [r7, #1352]	@ 0x548
 80211f0:	2b03      	cmp	r3, #3
 80211f2:	f77f af0c 	ble.w	802100e <sqisign_gen_quat_lattice_mul+0xa6>
            }
        }
    }
    ibz_mat_4x4_inv_with_det_as_denom(NULL, &det, &detmat);
 80211f6:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 80211fa:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80211fe:	4619      	mov	r1, r3
 8021200:	2000      	movs	r0, #0
 8021202:	f7e9 f9ff 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    ibz_abs(&det, &det);
 8021206:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 802120a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 802120e:	4611      	mov	r1, r2
 8021210:	4618      	mov	r0, r3
 8021212:	f7fb ff48 	bl	801d0a6 <sqisign_gen_ibz_abs>
    ibz_mat_4xn_hnf_mod_core(&(res->basis), 16, generators, &det);
 8021216:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 802121a:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 802121e:	681b      	ldr	r3, [r3, #0]
 8021220:	f103 000c 	add.w	r0, r3, #12
 8021224:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8021228:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
 802122c:	2110      	movs	r1, #16
 802122e:	f7f8 ff37 	bl	801a0a0 <sqisign_gen_ibz_mat_4xn_hnf_mod_core>
    ibz_mul(&(res->denom), &(lat1->denom), &(lat2->denom));
 8021232:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 8021236:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 802123a:	6818      	ldr	r0, [r3, #0]
 802123c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 8021240:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
 8021244:	6819      	ldr	r1, [r3, #0]
 8021246:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 802124a:	f2a3 534c 	subw	r3, r3, #1356	@ 0x54c
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	461a      	mov	r2, r3
 8021252:	f7fb ff0c 	bl	801d06e <sqisign_gen_ibz_mul>
    quat_lattice_reduce_denom(res, res);
 8021256:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 802125a:	f2a3 5244 	subw	r2, r3, #1348	@ 0x544
 802125e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 8021262:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8021266:	6811      	ldr	r1, [r2, #0]
 8021268:	6818      	ldr	r0, [r3, #0]
 802126a:	f7ff fb1f 	bl	80208ac <sqisign_gen_quat_lattice_reduce_denom>
    ibz_vec_4_finalize(&elem1);
 802126e:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8021272:	4618      	mov	r0, r3
 8021274:	f7ed fde9 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_vec_4_finalize(&elem2);
 8021278:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 802127c:	4618      	mov	r0, r3
 802127e:	f7ed fde4 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    ibz_vec_4_finalize(&elem_res);
 8021282:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 8021286:	4618      	mov	r0, r3
 8021288:	f7ed fddf 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    quat_lattice_finalize(&lat_res);
 802128c:	f107 0314 	add.w	r3, r7, #20
 8021290:	4618      	mov	r0, r3
 8021292:	f7ed febc 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
    ibz_finalize(&det);
 8021296:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 802129a:	4618      	mov	r0, r3
 802129c:	f7fb febe 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_mat_4x4_finalize(&(detmat));
 80212a0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80212a4:	4618      	mov	r0, r3
 80212a6:	f7ed fe70 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    for (int i = 0; i < 16; i++)
 80212aa:	2300      	movs	r3, #0
 80212ac:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 80212b0:	e010      	b.n	80212d4 <sqisign_gen_quat_lattice_mul+0x36c>
        ibz_vec_4_finalize(&(generators[i]));
 80212b2:	f507 71d6 	add.w	r1, r7, #428	@ 0x1ac
 80212b6:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 80212ba:	4613      	mov	r3, r2
 80212bc:	005b      	lsls	r3, r3, #1
 80212be:	4413      	add	r3, r2
 80212c0:	011b      	lsls	r3, r3, #4
 80212c2:	440b      	add	r3, r1
 80212c4:	4618      	mov	r0, r3
 80212c6:	f7ed fdc0 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    for (int i = 0; i < 16; i++)
 80212ca:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 80212ce:	3301      	adds	r3, #1
 80212d0:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 80212d4:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 80212d8:	2b0f      	cmp	r3, #15
 80212da:	ddea      	ble.n	80212b2 <sqisign_gen_quat_lattice_mul+0x34a>
}
 80212dc:	bf00      	nop
 80212de:	bf00      	nop
 80212e0:	f207 5754 	addw	r7, r7, #1364	@ 0x554
 80212e4:	46bd      	mov	sp, r7
 80212e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080212e8 <sqisign_gen_quat_lattice_contains>:

// lattice assumed of full rank
int
quat_lattice_contains(ibz_vec_4_t *coord, const quat_lattice_t *lat, const quat_alg_elem_t *x)
{
 80212e8:	b580      	push	{r7, lr}
 80212ea:	b0c8      	sub	sp, #288	@ 0x120
 80212ec:	af00      	add	r7, sp, #0
 80212ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80212f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80212f6:	6018      	str	r0, [r3, #0]
 80212f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80212fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8021300:	6019      	str	r1, [r3, #0]
 8021302:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8021306:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 802130a:	601a      	str	r2, [r3, #0]
    int divisible = 0;
 802130c:	2300      	movs	r3, #0
 802130e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    ibz_vec_4_t work_coord;
    ibz_mat_4x4_t inv;
    ibz_t det, prod;
    ibz_init(&prod);
 8021312:	f107 0310 	add.w	r3, r7, #16
 8021316:	4618      	mov	r0, r3
 8021318:	f7fb fe75 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&det);
 802131c:	f107 031c 	add.w	r3, r7, #28
 8021320:	4618      	mov	r0, r3
 8021322:	f7fb fe70 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&work_coord);
 8021326:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802132a:	4618      	mov	r0, r3
 802132c:	f7ed fd71 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    ibz_mat_4x4_init(&inv);
 8021330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021334:	4618      	mov	r0, r3
 8021336:	f7ed fdfc 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_inv_with_det_as_denom(&inv, &det, &(lat->basis));
 802133a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802133e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	f103 020c 	add.w	r2, r3, #12
 8021348:	f107 011c 	add.w	r1, r7, #28
 802134c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021350:	4618      	mov	r0, r3
 8021352:	f7e9 f957 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    assert(!ibz_is_zero(&det));
 8021356:	f107 031c 	add.w	r3, r7, #28
 802135a:	4618      	mov	r0, r3
 802135c:	f7fb ff37 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8021360:	4603      	mov	r3, r0
 8021362:	2b00      	cmp	r3, #0
 8021364:	d005      	beq.n	8021372 <sqisign_gen_quat_lattice_contains+0x8a>
 8021366:	4b41      	ldr	r3, [pc, #260]	@ (802146c <sqisign_gen_quat_lattice_contains+0x184>)
 8021368:	4a41      	ldr	r2, [pc, #260]	@ (8021470 <sqisign_gen_quat_lattice_contains+0x188>)
 802136a:	21ea      	movs	r1, #234	@ 0xea
 802136c:	4841      	ldr	r0, [pc, #260]	@ (8021474 <sqisign_gen_quat_lattice_contains+0x18c>)
 802136e:	f013 ff63 	bl	8035238 <__assert_func>
    ibz_mat_4x4_eval(&work_coord, &inv, &(x->coord));
 8021372:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8021376:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	f103 020c 	add.w	r2, r3, #12
 8021380:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8021384:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8021388:	4618      	mov	r0, r3
 802138a:	f7e9 fe9e 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
    ibz_vec_4_scalar_mul(&(work_coord), &(lat->denom), &work_coord);
 802138e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8021392:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8021396:	6819      	ldr	r1, [r3, #0]
 8021398:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 802139c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80213a0:	4618      	mov	r0, r3
 80213a2:	f7e8 fe96 	bl	800a0d2 <sqisign_gen_ibz_vec_4_scalar_mul>
    ibz_mul(&prod, &(x->denom), &det);
 80213a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80213aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80213ae:	6819      	ldr	r1, [r3, #0]
 80213b0:	f107 021c 	add.w	r2, r7, #28
 80213b4:	f107 0310 	add.w	r3, r7, #16
 80213b8:	4618      	mov	r0, r3
 80213ba:	f7fb fe58 	bl	801d06e <sqisign_gen_ibz_mul>
    divisible = ibz_vec_4_scalar_div(&work_coord, &prod, &work_coord);
 80213be:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 80213c2:	f107 0110 	add.w	r1, r7, #16
 80213c6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80213ca:	4618      	mov	r0, r3
 80213cc:	f7e8 fea7 	bl	800a11e <sqisign_gen_ibz_vec_4_scalar_div>
 80213d0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    // copy result
    if (divisible && (coord != NULL)) {
 80213d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80213d8:	2b00      	cmp	r3, #0
 80213da:	d02b      	beq.n	8021434 <sqisign_gen_quat_lattice_contains+0x14c>
 80213dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80213e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d024      	beq.n	8021434 <sqisign_gen_quat_lattice_contains+0x14c>
        for (int i = 0; i < 4; i++) {
 80213ea:	2300      	movs	r3, #0
 80213ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80213f0:	e01c      	b.n	802142c <sqisign_gen_quat_lattice_contains+0x144>
            ibz_copy(&((*coord)[i]), &(work_coord[i]));
 80213f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80213f6:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 80213fa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80213fe:	4613      	mov	r3, r2
 8021400:	005b      	lsls	r3, r3, #1
 8021402:	4413      	add	r3, r2
 8021404:	009b      	lsls	r3, r3, #2
 8021406:	680a      	ldr	r2, [r1, #0]
 8021408:	18d0      	adds	r0, r2, r3
 802140a:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802140e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8021412:	4613      	mov	r3, r2
 8021414:	005b      	lsls	r3, r3, #1
 8021416:	4413      	add	r3, r2
 8021418:	009b      	lsls	r3, r3, #2
 802141a:	440b      	add	r3, r1
 802141c:	4619      	mov	r1, r3
 802141e:	f7fb ff2d 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int i = 0; i < 4; i++) {
 8021422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8021426:	3301      	adds	r3, #1
 8021428:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 802142c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8021430:	2b03      	cmp	r3, #3
 8021432:	ddde      	ble.n	80213f2 <sqisign_gen_quat_lattice_contains+0x10a>
        }
    }
    ibz_finalize(&prod);
 8021434:	f107 0310 	add.w	r3, r7, #16
 8021438:	4618      	mov	r0, r3
 802143a:	f7fb fdef 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&det);
 802143e:	f107 031c 	add.w	r3, r7, #28
 8021442:	4618      	mov	r0, r3
 8021444:	f7fb fdea 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_mat_4x4_finalize(&inv);
 8021448:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802144c:	4618      	mov	r0, r3
 802144e:	f7ed fd9c 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_vec_4_finalize(&work_coord);
 8021452:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8021456:	4618      	mov	r0, r3
 8021458:	f7ed fcf7 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    return (divisible);
 802145c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8021460:	4618      	mov	r0, r3
 8021462:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	0803815c 	.word	0x0803815c
 8021470:	0803bba8 	.word	0x0803bba8
 8021474:	08038130 	.word	0x08038130

08021478 <sqisign_gen_quat_lattice_index>:

void
quat_lattice_index(ibz_t *index, const quat_lattice_t *sublat, const quat_lattice_t *overlat)
{
 8021478:	b580      	push	{r7, lr}
 802147a:	b08a      	sub	sp, #40	@ 0x28
 802147c:	af00      	add	r7, sp, #0
 802147e:	60f8      	str	r0, [r7, #12]
 8021480:	60b9      	str	r1, [r7, #8]
 8021482:	607a      	str	r2, [r7, #4]
    ibz_t tmp, det;
    ibz_init(&tmp);
 8021484:	f107 031c 	add.w	r3, r7, #28
 8021488:	4618      	mov	r0, r3
 802148a:	f7fb fdbc 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&det);
 802148e:	f107 0310 	add.w	r3, r7, #16
 8021492:	4618      	mov	r0, r3
 8021494:	f7fb fdb7 	bl	801d006 <sqisign_gen_ibz_init>

    // det = det(sublat->basis)
    ibz_mat_4x4_inv_with_det_as_denom(NULL, &det, &sublat->basis);
 8021498:	68bb      	ldr	r3, [r7, #8]
 802149a:	f103 020c 	add.w	r2, r3, #12
 802149e:	f107 0310 	add.w	r3, r7, #16
 80214a2:	4619      	mov	r1, r3
 80214a4:	2000      	movs	r0, #0
 80214a6:	f7e9 f8ad 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    // tmp = (overlat->denom)⁴
    ibz_mul(&tmp, &overlat->denom, &overlat->denom);
 80214aa:	6879      	ldr	r1, [r7, #4]
 80214ac:	687a      	ldr	r2, [r7, #4]
 80214ae:	f107 031c 	add.w	r3, r7, #28
 80214b2:	4618      	mov	r0, r3
 80214b4:	f7fb fddb 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&tmp, &tmp, &tmp);
 80214b8:	f107 021c 	add.w	r2, r7, #28
 80214bc:	f107 011c 	add.w	r1, r7, #28
 80214c0:	f107 031c 	add.w	r3, r7, #28
 80214c4:	4618      	mov	r0, r3
 80214c6:	f7fb fdd2 	bl	801d06e <sqisign_gen_ibz_mul>
    // index = (overlat->denom)⁴ · det(sublat->basis)
    ibz_mul(index, &det, &tmp);
 80214ca:	f107 021c 	add.w	r2, r7, #28
 80214ce:	f107 0310 	add.w	r3, r7, #16
 80214d2:	4619      	mov	r1, r3
 80214d4:	68f8      	ldr	r0, [r7, #12]
 80214d6:	f7fb fdca 	bl	801d06e <sqisign_gen_ibz_mul>
    // tmp = (sublat->denom)⁴
    ibz_mul(&tmp, &sublat->denom, &sublat->denom);
 80214da:	68b9      	ldr	r1, [r7, #8]
 80214dc:	68ba      	ldr	r2, [r7, #8]
 80214de:	f107 031c 	add.w	r3, r7, #28
 80214e2:	4618      	mov	r0, r3
 80214e4:	f7fb fdc3 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&tmp, &tmp, &tmp);
 80214e8:	f107 021c 	add.w	r2, r7, #28
 80214ec:	f107 011c 	add.w	r1, r7, #28
 80214f0:	f107 031c 	add.w	r3, r7, #28
 80214f4:	4618      	mov	r0, r3
 80214f6:	f7fb fdba 	bl	801d06e <sqisign_gen_ibz_mul>
    // det = det(overlat->basis)
    ibz_mat_4x4_inv_with_det_as_denom(NULL, &det, &overlat->basis);
 80214fa:	687b      	ldr	r3, [r7, #4]
 80214fc:	f103 020c 	add.w	r2, r3, #12
 8021500:	f107 0310 	add.w	r3, r7, #16
 8021504:	4619      	mov	r1, r3
 8021506:	2000      	movs	r0, #0
 8021508:	f7e9 f87c 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    // tmp = (sublat->denom)⁴ · det(overlat->basis)
    ibz_mul(&tmp, &tmp, &det);
 802150c:	f107 0210 	add.w	r2, r7, #16
 8021510:	f107 011c 	add.w	r1, r7, #28
 8021514:	f107 031c 	add.w	r3, r7, #28
 8021518:	4618      	mov	r0, r3
 802151a:	f7fb fda8 	bl	801d06e <sqisign_gen_ibz_mul>
    // index = index / tmp
    ibz_div(index, &tmp, index, &tmp);
 802151e:	f107 031c 	add.w	r3, r7, #28
 8021522:	f107 011c 	add.w	r1, r7, #28
 8021526:	68fa      	ldr	r2, [r7, #12]
 8021528:	68f8      	ldr	r0, [r7, #12]
 802152a:	f7fb fdc9 	bl	801d0c0 <sqisign_gen_ibz_div>
    assert(ibz_is_zero(&tmp));
 802152e:	f107 031c 	add.w	r3, r7, #28
 8021532:	4618      	mov	r0, r3
 8021534:	f7fb fe4b 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8021538:	4603      	mov	r3, r0
 802153a:	2b00      	cmp	r3, #0
 802153c:	d106      	bne.n	802154c <sqisign_gen_quat_lattice_index+0xd4>
 802153e:	4b0c      	ldr	r3, [pc, #48]	@ (8021570 <sqisign_gen_quat_lattice_index+0xf8>)
 8021540:	4a0c      	ldr	r2, [pc, #48]	@ (8021574 <sqisign_gen_quat_lattice_index+0xfc>)
 8021542:	f240 1113 	movw	r1, #275	@ 0x113
 8021546:	480c      	ldr	r0, [pc, #48]	@ (8021578 <sqisign_gen_quat_lattice_index+0x100>)
 8021548:	f013 fe76 	bl	8035238 <__assert_func>
    // index = |index|
    ibz_abs(index, index);
 802154c:	68f9      	ldr	r1, [r7, #12]
 802154e:	68f8      	ldr	r0, [r7, #12]
 8021550:	f7fb fda9 	bl	801d0a6 <sqisign_gen_ibz_abs>

    ibz_finalize(&tmp);
 8021554:	f107 031c 	add.w	r3, r7, #28
 8021558:	4618      	mov	r0, r3
 802155a:	f7fb fd5f 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&det);
 802155e:	f107 0310 	add.w	r3, r7, #16
 8021562:	4618      	mov	r0, r3
 8021564:	f7fb fd5a 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8021568:	bf00      	nop
 802156a:	3728      	adds	r7, #40	@ 0x28
 802156c:	46bd      	mov	sp, r7
 802156e:	bd80      	pop	{r7, pc}
 8021570:	08038170 	.word	0x08038170
 8021574:	0803bbcc 	.word	0x0803bbcc
 8021578:	08038130 	.word	0x08038130

0802157c <sqisign_gen_quat_lattice_hnf>:

void
quat_lattice_hnf(quat_lattice_t *lat)
{
 802157c:	b580      	push	{r7, lr}
 802157e:	b0ba      	sub	sp, #232	@ 0xe8
 8021580:	af00      	add	r7, sp, #0
 8021582:	6078      	str	r0, [r7, #4]
    ibz_t mod;
    ibz_vec_4_t generators[4];
    ibz_init(&mod);
 8021584:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8021588:	4618      	mov	r0, r3
 802158a:	f7fb fd3c 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mat_4x4_inv_with_det_as_denom(NULL, &mod, &(lat->basis));
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	f103 020c 	add.w	r2, r3, #12
 8021594:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8021598:	4619      	mov	r1, r3
 802159a:	2000      	movs	r0, #0
 802159c:	f7e9 f832 	bl	800a604 <sqisign_gen_ibz_mat_4x4_inv_with_det_as_denom>
    ibz_abs(&mod, &mod);
 80215a0:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 80215a4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80215a8:	4611      	mov	r1, r2
 80215aa:	4618      	mov	r0, r3
 80215ac:	f7fb fd7b 	bl	801d0a6 <sqisign_gen_ibz_abs>
    for (int i = 0; i < 4; i++)
 80215b0:	2300      	movs	r3, #0
 80215b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80215b6:	e010      	b.n	80215da <sqisign_gen_quat_lattice_hnf+0x5e>
        ibz_vec_4_init(&(generators[i]));
 80215b8:	f107 010c 	add.w	r1, r7, #12
 80215bc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80215c0:	4613      	mov	r3, r2
 80215c2:	005b      	lsls	r3, r3, #1
 80215c4:	4413      	add	r3, r2
 80215c6:	011b      	lsls	r3, r3, #4
 80215c8:	440b      	add	r3, r1
 80215ca:	4618      	mov	r0, r3
 80215cc:	f7ed fc21 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    for (int i = 0; i < 4; i++)
 80215d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80215d4:	3301      	adds	r3, #1
 80215d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80215da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80215de:	2b03      	cmp	r3, #3
 80215e0:	ddea      	ble.n	80215b8 <sqisign_gen_quat_lattice_hnf+0x3c>
    for (int i = 0; i < 4; i++) {
 80215e2:	2300      	movs	r3, #0
 80215e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80215e8:	e037      	b.n	802165a <sqisign_gen_quat_lattice_hnf+0xde>
        for (int j = 0; j < 4; j++) {
 80215ea:	2300      	movs	r3, #0
 80215ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80215f0:	e02a      	b.n	8021648 <sqisign_gen_quat_lattice_hnf+0xcc>
            ibz_copy(&(generators[j][i]), &(lat->basis[i][j]));
 80215f2:	f107 000c 	add.w	r0, r7, #12
 80215f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80215fa:	461a      	mov	r2, r3
 80215fc:	0052      	lsls	r2, r2, #1
 80215fe:	441a      	add	r2, r3
 8021600:	0093      	lsls	r3, r2, #2
 8021602:	461a      	mov	r2, r3
 8021604:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8021608:	460b      	mov	r3, r1
 802160a:	005b      	lsls	r3, r3, #1
 802160c:	440b      	add	r3, r1
 802160e:	011b      	lsls	r3, r3, #4
 8021610:	4413      	add	r3, r2
 8021612:	4418      	add	r0, r3
 8021614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021618:	461a      	mov	r2, r3
 802161a:	0052      	lsls	r2, r2, #1
 802161c:	441a      	add	r2, r3
 802161e:	0093      	lsls	r3, r2, #2
 8021620:	461a      	mov	r2, r3
 8021622:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8021626:	460b      	mov	r3, r1
 8021628:	005b      	lsls	r3, r3, #1
 802162a:	440b      	add	r3, r1
 802162c:	011b      	lsls	r3, r3, #4
 802162e:	4413      	add	r3, r2
 8021630:	3308      	adds	r3, #8
 8021632:	687a      	ldr	r2, [r7, #4]
 8021634:	4413      	add	r3, r2
 8021636:	3304      	adds	r3, #4
 8021638:	4619      	mov	r1, r3
 802163a:	f7fb fe1f 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = 0; j < 4; j++) {
 802163e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021642:	3301      	adds	r3, #1
 8021644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8021648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802164c:	2b03      	cmp	r3, #3
 802164e:	ddd0      	ble.n	80215f2 <sqisign_gen_quat_lattice_hnf+0x76>
    for (int i = 0; i < 4; i++) {
 8021650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8021654:	3301      	adds	r3, #1
 8021656:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 802165a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802165e:	2b03      	cmp	r3, #3
 8021660:	ddc3      	ble.n	80215ea <sqisign_gen_quat_lattice_hnf+0x6e>
        }
    }
    ibz_mat_4xn_hnf_mod_core(&(lat->basis), 4, generators, &mod);
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	f103 000c 	add.w	r0, r3, #12
 8021668:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 802166c:	f107 020c 	add.w	r2, r7, #12
 8021670:	2104      	movs	r1, #4
 8021672:	f7f8 fd15 	bl	801a0a0 <sqisign_gen_ibz_mat_4xn_hnf_mod_core>
    quat_lattice_reduce_denom(lat, lat);
 8021676:	6879      	ldr	r1, [r7, #4]
 8021678:	6878      	ldr	r0, [r7, #4]
 802167a:	f7ff f917 	bl	80208ac <sqisign_gen_quat_lattice_reduce_denom>
    ibz_finalize(&mod);
 802167e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8021682:	4618      	mov	r0, r3
 8021684:	f7fb fcca 	bl	801d01c <sqisign_gen_ibz_finalize>
    for (int i = 0; i < 4; i++)
 8021688:	2300      	movs	r3, #0
 802168a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 802168e:	e010      	b.n	80216b2 <sqisign_gen_quat_lattice_hnf+0x136>
        ibz_vec_4_finalize(&(generators[i]));
 8021690:	f107 010c 	add.w	r1, r7, #12
 8021694:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8021698:	4613      	mov	r3, r2
 802169a:	005b      	lsls	r3, r3, #1
 802169c:	4413      	add	r3, r2
 802169e:	011b      	lsls	r3, r3, #4
 80216a0:	440b      	add	r3, r1
 80216a2:	4618      	mov	r0, r3
 80216a4:	f7ed fbd1 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    for (int i = 0; i < 4; i++)
 80216a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80216ac:	3301      	adds	r3, #1
 80216ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80216b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80216b6:	2b03      	cmp	r3, #3
 80216b8:	ddea      	ble.n	8021690 <sqisign_gen_quat_lattice_hnf+0x114>
}
 80216ba:	bf00      	nop
 80216bc:	bf00      	nop
 80216be:	37e8      	adds	r7, #232	@ 0xe8
 80216c0:	46bd      	mov	sp, r7
 80216c2:	bd80      	pop	{r7, pc}

080216c4 <sqisign_gen_quat_lattice_gram>:

void
quat_lattice_gram(ibz_mat_4x4_t *G, const quat_lattice_t *lattice, const quat_alg_t *alg)
{
 80216c4:	b580      	push	{r7, lr}
 80216c6:	b08c      	sub	sp, #48	@ 0x30
 80216c8:	af00      	add	r7, sp, #0
 80216ca:	60f8      	str	r0, [r7, #12]
 80216cc:	60b9      	str	r1, [r7, #8]
 80216ce:	607a      	str	r2, [r7, #4]
    ibz_t tmp;
    ibz_init(&tmp);
 80216d0:	f107 0310 	add.w	r3, r7, #16
 80216d4:	4618      	mov	r0, r3
 80216d6:	f7fb fc96 	bl	801d006 <sqisign_gen_ibz_init>
    for (int i = 0; i < 4; i++) {
 80216da:	2300      	movs	r3, #0
 80216dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80216de:	e09a      	b.n	8021816 <sqisign_gen_quat_lattice_gram+0x152>
        for (int j = 0; j <= i; j++) {
 80216e0:	2300      	movs	r3, #0
 80216e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80216e4:	e08f      	b.n	8021806 <sqisign_gen_quat_lattice_gram+0x142>
            ibz_set(&(*G)[i][j], 0);
 80216e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80216e8:	461a      	mov	r2, r3
 80216ea:	0052      	lsls	r2, r2, #1
 80216ec:	441a      	add	r2, r3
 80216ee:	0093      	lsls	r3, r2, #2
 80216f0:	461a      	mov	r2, r3
 80216f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80216f4:	460b      	mov	r3, r1
 80216f6:	005b      	lsls	r3, r3, #1
 80216f8:	440b      	add	r3, r1
 80216fa:	011b      	lsls	r3, r3, #4
 80216fc:	4413      	add	r3, r2
 80216fe:	68fa      	ldr	r2, [r7, #12]
 8021700:	4413      	add	r3, r2
 8021702:	2100      	movs	r1, #0
 8021704:	4618      	mov	r0, r3
 8021706:	f7fb fdac 	bl	801d262 <sqisign_gen_ibz_set>
            for (int k = 0; k < 4; k++) {
 802170a:	2300      	movs	r3, #0
 802170c:	627b      	str	r3, [r7, #36]	@ 0x24
 802170e:	e054      	b.n	80217ba <sqisign_gen_quat_lattice_gram+0xf6>
                ibz_mul(&tmp, &(lattice->basis)[k][i], &(lattice->basis)[k][j]);
 8021710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021712:	461a      	mov	r2, r3
 8021714:	0052      	lsls	r2, r2, #1
 8021716:	441a      	add	r2, r3
 8021718:	0093      	lsls	r3, r2, #2
 802171a:	461a      	mov	r2, r3
 802171c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802171e:	460b      	mov	r3, r1
 8021720:	005b      	lsls	r3, r3, #1
 8021722:	440b      	add	r3, r1
 8021724:	011b      	lsls	r3, r3, #4
 8021726:	4413      	add	r3, r2
 8021728:	3308      	adds	r3, #8
 802172a:	68ba      	ldr	r2, [r7, #8]
 802172c:	4413      	add	r3, r2
 802172e:	1d18      	adds	r0, r3, #4
 8021730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021732:	461a      	mov	r2, r3
 8021734:	0052      	lsls	r2, r2, #1
 8021736:	441a      	add	r2, r3
 8021738:	0093      	lsls	r3, r2, #2
 802173a:	461a      	mov	r2, r3
 802173c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802173e:	460b      	mov	r3, r1
 8021740:	005b      	lsls	r3, r3, #1
 8021742:	440b      	add	r3, r1
 8021744:	011b      	lsls	r3, r3, #4
 8021746:	4413      	add	r3, r2
 8021748:	3308      	adds	r3, #8
 802174a:	68ba      	ldr	r2, [r7, #8]
 802174c:	4413      	add	r3, r2
 802174e:	1d1a      	adds	r2, r3, #4
 8021750:	f107 0310 	add.w	r3, r7, #16
 8021754:	4601      	mov	r1, r0
 8021756:	4618      	mov	r0, r3
 8021758:	f7fb fc89 	bl	801d06e <sqisign_gen_ibz_mul>
                if (k >= 2)
 802175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802175e:	2b01      	cmp	r3, #1
 8021760:	dd07      	ble.n	8021772 <sqisign_gen_quat_lattice_gram+0xae>
                    ibz_mul(&tmp, &tmp, &alg->p);
 8021762:	687a      	ldr	r2, [r7, #4]
 8021764:	f107 0110 	add.w	r1, r7, #16
 8021768:	f107 0310 	add.w	r3, r7, #16
 802176c:	4618      	mov	r0, r3
 802176e:	f7fb fc7e 	bl	801d06e <sqisign_gen_ibz_mul>
                ibz_add(&(*G)[i][j], &(*G)[i][j], &tmp);
 8021772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021774:	461a      	mov	r2, r3
 8021776:	0052      	lsls	r2, r2, #1
 8021778:	441a      	add	r2, r3
 802177a:	0093      	lsls	r3, r2, #2
 802177c:	461a      	mov	r2, r3
 802177e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021780:	460b      	mov	r3, r1
 8021782:	005b      	lsls	r3, r3, #1
 8021784:	440b      	add	r3, r1
 8021786:	011b      	lsls	r3, r3, #4
 8021788:	4413      	add	r3, r2
 802178a:	68fa      	ldr	r2, [r7, #12]
 802178c:	18d0      	adds	r0, r2, r3
 802178e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021790:	461a      	mov	r2, r3
 8021792:	0052      	lsls	r2, r2, #1
 8021794:	441a      	add	r2, r3
 8021796:	0093      	lsls	r3, r2, #2
 8021798:	461a      	mov	r2, r3
 802179a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802179c:	460b      	mov	r3, r1
 802179e:	005b      	lsls	r3, r3, #1
 80217a0:	440b      	add	r3, r1
 80217a2:	011b      	lsls	r3, r3, #4
 80217a4:	4413      	add	r3, r2
 80217a6:	68fa      	ldr	r2, [r7, #12]
 80217a8:	4413      	add	r3, r2
 80217aa:	f107 0210 	add.w	r2, r7, #16
 80217ae:	4619      	mov	r1, r3
 80217b0:	f7fb fc3f 	bl	801d032 <sqisign_gen_ibz_add>
            for (int k = 0; k < 4; k++) {
 80217b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217b6:	3301      	adds	r3, #1
 80217b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80217ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217bc:	2b03      	cmp	r3, #3
 80217be:	dda7      	ble.n	8021710 <sqisign_gen_quat_lattice_gram+0x4c>
            }
            ibz_mul(&(*G)[i][j], &(*G)[i][j], &ibz_const_two);
 80217c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80217c2:	461a      	mov	r2, r3
 80217c4:	0052      	lsls	r2, r2, #1
 80217c6:	441a      	add	r2, r3
 80217c8:	0093      	lsls	r3, r2, #2
 80217ca:	461a      	mov	r2, r3
 80217cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80217ce:	460b      	mov	r3, r1
 80217d0:	005b      	lsls	r3, r3, #1
 80217d2:	440b      	add	r3, r1
 80217d4:	011b      	lsls	r3, r3, #4
 80217d6:	4413      	add	r3, r2
 80217d8:	68fa      	ldr	r2, [r7, #12]
 80217da:	18d0      	adds	r0, r2, r3
 80217dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80217de:	461a      	mov	r2, r3
 80217e0:	0052      	lsls	r2, r2, #1
 80217e2:	441a      	add	r2, r3
 80217e4:	0093      	lsls	r3, r2, #2
 80217e6:	461a      	mov	r2, r3
 80217e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80217ea:	460b      	mov	r3, r1
 80217ec:	005b      	lsls	r3, r3, #1
 80217ee:	440b      	add	r3, r1
 80217f0:	011b      	lsls	r3, r3, #4
 80217f2:	4413      	add	r3, r2
 80217f4:	68fa      	ldr	r2, [r7, #12]
 80217f6:	4413      	add	r3, r2
 80217f8:	4a26      	ldr	r2, [pc, #152]	@ (8021894 <sqisign_gen_quat_lattice_gram+0x1d0>)
 80217fa:	4619      	mov	r1, r3
 80217fc:	f7fb fc37 	bl	801d06e <sqisign_gen_ibz_mul>
        for (int j = 0; j <= i; j++) {
 8021800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021802:	3301      	adds	r3, #1
 8021804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802180a:	429a      	cmp	r2, r3
 802180c:	f77f af6b 	ble.w	80216e6 <sqisign_gen_quat_lattice_gram+0x22>
    for (int i = 0; i < 4; i++) {
 8021810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021812:	3301      	adds	r3, #1
 8021814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021818:	2b03      	cmp	r3, #3
 802181a:	f77f af61 	ble.w	80216e0 <sqisign_gen_quat_lattice_gram+0x1c>
        }
    }
    for (int i = 0; i < 4; i++) {
 802181e:	2300      	movs	r3, #0
 8021820:	623b      	str	r3, [r7, #32]
 8021822:	e02b      	b.n	802187c <sqisign_gen_quat_lattice_gram+0x1b8>
        for (int j = i + 1; j < 4; j++) {
 8021824:	6a3b      	ldr	r3, [r7, #32]
 8021826:	3301      	adds	r3, #1
 8021828:	61fb      	str	r3, [r7, #28]
 802182a:	e021      	b.n	8021870 <sqisign_gen_quat_lattice_gram+0x1ac>
            ibz_copy(&(*G)[i][j], &(*G)[j][i]);
 802182c:	69fb      	ldr	r3, [r7, #28]
 802182e:	461a      	mov	r2, r3
 8021830:	0052      	lsls	r2, r2, #1
 8021832:	441a      	add	r2, r3
 8021834:	0093      	lsls	r3, r2, #2
 8021836:	461a      	mov	r2, r3
 8021838:	6a39      	ldr	r1, [r7, #32]
 802183a:	460b      	mov	r3, r1
 802183c:	005b      	lsls	r3, r3, #1
 802183e:	440b      	add	r3, r1
 8021840:	011b      	lsls	r3, r3, #4
 8021842:	4413      	add	r3, r2
 8021844:	68fa      	ldr	r2, [r7, #12]
 8021846:	18d0      	adds	r0, r2, r3
 8021848:	6a3b      	ldr	r3, [r7, #32]
 802184a:	461a      	mov	r2, r3
 802184c:	0052      	lsls	r2, r2, #1
 802184e:	441a      	add	r2, r3
 8021850:	0093      	lsls	r3, r2, #2
 8021852:	461a      	mov	r2, r3
 8021854:	69f9      	ldr	r1, [r7, #28]
 8021856:	460b      	mov	r3, r1
 8021858:	005b      	lsls	r3, r3, #1
 802185a:	440b      	add	r3, r1
 802185c:	011b      	lsls	r3, r3, #4
 802185e:	4413      	add	r3, r2
 8021860:	68fa      	ldr	r2, [r7, #12]
 8021862:	4413      	add	r3, r2
 8021864:	4619      	mov	r1, r3
 8021866:	f7fb fd09 	bl	801d27c <sqisign_gen_ibz_copy>
        for (int j = i + 1; j < 4; j++) {
 802186a:	69fb      	ldr	r3, [r7, #28]
 802186c:	3301      	adds	r3, #1
 802186e:	61fb      	str	r3, [r7, #28]
 8021870:	69fb      	ldr	r3, [r7, #28]
 8021872:	2b03      	cmp	r3, #3
 8021874:	ddda      	ble.n	802182c <sqisign_gen_quat_lattice_gram+0x168>
    for (int i = 0; i < 4; i++) {
 8021876:	6a3b      	ldr	r3, [r7, #32]
 8021878:	3301      	adds	r3, #1
 802187a:	623b      	str	r3, [r7, #32]
 802187c:	6a3b      	ldr	r3, [r7, #32]
 802187e:	2b03      	cmp	r3, #3
 8021880:	ddd0      	ble.n	8021824 <sqisign_gen_quat_lattice_gram+0x160>
        }
    }
    ibz_finalize(&tmp);
 8021882:	f107 0310 	add.w	r3, r7, #16
 8021886:	4618      	mov	r0, r3
 8021888:	f7fb fbc8 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 802188c:	bf00      	nop
 802188e:	3730      	adds	r7, #48	@ 0x30
 8021890:	46bd      	mov	sp, r7
 8021892:	bd80      	pop	{r7, pc}
 8021894:	0803b90c 	.word	0x0803b90c

08021898 <sqisign_gen_quat_lideal_reduce_basis>:
void
quat_lideal_reduce_basis(ibz_mat_4x4_t *reduced,
                         ibz_mat_4x4_t *gram,
                         const quat_left_ideal_t *lideal,
                         const quat_alg_t *alg)
{
 8021898:	b580      	push	{r7, lr}
 802189a:	b08a      	sub	sp, #40	@ 0x28
 802189c:	af00      	add	r7, sp, #0
 802189e:	60f8      	str	r0, [r7, #12]
 80218a0:	60b9      	str	r1, [r7, #8]
 80218a2:	607a      	str	r2, [r7, #4]
 80218a4:	603b      	str	r3, [r7, #0]
    assert(quat_order_is_maximal((lideal->parent_order), alg));
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80218ac:	6839      	ldr	r1, [r7, #0]
 80218ae:	4618      	mov	r0, r3
 80218b0:	f7fb fb80 	bl	801cfb4 <sqisign_gen_quat_order_is_maximal>
 80218b4:	4603      	mov	r3, r0
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d105      	bne.n	80218c6 <sqisign_gen_quat_lideal_reduce_basis+0x2e>
 80218ba:	4b34      	ldr	r3, [pc, #208]	@ (802198c <sqisign_gen_quat_lideal_reduce_basis+0xf4>)
 80218bc:	4a34      	ldr	r2, [pc, #208]	@ (8021990 <sqisign_gen_quat_lideal_reduce_basis+0xf8>)
 80218be:	210b      	movs	r1, #11
 80218c0:	4834      	ldr	r0, [pc, #208]	@ (8021994 <sqisign_gen_quat_lideal_reduce_basis+0xfc>)
 80218c2:	f013 fcb9 	bl	8035238 <__assert_func>
    ibz_t gram_corrector;
    ibz_init(&gram_corrector);
 80218c6:	f107 0314 	add.w	r3, r7, #20
 80218ca:	4618      	mov	r0, r3
 80218cc:	f7fb fb9b 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mul(&gram_corrector, &(lideal->lattice.denom), &(lideal->lattice.denom));
 80218d0:	6879      	ldr	r1, [r7, #4]
 80218d2:	687a      	ldr	r2, [r7, #4]
 80218d4:	f107 0314 	add.w	r3, r7, #20
 80218d8:	4618      	mov	r0, r3
 80218da:	f7fb fbc8 	bl	801d06e <sqisign_gen_ibz_mul>
    quat_lideal_class_gram(gram, lideal, alg);
 80218de:	683a      	ldr	r2, [r7, #0]
 80218e0:	6879      	ldr	r1, [r7, #4]
 80218e2:	68b8      	ldr	r0, [r7, #8]
 80218e4:	f7fb f9a4 	bl	801cc30 <sqisign_gen_quat_lideal_class_gram>
    ibz_mat_4x4_copy(reduced, &(lideal->lattice.basis));
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	330c      	adds	r3, #12
 80218ec:	4619      	mov	r1, r3
 80218ee:	68f8      	ldr	r0, [r7, #12]
 80218f0:	f7e8 fc57 	bl	800a1a2 <sqisign_gen_ibz_mat_4x4_copy>
    quat_lll_core(gram, reduced);
 80218f4:	68f9      	ldr	r1, [r7, #12]
 80218f6:	68b8      	ldr	r0, [r7, #8]
 80218f8:	f7fd feee 	bl	801f6d8 <sqisign_gen_quat_lll_core>
    ibz_mat_4x4_scalar_mul(gram, &gram_corrector, gram);
 80218fc:	f107 0314 	add.w	r3, r7, #20
 8021900:	68ba      	ldr	r2, [r7, #8]
 8021902:	4619      	mov	r1, r3
 8021904:	68b8      	ldr	r0, [r7, #8]
 8021906:	f7e8 fd16 	bl	800a336 <sqisign_gen_ibz_mat_4x4_scalar_mul>
    for (int i = 0; i < 4; i++) {
 802190a:	2300      	movs	r3, #0
 802190c:	627b      	str	r3, [r7, #36]	@ 0x24
 802190e:	e030      	b.n	8021972 <sqisign_gen_quat_lideal_reduce_basis+0xda>
        ibz_div_2exp(&((*gram)[i][i]), &((*gram)[i][i]), 1);
 8021910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021912:	4613      	mov	r3, r2
 8021914:	011b      	lsls	r3, r3, #4
 8021916:	1a9b      	subs	r3, r3, r2
 8021918:	009b      	lsls	r3, r3, #2
 802191a:	68ba      	ldr	r2, [r7, #8]
 802191c:	18d0      	adds	r0, r2, r3
 802191e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021920:	4613      	mov	r3, r2
 8021922:	011b      	lsls	r3, r3, #4
 8021924:	1a9b      	subs	r3, r3, r2
 8021926:	009b      	lsls	r3, r3, #2
 8021928:	68ba      	ldr	r2, [r7, #8]
 802192a:	4413      	add	r3, r2
 802192c:	2201      	movs	r2, #1
 802192e:	4619      	mov	r1, r3
 8021930:	f7fb fbd7 	bl	801d0e2 <sqisign_gen_ibz_div_2exp>
        for (int j = i + 1; j < 4; j++) {
 8021934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021936:	3301      	adds	r3, #1
 8021938:	623b      	str	r3, [r7, #32]
 802193a:	e014      	b.n	8021966 <sqisign_gen_quat_lideal_reduce_basis+0xce>
            ibz_set(&((*gram)[i][j]), 0);
 802193c:	6a3b      	ldr	r3, [r7, #32]
 802193e:	461a      	mov	r2, r3
 8021940:	0052      	lsls	r2, r2, #1
 8021942:	441a      	add	r2, r3
 8021944:	0093      	lsls	r3, r2, #2
 8021946:	461a      	mov	r2, r3
 8021948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802194a:	460b      	mov	r3, r1
 802194c:	005b      	lsls	r3, r3, #1
 802194e:	440b      	add	r3, r1
 8021950:	011b      	lsls	r3, r3, #4
 8021952:	4413      	add	r3, r2
 8021954:	68ba      	ldr	r2, [r7, #8]
 8021956:	4413      	add	r3, r2
 8021958:	2100      	movs	r1, #0
 802195a:	4618      	mov	r0, r3
 802195c:	f7fb fc81 	bl	801d262 <sqisign_gen_ibz_set>
        for (int j = i + 1; j < 4; j++) {
 8021960:	6a3b      	ldr	r3, [r7, #32]
 8021962:	3301      	adds	r3, #1
 8021964:	623b      	str	r3, [r7, #32]
 8021966:	6a3b      	ldr	r3, [r7, #32]
 8021968:	2b03      	cmp	r3, #3
 802196a:	dde7      	ble.n	802193c <sqisign_gen_quat_lideal_reduce_basis+0xa4>
    for (int i = 0; i < 4; i++) {
 802196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802196e:	3301      	adds	r3, #1
 8021970:	627b      	str	r3, [r7, #36]	@ 0x24
 8021972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021974:	2b03      	cmp	r3, #3
 8021976:	ddcb      	ble.n	8021910 <sqisign_gen_quat_lideal_reduce_basis+0x78>
        }
    }
    ibz_finalize(&gram_corrector);
 8021978:	f107 0314 	add.w	r3, r7, #20
 802197c:	4618      	mov	r0, r3
 802197e:	f7fb fb4d 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8021982:	bf00      	nop
 8021984:	3728      	adds	r7, #40	@ 0x28
 8021986:	46bd      	mov	sp, r7
 8021988:	bd80      	pop	{r7, pc}
 802198a:	bf00      	nop
 802198c:	08038184 	.word	0x08038184
 8021990:	0803bbec 	.word	0x0803bbec
 8021994:	080381b8 	.word	0x080381b8

08021998 <sqisign_gen_quat_lideal_lideal_mul_reduced>:
quat_lideal_lideal_mul_reduced(quat_left_ideal_t *prod,
                               ibz_mat_4x4_t *gram,
                               const quat_left_ideal_t *lideal1,
                               const quat_left_ideal_t *lideal2,
                               const quat_alg_t *alg)
{
 8021998:	b580      	push	{r7, lr}
 802199a:	b0b4      	sub	sp, #208	@ 0xd0
 802199c:	af00      	add	r7, sp, #0
 802199e:	60f8      	str	r0, [r7, #12]
 80219a0:	60b9      	str	r1, [r7, #8]
 80219a2:	607a      	str	r2, [r7, #4]
 80219a4:	603b      	str	r3, [r7, #0]
    ibz_mat_4x4_t red;
    ibz_mat_4x4_init(&red);
 80219a6:	f107 0310 	add.w	r3, r7, #16
 80219aa:	4618      	mov	r0, r3
 80219ac:	f7ed fac1 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>

    quat_lattice_mul(&(prod->lattice), &(lideal1->lattice), &(lideal2->lattice), alg);
 80219b0:	68f8      	ldr	r0, [r7, #12]
 80219b2:	6879      	ldr	r1, [r7, #4]
 80219b4:	683a      	ldr	r2, [r7, #0]
 80219b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80219ba:	f7ff fad5 	bl	8020f68 <sqisign_gen_quat_lattice_mul>
    prod->parent_order = lideal1->parent_order;
 80219be:	687b      	ldr	r3, [r7, #4]
 80219c0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80219c4:	68fb      	ldr	r3, [r7, #12]
 80219c6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    quat_lideal_norm(prod);
 80219ca:	68f8      	ldr	r0, [r7, #12]
 80219cc:	f7fa fcee 	bl	801c3ac <sqisign_gen_quat_lideal_norm>
    quat_lideal_reduce_basis(&red, gram, prod, alg);
 80219d0:	f107 0010 	add.w	r0, r7, #16
 80219d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80219d8:	68fa      	ldr	r2, [r7, #12]
 80219da:	68b9      	ldr	r1, [r7, #8]
 80219dc:	f7ff ff5c 	bl	8021898 <sqisign_gen_quat_lideal_reduce_basis>
    ibz_mat_4x4_copy(&(prod->lattice.basis), &red);
 80219e0:	68fb      	ldr	r3, [r7, #12]
 80219e2:	330c      	adds	r3, #12
 80219e4:	f107 0210 	add.w	r2, r7, #16
 80219e8:	4611      	mov	r1, r2
 80219ea:	4618      	mov	r0, r3
 80219ec:	f7e8 fbd9 	bl	800a1a2 <sqisign_gen_ibz_mat_4x4_copy>

    ibz_mat_4x4_finalize(&red);
 80219f0:	f107 0310 	add.w	r3, r7, #16
 80219f4:	4618      	mov	r0, r3
 80219f6:	f7ed fac8 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
}
 80219fa:	bf00      	nop
 80219fc:	37d0      	adds	r7, #208	@ 0xd0
 80219fe:	46bd      	mov	sp, r7
 8021a00:	bd80      	pop	{r7, pc}
	...

08021a04 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent>:
int
quat_lideal_prime_norm_reduced_equivalent(quat_left_ideal_t *lideal,
                                          const quat_alg_t *alg,
                                          const int primality_num_iter,
                                          const int equiv_bound_coeff)
{
 8021a04:	b590      	push	{r4, r7, lr}
 8021a06:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8021a0a:	af00      	add	r7, sp, #0
 8021a0c:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 8021a10:	f5a4 74fa 	sub.w	r4, r4, #500	@ 0x1f4
 8021a14:	6020      	str	r0, [r4, #0]
 8021a16:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8021a1a:	f5a0 70fc 	sub.w	r0, r0, #504	@ 0x1f8
 8021a1e:	6001      	str	r1, [r0, #0]
 8021a20:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8021a24:	f5a1 71fe 	sub.w	r1, r1, #508	@ 0x1fc
 8021a28:	600a      	str	r2, [r1, #0]
 8021a2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8021a2e:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
 8021a32:	6013      	str	r3, [r2, #0]
    ibz_mat_4x4_t gram, red;
    ibz_mat_4x4_init(&gram);
 8021a34:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8021a38:	4618      	mov	r0, r3
 8021a3a:	f7ed fa7a 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>
    ibz_mat_4x4_init(&red);
 8021a3e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8021a42:	4618      	mov	r0, r3
 8021a44:	f7ed fa75 	bl	800ef32 <sqisign_gen_ibz_mat_4x4_init>

    int found = 0;
 8021a48:	2300      	movs	r3, #0
 8021a4a:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

    // computing the reduced basis
    quat_lideal_reduce_basis(&red, &gram, lideal, alg);
 8021a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021a52:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8021a56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8021a5a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8021a5e:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 8021a62:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	6812      	ldr	r2, [r2, #0]
 8021a6a:	f7ff ff15 	bl	8021898 <sqisign_gen_quat_lideal_reduce_basis>

    quat_alg_elem_t new_alpha;
    quat_alg_elem_init(&new_alpha);
 8021a6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021a72:	4618      	mov	r0, r3
 8021a74:	f7ed f984 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    ibz_t tmp, remainder, adjusted_norm;
    ibz_init(&tmp);
 8021a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8021a7c:	4618      	mov	r0, r3
 8021a7e:	f7fb fac2 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&remainder);
 8021a82:	f107 0320 	add.w	r3, r7, #32
 8021a86:	4618      	mov	r0, r3
 8021a88:	f7fb fabd 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&adjusted_norm);
 8021a8c:	f107 0314 	add.w	r3, r7, #20
 8021a90:	4618      	mov	r0, r3
 8021a92:	f7fb fab8 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_mul(&adjusted_norm, &lideal->lattice.denom, &lideal->lattice.denom);
 8021a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021a9a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8021a9e:	6819      	ldr	r1, [r3, #0]
 8021aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021aa4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8021aa8:	681a      	ldr	r2, [r3, #0]
 8021aaa:	f107 0314 	add.w	r3, r7, #20
 8021aae:	4618      	mov	r0, r3
 8021ab0:	f7fb fadd 	bl	801d06e <sqisign_gen_ibz_mul>

    int ctr = 0;
 8021ab4:	2300      	movs	r3, #0
 8021ab6:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8

    // equiv_num_iter = (2 * equiv_bound_coeff + 1)^4
    assert(equiv_bound_coeff < (1 << 20));
 8021aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021abe:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021ac8:	db05      	blt.n	8021ad6 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0xd2>
 8021aca:	4b93      	ldr	r3, [pc, #588]	@ (8021d18 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x314>)
 8021acc:	4a93      	ldr	r2, [pc, #588]	@ (8021d1c <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x318>)
 8021ace:	214a      	movs	r1, #74	@ 0x4a
 8021ad0:	4893      	ldr	r0, [pc, #588]	@ (8021d20 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x31c>)
 8021ad2:	f013 fbb1 	bl	8035238 <__assert_func>
    int equiv_num_iter = (2 * equiv_bound_coeff + 1);
 8021ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021ada:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	005b      	lsls	r3, r3, #1
 8021ae2:	3301      	adds	r3, #1
 8021ae4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    equiv_num_iter = equiv_num_iter * equiv_num_iter;
 8021ae8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8021aec:	fb03 f303 	mul.w	r3, r3, r3
 8021af0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    equiv_num_iter = equiv_num_iter * equiv_num_iter;
 8021af4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8021af8:	fb03 f303 	mul.w	r3, r3, r3
 8021afc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

    while (!found && ctr < equiv_num_iter) {
 8021b00:	e0d0      	b.n	8021ca4 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x2a0>
        ctr++;
 8021b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8021b06:	3301      	adds	r3, #1
 8021b08:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        // we select our linear combination at random
        ibz_rand_interval_minm_m(&new_alpha.coord[0], equiv_bound_coeff);
 8021b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021b10:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8021b14:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8021b18:	320c      	adds	r2, #12
 8021b1a:	6819      	ldr	r1, [r3, #0]
 8021b1c:	4610      	mov	r0, r2
 8021b1e:	f7fb fceb 	bl	801d4f8 <sqisign_gen_ibz_rand_interval_minm_m>
        ibz_rand_interval_minm_m(&new_alpha.coord[1], equiv_bound_coeff);
 8021b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021b26:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8021b2a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8021b2e:	3218      	adds	r2, #24
 8021b30:	6819      	ldr	r1, [r3, #0]
 8021b32:	4610      	mov	r0, r2
 8021b34:	f7fb fce0 	bl	801d4f8 <sqisign_gen_ibz_rand_interval_minm_m>
        ibz_rand_interval_minm_m(&new_alpha.coord[2], equiv_bound_coeff);
 8021b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021b3c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8021b40:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8021b44:	3224      	adds	r2, #36	@ 0x24
 8021b46:	6819      	ldr	r1, [r3, #0]
 8021b48:	4610      	mov	r0, r2
 8021b4a:	f7fb fcd5 	bl	801d4f8 <sqisign_gen_ibz_rand_interval_minm_m>
        ibz_rand_interval_minm_m(&new_alpha.coord[3], equiv_bound_coeff);
 8021b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021b52:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8021b56:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8021b5a:	3230      	adds	r2, #48	@ 0x30
 8021b5c:	6819      	ldr	r1, [r3, #0]
 8021b5e:	4610      	mov	r0, r2
 8021b60:	f7fb fcca 	bl	801d4f8 <sqisign_gen_ibz_rand_interval_minm_m>

        // computation of the norm of the vector sampled
        quat_qf_eval(&tmp, &gram, &new_alpha.coord);
 8021b64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021b68:	f103 020c 	add.w	r2, r3, #12
 8021b6c:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 8021b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8021b74:	4618      	mov	r0, r3
 8021b76:	f7e9 fb72 	bl	800b25e <sqisign_gen_quat_qf_eval>

        // compute the norm of the equivalent ideal
        // can be improved by removing the power of two first and the odd part only if the trial
        // division failed (this should always be called on an ideal of norm 2^x * N for some
        // big prime N )
        ibz_div(&tmp, &remainder, &tmp, &adjusted_norm);
 8021b7a:	f107 0314 	add.w	r3, r7, #20
 8021b7e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8021b82:	f107 0120 	add.w	r1, r7, #32
 8021b86:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8021b8a:	f7fb fa99 	bl	801d0c0 <sqisign_gen_ibz_div>

        // debug : check that the remainder is zero
        assert(ibz_is_zero(&remainder));
 8021b8e:	f107 0320 	add.w	r3, r7, #32
 8021b92:	4618      	mov	r0, r3
 8021b94:	f7fb fb1b 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 8021b98:	4603      	mov	r3, r0
 8021b9a:	2b00      	cmp	r3, #0
 8021b9c:	d105      	bne.n	8021baa <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x1a6>
 8021b9e:	4b61      	ldr	r3, [pc, #388]	@ (8021d24 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x320>)
 8021ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8021d1c <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x318>)
 8021ba2:	2161      	movs	r1, #97	@ 0x61
 8021ba4:	485e      	ldr	r0, [pc, #376]	@ (8021d20 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x31c>)
 8021ba6:	f013 fb47 	bl	8035238 <__assert_func>

        // pseudo-primality test
        if (ibz_probab_prime(&tmp, primality_num_iter)) {
 8021baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021bae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8021bb2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8021bb6:	6819      	ldr	r1, [r3, #0]
 8021bb8:	4610      	mov	r0, r2
 8021bba:	f7fb fd0a 	bl	801d5d2 <sqisign_gen_ibz_probab_prime>
 8021bbe:	4603      	mov	r3, r0
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	d06f      	beq.n	8021ca4 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x2a0>

            // computes the generator using a matrix multiplication
            ibz_mat_4x4_eval(&new_alpha.coord, &red, &new_alpha.coord);
 8021bc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021bc8:	f103 020c 	add.w	r2, r3, #12
 8021bcc:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8021bd0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021bd4:	330c      	adds	r3, #12
 8021bd6:	4618      	mov	r0, r3
 8021bd8:	f7e9 fa77 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
            ibz_copy(&new_alpha.denom, &lideal->lattice.denom);
 8021bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021be0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8021be4:	681a      	ldr	r2, [r3, #0]
 8021be6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021bea:	4611      	mov	r1, r2
 8021bec:	4618      	mov	r0, r3
 8021bee:	f7fb fb45 	bl	801d27c <sqisign_gen_ibz_copy>
            assert(quat_lattice_contains(NULL, &lideal->lattice, &new_alpha));
 8021bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021bf6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8021c00:	4619      	mov	r1, r3
 8021c02:	2000      	movs	r0, #0
 8021c04:	f7ff fb70 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8021c08:	4603      	mov	r3, r0
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d105      	bne.n	8021c1a <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x216>
 8021c0e:	4b46      	ldr	r3, [pc, #280]	@ (8021d28 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x324>)
 8021c10:	4a42      	ldr	r2, [pc, #264]	@ (8021d1c <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x318>)
 8021c12:	2169      	movs	r1, #105	@ 0x69
 8021c14:	4842      	ldr	r0, [pc, #264]	@ (8021d20 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x31c>)
 8021c16:	f013 fb0f 	bl	8035238 <__assert_func>

            quat_alg_conj(&new_alpha, &new_alpha);
 8021c1a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8021c1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021c22:	4611      	mov	r1, r2
 8021c24:	4618      	mov	r0, r3
 8021c26:	f7df fcb4 	bl	8001592 <sqisign_gen_quat_alg_conj>
            ibz_mul(&new_alpha.denom, &new_alpha.denom, &lideal->norm);
 8021c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021c2e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8021c32:	681b      	ldr	r3, [r3, #0]
 8021c34:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8021c38:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8021c3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021c40:	4618      	mov	r0, r3
 8021c42:	f7fb fa14 	bl	801d06e <sqisign_gen_ibz_mul>
            quat_lideal_mul(lideal, lideal, &new_alpha, alg);
 8021c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021c4a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8021c4e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8021c52:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8021c56:	f5a1 71fa 	sub.w	r1, r1, #500	@ 0x1f4
 8021c5a:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8021c5e:	f5a0 70fa 	sub.w	r0, r0, #500	@ 0x1f4
 8021c62:	681b      	ldr	r3, [r3, #0]
 8021c64:	6809      	ldr	r1, [r1, #0]
 8021c66:	6800      	ldr	r0, [r0, #0]
 8021c68:	f7fa fe74 	bl	801c954 <sqisign_gen_quat_lideal_mul>
            assert(ibz_probab_prime(&lideal->norm, primality_num_iter));
 8021c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021c70:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8021c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8021c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8021c82:	6819      	ldr	r1, [r3, #0]
 8021c84:	4610      	mov	r0, r2
 8021c86:	f7fb fca4 	bl	801d5d2 <sqisign_gen_ibz_probab_prime>
 8021c8a:	4603      	mov	r3, r0
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d105      	bne.n	8021c9c <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x298>
 8021c90:	4b26      	ldr	r3, [pc, #152]	@ (8021d2c <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x328>)
 8021c92:	4a22      	ldr	r2, [pc, #136]	@ (8021d1c <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x318>)
 8021c94:	216e      	movs	r1, #110	@ 0x6e
 8021c96:	4822      	ldr	r0, [pc, #136]	@ (8021d20 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x31c>)
 8021c98:	f013 face 	bl	8035238 <__assert_func>

            found = 1;
 8021c9c:	2301      	movs	r3, #1
 8021c9e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
            break;
 8021ca2:	e00a      	b.n	8021cba <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x2b6>
    while (!found && ctr < equiv_num_iter) {
 8021ca4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	d106      	bne.n	8021cba <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x2b6>
 8021cac:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8021cb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8021cb4:	429a      	cmp	r2, r3
 8021cb6:	f6ff af24 	blt.w	8021b02 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0xfe>
        }
    }
    assert(found);
 8021cba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	d105      	bne.n	8021cce <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x2ca>
 8021cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8021d30 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x32c>)
 8021cc4:	4a15      	ldr	r2, [pc, #84]	@ (8021d1c <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x318>)
 8021cc6:	2174      	movs	r1, #116	@ 0x74
 8021cc8:	4815      	ldr	r0, [pc, #84]	@ (8021d20 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent+0x31c>)
 8021cca:	f013 fab5 	bl	8035238 <__assert_func>

    ibz_finalize(&tmp);
 8021cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	f7fb f9a2 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&remainder);
 8021cd8:	f107 0320 	add.w	r3, r7, #32
 8021cdc:	4618      	mov	r0, r3
 8021cde:	f7fb f99d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&adjusted_norm);
 8021ce2:	f107 0314 	add.w	r3, r7, #20
 8021ce6:	4618      	mov	r0, r3
 8021ce8:	f7fb f998 	bl	801d01c <sqisign_gen_ibz_finalize>
    quat_alg_elem_finalize(&new_alpha);
 8021cec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8021cf0:	4618      	mov	r0, r3
 8021cf2:	f7ed f85b 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>

    ibz_mat_4x4_finalize(&gram);
 8021cf6:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8021cfa:	4618      	mov	r0, r3
 8021cfc:	f7ed f945 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>
    ibz_mat_4x4_finalize(&red);
 8021d00:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8021d04:	4618      	mov	r0, r3
 8021d06:	f7ed f940 	bl	800ef8a <sqisign_gen_ibz_mat_4x4_finalize>

    return found;
 8021d0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
}
 8021d0e:	4618      	mov	r0, r3
 8021d10:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 8021d14:	46bd      	mov	sp, r7
 8021d16:	bd90      	pop	{r4, r7, pc}
 8021d18:	080381d8 	.word	0x080381d8
 8021d1c:	0803bc14 	.word	0x0803bc14
 8021d20:	080381b8 	.word	0x080381b8
 8021d24:	080381f8 	.word	0x080381f8
 8021d28:	08038210 	.word	0x08038210
 8021d2c:	0803824c 	.word	0x0803824c
 8021d30:	08038280 	.word	0x08038280

08021d34 <SDRAM_Clear>:
/* USER CODE BEGIN PV */
#define SDRAM_BASE_ADDR   ((uint32_t)0xD0000000)
#define SDRAM_SIZE_BYTES  (8 * 1024 * 1024) // 8 Mo

void SDRAM_Clear(void)
{
 8021d34:	b480      	push	{r7}
 8021d36:	b083      	sub	sp, #12
 8021d38:	af00      	add	r7, sp, #0
    uint32_t *p = (uint32_t *)SDRAM_BASE_ADDR;
 8021d3a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8021d3e:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < SDRAM_SIZE_BYTES / 4; ++i)
 8021d40:	2300      	movs	r3, #0
 8021d42:	607b      	str	r3, [r7, #4]
 8021d44:	e008      	b.n	8021d58 <SDRAM_Clear+0x24>
    {
        p[i] = 0;
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	009b      	lsls	r3, r3, #2
 8021d4a:	683a      	ldr	r2, [r7, #0]
 8021d4c:	4413      	add	r3, r2
 8021d4e:	2200      	movs	r2, #0
 8021d50:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < SDRAM_SIZE_BYTES / 4; ++i)
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	3301      	adds	r3, #1
 8021d56:	607b      	str	r3, [r7, #4]
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8021d5e:	d3f2      	bcc.n	8021d46 <SDRAM_Clear+0x12>
    }
}
 8021d60:	bf00      	nop
 8021d62:	bf00      	nop
 8021d64:	370c      	adds	r7, #12
 8021d66:	46bd      	mov	sp, r7
 8021d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d6c:	4770      	bx	lr
	...

08021d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021d70:	b580      	push	{r7, lr}
 8021d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8021d74:	f010 fb7c 	bl	8032470 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8021d78:	f000 f81e 	bl	8021db8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8021d7c:	f000 f990 	bl	80220a0 <MX_GPIO_Init>
  //MX_FMC_Init();
  BSP_SDRAM_Init();
 8021d80:	f010 f9ac 	bl	80320dc <BSP_SDRAM_Init>
  MX_TIM1_Init();
 8021d84:	f000 f912 	bl	8021fac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8021d88:	f000 f960 	bl	802204c <MX_USART1_UART_Init>
  MX_RNG_Init();
 8021d8c:	f000 f8c4 	bl	8021f18 <MX_RNG_Init>
  MX_I2C3_Init();
 8021d90:	f000 f882 	bl	8021e98 <MX_I2C3_Init>
  MX_SPI5_Init();
 8021d94:	f000 f8d4 	bl	8021f40 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_Clear();
 8021d98:	f7ff ffcc 	bl	8021d34 <SDRAM_Clear>
  __asm volatile (
 8021d9c:	4b04      	ldr	r3, [pc, #16]	@ (8021db0 <main+0x40>)
 8021d9e:	f383 8808 	msr	MSP, r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("START \n");
 8021da2:	4804      	ldr	r0, [pc, #16]	@ (8021db4 <main+0x44>)
 8021da4:	f013 fe32 	bl	8035a0c <puts>
	  example_sqisign();
 8021da8:	f7ec fe98 	bl	800eadc <example_sqisign>
	  printf("START \n");
 8021dac:	bf00      	nop
 8021dae:	e7f8      	b.n	8021da2 <main+0x32>
 8021db0:	d0800000 	.word	0xd0800000
 8021db4:	08038288 	.word	0x08038288

08021db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8021db8:	b580      	push	{r7, lr}
 8021dba:	b094      	sub	sp, #80	@ 0x50
 8021dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021dbe:	f107 0320 	add.w	r3, r7, #32
 8021dc2:	2230      	movs	r2, #48	@ 0x30
 8021dc4:	2100      	movs	r1, #0
 8021dc6:	4618      	mov	r0, r3
 8021dc8:	f013 ff1a 	bl	8035c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021dcc:	f107 030c 	add.w	r3, r7, #12
 8021dd0:	2200      	movs	r2, #0
 8021dd2:	601a      	str	r2, [r3, #0]
 8021dd4:	605a      	str	r2, [r3, #4]
 8021dd6:	609a      	str	r2, [r3, #8]
 8021dd8:	60da      	str	r2, [r3, #12]
 8021dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8021ddc:	2300      	movs	r3, #0
 8021dde:	60bb      	str	r3, [r7, #8]
 8021de0:	4b2b      	ldr	r3, [pc, #172]	@ (8021e90 <SystemClock_Config+0xd8>)
 8021de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021de4:	4a2a      	ldr	r2, [pc, #168]	@ (8021e90 <SystemClock_Config+0xd8>)
 8021de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8021dec:	4b28      	ldr	r3, [pc, #160]	@ (8021e90 <SystemClock_Config+0xd8>)
 8021dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021df4:	60bb      	str	r3, [r7, #8]
 8021df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8021df8:	2300      	movs	r3, #0
 8021dfa:	607b      	str	r3, [r7, #4]
 8021dfc:	4b25      	ldr	r3, [pc, #148]	@ (8021e94 <SystemClock_Config+0xdc>)
 8021dfe:	681b      	ldr	r3, [r3, #0]
 8021e00:	4a24      	ldr	r2, [pc, #144]	@ (8021e94 <SystemClock_Config+0xdc>)
 8021e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8021e06:	6013      	str	r3, [r2, #0]
 8021e08:	4b22      	ldr	r3, [pc, #136]	@ (8021e94 <SystemClock_Config+0xdc>)
 8021e0a:	681b      	ldr	r3, [r3, #0]
 8021e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8021e10:	607b      	str	r3, [r7, #4]
 8021e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8021e14:	2301      	movs	r3, #1
 8021e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8021e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8021e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021e1e:	2302      	movs	r3, #2
 8021e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8021e22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8021e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8021e28:	2304      	movs	r3, #4
 8021e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8021e2c:	23b4      	movs	r3, #180	@ 0xb4
 8021e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021e30:	2302      	movs	r3, #2
 8021e32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8021e34:	2308      	movs	r3, #8
 8021e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021e38:	f107 0320 	add.w	r3, r7, #32
 8021e3c:	4618      	mov	r0, r3
 8021e3e:	f011 f9f3 	bl	8033228 <HAL_RCC_OscConfig>
 8021e42:	4603      	mov	r3, r0
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d001      	beq.n	8021e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8021e48:	f000 fb10 	bl	802246c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8021e4c:	f011 f99c 	bl	8033188 <HAL_PWREx_EnableOverDrive>
 8021e50:	4603      	mov	r3, r0
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d001      	beq.n	8021e5a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8021e56:	f000 fb09 	bl	802246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021e5a:	230f      	movs	r3, #15
 8021e5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021e5e:	2302      	movs	r3, #2
 8021e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021e62:	2300      	movs	r3, #0
 8021e64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8021e66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8021e6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8021e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021e70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021e72:	f107 030c 	add.w	r3, r7, #12
 8021e76:	2105      	movs	r1, #5
 8021e78:	4618      	mov	r0, r3
 8021e7a:	f011 fc4d 	bl	8033718 <HAL_RCC_ClockConfig>
 8021e7e:	4603      	mov	r3, r0
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d001      	beq.n	8021e88 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8021e84:	f000 faf2 	bl	802246c <Error_Handler>
  }
}
 8021e88:	bf00      	nop
 8021e8a:	3750      	adds	r7, #80	@ 0x50
 8021e8c:	46bd      	mov	sp, r7
 8021e8e:	bd80      	pop	{r7, pc}
 8021e90:	40023800 	.word	0x40023800
 8021e94:	40007000 	.word	0x40007000

08021e98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8021e98:	b580      	push	{r7, lr}
 8021e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8021e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8021f10 <MX_I2C3_Init+0x78>)
 8021ea0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8021ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8021f14 <MX_I2C3_Init+0x7c>)
 8021ea6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8021ea8:	4b18      	ldr	r3, [pc, #96]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021eaa:	2200      	movs	r2, #0
 8021eac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8021eae:	4b17      	ldr	r3, [pc, #92]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021eb0:	2200      	movs	r2, #0
 8021eb2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021eb4:	4b15      	ldr	r3, [pc, #84]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021eb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8021eba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021ebc:	4b13      	ldr	r3, [pc, #76]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021ebe:	2200      	movs	r2, #0
 8021ec0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8021ec2:	4b12      	ldr	r3, [pc, #72]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021ec4:	2200      	movs	r2, #0
 8021ec6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021ec8:	4b10      	ldr	r3, [pc, #64]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021eca:	2200      	movs	r2, #0
 8021ecc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021ece:	4b0f      	ldr	r3, [pc, #60]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021ed0:	2200      	movs	r2, #0
 8021ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8021ed4:	480d      	ldr	r0, [pc, #52]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021ed6:	f010 ff97 	bl	8032e08 <HAL_I2C_Init>
 8021eda:	4603      	mov	r3, r0
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	d001      	beq.n	8021ee4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8021ee0:	f000 fac4 	bl	802246c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8021ee4:	2100      	movs	r1, #0
 8021ee6:	4809      	ldr	r0, [pc, #36]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021ee8:	f011 f8d2 	bl	8033090 <HAL_I2CEx_ConfigAnalogFilter>
 8021eec:	4603      	mov	r3, r0
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	d001      	beq.n	8021ef6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8021ef2:	f000 fabb 	bl	802246c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8021ef6:	2100      	movs	r1, #0
 8021ef8:	4804      	ldr	r0, [pc, #16]	@ (8021f0c <MX_I2C3_Init+0x74>)
 8021efa:	f011 f905 	bl	8033108 <HAL_I2CEx_ConfigDigitalFilter>
 8021efe:	4603      	mov	r3, r0
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d001      	beq.n	8021f08 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8021f04:	f000 fab2 	bl	802246c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8021f08:	bf00      	nop
 8021f0a:	bd80      	pop	{r7, pc}
 8021f0c:	20001d30 	.word	0x20001d30
 8021f10:	40005c00 	.word	0x40005c00
 8021f14:	000186a0 	.word	0x000186a0

08021f18 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8021f18:	b580      	push	{r7, lr}
 8021f1a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8021f1c:	4b06      	ldr	r3, [pc, #24]	@ (8021f38 <MX_RNG_Init+0x20>)
 8021f1e:	4a07      	ldr	r2, [pc, #28]	@ (8021f3c <MX_RNG_Init+0x24>)
 8021f20:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8021f22:	4805      	ldr	r0, [pc, #20]	@ (8021f38 <MX_RNG_Init+0x20>)
 8021f24:	f011 fe4a 	bl	8033bbc <HAL_RNG_Init>
 8021f28:	4603      	mov	r3, r0
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d001      	beq.n	8021f32 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8021f2e:	f000 fa9d 	bl	802246c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8021f32:	bf00      	nop
 8021f34:	bd80      	pop	{r7, pc}
 8021f36:	bf00      	nop
 8021f38:	20001d84 	.word	0x20001d84
 8021f3c:	50060800 	.word	0x50060800

08021f40 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8021f40:	b580      	push	{r7, lr}
 8021f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8021f44:	4b17      	ldr	r3, [pc, #92]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f46:	4a18      	ldr	r2, [pc, #96]	@ (8021fa8 <MX_SPI5_Init+0x68>)
 8021f48:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8021f4a:	4b16      	ldr	r3, [pc, #88]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8021f50:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8021f52:	4b14      	ldr	r3, [pc, #80]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f54:	2200      	movs	r2, #0
 8021f56:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8021f58:	4b12      	ldr	r3, [pc, #72]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f5a:	2200      	movs	r2, #0
 8021f5c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8021f5e:	4b11      	ldr	r3, [pc, #68]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f60:	2200      	movs	r2, #0
 8021f62:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021f64:	4b0f      	ldr	r3, [pc, #60]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f66:	2200      	movs	r2, #0
 8021f68:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8021f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8021f70:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8021f72:	4b0c      	ldr	r3, [pc, #48]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f74:	2200      	movs	r2, #0
 8021f76:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8021f78:	4b0a      	ldr	r3, [pc, #40]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f7a:	2200      	movs	r2, #0
 8021f7c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8021f7e:	4b09      	ldr	r3, [pc, #36]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f80:	2200      	movs	r2, #0
 8021f82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021f84:	4b07      	ldr	r3, [pc, #28]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f86:	2200      	movs	r2, #0
 8021f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8021f8a:	4b06      	ldr	r3, [pc, #24]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f8c:	220a      	movs	r2, #10
 8021f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8021f90:	4804      	ldr	r0, [pc, #16]	@ (8021fa4 <MX_SPI5_Init+0x64>)
 8021f92:	f011 ff24 	bl	8033dde <HAL_SPI_Init>
 8021f96:	4603      	mov	r3, r0
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	d001      	beq.n	8021fa0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8021f9c:	f000 fa66 	bl	802246c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8021fa0:	bf00      	nop
 8021fa2:	bd80      	pop	{r7, pc}
 8021fa4:	20001d94 	.word	0x20001d94
 8021fa8:	40015000 	.word	0x40015000

08021fac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8021fac:	b580      	push	{r7, lr}
 8021fae:	b086      	sub	sp, #24
 8021fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021fb2:	f107 0308 	add.w	r3, r7, #8
 8021fb6:	2200      	movs	r2, #0
 8021fb8:	601a      	str	r2, [r3, #0]
 8021fba:	605a      	str	r2, [r3, #4]
 8021fbc:	609a      	str	r2, [r3, #8]
 8021fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021fc0:	463b      	mov	r3, r7
 8021fc2:	2200      	movs	r2, #0
 8021fc4:	601a      	str	r2, [r3, #0]
 8021fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021fca:	4a1f      	ldr	r2, [pc, #124]	@ (8022048 <MX_TIM1_Init+0x9c>)
 8021fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8021fce:	4b1d      	ldr	r3, [pc, #116]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021fd0:	2200      	movs	r2, #0
 8021fd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021fd6:	2200      	movs	r2, #0
 8021fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8021fda:	4b1a      	ldr	r3, [pc, #104]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021fe2:	4b18      	ldr	r3, [pc, #96]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021fe4:	2200      	movs	r2, #0
 8021fe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021fe8:	4b16      	ldr	r3, [pc, #88]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021fea:	2200      	movs	r2, #0
 8021fec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021fee:	4b15      	ldr	r3, [pc, #84]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021ff0:	2200      	movs	r2, #0
 8021ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8021ff4:	4813      	ldr	r0, [pc, #76]	@ (8022044 <MX_TIM1_Init+0x98>)
 8021ff6:	f011 ff7b 	bl	8033ef0 <HAL_TIM_Base_Init>
 8021ffa:	4603      	mov	r3, r0
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d001      	beq.n	8022004 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8022000:	f000 fa34 	bl	802246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8022004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 802200a:	f107 0308 	add.w	r3, r7, #8
 802200e:	4619      	mov	r1, r3
 8022010:	480c      	ldr	r0, [pc, #48]	@ (8022044 <MX_TIM1_Init+0x98>)
 8022012:	f012 f91d 	bl	8034250 <HAL_TIM_ConfigClockSource>
 8022016:	4603      	mov	r3, r0
 8022018:	2b00      	cmp	r3, #0
 802201a:	d001      	beq.n	8022020 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 802201c:	f000 fa26 	bl	802246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022020:	2300      	movs	r3, #0
 8022022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022024:	2300      	movs	r3, #0
 8022026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8022028:	463b      	mov	r3, r7
 802202a:	4619      	mov	r1, r3
 802202c:	4805      	ldr	r0, [pc, #20]	@ (8022044 <MX_TIM1_Init+0x98>)
 802202e:	f012 fb45 	bl	80346bc <HAL_TIMEx_MasterConfigSynchronization>
 8022032:	4603      	mov	r3, r0
 8022034:	2b00      	cmp	r3, #0
 8022036:	d001      	beq.n	802203c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8022038:	f000 fa18 	bl	802246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 802203c:	bf00      	nop
 802203e:	3718      	adds	r7, #24
 8022040:	46bd      	mov	sp, r7
 8022042:	bd80      	pop	{r7, pc}
 8022044:	20001dec 	.word	0x20001dec
 8022048:	40010000 	.word	0x40010000

0802204c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 802204c:	b580      	push	{r7, lr}
 802204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8022050:	4b11      	ldr	r3, [pc, #68]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 8022052:	4a12      	ldr	r2, [pc, #72]	@ (802209c <MX_USART1_UART_Init+0x50>)
 8022054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8022056:	4b10      	ldr	r3, [pc, #64]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 8022058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 802205c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 802205e:	4b0e      	ldr	r3, [pc, #56]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 8022060:	2200      	movs	r2, #0
 8022062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8022064:	4b0c      	ldr	r3, [pc, #48]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 8022066:	2200      	movs	r2, #0
 8022068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 802206a:	4b0b      	ldr	r3, [pc, #44]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 802206c:	2200      	movs	r2, #0
 802206e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8022070:	4b09      	ldr	r3, [pc, #36]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 8022072:	220c      	movs	r2, #12
 8022074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8022076:	4b08      	ldr	r3, [pc, #32]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 8022078:	2200      	movs	r2, #0
 802207a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 802207c:	4b06      	ldr	r3, [pc, #24]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 802207e:	2200      	movs	r2, #0
 8022080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8022082:	4805      	ldr	r0, [pc, #20]	@ (8022098 <MX_USART1_UART_Init+0x4c>)
 8022084:	f012 fbaa 	bl	80347dc <HAL_UART_Init>
 8022088:	4603      	mov	r3, r0
 802208a:	2b00      	cmp	r3, #0
 802208c:	d001      	beq.n	8022092 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 802208e:	f000 f9ed 	bl	802246c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8022092:	bf00      	nop
 8022094:	bd80      	pop	{r7, pc}
 8022096:	bf00      	nop
 8022098:	20001e34 	.word	0x20001e34
 802209c:	40011000 	.word	0x40011000

080220a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80220a0:	b580      	push	{r7, lr}
 80220a2:	b08e      	sub	sp, #56	@ 0x38
 80220a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80220a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80220aa:	2200      	movs	r2, #0
 80220ac:	601a      	str	r2, [r3, #0]
 80220ae:	605a      	str	r2, [r3, #4]
 80220b0:	609a      	str	r2, [r3, #8]
 80220b2:	60da      	str	r2, [r3, #12]
 80220b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80220b6:	2300      	movs	r3, #0
 80220b8:	623b      	str	r3, [r7, #32]
 80220ba:	4bb2      	ldr	r3, [pc, #712]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220be:	4ab1      	ldr	r2, [pc, #708]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220c0:	f043 0304 	orr.w	r3, r3, #4
 80220c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80220c6:	4baf      	ldr	r3, [pc, #700]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220ca:	f003 0304 	and.w	r3, r3, #4
 80220ce:	623b      	str	r3, [r7, #32]
 80220d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80220d2:	2300      	movs	r3, #0
 80220d4:	61fb      	str	r3, [r7, #28]
 80220d6:	4bab      	ldr	r3, [pc, #684]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220da:	4aaa      	ldr	r2, [pc, #680]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220dc:	f043 0320 	orr.w	r3, r3, #32
 80220e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80220e2:	4ba8      	ldr	r3, [pc, #672]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220e6:	f003 0320 	and.w	r3, r3, #32
 80220ea:	61fb      	str	r3, [r7, #28]
 80220ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80220ee:	2300      	movs	r3, #0
 80220f0:	61bb      	str	r3, [r7, #24]
 80220f2:	4ba4      	ldr	r3, [pc, #656]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220f6:	4aa3      	ldr	r2, [pc, #652]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 80220f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80220fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80220fe:	4ba1      	ldr	r3, [pc, #644]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022106:	61bb      	str	r3, [r7, #24]
 8022108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802210a:	2300      	movs	r3, #0
 802210c:	617b      	str	r3, [r7, #20]
 802210e:	4b9d      	ldr	r3, [pc, #628]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022112:	4a9c      	ldr	r2, [pc, #624]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022114:	f043 0301 	orr.w	r3, r3, #1
 8022118:	6313      	str	r3, [r2, #48]	@ 0x30
 802211a:	4b9a      	ldr	r3, [pc, #616]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 802211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802211e:	f003 0301 	and.w	r3, r3, #1
 8022122:	617b      	str	r3, [r7, #20]
 8022124:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022126:	2300      	movs	r3, #0
 8022128:	613b      	str	r3, [r7, #16]
 802212a:	4b96      	ldr	r3, [pc, #600]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 802212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802212e:	4a95      	ldr	r2, [pc, #596]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022130:	f043 0302 	orr.w	r3, r3, #2
 8022134:	6313      	str	r3, [r2, #48]	@ 0x30
 8022136:	4b93      	ldr	r3, [pc, #588]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802213a:	f003 0302 	and.w	r3, r3, #2
 802213e:	613b      	str	r3, [r7, #16]
 8022140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022142:	2300      	movs	r3, #0
 8022144:	60fb      	str	r3, [r7, #12]
 8022146:	4b8f      	ldr	r3, [pc, #572]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802214a:	4a8e      	ldr	r2, [pc, #568]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 802214c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022150:	6313      	str	r3, [r2, #48]	@ 0x30
 8022152:	4b8c      	ldr	r3, [pc, #560]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802215a:	60fb      	str	r3, [r7, #12]
 802215c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802215e:	2300      	movs	r3, #0
 8022160:	60bb      	str	r3, [r7, #8]
 8022162:	4b88      	ldr	r3, [pc, #544]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022166:	4a87      	ldr	r2, [pc, #540]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022168:	f043 0310 	orr.w	r3, r3, #16
 802216c:	6313      	str	r3, [r2, #48]	@ 0x30
 802216e:	4b85      	ldr	r3, [pc, #532]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022172:	f003 0310 	and.w	r3, r3, #16
 8022176:	60bb      	str	r3, [r7, #8]
 8022178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802217a:	2300      	movs	r3, #0
 802217c:	607b      	str	r3, [r7, #4]
 802217e:	4b81      	ldr	r3, [pc, #516]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022182:	4a80      	ldr	r2, [pc, #512]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 8022184:	f043 0308 	orr.w	r3, r3, #8
 8022188:	6313      	str	r3, [r2, #48]	@ 0x30
 802218a:	4b7e      	ldr	r3, [pc, #504]	@ (8022384 <MX_GPIO_Init+0x2e4>)
 802218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802218e:	f003 0308 	and.w	r3, r3, #8
 8022192:	607b      	str	r3, [r7, #4]
 8022194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8022196:	2200      	movs	r2, #0
 8022198:	2116      	movs	r1, #22
 802219a:	487b      	ldr	r0, [pc, #492]	@ (8022388 <MX_GPIO_Init+0x2e8>)
 802219c:	f010 fe1a 	bl	8032dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80221a0:	2200      	movs	r2, #0
 80221a2:	2180      	movs	r1, #128	@ 0x80
 80221a4:	4879      	ldr	r0, [pc, #484]	@ (802238c <MX_GPIO_Init+0x2ec>)
 80221a6:	f010 fe15 	bl	8032dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80221aa:	2200      	movs	r2, #0
 80221ac:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80221b0:	4877      	ldr	r0, [pc, #476]	@ (8022390 <MX_GPIO_Init+0x2f0>)
 80221b2:	f010 fe0f 	bl	8032dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80221b6:	2200      	movs	r2, #0
 80221b8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80221bc:	4875      	ldr	r0, [pc, #468]	@ (8022394 <MX_GPIO_Init+0x2f4>)
 80221be:	f010 fe09 	bl	8032dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80221c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80221c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80221c8:	2302      	movs	r3, #2
 80221ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80221cc:	2300      	movs	r3, #0
 80221ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80221d0:	2300      	movs	r3, #0
 80221d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80221d4:	230e      	movs	r3, #14
 80221d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80221d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80221dc:	4619      	mov	r1, r3
 80221de:	486e      	ldr	r0, [pc, #440]	@ (8022398 <MX_GPIO_Init+0x2f8>)
 80221e0:	f010 fc4c 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80221e4:	2316      	movs	r3, #22
 80221e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80221e8:	2301      	movs	r3, #1
 80221ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80221ec:	2300      	movs	r3, #0
 80221ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80221f0:	2300      	movs	r3, #0
 80221f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80221f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80221f8:	4619      	mov	r1, r3
 80221fa:	4863      	ldr	r0, [pc, #396]	@ (8022388 <MX_GPIO_Init+0x2e8>)
 80221fc:	f010 fc3e 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8022200:	f248 0307 	movw	r3, #32775	@ 0x8007
 8022204:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8022206:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 802220a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802220c:	2300      	movs	r3, #0
 802220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022214:	4619      	mov	r1, r3
 8022216:	485d      	ldr	r0, [pc, #372]	@ (802238c <MX_GPIO_Init+0x2ec>)
 8022218:	f010 fc30 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 802221c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8022220:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022222:	2302      	movs	r3, #2
 8022224:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022226:	2300      	movs	r3, #0
 8022228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802222a:	2300      	movs	r3, #0
 802222c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802222e:	230e      	movs	r3, #14
 8022230:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022236:	4619      	mov	r1, r3
 8022238:	4854      	ldr	r0, [pc, #336]	@ (802238c <MX_GPIO_Init+0x2ec>)
 802223a:	f010 fc1f 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 802223e:	2380      	movs	r3, #128	@ 0x80
 8022240:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022242:	2301      	movs	r3, #1
 8022244:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022246:	2300      	movs	r3, #0
 8022248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802224a:	2300      	movs	r3, #0
 802224c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 802224e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022252:	4619      	mov	r1, r3
 8022254:	484d      	ldr	r0, [pc, #308]	@ (802238c <MX_GPIO_Init+0x2ec>)
 8022256:	f010 fc11 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 802225a:	2320      	movs	r3, #32
 802225c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 802225e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8022262:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022264:	2300      	movs	r3, #0
 8022266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8022268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802226c:	4619      	mov	r1, r3
 802226e:	4846      	ldr	r0, [pc, #280]	@ (8022388 <MX_GPIO_Init+0x2e8>)
 8022270:	f010 fc04 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8022274:	2303      	movs	r3, #3
 8022276:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022278:	2302      	movs	r3, #2
 802227a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802227c:	2300      	movs	r3, #0
 802227e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022280:	2300      	movs	r3, #0
 8022282:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8022284:	2309      	movs	r3, #9
 8022286:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802228c:	4619      	mov	r1, r3
 802228e:	4843      	ldr	r0, [pc, #268]	@ (802239c <MX_GPIO_Init+0x2fc>)
 8022290:	f010 fbf4 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8022294:	2304      	movs	r3, #4
 8022296:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022298:	2300      	movs	r3, #0
 802229a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802229c:	2300      	movs	r3, #0
 802229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80222a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80222a4:	4619      	mov	r1, r3
 80222a6:	483d      	ldr	r0, [pc, #244]	@ (802239c <MX_GPIO_Init+0x2fc>)
 80222a8:	f010 fbe8 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80222ac:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80222b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80222b2:	2302      	movs	r3, #2
 80222b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80222b6:	2300      	movs	r3, #0
 80222b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80222ba:	2300      	movs	r3, #0
 80222bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80222be:	230e      	movs	r3, #14
 80222c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80222c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80222c6:	4619      	mov	r1, r3
 80222c8:	4834      	ldr	r0, [pc, #208]	@ (802239c <MX_GPIO_Init+0x2fc>)
 80222ca:	f010 fbd7 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80222ce:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80222d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80222d4:	2302      	movs	r3, #2
 80222d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80222d8:	2300      	movs	r3, #0
 80222da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80222dc:	2300      	movs	r3, #0
 80222de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80222e0:	230c      	movs	r3, #12
 80222e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80222e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80222e8:	4619      	mov	r1, r3
 80222ea:	482c      	ldr	r0, [pc, #176]	@ (802239c <MX_GPIO_Init+0x2fc>)
 80222ec:	f010 fbc6 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80222f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80222f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80222f6:	2300      	movs	r3, #0
 80222f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80222fa:	2300      	movs	r3, #0
 80222fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80222fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022302:	4619      	mov	r1, r3
 8022304:	4825      	ldr	r0, [pc, #148]	@ (802239c <MX_GPIO_Init+0x2fc>)
 8022306:	f010 fbb9 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 802230a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802230e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022310:	2300      	movs	r3, #0
 8022312:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022314:	2300      	movs	r3, #0
 8022316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8022318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802231c:	4619      	mov	r1, r3
 802231e:	481c      	ldr	r0, [pc, #112]	@ (8022390 <MX_GPIO_Init+0x2f0>)
 8022320:	f010 fbac 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8022324:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8022328:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802232a:	2301      	movs	r3, #1
 802232c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802232e:	2300      	movs	r3, #0
 8022330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022332:	2300      	movs	r3, #0
 8022334:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802233a:	4619      	mov	r1, r3
 802233c:	4814      	ldr	r0, [pc, #80]	@ (8022390 <MX_GPIO_Init+0x2f0>)
 802233e:	f010 fb9d 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8022342:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8022346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022348:	2302      	movs	r3, #2
 802234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802234c:	2300      	movs	r3, #0
 802234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022350:	2300      	movs	r3, #0
 8022352:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8022354:	230e      	movs	r3, #14
 8022356:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8022358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802235c:	4619      	mov	r1, r3
 802235e:	480d      	ldr	r0, [pc, #52]	@ (8022394 <MX_GPIO_Init+0x2f4>)
 8022360:	f010 fb8c 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8022364:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8022368:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802236a:	2302      	movs	r3, #2
 802236c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802236e:	2300      	movs	r3, #0
 8022370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022372:	2300      	movs	r3, #0
 8022374:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8022376:	230e      	movs	r3, #14
 8022378:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802237a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802237e:	4619      	mov	r1, r3
 8022380:	e00e      	b.n	80223a0 <MX_GPIO_Init+0x300>
 8022382:	bf00      	nop
 8022384:	40023800 	.word	0x40023800
 8022388:	40020800 	.word	0x40020800
 802238c:	40020000 	.word	0x40020000
 8022390:	40020c00 	.word	0x40020c00
 8022394:	40021800 	.word	0x40021800
 8022398:	40021400 	.word	0x40021400
 802239c:	40020400 	.word	0x40020400
 80223a0:	481b      	ldr	r0, [pc, #108]	@ (8022410 <MX_GPIO_Init+0x370>)
 80223a2:	f010 fb6b 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80223a6:	2348      	movs	r3, #72	@ 0x48
 80223a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80223aa:	2302      	movs	r3, #2
 80223ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80223ae:	2300      	movs	r3, #0
 80223b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80223b2:	2300      	movs	r3, #0
 80223b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80223b6:	230e      	movs	r3, #14
 80223b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80223ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80223be:	4619      	mov	r1, r3
 80223c0:	4814      	ldr	r0, [pc, #80]	@ (8022414 <MX_GPIO_Init+0x374>)
 80223c2:	f010 fb5b 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80223c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80223ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80223cc:	2302      	movs	r3, #2
 80223ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80223d0:	2300      	movs	r3, #0
 80223d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80223d4:	2300      	movs	r3, #0
 80223d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80223d8:	2309      	movs	r3, #9
 80223da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80223dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80223e0:	4619      	mov	r1, r3
 80223e2:	480d      	ldr	r0, [pc, #52]	@ (8022418 <MX_GPIO_Init+0x378>)
 80223e4:	f010 fb4a 	bl	8032a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80223e8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80223ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80223ee:	2301      	movs	r3, #1
 80223f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80223f2:	2300      	movs	r3, #0
 80223f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80223f6:	2300      	movs	r3, #0
 80223f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80223fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80223fe:	4619      	mov	r1, r3
 8022400:	4805      	ldr	r0, [pc, #20]	@ (8022418 <MX_GPIO_Init+0x378>)
 8022402:	f010 fb3b 	bl	8032a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8022406:	bf00      	nop
 8022408:	3738      	adds	r7, #56	@ 0x38
 802240a:	46bd      	mov	sp, r7
 802240c:	bd80      	pop	{r7, pc}
 802240e:	bf00      	nop
 8022410:	40020800 	.word	0x40020800
 8022414:	40020c00 	.word	0x40020c00
 8022418:	40021800 	.word	0x40021800

0802241c <_write>:
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    return ch;
}

int _write(int file, char *ptr, int len)
{
 802241c:	b580      	push	{r7, lr}
 802241e:	b084      	sub	sp, #16
 8022420:	af00      	add	r7, sp, #0
 8022422:	60f8      	str	r0, [r7, #12]
 8022424:	60b9      	str	r1, [r7, #8]
 8022426:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8022428:	687b      	ldr	r3, [r7, #4]
 802242a:	b29a      	uxth	r2, r3
 802242c:	f04f 33ff 	mov.w	r3, #4294967295
 8022430:	68b9      	ldr	r1, [r7, #8]
 8022432:	4804      	ldr	r0, [pc, #16]	@ (8022444 <_write+0x28>)
 8022434:	f012 fa22 	bl	803487c <HAL_UART_Transmit>
    return len;
 8022438:	687b      	ldr	r3, [r7, #4]
}
 802243a:	4618      	mov	r0, r3
 802243c:	3710      	adds	r7, #16
 802243e:	46bd      	mov	sp, r7
 8022440:	bd80      	pop	{r7, pc}
 8022442:	bf00      	nop
 8022444:	20001e34 	.word	0x20001e34

08022448 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022448:	b580      	push	{r7, lr}
 802244a:	b082      	sub	sp, #8
 802244c:	af00      	add	r7, sp, #0
 802244e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	681b      	ldr	r3, [r3, #0]
 8022454:	4a04      	ldr	r2, [pc, #16]	@ (8022468 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8022456:	4293      	cmp	r3, r2
 8022458:	d101      	bne.n	802245e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 802245a:	f010 f82b 	bl	80324b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 802245e:	bf00      	nop
 8022460:	3708      	adds	r7, #8
 8022462:	46bd      	mov	sp, r7
 8022464:	bd80      	pop	{r7, pc}
 8022466:	bf00      	nop
 8022468:	40001000 	.word	0x40001000

0802246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802246c:	b480      	push	{r7}
 802246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8022470:	b672      	cpsid	i
}
 8022472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8022474:	bf00      	nop
 8022476:	e7fd      	b.n	8022474 <Error_Handler+0x8>

08022478 <sqisign_gen_sqisign_secure_free>:
#include <string.h>
#include <stdlib.h>

void
sqisign_secure_free(void *mem, size_t size)
{
 8022478:	b580      	push	{r7, lr}
 802247a:	b082      	sub	sp, #8
 802247c:	af00      	add	r7, sp, #0
 802247e:	6078      	str	r0, [r7, #4]
 8022480:	6039      	str	r1, [r7, #0]
    if (mem) {
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	2b00      	cmp	r3, #0
 8022486:	d008      	beq.n	802249a <sqisign_gen_sqisign_secure_free+0x22>
        typedef void *(*memset_t)(void *, int, size_t);
        static volatile memset_t memset_func = memset;
        memset_func(mem, 0, size);
 8022488:	4b06      	ldr	r3, [pc, #24]	@ (80224a4 <sqisign_gen_sqisign_secure_free+0x2c>)
 802248a:	681b      	ldr	r3, [r3, #0]
 802248c:	683a      	ldr	r2, [r7, #0]
 802248e:	2100      	movs	r1, #0
 8022490:	6878      	ldr	r0, [r7, #4]
 8022492:	4798      	blx	r3
        free(mem);
 8022494:	6878      	ldr	r0, [r7, #4]
 8022496:	f012 ff11 	bl	80352bc <free>
    }
}
 802249a:	bf00      	nop
 802249c:	3708      	adds	r7, #8
 802249e:	46bd      	mov	sp, r7
 80224a0:	bd80      	pop	{r7, pc}
 80224a2:	bf00      	nop
 80224a4:	20001508 	.word	0x20001508

080224a8 <mini_mpz_legendre>:
#include "tutil.h"

// Exported for testing
int
mini_mpz_legendre(const mpz_t a, const mpz_t p)
{
 80224a8:	b580      	push	{r7, lr}
 80224aa:	b086      	sub	sp, #24
 80224ac:	af00      	add	r7, sp, #0
 80224ae:	6078      	str	r0, [r7, #4]
 80224b0:	6039      	str	r1, [r7, #0]
    int res = 0;
 80224b2:	2300      	movs	r3, #0
 80224b4:	617b      	str	r3, [r7, #20]
    mpz_t e;
    mpz_init_set(e, p);
 80224b6:	f107 0308 	add.w	r3, r7, #8
 80224ba:	6839      	ldr	r1, [r7, #0]
 80224bc:	4618      	mov	r0, r3
 80224be:	f002 f90a 	bl	80246d6 <mpz_init_set>
    mpz_sub_ui(e, e, 1);
 80224c2:	f107 0108 	add.w	r1, r7, #8
 80224c6:	f107 0308 	add.w	r3, r7, #8
 80224ca:	2201      	movs	r2, #1
 80224cc:	4618      	mov	r0, r3
 80224ce:	f002 fc6d 	bl	8024dac <mpz_sub_ui>
    mpz_fdiv_q_2exp(e, e, 1);
 80224d2:	f107 0108 	add.w	r1, r7, #8
 80224d6:	f107 0308 	add.w	r3, r7, #8
 80224da:	2201      	movs	r2, #1
 80224dc:	4618      	mov	r0, r3
 80224de:	f003 f91b 	bl	8025718 <mpz_fdiv_q_2exp>
    mpz_powm(e, a, e, p);
 80224e2:	f107 0208 	add.w	r2, r7, #8
 80224e6:	f107 0008 	add.w	r0, r7, #8
 80224ea:	683b      	ldr	r3, [r7, #0]
 80224ec:	6879      	ldr	r1, [r7, #4]
 80224ee:	f003 ffdb 	bl	80264a8 <mpz_powm>

    if (mpz_cmp_ui(e, 1) <= 0) {
 80224f2:	f107 0308 	add.w	r3, r7, #8
 80224f6:	2101      	movs	r1, #1
 80224f8:	4618      	mov	r0, r3
 80224fa:	f002 fb58 	bl	8024bae <mpz_cmp_ui>
 80224fe:	4603      	mov	r3, r0
 8022500:	2b00      	cmp	r3, #0
 8022502:	dc06      	bgt.n	8022512 <mini_mpz_legendre+0x6a>
        res = mpz_get_si(e);
 8022504:	f107 0308 	add.w	r3, r7, #8
 8022508:	4618      	mov	r0, r3
 802250a:	f002 f917 	bl	802473c <mpz_get_si>
 802250e:	6178      	str	r0, [r7, #20]
 8022510:	e002      	b.n	8022518 <mini_mpz_legendre+0x70>
    } else {
        res = -1;
 8022512:	f04f 33ff 	mov.w	r3, #4294967295
 8022516:	617b      	str	r3, [r7, #20]
    }
    mpz_clear(e);
 8022518:	f107 0308 	add.w	r3, r7, #8
 802251c:	4618      	mov	r0, r3
 802251e:	f002 f800 	bl	8024522 <mpz_clear>
    return res;
 8022522:	697b      	ldr	r3, [r7, #20]
}
 8022524:	4618      	mov	r0, r3
 8022526:	3718      	adds	r7, #24
 8022528:	46bd      	mov	sp, r7
 802252a:	bd80      	pop	{r7, pc}

0802252c <mpz_legendre>:

#if defined(MINI_GMP)
int
mpz_legendre(const mpz_t a, const mpz_t p)
{
 802252c:	b580      	push	{r7, lr}
 802252e:	b082      	sub	sp, #8
 8022530:	af00      	add	r7, sp, #0
 8022532:	6078      	str	r0, [r7, #4]
 8022534:	6039      	str	r1, [r7, #0]
    return mini_mpz_legendre(a, p);
 8022536:	6839      	ldr	r1, [r7, #0]
 8022538:	6878      	ldr	r0, [r7, #4]
 802253a:	f7ff ffb5 	bl	80224a8 <mini_mpz_legendre>
 802253e:	4603      	mov	r3, r0
}
 8022540:	4618      	mov	r0, r3
 8022542:	3708      	adds	r7, #8
 8022544:	46bd      	mov	sp, r7
 8022546:	bd80      	pop	{r7, pc}

08022548 <mini_mpz_get_d_2exp>:
#endif

// Exported for testing
double
mini_mpz_get_d_2exp(signed long int *exp, const mpz_t op)
{
 8022548:	b580      	push	{r7, lr}
 802254a:	b088      	sub	sp, #32
 802254c:	af00      	add	r7, sp, #0
 802254e:	6078      	str	r0, [r7, #4]
 8022550:	6039      	str	r1, [r7, #0]
    double ret;
    int tmp_exp;
    mpz_t tmp;

    // Handle the case where op is 0
    if (mpz_cmp_ui(op, 0) == 0) {
 8022552:	2100      	movs	r1, #0
 8022554:	6838      	ldr	r0, [r7, #0]
 8022556:	f002 fb2a 	bl	8024bae <mpz_cmp_ui>
 802255a:	4603      	mov	r3, r0
 802255c:	2b00      	cmp	r3, #0
 802255e:	d107      	bne.n	8022570 <mini_mpz_get_d_2exp+0x28>
        *exp = 0;
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	2200      	movs	r2, #0
 8022564:	601a      	str	r2, [r3, #0]
        return 0.0;
 8022566:	f04f 0200 	mov.w	r2, #0
 802256a:	f04f 0300 	mov.w	r3, #0
 802256e:	e039      	b.n	80225e4 <mini_mpz_get_d_2exp+0x9c>
    }

    *exp = mpz_sizeinbase(op, 2);
 8022570:	2102      	movs	r1, #2
 8022572:	6838      	ldr	r0, [r7, #0]
 8022574:	f004 ffa6 	bl	80274c4 <mpz_sizeinbase>
 8022578:	4603      	mov	r3, r0
 802257a:	461a      	mov	r2, r3
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	601a      	str	r2, [r3, #0]

    mpz_init_set(tmp, op);
 8022580:	f107 0308 	add.w	r3, r7, #8
 8022584:	6839      	ldr	r1, [r7, #0]
 8022586:	4618      	mov	r0, r3
 8022588:	f002 f8a5 	bl	80246d6 <mpz_init_set>

    if (*exp > DBL_MAX_EXP) {
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022594:	dd0b      	ble.n	80225ae <mini_mpz_get_d_2exp+0x66>
        mpz_fdiv_q_2exp(tmp, tmp, *exp - DBL_MAX_EXP);
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	681b      	ldr	r3, [r3, #0]
 802259a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 802259e:	461a      	mov	r2, r3
 80225a0:	f107 0108 	add.w	r1, r7, #8
 80225a4:	f107 0308 	add.w	r3, r7, #8
 80225a8:	4618      	mov	r0, r3
 80225aa:	f003 f8b5 	bl	8025718 <mpz_fdiv_q_2exp>
    }

    ret = frexp(mpz_get_d(tmp), &tmp_exp);
 80225ae:	f107 0308 	add.w	r3, r7, #8
 80225b2:	4618      	mov	r0, r3
 80225b4:	f002 fa3c 	bl	8024a30 <mpz_get_d>
 80225b8:	eeb0 7a40 	vmov.f32	s14, s0
 80225bc:	eef0 7a60 	vmov.f32	s15, s1
 80225c0:	f107 0314 	add.w	r3, r7, #20
 80225c4:	4618      	mov	r0, r3
 80225c6:	eeb0 0a47 	vmov.f32	s0, s14
 80225ca:	eef0 0a67 	vmov.f32	s1, s15
 80225ce:	f013 fc27 	bl	8035e20 <frexp>
 80225d2:	ed87 0b06 	vstr	d0, [r7, #24]
    mpz_clear(tmp);
 80225d6:	f107 0308 	add.w	r3, r7, #8
 80225da:	4618      	mov	r0, r3
 80225dc:	f001 ffa1 	bl	8024522 <mpz_clear>

    return ret;
 80225e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80225e4:	ec43 2b17 	vmov	d7, r2, r3
 80225e8:	eeb0 0a47 	vmov.f32	s0, s14
 80225ec:	eef0 0a67 	vmov.f32	s1, s15
 80225f0:	3720      	adds	r7, #32
 80225f2:	46bd      	mov	sp, r7
 80225f4:	bd80      	pop	{r7, pc}

080225f6 <mpz_get_d_2exp>:

#if defined(MINI_GMP)
double
mpz_get_d_2exp(signed long int *exp, const mpz_t op)
{
 80225f6:	b580      	push	{r7, lr}
 80225f8:	b082      	sub	sp, #8
 80225fa:	af00      	add	r7, sp, #0
 80225fc:	6078      	str	r0, [r7, #4]
 80225fe:	6039      	str	r1, [r7, #0]
    return mini_mpz_get_d_2exp(exp, op);
 8022600:	6839      	ldr	r1, [r7, #0]
 8022602:	6878      	ldr	r0, [r7, #4]
 8022604:	f7ff ffa0 	bl	8022548 <mini_mpz_get_d_2exp>
 8022608:	eeb0 7a40 	vmov.f32	s14, s0
 802260c:	eef0 7a60 	vmov.f32	s15, s1
}
 8022610:	eeb0 0a47 	vmov.f32	s0, s14
 8022614:	eef0 0a67 	vmov.f32	s1, s15
 8022618:	3708      	adds	r7, #8
 802261a:	46bd      	mov	sp, r7
 802261c:	bd80      	pop	{r7, pc}
	...

08022620 <gmp_die>:


/* Memory allocation and other helper functions. */
static void
gmp_die (const char *msg)
{
 8022620:	b580      	push	{r7, lr}
 8022622:	b082      	sub	sp, #8
 8022624:	af00      	add	r7, sp, #0
 8022626:	6078      	str	r0, [r7, #4]
  fprintf (stderr, "%s\n", msg);
 8022628:	4b04      	ldr	r3, [pc, #16]	@ (802263c <gmp_die+0x1c>)
 802262a:	681b      	ldr	r3, [r3, #0]
 802262c:	68db      	ldr	r3, [r3, #12]
 802262e:	687a      	ldr	r2, [r7, #4]
 8022630:	4903      	ldr	r1, [pc, #12]	@ (8022640 <gmp_die+0x20>)
 8022632:	4618      	mov	r0, r3
 8022634:	f013 f952 	bl	80358dc <fiprintf>
  abort();
 8022638:	f012 fdf6 	bl	8035228 <abort>
 802263c:	20001cc0 	.word	0x20001cc0
 8022640:	08038290 	.word	0x08038290

08022644 <gmp_default_alloc>:
}

static void *
gmp_default_alloc (size_t size)
{
 8022644:	b580      	push	{r7, lr}
 8022646:	b084      	sub	sp, #16
 8022648:	af00      	add	r7, sp, #0
 802264a:	6078      	str	r0, [r7, #4]
  void *p;

  assert (size > 0);
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	2b00      	cmp	r3, #0
 8022650:	d106      	bne.n	8022660 <gmp_default_alloc+0x1c>
 8022652:	4b0b      	ldr	r3, [pc, #44]	@ (8022680 <gmp_default_alloc+0x3c>)
 8022654:	4a0b      	ldr	r2, [pc, #44]	@ (8022684 <gmp_default_alloc+0x40>)
 8022656:	f240 1133 	movw	r1, #307	@ 0x133
 802265a:	480b      	ldr	r0, [pc, #44]	@ (8022688 <gmp_default_alloc+0x44>)
 802265c:	f012 fdec 	bl	8035238 <__assert_func>

  p = malloc (size);
 8022660:	6878      	ldr	r0, [r7, #4]
 8022662:	f012 fe23 	bl	80352ac <malloc>
 8022666:	4603      	mov	r3, r0
 8022668:	60fb      	str	r3, [r7, #12]
  if (!p)
 802266a:	68fb      	ldr	r3, [r7, #12]
 802266c:	2b00      	cmp	r3, #0
 802266e:	d102      	bne.n	8022676 <gmp_default_alloc+0x32>
    gmp_die("gmp_default_alloc: Virtual memory exhausted.");
 8022670:	4806      	ldr	r0, [pc, #24]	@ (802268c <gmp_default_alloc+0x48>)
 8022672:	f7ff ffd5 	bl	8022620 <gmp_die>

  return p;
 8022676:	68fb      	ldr	r3, [r7, #12]
}
 8022678:	4618      	mov	r0, r3
 802267a:	3710      	adds	r7, #16
 802267c:	46bd      	mov	sp, r7
 802267e:	bd80      	pop	{r7, pc}
 8022680:	08038294 	.word	0x08038294
 8022684:	0803bc4c 	.word	0x0803bc4c
 8022688:	080382a0 	.word	0x080382a0
 802268c:	080382b8 	.word	0x080382b8

08022690 <gmp_default_realloc>:

static void *
gmp_default_realloc (void *old, size_t unused_old_size, size_t new_size)
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b086      	sub	sp, #24
 8022694:	af00      	add	r7, sp, #0
 8022696:	60f8      	str	r0, [r7, #12]
 8022698:	60b9      	str	r1, [r7, #8]
 802269a:	607a      	str	r2, [r7, #4]
  void * p;

  p = realloc (old, new_size);
 802269c:	6879      	ldr	r1, [r7, #4]
 802269e:	68f8      	ldr	r0, [r7, #12]
 80226a0:	f012 fec2 	bl	8035428 <realloc>
 80226a4:	6178      	str	r0, [r7, #20]

  if (!p)
 80226a6:	697b      	ldr	r3, [r7, #20]
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	d102      	bne.n	80226b2 <gmp_default_realloc+0x22>
    gmp_die("gmp_default_realloc: Virtual memory exhausted.");
 80226ac:	4803      	ldr	r0, [pc, #12]	@ (80226bc <gmp_default_realloc+0x2c>)
 80226ae:	f7ff ffb7 	bl	8022620 <gmp_die>

  return p;
 80226b2:	697b      	ldr	r3, [r7, #20]
}
 80226b4:	4618      	mov	r0, r3
 80226b6:	3718      	adds	r7, #24
 80226b8:	46bd      	mov	sp, r7
 80226ba:	bd80      	pop	{r7, pc}
 80226bc:	080382e8 	.word	0x080382e8

080226c0 <gmp_default_free>:

static void
gmp_default_free (void *p, size_t unused_size)
{
 80226c0:	b580      	push	{r7, lr}
 80226c2:	b082      	sub	sp, #8
 80226c4:	af00      	add	r7, sp, #0
 80226c6:	6078      	str	r0, [r7, #4]
 80226c8:	6039      	str	r1, [r7, #0]
  free (p);
 80226ca:	6878      	ldr	r0, [r7, #4]
 80226cc:	f012 fdf6 	bl	80352bc <free>
}
 80226d0:	bf00      	nop
 80226d2:	3708      	adds	r7, #8
 80226d4:	46bd      	mov	sp, r7
 80226d6:	bd80      	pop	{r7, pc}

080226d8 <gmp_alloc_limbs>:
#define gmp_free(p, size) ((*gmp_free_func) ((p), (size)))
#define gmp_realloc(ptr, old_size, size) ((*gmp_reallocate_func)(ptr, old_size, size))

static mp_ptr
gmp_alloc_limbs (mp_size_t size)
{
 80226d8:	b580      	push	{r7, lr}
 80226da:	b082      	sub	sp, #8
 80226dc:	af00      	add	r7, sp, #0
 80226de:	6078      	str	r0, [r7, #4]
  return (mp_ptr) gmp_alloc (size * sizeof (mp_limb_t));
 80226e0:	4b05      	ldr	r3, [pc, #20]	@ (80226f8 <gmp_alloc_limbs+0x20>)
 80226e2:	681b      	ldr	r3, [r3, #0]
 80226e4:	687a      	ldr	r2, [r7, #4]
 80226e6:	0092      	lsls	r2, r2, #2
 80226e8:	4610      	mov	r0, r2
 80226ea:	4798      	blx	r3
 80226ec:	4603      	mov	r3, r0
}
 80226ee:	4618      	mov	r0, r3
 80226f0:	3708      	adds	r7, #8
 80226f2:	46bd      	mov	sp, r7
 80226f4:	bd80      	pop	{r7, pc}
 80226f6:	bf00      	nop
 80226f8:	2000150c 	.word	0x2000150c

080226fc <gmp_realloc_limbs>:

static mp_ptr
gmp_realloc_limbs (mp_ptr old, mp_size_t old_size, mp_size_t size)
{
 80226fc:	b580      	push	{r7, lr}
 80226fe:	b084      	sub	sp, #16
 8022700:	af00      	add	r7, sp, #0
 8022702:	60f8      	str	r0, [r7, #12]
 8022704:	60b9      	str	r1, [r7, #8]
 8022706:	607a      	str	r2, [r7, #4]
  assert (size > 0);
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	2b00      	cmp	r3, #0
 802270c:	dc06      	bgt.n	802271c <gmp_realloc_limbs+0x20>
 802270e:	4b0a      	ldr	r3, [pc, #40]	@ (8022738 <gmp_realloc_limbs+0x3c>)
 8022710:	4a0a      	ldr	r2, [pc, #40]	@ (802273c <gmp_realloc_limbs+0x40>)
 8022712:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8022716:	480a      	ldr	r0, [pc, #40]	@ (8022740 <gmp_realloc_limbs+0x44>)
 8022718:	f012 fd8e 	bl	8035238 <__assert_func>
  return (mp_ptr) gmp_realloc (old, old_size * sizeof (mp_limb_t), size * sizeof (mp_limb_t));
 802271c:	4b09      	ldr	r3, [pc, #36]	@ (8022744 <gmp_realloc_limbs+0x48>)
 802271e:	681b      	ldr	r3, [r3, #0]
 8022720:	68ba      	ldr	r2, [r7, #8]
 8022722:	0091      	lsls	r1, r2, #2
 8022724:	687a      	ldr	r2, [r7, #4]
 8022726:	0092      	lsls	r2, r2, #2
 8022728:	68f8      	ldr	r0, [r7, #12]
 802272a:	4798      	blx	r3
 802272c:	4603      	mov	r3, r0
}
 802272e:	4618      	mov	r0, r3
 8022730:	3710      	adds	r7, #16
 8022732:	46bd      	mov	sp, r7
 8022734:	bd80      	pop	{r7, pc}
 8022736:	bf00      	nop
 8022738:	08038294 	.word	0x08038294
 802273c:	0803bc60 	.word	0x0803bc60
 8022740:	080382a0 	.word	0x080382a0
 8022744:	20001510 	.word	0x20001510

08022748 <gmp_free_limbs>:

static void
gmp_free_limbs (mp_ptr old, mp_size_t size)
{
 8022748:	b580      	push	{r7, lr}
 802274a:	b082      	sub	sp, #8
 802274c:	af00      	add	r7, sp, #0
 802274e:	6078      	str	r0, [r7, #4]
 8022750:	6039      	str	r1, [r7, #0]
  gmp_free (old, size * sizeof (mp_limb_t));
 8022752:	4b05      	ldr	r3, [pc, #20]	@ (8022768 <gmp_free_limbs+0x20>)
 8022754:	681b      	ldr	r3, [r3, #0]
 8022756:	683a      	ldr	r2, [r7, #0]
 8022758:	0092      	lsls	r2, r2, #2
 802275a:	4611      	mov	r1, r2
 802275c:	6878      	ldr	r0, [r7, #4]
 802275e:	4798      	blx	r3
}
 8022760:	bf00      	nop
 8022762:	3708      	adds	r7, #8
 8022764:	46bd      	mov	sp, r7
 8022766:	bd80      	pop	{r7, pc}
 8022768:	20001514 	.word	0x20001514

0802276c <mpn_copyi>:

/* MPN interface */

void
mpn_copyi (mp_ptr d, mp_srcptr s, mp_size_t n)
{
 802276c:	b480      	push	{r7}
 802276e:	b087      	sub	sp, #28
 8022770:	af00      	add	r7, sp, #0
 8022772:	60f8      	str	r0, [r7, #12]
 8022774:	60b9      	str	r1, [r7, #8]
 8022776:	607a      	str	r2, [r7, #4]
  mp_size_t i;
  for (i = 0; i < n; i++)
 8022778:	2300      	movs	r3, #0
 802277a:	617b      	str	r3, [r7, #20]
 802277c:	e00c      	b.n	8022798 <mpn_copyi+0x2c>
    d[i] = s[i];
 802277e:	697b      	ldr	r3, [r7, #20]
 8022780:	009b      	lsls	r3, r3, #2
 8022782:	68ba      	ldr	r2, [r7, #8]
 8022784:	441a      	add	r2, r3
 8022786:	697b      	ldr	r3, [r7, #20]
 8022788:	009b      	lsls	r3, r3, #2
 802278a:	68f9      	ldr	r1, [r7, #12]
 802278c:	440b      	add	r3, r1
 802278e:	6812      	ldr	r2, [r2, #0]
 8022790:	601a      	str	r2, [r3, #0]
  for (i = 0; i < n; i++)
 8022792:	697b      	ldr	r3, [r7, #20]
 8022794:	3301      	adds	r3, #1
 8022796:	617b      	str	r3, [r7, #20]
 8022798:	697a      	ldr	r2, [r7, #20]
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	429a      	cmp	r2, r3
 802279e:	dbee      	blt.n	802277e <mpn_copyi+0x12>
}
 80227a0:	bf00      	nop
 80227a2:	bf00      	nop
 80227a4:	371c      	adds	r7, #28
 80227a6:	46bd      	mov	sp, r7
 80227a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227ac:	4770      	bx	lr

080227ae <mpn_copyd>:

void
mpn_copyd (mp_ptr d, mp_srcptr s, mp_size_t n)
{
 80227ae:	b480      	push	{r7}
 80227b0:	b085      	sub	sp, #20
 80227b2:	af00      	add	r7, sp, #0
 80227b4:	60f8      	str	r0, [r7, #12]
 80227b6:	60b9      	str	r1, [r7, #8]
 80227b8:	607a      	str	r2, [r7, #4]
  while (--n >= 0)
 80227ba:	e009      	b.n	80227d0 <mpn_copyd+0x22>
    d[n] = s[n];
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	009b      	lsls	r3, r3, #2
 80227c0:	68ba      	ldr	r2, [r7, #8]
 80227c2:	441a      	add	r2, r3
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	009b      	lsls	r3, r3, #2
 80227c8:	68f9      	ldr	r1, [r7, #12]
 80227ca:	440b      	add	r3, r1
 80227cc:	6812      	ldr	r2, [r2, #0]
 80227ce:	601a      	str	r2, [r3, #0]
  while (--n >= 0)
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	3b01      	subs	r3, #1
 80227d4:	607b      	str	r3, [r7, #4]
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	2b00      	cmp	r3, #0
 80227da:	daef      	bge.n	80227bc <mpn_copyd+0xe>
}
 80227dc:	bf00      	nop
 80227de:	bf00      	nop
 80227e0:	3714      	adds	r7, #20
 80227e2:	46bd      	mov	sp, r7
 80227e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227e8:	4770      	bx	lr

080227ea <mpn_cmp>:

int
mpn_cmp (mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
 80227ea:	b480      	push	{r7}
 80227ec:	b085      	sub	sp, #20
 80227ee:	af00      	add	r7, sp, #0
 80227f0:	60f8      	str	r0, [r7, #12]
 80227f2:	60b9      	str	r1, [r7, #8]
 80227f4:	607a      	str	r2, [r7, #4]
  while (--n >= 0)
 80227f6:	e01c      	b.n	8022832 <mpn_cmp+0x48>
    {
      if (ap[n] != bp[n])
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	009b      	lsls	r3, r3, #2
 80227fc:	68fa      	ldr	r2, [r7, #12]
 80227fe:	4413      	add	r3, r2
 8022800:	681a      	ldr	r2, [r3, #0]
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	009b      	lsls	r3, r3, #2
 8022806:	68b9      	ldr	r1, [r7, #8]
 8022808:	440b      	add	r3, r1
 802280a:	681b      	ldr	r3, [r3, #0]
 802280c:	429a      	cmp	r2, r3
 802280e:	d010      	beq.n	8022832 <mpn_cmp+0x48>
	return ap[n] > bp[n] ? 1 : -1;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	009b      	lsls	r3, r3, #2
 8022814:	68fa      	ldr	r2, [r7, #12]
 8022816:	4413      	add	r3, r2
 8022818:	681a      	ldr	r2, [r3, #0]
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	009b      	lsls	r3, r3, #2
 802281e:	68b9      	ldr	r1, [r7, #8]
 8022820:	440b      	add	r3, r1
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	429a      	cmp	r2, r3
 8022826:	d901      	bls.n	802282c <mpn_cmp+0x42>
 8022828:	2301      	movs	r3, #1
 802282a:	e009      	b.n	8022840 <mpn_cmp+0x56>
 802282c:	f04f 33ff 	mov.w	r3, #4294967295
 8022830:	e006      	b.n	8022840 <mpn_cmp+0x56>
  while (--n >= 0)
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	3b01      	subs	r3, #1
 8022836:	607b      	str	r3, [r7, #4]
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	2b00      	cmp	r3, #0
 802283c:	dadc      	bge.n	80227f8 <mpn_cmp+0xe>
    }
  return 0;
 802283e:	2300      	movs	r3, #0
}
 8022840:	4618      	mov	r0, r3
 8022842:	3714      	adds	r7, #20
 8022844:	46bd      	mov	sp, r7
 8022846:	f85d 7b04 	ldr.w	r7, [sp], #4
 802284a:	4770      	bx	lr

0802284c <mpn_cmp4>:

static int
mpn_cmp4 (mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)
{
 802284c:	b580      	push	{r7, lr}
 802284e:	b084      	sub	sp, #16
 8022850:	af00      	add	r7, sp, #0
 8022852:	60f8      	str	r0, [r7, #12]
 8022854:	60b9      	str	r1, [r7, #8]
 8022856:	607a      	str	r2, [r7, #4]
 8022858:	603b      	str	r3, [r7, #0]
  if (an != bn)
 802285a:	68ba      	ldr	r2, [r7, #8]
 802285c:	683b      	ldr	r3, [r7, #0]
 802285e:	429a      	cmp	r2, r3
 8022860:	d008      	beq.n	8022874 <mpn_cmp4+0x28>
    return an < bn ? -1 : 1;
 8022862:	68ba      	ldr	r2, [r7, #8]
 8022864:	683b      	ldr	r3, [r7, #0]
 8022866:	429a      	cmp	r2, r3
 8022868:	da02      	bge.n	8022870 <mpn_cmp4+0x24>
 802286a:	f04f 33ff 	mov.w	r3, #4294967295
 802286e:	e007      	b.n	8022880 <mpn_cmp4+0x34>
 8022870:	2301      	movs	r3, #1
 8022872:	e005      	b.n	8022880 <mpn_cmp4+0x34>
  else
    return mpn_cmp (ap, bp, an);
 8022874:	68ba      	ldr	r2, [r7, #8]
 8022876:	6879      	ldr	r1, [r7, #4]
 8022878:	68f8      	ldr	r0, [r7, #12]
 802287a:	f7ff ffb6 	bl	80227ea <mpn_cmp>
 802287e:	4603      	mov	r3, r0
}
 8022880:	4618      	mov	r0, r3
 8022882:	3710      	adds	r7, #16
 8022884:	46bd      	mov	sp, r7
 8022886:	bd80      	pop	{r7, pc}

08022888 <mpn_normalized_size>:

static mp_size_t
mpn_normalized_size (mp_srcptr xp, mp_size_t n)
{
 8022888:	b480      	push	{r7}
 802288a:	b083      	sub	sp, #12
 802288c:	af00      	add	r7, sp, #0
 802288e:	6078      	str	r0, [r7, #4]
 8022890:	6039      	str	r1, [r7, #0]
  while (n > 0 && xp[n-1] == 0)
 8022892:	e002      	b.n	802289a <mpn_normalized_size+0x12>
    --n;
 8022894:	683b      	ldr	r3, [r7, #0]
 8022896:	3b01      	subs	r3, #1
 8022898:	603b      	str	r3, [r7, #0]
  while (n > 0 && xp[n-1] == 0)
 802289a:	683b      	ldr	r3, [r7, #0]
 802289c:	2b00      	cmp	r3, #0
 802289e:	dd09      	ble.n	80228b4 <mpn_normalized_size+0x2c>
 80228a0:	683b      	ldr	r3, [r7, #0]
 80228a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80228a6:	3b01      	subs	r3, #1
 80228a8:	009b      	lsls	r3, r3, #2
 80228aa:	687a      	ldr	r2, [r7, #4]
 80228ac:	4413      	add	r3, r2
 80228ae:	681b      	ldr	r3, [r3, #0]
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	d0ef      	beq.n	8022894 <mpn_normalized_size+0xc>
  return n;
 80228b4:	683b      	ldr	r3, [r7, #0]
}
 80228b6:	4618      	mov	r0, r3
 80228b8:	370c      	adds	r7, #12
 80228ba:	46bd      	mov	sp, r7
 80228bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c0:	4770      	bx	lr

080228c2 <mpn_zero_p>:

int
mpn_zero_p(mp_srcptr rp, mp_size_t n)
{
 80228c2:	b580      	push	{r7, lr}
 80228c4:	b082      	sub	sp, #8
 80228c6:	af00      	add	r7, sp, #0
 80228c8:	6078      	str	r0, [r7, #4]
 80228ca:	6039      	str	r1, [r7, #0]
  return mpn_normalized_size (rp, n) == 0;
 80228cc:	6839      	ldr	r1, [r7, #0]
 80228ce:	6878      	ldr	r0, [r7, #4]
 80228d0:	f7ff ffda 	bl	8022888 <mpn_normalized_size>
 80228d4:	4603      	mov	r3, r0
 80228d6:	2b00      	cmp	r3, #0
 80228d8:	bf0c      	ite	eq
 80228da:	2301      	moveq	r3, #1
 80228dc:	2300      	movne	r3, #0
 80228de:	b2db      	uxtb	r3, r3
}
 80228e0:	4618      	mov	r0, r3
 80228e2:	3708      	adds	r7, #8
 80228e4:	46bd      	mov	sp, r7
 80228e6:	bd80      	pop	{r7, pc}

080228e8 <mpn_zero>:

void
mpn_zero (mp_ptr rp, mp_size_t n)
{
 80228e8:	b480      	push	{r7}
 80228ea:	b083      	sub	sp, #12
 80228ec:	af00      	add	r7, sp, #0
 80228ee:	6078      	str	r0, [r7, #4]
 80228f0:	6039      	str	r1, [r7, #0]
  while (--n >= 0)
 80228f2:	e005      	b.n	8022900 <mpn_zero+0x18>
    rp[n] = 0;
 80228f4:	683b      	ldr	r3, [r7, #0]
 80228f6:	009b      	lsls	r3, r3, #2
 80228f8:	687a      	ldr	r2, [r7, #4]
 80228fa:	4413      	add	r3, r2
 80228fc:	2200      	movs	r2, #0
 80228fe:	601a      	str	r2, [r3, #0]
  while (--n >= 0)
 8022900:	683b      	ldr	r3, [r7, #0]
 8022902:	3b01      	subs	r3, #1
 8022904:	603b      	str	r3, [r7, #0]
 8022906:	683b      	ldr	r3, [r7, #0]
 8022908:	2b00      	cmp	r3, #0
 802290a:	daf3      	bge.n	80228f4 <mpn_zero+0xc>
}
 802290c:	bf00      	nop
 802290e:	bf00      	nop
 8022910:	370c      	adds	r7, #12
 8022912:	46bd      	mov	sp, r7
 8022914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022918:	4770      	bx	lr
	...

0802291c <mpn_add_1>:

mp_limb_t
mpn_add_1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b)
{
 802291c:	b580      	push	{r7, lr}
 802291e:	b086      	sub	sp, #24
 8022920:	af00      	add	r7, sp, #0
 8022922:	60f8      	str	r0, [r7, #12]
 8022924:	60b9      	str	r1, [r7, #8]
 8022926:	607a      	str	r2, [r7, #4]
 8022928:	603b      	str	r3, [r7, #0]
  mp_size_t i;

  assert (n > 0);
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	2b00      	cmp	r3, #0
 802292e:	dc06      	bgt.n	802293e <mpn_add_1+0x22>
 8022930:	4b15      	ldr	r3, [pc, #84]	@ (8022988 <mpn_add_1+0x6c>)
 8022932:	4a16      	ldr	r2, [pc, #88]	@ (802298c <mpn_add_1+0x70>)
 8022934:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8022938:	4815      	ldr	r0, [pc, #84]	@ (8022990 <mpn_add_1+0x74>)
 802293a:	f012 fc7d 	bl	8035238 <__assert_func>
  i = 0;
 802293e:	2300      	movs	r3, #0
 8022940:	617b      	str	r3, [r7, #20]
  do
    {
      mp_limb_t r = ap[i] + b;
 8022942:	697b      	ldr	r3, [r7, #20]
 8022944:	009b      	lsls	r3, r3, #2
 8022946:	68ba      	ldr	r2, [r7, #8]
 8022948:	4413      	add	r3, r2
 802294a:	681b      	ldr	r3, [r3, #0]
 802294c:	683a      	ldr	r2, [r7, #0]
 802294e:	4413      	add	r3, r2
 8022950:	613b      	str	r3, [r7, #16]
      /* Carry out */
      b = (r < b);
 8022952:	693a      	ldr	r2, [r7, #16]
 8022954:	683b      	ldr	r3, [r7, #0]
 8022956:	429a      	cmp	r2, r3
 8022958:	bf34      	ite	cc
 802295a:	2301      	movcc	r3, #1
 802295c:	2300      	movcs	r3, #0
 802295e:	b2db      	uxtb	r3, r3
 8022960:	603b      	str	r3, [r7, #0]
      rp[i] = r;
 8022962:	697b      	ldr	r3, [r7, #20]
 8022964:	009b      	lsls	r3, r3, #2
 8022966:	68fa      	ldr	r2, [r7, #12]
 8022968:	4413      	add	r3, r2
 802296a:	693a      	ldr	r2, [r7, #16]
 802296c:	601a      	str	r2, [r3, #0]
    }
  while (++i < n);
 802296e:	697b      	ldr	r3, [r7, #20]
 8022970:	3301      	adds	r3, #1
 8022972:	617b      	str	r3, [r7, #20]
 8022974:	697a      	ldr	r2, [r7, #20]
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	429a      	cmp	r2, r3
 802297a:	dbe2      	blt.n	8022942 <mpn_add_1+0x26>

  return b;
 802297c:	683b      	ldr	r3, [r7, #0]
}
 802297e:	4618      	mov	r0, r3
 8022980:	3718      	adds	r7, #24
 8022982:	46bd      	mov	sp, r7
 8022984:	bd80      	pop	{r7, pc}
 8022986:	bf00      	nop
 8022988:	08038318 	.word	0x08038318
 802298c:	0803bc74 	.word	0x0803bc74
 8022990:	080382a0 	.word	0x080382a0

08022994 <mpn_add_n>:

mp_limb_t
mpn_add_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
 8022994:	b480      	push	{r7}
 8022996:	b08b      	sub	sp, #44	@ 0x2c
 8022998:	af00      	add	r7, sp, #0
 802299a:	60f8      	str	r0, [r7, #12]
 802299c:	60b9      	str	r1, [r7, #8]
 802299e:	607a      	str	r2, [r7, #4]
 80229a0:	603b      	str	r3, [r7, #0]
  mp_size_t i;
  mp_limb_t cy;

  for (i = 0, cy = 0; i < n; i++)
 80229a2:	2300      	movs	r3, #0
 80229a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80229a6:	2300      	movs	r3, #0
 80229a8:	623b      	str	r3, [r7, #32]
 80229aa:	e02f      	b.n	8022a0c <mpn_add_n+0x78>
    {
      mp_limb_t a, b, r;
      a = ap[i]; b = bp[i];
 80229ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80229ae:	009b      	lsls	r3, r3, #2
 80229b0:	68ba      	ldr	r2, [r7, #8]
 80229b2:	4413      	add	r3, r2
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	61fb      	str	r3, [r7, #28]
 80229b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80229ba:	009b      	lsls	r3, r3, #2
 80229bc:	687a      	ldr	r2, [r7, #4]
 80229be:	4413      	add	r3, r2
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	61bb      	str	r3, [r7, #24]
      r = a + cy;
 80229c4:	69fa      	ldr	r2, [r7, #28]
 80229c6:	6a3b      	ldr	r3, [r7, #32]
 80229c8:	4413      	add	r3, r2
 80229ca:	617b      	str	r3, [r7, #20]
      cy = (r < cy);
 80229cc:	697a      	ldr	r2, [r7, #20]
 80229ce:	6a3b      	ldr	r3, [r7, #32]
 80229d0:	429a      	cmp	r2, r3
 80229d2:	bf34      	ite	cc
 80229d4:	2301      	movcc	r3, #1
 80229d6:	2300      	movcs	r3, #0
 80229d8:	b2db      	uxtb	r3, r3
 80229da:	623b      	str	r3, [r7, #32]
      r += b;
 80229dc:	697a      	ldr	r2, [r7, #20]
 80229de:	69bb      	ldr	r3, [r7, #24]
 80229e0:	4413      	add	r3, r2
 80229e2:	617b      	str	r3, [r7, #20]
      cy += (r < b);
 80229e4:	697a      	ldr	r2, [r7, #20]
 80229e6:	69bb      	ldr	r3, [r7, #24]
 80229e8:	429a      	cmp	r2, r3
 80229ea:	bf34      	ite	cc
 80229ec:	2301      	movcc	r3, #1
 80229ee:	2300      	movcs	r3, #0
 80229f0:	b2db      	uxtb	r3, r3
 80229f2:	461a      	mov	r2, r3
 80229f4:	6a3b      	ldr	r3, [r7, #32]
 80229f6:	4413      	add	r3, r2
 80229f8:	623b      	str	r3, [r7, #32]
      rp[i] = r;
 80229fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80229fc:	009b      	lsls	r3, r3, #2
 80229fe:	68fa      	ldr	r2, [r7, #12]
 8022a00:	4413      	add	r3, r2
 8022a02:	697a      	ldr	r2, [r7, #20]
 8022a04:	601a      	str	r2, [r3, #0]
  for (i = 0, cy = 0; i < n; i++)
 8022a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022a08:	3301      	adds	r3, #1
 8022a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8022a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022a0e:	683b      	ldr	r3, [r7, #0]
 8022a10:	429a      	cmp	r2, r3
 8022a12:	dbcb      	blt.n	80229ac <mpn_add_n+0x18>
    }
  return cy;
 8022a14:	6a3b      	ldr	r3, [r7, #32]
}
 8022a16:	4618      	mov	r0, r3
 8022a18:	372c      	adds	r7, #44	@ 0x2c
 8022a1a:	46bd      	mov	sp, r7
 8022a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a20:	4770      	bx	lr
	...

08022a24 <mpn_add>:

mp_limb_t
mpn_add (mp_ptr rp, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)
{
 8022a24:	b580      	push	{r7, lr}
 8022a26:	b086      	sub	sp, #24
 8022a28:	af00      	add	r7, sp, #0
 8022a2a:	60f8      	str	r0, [r7, #12]
 8022a2c:	60b9      	str	r1, [r7, #8]
 8022a2e:	607a      	str	r2, [r7, #4]
 8022a30:	603b      	str	r3, [r7, #0]
  mp_limb_t cy;

  assert (an >= bn);
 8022a32:	687a      	ldr	r2, [r7, #4]
 8022a34:	6a3b      	ldr	r3, [r7, #32]
 8022a36:	429a      	cmp	r2, r3
 8022a38:	da06      	bge.n	8022a48 <mpn_add+0x24>
 8022a3a:	4b13      	ldr	r3, [pc, #76]	@ (8022a88 <mpn_add+0x64>)
 8022a3c:	4a13      	ldr	r2, [pc, #76]	@ (8022a8c <mpn_add+0x68>)
 8022a3e:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8022a42:	4813      	ldr	r0, [pc, #76]	@ (8022a90 <mpn_add+0x6c>)
 8022a44:	f012 fbf8 	bl	8035238 <__assert_func>

  cy = mpn_add_n (rp, ap, bp, bn);
 8022a48:	6a3b      	ldr	r3, [r7, #32]
 8022a4a:	683a      	ldr	r2, [r7, #0]
 8022a4c:	68b9      	ldr	r1, [r7, #8]
 8022a4e:	68f8      	ldr	r0, [r7, #12]
 8022a50:	f7ff ffa0 	bl	8022994 <mpn_add_n>
 8022a54:	6178      	str	r0, [r7, #20]
  if (an > bn)
 8022a56:	687a      	ldr	r2, [r7, #4]
 8022a58:	6a3b      	ldr	r3, [r7, #32]
 8022a5a:	429a      	cmp	r2, r3
 8022a5c:	dd0e      	ble.n	8022a7c <mpn_add+0x58>
    cy = mpn_add_1 (rp + bn, ap + bn, an - bn, cy);
 8022a5e:	6a3b      	ldr	r3, [r7, #32]
 8022a60:	009b      	lsls	r3, r3, #2
 8022a62:	68fa      	ldr	r2, [r7, #12]
 8022a64:	18d0      	adds	r0, r2, r3
 8022a66:	6a3b      	ldr	r3, [r7, #32]
 8022a68:	009b      	lsls	r3, r3, #2
 8022a6a:	68ba      	ldr	r2, [r7, #8]
 8022a6c:	18d1      	adds	r1, r2, r3
 8022a6e:	687a      	ldr	r2, [r7, #4]
 8022a70:	6a3b      	ldr	r3, [r7, #32]
 8022a72:	1ad2      	subs	r2, r2, r3
 8022a74:	697b      	ldr	r3, [r7, #20]
 8022a76:	f7ff ff51 	bl	802291c <mpn_add_1>
 8022a7a:	6178      	str	r0, [r7, #20]
  return cy;
 8022a7c:	697b      	ldr	r3, [r7, #20]
}
 8022a7e:	4618      	mov	r0, r3
 8022a80:	3718      	adds	r7, #24
 8022a82:	46bd      	mov	sp, r7
 8022a84:	bd80      	pop	{r7, pc}
 8022a86:	bf00      	nop
 8022a88:	08038320 	.word	0x08038320
 8022a8c:	0803bc80 	.word	0x0803bc80
 8022a90:	080382a0 	.word	0x080382a0

08022a94 <mpn_sub_1>:

mp_limb_t
mpn_sub_1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b)
{
 8022a94:	b580      	push	{r7, lr}
 8022a96:	b088      	sub	sp, #32
 8022a98:	af00      	add	r7, sp, #0
 8022a9a:	60f8      	str	r0, [r7, #12]
 8022a9c:	60b9      	str	r1, [r7, #8]
 8022a9e:	607a      	str	r2, [r7, #4]
 8022aa0:	603b      	str	r3, [r7, #0]
  mp_size_t i;

  assert (n > 0);
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	dc06      	bgt.n	8022ab6 <mpn_sub_1+0x22>
 8022aa8:	4b16      	ldr	r3, [pc, #88]	@ (8022b04 <mpn_sub_1+0x70>)
 8022aaa:	4a17      	ldr	r2, [pc, #92]	@ (8022b08 <mpn_sub_1+0x74>)
 8022aac:	f240 11fd 	movw	r1, #509	@ 0x1fd
 8022ab0:	4816      	ldr	r0, [pc, #88]	@ (8022b0c <mpn_sub_1+0x78>)
 8022ab2:	f012 fbc1 	bl	8035238 <__assert_func>

  i = 0;
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	61fb      	str	r3, [r7, #28]
  do
    {
      mp_limb_t a = ap[i];
 8022aba:	69fb      	ldr	r3, [r7, #28]
 8022abc:	009b      	lsls	r3, r3, #2
 8022abe:	68ba      	ldr	r2, [r7, #8]
 8022ac0:	4413      	add	r3, r2
 8022ac2:	681b      	ldr	r3, [r3, #0]
 8022ac4:	61bb      	str	r3, [r7, #24]
      /* Carry out */
      mp_limb_t cy = a < b;
 8022ac6:	69ba      	ldr	r2, [r7, #24]
 8022ac8:	683b      	ldr	r3, [r7, #0]
 8022aca:	429a      	cmp	r2, r3
 8022acc:	bf34      	ite	cc
 8022ace:	2301      	movcc	r3, #1
 8022ad0:	2300      	movcs	r3, #0
 8022ad2:	b2db      	uxtb	r3, r3
 8022ad4:	617b      	str	r3, [r7, #20]
      rp[i] = a - b;
 8022ad6:	69fb      	ldr	r3, [r7, #28]
 8022ad8:	009b      	lsls	r3, r3, #2
 8022ada:	68fa      	ldr	r2, [r7, #12]
 8022adc:	4413      	add	r3, r2
 8022ade:	69b9      	ldr	r1, [r7, #24]
 8022ae0:	683a      	ldr	r2, [r7, #0]
 8022ae2:	1a8a      	subs	r2, r1, r2
 8022ae4:	601a      	str	r2, [r3, #0]
      b = cy;
 8022ae6:	697b      	ldr	r3, [r7, #20]
 8022ae8:	603b      	str	r3, [r7, #0]
    }
  while (++i < n);
 8022aea:	69fb      	ldr	r3, [r7, #28]
 8022aec:	3301      	adds	r3, #1
 8022aee:	61fb      	str	r3, [r7, #28]
 8022af0:	69fa      	ldr	r2, [r7, #28]
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	429a      	cmp	r2, r3
 8022af6:	dbe0      	blt.n	8022aba <mpn_sub_1+0x26>

  return b;
 8022af8:	683b      	ldr	r3, [r7, #0]
}
 8022afa:	4618      	mov	r0, r3
 8022afc:	3720      	adds	r7, #32
 8022afe:	46bd      	mov	sp, r7
 8022b00:	bd80      	pop	{r7, pc}
 8022b02:	bf00      	nop
 8022b04:	08038318 	.word	0x08038318
 8022b08:	0803bc88 	.word	0x0803bc88
 8022b0c:	080382a0 	.word	0x080382a0

08022b10 <mpn_sub_n>:

mp_limb_t
mpn_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
 8022b10:	b480      	push	{r7}
 8022b12:	b089      	sub	sp, #36	@ 0x24
 8022b14:	af00      	add	r7, sp, #0
 8022b16:	60f8      	str	r0, [r7, #12]
 8022b18:	60b9      	str	r1, [r7, #8]
 8022b1a:	607a      	str	r2, [r7, #4]
 8022b1c:	603b      	str	r3, [r7, #0]
  mp_size_t i;
  mp_limb_t cy;

  for (i = 0, cy = 0; i < n; i++)
 8022b1e:	2300      	movs	r3, #0
 8022b20:	61fb      	str	r3, [r7, #28]
 8022b22:	2300      	movs	r3, #0
 8022b24:	61bb      	str	r3, [r7, #24]
 8022b26:	e02d      	b.n	8022b84 <mpn_sub_n+0x74>
    {
      mp_limb_t a, b;
      a = ap[i]; b = bp[i];
 8022b28:	69fb      	ldr	r3, [r7, #28]
 8022b2a:	009b      	lsls	r3, r3, #2
 8022b2c:	68ba      	ldr	r2, [r7, #8]
 8022b2e:	4413      	add	r3, r2
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	617b      	str	r3, [r7, #20]
 8022b34:	69fb      	ldr	r3, [r7, #28]
 8022b36:	009b      	lsls	r3, r3, #2
 8022b38:	687a      	ldr	r2, [r7, #4]
 8022b3a:	4413      	add	r3, r2
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	613b      	str	r3, [r7, #16]
      b += cy;
 8022b40:	693a      	ldr	r2, [r7, #16]
 8022b42:	69bb      	ldr	r3, [r7, #24]
 8022b44:	4413      	add	r3, r2
 8022b46:	613b      	str	r3, [r7, #16]
      cy = (b < cy);
 8022b48:	693a      	ldr	r2, [r7, #16]
 8022b4a:	69bb      	ldr	r3, [r7, #24]
 8022b4c:	429a      	cmp	r2, r3
 8022b4e:	bf34      	ite	cc
 8022b50:	2301      	movcc	r3, #1
 8022b52:	2300      	movcs	r3, #0
 8022b54:	b2db      	uxtb	r3, r3
 8022b56:	61bb      	str	r3, [r7, #24]
      cy += (a < b);
 8022b58:	697a      	ldr	r2, [r7, #20]
 8022b5a:	693b      	ldr	r3, [r7, #16]
 8022b5c:	429a      	cmp	r2, r3
 8022b5e:	bf34      	ite	cc
 8022b60:	2301      	movcc	r3, #1
 8022b62:	2300      	movcs	r3, #0
 8022b64:	b2db      	uxtb	r3, r3
 8022b66:	461a      	mov	r2, r3
 8022b68:	69bb      	ldr	r3, [r7, #24]
 8022b6a:	4413      	add	r3, r2
 8022b6c:	61bb      	str	r3, [r7, #24]
      rp[i] = a - b;
 8022b6e:	69fb      	ldr	r3, [r7, #28]
 8022b70:	009b      	lsls	r3, r3, #2
 8022b72:	68fa      	ldr	r2, [r7, #12]
 8022b74:	4413      	add	r3, r2
 8022b76:	6979      	ldr	r1, [r7, #20]
 8022b78:	693a      	ldr	r2, [r7, #16]
 8022b7a:	1a8a      	subs	r2, r1, r2
 8022b7c:	601a      	str	r2, [r3, #0]
  for (i = 0, cy = 0; i < n; i++)
 8022b7e:	69fb      	ldr	r3, [r7, #28]
 8022b80:	3301      	adds	r3, #1
 8022b82:	61fb      	str	r3, [r7, #28]
 8022b84:	69fa      	ldr	r2, [r7, #28]
 8022b86:	683b      	ldr	r3, [r7, #0]
 8022b88:	429a      	cmp	r2, r3
 8022b8a:	dbcd      	blt.n	8022b28 <mpn_sub_n+0x18>
    }
  return cy;
 8022b8c:	69bb      	ldr	r3, [r7, #24]
}
 8022b8e:	4618      	mov	r0, r3
 8022b90:	3724      	adds	r7, #36	@ 0x24
 8022b92:	46bd      	mov	sp, r7
 8022b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b98:	4770      	bx	lr
	...

08022b9c <mpn_sub>:

mp_limb_t
mpn_sub (mp_ptr rp, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)
{
 8022b9c:	b580      	push	{r7, lr}
 8022b9e:	b086      	sub	sp, #24
 8022ba0:	af00      	add	r7, sp, #0
 8022ba2:	60f8      	str	r0, [r7, #12]
 8022ba4:	60b9      	str	r1, [r7, #8]
 8022ba6:	607a      	str	r2, [r7, #4]
 8022ba8:	603b      	str	r3, [r7, #0]
  mp_limb_t cy;

  assert (an >= bn);
 8022baa:	687a      	ldr	r2, [r7, #4]
 8022bac:	6a3b      	ldr	r3, [r7, #32]
 8022bae:	429a      	cmp	r2, r3
 8022bb0:	da06      	bge.n	8022bc0 <mpn_sub+0x24>
 8022bb2:	4b13      	ldr	r3, [pc, #76]	@ (8022c00 <mpn_sub+0x64>)
 8022bb4:	4a13      	ldr	r2, [pc, #76]	@ (8022c04 <mpn_sub+0x68>)
 8022bb6:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8022bba:	4813      	ldr	r0, [pc, #76]	@ (8022c08 <mpn_sub+0x6c>)
 8022bbc:	f012 fb3c 	bl	8035238 <__assert_func>

  cy = mpn_sub_n (rp, ap, bp, bn);
 8022bc0:	6a3b      	ldr	r3, [r7, #32]
 8022bc2:	683a      	ldr	r2, [r7, #0]
 8022bc4:	68b9      	ldr	r1, [r7, #8]
 8022bc6:	68f8      	ldr	r0, [r7, #12]
 8022bc8:	f7ff ffa2 	bl	8022b10 <mpn_sub_n>
 8022bcc:	6178      	str	r0, [r7, #20]
  if (an > bn)
 8022bce:	687a      	ldr	r2, [r7, #4]
 8022bd0:	6a3b      	ldr	r3, [r7, #32]
 8022bd2:	429a      	cmp	r2, r3
 8022bd4:	dd0e      	ble.n	8022bf4 <mpn_sub+0x58>
    cy = mpn_sub_1 (rp + bn, ap + bn, an - bn, cy);
 8022bd6:	6a3b      	ldr	r3, [r7, #32]
 8022bd8:	009b      	lsls	r3, r3, #2
 8022bda:	68fa      	ldr	r2, [r7, #12]
 8022bdc:	18d0      	adds	r0, r2, r3
 8022bde:	6a3b      	ldr	r3, [r7, #32]
 8022be0:	009b      	lsls	r3, r3, #2
 8022be2:	68ba      	ldr	r2, [r7, #8]
 8022be4:	18d1      	adds	r1, r2, r3
 8022be6:	687a      	ldr	r2, [r7, #4]
 8022be8:	6a3b      	ldr	r3, [r7, #32]
 8022bea:	1ad2      	subs	r2, r2, r3
 8022bec:	697b      	ldr	r3, [r7, #20]
 8022bee:	f7ff ff51 	bl	8022a94 <mpn_sub_1>
 8022bf2:	6178      	str	r0, [r7, #20]
  return cy;
 8022bf4:	697b      	ldr	r3, [r7, #20]
}
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	3718      	adds	r7, #24
 8022bfa:	46bd      	mov	sp, r7
 8022bfc:	bd80      	pop	{r7, pc}
 8022bfe:	bf00      	nop
 8022c00:	08038320 	.word	0x08038320
 8022c04:	0803bc94 	.word	0x0803bc94
 8022c08:	080382a0 	.word	0x080382a0

08022c0c <mpn_mul_1>:

mp_limb_t
mpn_mul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)
{
 8022c0c:	b580      	push	{r7, lr}
 8022c0e:	b094      	sub	sp, #80	@ 0x50
 8022c10:	af00      	add	r7, sp, #0
 8022c12:	60f8      	str	r0, [r7, #12]
 8022c14:	60b9      	str	r1, [r7, #8]
 8022c16:	607a      	str	r2, [r7, #4]
 8022c18:	603b      	str	r3, [r7, #0]
  mp_limb_t ul, cl, hpl, lpl;

  assert (n >= 1);
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	dc06      	bgt.n	8022c2e <mpn_mul_1+0x22>
 8022c20:	4b37      	ldr	r3, [pc, #220]	@ (8022d00 <mpn_mul_1+0xf4>)
 8022c22:	4a38      	ldr	r2, [pc, #224]	@ (8022d04 <mpn_mul_1+0xf8>)
 8022c24:	f240 2131 	movw	r1, #561	@ 0x231
 8022c28:	4837      	ldr	r0, [pc, #220]	@ (8022d08 <mpn_mul_1+0xfc>)
 8022c2a:	f012 fb05 	bl	8035238 <__assert_func>

  cl = 0;
 8022c2e:	2300      	movs	r3, #0
 8022c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  do
    {
      ul = *up++;
 8022c32:	68bb      	ldr	r3, [r7, #8]
 8022c34:	1d1a      	adds	r2, r3, #4
 8022c36:	60ba      	str	r2, [r7, #8]
 8022c38:	681b      	ldr	r3, [r3, #0]
 8022c3a:	647b      	str	r3, [r7, #68]	@ 0x44
      gmp_umul_ppmm (hpl, lpl, ul, vl);
 8022c3c:	2320      	movs	r3, #32
 8022c3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8022c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022c44:	683b      	ldr	r3, [r7, #0]
 8022c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8022c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022c4a:	b29b      	uxth	r3, r3
 8022c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8022c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022c50:	0c1b      	lsrs	r3, r3, #16
 8022c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8022c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022c56:	b29b      	uxth	r3, r3
 8022c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022c5c:	0c1b      	lsrs	r3, r3, #16
 8022c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8022c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022c64:	fb02 f303 	mul.w	r3, r2, r3
 8022c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8022c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022c6e:	fb02 f303 	mul.w	r3, r2, r3
 8022c72:	623b      	str	r3, [r7, #32]
 8022c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022c78:	fb02 f303 	mul.w	r3, r2, r3
 8022c7c:	61fb      	str	r3, [r7, #28]
 8022c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022c82:	fb02 f303 	mul.w	r3, r2, r3
 8022c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c8a:	0c1b      	lsrs	r3, r3, #16
 8022c8c:	6a3a      	ldr	r2, [r7, #32]
 8022c8e:	4413      	add	r3, r2
 8022c90:	623b      	str	r3, [r7, #32]
 8022c92:	6a3a      	ldr	r2, [r7, #32]
 8022c94:	69fb      	ldr	r3, [r7, #28]
 8022c96:	4413      	add	r3, r2
 8022c98:	623b      	str	r3, [r7, #32]
 8022c9a:	6a3a      	ldr	r2, [r7, #32]
 8022c9c:	69fb      	ldr	r3, [r7, #28]
 8022c9e:	429a      	cmp	r2, r3
 8022ca0:	d203      	bcs.n	8022caa <mpn_mul_1+0x9e>
 8022ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022ca4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8022ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022caa:	6a3b      	ldr	r3, [r7, #32]
 8022cac:	0c1b      	lsrs	r3, r3, #16
 8022cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022cb0:	4413      	add	r3, r2
 8022cb2:	61bb      	str	r3, [r7, #24]
 8022cb4:	6a3b      	ldr	r3, [r7, #32]
 8022cb6:	041a      	lsls	r2, r3, #16
 8022cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022cba:	b29b      	uxth	r3, r3
 8022cbc:	4413      	add	r3, r2
 8022cbe:	617b      	str	r3, [r7, #20]

      lpl += cl;
 8022cc0:	697a      	ldr	r2, [r7, #20]
 8022cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022cc4:	4413      	add	r3, r2
 8022cc6:	617b      	str	r3, [r7, #20]
      cl = (lpl < cl) + hpl;
 8022cc8:	697a      	ldr	r2, [r7, #20]
 8022cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022ccc:	429a      	cmp	r2, r3
 8022cce:	bf34      	ite	cc
 8022cd0:	2301      	movcc	r3, #1
 8022cd2:	2300      	movcs	r3, #0
 8022cd4:	b2db      	uxtb	r3, r3
 8022cd6:	461a      	mov	r2, r3
 8022cd8:	69bb      	ldr	r3, [r7, #24]
 8022cda:	4413      	add	r3, r2
 8022cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c

      *rp++ = lpl;
 8022cde:	68fb      	ldr	r3, [r7, #12]
 8022ce0:	1d1a      	adds	r2, r3, #4
 8022ce2:	60fa      	str	r2, [r7, #12]
 8022ce4:	697a      	ldr	r2, [r7, #20]
 8022ce6:	601a      	str	r2, [r3, #0]
    }
  while (--n != 0);
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	3b01      	subs	r3, #1
 8022cec:	607b      	str	r3, [r7, #4]
 8022cee:	687b      	ldr	r3, [r7, #4]
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d19e      	bne.n	8022c32 <mpn_mul_1+0x26>

  return cl;
 8022cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8022cf6:	4618      	mov	r0, r3
 8022cf8:	3750      	adds	r7, #80	@ 0x50
 8022cfa:	46bd      	mov	sp, r7
 8022cfc:	bd80      	pop	{r7, pc}
 8022cfe:	bf00      	nop
 8022d00:	0803832c 	.word	0x0803832c
 8022d04:	0803bc9c 	.word	0x0803bc9c
 8022d08:	080382a0 	.word	0x080382a0

08022d0c <mpn_addmul_1>:

mp_limb_t
mpn_addmul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)
{
 8022d0c:	b580      	push	{r7, lr}
 8022d0e:	b094      	sub	sp, #80	@ 0x50
 8022d10:	af00      	add	r7, sp, #0
 8022d12:	60f8      	str	r0, [r7, #12]
 8022d14:	60b9      	str	r1, [r7, #8]
 8022d16:	607a      	str	r2, [r7, #4]
 8022d18:	603b      	str	r3, [r7, #0]
  mp_limb_t ul, cl, hpl, lpl, rl;

  assert (n >= 1);
 8022d1a:	687b      	ldr	r3, [r7, #4]
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	dc06      	bgt.n	8022d2e <mpn_addmul_1+0x22>
 8022d20:	4b40      	ldr	r3, [pc, #256]	@ (8022e24 <mpn_addmul_1+0x118>)
 8022d22:	4a41      	ldr	r2, [pc, #260]	@ (8022e28 <mpn_addmul_1+0x11c>)
 8022d24:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8022d28:	4840      	ldr	r0, [pc, #256]	@ (8022e2c <mpn_addmul_1+0x120>)
 8022d2a:	f012 fa85 	bl	8035238 <__assert_func>

  cl = 0;
 8022d2e:	2300      	movs	r3, #0
 8022d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  do
    {
      ul = *up++;
 8022d32:	68bb      	ldr	r3, [r7, #8]
 8022d34:	1d1a      	adds	r2, r3, #4
 8022d36:	60ba      	str	r2, [r7, #8]
 8022d38:	681b      	ldr	r3, [r3, #0]
 8022d3a:	647b      	str	r3, [r7, #68]	@ 0x44
      gmp_umul_ppmm (hpl, lpl, ul, vl);
 8022d3c:	2320      	movs	r3, #32
 8022d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8022d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022d44:	683b      	ldr	r3, [r7, #0]
 8022d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8022d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022d4a:	b29b      	uxth	r3, r3
 8022d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8022d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022d50:	0c1b      	lsrs	r3, r3, #16
 8022d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8022d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022d56:	b29b      	uxth	r3, r3
 8022d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022d5c:	0c1b      	lsrs	r3, r3, #16
 8022d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8022d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022d64:	fb02 f303 	mul.w	r3, r2, r3
 8022d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8022d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022d6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022d6e:	fb02 f303 	mul.w	r3, r2, r3
 8022d72:	623b      	str	r3, [r7, #32]
 8022d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022d78:	fb02 f303 	mul.w	r3, r2, r3
 8022d7c:	61fb      	str	r3, [r7, #28]
 8022d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022d82:	fb02 f303 	mul.w	r3, r2, r3
 8022d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d8a:	0c1b      	lsrs	r3, r3, #16
 8022d8c:	6a3a      	ldr	r2, [r7, #32]
 8022d8e:	4413      	add	r3, r2
 8022d90:	623b      	str	r3, [r7, #32]
 8022d92:	6a3a      	ldr	r2, [r7, #32]
 8022d94:	69fb      	ldr	r3, [r7, #28]
 8022d96:	4413      	add	r3, r2
 8022d98:	623b      	str	r3, [r7, #32]
 8022d9a:	6a3a      	ldr	r2, [r7, #32]
 8022d9c:	69fb      	ldr	r3, [r7, #28]
 8022d9e:	429a      	cmp	r2, r3
 8022da0:	d203      	bcs.n	8022daa <mpn_addmul_1+0x9e>
 8022da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022da4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8022da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022daa:	6a3b      	ldr	r3, [r7, #32]
 8022dac:	0c1b      	lsrs	r3, r3, #16
 8022dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022db0:	4413      	add	r3, r2
 8022db2:	61bb      	str	r3, [r7, #24]
 8022db4:	6a3b      	ldr	r3, [r7, #32]
 8022db6:	041a      	lsls	r2, r3, #16
 8022db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022dba:	b29b      	uxth	r3, r3
 8022dbc:	4413      	add	r3, r2
 8022dbe:	617b      	str	r3, [r7, #20]

      lpl += cl;
 8022dc0:	697a      	ldr	r2, [r7, #20]
 8022dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022dc4:	4413      	add	r3, r2
 8022dc6:	617b      	str	r3, [r7, #20]
      cl = (lpl < cl) + hpl;
 8022dc8:	697a      	ldr	r2, [r7, #20]
 8022dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022dcc:	429a      	cmp	r2, r3
 8022dce:	bf34      	ite	cc
 8022dd0:	2301      	movcc	r3, #1
 8022dd2:	2300      	movcs	r3, #0
 8022dd4:	b2db      	uxtb	r3, r3
 8022dd6:	461a      	mov	r2, r3
 8022dd8:	69bb      	ldr	r3, [r7, #24]
 8022dda:	4413      	add	r3, r2
 8022ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c

      rl = *rp;
 8022dde:	68fb      	ldr	r3, [r7, #12]
 8022de0:	681b      	ldr	r3, [r3, #0]
 8022de2:	613b      	str	r3, [r7, #16]
      lpl = rl + lpl;
 8022de4:	697a      	ldr	r2, [r7, #20]
 8022de6:	693b      	ldr	r3, [r7, #16]
 8022de8:	4413      	add	r3, r2
 8022dea:	617b      	str	r3, [r7, #20]
      cl += lpl < rl;
 8022dec:	697a      	ldr	r2, [r7, #20]
 8022dee:	693b      	ldr	r3, [r7, #16]
 8022df0:	429a      	cmp	r2, r3
 8022df2:	bf34      	ite	cc
 8022df4:	2301      	movcc	r3, #1
 8022df6:	2300      	movcs	r3, #0
 8022df8:	b2db      	uxtb	r3, r3
 8022dfa:	461a      	mov	r2, r3
 8022dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022dfe:	4413      	add	r3, r2
 8022e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
      *rp++ = lpl;
 8022e02:	68fb      	ldr	r3, [r7, #12]
 8022e04:	1d1a      	adds	r2, r3, #4
 8022e06:	60fa      	str	r2, [r7, #12]
 8022e08:	697a      	ldr	r2, [r7, #20]
 8022e0a:	601a      	str	r2, [r3, #0]
    }
  while (--n != 0);
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	3b01      	subs	r3, #1
 8022e10:	607b      	str	r3, [r7, #4]
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	d18c      	bne.n	8022d32 <mpn_addmul_1+0x26>

  return cl;
 8022e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	3750      	adds	r7, #80	@ 0x50
 8022e1e:	46bd      	mov	sp, r7
 8022e20:	bd80      	pop	{r7, pc}
 8022e22:	bf00      	nop
 8022e24:	0803832c 	.word	0x0803832c
 8022e28:	0803bca8 	.word	0x0803bca8
 8022e2c:	080382a0 	.word	0x080382a0

08022e30 <mpn_submul_1>:

mp_limb_t
mpn_submul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)
{
 8022e30:	b580      	push	{r7, lr}
 8022e32:	b094      	sub	sp, #80	@ 0x50
 8022e34:	af00      	add	r7, sp, #0
 8022e36:	60f8      	str	r0, [r7, #12]
 8022e38:	60b9      	str	r1, [r7, #8]
 8022e3a:	607a      	str	r2, [r7, #4]
 8022e3c:	603b      	str	r3, [r7, #0]
  mp_limb_t ul, cl, hpl, lpl, rl;

  assert (n >= 1);
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	dc06      	bgt.n	8022e52 <mpn_submul_1+0x22>
 8022e44:	4b40      	ldr	r3, [pc, #256]	@ (8022f48 <mpn_submul_1+0x118>)
 8022e46:	4a41      	ldr	r2, [pc, #260]	@ (8022f4c <mpn_submul_1+0x11c>)
 8022e48:	f240 2162 	movw	r1, #610	@ 0x262
 8022e4c:	4840      	ldr	r0, [pc, #256]	@ (8022f50 <mpn_submul_1+0x120>)
 8022e4e:	f012 f9f3 	bl	8035238 <__assert_func>

  cl = 0;
 8022e52:	2300      	movs	r3, #0
 8022e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  do
    {
      ul = *up++;
 8022e56:	68bb      	ldr	r3, [r7, #8]
 8022e58:	1d1a      	adds	r2, r3, #4
 8022e5a:	60ba      	str	r2, [r7, #8]
 8022e5c:	681b      	ldr	r3, [r3, #0]
 8022e5e:	647b      	str	r3, [r7, #68]	@ 0x44
      gmp_umul_ppmm (hpl, lpl, ul, vl);
 8022e60:	2320      	movs	r3, #32
 8022e62:	643b      	str	r3, [r7, #64]	@ 0x40
 8022e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022e68:	683b      	ldr	r3, [r7, #0]
 8022e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8022e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022e6e:	b29b      	uxth	r3, r3
 8022e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8022e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022e74:	0c1b      	lsrs	r3, r3, #16
 8022e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8022e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022e7a:	b29b      	uxth	r3, r3
 8022e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022e80:	0c1b      	lsrs	r3, r3, #16
 8022e82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8022e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022e88:	fb02 f303 	mul.w	r3, r2, r3
 8022e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8022e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022e92:	fb02 f303 	mul.w	r3, r2, r3
 8022e96:	623b      	str	r3, [r7, #32]
 8022e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022e9c:	fb02 f303 	mul.w	r3, r2, r3
 8022ea0:	61fb      	str	r3, [r7, #28]
 8022ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022ea6:	fb02 f303 	mul.w	r3, r2, r3
 8022eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022eae:	0c1b      	lsrs	r3, r3, #16
 8022eb0:	6a3a      	ldr	r2, [r7, #32]
 8022eb2:	4413      	add	r3, r2
 8022eb4:	623b      	str	r3, [r7, #32]
 8022eb6:	6a3a      	ldr	r2, [r7, #32]
 8022eb8:	69fb      	ldr	r3, [r7, #28]
 8022eba:	4413      	add	r3, r2
 8022ebc:	623b      	str	r3, [r7, #32]
 8022ebe:	6a3a      	ldr	r2, [r7, #32]
 8022ec0:	69fb      	ldr	r3, [r7, #28]
 8022ec2:	429a      	cmp	r2, r3
 8022ec4:	d203      	bcs.n	8022ece <mpn_submul_1+0x9e>
 8022ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022ec8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8022ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022ece:	6a3b      	ldr	r3, [r7, #32]
 8022ed0:	0c1b      	lsrs	r3, r3, #16
 8022ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022ed4:	4413      	add	r3, r2
 8022ed6:	61bb      	str	r3, [r7, #24]
 8022ed8:	6a3b      	ldr	r3, [r7, #32]
 8022eda:	041a      	lsls	r2, r3, #16
 8022edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022ede:	b29b      	uxth	r3, r3
 8022ee0:	4413      	add	r3, r2
 8022ee2:	617b      	str	r3, [r7, #20]

      lpl += cl;
 8022ee4:	697a      	ldr	r2, [r7, #20]
 8022ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022ee8:	4413      	add	r3, r2
 8022eea:	617b      	str	r3, [r7, #20]
      cl = (lpl < cl) + hpl;
 8022eec:	697a      	ldr	r2, [r7, #20]
 8022eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022ef0:	429a      	cmp	r2, r3
 8022ef2:	bf34      	ite	cc
 8022ef4:	2301      	movcc	r3, #1
 8022ef6:	2300      	movcs	r3, #0
 8022ef8:	b2db      	uxtb	r3, r3
 8022efa:	461a      	mov	r2, r3
 8022efc:	69bb      	ldr	r3, [r7, #24]
 8022efe:	4413      	add	r3, r2
 8022f00:	64fb      	str	r3, [r7, #76]	@ 0x4c

      rl = *rp;
 8022f02:	68fb      	ldr	r3, [r7, #12]
 8022f04:	681b      	ldr	r3, [r3, #0]
 8022f06:	613b      	str	r3, [r7, #16]
      lpl = rl - lpl;
 8022f08:	693a      	ldr	r2, [r7, #16]
 8022f0a:	697b      	ldr	r3, [r7, #20]
 8022f0c:	1ad3      	subs	r3, r2, r3
 8022f0e:	617b      	str	r3, [r7, #20]
      cl += lpl > rl;
 8022f10:	697a      	ldr	r2, [r7, #20]
 8022f12:	693b      	ldr	r3, [r7, #16]
 8022f14:	429a      	cmp	r2, r3
 8022f16:	bf8c      	ite	hi
 8022f18:	2301      	movhi	r3, #1
 8022f1a:	2300      	movls	r3, #0
 8022f1c:	b2db      	uxtb	r3, r3
 8022f1e:	461a      	mov	r2, r3
 8022f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022f22:	4413      	add	r3, r2
 8022f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
      *rp++ = lpl;
 8022f26:	68fb      	ldr	r3, [r7, #12]
 8022f28:	1d1a      	adds	r2, r3, #4
 8022f2a:	60fa      	str	r2, [r7, #12]
 8022f2c:	697a      	ldr	r2, [r7, #20]
 8022f2e:	601a      	str	r2, [r3, #0]
    }
  while (--n != 0);
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	3b01      	subs	r3, #1
 8022f34:	607b      	str	r3, [r7, #4]
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	2b00      	cmp	r3, #0
 8022f3a:	d18c      	bne.n	8022e56 <mpn_submul_1+0x26>

  return cl;
 8022f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8022f3e:	4618      	mov	r0, r3
 8022f40:	3750      	adds	r7, #80	@ 0x50
 8022f42:	46bd      	mov	sp, r7
 8022f44:	bd80      	pop	{r7, pc}
 8022f46:	bf00      	nop
 8022f48:	0803832c 	.word	0x0803832c
 8022f4c:	0803bcb8 	.word	0x0803bcb8
 8022f50:	080382a0 	.word	0x080382a0

08022f54 <mpn_mul>:

mp_limb_t
mpn_mul (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_srcptr vp, mp_size_t vn)
{
 8022f54:	b590      	push	{r4, r7, lr}
 8022f56:	b085      	sub	sp, #20
 8022f58:	af00      	add	r7, sp, #0
 8022f5a:	60f8      	str	r0, [r7, #12]
 8022f5c:	60b9      	str	r1, [r7, #8]
 8022f5e:	607a      	str	r2, [r7, #4]
 8022f60:	603b      	str	r3, [r7, #0]
  assert (un >= vn);
 8022f62:	687a      	ldr	r2, [r7, #4]
 8022f64:	6a3b      	ldr	r3, [r7, #32]
 8022f66:	429a      	cmp	r2, r3
 8022f68:	da06      	bge.n	8022f78 <mpn_mul+0x24>
 8022f6a:	4b38      	ldr	r3, [pc, #224]	@ (802304c <mpn_mul+0xf8>)
 8022f6c:	4a38      	ldr	r2, [pc, #224]	@ (8023050 <mpn_mul+0xfc>)
 8022f6e:	f240 217a 	movw	r1, #634	@ 0x27a
 8022f72:	4838      	ldr	r0, [pc, #224]	@ (8023054 <mpn_mul+0x100>)
 8022f74:	f012 f960 	bl	8035238 <__assert_func>
  assert (vn >= 1);
 8022f78:	6a3b      	ldr	r3, [r7, #32]
 8022f7a:	2b00      	cmp	r3, #0
 8022f7c:	dc06      	bgt.n	8022f8c <mpn_mul+0x38>
 8022f7e:	4b36      	ldr	r3, [pc, #216]	@ (8023058 <mpn_mul+0x104>)
 8022f80:	4a33      	ldr	r2, [pc, #204]	@ (8023050 <mpn_mul+0xfc>)
 8022f82:	f240 217b 	movw	r1, #635	@ 0x27b
 8022f86:	4833      	ldr	r0, [pc, #204]	@ (8023054 <mpn_mul+0x100>)
 8022f88:	f012 f956 	bl	8035238 <__assert_func>
  assert (!GMP_MPN_OVERLAP_P(rp, un + vn, up, un));
 8022f8c:	687a      	ldr	r2, [r7, #4]
 8022f8e:	6a3b      	ldr	r3, [r7, #32]
 8022f90:	4413      	add	r3, r2
 8022f92:	009b      	lsls	r3, r3, #2
 8022f94:	68fa      	ldr	r2, [r7, #12]
 8022f96:	4413      	add	r3, r2
 8022f98:	68ba      	ldr	r2, [r7, #8]
 8022f9a:	429a      	cmp	r2, r3
 8022f9c:	d20d      	bcs.n	8022fba <mpn_mul+0x66>
 8022f9e:	687b      	ldr	r3, [r7, #4]
 8022fa0:	009b      	lsls	r3, r3, #2
 8022fa2:	68ba      	ldr	r2, [r7, #8]
 8022fa4:	4413      	add	r3, r2
 8022fa6:	68fa      	ldr	r2, [r7, #12]
 8022fa8:	429a      	cmp	r2, r3
 8022faa:	d206      	bcs.n	8022fba <mpn_mul+0x66>
 8022fac:	4b2b      	ldr	r3, [pc, #172]	@ (802305c <mpn_mul+0x108>)
 8022fae:	4a28      	ldr	r2, [pc, #160]	@ (8023050 <mpn_mul+0xfc>)
 8022fb0:	f44f 711f 	mov.w	r1, #636	@ 0x27c
 8022fb4:	4827      	ldr	r0, [pc, #156]	@ (8023054 <mpn_mul+0x100>)
 8022fb6:	f012 f93f 	bl	8035238 <__assert_func>
  assert (!GMP_MPN_OVERLAP_P(rp, un + vn, vp, vn));
 8022fba:	687a      	ldr	r2, [r7, #4]
 8022fbc:	6a3b      	ldr	r3, [r7, #32]
 8022fbe:	4413      	add	r3, r2
 8022fc0:	009b      	lsls	r3, r3, #2
 8022fc2:	68fa      	ldr	r2, [r7, #12]
 8022fc4:	4413      	add	r3, r2
 8022fc6:	683a      	ldr	r2, [r7, #0]
 8022fc8:	429a      	cmp	r2, r3
 8022fca:	d20d      	bcs.n	8022fe8 <mpn_mul+0x94>
 8022fcc:	6a3b      	ldr	r3, [r7, #32]
 8022fce:	009b      	lsls	r3, r3, #2
 8022fd0:	683a      	ldr	r2, [r7, #0]
 8022fd2:	4413      	add	r3, r2
 8022fd4:	68fa      	ldr	r2, [r7, #12]
 8022fd6:	429a      	cmp	r2, r3
 8022fd8:	d206      	bcs.n	8022fe8 <mpn_mul+0x94>
 8022fda:	4b21      	ldr	r3, [pc, #132]	@ (8023060 <mpn_mul+0x10c>)
 8022fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8023050 <mpn_mul+0xfc>)
 8022fde:	f240 217d 	movw	r1, #637	@ 0x27d
 8022fe2:	481c      	ldr	r0, [pc, #112]	@ (8023054 <mpn_mul+0x100>)
 8022fe4:	f012 f928 	bl	8035238 <__assert_func>

  /* We first multiply by the low order limb. This result can be
     stored, not added, to rp. We also avoid a loop for zeroing this
     way. */

  rp[un] = mpn_mul_1 (rp, up, un, vp[0]);
 8022fe8:	683b      	ldr	r3, [r7, #0]
 8022fea:	6819      	ldr	r1, [r3, #0]
 8022fec:	687b      	ldr	r3, [r7, #4]
 8022fee:	009b      	lsls	r3, r3, #2
 8022ff0:	68fa      	ldr	r2, [r7, #12]
 8022ff2:	18d4      	adds	r4, r2, r3
 8022ff4:	460b      	mov	r3, r1
 8022ff6:	687a      	ldr	r2, [r7, #4]
 8022ff8:	68b9      	ldr	r1, [r7, #8]
 8022ffa:	68f8      	ldr	r0, [r7, #12]
 8022ffc:	f7ff fe06 	bl	8022c0c <mpn_mul_1>
 8023000:	4603      	mov	r3, r0
 8023002:	6023      	str	r3, [r4, #0]

  /* Now accumulate the product of up[] and the next higher limb from
     vp[]. */

  while (--vn >= 1)
 8023004:	e013      	b.n	802302e <mpn_mul+0xda>
    {
      rp += 1, vp += 1;
 8023006:	68fb      	ldr	r3, [r7, #12]
 8023008:	3304      	adds	r3, #4
 802300a:	60fb      	str	r3, [r7, #12]
 802300c:	683b      	ldr	r3, [r7, #0]
 802300e:	3304      	adds	r3, #4
 8023010:	603b      	str	r3, [r7, #0]
      rp[un] = mpn_addmul_1 (rp, up, un, vp[0]);
 8023012:	683b      	ldr	r3, [r7, #0]
 8023014:	6819      	ldr	r1, [r3, #0]
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	009b      	lsls	r3, r3, #2
 802301a:	68fa      	ldr	r2, [r7, #12]
 802301c:	18d4      	adds	r4, r2, r3
 802301e:	460b      	mov	r3, r1
 8023020:	687a      	ldr	r2, [r7, #4]
 8023022:	68b9      	ldr	r1, [r7, #8]
 8023024:	68f8      	ldr	r0, [r7, #12]
 8023026:	f7ff fe71 	bl	8022d0c <mpn_addmul_1>
 802302a:	4603      	mov	r3, r0
 802302c:	6023      	str	r3, [r4, #0]
  while (--vn >= 1)
 802302e:	6a3b      	ldr	r3, [r7, #32]
 8023030:	3b01      	subs	r3, #1
 8023032:	623b      	str	r3, [r7, #32]
 8023034:	6a3b      	ldr	r3, [r7, #32]
 8023036:	2b00      	cmp	r3, #0
 8023038:	dce5      	bgt.n	8023006 <mpn_mul+0xb2>
    }
  return rp[un];
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	009b      	lsls	r3, r3, #2
 802303e:	68fa      	ldr	r2, [r7, #12]
 8023040:	4413      	add	r3, r2
 8023042:	681b      	ldr	r3, [r3, #0]
}
 8023044:	4618      	mov	r0, r3
 8023046:	3714      	adds	r7, #20
 8023048:	46bd      	mov	sp, r7
 802304a:	bd90      	pop	{r4, r7, pc}
 802304c:	08038334 	.word	0x08038334
 8023050:	0803bcc8 	.word	0x0803bcc8
 8023054:	080382a0 	.word	0x080382a0
 8023058:	08038340 	.word	0x08038340
 802305c:	08038348 	.word	0x08038348
 8023060:	08038370 	.word	0x08038370

08023064 <mpn_lshift>:
  mpn_mul (rp, ap, n, ap, n);
}

mp_limb_t
mpn_lshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)
{
 8023064:	b580      	push	{r7, lr}
 8023066:	b088      	sub	sp, #32
 8023068:	af00      	add	r7, sp, #0
 802306a:	60f8      	str	r0, [r7, #12]
 802306c:	60b9      	str	r1, [r7, #8]
 802306e:	607a      	str	r2, [r7, #4]
 8023070:	603b      	str	r3, [r7, #0]
  mp_limb_t high_limb, low_limb;
  unsigned int tnc;
  mp_limb_t retval;

  assert (n >= 1);
 8023072:	687b      	ldr	r3, [r7, #4]
 8023074:	2b00      	cmp	r3, #0
 8023076:	dc06      	bgt.n	8023086 <mpn_lshift+0x22>
 8023078:	4b2f      	ldr	r3, [pc, #188]	@ (8023138 <mpn_lshift+0xd4>)
 802307a:	4a30      	ldr	r2, [pc, #192]	@ (802313c <mpn_lshift+0xd8>)
 802307c:	f240 21a3 	movw	r1, #675	@ 0x2a3
 8023080:	482f      	ldr	r0, [pc, #188]	@ (8023140 <mpn_lshift+0xdc>)
 8023082:	f012 f8d9 	bl	8035238 <__assert_func>
  assert (cnt >= 1);
 8023086:	683b      	ldr	r3, [r7, #0]
 8023088:	2b00      	cmp	r3, #0
 802308a:	d106      	bne.n	802309a <mpn_lshift+0x36>
 802308c:	4b2d      	ldr	r3, [pc, #180]	@ (8023144 <mpn_lshift+0xe0>)
 802308e:	4a2b      	ldr	r2, [pc, #172]	@ (802313c <mpn_lshift+0xd8>)
 8023090:	f44f 7129 	mov.w	r1, #676	@ 0x2a4
 8023094:	482a      	ldr	r0, [pc, #168]	@ (8023140 <mpn_lshift+0xdc>)
 8023096:	f012 f8cf 	bl	8035238 <__assert_func>
  assert (cnt < GMP_LIMB_BITS);
 802309a:	683b      	ldr	r3, [r7, #0]
 802309c:	2b1f      	cmp	r3, #31
 802309e:	d906      	bls.n	80230ae <mpn_lshift+0x4a>
 80230a0:	4b29      	ldr	r3, [pc, #164]	@ (8023148 <mpn_lshift+0xe4>)
 80230a2:	4a26      	ldr	r2, [pc, #152]	@ (802313c <mpn_lshift+0xd8>)
 80230a4:	f240 21a5 	movw	r1, #677	@ 0x2a5
 80230a8:	4825      	ldr	r0, [pc, #148]	@ (8023140 <mpn_lshift+0xdc>)
 80230aa:	f012 f8c5 	bl	8035238 <__assert_func>

  up += n;
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	009b      	lsls	r3, r3, #2
 80230b2:	68ba      	ldr	r2, [r7, #8]
 80230b4:	4413      	add	r3, r2
 80230b6:	60bb      	str	r3, [r7, #8]
  rp += n;
 80230b8:	687b      	ldr	r3, [r7, #4]
 80230ba:	009b      	lsls	r3, r3, #2
 80230bc:	68fa      	ldr	r2, [r7, #12]
 80230be:	4413      	add	r3, r2
 80230c0:	60fb      	str	r3, [r7, #12]

  tnc = GMP_LIMB_BITS - cnt;
 80230c2:	683b      	ldr	r3, [r7, #0]
 80230c4:	f1c3 0320 	rsb	r3, r3, #32
 80230c8:	61bb      	str	r3, [r7, #24]
  low_limb = *--up;
 80230ca:	68bb      	ldr	r3, [r7, #8]
 80230cc:	3b04      	subs	r3, #4
 80230ce:	60bb      	str	r3, [r7, #8]
 80230d0:	68bb      	ldr	r3, [r7, #8]
 80230d2:	681b      	ldr	r3, [r3, #0]
 80230d4:	617b      	str	r3, [r7, #20]
  retval = low_limb >> tnc;
 80230d6:	697a      	ldr	r2, [r7, #20]
 80230d8:	69bb      	ldr	r3, [r7, #24]
 80230da:	fa22 f303 	lsr.w	r3, r2, r3
 80230de:	613b      	str	r3, [r7, #16]
  high_limb = (low_limb << cnt);
 80230e0:	697a      	ldr	r2, [r7, #20]
 80230e2:	683b      	ldr	r3, [r7, #0]
 80230e4:	fa02 f303 	lsl.w	r3, r2, r3
 80230e8:	61fb      	str	r3, [r7, #28]

  while (--n != 0)
 80230ea:	e014      	b.n	8023116 <mpn_lshift+0xb2>
    {
      low_limb = *--up;
 80230ec:	68bb      	ldr	r3, [r7, #8]
 80230ee:	3b04      	subs	r3, #4
 80230f0:	60bb      	str	r3, [r7, #8]
 80230f2:	68bb      	ldr	r3, [r7, #8]
 80230f4:	681b      	ldr	r3, [r3, #0]
 80230f6:	617b      	str	r3, [r7, #20]
      *--rp = high_limb | (low_limb >> tnc);
 80230f8:	697a      	ldr	r2, [r7, #20]
 80230fa:	69bb      	ldr	r3, [r7, #24]
 80230fc:	40da      	lsrs	r2, r3
 80230fe:	68fb      	ldr	r3, [r7, #12]
 8023100:	3b04      	subs	r3, #4
 8023102:	60fb      	str	r3, [r7, #12]
 8023104:	69fb      	ldr	r3, [r7, #28]
 8023106:	431a      	orrs	r2, r3
 8023108:	68fb      	ldr	r3, [r7, #12]
 802310a:	601a      	str	r2, [r3, #0]
      high_limb = (low_limb << cnt);
 802310c:	697a      	ldr	r2, [r7, #20]
 802310e:	683b      	ldr	r3, [r7, #0]
 8023110:	fa02 f303 	lsl.w	r3, r2, r3
 8023114:	61fb      	str	r3, [r7, #28]
  while (--n != 0)
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	3b01      	subs	r3, #1
 802311a:	607b      	str	r3, [r7, #4]
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	2b00      	cmp	r3, #0
 8023120:	d1e4      	bne.n	80230ec <mpn_lshift+0x88>
    }
  *--rp = high_limb;
 8023122:	68fb      	ldr	r3, [r7, #12]
 8023124:	3b04      	subs	r3, #4
 8023126:	60fb      	str	r3, [r7, #12]
 8023128:	68fb      	ldr	r3, [r7, #12]
 802312a:	69fa      	ldr	r2, [r7, #28]
 802312c:	601a      	str	r2, [r3, #0]

  return retval;
 802312e:	693b      	ldr	r3, [r7, #16]
}
 8023130:	4618      	mov	r0, r3
 8023132:	3720      	adds	r7, #32
 8023134:	46bd      	mov	sp, r7
 8023136:	bd80      	pop	{r7, pc}
 8023138:	0803832c 	.word	0x0803832c
 802313c:	0803bcd0 	.word	0x0803bcd0
 8023140:	080382a0 	.word	0x080382a0
 8023144:	08038398 	.word	0x08038398
 8023148:	080383a4 	.word	0x080383a4

0802314c <mpn_rshift>:

mp_limb_t
mpn_rshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)
{
 802314c:	b580      	push	{r7, lr}
 802314e:	b088      	sub	sp, #32
 8023150:	af00      	add	r7, sp, #0
 8023152:	60f8      	str	r0, [r7, #12]
 8023154:	60b9      	str	r1, [r7, #8]
 8023156:	607a      	str	r2, [r7, #4]
 8023158:	603b      	str	r3, [r7, #0]
  mp_limb_t high_limb, low_limb;
  unsigned int tnc;
  mp_limb_t retval;

  assert (n >= 1);
 802315a:	687b      	ldr	r3, [r7, #4]
 802315c:	2b00      	cmp	r3, #0
 802315e:	dc06      	bgt.n	802316e <mpn_rshift+0x22>
 8023160:	4b28      	ldr	r3, [pc, #160]	@ (8023204 <mpn_rshift+0xb8>)
 8023162:	4a29      	ldr	r2, [pc, #164]	@ (8023208 <mpn_rshift+0xbc>)
 8023164:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8023168:	4828      	ldr	r0, [pc, #160]	@ (802320c <mpn_rshift+0xc0>)
 802316a:	f012 f865 	bl	8035238 <__assert_func>
  assert (cnt >= 1);
 802316e:	683b      	ldr	r3, [r7, #0]
 8023170:	2b00      	cmp	r3, #0
 8023172:	d106      	bne.n	8023182 <mpn_rshift+0x36>
 8023174:	4b26      	ldr	r3, [pc, #152]	@ (8023210 <mpn_rshift+0xc4>)
 8023176:	4a24      	ldr	r2, [pc, #144]	@ (8023208 <mpn_rshift+0xbc>)
 8023178:	f240 21c2 	movw	r1, #706	@ 0x2c2
 802317c:	4823      	ldr	r0, [pc, #140]	@ (802320c <mpn_rshift+0xc0>)
 802317e:	f012 f85b 	bl	8035238 <__assert_func>
  assert (cnt < GMP_LIMB_BITS);
 8023182:	683b      	ldr	r3, [r7, #0]
 8023184:	2b1f      	cmp	r3, #31
 8023186:	d906      	bls.n	8023196 <mpn_rshift+0x4a>
 8023188:	4b22      	ldr	r3, [pc, #136]	@ (8023214 <mpn_rshift+0xc8>)
 802318a:	4a1f      	ldr	r2, [pc, #124]	@ (8023208 <mpn_rshift+0xbc>)
 802318c:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8023190:	481e      	ldr	r0, [pc, #120]	@ (802320c <mpn_rshift+0xc0>)
 8023192:	f012 f851 	bl	8035238 <__assert_func>

  tnc = GMP_LIMB_BITS - cnt;
 8023196:	683b      	ldr	r3, [r7, #0]
 8023198:	f1c3 0320 	rsb	r3, r3, #32
 802319c:	61bb      	str	r3, [r7, #24]
  high_limb = *up++;
 802319e:	68bb      	ldr	r3, [r7, #8]
 80231a0:	1d1a      	adds	r2, r3, #4
 80231a2:	60ba      	str	r2, [r7, #8]
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	617b      	str	r3, [r7, #20]
  retval = (high_limb << tnc);
 80231a8:	697a      	ldr	r2, [r7, #20]
 80231aa:	69bb      	ldr	r3, [r7, #24]
 80231ac:	fa02 f303 	lsl.w	r3, r2, r3
 80231b0:	613b      	str	r3, [r7, #16]
  low_limb = high_limb >> cnt;
 80231b2:	697a      	ldr	r2, [r7, #20]
 80231b4:	683b      	ldr	r3, [r7, #0]
 80231b6:	fa22 f303 	lsr.w	r3, r2, r3
 80231ba:	61fb      	str	r3, [r7, #28]

  while (--n != 0)
 80231bc:	e013      	b.n	80231e6 <mpn_rshift+0x9a>
    {
      high_limb = *up++;
 80231be:	68bb      	ldr	r3, [r7, #8]
 80231c0:	1d1a      	adds	r2, r3, #4
 80231c2:	60ba      	str	r2, [r7, #8]
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	617b      	str	r3, [r7, #20]
      *rp++ = low_limb | (high_limb << tnc);
 80231c8:	697a      	ldr	r2, [r7, #20]
 80231ca:	69bb      	ldr	r3, [r7, #24]
 80231cc:	fa02 f103 	lsl.w	r1, r2, r3
 80231d0:	68fb      	ldr	r3, [r7, #12]
 80231d2:	1d1a      	adds	r2, r3, #4
 80231d4:	60fa      	str	r2, [r7, #12]
 80231d6:	69fa      	ldr	r2, [r7, #28]
 80231d8:	430a      	orrs	r2, r1
 80231da:	601a      	str	r2, [r3, #0]
      low_limb = high_limb >> cnt;
 80231dc:	697a      	ldr	r2, [r7, #20]
 80231de:	683b      	ldr	r3, [r7, #0]
 80231e0:	fa22 f303 	lsr.w	r3, r2, r3
 80231e4:	61fb      	str	r3, [r7, #28]
  while (--n != 0)
 80231e6:	687b      	ldr	r3, [r7, #4]
 80231e8:	3b01      	subs	r3, #1
 80231ea:	607b      	str	r3, [r7, #4]
 80231ec:	687b      	ldr	r3, [r7, #4]
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	d1e5      	bne.n	80231be <mpn_rshift+0x72>
    }
  *rp = low_limb;
 80231f2:	68fb      	ldr	r3, [r7, #12]
 80231f4:	69fa      	ldr	r2, [r7, #28]
 80231f6:	601a      	str	r2, [r3, #0]

  return retval;
 80231f8:	693b      	ldr	r3, [r7, #16]
}
 80231fa:	4618      	mov	r0, r3
 80231fc:	3720      	adds	r7, #32
 80231fe:	46bd      	mov	sp, r7
 8023200:	bd80      	pop	{r7, pc}
 8023202:	bf00      	nop
 8023204:	0803832c 	.word	0x0803832c
 8023208:	0803bcdc 	.word	0x0803bcdc
 802320c:	080382a0 	.word	0x080382a0
 8023210:	08038398 	.word	0x08038398
 8023214:	080383a4 	.word	0x080383a4

08023218 <mpn_common_scan>:

static mp_bitcnt_t
mpn_common_scan (mp_limb_t limb, mp_size_t i, mp_srcptr up, mp_size_t un,
		 mp_limb_t ux)
{
 8023218:	b580      	push	{r7, lr}
 802321a:	b08a      	sub	sp, #40	@ 0x28
 802321c:	af00      	add	r7, sp, #0
 802321e:	60f8      	str	r0, [r7, #12]
 8023220:	60b9      	str	r1, [r7, #8]
 8023222:	607a      	str	r2, [r7, #4]
 8023224:	603b      	str	r3, [r7, #0]
  unsigned cnt;

  assert (ux == 0 || ux == GMP_LIMB_MAX);
 8023226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023228:	2b00      	cmp	r3, #0
 802322a:	d00a      	beq.n	8023242 <mpn_common_scan+0x2a>
 802322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023232:	d006      	beq.n	8023242 <mpn_common_scan+0x2a>
 8023234:	4b32      	ldr	r3, [pc, #200]	@ (8023300 <mpn_common_scan+0xe8>)
 8023236:	4a33      	ldr	r2, [pc, #204]	@ (8023304 <mpn_common_scan+0xec>)
 8023238:	f240 21db 	movw	r1, #731	@ 0x2db
 802323c:	4832      	ldr	r0, [pc, #200]	@ (8023308 <mpn_common_scan+0xf0>)
 802323e:	f011 fffb 	bl	8035238 <__assert_func>
  assert (0 <= i && i <= un );
 8023242:	68bb      	ldr	r3, [r7, #8]
 8023244:	2b00      	cmp	r3, #0
 8023246:	db03      	blt.n	8023250 <mpn_common_scan+0x38>
 8023248:	68ba      	ldr	r2, [r7, #8]
 802324a:	683b      	ldr	r3, [r7, #0]
 802324c:	429a      	cmp	r2, r3
 802324e:	dd1e      	ble.n	802328e <mpn_common_scan+0x76>
 8023250:	4b2e      	ldr	r3, [pc, #184]	@ (802330c <mpn_common_scan+0xf4>)
 8023252:	4a2c      	ldr	r2, [pc, #176]	@ (8023304 <mpn_common_scan+0xec>)
 8023254:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8023258:	482b      	ldr	r0, [pc, #172]	@ (8023308 <mpn_common_scan+0xf0>)
 802325a:	f011 ffed 	bl	8035238 <__assert_func>

  while (limb == 0)
    {
      i++;
 802325e:	68bb      	ldr	r3, [r7, #8]
 8023260:	3301      	adds	r3, #1
 8023262:	60bb      	str	r3, [r7, #8]
      if (i == un)
 8023264:	68ba      	ldr	r2, [r7, #8]
 8023266:	683b      	ldr	r3, [r7, #0]
 8023268:	429a      	cmp	r2, r3
 802326a:	d108      	bne.n	802327e <mpn_common_scan+0x66>
	return (ux == 0 ? ~(mp_bitcnt_t) 0 : un * GMP_LIMB_BITS);
 802326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802326e:	2b00      	cmp	r3, #0
 8023270:	d002      	beq.n	8023278 <mpn_common_scan+0x60>
 8023272:	683b      	ldr	r3, [r7, #0]
 8023274:	015b      	lsls	r3, r3, #5
 8023276:	e03e      	b.n	80232f6 <mpn_common_scan+0xde>
 8023278:	f04f 33ff 	mov.w	r3, #4294967295
 802327c:	e03b      	b.n	80232f6 <mpn_common_scan+0xde>
      limb = ux ^ up[i];
 802327e:	68bb      	ldr	r3, [r7, #8]
 8023280:	009b      	lsls	r3, r3, #2
 8023282:	687a      	ldr	r2, [r7, #4]
 8023284:	4413      	add	r3, r2
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802328a:	4053      	eors	r3, r2
 802328c:	60fb      	str	r3, [r7, #12]
  while (limb == 0)
 802328e:	68fb      	ldr	r3, [r7, #12]
 8023290:	2b00      	cmp	r3, #0
 8023292:	d0e4      	beq.n	802325e <mpn_common_scan+0x46>
    }
  gmp_ctz (cnt, limb);
 8023294:	68fb      	ldr	r3, [r7, #12]
 8023296:	61fb      	str	r3, [r7, #28]
 8023298:	2300      	movs	r3, #0
 802329a:	61bb      	str	r3, [r7, #24]
 802329c:	69fb      	ldr	r3, [r7, #28]
 802329e:	425b      	negs	r3, r3
 80232a0:	69fa      	ldr	r2, [r7, #28]
 80232a2:	4013      	ands	r3, r2
 80232a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80232a6:	2300      	movs	r3, #0
 80232a8:	623b      	str	r3, [r7, #32]
 80232aa:	2308      	movs	r3, #8
 80232ac:	617b      	str	r3, [r7, #20]
 80232ae:	697b      	ldr	r3, [r7, #20]
 80232b0:	2b1f      	cmp	r3, #31
 80232b2:	dc13      	bgt.n	80232dc <mpn_common_scan+0xc4>
 80232b4:	e007      	b.n	80232c6 <mpn_common_scan+0xae>
 80232b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80232b8:	697b      	ldr	r3, [r7, #20]
 80232ba:	fa02 f303 	lsl.w	r3, r2, r3
 80232be:	627b      	str	r3, [r7, #36]	@ 0x24
 80232c0:	6a3b      	ldr	r3, [r7, #32]
 80232c2:	3308      	adds	r3, #8
 80232c4:	623b      	str	r3, [r7, #32]
 80232c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80232c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80232cc:	d3f3      	bcc.n	80232b6 <mpn_common_scan+0x9e>
 80232ce:	e005      	b.n	80232dc <mpn_common_scan+0xc4>
 80232d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80232d2:	005b      	lsls	r3, r3, #1
 80232d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80232d6:	6a3b      	ldr	r3, [r7, #32]
 80232d8:	3301      	adds	r3, #1
 80232da:	623b      	str	r3, [r7, #32]
 80232dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80232de:	2b00      	cmp	r3, #0
 80232e0:	daf6      	bge.n	80232d0 <mpn_common_scan+0xb8>
 80232e2:	6a3b      	ldr	r3, [r7, #32]
 80232e4:	61bb      	str	r3, [r7, #24]
 80232e6:	69bb      	ldr	r3, [r7, #24]
 80232e8:	f1c3 031f 	rsb	r3, r3, #31
 80232ec:	613b      	str	r3, [r7, #16]
  return (mp_bitcnt_t) i * GMP_LIMB_BITS + cnt;
 80232ee:	68bb      	ldr	r3, [r7, #8]
 80232f0:	015a      	lsls	r2, r3, #5
 80232f2:	693b      	ldr	r3, [r7, #16]
 80232f4:	4413      	add	r3, r2
}
 80232f6:	4618      	mov	r0, r3
 80232f8:	3728      	adds	r7, #40	@ 0x28
 80232fa:	46bd      	mov	sp, r7
 80232fc:	bd80      	pop	{r7, pc}
 80232fe:	bf00      	nop
 8023300:	080383b8 	.word	0x080383b8
 8023304:	0803bce8 	.word	0x0803bce8
 8023308:	080382a0 	.word	0x080382a0
 802330c:	080383d8 	.word	0x080383d8

08023310 <mpn_scan1>:

mp_bitcnt_t
mpn_scan1 (mp_srcptr ptr, mp_bitcnt_t bit)
{
 8023310:	b580      	push	{r7, lr}
 8023312:	b086      	sub	sp, #24
 8023314:	af02      	add	r7, sp, #8
 8023316:	6078      	str	r0, [r7, #4]
 8023318:	6039      	str	r1, [r7, #0]
  mp_size_t i;
  i = bit / GMP_LIMB_BITS;
 802331a:	683b      	ldr	r3, [r7, #0]
 802331c:	095b      	lsrs	r3, r3, #5
 802331e:	60fb      	str	r3, [r7, #12]

  return mpn_common_scan ( ptr[i] & (GMP_LIMB_MAX << (bit % GMP_LIMB_BITS)),
 8023320:	68fb      	ldr	r3, [r7, #12]
 8023322:	009b      	lsls	r3, r3, #2
 8023324:	687a      	ldr	r2, [r7, #4]
 8023326:	4413      	add	r3, r2
 8023328:	681a      	ldr	r2, [r3, #0]
 802332a:	683b      	ldr	r3, [r7, #0]
 802332c:	f003 031f 	and.w	r3, r3, #31
 8023330:	f04f 31ff 	mov.w	r1, #4294967295
 8023334:	fa01 f303 	lsl.w	r3, r1, r3
 8023338:	ea02 0003 	and.w	r0, r2, r3
 802333c:	2300      	movs	r3, #0
 802333e:	9300      	str	r3, [sp, #0]
 8023340:	68fb      	ldr	r3, [r7, #12]
 8023342:	687a      	ldr	r2, [r7, #4]
 8023344:	68f9      	ldr	r1, [r7, #12]
 8023346:	f7ff ff67 	bl	8023218 <mpn_common_scan>
 802334a:	4603      	mov	r3, r0
			  i, ptr, i, 0);
}
 802334c:	4618      	mov	r0, r3
 802334e:	3710      	adds	r7, #16
 8023350:	46bd      	mov	sp, r7
 8023352:	bd80      	pop	{r7, pc}

08023354 <mpn_invert_3by2>:

     m = floor( (B^3-1) / (B u1 + u0)) - B
*/
mp_limb_t
mpn_invert_3by2 (mp_limb_t u1, mp_limb_t u0)
{
 8023354:	b480      	push	{r7}
 8023356:	b097      	sub	sp, #92	@ 0x5c
 8023358:	af00      	add	r7, sp, #0
 802335a:	6078      	str	r0, [r7, #4]
 802335c:	6039      	str	r1, [r7, #0]
    unsigned ul, uh, qh;

    assert (sizeof (unsigned) * 2 >= sizeof (mp_limb_t));
    /* For notation, let b denote the half-limb base, so that B = b^2.
       Split u1 = b uh + ul. */
    ul = u1 & GMP_LLIMB_MASK;
 802335e:	687b      	ldr	r3, [r7, #4]
 8023360:	b29b      	uxth	r3, r3
 8023362:	643b      	str	r3, [r7, #64]	@ 0x40
    uh = u1 >> (GMP_LIMB_BITS / 2);
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	0c1b      	lsrs	r3, r3, #16
 8023368:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Approximation of the high half of quotient. Differs from the 2/1
       inverse of the half limb uh, since we have already subtracted
       u0. */
    qh = (u1 ^ GMP_LIMB_MAX) / uh;
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	43da      	mvns	r2, r3
 802336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023370:	fbb2 f3f3 	udiv	r3, r2, r3
 8023374:	64bb      	str	r3, [r7, #72]	@ 0x48
       Subtraction of qh ul may underflow, which implies adjustments.
       But by normalization, 2 u >= B > qh ul, so we need to adjust by
       at most 2.
    */

    r = ((~u1 - (mp_limb_t) qh * uh) << (GMP_LIMB_BITS / 2)) | GMP_LLIMB_MASK;
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	43da      	mvns	r2, r3
 802337a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802337c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802337e:	fb01 f303 	mul.w	r3, r1, r3
 8023382:	1ad3      	subs	r3, r2, r3
 8023384:	041b      	lsls	r3, r3, #16
 8023386:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 802338a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 802338e:	657b      	str	r3, [r7, #84]	@ 0x54

    p = (mp_limb_t) qh * ul;
 8023390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023392:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023394:	fb02 f303 	mul.w	r3, r2, r3
 8023398:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* Adjustment steps taken from udiv_qrnnd_c */
    if (r < p)
 802339a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802339e:	429a      	cmp	r2, r3
 80233a0:	d215      	bcs.n	80233ce <mpn_invert_3by2+0x7a>
      {
	qh--;
 80233a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80233a4:	3b01      	subs	r3, #1
 80233a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	r += u1;
 80233a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	4413      	add	r3, r2
 80233ae:	657b      	str	r3, [r7, #84]	@ 0x54
	if (r >= u1) /* i.e. we didn't get carry when adding to r */
 80233b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	429a      	cmp	r2, r3
 80233b6:	d30a      	bcc.n	80233ce <mpn_invert_3by2+0x7a>
	  if (r < p)
 80233b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80233ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233bc:	429a      	cmp	r2, r3
 80233be:	d206      	bcs.n	80233ce <mpn_invert_3by2+0x7a>
	    {
	      qh--;
 80233c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80233c2:	3b01      	subs	r3, #1
 80233c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	      r += u1;
 80233c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	4413      	add	r3, r2
 80233cc:	657b      	str	r3, [r7, #84]	@ 0x54
	    }
      }
    r -= p;
 80233ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80233d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233d2:	1ad3      	subs	r3, r2, r3
 80233d4:	657b      	str	r3, [r7, #84]	@ 0x54
       ql = floor ( (b r + b-1) / u1).

       This is a 3/2 division (on half-limbs), for which qh is a
       suitable inverse. */

    p = (r >> (GMP_LIMB_BITS / 2)) * qh + r;
 80233d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80233d8:	0c1b      	lsrs	r3, r3, #16
 80233da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80233dc:	fb02 f303 	mul.w	r3, r2, r3
 80233e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80233e2:	4413      	add	r3, r2
 80233e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* Unlike full-limb 3/2, we can add 1 without overflow. For this to
       work, it is essential that ql is a full mp_limb_t. */
    ql = (p >> (GMP_LIMB_BITS / 2)) + 1;
 80233e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233e8:	0c1b      	lsrs	r3, r3, #16
 80233ea:	3301      	adds	r3, #1
 80233ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* By the 3/2 trick, we don't need the high half limb. */
    r = (r << (GMP_LIMB_BITS / 2)) + GMP_LLIMB_MASK - ql * u1;
 80233ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80233f0:	041a      	lsls	r2, r3, #16
 80233f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80233f4:	6879      	ldr	r1, [r7, #4]
 80233f6:	fb01 f303 	mul.w	r3, r1, r3
 80233fa:	1ad3      	subs	r3, r2, r3
 80233fc:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8023400:	33ff      	adds	r3, #255	@ 0xff
 8023402:	657b      	str	r3, [r7, #84]	@ 0x54

    if (r >= (GMP_LIMB_MAX & (p << (GMP_LIMB_BITS / 2))))
 8023404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023406:	041b      	lsls	r3, r3, #16
 8023408:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802340a:	429a      	cmp	r2, r3
 802340c:	d306      	bcc.n	802341c <mpn_invert_3by2+0xc8>
      {
	ql--;
 802340e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023410:	3b01      	subs	r3, #1
 8023412:	64fb      	str	r3, [r7, #76]	@ 0x4c
	r += u1;
 8023414:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	4413      	add	r3, r2
 802341a:	657b      	str	r3, [r7, #84]	@ 0x54
      }
    m = ((mp_limb_t) qh << (GMP_LIMB_BITS / 2)) + ql;
 802341c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802341e:	041b      	lsls	r3, r3, #16
 8023420:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8023422:	4413      	add	r3, r2
 8023424:	653b      	str	r3, [r7, #80]	@ 0x50
    if (r >= u1)
 8023426:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	429a      	cmp	r2, r3
 802342c:	d306      	bcc.n	802343c <mpn_invert_3by2+0xe8>
      {
	m++;
 802342e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023430:	3301      	adds	r3, #1
 8023432:	653b      	str	r3, [r7, #80]	@ 0x50
	r -= u1;
 8023434:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	1ad3      	subs	r3, r2, r3
 802343a:	657b      	str	r3, [r7, #84]	@ 0x54
      }
  }

  /* Now m is the 2/1 inverse of u1. If u0 > 0, adjust it to become a
     3/2 inverse. */
  if (u0 > 0)
 802343c:	683b      	ldr	r3, [r7, #0]
 802343e:	2b00      	cmp	r3, #0
 8023440:	f000 8087 	beq.w	8023552 <mpn_invert_3by2+0x1fe>
    {
      mp_limb_t th, tl;
      r = ~r;
 8023444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023446:	43db      	mvns	r3, r3
 8023448:	657b      	str	r3, [r7, #84]	@ 0x54
      r += u0;
 802344a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802344c:	683b      	ldr	r3, [r7, #0]
 802344e:	4413      	add	r3, r2
 8023450:	657b      	str	r3, [r7, #84]	@ 0x54
      if (r < u0)
 8023452:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023454:	683b      	ldr	r3, [r7, #0]
 8023456:	429a      	cmp	r2, r3
 8023458:	d211      	bcs.n	802347e <mpn_invert_3by2+0x12a>
	{
	  m--;
 802345a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802345c:	3b01      	subs	r3, #1
 802345e:	653b      	str	r3, [r7, #80]	@ 0x50
	  if (r >= u1)
 8023460:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	429a      	cmp	r2, r3
 8023466:	d306      	bcc.n	8023476 <mpn_invert_3by2+0x122>
	    {
	      m--;
 8023468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802346a:	3b01      	subs	r3, #1
 802346c:	653b      	str	r3, [r7, #80]	@ 0x50
	      r -= u1;
 802346e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023470:	687b      	ldr	r3, [r7, #4]
 8023472:	1ad3      	subs	r3, r2, r3
 8023474:	657b      	str	r3, [r7, #84]	@ 0x54
	    }
	  r -= u1;
 8023476:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023478:	687b      	ldr	r3, [r7, #4]
 802347a:	1ad3      	subs	r3, r2, r3
 802347c:	657b      	str	r3, [r7, #84]	@ 0x54
	}
      gmp_umul_ppmm (th, tl, u0, m);
 802347e:	2320      	movs	r3, #32
 8023480:	637b      	str	r3, [r7, #52]	@ 0x34
 8023482:	683b      	ldr	r3, [r7, #0]
 8023484:	633b      	str	r3, [r7, #48]	@ 0x30
 8023486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802348c:	b29b      	uxth	r3, r3
 802348e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023492:	0c1b      	lsrs	r3, r3, #16
 8023494:	627b      	str	r3, [r7, #36]	@ 0x24
 8023496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023498:	b29b      	uxth	r3, r3
 802349a:	623b      	str	r3, [r7, #32]
 802349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802349e:	0c1b      	lsrs	r3, r3, #16
 80234a0:	61fb      	str	r3, [r7, #28]
 80234a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80234a4:	6a3a      	ldr	r2, [r7, #32]
 80234a6:	fb02 f303 	mul.w	r3, r2, r3
 80234aa:	61bb      	str	r3, [r7, #24]
 80234ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80234ae:	69fa      	ldr	r2, [r7, #28]
 80234b0:	fb02 f303 	mul.w	r3, r2, r3
 80234b4:	617b      	str	r3, [r7, #20]
 80234b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80234b8:	6a3a      	ldr	r2, [r7, #32]
 80234ba:	fb02 f303 	mul.w	r3, r2, r3
 80234be:	613b      	str	r3, [r7, #16]
 80234c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80234c2:	69fa      	ldr	r2, [r7, #28]
 80234c4:	fb02 f303 	mul.w	r3, r2, r3
 80234c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80234ca:	69bb      	ldr	r3, [r7, #24]
 80234cc:	0c1b      	lsrs	r3, r3, #16
 80234ce:	697a      	ldr	r2, [r7, #20]
 80234d0:	4413      	add	r3, r2
 80234d2:	617b      	str	r3, [r7, #20]
 80234d4:	697a      	ldr	r2, [r7, #20]
 80234d6:	693b      	ldr	r3, [r7, #16]
 80234d8:	4413      	add	r3, r2
 80234da:	617b      	str	r3, [r7, #20]
 80234dc:	697a      	ldr	r2, [r7, #20]
 80234de:	693b      	ldr	r3, [r7, #16]
 80234e0:	429a      	cmp	r2, r3
 80234e2:	d203      	bcs.n	80234ec <mpn_invert_3by2+0x198>
 80234e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80234e6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80234ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80234ec:	697b      	ldr	r3, [r7, #20]
 80234ee:	0c1b      	lsrs	r3, r3, #16
 80234f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80234f2:	4413      	add	r3, r2
 80234f4:	60fb      	str	r3, [r7, #12]
 80234f6:	697b      	ldr	r3, [r7, #20]
 80234f8:	041a      	lsls	r2, r3, #16
 80234fa:	69bb      	ldr	r3, [r7, #24]
 80234fc:	b29b      	uxth	r3, r3
 80234fe:	4413      	add	r3, r2
 8023500:	60bb      	str	r3, [r7, #8]
      r += th;
 8023502:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023504:	68fb      	ldr	r3, [r7, #12]
 8023506:	4413      	add	r3, r2
 8023508:	657b      	str	r3, [r7, #84]	@ 0x54
      if (r < th)
 802350a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802350c:	68fb      	ldr	r3, [r7, #12]
 802350e:	429a      	cmp	r2, r3
 8023510:	d21f      	bcs.n	8023552 <mpn_invert_3by2+0x1fe>
	{
	  m--;
 8023512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023514:	3b01      	subs	r3, #1
 8023516:	653b      	str	r3, [r7, #80]	@ 0x50
	  m -= ((r > u1) | ((r == u1) & (tl > u0)));
 8023518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	429a      	cmp	r2, r3
 802351e:	bf8c      	ite	hi
 8023520:	2301      	movhi	r3, #1
 8023522:	2300      	movls	r3, #0
 8023524:	b2db      	uxtb	r3, r3
 8023526:	4618      	mov	r0, r3
 8023528:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802352a:	687b      	ldr	r3, [r7, #4]
 802352c:	429a      	cmp	r2, r3
 802352e:	bf0c      	ite	eq
 8023530:	2301      	moveq	r3, #1
 8023532:	2300      	movne	r3, #0
 8023534:	b2da      	uxtb	r2, r3
 8023536:	68b9      	ldr	r1, [r7, #8]
 8023538:	683b      	ldr	r3, [r7, #0]
 802353a:	4299      	cmp	r1, r3
 802353c:	bf8c      	ite	hi
 802353e:	2301      	movhi	r3, #1
 8023540:	2300      	movls	r3, #0
 8023542:	b2db      	uxtb	r3, r3
 8023544:	4013      	ands	r3, r2
 8023546:	b2db      	uxtb	r3, r3
 8023548:	4303      	orrs	r3, r0
 802354a:	461a      	mov	r2, r3
 802354c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802354e:	1a9b      	subs	r3, r3, r2
 8023550:	653b      	str	r3, [r7, #80]	@ 0x50
	}
    }

  return m;
 8023552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8023554:	4618      	mov	r0, r3
 8023556:	375c      	adds	r7, #92	@ 0x5c
 8023558:	46bd      	mov	sp, r7
 802355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802355e:	4770      	bx	lr

08023560 <mpn_div_qr_1_invert>:
  mp_limb_t di;
};

static void
mpn_div_qr_1_invert (struct gmp_div_inverse *inv, mp_limb_t d)
{
 8023560:	b580      	push	{r7, lr}
 8023562:	b086      	sub	sp, #24
 8023564:	af00      	add	r7, sp, #0
 8023566:	6078      	str	r0, [r7, #4]
 8023568:	6039      	str	r1, [r7, #0]
  unsigned shift;

  assert (d > 0);
 802356a:	683b      	ldr	r3, [r7, #0]
 802356c:	2b00      	cmp	r3, #0
 802356e:	d106      	bne.n	802357e <mpn_div_qr_1_invert+0x1e>
 8023570:	4b1e      	ldr	r3, [pc, #120]	@ (80235ec <mpn_div_qr_1_invert+0x8c>)
 8023572:	4a1f      	ldr	r2, [pc, #124]	@ (80235f0 <mpn_div_qr_1_invert+0x90>)
 8023574:	f240 3196 	movw	r1, #918	@ 0x396
 8023578:	481e      	ldr	r0, [pc, #120]	@ (80235f4 <mpn_div_qr_1_invert+0x94>)
 802357a:	f011 fe5d 	bl	8035238 <__assert_func>
  gmp_clz (shift, d);
 802357e:	683b      	ldr	r3, [r7, #0]
 8023580:	617b      	str	r3, [r7, #20]
 8023582:	2300      	movs	r3, #0
 8023584:	613b      	str	r3, [r7, #16]
 8023586:	2308      	movs	r3, #8
 8023588:	60fb      	str	r3, [r7, #12]
 802358a:	68fb      	ldr	r3, [r7, #12]
 802358c:	2b1f      	cmp	r3, #31
 802358e:	dc13      	bgt.n	80235b8 <mpn_div_qr_1_invert+0x58>
 8023590:	e007      	b.n	80235a2 <mpn_div_qr_1_invert+0x42>
 8023592:	697a      	ldr	r2, [r7, #20]
 8023594:	68fb      	ldr	r3, [r7, #12]
 8023596:	fa02 f303 	lsl.w	r3, r2, r3
 802359a:	617b      	str	r3, [r7, #20]
 802359c:	693b      	ldr	r3, [r7, #16]
 802359e:	3308      	adds	r3, #8
 80235a0:	613b      	str	r3, [r7, #16]
 80235a2:	697b      	ldr	r3, [r7, #20]
 80235a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80235a8:	d3f3      	bcc.n	8023592 <mpn_div_qr_1_invert+0x32>
 80235aa:	e005      	b.n	80235b8 <mpn_div_qr_1_invert+0x58>
 80235ac:	697b      	ldr	r3, [r7, #20]
 80235ae:	005b      	lsls	r3, r3, #1
 80235b0:	617b      	str	r3, [r7, #20]
 80235b2:	693b      	ldr	r3, [r7, #16]
 80235b4:	3301      	adds	r3, #1
 80235b6:	613b      	str	r3, [r7, #16]
 80235b8:	697b      	ldr	r3, [r7, #20]
 80235ba:	2b00      	cmp	r3, #0
 80235bc:	daf6      	bge.n	80235ac <mpn_div_qr_1_invert+0x4c>
 80235be:	693b      	ldr	r3, [r7, #16]
 80235c0:	60bb      	str	r3, [r7, #8]
  inv->shift = shift;
 80235c2:	687b      	ldr	r3, [r7, #4]
 80235c4:	68ba      	ldr	r2, [r7, #8]
 80235c6:	601a      	str	r2, [r3, #0]
  inv->d1 = d << shift;
 80235c8:	683a      	ldr	r2, [r7, #0]
 80235ca:	68bb      	ldr	r3, [r7, #8]
 80235cc:	409a      	lsls	r2, r3
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	605a      	str	r2, [r3, #4]
  inv->di = mpn_invert_limb (inv->d1);
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	685b      	ldr	r3, [r3, #4]
 80235d6:	2100      	movs	r1, #0
 80235d8:	4618      	mov	r0, r3
 80235da:	f7ff febb 	bl	8023354 <mpn_invert_3by2>
 80235de:	4602      	mov	r2, r0
 80235e0:	687b      	ldr	r3, [r7, #4]
 80235e2:	60da      	str	r2, [r3, #12]
}
 80235e4:	bf00      	nop
 80235e6:	3718      	adds	r7, #24
 80235e8:	46bd      	mov	sp, r7
 80235ea:	bd80      	pop	{r7, pc}
 80235ec:	080383ec 	.word	0x080383ec
 80235f0:	0803bcf8 	.word	0x0803bcf8
 80235f4:	080382a0 	.word	0x080382a0

080235f8 <mpn_div_qr_2_invert>:

static void
mpn_div_qr_2_invert (struct gmp_div_inverse *inv,
		     mp_limb_t d1, mp_limb_t d0)
{
 80235f8:	b580      	push	{r7, lr}
 80235fa:	b088      	sub	sp, #32
 80235fc:	af00      	add	r7, sp, #0
 80235fe:	60f8      	str	r0, [r7, #12]
 8023600:	60b9      	str	r1, [r7, #8]
 8023602:	607a      	str	r2, [r7, #4]
  unsigned shift;

  assert (d1 > 0);
 8023604:	68bb      	ldr	r3, [r7, #8]
 8023606:	2b00      	cmp	r3, #0
 8023608:	d106      	bne.n	8023618 <mpn_div_qr_2_invert+0x20>
 802360a:	4b28      	ldr	r3, [pc, #160]	@ (80236ac <mpn_div_qr_2_invert+0xb4>)
 802360c:	4a28      	ldr	r2, [pc, #160]	@ (80236b0 <mpn_div_qr_2_invert+0xb8>)
 802360e:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8023612:	4828      	ldr	r0, [pc, #160]	@ (80236b4 <mpn_div_qr_2_invert+0xbc>)
 8023614:	f011 fe10 	bl	8035238 <__assert_func>
  gmp_clz (shift, d1);
 8023618:	68bb      	ldr	r3, [r7, #8]
 802361a:	61fb      	str	r3, [r7, #28]
 802361c:	2300      	movs	r3, #0
 802361e:	61bb      	str	r3, [r7, #24]
 8023620:	2308      	movs	r3, #8
 8023622:	617b      	str	r3, [r7, #20]
 8023624:	697b      	ldr	r3, [r7, #20]
 8023626:	2b1f      	cmp	r3, #31
 8023628:	dc13      	bgt.n	8023652 <mpn_div_qr_2_invert+0x5a>
 802362a:	e007      	b.n	802363c <mpn_div_qr_2_invert+0x44>
 802362c:	69fa      	ldr	r2, [r7, #28]
 802362e:	697b      	ldr	r3, [r7, #20]
 8023630:	fa02 f303 	lsl.w	r3, r2, r3
 8023634:	61fb      	str	r3, [r7, #28]
 8023636:	69bb      	ldr	r3, [r7, #24]
 8023638:	3308      	adds	r3, #8
 802363a:	61bb      	str	r3, [r7, #24]
 802363c:	69fb      	ldr	r3, [r7, #28]
 802363e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8023642:	d3f3      	bcc.n	802362c <mpn_div_qr_2_invert+0x34>
 8023644:	e005      	b.n	8023652 <mpn_div_qr_2_invert+0x5a>
 8023646:	69fb      	ldr	r3, [r7, #28]
 8023648:	005b      	lsls	r3, r3, #1
 802364a:	61fb      	str	r3, [r7, #28]
 802364c:	69bb      	ldr	r3, [r7, #24]
 802364e:	3301      	adds	r3, #1
 8023650:	61bb      	str	r3, [r7, #24]
 8023652:	69fb      	ldr	r3, [r7, #28]
 8023654:	2b00      	cmp	r3, #0
 8023656:	daf6      	bge.n	8023646 <mpn_div_qr_2_invert+0x4e>
 8023658:	69bb      	ldr	r3, [r7, #24]
 802365a:	613b      	str	r3, [r7, #16]
  inv->shift = shift;
 802365c:	68fb      	ldr	r3, [r7, #12]
 802365e:	693a      	ldr	r2, [r7, #16]
 8023660:	601a      	str	r2, [r3, #0]
  if (shift > 0)
 8023662:	693b      	ldr	r3, [r7, #16]
 8023664:	2b00      	cmp	r3, #0
 8023666:	d00f      	beq.n	8023688 <mpn_div_qr_2_invert+0x90>
    {
      d1 = (d1 << shift) | (d0 >> (GMP_LIMB_BITS - shift));
 8023668:	68ba      	ldr	r2, [r7, #8]
 802366a:	693b      	ldr	r3, [r7, #16]
 802366c:	409a      	lsls	r2, r3
 802366e:	693b      	ldr	r3, [r7, #16]
 8023670:	f1c3 0320 	rsb	r3, r3, #32
 8023674:	6879      	ldr	r1, [r7, #4]
 8023676:	fa21 f303 	lsr.w	r3, r1, r3
 802367a:	4313      	orrs	r3, r2
 802367c:	60bb      	str	r3, [r7, #8]
      d0 <<= shift;
 802367e:	687a      	ldr	r2, [r7, #4]
 8023680:	693b      	ldr	r3, [r7, #16]
 8023682:	fa02 f303 	lsl.w	r3, r2, r3
 8023686:	607b      	str	r3, [r7, #4]
    }
  inv->d1 = d1;
 8023688:	68fb      	ldr	r3, [r7, #12]
 802368a:	68ba      	ldr	r2, [r7, #8]
 802368c:	605a      	str	r2, [r3, #4]
  inv->d0 = d0;
 802368e:	68fb      	ldr	r3, [r7, #12]
 8023690:	687a      	ldr	r2, [r7, #4]
 8023692:	609a      	str	r2, [r3, #8]
  inv->di = mpn_invert_3by2 (d1, d0);
 8023694:	6879      	ldr	r1, [r7, #4]
 8023696:	68b8      	ldr	r0, [r7, #8]
 8023698:	f7ff fe5c 	bl	8023354 <mpn_invert_3by2>
 802369c:	4602      	mov	r2, r0
 802369e:	68fb      	ldr	r3, [r7, #12]
 80236a0:	60da      	str	r2, [r3, #12]
}
 80236a2:	bf00      	nop
 80236a4:	3720      	adds	r7, #32
 80236a6:	46bd      	mov	sp, r7
 80236a8:	bd80      	pop	{r7, pc}
 80236aa:	bf00      	nop
 80236ac:	080383f4 	.word	0x080383f4
 80236b0:	0803bd0c 	.word	0x0803bd0c
 80236b4:	080382a0 	.word	0x080382a0

080236b8 <mpn_div_qr_invert>:

static void
mpn_div_qr_invert (struct gmp_div_inverse *inv,
		   mp_srcptr dp, mp_size_t dn)
{
 80236b8:	b580      	push	{r7, lr}
 80236ba:	b08a      	sub	sp, #40	@ 0x28
 80236bc:	af00      	add	r7, sp, #0
 80236be:	60f8      	str	r0, [r7, #12]
 80236c0:	60b9      	str	r1, [r7, #8]
 80236c2:	607a      	str	r2, [r7, #4]
  assert (dn > 0);
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	dc06      	bgt.n	80236d8 <mpn_div_qr_invert+0x20>
 80236ca:	4b48      	ldr	r3, [pc, #288]	@ (80237ec <mpn_div_qr_invert+0x134>)
 80236cc:	4a48      	ldr	r2, [pc, #288]	@ (80237f0 <mpn_div_qr_invert+0x138>)
 80236ce:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
 80236d2:	4848      	ldr	r0, [pc, #288]	@ (80237f4 <mpn_div_qr_invert+0x13c>)
 80236d4:	f011 fdb0 	bl	8035238 <__assert_func>

  if (dn == 1)
 80236d8:	687b      	ldr	r3, [r7, #4]
 80236da:	2b01      	cmp	r3, #1
 80236dc:	d106      	bne.n	80236ec <mpn_div_qr_invert+0x34>
    mpn_div_qr_1_invert (inv, dp[0]);
 80236de:	68bb      	ldr	r3, [r7, #8]
 80236e0:	681b      	ldr	r3, [r3, #0]
 80236e2:	4619      	mov	r1, r3
 80236e4:	68f8      	ldr	r0, [r7, #12]
 80236e6:	f7ff ff3b 	bl	8023560 <mpn_div_qr_1_invert>
	}
      inv->d1 = d1;
      inv->d0 = d0;
      inv->di = mpn_invert_3by2 (d1, d0);
    }
}
 80236ea:	e07a      	b.n	80237e2 <mpn_div_qr_invert+0x12a>
  else if (dn == 2)
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	2b02      	cmp	r3, #2
 80236f0:	d109      	bne.n	8023706 <mpn_div_qr_invert+0x4e>
    mpn_div_qr_2_invert (inv, dp[1], dp[0]);
 80236f2:	68bb      	ldr	r3, [r7, #8]
 80236f4:	3304      	adds	r3, #4
 80236f6:	6819      	ldr	r1, [r3, #0]
 80236f8:	68bb      	ldr	r3, [r7, #8]
 80236fa:	681b      	ldr	r3, [r3, #0]
 80236fc:	461a      	mov	r2, r3
 80236fe:	68f8      	ldr	r0, [r7, #12]
 8023700:	f7ff ff7a 	bl	80235f8 <mpn_div_qr_2_invert>
}
 8023704:	e06d      	b.n	80237e2 <mpn_div_qr_invert+0x12a>
      d1 = dp[dn-1];
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802370c:	3b01      	subs	r3, #1
 802370e:	009b      	lsls	r3, r3, #2
 8023710:	68ba      	ldr	r2, [r7, #8]
 8023712:	4413      	add	r3, r2
 8023714:	681b      	ldr	r3, [r3, #0]
 8023716:	627b      	str	r3, [r7, #36]	@ 0x24
      d0 = dp[dn-2];
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802371e:	3b02      	subs	r3, #2
 8023720:	009b      	lsls	r3, r3, #2
 8023722:	68ba      	ldr	r2, [r7, #8]
 8023724:	4413      	add	r3, r2
 8023726:	681b      	ldr	r3, [r3, #0]
 8023728:	623b      	str	r3, [r7, #32]
      assert (d1 > 0);
 802372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802372c:	2b00      	cmp	r3, #0
 802372e:	d106      	bne.n	802373e <mpn_div_qr_invert+0x86>
 8023730:	4b31      	ldr	r3, [pc, #196]	@ (80237f8 <mpn_div_qr_invert+0x140>)
 8023732:	4a2f      	ldr	r2, [pc, #188]	@ (80237f0 <mpn_div_qr_invert+0x138>)
 8023734:	f240 31c1 	movw	r1, #961	@ 0x3c1
 8023738:	482e      	ldr	r0, [pc, #184]	@ (80237f4 <mpn_div_qr_invert+0x13c>)
 802373a:	f011 fd7d 	bl	8035238 <__assert_func>
      gmp_clz (shift, d1);
 802373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023740:	61fb      	str	r3, [r7, #28]
 8023742:	2300      	movs	r3, #0
 8023744:	61bb      	str	r3, [r7, #24]
 8023746:	2308      	movs	r3, #8
 8023748:	617b      	str	r3, [r7, #20]
 802374a:	697b      	ldr	r3, [r7, #20]
 802374c:	2b1f      	cmp	r3, #31
 802374e:	dc13      	bgt.n	8023778 <mpn_div_qr_invert+0xc0>
 8023750:	e007      	b.n	8023762 <mpn_div_qr_invert+0xaa>
 8023752:	69fa      	ldr	r2, [r7, #28]
 8023754:	697b      	ldr	r3, [r7, #20]
 8023756:	fa02 f303 	lsl.w	r3, r2, r3
 802375a:	61fb      	str	r3, [r7, #28]
 802375c:	69bb      	ldr	r3, [r7, #24]
 802375e:	3308      	adds	r3, #8
 8023760:	61bb      	str	r3, [r7, #24]
 8023762:	69fb      	ldr	r3, [r7, #28]
 8023764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8023768:	d3f3      	bcc.n	8023752 <mpn_div_qr_invert+0x9a>
 802376a:	e005      	b.n	8023778 <mpn_div_qr_invert+0xc0>
 802376c:	69fb      	ldr	r3, [r7, #28]
 802376e:	005b      	lsls	r3, r3, #1
 8023770:	61fb      	str	r3, [r7, #28]
 8023772:	69bb      	ldr	r3, [r7, #24]
 8023774:	3301      	adds	r3, #1
 8023776:	61bb      	str	r3, [r7, #24]
 8023778:	69fb      	ldr	r3, [r7, #28]
 802377a:	2b00      	cmp	r3, #0
 802377c:	daf6      	bge.n	802376c <mpn_div_qr_invert+0xb4>
 802377e:	69bb      	ldr	r3, [r7, #24]
 8023780:	613b      	str	r3, [r7, #16]
      inv->shift = shift;
 8023782:	68fb      	ldr	r3, [r7, #12]
 8023784:	693a      	ldr	r2, [r7, #16]
 8023786:	601a      	str	r2, [r3, #0]
      if (shift > 0)
 8023788:	693b      	ldr	r3, [r7, #16]
 802378a:	2b00      	cmp	r3, #0
 802378c:	d01c      	beq.n	80237c8 <mpn_div_qr_invert+0x110>
	  d1 = (d1 << shift) | (d0 >> (GMP_LIMB_BITS - shift));
 802378e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023790:	693b      	ldr	r3, [r7, #16]
 8023792:	409a      	lsls	r2, r3
 8023794:	693b      	ldr	r3, [r7, #16]
 8023796:	f1c3 0320 	rsb	r3, r3, #32
 802379a:	6a39      	ldr	r1, [r7, #32]
 802379c:	fa21 f303 	lsr.w	r3, r1, r3
 80237a0:	4313      	orrs	r3, r2
 80237a2:	627b      	str	r3, [r7, #36]	@ 0x24
	  d0 = (d0 << shift) | (dp[dn-3] >> (GMP_LIMB_BITS - shift));
 80237a4:	6a3a      	ldr	r2, [r7, #32]
 80237a6:	693b      	ldr	r3, [r7, #16]
 80237a8:	409a      	lsls	r2, r3
 80237aa:	687b      	ldr	r3, [r7, #4]
 80237ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80237b0:	3b03      	subs	r3, #3
 80237b2:	009b      	lsls	r3, r3, #2
 80237b4:	68b9      	ldr	r1, [r7, #8]
 80237b6:	440b      	add	r3, r1
 80237b8:	6819      	ldr	r1, [r3, #0]
 80237ba:	693b      	ldr	r3, [r7, #16]
 80237bc:	f1c3 0320 	rsb	r3, r3, #32
 80237c0:	fa21 f303 	lsr.w	r3, r1, r3
 80237c4:	4313      	orrs	r3, r2
 80237c6:	623b      	str	r3, [r7, #32]
      inv->d1 = d1;
 80237c8:	68fb      	ldr	r3, [r7, #12]
 80237ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80237cc:	605a      	str	r2, [r3, #4]
      inv->d0 = d0;
 80237ce:	68fb      	ldr	r3, [r7, #12]
 80237d0:	6a3a      	ldr	r2, [r7, #32]
 80237d2:	609a      	str	r2, [r3, #8]
      inv->di = mpn_invert_3by2 (d1, d0);
 80237d4:	6a39      	ldr	r1, [r7, #32]
 80237d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80237d8:	f7ff fdbc 	bl	8023354 <mpn_invert_3by2>
 80237dc:	4602      	mov	r2, r0
 80237de:	68fb      	ldr	r3, [r7, #12]
 80237e0:	60da      	str	r2, [r3, #12]
}
 80237e2:	bf00      	nop
 80237e4:	3728      	adds	r7, #40	@ 0x28
 80237e6:	46bd      	mov	sp, r7
 80237e8:	bd80      	pop	{r7, pc}
 80237ea:	bf00      	nop
 80237ec:	080383fc 	.word	0x080383fc
 80237f0:	0803bd20 	.word	0x0803bd20
 80237f4:	080382a0 	.word	0x080382a0
 80237f8:	080383f4 	.word	0x080383f4

080237fc <mpn_div_qr_1_preinv>:
/* Not matching current public gmp interface, rather corresponding to
   the sbpi1_div_* functions. */
static mp_limb_t
mpn_div_qr_1_preinv (mp_ptr qp, mp_srcptr np, mp_size_t nn,
		     const struct gmp_div_inverse *inv)
{
 80237fc:	b580      	push	{r7, lr}
 80237fe:	b09a      	sub	sp, #104	@ 0x68
 8023800:	af00      	add	r7, sp, #0
 8023802:	60f8      	str	r0, [r7, #12]
 8023804:	60b9      	str	r1, [r7, #8]
 8023806:	607a      	str	r2, [r7, #4]
 8023808:	603b      	str	r3, [r7, #0]
  mp_limb_t d, di;
  mp_limb_t r;
  mp_ptr tp = NULL;
 802380a:	2300      	movs	r3, #0
 802380c:	663b      	str	r3, [r7, #96]	@ 0x60
  mp_size_t tn = 0;
 802380e:	2300      	movs	r3, #0
 8023810:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (inv->shift > 0)
 8023812:	683b      	ldr	r3, [r7, #0]
 8023814:	681b      	ldr	r3, [r3, #0]
 8023816:	2b00      	cmp	r3, #0
 8023818:	d015      	beq.n	8023846 <mpn_div_qr_1_preinv+0x4a>
    {
      /* Shift, reusing qp area if possible. In-place shift if qp == np. */
      tp = qp;
 802381a:	68fb      	ldr	r3, [r7, #12]
 802381c:	663b      	str	r3, [r7, #96]	@ 0x60
      if (!tp)
 802381e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8023820:	2b00      	cmp	r3, #0
 8023822:	d105      	bne.n	8023830 <mpn_div_qr_1_preinv+0x34>
        {
	   tn = nn;
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	65fb      	str	r3, [r7, #92]	@ 0x5c
	   tp = gmp_alloc_limbs (tn);
 8023828:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 802382a:	f7fe ff55 	bl	80226d8 <gmp_alloc_limbs>
 802382e:	6638      	str	r0, [r7, #96]	@ 0x60
        }
      r = mpn_lshift (tp, np, nn, inv->shift);
 8023830:	683b      	ldr	r3, [r7, #0]
 8023832:	681b      	ldr	r3, [r3, #0]
 8023834:	687a      	ldr	r2, [r7, #4]
 8023836:	68b9      	ldr	r1, [r7, #8]
 8023838:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 802383a:	f7ff fc13 	bl	8023064 <mpn_lshift>
 802383e:	6678      	str	r0, [r7, #100]	@ 0x64
      np = tp;
 8023840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8023842:	60bb      	str	r3, [r7, #8]
 8023844:	e001      	b.n	802384a <mpn_div_qr_1_preinv+0x4e>
    }
  else
    r = 0;
 8023846:	2300      	movs	r3, #0
 8023848:	667b      	str	r3, [r7, #100]	@ 0x64

  d = inv->d1;
 802384a:	683b      	ldr	r3, [r7, #0]
 802384c:	685b      	ldr	r3, [r3, #4]
 802384e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  di = inv->di;
 8023850:	683b      	ldr	r3, [r7, #0]
 8023852:	68db      	ldr	r3, [r3, #12]
 8023854:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (--nn >= 0)
 8023856:	e08e      	b.n	8023976 <mpn_div_qr_1_preinv+0x17a>
    {
      mp_limb_t q;

      gmp_udiv_qrnnd_preinv (q, r, r, np[nn], d, di);
 8023858:	2320      	movs	r3, #32
 802385a:	647b      	str	r3, [r7, #68]	@ 0x44
 802385c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802385e:	643b      	str	r3, [r7, #64]	@ 0x40
 8023860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023866:	b29b      	uxth	r3, r3
 8023868:	63bb      	str	r3, [r7, #56]	@ 0x38
 802386a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802386c:	0c1b      	lsrs	r3, r3, #16
 802386e:	637b      	str	r3, [r7, #52]	@ 0x34
 8023870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023872:	b29b      	uxth	r3, r3
 8023874:	633b      	str	r3, [r7, #48]	@ 0x30
 8023876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023878:	0c1b      	lsrs	r3, r3, #16
 802387a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802387c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802387e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023880:	fb02 f303 	mul.w	r3, r2, r3
 8023884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802388a:	fb02 f303 	mul.w	r3, r2, r3
 802388e:	627b      	str	r3, [r7, #36]	@ 0x24
 8023890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023894:	fb02 f303 	mul.w	r3, r2, r3
 8023898:	623b      	str	r3, [r7, #32]
 802389a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802389c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802389e:	fb02 f303 	mul.w	r3, r2, r3
 80238a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80238a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238a6:	0c1b      	lsrs	r3, r3, #16
 80238a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80238aa:	4413      	add	r3, r2
 80238ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80238ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80238b0:	6a3b      	ldr	r3, [r7, #32]
 80238b2:	4413      	add	r3, r2
 80238b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80238b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80238b8:	6a3b      	ldr	r3, [r7, #32]
 80238ba:	429a      	cmp	r2, r3
 80238bc:	d203      	bcs.n	80238c6 <mpn_div_qr_1_preinv+0xca>
 80238be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80238c0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80238c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80238c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238c8:	0c1b      	lsrs	r3, r3, #16
 80238ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80238cc:	4413      	add	r3, r2
 80238ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80238d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238d2:	041a      	lsls	r2, r3, #16
 80238d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238d6:	b29b      	uxth	r3, r3
 80238d8:	4413      	add	r3, r2
 80238da:	61fb      	str	r3, [r7, #28]
 80238dc:	687b      	ldr	r3, [r7, #4]
 80238de:	009b      	lsls	r3, r3, #2
 80238e0:	68ba      	ldr	r2, [r7, #8]
 80238e2:	4413      	add	r3, r2
 80238e4:	681b      	ldr	r3, [r3, #0]
 80238e6:	69fa      	ldr	r2, [r7, #28]
 80238e8:	4413      	add	r3, r2
 80238ea:	61bb      	str	r3, [r7, #24]
 80238ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80238ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80238f0:	4413      	add	r3, r2
 80238f2:	69b9      	ldr	r1, [r7, #24]
 80238f4:	69fa      	ldr	r2, [r7, #28]
 80238f6:	4291      	cmp	r1, r2
 80238f8:	bf34      	ite	cc
 80238fa:	2201      	movcc	r2, #1
 80238fc:	2200      	movcs	r2, #0
 80238fe:	b2d2      	uxtb	r2, r2
 8023900:	4413      	add	r3, r2
 8023902:	3301      	adds	r3, #1
 8023904:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023906:	69bb      	ldr	r3, [r7, #24]
 8023908:	61fb      	str	r3, [r7, #28]
 802390a:	687b      	ldr	r3, [r7, #4]
 802390c:	009b      	lsls	r3, r3, #2
 802390e:	68ba      	ldr	r2, [r7, #8]
 8023910:	4413      	add	r3, r2
 8023912:	681a      	ldr	r2, [r3, #0]
 8023914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023916:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8023918:	fb01 f303 	mul.w	r3, r1, r3
 802391c:	1ad3      	subs	r3, r2, r3
 802391e:	657b      	str	r3, [r7, #84]	@ 0x54
 8023920:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023922:	69fb      	ldr	r3, [r7, #28]
 8023924:	429a      	cmp	r2, r3
 8023926:	bf8c      	ite	hi
 8023928:	2301      	movhi	r3, #1
 802392a:	2300      	movls	r3, #0
 802392c:	b2db      	uxtb	r3, r3
 802392e:	425b      	negs	r3, r3
 8023930:	617b      	str	r3, [r7, #20]
 8023932:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8023934:	697b      	ldr	r3, [r7, #20]
 8023936:	4413      	add	r3, r2
 8023938:	65bb      	str	r3, [r7, #88]	@ 0x58
 802393a:	697a      	ldr	r2, [r7, #20]
 802393c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802393e:	4013      	ands	r3, r2
 8023940:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023942:	4413      	add	r3, r2
 8023944:	657b      	str	r3, [r7, #84]	@ 0x54
 8023946:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802394a:	429a      	cmp	r2, r3
 802394c:	d306      	bcc.n	802395c <mpn_div_qr_1_preinv+0x160>
 802394e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8023950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023952:	1ad3      	subs	r3, r2, r3
 8023954:	657b      	str	r3, [r7, #84]	@ 0x54
 8023956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023958:	3301      	adds	r3, #1
 802395a:	65bb      	str	r3, [r7, #88]	@ 0x58
 802395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802395e:	667b      	str	r3, [r7, #100]	@ 0x64
 8023960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023962:	613b      	str	r3, [r7, #16]
      if (qp)
 8023964:	68fb      	ldr	r3, [r7, #12]
 8023966:	2b00      	cmp	r3, #0
 8023968:	d005      	beq.n	8023976 <mpn_div_qr_1_preinv+0x17a>
	qp[nn] = q;
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	009b      	lsls	r3, r3, #2
 802396e:	68fa      	ldr	r2, [r7, #12]
 8023970:	4413      	add	r3, r2
 8023972:	693a      	ldr	r2, [r7, #16]
 8023974:	601a      	str	r2, [r3, #0]
  while (--nn >= 0)
 8023976:	687b      	ldr	r3, [r7, #4]
 8023978:	3b01      	subs	r3, #1
 802397a:	607b      	str	r3, [r7, #4]
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	2b00      	cmp	r3, #0
 8023980:	f6bf af6a 	bge.w	8023858 <mpn_div_qr_1_preinv+0x5c>
    }
  if (tn)
 8023984:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023986:	2b00      	cmp	r3, #0
 8023988:	d003      	beq.n	8023992 <mpn_div_qr_1_preinv+0x196>
    gmp_free_limbs (tp, tn);
 802398a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 802398c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 802398e:	f7fe fedb 	bl	8022748 <gmp_free_limbs>

  return r >> inv->shift;
 8023992:	683b      	ldr	r3, [r7, #0]
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8023998:	fa22 f303 	lsr.w	r3, r2, r3
}
 802399c:	4618      	mov	r0, r3
 802399e:	3768      	adds	r7, #104	@ 0x68
 80239a0:	46bd      	mov	sp, r7
 80239a2:	bd80      	pop	{r7, pc}

080239a4 <mpn_div_qr_2_preinv>:

static void
mpn_div_qr_2_preinv (mp_ptr qp, mp_ptr np, mp_size_t nn,
		     const struct gmp_div_inverse *inv)
{
 80239a4:	b580      	push	{r7, lr}
 80239a6:	b0ac      	sub	sp, #176	@ 0xb0
 80239a8:	af00      	add	r7, sp, #0
 80239aa:	60f8      	str	r0, [r7, #12]
 80239ac:	60b9      	str	r1, [r7, #8]
 80239ae:	607a      	str	r2, [r7, #4]
 80239b0:	603b      	str	r3, [r7, #0]
  unsigned shift;
  mp_size_t i;
  mp_limb_t d1, d0, di, r1, r0;

  assert (nn >= 2);
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	2b01      	cmp	r3, #1
 80239b6:	dc06      	bgt.n	80239c6 <mpn_div_qr_2_preinv+0x22>
 80239b8:	4b12      	ldr	r3, [pc, #72]	@ (8023a04 <mpn_div_qr_2_preinv+0x60>)
 80239ba:	4a13      	ldr	r2, [pc, #76]	@ (8023a08 <mpn_div_qr_2_preinv+0x64>)
 80239bc:	f240 4101 	movw	r1, #1025	@ 0x401
 80239c0:	4812      	ldr	r0, [pc, #72]	@ (8023a0c <mpn_div_qr_2_preinv+0x68>)
 80239c2:	f011 fc39 	bl	8035238 <__assert_func>
  shift = inv->shift;
 80239c6:	683b      	ldr	r3, [r7, #0]
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  d1 = inv->d1;
 80239ce:	683b      	ldr	r3, [r7, #0]
 80239d0:	685b      	ldr	r3, [r3, #4]
 80239d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  d0 = inv->d0;
 80239d6:	683b      	ldr	r3, [r7, #0]
 80239d8:	689b      	ldr	r3, [r3, #8]
 80239da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  di = inv->di;
 80239de:	683b      	ldr	r3, [r7, #0]
 80239e0:	68db      	ldr	r3, [r3, #12]
 80239e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  if (shift > 0)
 80239e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d010      	beq.n	8023a10 <mpn_div_qr_2_preinv+0x6c>
    r1 = mpn_lshift (np, np, nn, shift);
 80239ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80239f2:	687a      	ldr	r2, [r7, #4]
 80239f4:	68b9      	ldr	r1, [r7, #8]
 80239f6:	68b8      	ldr	r0, [r7, #8]
 80239f8:	f7ff fb34 	bl	8023064 <mpn_lshift>
 80239fc:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8023a00:	e009      	b.n	8023a16 <mpn_div_qr_2_preinv+0x72>
 8023a02:	bf00      	nop
 8023a04:	08038404 	.word	0x08038404
 8023a08:	0803bd34 	.word	0x0803bd34
 8023a0c:	080382a0 	.word	0x080382a0
  else
    r1 = 0;
 8023a10:	2300      	movs	r3, #0
 8023a12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  r0 = np[nn - 1];
 8023a16:	687b      	ldr	r3, [r7, #4]
 8023a18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8023a1c:	3b01      	subs	r3, #1
 8023a1e:	009b      	lsls	r3, r3, #2
 8023a20:	68ba      	ldr	r2, [r7, #8]
 8023a22:	4413      	add	r3, r2
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  i = nn - 2;
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	3b02      	subs	r3, #2
 8023a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  do
    {
      mp_limb_t n0, q;
      n0 = np[i];
 8023a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023a36:	009b      	lsls	r3, r3, #2
 8023a38:	68ba      	ldr	r2, [r7, #8]
 8023a3a:	4413      	add	r3, r2
 8023a3c:	681b      	ldr	r3, [r3, #0]
 8023a3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      gmp_udiv_qr_3by2 (q, r1, r0, r1, r0, n0, d1, d0, di);
 8023a42:	2320      	movs	r3, #32
 8023a44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8023a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8023a4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8023a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8023a52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8023a54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023a56:	b29b      	uxth	r3, r3
 8023a58:	677b      	str	r3, [r7, #116]	@ 0x74
 8023a5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023a5c:	0c1b      	lsrs	r3, r3, #16
 8023a5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8023a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023a62:	b29b      	uxth	r3, r3
 8023a64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8023a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023a68:	0c1b      	lsrs	r3, r3, #16
 8023a6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8023a70:	fb02 f303 	mul.w	r3, r2, r3
 8023a74:	667b      	str	r3, [r7, #100]	@ 0x64
 8023a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023a7a:	fb02 f303 	mul.w	r3, r2, r3
 8023a7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8023a80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023a82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8023a84:	fb02 f303 	mul.w	r3, r2, r3
 8023a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023a8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023a8e:	fb02 f303 	mul.w	r3, r2, r3
 8023a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8023a96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023a98:	0c1b      	lsrs	r3, r3, #16
 8023a9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8023a9c:	4413      	add	r3, r2
 8023a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8023aa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8023aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023aa4:	4413      	add	r3, r2
 8023aa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8023aa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8023aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023aac:	429a      	cmp	r2, r3
 8023aae:	d205      	bcs.n	8023abc <mpn_div_qr_2_preinv+0x118>
 8023ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8023ab4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8023ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8023abc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8023abe:	0c1b      	lsrs	r3, r3, #16
 8023ac0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8023ac4:	4413      	add	r3, r2
 8023ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8023aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8023acc:	041a      	lsls	r2, r3, #16
 8023ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023ad0:	b29b      	uxth	r3, r3
 8023ad2:	4413      	add	r3, r2
 8023ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023ad6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8023ad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8023adc:	4413      	add	r3, r2
 8023ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8023ae0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8023ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8023ae8:	4413      	add	r3, r2
 8023aea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8023aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8023aee:	4291      	cmp	r1, r2
 8023af0:	bf34      	ite	cc
 8023af2:	2201      	movcc	r2, #1
 8023af4:	2200      	movcs	r2, #0
 8023af6:	b2d2      	uxtb	r2, r2
 8023af8:	4413      	add	r3, r2
 8023afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8023afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023b06:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8023b0a:	fb02 f303 	mul.w	r3, r2, r3
 8023b0e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023b12:	1ad3      	subs	r3, r2, r3
 8023b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8023b18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8023b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023b20:	1ad3      	subs	r3, r2, r3
 8023b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8023b24:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023b2c:	1ad3      	subs	r3, r2, r3
 8023b2e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8023b32:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8023b36:	4291      	cmp	r1, r2
 8023b38:	bf34      	ite	cc
 8023b3a:	2201      	movcc	r2, #1
 8023b3c:	2200      	movcs	r2, #0
 8023b3e:	b2d2      	uxtb	r2, r2
 8023b40:	1a9b      	subs	r3, r3, r2
 8023b42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8023b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023b48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8023b4c:	2320      	movs	r3, #32
 8023b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8023b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8023b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023b5e:	b29b      	uxth	r3, r3
 8023b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8023b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023b64:	0c1b      	lsrs	r3, r3, #16
 8023b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023b6a:	b29b      	uxth	r3, r3
 8023b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8023b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023b70:	0c1b      	lsrs	r3, r3, #16
 8023b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8023b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023b76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023b78:	fb02 f303 	mul.w	r3, r2, r3
 8023b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8023b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023b80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023b82:	fb02 f303 	mul.w	r3, r2, r3
 8023b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023b8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023b8c:	fb02 f303 	mul.w	r3, r2, r3
 8023b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023b96:	fb02 f303 	mul.w	r3, r2, r3
 8023b9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8023b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ba0:	0c1b      	lsrs	r3, r3, #16
 8023ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023ba4:	4413      	add	r3, r2
 8023ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023bac:	4413      	add	r3, r2
 8023bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023bb4:	429a      	cmp	r2, r3
 8023bb6:	d205      	bcs.n	8023bc4 <mpn_div_qr_2_preinv+0x220>
 8023bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8023bbc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8023bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8023bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023bc6:	0c1b      	lsrs	r3, r3, #16
 8023bc8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8023bcc:	4413      	add	r3, r2
 8023bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8023bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023bd2:	041a      	lsls	r2, r3, #16
 8023bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023bd6:	b29b      	uxth	r3, r3
 8023bd8:	4413      	add	r3, r2
 8023bda:	623b      	str	r3, [r7, #32]
 8023bdc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023be0:	6a3b      	ldr	r3, [r7, #32]
 8023be2:	1ad3      	subs	r3, r2, r3
 8023be4:	61fb      	str	r3, [r7, #28]
 8023be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023bec:	1ad3      	subs	r3, r2, r3
 8023bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8023bf2:	6a3a      	ldr	r2, [r7, #32]
 8023bf4:	4291      	cmp	r1, r2
 8023bf6:	bf34      	ite	cc
 8023bf8:	2201      	movcc	r2, #1
 8023bfa:	2200      	movcs	r2, #0
 8023bfc:	b2d2      	uxtb	r2, r2
 8023bfe:	1a9b      	subs	r3, r3, r2
 8023c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8023c04:	69fb      	ldr	r3, [r7, #28]
 8023c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8023c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8023c0e:	3301      	adds	r3, #1
 8023c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8023c14:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023c18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023c1a:	429a      	cmp	r2, r3
 8023c1c:	bf2c      	ite	cs
 8023c1e:	2301      	movcs	r3, #1
 8023c20:	2300      	movcc	r3, #0
 8023c22:	b2db      	uxtb	r3, r3
 8023c24:	425b      	negs	r3, r3
 8023c26:	61bb      	str	r3, [r7, #24]
 8023c28:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8023c2c:	69bb      	ldr	r3, [r7, #24]
 8023c2e:	4413      	add	r3, r2
 8023c30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8023c34:	69ba      	ldr	r2, [r7, #24]
 8023c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023c3a:	4013      	ands	r3, r2
 8023c3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023c40:	4413      	add	r3, r2
 8023c42:	617b      	str	r3, [r7, #20]
 8023c44:	69ba      	ldr	r2, [r7, #24]
 8023c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023c4a:	401a      	ands	r2, r3
 8023c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8023c50:	4413      	add	r3, r2
 8023c52:	6979      	ldr	r1, [r7, #20]
 8023c54:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023c58:	4291      	cmp	r1, r2
 8023c5a:	bf34      	ite	cc
 8023c5c:	2201      	movcc	r2, #1
 8023c5e:	2200      	movcs	r2, #0
 8023c60:	b2d2      	uxtb	r2, r2
 8023c62:	4413      	add	r3, r2
 8023c64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8023c68:	697b      	ldr	r3, [r7, #20]
 8023c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8023c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023c76:	429a      	cmp	r2, r3
 8023c78:	d32a      	bcc.n	8023cd0 <mpn_div_qr_2_preinv+0x32c>
 8023c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023c82:	429a      	cmp	r2, r3
 8023c84:	d805      	bhi.n	8023c92 <mpn_div_qr_2_preinv+0x2ee>
 8023c86:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023c8e:	429a      	cmp	r2, r3
 8023c90:	d31e      	bcc.n	8023cd0 <mpn_div_qr_2_preinv+0x32c>
 8023c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8023c96:	3301      	adds	r3, #1
 8023c98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8023c9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023ca4:	1ad3      	subs	r3, r2, r3
 8023ca6:	613b      	str	r3, [r7, #16]
 8023ca8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023cb0:	1ad3      	subs	r3, r2, r3
 8023cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8023cb6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8023cba:	4291      	cmp	r1, r2
 8023cbc:	bf34      	ite	cc
 8023cbe:	2201      	movcc	r2, #1
 8023cc0:	2200      	movcs	r2, #0
 8023cc2:	b2d2      	uxtb	r2, r2
 8023cc4:	1a9b      	subs	r3, r3, r2
 8023cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8023cca:	693b      	ldr	r3, [r7, #16]
 8023ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if (qp)
 8023cd0:	68fb      	ldr	r3, [r7, #12]
 8023cd2:	2b00      	cmp	r3, #0
 8023cd4:	d007      	beq.n	8023ce6 <mpn_div_qr_2_preinv+0x342>
	qp[i] = q;
 8023cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023cda:	009b      	lsls	r3, r3, #2
 8023cdc:	68fa      	ldr	r2, [r7, #12]
 8023cde:	4413      	add	r3, r2
 8023ce0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8023ce4:	601a      	str	r2, [r3, #0]
    }
  while (--i >= 0);
 8023ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023cea:	3b01      	subs	r3, #1
 8023cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8023cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023cf4:	2b00      	cmp	r3, #0
 8023cf6:	f6bf ae9c 	bge.w	8023a32 <mpn_div_qr_2_preinv+0x8e>

  if (shift > 0)
 8023cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8023cfe:	2b00      	cmp	r3, #0
 8023d00:	d02a      	beq.n	8023d58 <mpn_div_qr_2_preinv+0x3b4>
    {
      assert ((r0 & (GMP_LIMB_MAX >> (GMP_LIMB_BITS - shift))) == 0);
 8023d02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8023d06:	f1c3 0320 	rsb	r3, r3, #32
 8023d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8023d0e:	40da      	lsrs	r2, r3
 8023d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8023d14:	4013      	ands	r3, r2
 8023d16:	2b00      	cmp	r3, #0
 8023d18:	d006      	beq.n	8023d28 <mpn_div_qr_2_preinv+0x384>
 8023d1a:	4b16      	ldr	r3, [pc, #88]	@ (8023d74 <mpn_div_qr_2_preinv+0x3d0>)
 8023d1c:	4a16      	ldr	r2, [pc, #88]	@ (8023d78 <mpn_div_qr_2_preinv+0x3d4>)
 8023d1e:	f240 411c 	movw	r1, #1052	@ 0x41c
 8023d22:	4816      	ldr	r0, [pc, #88]	@ (8023d7c <mpn_div_qr_2_preinv+0x3d8>)
 8023d24:	f011 fa88 	bl	8035238 <__assert_func>
      r0 = (r0 >> shift) | (r1 << (GMP_LIMB_BITS - shift));
 8023d28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8023d30:	40da      	lsrs	r2, r3
 8023d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8023d36:	f1c3 0320 	rsb	r3, r3, #32
 8023d3a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8023d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8023d42:	4313      	orrs	r3, r2
 8023d44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      r1 >>= shift;
 8023d48:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8023d50:	fa22 f303 	lsr.w	r3, r2, r3
 8023d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    }

  np[1] = r1;
 8023d58:	68bb      	ldr	r3, [r7, #8]
 8023d5a:	3304      	adds	r3, #4
 8023d5c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8023d60:	601a      	str	r2, [r3, #0]
  np[0] = r0;
 8023d62:	68bb      	ldr	r3, [r7, #8]
 8023d64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023d68:	601a      	str	r2, [r3, #0]
}
 8023d6a:	bf00      	nop
 8023d6c:	37b0      	adds	r7, #176	@ 0xb0
 8023d6e:	46bd      	mov	sp, r7
 8023d70:	bd80      	pop	{r7, pc}
 8023d72:	bf00      	nop
 8023d74:	0803840c 	.word	0x0803840c
 8023d78:	0803bd34 	.word	0x0803bd34
 8023d7c:	080382a0 	.word	0x080382a0

08023d80 <mpn_div_qr_pi1>:
static void
mpn_div_qr_pi1 (mp_ptr qp,
		mp_ptr np, mp_size_t nn, mp_limb_t n1,
		mp_srcptr dp, mp_size_t dn,
		mp_limb_t dinv)
{
 8023d80:	b580      	push	{r7, lr}
 8023d82:	b0aa      	sub	sp, #168	@ 0xa8
 8023d84:	af00      	add	r7, sp, #0
 8023d86:	60f8      	str	r0, [r7, #12]
 8023d88:	60b9      	str	r1, [r7, #8]
 8023d8a:	607a      	str	r2, [r7, #4]
 8023d8c:	603b      	str	r3, [r7, #0]

  mp_limb_t d1, d0;
  mp_limb_t cy, cy1;
  mp_limb_t q;

  assert (dn > 2);
 8023d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023d92:	2b02      	cmp	r3, #2
 8023d94:	dc06      	bgt.n	8023da4 <mpn_div_qr_pi1+0x24>
 8023d96:	4b38      	ldr	r3, [pc, #224]	@ (8023e78 <mpn_div_qr_pi1+0xf8>)
 8023d98:	4a38      	ldr	r2, [pc, #224]	@ (8023e7c <mpn_div_qr_pi1+0xfc>)
 8023d9a:	f240 4131 	movw	r1, #1073	@ 0x431
 8023d9e:	4838      	ldr	r0, [pc, #224]	@ (8023e80 <mpn_div_qr_pi1+0x100>)
 8023da0:	f011 fa4a 	bl	8035238 <__assert_func>
  assert (nn >= dn);
 8023da4:	687a      	ldr	r2, [r7, #4]
 8023da6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023daa:	429a      	cmp	r2, r3
 8023dac:	da06      	bge.n	8023dbc <mpn_div_qr_pi1+0x3c>
 8023dae:	4b35      	ldr	r3, [pc, #212]	@ (8023e84 <mpn_div_qr_pi1+0x104>)
 8023db0:	4a32      	ldr	r2, [pc, #200]	@ (8023e7c <mpn_div_qr_pi1+0xfc>)
 8023db2:	f240 4132 	movw	r1, #1074	@ 0x432
 8023db6:	4832      	ldr	r0, [pc, #200]	@ (8023e80 <mpn_div_qr_pi1+0x100>)
 8023db8:	f011 fa3e 	bl	8035238 <__assert_func>

  d1 = dp[dn - 1];
 8023dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023dc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8023dc4:	3b01      	subs	r3, #1
 8023dc6:	009b      	lsls	r3, r3, #2
 8023dc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8023dcc:	4413      	add	r3, r2
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  d0 = dp[dn - 2];
 8023dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023dd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8023ddc:	3b02      	subs	r3, #2
 8023dde:	009b      	lsls	r3, r3, #2
 8023de0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8023de4:	4413      	add	r3, r2
 8023de6:	681b      	ldr	r3, [r3, #0]
 8023de8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  assert ((d1 & GMP_LIMB_HIGHBIT) != 0);
 8023dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	db06      	blt.n	8023e02 <mpn_div_qr_pi1+0x82>
 8023df4:	4b24      	ldr	r3, [pc, #144]	@ (8023e88 <mpn_div_qr_pi1+0x108>)
 8023df6:	4a21      	ldr	r2, [pc, #132]	@ (8023e7c <mpn_div_qr_pi1+0xfc>)
 8023df8:	f240 4137 	movw	r1, #1079	@ 0x437
 8023dfc:	4820      	ldr	r0, [pc, #128]	@ (8023e80 <mpn_div_qr_pi1+0x100>)
 8023dfe:	f011 fa1b 	bl	8035238 <__assert_func>
   *
   * We divide <n1, np[dn-1+i], np[dn-2+i], np[dn-3+i],..., np[i]>
   * by            <d1,          d0,        dp[dn-3],  ..., dp[0] >
   */

  i = nn - dn;
 8023e02:	687a      	ldr	r2, [r7, #4]
 8023e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023e08:	1ad3      	subs	r3, r2, r3
 8023e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  do
    {
      mp_limb_t n0 = np[dn-1+i];
 8023e0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023e12:	1e5a      	subs	r2, r3, #1
 8023e14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8023e18:	4413      	add	r3, r2
 8023e1a:	009b      	lsls	r3, r3, #2
 8023e1c:	68ba      	ldr	r2, [r7, #8]
 8023e1e:	4413      	add	r3, r2
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      if (n1 == d1 && n0 == d0)
 8023e26:	683a      	ldr	r2, [r7, #0]
 8023e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023e2c:	429a      	cmp	r2, r3
 8023e2e:	d12d      	bne.n	8023e8c <mpn_div_qr_pi1+0x10c>
 8023e30:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8023e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023e38:	429a      	cmp	r2, r3
 8023e3a:	d127      	bne.n	8023e8c <mpn_div_qr_pi1+0x10c>
	{
	  q = GMP_LIMB_MAX;
 8023e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8023e40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  mpn_submul_1 (np+i, dp, dn, q);
 8023e44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8023e48:	009b      	lsls	r3, r3, #2
 8023e4a:	68ba      	ldr	r2, [r7, #8]
 8023e4c:	18d0      	adds	r0, r2, r3
 8023e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8023e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8023e56:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8023e5a:	f7fe ffe9 	bl	8022e30 <mpn_submul_1>
	  n1 = np[dn-1+i];	/* update n1, last loop's value will now be invalid */
 8023e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023e62:	1e5a      	subs	r2, r3, #1
 8023e64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8023e68:	4413      	add	r3, r2
 8023e6a:	009b      	lsls	r3, r3, #2
 8023e6c:	68ba      	ldr	r2, [r7, #8]
 8023e6e:	4413      	add	r3, r2
 8023e70:	681b      	ldr	r3, [r3, #0]
 8023e72:	603b      	str	r3, [r7, #0]
 8023e74:	e1af      	b.n	80241d6 <mpn_div_qr_pi1+0x456>
 8023e76:	bf00      	nop
 8023e78:	08038444 	.word	0x08038444
 8023e7c:	0803bd48 	.word	0x0803bd48
 8023e80:	080382a0 	.word	0x080382a0
 8023e84:	0803844c 	.word	0x0803844c
 8023e88:	08038458 	.word	0x08038458
	}
      else
	{
	  gmp_udiv_qr_3by2 (q, n1, n0, n1, n0, np[dn-2+i], d1, d0, dinv);
 8023e8c:	2320      	movs	r3, #32
 8023e8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8023e92:	683b      	ldr	r3, [r7, #0]
 8023e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8023e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8023ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8023ea4:	b29b      	uxth	r3, r3
 8023ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8023ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8023eac:	0c1b      	lsrs	r3, r3, #16
 8023eae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8023eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023eb4:	b29b      	uxth	r3, r3
 8023eb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8023eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023ebc:	0c1b      	lsrs	r3, r3, #16
 8023ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8023ec0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023ec2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8023ec4:	fb02 f303 	mul.w	r3, r2, r3
 8023ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8023eca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023ecc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8023ece:	fb02 f303 	mul.w	r3, r2, r3
 8023ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023ed6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8023ed8:	fb02 f303 	mul.w	r3, r2, r3
 8023edc:	667b      	str	r3, [r7, #100]	@ 0x64
 8023ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023ee0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8023ee2:	fb02 f303 	mul.w	r3, r2, r3
 8023ee6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8023eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023eec:	0c1b      	lsrs	r3, r3, #16
 8023eee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023ef0:	4413      	add	r3, r2
 8023ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023ef4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023ef6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023ef8:	4413      	add	r3, r2
 8023efa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023efc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023f00:	429a      	cmp	r2, r3
 8023f02:	d205      	bcs.n	8023f10 <mpn_div_qr_pi1+0x190>
 8023f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8023f08:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8023f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8023f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023f12:	0c1b      	lsrs	r3, r3, #16
 8023f14:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8023f18:	4413      	add	r3, r2
 8023f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8023f1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023f20:	041a      	lsls	r2, r3, #16
 8023f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023f24:	b29b      	uxth	r3, r3
 8023f26:	4413      	add	r3, r2
 8023f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8023f2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8023f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8023f30:	4413      	add	r3, r2
 8023f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023f34:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8023f38:	683b      	ldr	r3, [r7, #0]
 8023f3a:	4413      	add	r3, r2
 8023f3c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8023f3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8023f40:	4291      	cmp	r1, r2
 8023f42:	bf34      	ite	cc
 8023f44:	2201      	movcc	r2, #1
 8023f46:	2200      	movcs	r2, #0
 8023f48:	b2d2      	uxtb	r2, r2
 8023f4a:	4413      	add	r3, r2
 8023f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8023f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023f52:	663b      	str	r3, [r7, #96]	@ 0x60
 8023f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023f58:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8023f5c:	fb02 f303 	mul.w	r3, r2, r3
 8023f60:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8023f64:	1ad3      	subs	r3, r2, r3
 8023f66:	603b      	str	r3, [r7, #0]
 8023f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023f6c:	1e9a      	subs	r2, r3, #2
 8023f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8023f72:	4413      	add	r3, r2
 8023f74:	009b      	lsls	r3, r3, #2
 8023f76:	68ba      	ldr	r2, [r7, #8]
 8023f78:	4413      	add	r3, r2
 8023f7a:	681a      	ldr	r2, [r3, #0]
 8023f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023f80:	1ad3      	subs	r3, r2, r3
 8023f82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023f84:	683a      	ldr	r2, [r7, #0]
 8023f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8023f8a:	1ad3      	subs	r3, r2, r3
 8023f8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8023f90:	1e91      	subs	r1, r2, #2
 8023f92:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8023f96:	440a      	add	r2, r1
 8023f98:	0092      	lsls	r2, r2, #2
 8023f9a:	68b9      	ldr	r1, [r7, #8]
 8023f9c:	440a      	add	r2, r1
 8023f9e:	6812      	ldr	r2, [r2, #0]
 8023fa0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8023fa4:	4291      	cmp	r1, r2
 8023fa6:	bf8c      	ite	hi
 8023fa8:	2201      	movhi	r2, #1
 8023faa:	2200      	movls	r2, #0
 8023fac:	b2d2      	uxtb	r2, r2
 8023fae:	1a9b      	subs	r3, r3, r2
 8023fb0:	603b      	str	r3, [r7, #0]
 8023fb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8023fb8:	2320      	movs	r3, #32
 8023fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8023fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023fc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8023fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8023fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023fca:	b29b      	uxth	r3, r3
 8023fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023fd0:	0c1b      	lsrs	r3, r3, #16
 8023fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8023fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023fd6:	b29b      	uxth	r3, r3
 8023fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8023fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023fdc:	0c1b      	lsrs	r3, r3, #16
 8023fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023fe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023fe4:	fb02 f303 	mul.w	r3, r2, r3
 8023fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8023fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023fee:	fb02 f303 	mul.w	r3, r2, r3
 8023ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8023ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023ff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023ff8:	fb02 f303 	mul.w	r3, r2, r3
 8023ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8023ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024000:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024002:	fb02 f303 	mul.w	r3, r2, r3
 8024006:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 802400a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802400c:	0c1b      	lsrs	r3, r3, #16
 802400e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024010:	4413      	add	r3, r2
 8024012:	637b      	str	r3, [r7, #52]	@ 0x34
 8024014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024018:	4413      	add	r3, r2
 802401a:	637b      	str	r3, [r7, #52]	@ 0x34
 802401c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024020:	429a      	cmp	r2, r3
 8024022:	d205      	bcs.n	8024030 <mpn_div_qr_pi1+0x2b0>
 8024024:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8024028:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 802402c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8024030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024032:	0c1b      	lsrs	r3, r3, #16
 8024034:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8024038:	4413      	add	r3, r2
 802403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802403e:	041a      	lsls	r2, r3, #16
 8024040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024042:	b29b      	uxth	r3, r3
 8024044:	4413      	add	r3, r2
 8024046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8024048:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 802404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802404e:	1ad3      	subs	r3, r2, r3
 8024050:	627b      	str	r3, [r7, #36]	@ 0x24
 8024052:	683a      	ldr	r2, [r7, #0]
 8024054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024056:	1ad3      	subs	r3, r2, r3
 8024058:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 802405c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802405e:	4291      	cmp	r1, r2
 8024060:	bf34      	ite	cc
 8024062:	2201      	movcc	r2, #1
 8024064:	2200      	movcs	r2, #0
 8024066:	b2d2      	uxtb	r2, r2
 8024068:	1a9b      	subs	r3, r3, r2
 802406a:	603b      	str	r3, [r7, #0]
 802406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802406e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8024072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8024076:	3301      	adds	r3, #1
 8024078:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802407c:	683a      	ldr	r2, [r7, #0]
 802407e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8024080:	429a      	cmp	r2, r3
 8024082:	bf2c      	ite	cs
 8024084:	2301      	movcs	r3, #1
 8024086:	2300      	movcc	r3, #0
 8024088:	b2db      	uxtb	r3, r3
 802408a:	425b      	negs	r3, r3
 802408c:	623b      	str	r3, [r7, #32]
 802408e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8024092:	6a3b      	ldr	r3, [r7, #32]
 8024094:	4413      	add	r3, r2
 8024096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802409a:	6a3a      	ldr	r2, [r7, #32]
 802409c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80240a0:	4013      	ands	r3, r2
 80240a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80240a6:	4413      	add	r3, r2
 80240a8:	61fb      	str	r3, [r7, #28]
 80240aa:	6a3a      	ldr	r2, [r7, #32]
 80240ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80240b0:	401a      	ands	r2, r3
 80240b2:	683b      	ldr	r3, [r7, #0]
 80240b4:	4413      	add	r3, r2
 80240b6:	69f9      	ldr	r1, [r7, #28]
 80240b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80240bc:	4291      	cmp	r1, r2
 80240be:	bf34      	ite	cc
 80240c0:	2201      	movcc	r2, #1
 80240c2:	2200      	movcs	r2, #0
 80240c4:	b2d2      	uxtb	r2, r2
 80240c6:	4413      	add	r3, r2
 80240c8:	603b      	str	r3, [r7, #0]
 80240ca:	69fb      	ldr	r3, [r7, #28]
 80240cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80240d0:	683a      	ldr	r2, [r7, #0]
 80240d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80240d6:	429a      	cmp	r2, r3
 80240d8:	d327      	bcc.n	802412a <mpn_div_qr_pi1+0x3aa>
 80240da:	683a      	ldr	r2, [r7, #0]
 80240dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80240e0:	429a      	cmp	r2, r3
 80240e2:	d805      	bhi.n	80240f0 <mpn_div_qr_pi1+0x370>
 80240e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80240e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80240ec:	429a      	cmp	r2, r3
 80240ee:	d31c      	bcc.n	802412a <mpn_div_qr_pi1+0x3aa>
 80240f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80240f4:	3301      	adds	r3, #1
 80240f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80240fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80240fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8024102:	1ad3      	subs	r3, r2, r3
 8024104:	61bb      	str	r3, [r7, #24]
 8024106:	683a      	ldr	r2, [r7, #0]
 8024108:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 802410c:	1ad3      	subs	r3, r2, r3
 802410e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8024112:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8024116:	4291      	cmp	r1, r2
 8024118:	bf34      	ite	cc
 802411a:	2201      	movcc	r2, #1
 802411c:	2200      	movcs	r2, #0
 802411e:	b2d2      	uxtb	r2, r2
 8024120:	1a9b      	subs	r3, r3, r2
 8024122:	603b      	str	r3, [r7, #0]
 8024124:	69bb      	ldr	r3, [r7, #24]
 8024126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	  cy = mpn_submul_1 (np + i, dp, dn-2, q);
 802412a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802412e:	009b      	lsls	r3, r3, #2
 8024130:	68ba      	ldr	r2, [r7, #8]
 8024132:	18d0      	adds	r0, r2, r3
 8024134:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024138:	1e9a      	subs	r2, r3, #2
 802413a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802413e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8024142:	f7fe fe75 	bl	8022e30 <mpn_submul_1>
 8024146:	6178      	str	r0, [r7, #20]

	  cy1 = n0 < cy;
 8024148:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 802414c:	697b      	ldr	r3, [r7, #20]
 802414e:	429a      	cmp	r2, r3
 8024150:	bf34      	ite	cc
 8024152:	2301      	movcc	r3, #1
 8024154:	2300      	movcs	r3, #0
 8024156:	b2db      	uxtb	r3, r3
 8024158:	613b      	str	r3, [r7, #16]
	  n0 = n0 - cy;
 802415a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 802415e:	697b      	ldr	r3, [r7, #20]
 8024160:	1ad3      	subs	r3, r2, r3
 8024162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	  cy = n1 < cy1;
 8024166:	683a      	ldr	r2, [r7, #0]
 8024168:	693b      	ldr	r3, [r7, #16]
 802416a:	429a      	cmp	r2, r3
 802416c:	bf34      	ite	cc
 802416e:	2301      	movcc	r3, #1
 8024170:	2300      	movcs	r3, #0
 8024172:	b2db      	uxtb	r3, r3
 8024174:	617b      	str	r3, [r7, #20]
	  n1 = n1 - cy1;
 8024176:	683a      	ldr	r2, [r7, #0]
 8024178:	693b      	ldr	r3, [r7, #16]
 802417a:	1ad3      	subs	r3, r2, r3
 802417c:	603b      	str	r3, [r7, #0]
	  np[dn-2+i] = n0;
 802417e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024182:	1e9a      	subs	r2, r3, #2
 8024184:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8024188:	4413      	add	r3, r2
 802418a:	009b      	lsls	r3, r3, #2
 802418c:	68ba      	ldr	r2, [r7, #8]
 802418e:	4413      	add	r3, r2
 8024190:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8024194:	601a      	str	r2, [r3, #0]

	  if (cy != 0)
 8024196:	697b      	ldr	r3, [r7, #20]
 8024198:	2b00      	cmp	r3, #0
 802419a:	d01c      	beq.n	80241d6 <mpn_div_qr_pi1+0x456>
	    {
	      n1 += d1 + mpn_add_n (np + i, np + i, dp, dn - 1);
 802419c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80241a0:	009b      	lsls	r3, r3, #2
 80241a2:	68ba      	ldr	r2, [r7, #8]
 80241a4:	18d0      	adds	r0, r2, r3
 80241a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80241aa:	009b      	lsls	r3, r3, #2
 80241ac:	68ba      	ldr	r2, [r7, #8]
 80241ae:	18d1      	adds	r1, r2, r3
 80241b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80241b4:	3b01      	subs	r3, #1
 80241b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80241ba:	f7fe fbeb 	bl	8022994 <mpn_add_n>
 80241be:	4602      	mov	r2, r0
 80241c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80241c4:	4413      	add	r3, r2
 80241c6:	683a      	ldr	r2, [r7, #0]
 80241c8:	4413      	add	r3, r2
 80241ca:	603b      	str	r3, [r7, #0]
	      q--;
 80241cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80241d0:	3b01      	subs	r3, #1
 80241d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	    }
	}

      if (qp)
 80241d6:	68fb      	ldr	r3, [r7, #12]
 80241d8:	2b00      	cmp	r3, #0
 80241da:	d007      	beq.n	80241ec <mpn_div_qr_pi1+0x46c>
	qp[i] = q;
 80241dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80241e0:	009b      	lsls	r3, r3, #2
 80241e2:	68fa      	ldr	r2, [r7, #12]
 80241e4:	4413      	add	r3, r2
 80241e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80241ea:	601a      	str	r2, [r3, #0]
    }
  while (--i >= 0);
 80241ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80241f0:	3b01      	subs	r3, #1
 80241f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80241f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80241fa:	2b00      	cmp	r3, #0
 80241fc:	f6bf ae07 	bge.w	8023e0e <mpn_div_qr_pi1+0x8e>

  np[dn - 1] = n1;
 8024200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8024208:	3b01      	subs	r3, #1
 802420a:	009b      	lsls	r3, r3, #2
 802420c:	68ba      	ldr	r2, [r7, #8]
 802420e:	4413      	add	r3, r2
 8024210:	683a      	ldr	r2, [r7, #0]
 8024212:	601a      	str	r2, [r3, #0]
}
 8024214:	bf00      	nop
 8024216:	37a8      	adds	r7, #168	@ 0xa8
 8024218:	46bd      	mov	sp, r7
 802421a:	bd80      	pop	{r7, pc}

0802421c <mpn_div_qr_preinv>:

static void
mpn_div_qr_preinv (mp_ptr qp, mp_ptr np, mp_size_t nn,
		   mp_srcptr dp, mp_size_t dn,
		   const struct gmp_div_inverse *inv)
{
 802421c:	b580      	push	{r7, lr}
 802421e:	b08c      	sub	sp, #48	@ 0x30
 8024220:	af04      	add	r7, sp, #16
 8024222:	60f8      	str	r0, [r7, #12]
 8024224:	60b9      	str	r1, [r7, #8]
 8024226:	607a      	str	r2, [r7, #4]
 8024228:	603b      	str	r3, [r7, #0]
  assert (dn > 0);
 802422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802422c:	2b00      	cmp	r3, #0
 802422e:	dc06      	bgt.n	802423e <mpn_div_qr_preinv+0x22>
 8024230:	4b47      	ldr	r3, [pc, #284]	@ (8024350 <mpn_div_qr_preinv+0x134>)
 8024232:	4a48      	ldr	r2, [pc, #288]	@ (8024354 <mpn_div_qr_preinv+0x138>)
 8024234:	f240 4169 	movw	r1, #1129	@ 0x469
 8024238:	4847      	ldr	r0, [pc, #284]	@ (8024358 <mpn_div_qr_preinv+0x13c>)
 802423a:	f010 fffd 	bl	8035238 <__assert_func>
  assert (nn >= dn);
 802423e:	687a      	ldr	r2, [r7, #4]
 8024240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024242:	429a      	cmp	r2, r3
 8024244:	da06      	bge.n	8024254 <mpn_div_qr_preinv+0x38>
 8024246:	4b45      	ldr	r3, [pc, #276]	@ (802435c <mpn_div_qr_preinv+0x140>)
 8024248:	4a42      	ldr	r2, [pc, #264]	@ (8024354 <mpn_div_qr_preinv+0x138>)
 802424a:	f240 416a 	movw	r1, #1130	@ 0x46a
 802424e:	4842      	ldr	r0, [pc, #264]	@ (8024358 <mpn_div_qr_preinv+0x13c>)
 8024250:	f010 fff2 	bl	8035238 <__assert_func>

  if (dn == 1)
 8024254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024256:	2b01      	cmp	r3, #1
 8024258:	d109      	bne.n	802426e <mpn_div_qr_preinv+0x52>
    np[0] = mpn_div_qr_1_preinv (qp, np, nn, inv);
 802425a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802425c:	687a      	ldr	r2, [r7, #4]
 802425e:	68b9      	ldr	r1, [r7, #8]
 8024260:	68f8      	ldr	r0, [r7, #12]
 8024262:	f7ff facb 	bl	80237fc <mpn_div_qr_1_preinv>
 8024266:	4602      	mov	r2, r0
 8024268:	68bb      	ldr	r3, [r7, #8]
 802426a:	601a      	str	r2, [r3, #0]
      mpn_div_qr_pi1 (qp, np, nn, nh, dp, dn, inv->di);

      if (shift > 0)
	gmp_assert_nocarry (mpn_rshift (np, np, dn, shift));
    }
}
 802426c:	e06b      	b.n	8024346 <mpn_div_qr_preinv+0x12a>
  else if (dn == 2)
 802426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024270:	2b02      	cmp	r3, #2
 8024272:	d106      	bne.n	8024282 <mpn_div_qr_preinv+0x66>
    mpn_div_qr_2_preinv (qp, np, nn, inv);
 8024274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024276:	687a      	ldr	r2, [r7, #4]
 8024278:	68b9      	ldr	r1, [r7, #8]
 802427a:	68f8      	ldr	r0, [r7, #12]
 802427c:	f7ff fb92 	bl	80239a4 <mpn_div_qr_2_preinv>
}
 8024280:	e061      	b.n	8024346 <mpn_div_qr_preinv+0x12a>
      assert (inv->d1 == dp[dn-1]);
 8024282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024284:	685a      	ldr	r2, [r3, #4]
 8024286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802428c:	3b01      	subs	r3, #1
 802428e:	009b      	lsls	r3, r3, #2
 8024290:	6839      	ldr	r1, [r7, #0]
 8024292:	440b      	add	r3, r1
 8024294:	681b      	ldr	r3, [r3, #0]
 8024296:	429a      	cmp	r2, r3
 8024298:	d006      	beq.n	80242a8 <mpn_div_qr_preinv+0x8c>
 802429a:	4b31      	ldr	r3, [pc, #196]	@ (8024360 <mpn_div_qr_preinv+0x144>)
 802429c:	4a2d      	ldr	r2, [pc, #180]	@ (8024354 <mpn_div_qr_preinv+0x138>)
 802429e:	f240 4175 	movw	r1, #1141	@ 0x475
 80242a2:	482d      	ldr	r0, [pc, #180]	@ (8024358 <mpn_div_qr_preinv+0x13c>)
 80242a4:	f010 ffc8 	bl	8035238 <__assert_func>
      assert (inv->d0 == dp[dn-2]);
 80242a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80242aa:	689a      	ldr	r2, [r3, #8]
 80242ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80242ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80242b2:	3b02      	subs	r3, #2
 80242b4:	009b      	lsls	r3, r3, #2
 80242b6:	6839      	ldr	r1, [r7, #0]
 80242b8:	440b      	add	r3, r1
 80242ba:	681b      	ldr	r3, [r3, #0]
 80242bc:	429a      	cmp	r2, r3
 80242be:	d006      	beq.n	80242ce <mpn_div_qr_preinv+0xb2>
 80242c0:	4b28      	ldr	r3, [pc, #160]	@ (8024364 <mpn_div_qr_preinv+0x148>)
 80242c2:	4a24      	ldr	r2, [pc, #144]	@ (8024354 <mpn_div_qr_preinv+0x138>)
 80242c4:	f240 4176 	movw	r1, #1142	@ 0x476
 80242c8:	4823      	ldr	r0, [pc, #140]	@ (8024358 <mpn_div_qr_preinv+0x13c>)
 80242ca:	f010 ffb5 	bl	8035238 <__assert_func>
      assert ((inv->d1 & GMP_LIMB_HIGHBIT) != 0);
 80242ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80242d0:	685b      	ldr	r3, [r3, #4]
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	db06      	blt.n	80242e4 <mpn_div_qr_preinv+0xc8>
 80242d6:	4b24      	ldr	r3, [pc, #144]	@ (8024368 <mpn_div_qr_preinv+0x14c>)
 80242d8:	4a1e      	ldr	r2, [pc, #120]	@ (8024354 <mpn_div_qr_preinv+0x138>)
 80242da:	f240 4177 	movw	r1, #1143	@ 0x477
 80242de:	481e      	ldr	r0, [pc, #120]	@ (8024358 <mpn_div_qr_preinv+0x13c>)
 80242e0:	f010 ffaa 	bl	8035238 <__assert_func>
      shift = inv->shift;
 80242e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	61bb      	str	r3, [r7, #24]
      if (shift > 0)
 80242ea:	69bb      	ldr	r3, [r7, #24]
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	d007      	beq.n	8024300 <mpn_div_qr_preinv+0xe4>
	nh = mpn_lshift (np, np, nn, shift);
 80242f0:	69bb      	ldr	r3, [r7, #24]
 80242f2:	687a      	ldr	r2, [r7, #4]
 80242f4:	68b9      	ldr	r1, [r7, #8]
 80242f6:	68b8      	ldr	r0, [r7, #8]
 80242f8:	f7fe feb4 	bl	8023064 <mpn_lshift>
 80242fc:	61f8      	str	r0, [r7, #28]
 80242fe:	e001      	b.n	8024304 <mpn_div_qr_preinv+0xe8>
	nh = 0;
 8024300:	2300      	movs	r3, #0
 8024302:	61fb      	str	r3, [r7, #28]
      mpn_div_qr_pi1 (qp, np, nn, nh, dp, dn, inv->di);
 8024304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024306:	68db      	ldr	r3, [r3, #12]
 8024308:	9302      	str	r3, [sp, #8]
 802430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802430c:	9301      	str	r3, [sp, #4]
 802430e:	683b      	ldr	r3, [r7, #0]
 8024310:	9300      	str	r3, [sp, #0]
 8024312:	69fb      	ldr	r3, [r7, #28]
 8024314:	687a      	ldr	r2, [r7, #4]
 8024316:	68b9      	ldr	r1, [r7, #8]
 8024318:	68f8      	ldr	r0, [r7, #12]
 802431a:	f7ff fd31 	bl	8023d80 <mpn_div_qr_pi1>
      if (shift > 0)
 802431e:	69bb      	ldr	r3, [r7, #24]
 8024320:	2b00      	cmp	r3, #0
 8024322:	d010      	beq.n	8024346 <mpn_div_qr_preinv+0x12a>
	gmp_assert_nocarry (mpn_rshift (np, np, dn, shift));
 8024324:	69bb      	ldr	r3, [r7, #24]
 8024326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024328:	68b9      	ldr	r1, [r7, #8]
 802432a:	68b8      	ldr	r0, [r7, #8]
 802432c:	f7fe ff0e 	bl	802314c <mpn_rshift>
 8024330:	6178      	str	r0, [r7, #20]
 8024332:	697b      	ldr	r3, [r7, #20]
 8024334:	2b00      	cmp	r3, #0
 8024336:	d006      	beq.n	8024346 <mpn_div_qr_preinv+0x12a>
 8024338:	4b0c      	ldr	r3, [pc, #48]	@ (802436c <mpn_div_qr_preinv+0x150>)
 802433a:	4a06      	ldr	r2, [pc, #24]	@ (8024354 <mpn_div_qr_preinv+0x138>)
 802433c:	f240 4182 	movw	r1, #1154	@ 0x482
 8024340:	4805      	ldr	r0, [pc, #20]	@ (8024358 <mpn_div_qr_preinv+0x13c>)
 8024342:	f010 ff79 	bl	8035238 <__assert_func>
}
 8024346:	bf00      	nop
 8024348:	3720      	adds	r7, #32
 802434a:	46bd      	mov	sp, r7
 802434c:	bd80      	pop	{r7, pc}
 802434e:	bf00      	nop
 8024350:	080383fc 	.word	0x080383fc
 8024354:	0803bd58 	.word	0x0803bd58
 8024358:	080382a0 	.word	0x080382a0
 802435c:	0803844c 	.word	0x0803844c
 8024360:	08038478 	.word	0x08038478
 8024364:	0803848c 	.word	0x0803848c
 8024368:	080384a0 	.word	0x080384a0
 802436c:	080384c4 	.word	0x080384c4

08024370 <mpn_div_qr>:

static void
mpn_div_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn)
{
 8024370:	b580      	push	{r7, lr}
 8024372:	b08c      	sub	sp, #48	@ 0x30
 8024374:	af02      	add	r7, sp, #8
 8024376:	60f8      	str	r0, [r7, #12]
 8024378:	60b9      	str	r1, [r7, #8]
 802437a:	607a      	str	r2, [r7, #4]
 802437c:	603b      	str	r3, [r7, #0]
  struct gmp_div_inverse inv;
  mp_ptr tp = NULL;
 802437e:	2300      	movs	r3, #0
 8024380:	627b      	str	r3, [r7, #36]	@ 0x24

  assert (dn > 0);
 8024382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024384:	2b00      	cmp	r3, #0
 8024386:	dc06      	bgt.n	8024396 <mpn_div_qr+0x26>
 8024388:	4b25      	ldr	r3, [pc, #148]	@ (8024420 <mpn_div_qr+0xb0>)
 802438a:	4a26      	ldr	r2, [pc, #152]	@ (8024424 <mpn_div_qr+0xb4>)
 802438c:	f240 418c 	movw	r1, #1164	@ 0x48c
 8024390:	4825      	ldr	r0, [pc, #148]	@ (8024428 <mpn_div_qr+0xb8>)
 8024392:	f010 ff51 	bl	8035238 <__assert_func>
  assert (nn >= dn);
 8024396:	687a      	ldr	r2, [r7, #4]
 8024398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802439a:	429a      	cmp	r2, r3
 802439c:	da06      	bge.n	80243ac <mpn_div_qr+0x3c>
 802439e:	4b23      	ldr	r3, [pc, #140]	@ (802442c <mpn_div_qr+0xbc>)
 80243a0:	4a20      	ldr	r2, [pc, #128]	@ (8024424 <mpn_div_qr+0xb4>)
 80243a2:	f240 418d 	movw	r1, #1165	@ 0x48d
 80243a6:	4820      	ldr	r0, [pc, #128]	@ (8024428 <mpn_div_qr+0xb8>)
 80243a8:	f010 ff46 	bl	8035238 <__assert_func>

  mpn_div_qr_invert (&inv, dp, dn);
 80243ac:	f107 0310 	add.w	r3, r7, #16
 80243b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80243b2:	6839      	ldr	r1, [r7, #0]
 80243b4:	4618      	mov	r0, r3
 80243b6:	f7ff f97f 	bl	80236b8 <mpn_div_qr_invert>
  if (dn > 2 && inv.shift > 0)
 80243ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80243bc:	2b02      	cmp	r3, #2
 80243be:	dd19      	ble.n	80243f4 <mpn_div_qr+0x84>
 80243c0:	693b      	ldr	r3, [r7, #16]
 80243c2:	2b00      	cmp	r3, #0
 80243c4:	d016      	beq.n	80243f4 <mpn_div_qr+0x84>
    {
      tp = gmp_alloc_limbs (dn);
 80243c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80243c8:	f7fe f986 	bl	80226d8 <gmp_alloc_limbs>
 80243cc:	6278      	str	r0, [r7, #36]	@ 0x24
      gmp_assert_nocarry (mpn_lshift (tp, dp, dn, inv.shift));
 80243ce:	693b      	ldr	r3, [r7, #16]
 80243d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80243d2:	6839      	ldr	r1, [r7, #0]
 80243d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80243d6:	f7fe fe45 	bl	8023064 <mpn_lshift>
 80243da:	6238      	str	r0, [r7, #32]
 80243dc:	6a3b      	ldr	r3, [r7, #32]
 80243de:	2b00      	cmp	r3, #0
 80243e0:	d006      	beq.n	80243f0 <mpn_div_qr+0x80>
 80243e2:	4b13      	ldr	r3, [pc, #76]	@ (8024430 <mpn_div_qr+0xc0>)
 80243e4:	4a0f      	ldr	r2, [pc, #60]	@ (8024424 <mpn_div_qr+0xb4>)
 80243e6:	f240 4193 	movw	r1, #1171	@ 0x493
 80243ea:	480f      	ldr	r0, [pc, #60]	@ (8024428 <mpn_div_qr+0xb8>)
 80243ec:	f010 ff24 	bl	8035238 <__assert_func>
      dp = tp;
 80243f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80243f2:	603b      	str	r3, [r7, #0]
    }
  mpn_div_qr_preinv (qp, np, nn, dp, dn, &inv);
 80243f4:	f107 0310 	add.w	r3, r7, #16
 80243f8:	9301      	str	r3, [sp, #4]
 80243fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80243fc:	9300      	str	r3, [sp, #0]
 80243fe:	683b      	ldr	r3, [r7, #0]
 8024400:	687a      	ldr	r2, [r7, #4]
 8024402:	68b9      	ldr	r1, [r7, #8]
 8024404:	68f8      	ldr	r0, [r7, #12]
 8024406:	f7ff ff09 	bl	802421c <mpn_div_qr_preinv>
  if (tp)
 802440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802440c:	2b00      	cmp	r3, #0
 802440e:	d003      	beq.n	8024418 <mpn_div_qr+0xa8>
    gmp_free_limbs (tp, dn);
 8024410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8024412:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8024414:	f7fe f998 	bl	8022748 <gmp_free_limbs>
}
 8024418:	bf00      	nop
 802441a:	3728      	adds	r7, #40	@ 0x28
 802441c:	46bd      	mov	sp, r7
 802441e:	bd80      	pop	{r7, pc}
 8024420:	080383fc 	.word	0x080383fc
 8024424:	0803bd6c 	.word	0x0803bd6c
 8024428:	080382a0 	.word	0x080382a0
 802442c:	0803844c 	.word	0x0803844c
 8024430:	080384c4 	.word	0x080384c4

08024434 <mpn_limb_size_in_base_2>:
  info->bb = p;
}

static mp_bitcnt_t
mpn_limb_size_in_base_2 (mp_limb_t u)
{
 8024434:	b580      	push	{r7, lr}
 8024436:	b086      	sub	sp, #24
 8024438:	af00      	add	r7, sp, #0
 802443a:	6078      	str	r0, [r7, #4]
  unsigned shift;

  assert (u > 0);
 802443c:	687b      	ldr	r3, [r7, #4]
 802443e:	2b00      	cmp	r3, #0
 8024440:	d106      	bne.n	8024450 <mpn_limb_size_in_base_2+0x1c>
 8024442:	4b18      	ldr	r3, [pc, #96]	@ (80244a4 <mpn_limb_size_in_base_2+0x70>)
 8024444:	4a18      	ldr	r2, [pc, #96]	@ (80244a8 <mpn_limb_size_in_base_2+0x74>)
 8024446:	f240 41ca 	movw	r1, #1226	@ 0x4ca
 802444a:	4818      	ldr	r0, [pc, #96]	@ (80244ac <mpn_limb_size_in_base_2+0x78>)
 802444c:	f010 fef4 	bl	8035238 <__assert_func>
  gmp_clz (shift, u);
 8024450:	687b      	ldr	r3, [r7, #4]
 8024452:	617b      	str	r3, [r7, #20]
 8024454:	2300      	movs	r3, #0
 8024456:	613b      	str	r3, [r7, #16]
 8024458:	2308      	movs	r3, #8
 802445a:	60fb      	str	r3, [r7, #12]
 802445c:	68fb      	ldr	r3, [r7, #12]
 802445e:	2b1f      	cmp	r3, #31
 8024460:	dc13      	bgt.n	802448a <mpn_limb_size_in_base_2+0x56>
 8024462:	e007      	b.n	8024474 <mpn_limb_size_in_base_2+0x40>
 8024464:	697a      	ldr	r2, [r7, #20]
 8024466:	68fb      	ldr	r3, [r7, #12]
 8024468:	fa02 f303 	lsl.w	r3, r2, r3
 802446c:	617b      	str	r3, [r7, #20]
 802446e:	693b      	ldr	r3, [r7, #16]
 8024470:	3308      	adds	r3, #8
 8024472:	613b      	str	r3, [r7, #16]
 8024474:	697b      	ldr	r3, [r7, #20]
 8024476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802447a:	d3f3      	bcc.n	8024464 <mpn_limb_size_in_base_2+0x30>
 802447c:	e005      	b.n	802448a <mpn_limb_size_in_base_2+0x56>
 802447e:	697b      	ldr	r3, [r7, #20]
 8024480:	005b      	lsls	r3, r3, #1
 8024482:	617b      	str	r3, [r7, #20]
 8024484:	693b      	ldr	r3, [r7, #16]
 8024486:	3301      	adds	r3, #1
 8024488:	613b      	str	r3, [r7, #16]
 802448a:	697b      	ldr	r3, [r7, #20]
 802448c:	2b00      	cmp	r3, #0
 802448e:	daf6      	bge.n	802447e <mpn_limb_size_in_base_2+0x4a>
 8024490:	693b      	ldr	r3, [r7, #16]
 8024492:	60bb      	str	r3, [r7, #8]
  return GMP_LIMB_BITS - shift;
 8024494:	68bb      	ldr	r3, [r7, #8]
 8024496:	f1c3 0320 	rsb	r3, r3, #32
}
 802449a:	4618      	mov	r0, r3
 802449c:	3718      	adds	r7, #24
 802449e:	46bd      	mov	sp, r7
 80244a0:	bd80      	pop	{r7, pc}
 80244a2:	bf00      	nop
 80244a4:	080384d0 	.word	0x080384d0
 80244a8:	0803bd78 	.word	0x0803bd78
 80244ac:	080382a0 	.word	0x080382a0

080244b0 <mpz_init>:


/* MPZ interface */
void
mpz_init (mpz_t r)
{
 80244b0:	b480      	push	{r7}
 80244b2:	b083      	sub	sp, #12
 80244b4:	af00      	add	r7, sp, #0
 80244b6:	6078      	str	r0, [r7, #4]
  static const mp_limb_t dummy_limb = GMP_LIMB_MAX & 0xc1a0;

  r->_mp_alloc = 0;
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	2200      	movs	r2, #0
 80244bc:	601a      	str	r2, [r3, #0]
  r->_mp_size = 0;
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	2200      	movs	r2, #0
 80244c2:	605a      	str	r2, [r3, #4]
  r->_mp_d = (mp_ptr) &dummy_limb;
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	4a04      	ldr	r2, [pc, #16]	@ (80244d8 <mpz_init+0x28>)
 80244c8:	609a      	str	r2, [r3, #8]
}
 80244ca:	bf00      	nop
 80244cc:	370c      	adds	r7, #12
 80244ce:	46bd      	mov	sp, r7
 80244d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244d4:	4770      	bx	lr
 80244d6:	bf00      	nop
 80244d8:	0803bd90 	.word	0x0803bd90

080244dc <mpz_init2>:

/* The utility of this function is a bit limited, since many functions
   assigns the result variable using mpz_swap. */
void
mpz_init2 (mpz_t r, mp_bitcnt_t bits)
{
 80244dc:	b580      	push	{r7, lr}
 80244de:	b084      	sub	sp, #16
 80244e0:	af00      	add	r7, sp, #0
 80244e2:	6078      	str	r0, [r7, #4]
 80244e4:	6039      	str	r1, [r7, #0]
  mp_size_t rn;

  bits -= (bits != 0);		/* Round down, except if 0 */
 80244e6:	683b      	ldr	r3, [r7, #0]
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	bf14      	ite	ne
 80244ec:	2301      	movne	r3, #1
 80244ee:	2300      	moveq	r3, #0
 80244f0:	b2db      	uxtb	r3, r3
 80244f2:	461a      	mov	r2, r3
 80244f4:	683b      	ldr	r3, [r7, #0]
 80244f6:	1a9b      	subs	r3, r3, r2
 80244f8:	603b      	str	r3, [r7, #0]
  rn = 1 + bits / GMP_LIMB_BITS;
 80244fa:	683b      	ldr	r3, [r7, #0]
 80244fc:	095b      	lsrs	r3, r3, #5
 80244fe:	3301      	adds	r3, #1
 8024500:	60fb      	str	r3, [r7, #12]

  r->_mp_alloc = rn;
 8024502:	687b      	ldr	r3, [r7, #4]
 8024504:	68fa      	ldr	r2, [r7, #12]
 8024506:	601a      	str	r2, [r3, #0]
  r->_mp_size = 0;
 8024508:	687b      	ldr	r3, [r7, #4]
 802450a:	2200      	movs	r2, #0
 802450c:	605a      	str	r2, [r3, #4]
  r->_mp_d = gmp_alloc_limbs (rn);
 802450e:	68f8      	ldr	r0, [r7, #12]
 8024510:	f7fe f8e2 	bl	80226d8 <gmp_alloc_limbs>
 8024514:	4602      	mov	r2, r0
 8024516:	687b      	ldr	r3, [r7, #4]
 8024518:	609a      	str	r2, [r3, #8]
}
 802451a:	bf00      	nop
 802451c:	3710      	adds	r7, #16
 802451e:	46bd      	mov	sp, r7
 8024520:	bd80      	pop	{r7, pc}

08024522 <mpz_clear>:

void
mpz_clear (mpz_t r)
{
 8024522:	b580      	push	{r7, lr}
 8024524:	b082      	sub	sp, #8
 8024526:	af00      	add	r7, sp, #0
 8024528:	6078      	str	r0, [r7, #4]
  if (r->_mp_alloc)
 802452a:	687b      	ldr	r3, [r7, #4]
 802452c:	681b      	ldr	r3, [r3, #0]
 802452e:	2b00      	cmp	r3, #0
 8024530:	d007      	beq.n	8024542 <mpz_clear+0x20>
    gmp_free_limbs (r->_mp_d, r->_mp_alloc);
 8024532:	687b      	ldr	r3, [r7, #4]
 8024534:	689a      	ldr	r2, [r3, #8]
 8024536:	687b      	ldr	r3, [r7, #4]
 8024538:	681b      	ldr	r3, [r3, #0]
 802453a:	4619      	mov	r1, r3
 802453c:	4610      	mov	r0, r2
 802453e:	f7fe f903 	bl	8022748 <gmp_free_limbs>
}
 8024542:	bf00      	nop
 8024544:	3708      	adds	r7, #8
 8024546:	46bd      	mov	sp, r7
 8024548:	bd80      	pop	{r7, pc}

0802454a <mpz_realloc>:

static mp_ptr
mpz_realloc (mpz_t r, mp_size_t size)
{
 802454a:	b580      	push	{r7, lr}
 802454c:	b082      	sub	sp, #8
 802454e:	af00      	add	r7, sp, #0
 8024550:	6078      	str	r0, [r7, #4]
 8024552:	6039      	str	r1, [r7, #0]
  size = GMP_MAX (size, 1);
 8024554:	683b      	ldr	r3, [r7, #0]
 8024556:	2b01      	cmp	r3, #1
 8024558:	bfb8      	it	lt
 802455a:	2301      	movlt	r3, #1
 802455c:	603b      	str	r3, [r7, #0]

  if (r->_mp_alloc)
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	681b      	ldr	r3, [r3, #0]
 8024562:	2b00      	cmp	r3, #0
 8024564:	d00b      	beq.n	802457e <mpz_realloc+0x34>
    r->_mp_d = gmp_realloc_limbs (r->_mp_d, r->_mp_alloc, size);
 8024566:	687b      	ldr	r3, [r7, #4]
 8024568:	6898      	ldr	r0, [r3, #8]
 802456a:	687b      	ldr	r3, [r7, #4]
 802456c:	681b      	ldr	r3, [r3, #0]
 802456e:	683a      	ldr	r2, [r7, #0]
 8024570:	4619      	mov	r1, r3
 8024572:	f7fe f8c3 	bl	80226fc <gmp_realloc_limbs>
 8024576:	4602      	mov	r2, r0
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	609a      	str	r2, [r3, #8]
 802457c:	e005      	b.n	802458a <mpz_realloc+0x40>
  else
    r->_mp_d = gmp_alloc_limbs (size);
 802457e:	6838      	ldr	r0, [r7, #0]
 8024580:	f7fe f8aa 	bl	80226d8 <gmp_alloc_limbs>
 8024584:	4602      	mov	r2, r0
 8024586:	687b      	ldr	r3, [r7, #4]
 8024588:	609a      	str	r2, [r3, #8]
  r->_mp_alloc = size;
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	683a      	ldr	r2, [r7, #0]
 802458e:	601a      	str	r2, [r3, #0]

  if (GMP_ABS (r->_mp_size) > size)
 8024590:	687b      	ldr	r3, [r7, #4]
 8024592:	685b      	ldr	r3, [r3, #4]
 8024594:	2b00      	cmp	r3, #0
 8024596:	bfb8      	it	lt
 8024598:	425b      	neglt	r3, r3
 802459a:	683a      	ldr	r2, [r7, #0]
 802459c:	429a      	cmp	r2, r3
 802459e:	da02      	bge.n	80245a6 <mpz_realloc+0x5c>
    r->_mp_size = 0;
 80245a0:	687b      	ldr	r3, [r7, #4]
 80245a2:	2200      	movs	r2, #0
 80245a4:	605a      	str	r2, [r3, #4]

  return r->_mp_d;
 80245a6:	687b      	ldr	r3, [r7, #4]
 80245a8:	689b      	ldr	r3, [r3, #8]
}
 80245aa:	4618      	mov	r0, r3
 80245ac:	3708      	adds	r7, #8
 80245ae:	46bd      	mov	sp, r7
 80245b0:	bd80      	pop	{r7, pc}

080245b2 <mpz_set_si>:
			  : (z)->_mp_d)

/* MPZ assignment and basic conversions. */
void
mpz_set_si (mpz_t r, signed long int x)
{
 80245b2:	b590      	push	{r4, r7, lr}
 80245b4:	b083      	sub	sp, #12
 80245b6:	af00      	add	r7, sp, #0
 80245b8:	6078      	str	r0, [r7, #4]
 80245ba:	6039      	str	r1, [r7, #0]
  if (x >= 0)
 80245bc:	683b      	ldr	r3, [r7, #0]
 80245be:	2b00      	cmp	r3, #0
 80245c0:	db05      	blt.n	80245ce <mpz_set_si+0x1c>
    mpz_set_ui (r, x);
 80245c2:	683b      	ldr	r3, [r7, #0]
 80245c4:	4619      	mov	r1, r3
 80245c6:	6878      	ldr	r0, [r7, #4]
 80245c8:	f000 f818 	bl	80245fc <mpz_set_ui>
  else
    {
      r->_mp_size = -1;
      MPZ_REALLOC (r, 1)[0] = GMP_NEG_CAST (unsigned long int, x);
    }
}
 80245cc:	e012      	b.n	80245f4 <mpz_set_si+0x42>
      r->_mp_size = -1;
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	f04f 32ff 	mov.w	r2, #4294967295
 80245d4:	605a      	str	r2, [r3, #4]
      MPZ_REALLOC (r, 1)[0] = GMP_NEG_CAST (unsigned long int, x);
 80245d6:	683c      	ldr	r4, [r7, #0]
 80245d8:	687b      	ldr	r3, [r7, #4]
 80245da:	681b      	ldr	r3, [r3, #0]
 80245dc:	2b00      	cmp	r3, #0
 80245de:	dc05      	bgt.n	80245ec <mpz_set_si+0x3a>
 80245e0:	2101      	movs	r1, #1
 80245e2:	6878      	ldr	r0, [r7, #4]
 80245e4:	f7ff ffb1 	bl	802454a <mpz_realloc>
 80245e8:	4603      	mov	r3, r0
 80245ea:	e001      	b.n	80245f0 <mpz_set_si+0x3e>
 80245ec:	687b      	ldr	r3, [r7, #4]
 80245ee:	689b      	ldr	r3, [r3, #8]
 80245f0:	4262      	negs	r2, r4
 80245f2:	601a      	str	r2, [r3, #0]
}
 80245f4:	bf00      	nop
 80245f6:	370c      	adds	r7, #12
 80245f8:	46bd      	mov	sp, r7
 80245fa:	bd90      	pop	{r4, r7, pc}

080245fc <mpz_set_ui>:

void
mpz_set_ui (mpz_t r, unsigned long int x)
{
 80245fc:	b580      	push	{r7, lr}
 80245fe:	b082      	sub	sp, #8
 8024600:	af00      	add	r7, sp, #0
 8024602:	6078      	str	r0, [r7, #4]
 8024604:	6039      	str	r1, [r7, #0]
  if (x > 0)
 8024606:	683b      	ldr	r3, [r7, #0]
 8024608:	2b00      	cmp	r3, #0
 802460a:	d011      	beq.n	8024630 <mpz_set_ui+0x34>
    {
      r->_mp_size = 1;
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	2201      	movs	r2, #1
 8024610:	605a      	str	r2, [r3, #4]
      MPZ_REALLOC (r, 1)[0] = x;
 8024612:	687b      	ldr	r3, [r7, #4]
 8024614:	681b      	ldr	r3, [r3, #0]
 8024616:	2b00      	cmp	r3, #0
 8024618:	dc05      	bgt.n	8024626 <mpz_set_ui+0x2a>
 802461a:	2101      	movs	r1, #1
 802461c:	6878      	ldr	r0, [r7, #4]
 802461e:	f7ff ff94 	bl	802454a <mpz_realloc>
 8024622:	4603      	mov	r3, r0
 8024624:	e001      	b.n	802462a <mpz_set_ui+0x2e>
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	689b      	ldr	r3, [r3, #8]
 802462a:	683a      	ldr	r2, [r7, #0]
 802462c:	601a      	str	r2, [r3, #0]
	    }
	}
    }
  else
    r->_mp_size = 0;
}
 802462e:	e002      	b.n	8024636 <mpz_set_ui+0x3a>
    r->_mp_size = 0;
 8024630:	687b      	ldr	r3, [r7, #4]
 8024632:	2200      	movs	r2, #0
 8024634:	605a      	str	r2, [r3, #4]
}
 8024636:	bf00      	nop
 8024638:	3708      	adds	r7, #8
 802463a:	46bd      	mov	sp, r7
 802463c:	bd80      	pop	{r7, pc}

0802463e <mpz_set>:

void
mpz_set (mpz_t r, const mpz_t x)
{
 802463e:	b580      	push	{r7, lr}
 8024640:	b084      	sub	sp, #16
 8024642:	af00      	add	r7, sp, #0
 8024644:	6078      	str	r0, [r7, #4]
 8024646:	6039      	str	r1, [r7, #0]
  /* Allow the NOP r == x */
  if (r != x)
 8024648:	687a      	ldr	r2, [r7, #4]
 802464a:	683b      	ldr	r3, [r7, #0]
 802464c:	429a      	cmp	r2, r3
 802464e:	d01e      	beq.n	802468e <mpz_set+0x50>
    {
      mp_size_t n;
      mp_ptr rp;

      n = GMP_ABS (x->_mp_size);
 8024650:	683b      	ldr	r3, [r7, #0]
 8024652:	685b      	ldr	r3, [r3, #4]
 8024654:	2b00      	cmp	r3, #0
 8024656:	bfb8      	it	lt
 8024658:	425b      	neglt	r3, r3
 802465a:	60fb      	str	r3, [r7, #12]
      rp = MPZ_REALLOC (r, n);
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	68fa      	ldr	r2, [r7, #12]
 8024662:	429a      	cmp	r2, r3
 8024664:	dd05      	ble.n	8024672 <mpz_set+0x34>
 8024666:	68f9      	ldr	r1, [r7, #12]
 8024668:	6878      	ldr	r0, [r7, #4]
 802466a:	f7ff ff6e 	bl	802454a <mpz_realloc>
 802466e:	4603      	mov	r3, r0
 8024670:	e001      	b.n	8024676 <mpz_set+0x38>
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	689b      	ldr	r3, [r3, #8]
 8024676:	60bb      	str	r3, [r7, #8]

      mpn_copyi (rp, x->_mp_d, n);
 8024678:	683b      	ldr	r3, [r7, #0]
 802467a:	689b      	ldr	r3, [r3, #8]
 802467c:	68fa      	ldr	r2, [r7, #12]
 802467e:	4619      	mov	r1, r3
 8024680:	68b8      	ldr	r0, [r7, #8]
 8024682:	f7fe f873 	bl	802276c <mpn_copyi>
      r->_mp_size = x->_mp_size;
 8024686:	683b      	ldr	r3, [r7, #0]
 8024688:	685a      	ldr	r2, [r3, #4]
 802468a:	687b      	ldr	r3, [r7, #4]
 802468c:	605a      	str	r2, [r3, #4]
    }
}
 802468e:	bf00      	nop
 8024690:	3710      	adds	r7, #16
 8024692:	46bd      	mov	sp, r7
 8024694:	bd80      	pop	{r7, pc}

08024696 <mpz_init_set_si>:

void
mpz_init_set_si (mpz_t r, signed long int x)
{
 8024696:	b580      	push	{r7, lr}
 8024698:	b082      	sub	sp, #8
 802469a:	af00      	add	r7, sp, #0
 802469c:	6078      	str	r0, [r7, #4]
 802469e:	6039      	str	r1, [r7, #0]
  mpz_init (r);
 80246a0:	6878      	ldr	r0, [r7, #4]
 80246a2:	f7ff ff05 	bl	80244b0 <mpz_init>
  mpz_set_si (r, x);
 80246a6:	6839      	ldr	r1, [r7, #0]
 80246a8:	6878      	ldr	r0, [r7, #4]
 80246aa:	f7ff ff82 	bl	80245b2 <mpz_set_si>
}
 80246ae:	bf00      	nop
 80246b0:	3708      	adds	r7, #8
 80246b2:	46bd      	mov	sp, r7
 80246b4:	bd80      	pop	{r7, pc}

080246b6 <mpz_init_set_ui>:

void
mpz_init_set_ui (mpz_t r, unsigned long int x)
{
 80246b6:	b580      	push	{r7, lr}
 80246b8:	b082      	sub	sp, #8
 80246ba:	af00      	add	r7, sp, #0
 80246bc:	6078      	str	r0, [r7, #4]
 80246be:	6039      	str	r1, [r7, #0]
  mpz_init (r);
 80246c0:	6878      	ldr	r0, [r7, #4]
 80246c2:	f7ff fef5 	bl	80244b0 <mpz_init>
  mpz_set_ui (r, x);
 80246c6:	6839      	ldr	r1, [r7, #0]
 80246c8:	6878      	ldr	r0, [r7, #4]
 80246ca:	f7ff ff97 	bl	80245fc <mpz_set_ui>
}
 80246ce:	bf00      	nop
 80246d0:	3708      	adds	r7, #8
 80246d2:	46bd      	mov	sp, r7
 80246d4:	bd80      	pop	{r7, pc}

080246d6 <mpz_init_set>:

void
mpz_init_set (mpz_t r, const mpz_t x)
{
 80246d6:	b580      	push	{r7, lr}
 80246d8:	b082      	sub	sp, #8
 80246da:	af00      	add	r7, sp, #0
 80246dc:	6078      	str	r0, [r7, #4]
 80246de:	6039      	str	r1, [r7, #0]
  mpz_init (r);
 80246e0:	6878      	ldr	r0, [r7, #4]
 80246e2:	f7ff fee5 	bl	80244b0 <mpz_init>
  mpz_set (r, x);
 80246e6:	6839      	ldr	r1, [r7, #0]
 80246e8:	6878      	ldr	r0, [r7, #4]
 80246ea:	f7ff ffa8 	bl	802463e <mpz_set>
}
 80246ee:	bf00      	nop
 80246f0:	3708      	adds	r7, #8
 80246f2:	46bd      	mov	sp, r7
 80246f4:	bd80      	pop	{r7, pc}

080246f6 <mpn_absfits_ulong_p>:
  return mpz_cmp_si (u, LONG_MAX) <= 0 && mpz_cmp_si (u, LONG_MIN) >= 0;
}

static int
mpn_absfits_ulong_p (mp_srcptr up, mp_size_t un)
{
 80246f6:	b480      	push	{r7}
 80246f8:	b085      	sub	sp, #20
 80246fa:	af00      	add	r7, sp, #0
 80246fc:	6078      	str	r0, [r7, #4]
 80246fe:	6039      	str	r1, [r7, #0]
  int ulongsize = GMP_ULONG_BITS / GMP_LIMB_BITS;
 8024700:	2301      	movs	r3, #1
 8024702:	60fb      	str	r3, [r7, #12]
  mp_limb_t ulongrem = 0;
 8024704:	2300      	movs	r3, #0
 8024706:	60bb      	str	r3, [r7, #8]

  if (GMP_ULONG_BITS % GMP_LIMB_BITS != 0)
    ulongrem = (mp_limb_t) (ULONG_MAX >> GMP_LIMB_BITS * ulongsize) + 1;

  return un <= ulongsize || (up[ulongsize] < ulongrem && un == ulongsize + 1);
 8024708:	683a      	ldr	r2, [r7, #0]
 802470a:	68fb      	ldr	r3, [r7, #12]
 802470c:	429a      	cmp	r2, r3
 802470e:	dd0c      	ble.n	802472a <mpn_absfits_ulong_p+0x34>
 8024710:	68fb      	ldr	r3, [r7, #12]
 8024712:	009b      	lsls	r3, r3, #2
 8024714:	687a      	ldr	r2, [r7, #4]
 8024716:	4413      	add	r3, r2
 8024718:	681b      	ldr	r3, [r3, #0]
 802471a:	68ba      	ldr	r2, [r7, #8]
 802471c:	429a      	cmp	r2, r3
 802471e:	d906      	bls.n	802472e <mpn_absfits_ulong_p+0x38>
 8024720:	68fb      	ldr	r3, [r7, #12]
 8024722:	3301      	adds	r3, #1
 8024724:	683a      	ldr	r2, [r7, #0]
 8024726:	429a      	cmp	r2, r3
 8024728:	d101      	bne.n	802472e <mpn_absfits_ulong_p+0x38>
 802472a:	2301      	movs	r3, #1
 802472c:	e000      	b.n	8024730 <mpn_absfits_ulong_p+0x3a>
 802472e:	2300      	movs	r3, #0
}
 8024730:	4618      	mov	r0, r3
 8024732:	3714      	adds	r7, #20
 8024734:	46bd      	mov	sp, r7
 8024736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802473a:	4770      	bx	lr

0802473c <mpz_get_si>:
  return u->_mp_size >= 0 && mpz_cmpabs_ui (u, USHRT_MAX) <= 0;
}

long int
mpz_get_si (const mpz_t u)
{
 802473c:	b580      	push	{r7, lr}
 802473e:	b084      	sub	sp, #16
 8024740:	af00      	add	r7, sp, #0
 8024742:	6078      	str	r0, [r7, #4]
  unsigned long r = mpz_get_ui (u);
 8024744:	6878      	ldr	r0, [r7, #4]
 8024746:	f000 f817 	bl	8024778 <mpz_get_ui>
 802474a:	60f8      	str	r0, [r7, #12]
  unsigned long c = -LONG_MAX - LONG_MIN;
 802474c:	2301      	movs	r3, #1
 802474e:	60bb      	str	r3, [r7, #8]

  if (u->_mp_size < 0)
 8024750:	687b      	ldr	r3, [r7, #4]
 8024752:	685b      	ldr	r3, [r3, #4]
 8024754:	2b00      	cmp	r3, #0
 8024756:	da08      	bge.n	802476a <mpz_get_si+0x2e>
    /* This expression is necessary to properly handle -LONG_MIN */
    return -(long) c - (long) ((r - c) & LONG_MAX);
 8024758:	68bb      	ldr	r3, [r7, #8]
 802475a:	425a      	negs	r2, r3
 802475c:	68f9      	ldr	r1, [r7, #12]
 802475e:	68bb      	ldr	r3, [r7, #8]
 8024760:	1acb      	subs	r3, r1, r3
 8024762:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8024766:	1ad3      	subs	r3, r2, r3
 8024768:	e002      	b.n	8024770 <mpz_get_si+0x34>
  else
    return (long) (r & LONG_MAX);
 802476a:	68fb      	ldr	r3, [r7, #12]
 802476c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
}
 8024770:	4618      	mov	r0, r3
 8024772:	3710      	adds	r7, #16
 8024774:	46bd      	mov	sp, r7
 8024776:	bd80      	pop	{r7, pc}

08024778 <mpz_get_ui>:

unsigned long int
mpz_get_ui (const mpz_t u)
{
 8024778:	b480      	push	{r7}
 802477a:	b083      	sub	sp, #12
 802477c:	af00      	add	r7, sp, #0
 802477e:	6078      	str	r0, [r7, #4]
      while (--n >= 0)
	r = (r << LOCAL_GMP_LIMB_BITS) + u->_mp_d[n];
      return r;
    }

  return u->_mp_size == 0 ? 0 : u->_mp_d[0];
 8024780:	687b      	ldr	r3, [r7, #4]
 8024782:	685b      	ldr	r3, [r3, #4]
 8024784:	2b00      	cmp	r3, #0
 8024786:	d003      	beq.n	8024790 <mpz_get_ui+0x18>
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	689b      	ldr	r3, [r3, #8]
 802478c:	681b      	ldr	r3, [r3, #0]
 802478e:	e000      	b.n	8024792 <mpz_get_ui+0x1a>
 8024790:	2300      	movs	r3, #0
}
 8024792:	4618      	mov	r0, r3
 8024794:	370c      	adds	r7, #12
 8024796:	46bd      	mov	sp, r7
 8024798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802479c:	4770      	bx	lr

0802479e <mpz_limbs_finish>:
  return mpz_limbs_modify (x, n);
}

void
mpz_limbs_finish (mpz_t x, mp_size_t xs)
{
 802479e:	b580      	push	{r7, lr}
 80247a0:	b084      	sub	sp, #16
 80247a2:	af00      	add	r7, sp, #0
 80247a4:	6078      	str	r0, [r7, #4]
 80247a6:	6039      	str	r1, [r7, #0]
  mp_size_t xn;
  xn = mpn_normalized_size (x->_mp_d, GMP_ABS (xs));
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	689a      	ldr	r2, [r3, #8]
 80247ac:	683b      	ldr	r3, [r7, #0]
 80247ae:	2b00      	cmp	r3, #0
 80247b0:	bfb8      	it	lt
 80247b2:	425b      	neglt	r3, r3
 80247b4:	4619      	mov	r1, r3
 80247b6:	4610      	mov	r0, r2
 80247b8:	f7fe f866 	bl	8022888 <mpn_normalized_size>
 80247bc:	60f8      	str	r0, [r7, #12]
  x->_mp_size = xs < 0 ? -xn : xn;
 80247be:	683b      	ldr	r3, [r7, #0]
 80247c0:	2b00      	cmp	r3, #0
 80247c2:	da02      	bge.n	80247ca <mpz_limbs_finish+0x2c>
 80247c4:	68fb      	ldr	r3, [r7, #12]
 80247c6:	425b      	negs	r3, r3
 80247c8:	e000      	b.n	80247cc <mpz_limbs_finish+0x2e>
 80247ca:	68fb      	ldr	r3, [r7, #12]
 80247cc:	687a      	ldr	r2, [r7, #4]
 80247ce:	6053      	str	r3, [r2, #4]
}
 80247d0:	bf00      	nop
 80247d2:	3710      	adds	r7, #16
 80247d4:	46bd      	mov	sp, r7
 80247d6:	bd80      	pop	{r7, pc}

080247d8 <mpz_roinit_normal_n>:

static mpz_srcptr
mpz_roinit_normal_n (mpz_t x, mp_srcptr xp, mp_size_t xs)
{
 80247d8:	b480      	push	{r7}
 80247da:	b085      	sub	sp, #20
 80247dc:	af00      	add	r7, sp, #0
 80247de:	60f8      	str	r0, [r7, #12]
 80247e0:	60b9      	str	r1, [r7, #8]
 80247e2:	607a      	str	r2, [r7, #4]
  x->_mp_alloc = 0;
 80247e4:	68fb      	ldr	r3, [r7, #12]
 80247e6:	2200      	movs	r2, #0
 80247e8:	601a      	str	r2, [r3, #0]
  x->_mp_d = (mp_ptr) xp;
 80247ea:	68fb      	ldr	r3, [r7, #12]
 80247ec:	68ba      	ldr	r2, [r7, #8]
 80247ee:	609a      	str	r2, [r3, #8]
  x->_mp_size = xs;
 80247f0:	68fb      	ldr	r3, [r7, #12]
 80247f2:	687a      	ldr	r2, [r7, #4]
 80247f4:	605a      	str	r2, [r3, #4]
  return x;
 80247f6:	68fb      	ldr	r3, [r7, #12]
}
 80247f8:	4618      	mov	r0, r3
 80247fa:	3714      	adds	r7, #20
 80247fc:	46bd      	mov	sp, r7
 80247fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024802:	4770      	bx	lr

08024804 <mpz_roinit_n>:

mpz_srcptr
mpz_roinit_n (mpz_t x, mp_srcptr xp, mp_size_t xs)
{
 8024804:	b580      	push	{r7, lr}
 8024806:	b084      	sub	sp, #16
 8024808:	af00      	add	r7, sp, #0
 802480a:	60f8      	str	r0, [r7, #12]
 802480c:	60b9      	str	r1, [r7, #8]
 802480e:	607a      	str	r2, [r7, #4]
  mpz_roinit_normal_n (x, xp, xs);
 8024810:	687a      	ldr	r2, [r7, #4]
 8024812:	68b9      	ldr	r1, [r7, #8]
 8024814:	68f8      	ldr	r0, [r7, #12]
 8024816:	f7ff ffdf 	bl	80247d8 <mpz_roinit_normal_n>
  mpz_limbs_finish (x, xs);
 802481a:	6879      	ldr	r1, [r7, #4]
 802481c:	68f8      	ldr	r0, [r7, #12]
 802481e:	f7ff ffbe 	bl	802479e <mpz_limbs_finish>
  return x;
 8024822:	68fb      	ldr	r3, [r7, #12]
}
 8024824:	4618      	mov	r0, r3
 8024826:	3710      	adds	r7, #16
 8024828:	46bd      	mov	sp, r7
 802482a:	bd80      	pop	{r7, pc}

0802482c <mpz_set_d>:


/* Conversions and comparison to double. */
void
mpz_set_d (mpz_t r, double x)
{
 802482c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802482e:	b08f      	sub	sp, #60	@ 0x3c
 8024830:	af00      	add	r7, sp, #0
 8024832:	60f8      	str	r0, [r7, #12]
 8024834:	ed87 0b00 	vstr	d0, [r7]
  double Bi;
  mp_limb_t f;

  /* x != x is true when x is a NaN, and x == x * 0.5 is true when x is
     zero or infinity. */
  if (x != x || x == x * 0.5)
 8024838:	e9d7 2300 	ldrd	r2, r3, [r7]
 802483c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024840:	f7dc f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8024844:	4603      	mov	r3, r0
 8024846:	2b00      	cmp	r3, #0
 8024848:	d00f      	beq.n	802486a <mpz_set_d+0x3e>
 802484a:	f04f 0200 	mov.w	r2, #0
 802484e:	4b72      	ldr	r3, [pc, #456]	@ (8024a18 <mpz_set_d+0x1ec>)
 8024850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024854:	f7db fed8 	bl	8000608 <__aeabi_dmul>
 8024858:	4602      	mov	r2, r0
 802485a:	460b      	mov	r3, r1
 802485c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024860:	f7dc f93a 	bl	8000ad8 <__aeabi_dcmpeq>
 8024864:	4603      	mov	r3, r0
 8024866:	2b00      	cmp	r3, #0
 8024868:	d003      	beq.n	8024872 <mpz_set_d+0x46>
    {
      r->_mp_size = 0;
 802486a:	68fb      	ldr	r3, [r7, #12]
 802486c:	2200      	movs	r2, #0
 802486e:	605a      	str	r2, [r3, #4]
      return;
 8024870:	e0cf      	b.n	8024a12 <mpz_set_d+0x1e6>
    }

  sign = x < 0.0 ;
 8024872:	2301      	movs	r3, #1
 8024874:	461e      	mov	r6, r3
 8024876:	f04f 0200 	mov.w	r2, #0
 802487a:	f04f 0300 	mov.w	r3, #0
 802487e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024882:	f7dc f933 	bl	8000aec <__aeabi_dcmplt>
 8024886:	4603      	mov	r3, r0
 8024888:	2b00      	cmp	r3, #0
 802488a:	d101      	bne.n	8024890 <mpz_set_d+0x64>
 802488c:	2300      	movs	r3, #0
 802488e:	461e      	mov	r6, r3
 8024890:	b2f3      	uxtb	r3, r6
 8024892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (sign)
 8024894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024896:	2b00      	cmp	r3, #0
 8024898:	d005      	beq.n	80248a6 <mpz_set_d+0x7a>
    x = - x;
 802489a:	683c      	ldr	r4, [r7, #0]
 802489c:	687b      	ldr	r3, [r7, #4]
 802489e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80248a2:	e9c7 4500 	strd	r4, r5, [r7]

  if (x < 1.0)
 80248a6:	f04f 0200 	mov.w	r2, #0
 80248aa:	4b5c      	ldr	r3, [pc, #368]	@ (8024a1c <mpz_set_d+0x1f0>)
 80248ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80248b0:	f7dc f91c 	bl	8000aec <__aeabi_dcmplt>
 80248b4:	4603      	mov	r3, r0
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	d003      	beq.n	80248c2 <mpz_set_d+0x96>
    {
      r->_mp_size = 0;
 80248ba:	68fb      	ldr	r3, [r7, #12]
 80248bc:	2200      	movs	r2, #0
 80248be:	605a      	str	r2, [r3, #4]
      return;
 80248c0:	e0a7      	b.n	8024a12 <mpz_set_d+0x1e6>
    }
  B = 4.0 * (double) (GMP_LIMB_HIGHBIT >> 1);
 80248c2:	f04f 0200 	mov.w	r2, #0
 80248c6:	4b56      	ldr	r3, [pc, #344]	@ (8024a20 <mpz_set_d+0x1f4>)
 80248c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  Bi = 1.0 / B;
 80248cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80248d0:	f04f 0000 	mov.w	r0, #0
 80248d4:	4951      	ldr	r1, [pc, #324]	@ (8024a1c <mpz_set_d+0x1f0>)
 80248d6:	f7db ffc1 	bl	800085c <__aeabi_ddiv>
 80248da:	4602      	mov	r2, r0
 80248dc:	460b      	mov	r3, r1
 80248de:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (rn = 1; x >= B; rn++)
 80248e2:	2301      	movs	r3, #1
 80248e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80248e6:	e00c      	b.n	8024902 <mpz_set_d+0xd6>
    x *= Bi;
 80248e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80248ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80248f0:	f7db fe8a 	bl	8000608 <__aeabi_dmul>
 80248f4:	4602      	mov	r2, r0
 80248f6:	460b      	mov	r3, r1
 80248f8:	e9c7 2300 	strd	r2, r3, [r7]
  for (rn = 1; x >= B; rn++)
 80248fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80248fe:	3301      	adds	r3, #1
 8024900:	637b      	str	r3, [r7, #52]	@ 0x34
 8024902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024906:	e9d7 0100 	ldrd	r0, r1, [r7]
 802490a:	f7dc f903 	bl	8000b14 <__aeabi_dcmpge>
 802490e:	4603      	mov	r3, r0
 8024910:	2b00      	cmp	r3, #0
 8024912:	d1e9      	bne.n	80248e8 <mpz_set_d+0xbc>

  rp = MPZ_REALLOC (r, rn);
 8024914:	68fb      	ldr	r3, [r7, #12]
 8024916:	681b      	ldr	r3, [r3, #0]
 8024918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802491a:	429a      	cmp	r2, r3
 802491c:	dd05      	ble.n	802492a <mpz_set_d+0xfe>
 802491e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8024920:	68f8      	ldr	r0, [r7, #12]
 8024922:	f7ff fe12 	bl	802454a <mpz_realloc>
 8024926:	4603      	mov	r3, r0
 8024928:	e001      	b.n	802492e <mpz_set_d+0x102>
 802492a:	68fb      	ldr	r3, [r7, #12]
 802492c:	689b      	ldr	r3, [r3, #8]
 802492e:	617b      	str	r3, [r7, #20]

  f = (mp_limb_t) x;
 8024930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024934:	f7dc f940 	bl	8000bb8 <__aeabi_d2uiz>
 8024938:	4603      	mov	r3, r0
 802493a:	613b      	str	r3, [r7, #16]
  x -= f;
 802493c:	6938      	ldr	r0, [r7, #16]
 802493e:	f7db fde9 	bl	8000514 <__aeabi_ui2d>
 8024942:	4602      	mov	r2, r0
 8024944:	460b      	mov	r3, r1
 8024946:	e9d7 0100 	ldrd	r0, r1, [r7]
 802494a:	f7db fca5 	bl	8000298 <__aeabi_dsub>
 802494e:	4602      	mov	r2, r0
 8024950:	460b      	mov	r3, r1
 8024952:	e9c7 2300 	strd	r2, r3, [r7]
  assert (x < 1.0);
 8024956:	f04f 0200 	mov.w	r2, #0
 802495a:	4b30      	ldr	r3, [pc, #192]	@ (8024a1c <mpz_set_d+0x1f0>)
 802495c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024960:	f7dc f8c4 	bl	8000aec <__aeabi_dcmplt>
 8024964:	4603      	mov	r3, r0
 8024966:	2b00      	cmp	r3, #0
 8024968:	d106      	bne.n	8024978 <mpz_set_d+0x14c>
 802496a:	4b2e      	ldr	r3, [pc, #184]	@ (8024a24 <mpz_set_d+0x1f8>)
 802496c:	4a2e      	ldr	r2, [pc, #184]	@ (8024a28 <mpz_set_d+0x1fc>)
 802496e:	f44f 61db 	mov.w	r1, #1752	@ 0x6d8
 8024972:	482e      	ldr	r0, [pc, #184]	@ (8024a2c <mpz_set_d+0x200>)
 8024974:	f010 fc60 	bl	8035238 <__assert_func>
  i = rn-1;
 8024978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802497a:	3b01      	subs	r3, #1
 802497c:	633b      	str	r3, [r7, #48]	@ 0x30
  rp[i] = f;
 802497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024980:	009b      	lsls	r3, r3, #2
 8024982:	697a      	ldr	r2, [r7, #20]
 8024984:	4413      	add	r3, r2
 8024986:	693a      	ldr	r2, [r7, #16]
 8024988:	601a      	str	r2, [r3, #0]
  while (--i >= 0)
 802498a:	e033      	b.n	80249f4 <mpz_set_d+0x1c8>
    {
      x = B * x;
 802498c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024994:	f7db fe38 	bl	8000608 <__aeabi_dmul>
 8024998:	4602      	mov	r2, r0
 802499a:	460b      	mov	r3, r1
 802499c:	e9c7 2300 	strd	r2, r3, [r7]
      f = (mp_limb_t) x;
 80249a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80249a4:	f7dc f908 	bl	8000bb8 <__aeabi_d2uiz>
 80249a8:	4603      	mov	r3, r0
 80249aa:	613b      	str	r3, [r7, #16]
      x -= f;
 80249ac:	6938      	ldr	r0, [r7, #16]
 80249ae:	f7db fdb1 	bl	8000514 <__aeabi_ui2d>
 80249b2:	4602      	mov	r2, r0
 80249b4:	460b      	mov	r3, r1
 80249b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80249ba:	f7db fc6d 	bl	8000298 <__aeabi_dsub>
 80249be:	4602      	mov	r2, r0
 80249c0:	460b      	mov	r3, r1
 80249c2:	e9c7 2300 	strd	r2, r3, [r7]
      assert (x < 1.0);
 80249c6:	f04f 0200 	mov.w	r2, #0
 80249ca:	4b14      	ldr	r3, [pc, #80]	@ (8024a1c <mpz_set_d+0x1f0>)
 80249cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80249d0:	f7dc f88c 	bl	8000aec <__aeabi_dcmplt>
 80249d4:	4603      	mov	r3, r0
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d106      	bne.n	80249e8 <mpz_set_d+0x1bc>
 80249da:	4b12      	ldr	r3, [pc, #72]	@ (8024a24 <mpz_set_d+0x1f8>)
 80249dc:	4a12      	ldr	r2, [pc, #72]	@ (8024a28 <mpz_set_d+0x1fc>)
 80249de:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
 80249e2:	4812      	ldr	r0, [pc, #72]	@ (8024a2c <mpz_set_d+0x200>)
 80249e4:	f010 fc28 	bl	8035238 <__assert_func>
      rp[i] = f;
 80249e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80249ea:	009b      	lsls	r3, r3, #2
 80249ec:	697a      	ldr	r2, [r7, #20]
 80249ee:	4413      	add	r3, r2
 80249f0:	693a      	ldr	r2, [r7, #16]
 80249f2:	601a      	str	r2, [r3, #0]
  while (--i >= 0)
 80249f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80249f6:	3b01      	subs	r3, #1
 80249f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80249fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80249fc:	2b00      	cmp	r3, #0
 80249fe:	dac5      	bge.n	802498c <mpz_set_d+0x160>
    }

  r->_mp_size = sign ? - rn : rn;
 8024a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	d002      	beq.n	8024a0c <mpz_set_d+0x1e0>
 8024a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024a08:	425b      	negs	r3, r3
 8024a0a:	e000      	b.n	8024a0e <mpz_set_d+0x1e2>
 8024a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024a0e:	68fa      	ldr	r2, [r7, #12]
 8024a10:	6053      	str	r3, [r2, #4]
}
 8024a12:	373c      	adds	r7, #60	@ 0x3c
 8024a14:	46bd      	mov	sp, r7
 8024a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a18:	3fe00000 	.word	0x3fe00000
 8024a1c:	3ff00000 	.word	0x3ff00000
 8024a20:	41f00000 	.word	0x41f00000
 8024a24:	0803853c 	.word	0x0803853c
 8024a28:	0803bd94 	.word	0x0803bd94
 8024a2c:	080382a0 	.word	0x080382a0

08024a30 <mpz_get_d>:
  mpz_set_d (r, x);
}

double
mpz_get_d (const mpz_t u)
{
 8024a30:	b5b0      	push	{r4, r5, r7, lr}
 8024a32:	b08e      	sub	sp, #56	@ 0x38
 8024a34:	af00      	add	r7, sp, #0
 8024a36:	6078      	str	r0, [r7, #4]
  int m;
  mp_limb_t l;
  mp_size_t un;
  double x;
  double B = 4.0 * (double) (GMP_LIMB_HIGHBIT >> 1);
 8024a38:	f04f 0200 	mov.w	r2, #0
 8024a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8024b7c <mpz_get_d+0x14c>)
 8024a3e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  un = GMP_ABS (u->_mp_size);
 8024a42:	687b      	ldr	r3, [r7, #4]
 8024a44:	685b      	ldr	r3, [r3, #4]
 8024a46:	2b00      	cmp	r3, #0
 8024a48:	bfb8      	it	lt
 8024a4a:	425b      	neglt	r3, r3
 8024a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (un == 0)
 8024a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	d104      	bne.n	8024a5e <mpz_get_d+0x2e>
    return 0.0;
 8024a54:	f04f 0200 	mov.w	r2, #0
 8024a58:	f04f 0300 	mov.w	r3, #0
 8024a5c:	e084      	b.n	8024b68 <mpz_get_d+0x138>

  l = u->_mp_d[--un];
 8024a5e:	687b      	ldr	r3, [r7, #4]
 8024a60:	689a      	ldr	r2, [r3, #8]
 8024a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a64:	3b01      	subs	r3, #1
 8024a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a6a:	009b      	lsls	r3, r3, #2
 8024a6c:	4413      	add	r3, r2
 8024a6e:	681b      	ldr	r3, [r3, #0]
 8024a70:	633b      	str	r3, [r7, #48]	@ 0x30
  gmp_clz (m, l);
 8024a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024a74:	61fb      	str	r3, [r7, #28]
 8024a76:	2300      	movs	r3, #0
 8024a78:	61bb      	str	r3, [r7, #24]
 8024a7a:	2308      	movs	r3, #8
 8024a7c:	60fb      	str	r3, [r7, #12]
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	2b1f      	cmp	r3, #31
 8024a82:	dc13      	bgt.n	8024aac <mpz_get_d+0x7c>
 8024a84:	e007      	b.n	8024a96 <mpz_get_d+0x66>
 8024a86:	69fa      	ldr	r2, [r7, #28]
 8024a88:	68fb      	ldr	r3, [r7, #12]
 8024a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8024a8e:	61fb      	str	r3, [r7, #28]
 8024a90:	69bb      	ldr	r3, [r7, #24]
 8024a92:	3308      	adds	r3, #8
 8024a94:	61bb      	str	r3, [r7, #24]
 8024a96:	69fb      	ldr	r3, [r7, #28]
 8024a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8024a9c:	d3f3      	bcc.n	8024a86 <mpz_get_d+0x56>
 8024a9e:	e005      	b.n	8024aac <mpz_get_d+0x7c>
 8024aa0:	69fb      	ldr	r3, [r7, #28]
 8024aa2:	005b      	lsls	r3, r3, #1
 8024aa4:	61fb      	str	r3, [r7, #28]
 8024aa6:	69bb      	ldr	r3, [r7, #24]
 8024aa8:	3301      	adds	r3, #1
 8024aaa:	61bb      	str	r3, [r7, #24]
 8024aac:	69fb      	ldr	r3, [r7, #28]
 8024aae:	2b00      	cmp	r3, #0
 8024ab0:	daf6      	bge.n	8024aa0 <mpz_get_d+0x70>
 8024ab2:	69bb      	ldr	r3, [r7, #24]
 8024ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  m = m + GMP_DBL_MANT_BITS - GMP_LIMB_BITS;
 8024ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ab8:	3315      	adds	r3, #21
 8024aba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (m < 0)
 8024abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024abe:	2b00      	cmp	r3, #0
 8024ac0:	da08      	bge.n	8024ad4 <mpz_get_d+0xa4>
    l &= GMP_LIMB_MAX << -m;
 8024ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ac4:	425b      	negs	r3, r3
 8024ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8024aca:	fa02 f303 	lsl.w	r3, r2, r3
 8024ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024ad0:	4013      	ands	r3, r2
 8024ad2:	633b      	str	r3, [r7, #48]	@ 0x30

  for (x = l; --un >= 0;)
 8024ad4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024ad6:	f7db fd1d 	bl	8000514 <__aeabi_ui2d>
 8024ada:	4602      	mov	r2, r0
 8024adc:	460b      	mov	r3, r1
 8024ade:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8024ae2:	e02f      	b.n	8024b44 <mpz_get_d+0x114>
    {
      x = B*x;
 8024ae4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024ae8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8024aec:	f7db fd8c 	bl	8000608 <__aeabi_dmul>
 8024af0:	4602      	mov	r2, r0
 8024af2:	460b      	mov	r3, r1
 8024af4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      if (m > 0) {
 8024af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024afa:	2b00      	cmp	r3, #0
 8024afc:	dd22      	ble.n	8024b44 <mpz_get_d+0x114>
	l = u->_mp_d[un];
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	689a      	ldr	r2, [r3, #8]
 8024b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b04:	009b      	lsls	r3, r3, #2
 8024b06:	4413      	add	r3, r2
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	633b      	str	r3, [r7, #48]	@ 0x30
	m -= GMP_LIMB_BITS;
 8024b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024b0e:	3b20      	subs	r3, #32
 8024b10:	637b      	str	r3, [r7, #52]	@ 0x34
	if (m < 0)
 8024b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024b14:	2b00      	cmp	r3, #0
 8024b16:	da08      	bge.n	8024b2a <mpz_get_d+0xfa>
	  l &= GMP_LIMB_MAX << -m;
 8024b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024b1a:	425b      	negs	r3, r3
 8024b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8024b20:	fa02 f303 	lsl.w	r3, r2, r3
 8024b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024b26:	4013      	ands	r3, r2
 8024b28:	633b      	str	r3, [r7, #48]	@ 0x30
	x += l;
 8024b2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024b2c:	f7db fcf2 	bl	8000514 <__aeabi_ui2d>
 8024b30:	4602      	mov	r2, r0
 8024b32:	460b      	mov	r3, r1
 8024b34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8024b38:	f7db fbb0 	bl	800029c <__adddf3>
 8024b3c:	4602      	mov	r2, r0
 8024b3e:	460b      	mov	r3, r1
 8024b40:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (x = l; --un >= 0;)
 8024b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b46:	3b01      	subs	r3, #1
 8024b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	dac9      	bge.n	8024ae4 <mpz_get_d+0xb4>
      }
    }

  if (u->_mp_size < 0)
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	685b      	ldr	r3, [r3, #4]
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	da05      	bge.n	8024b64 <mpz_get_d+0x134>
    x = -x;
 8024b58:	6a3c      	ldr	r4, [r7, #32]
 8024b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024b5c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8024b60:	e9c7 4508 	strd	r4, r5, [r7, #32]

  return x;
 8024b64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8024b68:	ec43 2b17 	vmov	d7, r2, r3
 8024b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8024b70:	eef0 0a67 	vmov.f32	s1, s15
 8024b74:	3738      	adds	r7, #56	@ 0x38
 8024b76:	46bd      	mov	sp, r7
 8024b78:	bdb0      	pop	{r4, r5, r7, pc}
 8024b7a:	bf00      	nop
 8024b7c:	41f00000 	.word	0x41f00000

08024b80 <mpz_sgn>:


/* MPZ comparisons and the like. */
int
mpz_sgn (const mpz_t u)
{
 8024b80:	b480      	push	{r7}
 8024b82:	b083      	sub	sp, #12
 8024b84:	af00      	add	r7, sp, #0
 8024b86:	6078      	str	r0, [r7, #4]
  return GMP_CMP (u->_mp_size, 0);
 8024b88:	687b      	ldr	r3, [r7, #4]
 8024b8a:	685b      	ldr	r3, [r3, #4]
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	bfcc      	ite	gt
 8024b90:	2301      	movgt	r3, #1
 8024b92:	2300      	movle	r3, #0
 8024b94:	b2db      	uxtb	r3, r3
 8024b96:	461a      	mov	r2, r3
 8024b98:	687b      	ldr	r3, [r7, #4]
 8024b9a:	685b      	ldr	r3, [r3, #4]
 8024b9c:	0fdb      	lsrs	r3, r3, #31
 8024b9e:	b2db      	uxtb	r3, r3
 8024ba0:	1ad3      	subs	r3, r2, r3
}
 8024ba2:	4618      	mov	r0, r3
 8024ba4:	370c      	adds	r7, #12
 8024ba6:	46bd      	mov	sp, r7
 8024ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bac:	4770      	bx	lr

08024bae <mpz_cmp_ui>:
    return - mpz_cmpabs_ui (u, GMP_NEG_CAST (unsigned long int, v));
}

int
mpz_cmp_ui (const mpz_t u, unsigned long v)
{
 8024bae:	b580      	push	{r7, lr}
 8024bb0:	b084      	sub	sp, #16
 8024bb2:	af00      	add	r7, sp, #0
 8024bb4:	6078      	str	r0, [r7, #4]
 8024bb6:	6039      	str	r1, [r7, #0]
  mp_size_t usize = u->_mp_size;
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	685b      	ldr	r3, [r3, #4]
 8024bbc:	60fb      	str	r3, [r7, #12]

  if (usize < 0)
 8024bbe:	68fb      	ldr	r3, [r7, #12]
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	da02      	bge.n	8024bca <mpz_cmp_ui+0x1c>
    return -1;
 8024bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8024bc8:	e004      	b.n	8024bd4 <mpz_cmp_ui+0x26>
  else
    return mpz_cmpabs_ui (u, v);
 8024bca:	6839      	ldr	r1, [r7, #0]
 8024bcc:	6878      	ldr	r0, [r7, #4]
 8024bce:	f000 f838 	bl	8024c42 <mpz_cmpabs_ui>
 8024bd2:	4603      	mov	r3, r0
}
 8024bd4:	4618      	mov	r0, r3
 8024bd6:	3710      	adds	r7, #16
 8024bd8:	46bd      	mov	sp, r7
 8024bda:	bd80      	pop	{r7, pc}

08024bdc <mpz_cmp>:

int
mpz_cmp (const mpz_t a, const mpz_t b)
{
 8024bdc:	b580      	push	{r7, lr}
 8024bde:	b084      	sub	sp, #16
 8024be0:	af00      	add	r7, sp, #0
 8024be2:	6078      	str	r0, [r7, #4]
 8024be4:	6039      	str	r1, [r7, #0]
  mp_size_t asize = a->_mp_size;
 8024be6:	687b      	ldr	r3, [r7, #4]
 8024be8:	685b      	ldr	r3, [r3, #4]
 8024bea:	60fb      	str	r3, [r7, #12]
  mp_size_t bsize = b->_mp_size;
 8024bec:	683b      	ldr	r3, [r7, #0]
 8024bee:	685b      	ldr	r3, [r3, #4]
 8024bf0:	60bb      	str	r3, [r7, #8]

  if (asize != bsize)
 8024bf2:	68fa      	ldr	r2, [r7, #12]
 8024bf4:	68bb      	ldr	r3, [r7, #8]
 8024bf6:	429a      	cmp	r2, r3
 8024bf8:	d008      	beq.n	8024c0c <mpz_cmp+0x30>
    return (asize < bsize) ? -1 : 1;
 8024bfa:	68fa      	ldr	r2, [r7, #12]
 8024bfc:	68bb      	ldr	r3, [r7, #8]
 8024bfe:	429a      	cmp	r2, r3
 8024c00:	da02      	bge.n	8024c08 <mpz_cmp+0x2c>
 8024c02:	f04f 33ff 	mov.w	r3, #4294967295
 8024c06:	e018      	b.n	8024c3a <mpz_cmp+0x5e>
 8024c08:	2301      	movs	r3, #1
 8024c0a:	e016      	b.n	8024c3a <mpz_cmp+0x5e>
  else if (asize >= 0)
 8024c0c:	68fb      	ldr	r3, [r7, #12]
 8024c0e:	2b00      	cmp	r3, #0
 8024c10:	db09      	blt.n	8024c26 <mpz_cmp+0x4a>
    return mpn_cmp (a->_mp_d, b->_mp_d, asize);
 8024c12:	687b      	ldr	r3, [r7, #4]
 8024c14:	6898      	ldr	r0, [r3, #8]
 8024c16:	683b      	ldr	r3, [r7, #0]
 8024c18:	689b      	ldr	r3, [r3, #8]
 8024c1a:	68fa      	ldr	r2, [r7, #12]
 8024c1c:	4619      	mov	r1, r3
 8024c1e:	f7fd fde4 	bl	80227ea <mpn_cmp>
 8024c22:	4603      	mov	r3, r0
 8024c24:	e009      	b.n	8024c3a <mpz_cmp+0x5e>
  else
    return mpn_cmp (b->_mp_d, a->_mp_d, -asize);
 8024c26:	683b      	ldr	r3, [r7, #0]
 8024c28:	6898      	ldr	r0, [r3, #8]
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	6899      	ldr	r1, [r3, #8]
 8024c2e:	68fb      	ldr	r3, [r7, #12]
 8024c30:	425b      	negs	r3, r3
 8024c32:	461a      	mov	r2, r3
 8024c34:	f7fd fdd9 	bl	80227ea <mpn_cmp>
 8024c38:	4603      	mov	r3, r0
}
 8024c3a:	4618      	mov	r0, r3
 8024c3c:	3710      	adds	r7, #16
 8024c3e:	46bd      	mov	sp, r7
 8024c40:	bd80      	pop	{r7, pc}

08024c42 <mpz_cmpabs_ui>:

int
mpz_cmpabs_ui (const mpz_t u, unsigned long v)
{
 8024c42:	b580      	push	{r7, lr}
 8024c44:	b084      	sub	sp, #16
 8024c46:	af00      	add	r7, sp, #0
 8024c48:	6078      	str	r0, [r7, #4]
 8024c4a:	6039      	str	r1, [r7, #0]
  mp_size_t un = GMP_ABS (u->_mp_size);
 8024c4c:	687b      	ldr	r3, [r7, #4]
 8024c4e:	685b      	ldr	r3, [r3, #4]
 8024c50:	2b00      	cmp	r3, #0
 8024c52:	bfb8      	it	lt
 8024c54:	425b      	neglt	r3, r3
 8024c56:	60fb      	str	r3, [r7, #12]

  if (! mpn_absfits_ulong_p (u->_mp_d, un))
 8024c58:	687b      	ldr	r3, [r7, #4]
 8024c5a:	689b      	ldr	r3, [r3, #8]
 8024c5c:	68f9      	ldr	r1, [r7, #12]
 8024c5e:	4618      	mov	r0, r3
 8024c60:	f7ff fd49 	bl	80246f6 <mpn_absfits_ulong_p>
 8024c64:	4603      	mov	r3, r0
 8024c66:	2b00      	cmp	r3, #0
 8024c68:	d101      	bne.n	8024c6e <mpz_cmpabs_ui+0x2c>
    return 1;
 8024c6a:	2301      	movs	r3, #1
 8024c6c:	e013      	b.n	8024c96 <mpz_cmpabs_ui+0x54>
  else
    {
      unsigned long uu = mpz_get_ui (u);
 8024c6e:	6878      	ldr	r0, [r7, #4]
 8024c70:	f7ff fd82 	bl	8024778 <mpz_get_ui>
 8024c74:	60b8      	str	r0, [r7, #8]
      return GMP_CMP(uu, v);
 8024c76:	68ba      	ldr	r2, [r7, #8]
 8024c78:	683b      	ldr	r3, [r7, #0]
 8024c7a:	429a      	cmp	r2, r3
 8024c7c:	bf8c      	ite	hi
 8024c7e:	2301      	movhi	r3, #1
 8024c80:	2300      	movls	r3, #0
 8024c82:	b2db      	uxtb	r3, r3
 8024c84:	4619      	mov	r1, r3
 8024c86:	68ba      	ldr	r2, [r7, #8]
 8024c88:	683b      	ldr	r3, [r7, #0]
 8024c8a:	429a      	cmp	r2, r3
 8024c8c:	bf34      	ite	cc
 8024c8e:	2301      	movcc	r3, #1
 8024c90:	2300      	movcs	r3, #0
 8024c92:	b2db      	uxtb	r3, r3
 8024c94:	1acb      	subs	r3, r1, r3
    }
}
 8024c96:	4618      	mov	r0, r3
 8024c98:	3710      	adds	r7, #16
 8024c9a:	46bd      	mov	sp, r7
 8024c9c:	bd80      	pop	{r7, pc}

08024c9e <mpz_cmpabs>:

int
mpz_cmpabs (const mpz_t u, const mpz_t v)
{
 8024c9e:	b580      	push	{r7, lr}
 8024ca0:	b082      	sub	sp, #8
 8024ca2:	af00      	add	r7, sp, #0
 8024ca4:	6078      	str	r0, [r7, #4]
 8024ca6:	6039      	str	r1, [r7, #0]
  return mpn_cmp4 (u->_mp_d, GMP_ABS (u->_mp_size),
 8024ca8:	687b      	ldr	r3, [r7, #4]
 8024caa:	6898      	ldr	r0, [r3, #8]
 8024cac:	687b      	ldr	r3, [r7, #4]
 8024cae:	685b      	ldr	r3, [r3, #4]
 8024cb0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8024cb4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		   v->_mp_d, GMP_ABS (v->_mp_size));
 8024cb8:	683b      	ldr	r3, [r7, #0]
 8024cba:	689a      	ldr	r2, [r3, #8]
 8024cbc:	683b      	ldr	r3, [r7, #0]
 8024cbe:	685b      	ldr	r3, [r3, #4]
 8024cc0:	2b00      	cmp	r3, #0
 8024cc2:	bfb8      	it	lt
 8024cc4:	425b      	neglt	r3, r3
  return mpn_cmp4 (u->_mp_d, GMP_ABS (u->_mp_size),
 8024cc6:	f7fd fdc1 	bl	802284c <mpn_cmp4>
 8024cca:	4603      	mov	r3, r0
}
 8024ccc:	4618      	mov	r0, r3
 8024cce:	3708      	adds	r7, #8
 8024cd0:	46bd      	mov	sp, r7
 8024cd2:	bd80      	pop	{r7, pc}

08024cd4 <mpz_abs>:

void
mpz_abs (mpz_t r, const mpz_t u)
{
 8024cd4:	b580      	push	{r7, lr}
 8024cd6:	b082      	sub	sp, #8
 8024cd8:	af00      	add	r7, sp, #0
 8024cda:	6078      	str	r0, [r7, #4]
 8024cdc:	6039      	str	r1, [r7, #0]
  mpz_set (r, u);
 8024cde:	6839      	ldr	r1, [r7, #0]
 8024ce0:	6878      	ldr	r0, [r7, #4]
 8024ce2:	f7ff fcac 	bl	802463e <mpz_set>
  r->_mp_size = GMP_ABS (r->_mp_size);
 8024ce6:	687b      	ldr	r3, [r7, #4]
 8024ce8:	685b      	ldr	r3, [r3, #4]
 8024cea:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8024cee:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	605a      	str	r2, [r3, #4]
}
 8024cf6:	bf00      	nop
 8024cf8:	3708      	adds	r7, #8
 8024cfa:	46bd      	mov	sp, r7
 8024cfc:	bd80      	pop	{r7, pc}

08024cfe <mpz_neg>:

void
mpz_neg (mpz_t r, const mpz_t u)
{
 8024cfe:	b580      	push	{r7, lr}
 8024d00:	b082      	sub	sp, #8
 8024d02:	af00      	add	r7, sp, #0
 8024d04:	6078      	str	r0, [r7, #4]
 8024d06:	6039      	str	r1, [r7, #0]
  mpz_set (r, u);
 8024d08:	6839      	ldr	r1, [r7, #0]
 8024d0a:	6878      	ldr	r0, [r7, #4]
 8024d0c:	f7ff fc97 	bl	802463e <mpz_set>
  r->_mp_size = -r->_mp_size;
 8024d10:	687b      	ldr	r3, [r7, #4]
 8024d12:	685b      	ldr	r3, [r3, #4]
 8024d14:	425a      	negs	r2, r3
 8024d16:	687b      	ldr	r3, [r7, #4]
 8024d18:	605a      	str	r2, [r3, #4]
}
 8024d1a:	bf00      	nop
 8024d1c:	3708      	adds	r7, #8
 8024d1e:	46bd      	mov	sp, r7
 8024d20:	bd80      	pop	{r7, pc}

08024d22 <mpz_swap>:

void
mpz_swap (mpz_t u, mpz_t v)
{
 8024d22:	b480      	push	{r7}
 8024d24:	b087      	sub	sp, #28
 8024d26:	af00      	add	r7, sp, #0
 8024d28:	6078      	str	r0, [r7, #4]
 8024d2a:	6039      	str	r1, [r7, #0]
  MP_SIZE_T_SWAP (u->_mp_alloc, v->_mp_alloc);
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	681b      	ldr	r3, [r3, #0]
 8024d30:	617b      	str	r3, [r7, #20]
 8024d32:	683b      	ldr	r3, [r7, #0]
 8024d34:	681a      	ldr	r2, [r3, #0]
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	601a      	str	r2, [r3, #0]
 8024d3a:	683b      	ldr	r3, [r7, #0]
 8024d3c:	697a      	ldr	r2, [r7, #20]
 8024d3e:	601a      	str	r2, [r3, #0]
  MPN_PTR_SWAP (u->_mp_d, u->_mp_size, v->_mp_d, v->_mp_size);
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	689b      	ldr	r3, [r3, #8]
 8024d44:	613b      	str	r3, [r7, #16]
 8024d46:	683b      	ldr	r3, [r7, #0]
 8024d48:	689a      	ldr	r2, [r3, #8]
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	609a      	str	r2, [r3, #8]
 8024d4e:	683b      	ldr	r3, [r7, #0]
 8024d50:	693a      	ldr	r2, [r7, #16]
 8024d52:	609a      	str	r2, [r3, #8]
 8024d54:	687b      	ldr	r3, [r7, #4]
 8024d56:	685b      	ldr	r3, [r3, #4]
 8024d58:	60fb      	str	r3, [r7, #12]
 8024d5a:	683b      	ldr	r3, [r7, #0]
 8024d5c:	685a      	ldr	r2, [r3, #4]
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	605a      	str	r2, [r3, #4]
 8024d62:	683b      	ldr	r3, [r7, #0]
 8024d64:	68fa      	ldr	r2, [r7, #12]
 8024d66:	605a      	str	r2, [r3, #4]
}
 8024d68:	bf00      	nop
 8024d6a:	371c      	adds	r7, #28
 8024d6c:	46bd      	mov	sp, r7
 8024d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d72:	4770      	bx	lr

08024d74 <mpz_add_ui>:
/* MPZ addition and subtraction */


void
mpz_add_ui (mpz_t r, const mpz_t a, unsigned long b)
{
 8024d74:	b580      	push	{r7, lr}
 8024d76:	b088      	sub	sp, #32
 8024d78:	af00      	add	r7, sp, #0
 8024d7a:	60f8      	str	r0, [r7, #12]
 8024d7c:	60b9      	str	r1, [r7, #8]
 8024d7e:	607a      	str	r2, [r7, #4]
  mpz_t bb;
  mpz_init_set_ui (bb, b);
 8024d80:	f107 0314 	add.w	r3, r7, #20
 8024d84:	6879      	ldr	r1, [r7, #4]
 8024d86:	4618      	mov	r0, r3
 8024d88:	f7ff fc95 	bl	80246b6 <mpz_init_set_ui>
  mpz_add (r, a, bb);
 8024d8c:	f107 0314 	add.w	r3, r7, #20
 8024d90:	461a      	mov	r2, r3
 8024d92:	68b9      	ldr	r1, [r7, #8]
 8024d94:	68f8      	ldr	r0, [r7, #12]
 8024d96:	f000 f8fd 	bl	8024f94 <mpz_add>
  mpz_clear (bb);
 8024d9a:	f107 0314 	add.w	r3, r7, #20
 8024d9e:	4618      	mov	r0, r3
 8024da0:	f7ff fbbf 	bl	8024522 <mpz_clear>
}
 8024da4:	bf00      	nop
 8024da6:	3720      	adds	r7, #32
 8024da8:	46bd      	mov	sp, r7
 8024daa:	bd80      	pop	{r7, pc}

08024dac <mpz_sub_ui>:

void
mpz_sub_ui (mpz_t r, const mpz_t a, unsigned long b)
{
 8024dac:	b580      	push	{r7, lr}
 8024dae:	b084      	sub	sp, #16
 8024db0:	af00      	add	r7, sp, #0
 8024db2:	60f8      	str	r0, [r7, #12]
 8024db4:	60b9      	str	r1, [r7, #8]
 8024db6:	607a      	str	r2, [r7, #4]
  mpz_ui_sub (r, b, a);
 8024db8:	68ba      	ldr	r2, [r7, #8]
 8024dba:	6879      	ldr	r1, [r7, #4]
 8024dbc:	68f8      	ldr	r0, [r7, #12]
 8024dbe:	f000 f808 	bl	8024dd2 <mpz_ui_sub>
  mpz_neg (r, r);
 8024dc2:	68f9      	ldr	r1, [r7, #12]
 8024dc4:	68f8      	ldr	r0, [r7, #12]
 8024dc6:	f7ff ff9a 	bl	8024cfe <mpz_neg>
}
 8024dca:	bf00      	nop
 8024dcc:	3710      	adds	r7, #16
 8024dce:	46bd      	mov	sp, r7
 8024dd0:	bd80      	pop	{r7, pc}

08024dd2 <mpz_ui_sub>:

void
mpz_ui_sub (mpz_t r, unsigned long a, const mpz_t b)
{
 8024dd2:	b580      	push	{r7, lr}
 8024dd4:	b084      	sub	sp, #16
 8024dd6:	af00      	add	r7, sp, #0
 8024dd8:	60f8      	str	r0, [r7, #12]
 8024dda:	60b9      	str	r1, [r7, #8]
 8024ddc:	607a      	str	r2, [r7, #4]
  mpz_neg (r, b);
 8024dde:	6879      	ldr	r1, [r7, #4]
 8024de0:	68f8      	ldr	r0, [r7, #12]
 8024de2:	f7ff ff8c 	bl	8024cfe <mpz_neg>
  mpz_add_ui (r, r, a);
 8024de6:	68ba      	ldr	r2, [r7, #8]
 8024de8:	68f9      	ldr	r1, [r7, #12]
 8024dea:	68f8      	ldr	r0, [r7, #12]
 8024dec:	f7ff ffc2 	bl	8024d74 <mpz_add_ui>
}
 8024df0:	bf00      	nop
 8024df2:	3710      	adds	r7, #16
 8024df4:	46bd      	mov	sp, r7
 8024df6:	bd80      	pop	{r7, pc}

08024df8 <mpz_abs_add>:

static mp_size_t
mpz_abs_add (mpz_t r, const mpz_t a, const mpz_t b)
{
 8024df8:	b580      	push	{r7, lr}
 8024dfa:	b08c      	sub	sp, #48	@ 0x30
 8024dfc:	af02      	add	r7, sp, #8
 8024dfe:	60f8      	str	r0, [r7, #12]
 8024e00:	60b9      	str	r1, [r7, #8]
 8024e02:	607a      	str	r2, [r7, #4]
  mp_size_t an = GMP_ABS (a->_mp_size);
 8024e04:	68bb      	ldr	r3, [r7, #8]
 8024e06:	685b      	ldr	r3, [r3, #4]
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	bfb8      	it	lt
 8024e0c:	425b      	neglt	r3, r3
 8024e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  mp_size_t bn = GMP_ABS (b->_mp_size);
 8024e10:	687b      	ldr	r3, [r7, #4]
 8024e12:	685b      	ldr	r3, [r3, #4]
 8024e14:	2b00      	cmp	r3, #0
 8024e16:	bfb8      	it	lt
 8024e18:	425b      	neglt	r3, r3
 8024e1a:	623b      	str	r3, [r7, #32]
  mp_ptr rp;
  mp_limb_t cy;

  if (an < bn)
 8024e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024e1e:	6a3b      	ldr	r3, [r7, #32]
 8024e20:	429a      	cmp	r2, r3
 8024e22:	da0b      	bge.n	8024e3c <mpz_abs_add+0x44>
    {
      MPZ_SRCPTR_SWAP (a, b);
 8024e24:	68bb      	ldr	r3, [r7, #8]
 8024e26:	61fb      	str	r3, [r7, #28]
 8024e28:	687b      	ldr	r3, [r7, #4]
 8024e2a:	60bb      	str	r3, [r7, #8]
 8024e2c:	69fb      	ldr	r3, [r7, #28]
 8024e2e:	607b      	str	r3, [r7, #4]
      MP_SIZE_T_SWAP (an, bn);
 8024e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024e32:	61bb      	str	r3, [r7, #24]
 8024e34:	6a3b      	ldr	r3, [r7, #32]
 8024e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8024e38:	69bb      	ldr	r3, [r7, #24]
 8024e3a:	623b      	str	r3, [r7, #32]
    }

  rp = MPZ_REALLOC (r, an + 1);
 8024e3c:	68fb      	ldr	r3, [r7, #12]
 8024e3e:	681b      	ldr	r3, [r3, #0]
 8024e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024e42:	429a      	cmp	r2, r3
 8024e44:	db07      	blt.n	8024e56 <mpz_abs_add+0x5e>
 8024e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024e48:	3301      	adds	r3, #1
 8024e4a:	4619      	mov	r1, r3
 8024e4c:	68f8      	ldr	r0, [r7, #12]
 8024e4e:	f7ff fb7c 	bl	802454a <mpz_realloc>
 8024e52:	4603      	mov	r3, r0
 8024e54:	e001      	b.n	8024e5a <mpz_abs_add+0x62>
 8024e56:	68fb      	ldr	r3, [r7, #12]
 8024e58:	689b      	ldr	r3, [r3, #8]
 8024e5a:	617b      	str	r3, [r7, #20]
  cy = mpn_add (rp, a->_mp_d, an, b->_mp_d, bn);
 8024e5c:	68bb      	ldr	r3, [r7, #8]
 8024e5e:	6899      	ldr	r1, [r3, #8]
 8024e60:	687b      	ldr	r3, [r7, #4]
 8024e62:	689a      	ldr	r2, [r3, #8]
 8024e64:	6a3b      	ldr	r3, [r7, #32]
 8024e66:	9300      	str	r3, [sp, #0]
 8024e68:	4613      	mov	r3, r2
 8024e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024e6c:	6978      	ldr	r0, [r7, #20]
 8024e6e:	f7fd fdd9 	bl	8022a24 <mpn_add>
 8024e72:	6138      	str	r0, [r7, #16]

  rp[an] = cy;
 8024e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024e76:	009b      	lsls	r3, r3, #2
 8024e78:	697a      	ldr	r2, [r7, #20]
 8024e7a:	4413      	add	r3, r2
 8024e7c:	693a      	ldr	r2, [r7, #16]
 8024e7e:	601a      	str	r2, [r3, #0]

  return an + cy;
 8024e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024e82:	693b      	ldr	r3, [r7, #16]
 8024e84:	4413      	add	r3, r2
}
 8024e86:	4618      	mov	r0, r3
 8024e88:	3728      	adds	r7, #40	@ 0x28
 8024e8a:	46bd      	mov	sp, r7
 8024e8c:	bd80      	pop	{r7, pc}
	...

08024e90 <mpz_abs_sub>:

static mp_size_t
mpz_abs_sub (mpz_t r, const mpz_t a, const mpz_t b)
{
 8024e90:	b580      	push	{r7, lr}
 8024e92:	b08c      	sub	sp, #48	@ 0x30
 8024e94:	af02      	add	r7, sp, #8
 8024e96:	60f8      	str	r0, [r7, #12]
 8024e98:	60b9      	str	r1, [r7, #8]
 8024e9a:	607a      	str	r2, [r7, #4]
  mp_size_t an = GMP_ABS (a->_mp_size);
 8024e9c:	68bb      	ldr	r3, [r7, #8]
 8024e9e:	685b      	ldr	r3, [r3, #4]
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	bfb8      	it	lt
 8024ea4:	425b      	neglt	r3, r3
 8024ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  mp_size_t bn = GMP_ABS (b->_mp_size);
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	685b      	ldr	r3, [r3, #4]
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	bfb8      	it	lt
 8024eb0:	425b      	neglt	r3, r3
 8024eb2:	623b      	str	r3, [r7, #32]
  int cmp;
  mp_ptr rp;

  cmp = mpn_cmp4 (a->_mp_d, an, b->_mp_d, bn);
 8024eb4:	68bb      	ldr	r3, [r7, #8]
 8024eb6:	6898      	ldr	r0, [r3, #8]
 8024eb8:	687b      	ldr	r3, [r7, #4]
 8024eba:	689a      	ldr	r2, [r3, #8]
 8024ebc:	6a3b      	ldr	r3, [r7, #32]
 8024ebe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8024ec0:	f7fd fcc4 	bl	802284c <mpn_cmp4>
 8024ec4:	61f8      	str	r0, [r7, #28]
  if (cmp > 0)
 8024ec6:	69fb      	ldr	r3, [r7, #28]
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	dd29      	ble.n	8024f20 <mpz_abs_sub+0x90>
    {
      rp = MPZ_REALLOC (r, an);
 8024ecc:	68fb      	ldr	r3, [r7, #12]
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024ed2:	429a      	cmp	r2, r3
 8024ed4:	dd05      	ble.n	8024ee2 <mpz_abs_sub+0x52>
 8024ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8024ed8:	68f8      	ldr	r0, [r7, #12]
 8024eda:	f7ff fb36 	bl	802454a <mpz_realloc>
 8024ede:	4603      	mov	r3, r0
 8024ee0:	e001      	b.n	8024ee6 <mpz_abs_sub+0x56>
 8024ee2:	68fb      	ldr	r3, [r7, #12]
 8024ee4:	689b      	ldr	r3, [r3, #8]
 8024ee6:	61bb      	str	r3, [r7, #24]
      gmp_assert_nocarry (mpn_sub (rp, a->_mp_d, an, b->_mp_d, bn));
 8024ee8:	68bb      	ldr	r3, [r7, #8]
 8024eea:	6899      	ldr	r1, [r3, #8]
 8024eec:	687b      	ldr	r3, [r7, #4]
 8024eee:	689a      	ldr	r2, [r3, #8]
 8024ef0:	6a3b      	ldr	r3, [r7, #32]
 8024ef2:	9300      	str	r3, [sp, #0]
 8024ef4:	4613      	mov	r3, r2
 8024ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024ef8:	69b8      	ldr	r0, [r7, #24]
 8024efa:	f7fd fe4f 	bl	8022b9c <mpn_sub>
 8024efe:	6138      	str	r0, [r7, #16]
 8024f00:	693b      	ldr	r3, [r7, #16]
 8024f02:	2b00      	cmp	r3, #0
 8024f04:	d006      	beq.n	8024f14 <mpz_abs_sub+0x84>
 8024f06:	4b20      	ldr	r3, [pc, #128]	@ (8024f88 <mpz_abs_sub+0xf8>)
 8024f08:	4a20      	ldr	r2, [pc, #128]	@ (8024f8c <mpz_abs_sub+0xfc>)
 8024f0a:	f240 71e5 	movw	r1, #2021	@ 0x7e5
 8024f0e:	4820      	ldr	r0, [pc, #128]	@ (8024f90 <mpz_abs_sub+0x100>)
 8024f10:	f010 f992 	bl	8035238 <__assert_func>
      return mpn_normalized_size (rp, an);
 8024f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8024f16:	69b8      	ldr	r0, [r7, #24]
 8024f18:	f7fd fcb6 	bl	8022888 <mpn_normalized_size>
 8024f1c:	4603      	mov	r3, r0
 8024f1e:	e02e      	b.n	8024f7e <mpz_abs_sub+0xee>
    }
  else if (cmp < 0)
 8024f20:	69fb      	ldr	r3, [r7, #28]
 8024f22:	2b00      	cmp	r3, #0
 8024f24:	da2a      	bge.n	8024f7c <mpz_abs_sub+0xec>
    {
      rp = MPZ_REALLOC (r, bn);
 8024f26:	68fb      	ldr	r3, [r7, #12]
 8024f28:	681b      	ldr	r3, [r3, #0]
 8024f2a:	6a3a      	ldr	r2, [r7, #32]
 8024f2c:	429a      	cmp	r2, r3
 8024f2e:	dd05      	ble.n	8024f3c <mpz_abs_sub+0xac>
 8024f30:	6a39      	ldr	r1, [r7, #32]
 8024f32:	68f8      	ldr	r0, [r7, #12]
 8024f34:	f7ff fb09 	bl	802454a <mpz_realloc>
 8024f38:	4603      	mov	r3, r0
 8024f3a:	e001      	b.n	8024f40 <mpz_abs_sub+0xb0>
 8024f3c:	68fb      	ldr	r3, [r7, #12]
 8024f3e:	689b      	ldr	r3, [r3, #8]
 8024f40:	61bb      	str	r3, [r7, #24]
      gmp_assert_nocarry (mpn_sub (rp, b->_mp_d, bn, a->_mp_d, an));
 8024f42:	687b      	ldr	r3, [r7, #4]
 8024f44:	6899      	ldr	r1, [r3, #8]
 8024f46:	68bb      	ldr	r3, [r7, #8]
 8024f48:	689a      	ldr	r2, [r3, #8]
 8024f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024f4c:	9300      	str	r3, [sp, #0]
 8024f4e:	4613      	mov	r3, r2
 8024f50:	6a3a      	ldr	r2, [r7, #32]
 8024f52:	69b8      	ldr	r0, [r7, #24]
 8024f54:	f7fd fe22 	bl	8022b9c <mpn_sub>
 8024f58:	6178      	str	r0, [r7, #20]
 8024f5a:	697b      	ldr	r3, [r7, #20]
 8024f5c:	2b00      	cmp	r3, #0
 8024f5e:	d006      	beq.n	8024f6e <mpz_abs_sub+0xde>
 8024f60:	4b09      	ldr	r3, [pc, #36]	@ (8024f88 <mpz_abs_sub+0xf8>)
 8024f62:	4a0a      	ldr	r2, [pc, #40]	@ (8024f8c <mpz_abs_sub+0xfc>)
 8024f64:	f240 71eb 	movw	r1, #2027	@ 0x7eb
 8024f68:	4809      	ldr	r0, [pc, #36]	@ (8024f90 <mpz_abs_sub+0x100>)
 8024f6a:	f010 f965 	bl	8035238 <__assert_func>
      return -mpn_normalized_size (rp, bn);
 8024f6e:	6a39      	ldr	r1, [r7, #32]
 8024f70:	69b8      	ldr	r0, [r7, #24]
 8024f72:	f7fd fc89 	bl	8022888 <mpn_normalized_size>
 8024f76:	4603      	mov	r3, r0
 8024f78:	425b      	negs	r3, r3
 8024f7a:	e000      	b.n	8024f7e <mpz_abs_sub+0xee>
    }
  else
    return 0;
 8024f7c:	2300      	movs	r3, #0
}
 8024f7e:	4618      	mov	r0, r3
 8024f80:	3728      	adds	r7, #40	@ 0x28
 8024f82:	46bd      	mov	sp, r7
 8024f84:	bd80      	pop	{r7, pc}
 8024f86:	bf00      	nop
 8024f88:	080384c4 	.word	0x080384c4
 8024f8c:	0803bda0 	.word	0x0803bda0
 8024f90:	080382a0 	.word	0x080382a0

08024f94 <mpz_add>:

void
mpz_add (mpz_t r, const mpz_t a, const mpz_t b)
{
 8024f94:	b580      	push	{r7, lr}
 8024f96:	b086      	sub	sp, #24
 8024f98:	af00      	add	r7, sp, #0
 8024f9a:	60f8      	str	r0, [r7, #12]
 8024f9c:	60b9      	str	r1, [r7, #8]
 8024f9e:	607a      	str	r2, [r7, #4]
  mp_size_t rn;

  if ( (a->_mp_size ^ b->_mp_size) >= 0)
 8024fa0:	68bb      	ldr	r3, [r7, #8]
 8024fa2:	685a      	ldr	r2, [r3, #4]
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	685b      	ldr	r3, [r3, #4]
 8024fa8:	4053      	eors	r3, r2
 8024faa:	2b00      	cmp	r3, #0
 8024fac:	db06      	blt.n	8024fbc <mpz_add+0x28>
    rn = mpz_abs_add (r, a, b);
 8024fae:	687a      	ldr	r2, [r7, #4]
 8024fb0:	68b9      	ldr	r1, [r7, #8]
 8024fb2:	68f8      	ldr	r0, [r7, #12]
 8024fb4:	f7ff ff20 	bl	8024df8 <mpz_abs_add>
 8024fb8:	6178      	str	r0, [r7, #20]
 8024fba:	e005      	b.n	8024fc8 <mpz_add+0x34>
  else
    rn = mpz_abs_sub (r, a, b);
 8024fbc:	687a      	ldr	r2, [r7, #4]
 8024fbe:	68b9      	ldr	r1, [r7, #8]
 8024fc0:	68f8      	ldr	r0, [r7, #12]
 8024fc2:	f7ff ff65 	bl	8024e90 <mpz_abs_sub>
 8024fc6:	6178      	str	r0, [r7, #20]

  r->_mp_size = a->_mp_size >= 0 ? rn : - rn;
 8024fc8:	68bb      	ldr	r3, [r7, #8]
 8024fca:	685b      	ldr	r3, [r3, #4]
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	da02      	bge.n	8024fd6 <mpz_add+0x42>
 8024fd0:	697b      	ldr	r3, [r7, #20]
 8024fd2:	425b      	negs	r3, r3
 8024fd4:	e000      	b.n	8024fd8 <mpz_add+0x44>
 8024fd6:	697b      	ldr	r3, [r7, #20]
 8024fd8:	68fa      	ldr	r2, [r7, #12]
 8024fda:	6053      	str	r3, [r2, #4]
}
 8024fdc:	bf00      	nop
 8024fde:	3718      	adds	r7, #24
 8024fe0:	46bd      	mov	sp, r7
 8024fe2:	bd80      	pop	{r7, pc}

08024fe4 <mpz_sub>:

void
mpz_sub (mpz_t r, const mpz_t a, const mpz_t b)
{
 8024fe4:	b580      	push	{r7, lr}
 8024fe6:	b086      	sub	sp, #24
 8024fe8:	af00      	add	r7, sp, #0
 8024fea:	60f8      	str	r0, [r7, #12]
 8024fec:	60b9      	str	r1, [r7, #8]
 8024fee:	607a      	str	r2, [r7, #4]
  mp_size_t rn;

  if ( (a->_mp_size ^ b->_mp_size) >= 0)
 8024ff0:	68bb      	ldr	r3, [r7, #8]
 8024ff2:	685a      	ldr	r2, [r3, #4]
 8024ff4:	687b      	ldr	r3, [r7, #4]
 8024ff6:	685b      	ldr	r3, [r3, #4]
 8024ff8:	4053      	eors	r3, r2
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	db06      	blt.n	802500c <mpz_sub+0x28>
    rn = mpz_abs_sub (r, a, b);
 8024ffe:	687a      	ldr	r2, [r7, #4]
 8025000:	68b9      	ldr	r1, [r7, #8]
 8025002:	68f8      	ldr	r0, [r7, #12]
 8025004:	f7ff ff44 	bl	8024e90 <mpz_abs_sub>
 8025008:	6178      	str	r0, [r7, #20]
 802500a:	e005      	b.n	8025018 <mpz_sub+0x34>
  else
    rn = mpz_abs_add (r, a, b);
 802500c:	687a      	ldr	r2, [r7, #4]
 802500e:	68b9      	ldr	r1, [r7, #8]
 8025010:	68f8      	ldr	r0, [r7, #12]
 8025012:	f7ff fef1 	bl	8024df8 <mpz_abs_add>
 8025016:	6178      	str	r0, [r7, #20]

  r->_mp_size = a->_mp_size >= 0 ? rn : - rn;
 8025018:	68bb      	ldr	r3, [r7, #8]
 802501a:	685b      	ldr	r3, [r3, #4]
 802501c:	2b00      	cmp	r3, #0
 802501e:	da02      	bge.n	8025026 <mpz_sub+0x42>
 8025020:	697b      	ldr	r3, [r7, #20]
 8025022:	425b      	negs	r3, r3
 8025024:	e000      	b.n	8025028 <mpz_sub+0x44>
 8025026:	697b      	ldr	r3, [r7, #20]
 8025028:	68fa      	ldr	r2, [r7, #12]
 802502a:	6053      	str	r3, [r2, #4]
}
 802502c:	bf00      	nop
 802502e:	3718      	adds	r7, #24
 8025030:	46bd      	mov	sp, r7
 8025032:	bd80      	pop	{r7, pc}

08025034 <mpz_mul_si>:


/* MPZ multiplication */
void
mpz_mul_si (mpz_t r, const mpz_t u, long int v)
{
 8025034:	b580      	push	{r7, lr}
 8025036:	b084      	sub	sp, #16
 8025038:	af00      	add	r7, sp, #0
 802503a:	60f8      	str	r0, [r7, #12]
 802503c:	60b9      	str	r1, [r7, #8]
 802503e:	607a      	str	r2, [r7, #4]
  if (v < 0)
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	2b00      	cmp	r3, #0
 8025044:	da0b      	bge.n	802505e <mpz_mul_si+0x2a>
    {
      mpz_mul_ui (r, u, GMP_NEG_CAST (unsigned long int, v));
 8025046:	687b      	ldr	r3, [r7, #4]
 8025048:	425b      	negs	r3, r3
 802504a:	461a      	mov	r2, r3
 802504c:	68b9      	ldr	r1, [r7, #8]
 802504e:	68f8      	ldr	r0, [r7, #12]
 8025050:	f000 f80f 	bl	8025072 <mpz_mul_ui>
      mpz_neg (r, r);
 8025054:	68f9      	ldr	r1, [r7, #12]
 8025056:	68f8      	ldr	r0, [r7, #12]
 8025058:	f7ff fe51 	bl	8024cfe <mpz_neg>
    }
  else
    mpz_mul_ui (r, u, v);
}
 802505c:	e005      	b.n	802506a <mpz_mul_si+0x36>
    mpz_mul_ui (r, u, v);
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	461a      	mov	r2, r3
 8025062:	68b9      	ldr	r1, [r7, #8]
 8025064:	68f8      	ldr	r0, [r7, #12]
 8025066:	f000 f804 	bl	8025072 <mpz_mul_ui>
}
 802506a:	bf00      	nop
 802506c:	3710      	adds	r7, #16
 802506e:	46bd      	mov	sp, r7
 8025070:	bd80      	pop	{r7, pc}

08025072 <mpz_mul_ui>:

void
mpz_mul_ui (mpz_t r, const mpz_t u, unsigned long int v)
{
 8025072:	b580      	push	{r7, lr}
 8025074:	b088      	sub	sp, #32
 8025076:	af00      	add	r7, sp, #0
 8025078:	60f8      	str	r0, [r7, #12]
 802507a:	60b9      	str	r1, [r7, #8]
 802507c:	607a      	str	r2, [r7, #4]
  mpz_t vv;
  mpz_init_set_ui (vv, v);
 802507e:	f107 0314 	add.w	r3, r7, #20
 8025082:	6879      	ldr	r1, [r7, #4]
 8025084:	4618      	mov	r0, r3
 8025086:	f7ff fb16 	bl	80246b6 <mpz_init_set_ui>
  mpz_mul (r, u, vv);
 802508a:	f107 0314 	add.w	r3, r7, #20
 802508e:	461a      	mov	r2, r3
 8025090:	68b9      	ldr	r1, [r7, #8]
 8025092:	68f8      	ldr	r0, [r7, #12]
 8025094:	f000 f809 	bl	80250aa <mpz_mul>
  mpz_clear (vv);
 8025098:	f107 0314 	add.w	r3, r7, #20
 802509c:	4618      	mov	r0, r3
 802509e:	f7ff fa40 	bl	8024522 <mpz_clear>
  return;
 80250a2:	bf00      	nop
}
 80250a4:	3720      	adds	r7, #32
 80250a6:	46bd      	mov	sp, r7
 80250a8:	bd80      	pop	{r7, pc}

080250aa <mpz_mul>:

void
mpz_mul (mpz_t r, const mpz_t u, const mpz_t v)
{
 80250aa:	b580      	push	{r7, lr}
 80250ac:	b08e      	sub	sp, #56	@ 0x38
 80250ae:	af02      	add	r7, sp, #8
 80250b0:	60f8      	str	r0, [r7, #12]
 80250b2:	60b9      	str	r1, [r7, #8]
 80250b4:	607a      	str	r2, [r7, #4]
  int sign;
  mp_size_t un, vn, rn;
  mpz_t t;
  mp_ptr tp;

  un = u->_mp_size;
 80250b6:	68bb      	ldr	r3, [r7, #8]
 80250b8:	685b      	ldr	r3, [r3, #4]
 80250ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  vn = v->_mp_size;
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	685b      	ldr	r3, [r3, #4]
 80250c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (un == 0 || vn == 0)
 80250c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80250c4:	2b00      	cmp	r3, #0
 80250c6:	d002      	beq.n	80250ce <mpz_mul+0x24>
 80250c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	d103      	bne.n	80250d6 <mpz_mul+0x2c>
    {
      r->_mp_size = 0;
 80250ce:	68fb      	ldr	r3, [r7, #12]
 80250d0:	2200      	movs	r2, #0
 80250d2:	605a      	str	r2, [r3, #4]
 80250d4:	e05f      	b.n	8025196 <mpz_mul+0xec>
      return;
    }

  sign = (un ^ vn) < 0;
 80250d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80250d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80250da:	4053      	eors	r3, r2
 80250dc:	0fdb      	lsrs	r3, r3, #31
 80250de:	b2db      	uxtb	r3, r3
 80250e0:	627b      	str	r3, [r7, #36]	@ 0x24

  un = GMP_ABS (un);
 80250e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	bfb8      	it	lt
 80250e8:	425b      	neglt	r3, r3
 80250ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  vn = GMP_ABS (vn);
 80250ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	bfb8      	it	lt
 80250f2:	425b      	neglt	r3, r3
 80250f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  mpz_init2 (t, (un + vn) * GMP_LIMB_BITS);
 80250f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80250f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80250fa:	4413      	add	r3, r2
 80250fc:	015b      	lsls	r3, r3, #5
 80250fe:	461a      	mov	r2, r3
 8025100:	f107 0310 	add.w	r3, r7, #16
 8025104:	4611      	mov	r1, r2
 8025106:	4618      	mov	r0, r3
 8025108:	f7ff f9e8 	bl	80244dc <mpz_init2>

  tp = t->_mp_d;
 802510c:	69bb      	ldr	r3, [r7, #24]
 802510e:	623b      	str	r3, [r7, #32]
  if (un >= vn)
 8025110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025114:	429a      	cmp	r2, r3
 8025116:	db0b      	blt.n	8025130 <mpz_mul+0x86>
    mpn_mul (tp, u->_mp_d, un, v->_mp_d, vn);
 8025118:	68bb      	ldr	r3, [r7, #8]
 802511a:	6899      	ldr	r1, [r3, #8]
 802511c:	687b      	ldr	r3, [r7, #4]
 802511e:	689a      	ldr	r2, [r3, #8]
 8025120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025122:	9300      	str	r3, [sp, #0]
 8025124:	4613      	mov	r3, r2
 8025126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025128:	6a38      	ldr	r0, [r7, #32]
 802512a:	f7fd ff13 	bl	8022f54 <mpn_mul>
 802512e:	e00a      	b.n	8025146 <mpz_mul+0x9c>
  else
    mpn_mul (tp, v->_mp_d, vn, u->_mp_d, un);
 8025130:	687b      	ldr	r3, [r7, #4]
 8025132:	6899      	ldr	r1, [r3, #8]
 8025134:	68bb      	ldr	r3, [r7, #8]
 8025136:	689a      	ldr	r2, [r3, #8]
 8025138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802513a:	9300      	str	r3, [sp, #0]
 802513c:	4613      	mov	r3, r2
 802513e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025140:	6a38      	ldr	r0, [r7, #32]
 8025142:	f7fd ff07 	bl	8022f54 <mpn_mul>

  rn = un + vn;
 8025146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802514a:	4413      	add	r3, r2
 802514c:	61fb      	str	r3, [r7, #28]
  rn -= tp[rn-1] == 0;
 802514e:	69fb      	ldr	r3, [r7, #28]
 8025150:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025154:	3b01      	subs	r3, #1
 8025156:	009b      	lsls	r3, r3, #2
 8025158:	6a3a      	ldr	r2, [r7, #32]
 802515a:	4413      	add	r3, r2
 802515c:	681b      	ldr	r3, [r3, #0]
 802515e:	2b00      	cmp	r3, #0
 8025160:	bf0c      	ite	eq
 8025162:	2301      	moveq	r3, #1
 8025164:	2300      	movne	r3, #0
 8025166:	b2db      	uxtb	r3, r3
 8025168:	461a      	mov	r2, r3
 802516a:	69fb      	ldr	r3, [r7, #28]
 802516c:	1a9b      	subs	r3, r3, r2
 802516e:	61fb      	str	r3, [r7, #28]

  t->_mp_size = sign ? - rn : rn;
 8025170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025172:	2b00      	cmp	r3, #0
 8025174:	d002      	beq.n	802517c <mpz_mul+0xd2>
 8025176:	69fb      	ldr	r3, [r7, #28]
 8025178:	425b      	negs	r3, r3
 802517a:	e000      	b.n	802517e <mpz_mul+0xd4>
 802517c:	69fb      	ldr	r3, [r7, #28]
 802517e:	617b      	str	r3, [r7, #20]
  mpz_swap (r, t);
 8025180:	f107 0310 	add.w	r3, r7, #16
 8025184:	4619      	mov	r1, r3
 8025186:	68f8      	ldr	r0, [r7, #12]
 8025188:	f7ff fdcb 	bl	8024d22 <mpz_swap>
  mpz_clear (t);
 802518c:	f107 0310 	add.w	r3, r7, #16
 8025190:	4618      	mov	r0, r3
 8025192:	f7ff f9c6 	bl	8024522 <mpz_clear>
}
 8025196:	3730      	adds	r7, #48	@ 0x30
 8025198:	46bd      	mov	sp, r7
 802519a:	bd80      	pop	{r7, pc}

0802519c <mpz_mul_2exp>:

void
mpz_mul_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t bits)
{
 802519c:	b580      	push	{r7, lr}
 802519e:	b08a      	sub	sp, #40	@ 0x28
 80251a0:	af00      	add	r7, sp, #0
 80251a2:	60f8      	str	r0, [r7, #12]
 80251a4:	60b9      	str	r1, [r7, #8]
 80251a6:	607a      	str	r2, [r7, #4]
  mp_size_t un, rn;
  mp_size_t limbs;
  unsigned shift;
  mp_ptr rp;

  un = GMP_ABS (u->_mp_size);
 80251a8:	68bb      	ldr	r3, [r7, #8]
 80251aa:	685b      	ldr	r3, [r3, #4]
 80251ac:	2b00      	cmp	r3, #0
 80251ae:	bfb8      	it	lt
 80251b0:	425b      	neglt	r3, r3
 80251b2:	623b      	str	r3, [r7, #32]
  if (un == 0)
 80251b4:	6a3b      	ldr	r3, [r7, #32]
 80251b6:	2b00      	cmp	r3, #0
 80251b8:	d103      	bne.n	80251c2 <mpz_mul_2exp+0x26>
    {
      r->_mp_size = 0;
 80251ba:	68fb      	ldr	r3, [r7, #12]
 80251bc:	2200      	movs	r2, #0
 80251be:	605a      	str	r2, [r3, #4]
      return;
 80251c0:	e059      	b.n	8025276 <mpz_mul_2exp+0xda>
    }

  limbs = bits / GMP_LIMB_BITS;
 80251c2:	687b      	ldr	r3, [r7, #4]
 80251c4:	095b      	lsrs	r3, r3, #5
 80251c6:	61fb      	str	r3, [r7, #28]
  shift = bits % GMP_LIMB_BITS;
 80251c8:	687b      	ldr	r3, [r7, #4]
 80251ca:	f003 031f 	and.w	r3, r3, #31
 80251ce:	61bb      	str	r3, [r7, #24]

  rn = un + limbs + (shift > 0);
 80251d0:	6a3a      	ldr	r2, [r7, #32]
 80251d2:	69fb      	ldr	r3, [r7, #28]
 80251d4:	4413      	add	r3, r2
 80251d6:	69ba      	ldr	r2, [r7, #24]
 80251d8:	2a00      	cmp	r2, #0
 80251da:	bf14      	ite	ne
 80251dc:	2201      	movne	r2, #1
 80251de:	2200      	moveq	r2, #0
 80251e0:	b2d2      	uxtb	r2, r2
 80251e2:	4413      	add	r3, r2
 80251e4:	627b      	str	r3, [r7, #36]	@ 0x24
  rp = MPZ_REALLOC (r, rn);
 80251e6:	68fb      	ldr	r3, [r7, #12]
 80251e8:	681b      	ldr	r3, [r3, #0]
 80251ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80251ec:	429a      	cmp	r2, r3
 80251ee:	dd05      	ble.n	80251fc <mpz_mul_2exp+0x60>
 80251f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80251f2:	68f8      	ldr	r0, [r7, #12]
 80251f4:	f7ff f9a9 	bl	802454a <mpz_realloc>
 80251f8:	4603      	mov	r3, r0
 80251fa:	e001      	b.n	8025200 <mpz_mul_2exp+0x64>
 80251fc:	68fb      	ldr	r3, [r7, #12]
 80251fe:	689b      	ldr	r3, [r3, #8]
 8025200:	617b      	str	r3, [r7, #20]
  if (shift > 0)
 8025202:	69bb      	ldr	r3, [r7, #24]
 8025204:	2b00      	cmp	r3, #0
 8025206:	d01e      	beq.n	8025246 <mpz_mul_2exp+0xaa>
    {
      mp_limb_t cy = mpn_lshift (rp + limbs, u->_mp_d, un, shift);
 8025208:	69fb      	ldr	r3, [r7, #28]
 802520a:	009b      	lsls	r3, r3, #2
 802520c:	697a      	ldr	r2, [r7, #20]
 802520e:	18d0      	adds	r0, r2, r3
 8025210:	68bb      	ldr	r3, [r7, #8]
 8025212:	6899      	ldr	r1, [r3, #8]
 8025214:	69bb      	ldr	r3, [r7, #24]
 8025216:	6a3a      	ldr	r2, [r7, #32]
 8025218:	f7fd ff24 	bl	8023064 <mpn_lshift>
 802521c:	6138      	str	r0, [r7, #16]
      rp[rn-1] = cy;
 802521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025224:	3b01      	subs	r3, #1
 8025226:	009b      	lsls	r3, r3, #2
 8025228:	697a      	ldr	r2, [r7, #20]
 802522a:	4413      	add	r3, r2
 802522c:	693a      	ldr	r2, [r7, #16]
 802522e:	601a      	str	r2, [r3, #0]
      rn -= (cy == 0);
 8025230:	693b      	ldr	r3, [r7, #16]
 8025232:	2b00      	cmp	r3, #0
 8025234:	bf0c      	ite	eq
 8025236:	2301      	moveq	r3, #1
 8025238:	2300      	movne	r3, #0
 802523a:	b2db      	uxtb	r3, r3
 802523c:	461a      	mov	r2, r3
 802523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025240:	1a9b      	subs	r3, r3, r2
 8025242:	627b      	str	r3, [r7, #36]	@ 0x24
 8025244:	e009      	b.n	802525a <mpz_mul_2exp+0xbe>
    }
  else
    mpn_copyd (rp + limbs, u->_mp_d, un);
 8025246:	69fb      	ldr	r3, [r7, #28]
 8025248:	009b      	lsls	r3, r3, #2
 802524a:	697a      	ldr	r2, [r7, #20]
 802524c:	18d0      	adds	r0, r2, r3
 802524e:	68bb      	ldr	r3, [r7, #8]
 8025250:	689b      	ldr	r3, [r3, #8]
 8025252:	6a3a      	ldr	r2, [r7, #32]
 8025254:	4619      	mov	r1, r3
 8025256:	f7fd faaa 	bl	80227ae <mpn_copyd>

  mpn_zero (rp, limbs);
 802525a:	69f9      	ldr	r1, [r7, #28]
 802525c:	6978      	ldr	r0, [r7, #20]
 802525e:	f7fd fb43 	bl	80228e8 <mpn_zero>

  r->_mp_size = (u->_mp_size < 0) ? - rn : rn;
 8025262:	68bb      	ldr	r3, [r7, #8]
 8025264:	685b      	ldr	r3, [r3, #4]
 8025266:	2b00      	cmp	r3, #0
 8025268:	da02      	bge.n	8025270 <mpz_mul_2exp+0xd4>
 802526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802526c:	425b      	negs	r3, r3
 802526e:	e000      	b.n	8025272 <mpz_mul_2exp+0xd6>
 8025270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025272:	68fa      	ldr	r2, [r7, #12]
 8025274:	6053      	str	r3, [r2, #4]
}
 8025276:	3728      	adds	r7, #40	@ 0x28
 8025278:	46bd      	mov	sp, r7
 802527a:	bd80      	pop	{r7, pc}

0802527c <mpz_submul_ui>:
  mpz_clear (t);
}

void
mpz_submul_ui (mpz_t r, const mpz_t u, unsigned long int v)
{
 802527c:	b580      	push	{r7, lr}
 802527e:	b088      	sub	sp, #32
 8025280:	af00      	add	r7, sp, #0
 8025282:	60f8      	str	r0, [r7, #12]
 8025284:	60b9      	str	r1, [r7, #8]
 8025286:	607a      	str	r2, [r7, #4]
  mpz_t t;
  mpz_init_set_ui (t, v);
 8025288:	f107 0314 	add.w	r3, r7, #20
 802528c:	6879      	ldr	r1, [r7, #4]
 802528e:	4618      	mov	r0, r3
 8025290:	f7ff fa11 	bl	80246b6 <mpz_init_set_ui>
  mpz_mul (t, u, t);
 8025294:	f107 0214 	add.w	r2, r7, #20
 8025298:	f107 0314 	add.w	r3, r7, #20
 802529c:	68b9      	ldr	r1, [r7, #8]
 802529e:	4618      	mov	r0, r3
 80252a0:	f7ff ff03 	bl	80250aa <mpz_mul>
  mpz_sub (r, r, t);
 80252a4:	f107 0314 	add.w	r3, r7, #20
 80252a8:	461a      	mov	r2, r3
 80252aa:	68f9      	ldr	r1, [r7, #12]
 80252ac:	68f8      	ldr	r0, [r7, #12]
 80252ae:	f7ff fe99 	bl	8024fe4 <mpz_sub>
  mpz_clear (t);
 80252b2:	f107 0314 	add.w	r3, r7, #20
 80252b6:	4618      	mov	r0, r3
 80252b8:	f7ff f933 	bl	8024522 <mpz_clear>
}
 80252bc:	bf00      	nop
 80252be:	3720      	adds	r7, #32
 80252c0:	46bd      	mov	sp, r7
 80252c2:	bd80      	pop	{r7, pc}

080252c4 <mpz_div_qr>:

/* Allows q or r to be zero. Returns 1 iff remainder is non-zero. */
static int
mpz_div_qr (mpz_t q, mpz_t r,
	    const mpz_t n, const mpz_t d, enum mpz_div_round_mode mode)
{
 80252c4:	b580      	push	{r7, lr}
 80252c6:	b096      	sub	sp, #88	@ 0x58
 80252c8:	af02      	add	r7, sp, #8
 80252ca:	60f8      	str	r0, [r7, #12]
 80252cc:	60b9      	str	r1, [r7, #8]
 80252ce:	607a      	str	r2, [r7, #4]
 80252d0:	603b      	str	r3, [r7, #0]
  mp_size_t ns, ds, nn, dn, qs;
  ns = n->_mp_size;
 80252d2:	687b      	ldr	r3, [r7, #4]
 80252d4:	685b      	ldr	r3, [r3, #4]
 80252d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  ds = d->_mp_size;
 80252d8:	683b      	ldr	r3, [r7, #0]
 80252da:	685b      	ldr	r3, [r3, #4]
 80252dc:	647b      	str	r3, [r7, #68]	@ 0x44

  if (ds == 0)
 80252de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80252e0:	2b00      	cmp	r3, #0
 80252e2:	d102      	bne.n	80252ea <mpz_div_qr+0x26>
    gmp_die("mpz_div_qr: Divide by zero.");
 80252e4:	488d      	ldr	r0, [pc, #564]	@ (802551c <mpz_div_qr+0x258>)
 80252e6:	f7fd f99b 	bl	8022620 <gmp_die>

  if (ns == 0)
 80252ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80252ec:	2b00      	cmp	r3, #0
 80252ee:	d10d      	bne.n	802530c <mpz_div_qr+0x48>
    {
      if (q)
 80252f0:	68fb      	ldr	r3, [r7, #12]
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	d002      	beq.n	80252fc <mpz_div_qr+0x38>
	q->_mp_size = 0;
 80252f6:	68fb      	ldr	r3, [r7, #12]
 80252f8:	2200      	movs	r2, #0
 80252fa:	605a      	str	r2, [r3, #4]
      if (r)
 80252fc:	68bb      	ldr	r3, [r7, #8]
 80252fe:	2b00      	cmp	r3, #0
 8025300:	d002      	beq.n	8025308 <mpz_div_qr+0x44>
	r->_mp_size = 0;
 8025302:	68bb      	ldr	r3, [r7, #8]
 8025304:	2200      	movs	r2, #0
 8025306:	605a      	str	r2, [r3, #4]
      return 0;
 8025308:	2300      	movs	r3, #0
 802530a:	e103      	b.n	8025514 <mpz_div_qr+0x250>
    }

  nn = GMP_ABS (ns);
 802530c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802530e:	2b00      	cmp	r3, #0
 8025310:	bfb8      	it	lt
 8025312:	425b      	neglt	r3, r3
 8025314:	643b      	str	r3, [r7, #64]	@ 0x40
  dn = GMP_ABS (ds);
 8025316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8025318:	2b00      	cmp	r3, #0
 802531a:	bfb8      	it	lt
 802531c:	425b      	neglt	r3, r3
 802531e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  qs = ds ^ ns;
 8025320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8025322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025324:	4053      	eors	r3, r2
 8025326:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (nn < dn)
 8025328:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802532a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802532c:	429a      	cmp	r2, r3
 802532e:	da3d      	bge.n	80253ac <mpz_div_qr+0xe8>
    {
      if (mode == GMP_DIV_CEIL && qs >= 0)
 8025330:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8025334:	2b01      	cmp	r3, #1
 8025336:	d112      	bne.n	802535e <mpz_div_qr+0x9a>
 8025338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802533a:	2b00      	cmp	r3, #0
 802533c:	db0f      	blt.n	802535e <mpz_div_qr+0x9a>
	{
	  /* q = 1, r = n - d */
	  if (r)
 802533e:	68bb      	ldr	r3, [r7, #8]
 8025340:	2b00      	cmp	r3, #0
 8025342:	d004      	beq.n	802534e <mpz_div_qr+0x8a>
	    mpz_sub (r, n, d);
 8025344:	683a      	ldr	r2, [r7, #0]
 8025346:	6879      	ldr	r1, [r7, #4]
 8025348:	68b8      	ldr	r0, [r7, #8]
 802534a:	f7ff fe4b 	bl	8024fe4 <mpz_sub>
	  if (q)
 802534e:	68fb      	ldr	r3, [r7, #12]
 8025350:	2b00      	cmp	r3, #0
 8025352:	d029      	beq.n	80253a8 <mpz_div_qr+0xe4>
	    mpz_set_ui (q, 1);
 8025354:	2101      	movs	r1, #1
 8025356:	68f8      	ldr	r0, [r7, #12]
 8025358:	f7ff f950 	bl	80245fc <mpz_set_ui>
	  if (q)
 802535c:	e024      	b.n	80253a8 <mpz_div_qr+0xe4>
	}
      else if (mode == GMP_DIV_FLOOR && qs < 0)
 802535e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8025362:	2b00      	cmp	r3, #0
 8025364:	d113      	bne.n	802538e <mpz_div_qr+0xca>
 8025366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025368:	2b00      	cmp	r3, #0
 802536a:	da10      	bge.n	802538e <mpz_div_qr+0xca>
	{
	  /* q = -1, r = n + d */
	  if (r)
 802536c:	68bb      	ldr	r3, [r7, #8]
 802536e:	2b00      	cmp	r3, #0
 8025370:	d004      	beq.n	802537c <mpz_div_qr+0xb8>
	    mpz_add (r, n, d);
 8025372:	683a      	ldr	r2, [r7, #0]
 8025374:	6879      	ldr	r1, [r7, #4]
 8025376:	68b8      	ldr	r0, [r7, #8]
 8025378:	f7ff fe0c 	bl	8024f94 <mpz_add>
	  if (q)
 802537c:	68fb      	ldr	r3, [r7, #12]
 802537e:	2b00      	cmp	r3, #0
 8025380:	d012      	beq.n	80253a8 <mpz_div_qr+0xe4>
	    mpz_set_si (q, -1);
 8025382:	f04f 31ff 	mov.w	r1, #4294967295
 8025386:	68f8      	ldr	r0, [r7, #12]
 8025388:	f7ff f913 	bl	80245b2 <mpz_set_si>
	  if (q)
 802538c:	e00c      	b.n	80253a8 <mpz_div_qr+0xe4>
	}
      else
	{
	  /* q = 0, r = d */
	  if (r)
 802538e:	68bb      	ldr	r3, [r7, #8]
 8025390:	2b00      	cmp	r3, #0
 8025392:	d003      	beq.n	802539c <mpz_div_qr+0xd8>
	    mpz_set (r, n);
 8025394:	6879      	ldr	r1, [r7, #4]
 8025396:	68b8      	ldr	r0, [r7, #8]
 8025398:	f7ff f951 	bl	802463e <mpz_set>
	  if (q)
 802539c:	68fb      	ldr	r3, [r7, #12]
 802539e:	2b00      	cmp	r3, #0
 80253a0:	d002      	beq.n	80253a8 <mpz_div_qr+0xe4>
	    q->_mp_size = 0;
 80253a2:	68fb      	ldr	r3, [r7, #12]
 80253a4:	2200      	movs	r2, #0
 80253a6:	605a      	str	r2, [r3, #4]
	}
      return 1;
 80253a8:	2301      	movs	r3, #1
 80253aa:	e0b3      	b.n	8025514 <mpz_div_qr+0x250>
    {
      mp_ptr np, qp;
      mp_size_t qn, rn;
      mpz_t tq, tr;

      mpz_init_set (tr, n);
 80253ac:	f107 0314 	add.w	r3, r7, #20
 80253b0:	6879      	ldr	r1, [r7, #4]
 80253b2:	4618      	mov	r0, r3
 80253b4:	f7ff f98f 	bl	80246d6 <mpz_init_set>
      np = tr->_mp_d;
 80253b8:	69fb      	ldr	r3, [r7, #28]
 80253ba:	637b      	str	r3, [r7, #52]	@ 0x34

      qn = nn - dn + 1;
 80253bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80253be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80253c0:	1ad3      	subs	r3, r2, r3
 80253c2:	3301      	adds	r3, #1
 80253c4:	633b      	str	r3, [r7, #48]	@ 0x30

      if (q)
 80253c6:	68fb      	ldr	r3, [r7, #12]
 80253c8:	2b00      	cmp	r3, #0
 80253ca:	d00b      	beq.n	80253e4 <mpz_div_qr+0x120>
	{
	  mpz_init2 (tq, qn * GMP_LIMB_BITS);
 80253cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80253ce:	015b      	lsls	r3, r3, #5
 80253d0:	461a      	mov	r2, r3
 80253d2:	f107 0320 	add.w	r3, r7, #32
 80253d6:	4611      	mov	r1, r2
 80253d8:	4618      	mov	r0, r3
 80253da:	f7ff f87f 	bl	80244dc <mpz_init2>
	  qp = tq->_mp_d;
 80253de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80253e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80253e2:	e001      	b.n	80253e8 <mpz_div_qr+0x124>
	}
      else
	qp = NULL;
 80253e4:	2300      	movs	r3, #0
 80253e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      mpn_div_qr (qp, np, nn, d->_mp_d, dn);
 80253e8:	683b      	ldr	r3, [r7, #0]
 80253ea:	689a      	ldr	r2, [r3, #8]
 80253ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80253ee:	9300      	str	r3, [sp, #0]
 80253f0:	4613      	mov	r3, r2
 80253f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80253f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80253f6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80253f8:	f7fe ffba 	bl	8024370 <mpn_div_qr>

      if (qp)
 80253fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d018      	beq.n	8025434 <mpz_div_qr+0x170>
	{
	  qn -= (qp[qn-1] == 0);
 8025402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025408:	3b01      	subs	r3, #1
 802540a:	009b      	lsls	r3, r3, #2
 802540c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802540e:	4413      	add	r3, r2
 8025410:	681b      	ldr	r3, [r3, #0]
 8025412:	2b00      	cmp	r3, #0
 8025414:	bf0c      	ite	eq
 8025416:	2301      	moveq	r3, #1
 8025418:	2300      	movne	r3, #0
 802541a:	b2db      	uxtb	r3, r3
 802541c:	461a      	mov	r2, r3
 802541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025420:	1a9b      	subs	r3, r3, r2
 8025422:	633b      	str	r3, [r7, #48]	@ 0x30

	  tq->_mp_size = qs < 0 ? -qn : qn;
 8025424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025426:	2b00      	cmp	r3, #0
 8025428:	da02      	bge.n	8025430 <mpz_div_qr+0x16c>
 802542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802542c:	425b      	negs	r3, r3
 802542e:	e000      	b.n	8025432 <mpz_div_qr+0x16e>
 8025430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025432:	627b      	str	r3, [r7, #36]	@ 0x24
	}
      rn = mpn_normalized_size (np, dn);
 8025434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8025436:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8025438:	f7fd fa26 	bl	8022888 <mpn_normalized_size>
 802543c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      tr->_mp_size = ns < 0 ? - rn : rn;
 802543e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025440:	2b00      	cmp	r3, #0
 8025442:	da02      	bge.n	802544a <mpz_div_qr+0x186>
 8025444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025446:	425b      	negs	r3, r3
 8025448:	e000      	b.n	802544c <mpz_div_qr+0x188>
 802544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802544c:	61bb      	str	r3, [r7, #24]

      if (mode == GMP_DIV_FLOOR && qs < 0 && rn != 0)
 802544e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8025452:	2b00      	cmp	r3, #0
 8025454:	d11c      	bne.n	8025490 <mpz_div_qr+0x1cc>
 8025456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025458:	2b00      	cmp	r3, #0
 802545a:	da19      	bge.n	8025490 <mpz_div_qr+0x1cc>
 802545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802545e:	2b00      	cmp	r3, #0
 8025460:	d016      	beq.n	8025490 <mpz_div_qr+0x1cc>
	{
	  if (q)
 8025462:	68fb      	ldr	r3, [r7, #12]
 8025464:	2b00      	cmp	r3, #0
 8025466:	d007      	beq.n	8025478 <mpz_div_qr+0x1b4>
	    mpz_sub_ui (tq, tq, 1);
 8025468:	f107 0120 	add.w	r1, r7, #32
 802546c:	f107 0320 	add.w	r3, r7, #32
 8025470:	2201      	movs	r2, #1
 8025472:	4618      	mov	r0, r3
 8025474:	f7ff fc9a 	bl	8024dac <mpz_sub_ui>
	  if (r)
 8025478:	68bb      	ldr	r3, [r7, #8]
 802547a:	2b00      	cmp	r3, #0
 802547c:	d028      	beq.n	80254d0 <mpz_div_qr+0x20c>
	    mpz_add (tr, tr, d);
 802547e:	f107 0114 	add.w	r1, r7, #20
 8025482:	f107 0314 	add.w	r3, r7, #20
 8025486:	683a      	ldr	r2, [r7, #0]
 8025488:	4618      	mov	r0, r3
 802548a:	f7ff fd83 	bl	8024f94 <mpz_add>
	  if (r)
 802548e:	e01f      	b.n	80254d0 <mpz_div_qr+0x20c>
	}
      else if (mode == GMP_DIV_CEIL && qs >= 0 && rn != 0)
 8025490:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8025494:	2b01      	cmp	r3, #1
 8025496:	d11b      	bne.n	80254d0 <mpz_div_qr+0x20c>
 8025498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802549a:	2b00      	cmp	r3, #0
 802549c:	db18      	blt.n	80254d0 <mpz_div_qr+0x20c>
 802549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d015      	beq.n	80254d0 <mpz_div_qr+0x20c>
	{
	  if (q)
 80254a4:	68fb      	ldr	r3, [r7, #12]
 80254a6:	2b00      	cmp	r3, #0
 80254a8:	d007      	beq.n	80254ba <mpz_div_qr+0x1f6>
	    mpz_add_ui (tq, tq, 1);
 80254aa:	f107 0120 	add.w	r1, r7, #32
 80254ae:	f107 0320 	add.w	r3, r7, #32
 80254b2:	2201      	movs	r2, #1
 80254b4:	4618      	mov	r0, r3
 80254b6:	f7ff fc5d 	bl	8024d74 <mpz_add_ui>
	  if (r)
 80254ba:	68bb      	ldr	r3, [r7, #8]
 80254bc:	2b00      	cmp	r3, #0
 80254be:	d007      	beq.n	80254d0 <mpz_div_qr+0x20c>
	    mpz_sub (tr, tr, d);
 80254c0:	f107 0114 	add.w	r1, r7, #20
 80254c4:	f107 0314 	add.w	r3, r7, #20
 80254c8:	683a      	ldr	r2, [r7, #0]
 80254ca:	4618      	mov	r0, r3
 80254cc:	f7ff fd8a 	bl	8024fe4 <mpz_sub>
	}

      if (q)
 80254d0:	68fb      	ldr	r3, [r7, #12]
 80254d2:	2b00      	cmp	r3, #0
 80254d4:	d00a      	beq.n	80254ec <mpz_div_qr+0x228>
	{
	  mpz_swap (tq, q);
 80254d6:	f107 0320 	add.w	r3, r7, #32
 80254da:	68f9      	ldr	r1, [r7, #12]
 80254dc:	4618      	mov	r0, r3
 80254de:	f7ff fc20 	bl	8024d22 <mpz_swap>
	  mpz_clear (tq);
 80254e2:	f107 0320 	add.w	r3, r7, #32
 80254e6:	4618      	mov	r0, r3
 80254e8:	f7ff f81b 	bl	8024522 <mpz_clear>
	}
      if (r)
 80254ec:	68bb      	ldr	r3, [r7, #8]
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	d005      	beq.n	80254fe <mpz_div_qr+0x23a>
	mpz_swap (tr, r);
 80254f2:	f107 0314 	add.w	r3, r7, #20
 80254f6:	68b9      	ldr	r1, [r7, #8]
 80254f8:	4618      	mov	r0, r3
 80254fa:	f7ff fc12 	bl	8024d22 <mpz_swap>

      mpz_clear (tr);
 80254fe:	f107 0314 	add.w	r3, r7, #20
 8025502:	4618      	mov	r0, r3
 8025504:	f7ff f80d 	bl	8024522 <mpz_clear>

      return rn != 0;
 8025508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802550a:	2b00      	cmp	r3, #0
 802550c:	bf14      	ite	ne
 802550e:	2301      	movne	r3, #1
 8025510:	2300      	moveq	r3, #0
 8025512:	b2db      	uxtb	r3, r3
    }
}
 8025514:	4618      	mov	r0, r3
 8025516:	3750      	adds	r7, #80	@ 0x50
 8025518:	46bd      	mov	sp, r7
 802551a:	bd80      	pop	{r7, pc}
 802551c:	08038544 	.word	0x08038544

08025520 <mpz_fdiv_qr>:
  mpz_div_qr (q, r, n, d, GMP_DIV_CEIL);
}

void
mpz_fdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)
{
 8025520:	b580      	push	{r7, lr}
 8025522:	b086      	sub	sp, #24
 8025524:	af02      	add	r7, sp, #8
 8025526:	60f8      	str	r0, [r7, #12]
 8025528:	60b9      	str	r1, [r7, #8]
 802552a:	607a      	str	r2, [r7, #4]
 802552c:	603b      	str	r3, [r7, #0]
  mpz_div_qr (q, r, n, d, GMP_DIV_FLOOR);
 802552e:	2300      	movs	r3, #0
 8025530:	9300      	str	r3, [sp, #0]
 8025532:	683b      	ldr	r3, [r7, #0]
 8025534:	687a      	ldr	r2, [r7, #4]
 8025536:	68b9      	ldr	r1, [r7, #8]
 8025538:	68f8      	ldr	r0, [r7, #12]
 802553a:	f7ff fec3 	bl	80252c4 <mpz_div_qr>
}
 802553e:	bf00      	nop
 8025540:	3710      	adds	r7, #16
 8025542:	46bd      	mov	sp, r7
 8025544:	bd80      	pop	{r7, pc}

08025546 <mpz_tdiv_qr>:

void
mpz_tdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)
{
 8025546:	b580      	push	{r7, lr}
 8025548:	b086      	sub	sp, #24
 802554a:	af02      	add	r7, sp, #8
 802554c:	60f8      	str	r0, [r7, #12]
 802554e:	60b9      	str	r1, [r7, #8]
 8025550:	607a      	str	r2, [r7, #4]
 8025552:	603b      	str	r3, [r7, #0]
  mpz_div_qr (q, r, n, d, GMP_DIV_TRUNC);
 8025554:	2302      	movs	r3, #2
 8025556:	9300      	str	r3, [sp, #0]
 8025558:	683b      	ldr	r3, [r7, #0]
 802555a:	687a      	ldr	r2, [r7, #4]
 802555c:	68b9      	ldr	r1, [r7, #8]
 802555e:	68f8      	ldr	r0, [r7, #12]
 8025560:	f7ff feb0 	bl	80252c4 <mpz_div_qr>
}
 8025564:	bf00      	nop
 8025566:	3710      	adds	r7, #16
 8025568:	46bd      	mov	sp, r7
 802556a:	bd80      	pop	{r7, pc}

0802556c <mpz_tdiv_q>:
  mpz_div_qr (q, NULL, n, d, GMP_DIV_FLOOR);
}

void
mpz_tdiv_q (mpz_t q, const mpz_t n, const mpz_t d)
{
 802556c:	b580      	push	{r7, lr}
 802556e:	b086      	sub	sp, #24
 8025570:	af02      	add	r7, sp, #8
 8025572:	60f8      	str	r0, [r7, #12]
 8025574:	60b9      	str	r1, [r7, #8]
 8025576:	607a      	str	r2, [r7, #4]
  mpz_div_qr (q, NULL, n, d, GMP_DIV_TRUNC);
 8025578:	2302      	movs	r3, #2
 802557a:	9300      	str	r3, [sp, #0]
 802557c:	687b      	ldr	r3, [r7, #4]
 802557e:	68ba      	ldr	r2, [r7, #8]
 8025580:	2100      	movs	r1, #0
 8025582:	68f8      	ldr	r0, [r7, #12]
 8025584:	f7ff fe9e 	bl	80252c4 <mpz_div_qr>
}
 8025588:	bf00      	nop
 802558a:	3710      	adds	r7, #16
 802558c:	46bd      	mov	sp, r7
 802558e:	bd80      	pop	{r7, pc}

08025590 <mpz_tdiv_r>:
  mpz_div_qr (NULL, r, n, d, GMP_DIV_FLOOR);
}

void
mpz_tdiv_r (mpz_t r, const mpz_t n, const mpz_t d)
{
 8025590:	b580      	push	{r7, lr}
 8025592:	b086      	sub	sp, #24
 8025594:	af02      	add	r7, sp, #8
 8025596:	60f8      	str	r0, [r7, #12]
 8025598:	60b9      	str	r1, [r7, #8]
 802559a:	607a      	str	r2, [r7, #4]
  mpz_div_qr (NULL, r, n, d, GMP_DIV_TRUNC);
 802559c:	2302      	movs	r3, #2
 802559e:	9300      	str	r3, [sp, #0]
 80255a0:	687b      	ldr	r3, [r7, #4]
 80255a2:	68ba      	ldr	r2, [r7, #8]
 80255a4:	68f9      	ldr	r1, [r7, #12]
 80255a6:	2000      	movs	r0, #0
 80255a8:	f7ff fe8c 	bl	80252c4 <mpz_div_qr>
}
 80255ac:	bf00      	nop
 80255ae:	3710      	adds	r7, #16
 80255b0:	46bd      	mov	sp, r7
 80255b2:	bd80      	pop	{r7, pc}

080255b4 <mpz_mod>:

void
mpz_mod (mpz_t r, const mpz_t n, const mpz_t d)
{
 80255b4:	b580      	push	{r7, lr}
 80255b6:	b086      	sub	sp, #24
 80255b8:	af02      	add	r7, sp, #8
 80255ba:	60f8      	str	r0, [r7, #12]
 80255bc:	60b9      	str	r1, [r7, #8]
 80255be:	607a      	str	r2, [r7, #4]
  mpz_div_qr (NULL, r, n, d, d->_mp_size >= 0 ? GMP_DIV_FLOOR : GMP_DIV_CEIL);
 80255c0:	687b      	ldr	r3, [r7, #4]
 80255c2:	685b      	ldr	r3, [r3, #4]
 80255c4:	0fdb      	lsrs	r3, r3, #31
 80255c6:	b2db      	uxtb	r3, r3
 80255c8:	9300      	str	r3, [sp, #0]
 80255ca:	687b      	ldr	r3, [r7, #4]
 80255cc:	68ba      	ldr	r2, [r7, #8]
 80255ce:	68f9      	ldr	r1, [r7, #12]
 80255d0:	2000      	movs	r0, #0
 80255d2:	f7ff fe77 	bl	80252c4 <mpz_div_qr>
}
 80255d6:	bf00      	nop
 80255d8:	3710      	adds	r7, #16
 80255da:	46bd      	mov	sp, r7
 80255dc:	bd80      	pop	{r7, pc}

080255de <mpz_div_q_2exp>:

static void
mpz_div_q_2exp (mpz_t q, const mpz_t u, mp_bitcnt_t bit_index,
		enum mpz_div_round_mode mode)
{
 80255de:	b580      	push	{r7, lr}
 80255e0:	b08a      	sub	sp, #40	@ 0x28
 80255e2:	af00      	add	r7, sp, #0
 80255e4:	60f8      	str	r0, [r7, #12]
 80255e6:	60b9      	str	r1, [r7, #8]
 80255e8:	607a      	str	r2, [r7, #4]
 80255ea:	70fb      	strb	r3, [r7, #3]
  mp_size_t un, qn;
  mp_size_t limb_cnt;
  mp_ptr qp;
  int adjust;

  un = u->_mp_size;
 80255ec:	68bb      	ldr	r3, [r7, #8]
 80255ee:	685b      	ldr	r3, [r3, #4]
 80255f0:	61fb      	str	r3, [r7, #28]
  if (un == 0)
 80255f2:	69fb      	ldr	r3, [r7, #28]
 80255f4:	2b00      	cmp	r3, #0
 80255f6:	d103      	bne.n	8025600 <mpz_div_q_2exp+0x22>
    {
      q->_mp_size = 0;
 80255f8:	68fb      	ldr	r3, [r7, #12]
 80255fa:	2200      	movs	r2, #0
 80255fc:	605a      	str	r2, [r3, #4]
      return;
 80255fe:	e088      	b.n	8025712 <mpz_div_q_2exp+0x134>
    }
  limb_cnt = bit_index / GMP_LIMB_BITS;
 8025600:	687b      	ldr	r3, [r7, #4]
 8025602:	095b      	lsrs	r3, r3, #5
 8025604:	61bb      	str	r3, [r7, #24]
  qn = GMP_ABS (un) - limb_cnt;
 8025606:	69fb      	ldr	r3, [r7, #28]
 8025608:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 802560c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8025610:	69bb      	ldr	r3, [r7, #24]
 8025612:	1ad3      	subs	r3, r2, r3
 8025614:	627b      	str	r3, [r7, #36]	@ 0x24
  bit_index %= GMP_LIMB_BITS;
 8025616:	687b      	ldr	r3, [r7, #4]
 8025618:	f003 031f 	and.w	r3, r3, #31
 802561c:	607b      	str	r3, [r7, #4]

  if (mode == ((un > 0) ? GMP_DIV_CEIL : GMP_DIV_FLOOR)) /* un != 0 here. */
 802561e:	78fb      	ldrb	r3, [r7, #3]
 8025620:	69fa      	ldr	r2, [r7, #28]
 8025622:	2a00      	cmp	r2, #0
 8025624:	bfcc      	ite	gt
 8025626:	2201      	movgt	r2, #1
 8025628:	2200      	movle	r2, #0
 802562a:	b2d2      	uxtb	r2, r2
 802562c:	4293      	cmp	r3, r2
 802562e:	d11f      	bne.n	8025670 <mpz_div_q_2exp+0x92>
    /* Note: Below, the final indexing at limb_cnt is valid because at
       that point we have qn > 0. */
    adjust = (qn <= 0
	      || !mpn_zero_p (u->_mp_d, limb_cnt)
	      || (u->_mp_d[limb_cnt]
 8025630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025632:	2b00      	cmp	r3, #0
 8025634:	dd17      	ble.n	8025666 <mpz_div_q_2exp+0x88>
	      || !mpn_zero_p (u->_mp_d, limb_cnt)
 8025636:	68bb      	ldr	r3, [r7, #8]
 8025638:	689b      	ldr	r3, [r3, #8]
 802563a:	69b9      	ldr	r1, [r7, #24]
 802563c:	4618      	mov	r0, r3
 802563e:	f7fd f940 	bl	80228c2 <mpn_zero_p>
 8025642:	4603      	mov	r3, r0
 8025644:	2b00      	cmp	r3, #0
 8025646:	d00e      	beq.n	8025666 <mpz_div_q_2exp+0x88>
	      || (u->_mp_d[limb_cnt]
 8025648:	68bb      	ldr	r3, [r7, #8]
 802564a:	689a      	ldr	r2, [r3, #8]
 802564c:	69bb      	ldr	r3, [r7, #24]
 802564e:	009b      	lsls	r3, r3, #2
 8025650:	4413      	add	r3, r2
 8025652:	681a      	ldr	r2, [r3, #0]
		  & (((mp_limb_t) 1 << bit_index) - 1)));
 8025654:	f04f 31ff 	mov.w	r1, #4294967295
 8025658:	687b      	ldr	r3, [r7, #4]
 802565a:	fa01 f303 	lsl.w	r3, r1, r3
 802565e:	43db      	mvns	r3, r3
 8025660:	4013      	ands	r3, r2
	      || (u->_mp_d[limb_cnt]
 8025662:	2b00      	cmp	r3, #0
 8025664:	d001      	beq.n	802566a <mpz_div_q_2exp+0x8c>
 8025666:	2301      	movs	r3, #1
 8025668:	e000      	b.n	802566c <mpz_div_q_2exp+0x8e>
 802566a:	2300      	movs	r3, #0
    adjust = (qn <= 0
 802566c:	623b      	str	r3, [r7, #32]
 802566e:	e001      	b.n	8025674 <mpz_div_q_2exp+0x96>
  else
    adjust = 0;
 8025670:	2300      	movs	r3, #0
 8025672:	623b      	str	r3, [r7, #32]

  if (qn <= 0)
 8025674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025676:	2b00      	cmp	r3, #0
 8025678:	dc02      	bgt.n	8025680 <mpz_div_q_2exp+0xa2>
    qn = 0;
 802567a:	2300      	movs	r3, #0
 802567c:	627b      	str	r3, [r7, #36]	@ 0x24
 802567e:	e036      	b.n	80256ee <mpz_div_q_2exp+0x110>
  else
    {
      qp = MPZ_REALLOC (q, qn);
 8025680:	68fb      	ldr	r3, [r7, #12]
 8025682:	681b      	ldr	r3, [r3, #0]
 8025684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025686:	429a      	cmp	r2, r3
 8025688:	dd05      	ble.n	8025696 <mpz_div_q_2exp+0xb8>
 802568a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802568c:	68f8      	ldr	r0, [r7, #12]
 802568e:	f7fe ff5c 	bl	802454a <mpz_realloc>
 8025692:	4603      	mov	r3, r0
 8025694:	e001      	b.n	802569a <mpz_div_q_2exp+0xbc>
 8025696:	68fb      	ldr	r3, [r7, #12]
 8025698:	689b      	ldr	r3, [r3, #8]
 802569a:	617b      	str	r3, [r7, #20]

      if (bit_index != 0)
 802569c:	687b      	ldr	r3, [r7, #4]
 802569e:	2b00      	cmp	r3, #0
 80256a0:	d01b      	beq.n	80256da <mpz_div_q_2exp+0xfc>
	{
	  mpn_rshift (qp, u->_mp_d + limb_cnt, qn, bit_index);
 80256a2:	68bb      	ldr	r3, [r7, #8]
 80256a4:	689a      	ldr	r2, [r3, #8]
 80256a6:	69bb      	ldr	r3, [r7, #24]
 80256a8:	009b      	lsls	r3, r3, #2
 80256aa:	18d1      	adds	r1, r2, r3
 80256ac:	687b      	ldr	r3, [r7, #4]
 80256ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80256b0:	6978      	ldr	r0, [r7, #20]
 80256b2:	f7fd fd4b 	bl	802314c <mpn_rshift>
	  qn -= qp[qn - 1] == 0;
 80256b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80256b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80256bc:	3b01      	subs	r3, #1
 80256be:	009b      	lsls	r3, r3, #2
 80256c0:	697a      	ldr	r2, [r7, #20]
 80256c2:	4413      	add	r3, r2
 80256c4:	681b      	ldr	r3, [r3, #0]
 80256c6:	2b00      	cmp	r3, #0
 80256c8:	bf0c      	ite	eq
 80256ca:	2301      	moveq	r3, #1
 80256cc:	2300      	movne	r3, #0
 80256ce:	b2db      	uxtb	r3, r3
 80256d0:	461a      	mov	r2, r3
 80256d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80256d4:	1a9b      	subs	r3, r3, r2
 80256d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80256d8:	e009      	b.n	80256ee <mpz_div_q_2exp+0x110>
	}
      else
	{
	  mpn_copyi (qp, u->_mp_d + limb_cnt, qn);
 80256da:	68bb      	ldr	r3, [r7, #8]
 80256dc:	689a      	ldr	r2, [r3, #8]
 80256de:	69bb      	ldr	r3, [r7, #24]
 80256e0:	009b      	lsls	r3, r3, #2
 80256e2:	4413      	add	r3, r2
 80256e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80256e6:	4619      	mov	r1, r3
 80256e8:	6978      	ldr	r0, [r7, #20]
 80256ea:	f7fd f83f 	bl	802276c <mpn_copyi>
	}
    }

  q->_mp_size = qn;
 80256ee:	68fb      	ldr	r3, [r7, #12]
 80256f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80256f2:	605a      	str	r2, [r3, #4]

  if (adjust)
 80256f4:	6a3b      	ldr	r3, [r7, #32]
 80256f6:	2b00      	cmp	r3, #0
 80256f8:	d004      	beq.n	8025704 <mpz_div_q_2exp+0x126>
    mpz_add_ui (q, q, 1);
 80256fa:	2201      	movs	r2, #1
 80256fc:	68f9      	ldr	r1, [r7, #12]
 80256fe:	68f8      	ldr	r0, [r7, #12]
 8025700:	f7ff fb38 	bl	8024d74 <mpz_add_ui>
  if (un < 0)
 8025704:	69fb      	ldr	r3, [r7, #28]
 8025706:	2b00      	cmp	r3, #0
 8025708:	da03      	bge.n	8025712 <mpz_div_q_2exp+0x134>
    mpz_neg (q, q);
 802570a:	68f9      	ldr	r1, [r7, #12]
 802570c:	68f8      	ldr	r0, [r7, #12]
 802570e:	f7ff faf6 	bl	8024cfe <mpz_neg>
}
 8025712:	3728      	adds	r7, #40	@ 0x28
 8025714:	46bd      	mov	sp, r7
 8025716:	bd80      	pop	{r7, pc}

08025718 <mpz_fdiv_q_2exp>:
  mpz_div_q_2exp (r, u, cnt, GMP_DIV_CEIL);
}

void
mpz_fdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8025718:	b580      	push	{r7, lr}
 802571a:	b084      	sub	sp, #16
 802571c:	af00      	add	r7, sp, #0
 802571e:	60f8      	str	r0, [r7, #12]
 8025720:	60b9      	str	r1, [r7, #8]
 8025722:	607a      	str	r2, [r7, #4]
  mpz_div_q_2exp (r, u, cnt, GMP_DIV_FLOOR);
 8025724:	2300      	movs	r3, #0
 8025726:	687a      	ldr	r2, [r7, #4]
 8025728:	68b9      	ldr	r1, [r7, #8]
 802572a:	68f8      	ldr	r0, [r7, #12]
 802572c:	f7ff ff57 	bl	80255de <mpz_div_q_2exp>
}
 8025730:	bf00      	nop
 8025732:	3710      	adds	r7, #16
 8025734:	46bd      	mov	sp, r7
 8025736:	bd80      	pop	{r7, pc}

08025738 <mpz_tdiv_q_2exp>:

void
mpz_tdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8025738:	b580      	push	{r7, lr}
 802573a:	b084      	sub	sp, #16
 802573c:	af00      	add	r7, sp, #0
 802573e:	60f8      	str	r0, [r7, #12]
 8025740:	60b9      	str	r1, [r7, #8]
 8025742:	607a      	str	r2, [r7, #4]
  mpz_div_q_2exp (r, u, cnt, GMP_DIV_TRUNC);
 8025744:	2302      	movs	r3, #2
 8025746:	687a      	ldr	r2, [r7, #4]
 8025748:	68b9      	ldr	r1, [r7, #8]
 802574a:	68f8      	ldr	r0, [r7, #12]
 802574c:	f7ff ff47 	bl	80255de <mpz_div_q_2exp>
}
 8025750:	bf00      	nop
 8025752:	3710      	adds	r7, #16
 8025754:	46bd      	mov	sp, r7
 8025756:	bd80      	pop	{r7, pc}

08025758 <mpz_divexact>:
  mpz_div_r_2exp (r, u, cnt, GMP_DIV_TRUNC);
}

void
mpz_divexact (mpz_t q, const mpz_t n, const mpz_t d)
{
 8025758:	b580      	push	{r7, lr}
 802575a:	b088      	sub	sp, #32
 802575c:	af02      	add	r7, sp, #8
 802575e:	60f8      	str	r0, [r7, #12]
 8025760:	60b9      	str	r1, [r7, #8]
 8025762:	607a      	str	r2, [r7, #4]
  gmp_assert_nocarry (mpz_div_qr (q, NULL, n, d, GMP_DIV_TRUNC));
 8025764:	2302      	movs	r3, #2
 8025766:	9300      	str	r3, [sp, #0]
 8025768:	687b      	ldr	r3, [r7, #4]
 802576a:	68ba      	ldr	r2, [r7, #8]
 802576c:	2100      	movs	r1, #0
 802576e:	68f8      	ldr	r0, [r7, #12]
 8025770:	f7ff fda8 	bl	80252c4 <mpz_div_qr>
 8025774:	4603      	mov	r3, r0
 8025776:	617b      	str	r3, [r7, #20]
 8025778:	697b      	ldr	r3, [r7, #20]
 802577a:	2b00      	cmp	r3, #0
 802577c:	d006      	beq.n	802578c <mpz_divexact+0x34>
 802577e:	4b05      	ldr	r3, [pc, #20]	@ (8025794 <mpz_divexact+0x3c>)
 8025780:	4a05      	ldr	r2, [pc, #20]	@ (8025798 <mpz_divexact+0x40>)
 8025782:	f640 11e8 	movw	r1, #2536	@ 0x9e8
 8025786:	4805      	ldr	r0, [pc, #20]	@ (802579c <mpz_divexact+0x44>)
 8025788:	f00f fd56 	bl	8035238 <__assert_func>
}
 802578c:	bf00      	nop
 802578e:	3718      	adds	r7, #24
 8025790:	46bd      	mov	sp, r7
 8025792:	bd80      	pop	{r7, pc}
 8025794:	080384c4 	.word	0x080384c4
 8025798:	0803bdac 	.word	0x0803bdac
 802579c:	080382a0 	.word	0x080382a0

080257a0 <mpz_divisible_p>:

int
mpz_divisible_p (const mpz_t n, const mpz_t d)
{
 80257a0:	b580      	push	{r7, lr}
 80257a2:	b084      	sub	sp, #16
 80257a4:	af02      	add	r7, sp, #8
 80257a6:	6078      	str	r0, [r7, #4]
 80257a8:	6039      	str	r1, [r7, #0]
  return mpz_div_qr (NULL, NULL, n, d, GMP_DIV_TRUNC) == 0;
 80257aa:	2302      	movs	r3, #2
 80257ac:	9300      	str	r3, [sp, #0]
 80257ae:	683b      	ldr	r3, [r7, #0]
 80257b0:	687a      	ldr	r2, [r7, #4]
 80257b2:	2100      	movs	r1, #0
 80257b4:	2000      	movs	r0, #0
 80257b6:	f7ff fd85 	bl	80252c4 <mpz_div_qr>
 80257ba:	4603      	mov	r3, r0
 80257bc:	2b00      	cmp	r3, #0
 80257be:	bf0c      	ite	eq
 80257c0:	2301      	moveq	r3, #1
 80257c2:	2300      	movne	r3, #0
 80257c4:	b2db      	uxtb	r3, r3
}
 80257c6:	4618      	mov	r0, r3
 80257c8:	3708      	adds	r7, #8
 80257ca:	46bd      	mov	sp, r7
 80257cc:	bd80      	pop	{r7, pc}

080257ce <mpz_div_qr_ui>:
}

static unsigned long
mpz_div_qr_ui (mpz_t q, mpz_t r,
	       const mpz_t n, unsigned long d, enum mpz_div_round_mode mode)
{
 80257ce:	b580      	push	{r7, lr}
 80257d0:	b08e      	sub	sp, #56	@ 0x38
 80257d2:	af02      	add	r7, sp, #8
 80257d4:	60f8      	str	r0, [r7, #12]
 80257d6:	60b9      	str	r1, [r7, #8]
 80257d8:	607a      	str	r2, [r7, #4]
 80257da:	603b      	str	r3, [r7, #0]
  unsigned long ret;
  mpz_t rr, dd;

  mpz_init (rr);
 80257dc:	f107 0320 	add.w	r3, r7, #32
 80257e0:	4618      	mov	r0, r3
 80257e2:	f7fe fe65 	bl	80244b0 <mpz_init>
  mpz_init_set_ui (dd, d);
 80257e6:	f107 0314 	add.w	r3, r7, #20
 80257ea:	6839      	ldr	r1, [r7, #0]
 80257ec:	4618      	mov	r0, r3
 80257ee:	f7fe ff62 	bl	80246b6 <mpz_init_set_ui>
  mpz_div_qr (q, rr, n, dd, mode);
 80257f2:	f107 0214 	add.w	r2, r7, #20
 80257f6:	f107 0120 	add.w	r1, r7, #32
 80257fa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80257fe:	9300      	str	r3, [sp, #0]
 8025800:	4613      	mov	r3, r2
 8025802:	687a      	ldr	r2, [r7, #4]
 8025804:	68f8      	ldr	r0, [r7, #12]
 8025806:	f7ff fd5d 	bl	80252c4 <mpz_div_qr>
  mpz_clear (dd);
 802580a:	f107 0314 	add.w	r3, r7, #20
 802580e:	4618      	mov	r0, r3
 8025810:	f7fe fe87 	bl	8024522 <mpz_clear>
  ret = mpz_get_ui (rr);
 8025814:	f107 0320 	add.w	r3, r7, #32
 8025818:	4618      	mov	r0, r3
 802581a:	f7fe ffad 	bl	8024778 <mpz_get_ui>
 802581e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if (r)
 8025820:	68bb      	ldr	r3, [r7, #8]
 8025822:	2b00      	cmp	r3, #0
 8025824:	d005      	beq.n	8025832 <mpz_div_qr_ui+0x64>
    mpz_swap (r, rr);
 8025826:	f107 0320 	add.w	r3, r7, #32
 802582a:	4619      	mov	r1, r3
 802582c:	68b8      	ldr	r0, [r7, #8]
 802582e:	f7ff fa78 	bl	8024d22 <mpz_swap>
  mpz_clear (rr);
 8025832:	f107 0320 	add.w	r3, r7, #32
 8025836:	4618      	mov	r0, r3
 8025838:	f7fe fe73 	bl	8024522 <mpz_clear>

  return ret;
 802583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 802583e:	4618      	mov	r0, r3
 8025840:	3730      	adds	r7, #48	@ 0x30
 8025842:	46bd      	mov	sp, r7
 8025844:	bd80      	pop	{r7, pc}

08025846 <mpz_tdiv_q_ui>:
  return mpz_div_qr_ui (q, NULL, n, d, GMP_DIV_FLOOR);
}

unsigned long
mpz_tdiv_q_ui (mpz_t q, const mpz_t n, unsigned long d)
{
 8025846:	b580      	push	{r7, lr}
 8025848:	b086      	sub	sp, #24
 802584a:	af02      	add	r7, sp, #8
 802584c:	60f8      	str	r0, [r7, #12]
 802584e:	60b9      	str	r1, [r7, #8]
 8025850:	607a      	str	r2, [r7, #4]
  return mpz_div_qr_ui (q, NULL, n, d, GMP_DIV_TRUNC);
 8025852:	2302      	movs	r3, #2
 8025854:	9300      	str	r3, [sp, #0]
 8025856:	687b      	ldr	r3, [r7, #4]
 8025858:	68ba      	ldr	r2, [r7, #8]
 802585a:	2100      	movs	r1, #0
 802585c:	68f8      	ldr	r0, [r7, #12]
 802585e:	f7ff ffb6 	bl	80257ce <mpz_div_qr_ui>
 8025862:	4603      	mov	r3, r0
}
 8025864:	4618      	mov	r0, r3
 8025866:	3710      	adds	r7, #16
 8025868:	46bd      	mov	sp, r7
 802586a:	bd80      	pop	{r7, pc}

0802586c <mpz_fdiv_ui>:
  return mpz_div_qr_ui (NULL, NULL, n, d, GMP_DIV_CEIL);
}

unsigned long
mpz_fdiv_ui (const mpz_t n, unsigned long d)
{
 802586c:	b580      	push	{r7, lr}
 802586e:	b084      	sub	sp, #16
 8025870:	af02      	add	r7, sp, #8
 8025872:	6078      	str	r0, [r7, #4]
 8025874:	6039      	str	r1, [r7, #0]
  return mpz_div_qr_ui (NULL, NULL, n, d, GMP_DIV_FLOOR);
 8025876:	2300      	movs	r3, #0
 8025878:	9300      	str	r3, [sp, #0]
 802587a:	683b      	ldr	r3, [r7, #0]
 802587c:	687a      	ldr	r2, [r7, #4]
 802587e:	2100      	movs	r1, #0
 8025880:	2000      	movs	r0, #0
 8025882:	f7ff ffa4 	bl	80257ce <mpz_div_qr_ui>
 8025886:	4603      	mov	r3, r0
}
 8025888:	4618      	mov	r0, r3
 802588a:	3708      	adds	r7, #8
 802588c:	46bd      	mov	sp, r7
 802588e:	bd80      	pop	{r7, pc}

08025890 <mpz_tdiv_ui>:

unsigned long
mpz_tdiv_ui (const mpz_t n, unsigned long d)
{
 8025890:	b580      	push	{r7, lr}
 8025892:	b084      	sub	sp, #16
 8025894:	af02      	add	r7, sp, #8
 8025896:	6078      	str	r0, [r7, #4]
 8025898:	6039      	str	r1, [r7, #0]
  return mpz_div_qr_ui (NULL, NULL, n, d, GMP_DIV_TRUNC);
 802589a:	2302      	movs	r3, #2
 802589c:	9300      	str	r3, [sp, #0]
 802589e:	683b      	ldr	r3, [r7, #0]
 80258a0:	687a      	ldr	r2, [r7, #4]
 80258a2:	2100      	movs	r1, #0
 80258a4:	2000      	movs	r0, #0
 80258a6:	f7ff ff92 	bl	80257ce <mpz_div_qr_ui>
 80258aa:	4603      	mov	r3, r0
}
 80258ac:	4618      	mov	r0, r3
 80258ae:	3708      	adds	r7, #8
 80258b0:	46bd      	mov	sp, r7
 80258b2:	bd80      	pop	{r7, pc}

080258b4 <mpz_mod_ui>:

unsigned long
mpz_mod_ui (mpz_t r, const mpz_t n, unsigned long d)
{
 80258b4:	b580      	push	{r7, lr}
 80258b6:	b086      	sub	sp, #24
 80258b8:	af02      	add	r7, sp, #8
 80258ba:	60f8      	str	r0, [r7, #12]
 80258bc:	60b9      	str	r1, [r7, #8]
 80258be:	607a      	str	r2, [r7, #4]
  return mpz_div_qr_ui (NULL, r, n, d, GMP_DIV_FLOOR);
 80258c0:	2300      	movs	r3, #0
 80258c2:	9300      	str	r3, [sp, #0]
 80258c4:	687b      	ldr	r3, [r7, #4]
 80258c6:	68ba      	ldr	r2, [r7, #8]
 80258c8:	68f9      	ldr	r1, [r7, #12]
 80258ca:	2000      	movs	r0, #0
 80258cc:	f7ff ff7f 	bl	80257ce <mpz_div_qr_ui>
 80258d0:	4603      	mov	r3, r0
}
 80258d2:	4618      	mov	r0, r3
 80258d4:	3710      	adds	r7, #16
 80258d6:	46bd      	mov	sp, r7
 80258d8:	bd80      	pop	{r7, pc}
	...

080258dc <mpn_gcd_11>:


/* GCD */
static mp_limb_t
mpn_gcd_11 (mp_limb_t u, mp_limb_t v)
{
 80258dc:	b580      	push	{r7, lr}
 80258de:	b08a      	sub	sp, #40	@ 0x28
 80258e0:	af00      	add	r7, sp, #0
 80258e2:	6078      	str	r0, [r7, #4]
 80258e4:	6039      	str	r1, [r7, #0]
  unsigned shift;

  assert ( (u | v) > 0);
 80258e6:	687a      	ldr	r2, [r7, #4]
 80258e8:	683b      	ldr	r3, [r7, #0]
 80258ea:	4313      	orrs	r3, r2
 80258ec:	2b00      	cmp	r3, #0
 80258ee:	d106      	bne.n	80258fe <mpn_gcd_11+0x22>
 80258f0:	4b43      	ldr	r3, [pc, #268]	@ (8025a00 <mpn_gcd_11+0x124>)
 80258f2:	4a44      	ldr	r2, [pc, #272]	@ (8025a04 <mpn_gcd_11+0x128>)
 80258f4:	f640 2176 	movw	r1, #2678	@ 0xa76
 80258f8:	4843      	ldr	r0, [pc, #268]	@ (8025a08 <mpn_gcd_11+0x12c>)
 80258fa:	f00f fc9d 	bl	8035238 <__assert_func>

  if (u == 0)
 80258fe:	687b      	ldr	r3, [r7, #4]
 8025900:	2b00      	cmp	r3, #0
 8025902:	d101      	bne.n	8025908 <mpn_gcd_11+0x2c>
    return v;
 8025904:	683b      	ldr	r3, [r7, #0]
 8025906:	e077      	b.n	80259f8 <mpn_gcd_11+0x11c>
  else if (v == 0)
 8025908:	683b      	ldr	r3, [r7, #0]
 802590a:	2b00      	cmp	r3, #0
 802590c:	d101      	bne.n	8025912 <mpn_gcd_11+0x36>
    return u;
 802590e:	687b      	ldr	r3, [r7, #4]
 8025910:	e072      	b.n	80259f8 <mpn_gcd_11+0x11c>

  gmp_ctz (shift, u | v);
 8025912:	687a      	ldr	r2, [r7, #4]
 8025914:	683b      	ldr	r3, [r7, #0]
 8025916:	4313      	orrs	r3, r2
 8025918:	61fb      	str	r3, [r7, #28]
 802591a:	2300      	movs	r3, #0
 802591c:	61bb      	str	r3, [r7, #24]
 802591e:	69fb      	ldr	r3, [r7, #28]
 8025920:	425b      	negs	r3, r3
 8025922:	69fa      	ldr	r2, [r7, #28]
 8025924:	4013      	ands	r3, r2
 8025926:	627b      	str	r3, [r7, #36]	@ 0x24
 8025928:	2300      	movs	r3, #0
 802592a:	623b      	str	r3, [r7, #32]
 802592c:	2308      	movs	r3, #8
 802592e:	617b      	str	r3, [r7, #20]
 8025930:	697b      	ldr	r3, [r7, #20]
 8025932:	2b1f      	cmp	r3, #31
 8025934:	dc13      	bgt.n	802595e <mpn_gcd_11+0x82>
 8025936:	e007      	b.n	8025948 <mpn_gcd_11+0x6c>
 8025938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802593a:	697b      	ldr	r3, [r7, #20]
 802593c:	fa02 f303 	lsl.w	r3, r2, r3
 8025940:	627b      	str	r3, [r7, #36]	@ 0x24
 8025942:	6a3b      	ldr	r3, [r7, #32]
 8025944:	3308      	adds	r3, #8
 8025946:	623b      	str	r3, [r7, #32]
 8025948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802594a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802594e:	d3f3      	bcc.n	8025938 <mpn_gcd_11+0x5c>
 8025950:	e005      	b.n	802595e <mpn_gcd_11+0x82>
 8025952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025954:	005b      	lsls	r3, r3, #1
 8025956:	627b      	str	r3, [r7, #36]	@ 0x24
 8025958:	6a3b      	ldr	r3, [r7, #32]
 802595a:	3301      	adds	r3, #1
 802595c:	623b      	str	r3, [r7, #32]
 802595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025960:	2b00      	cmp	r3, #0
 8025962:	daf6      	bge.n	8025952 <mpn_gcd_11+0x76>
 8025964:	6a3b      	ldr	r3, [r7, #32]
 8025966:	61bb      	str	r3, [r7, #24]
 8025968:	69bb      	ldr	r3, [r7, #24]
 802596a:	f1c3 031f 	rsb	r3, r3, #31
 802596e:	613b      	str	r3, [r7, #16]

  u >>= shift;
 8025970:	687a      	ldr	r2, [r7, #4]
 8025972:	693b      	ldr	r3, [r7, #16]
 8025974:	fa22 f303 	lsr.w	r3, r2, r3
 8025978:	607b      	str	r3, [r7, #4]
  v >>= shift;
 802597a:	683a      	ldr	r2, [r7, #0]
 802597c:	693b      	ldr	r3, [r7, #16]
 802597e:	fa22 f303 	lsr.w	r3, r2, r3
 8025982:	603b      	str	r3, [r7, #0]

  if ( (u & 1) == 0)
 8025984:	687b      	ldr	r3, [r7, #4]
 8025986:	f003 0301 	and.w	r3, r3, #1
 802598a:	2b00      	cmp	r3, #0
 802598c:	d109      	bne.n	80259a2 <mpn_gcd_11+0xc6>
    MP_LIMB_T_SWAP (u, v);
 802598e:	687b      	ldr	r3, [r7, #4]
 8025990:	60fb      	str	r3, [r7, #12]
 8025992:	683b      	ldr	r3, [r7, #0]
 8025994:	607b      	str	r3, [r7, #4]
 8025996:	68fb      	ldr	r3, [r7, #12]
 8025998:	603b      	str	r3, [r7, #0]

  while ( (v & 1) == 0)
 802599a:	e002      	b.n	80259a2 <mpn_gcd_11+0xc6>
    v >>= 1;
 802599c:	683b      	ldr	r3, [r7, #0]
 802599e:	085b      	lsrs	r3, r3, #1
 80259a0:	603b      	str	r3, [r7, #0]
  while ( (v & 1) == 0)
 80259a2:	683b      	ldr	r3, [r7, #0]
 80259a4:	f003 0301 	and.w	r3, r3, #1
 80259a8:	2b00      	cmp	r3, #0
 80259aa:	d0f7      	beq.n	802599c <mpn_gcd_11+0xc0>

  while (u != v)
 80259ac:	e01c      	b.n	80259e8 <mpn_gcd_11+0x10c>
    {
      if (u > v)
 80259ae:	687a      	ldr	r2, [r7, #4]
 80259b0:	683b      	ldr	r3, [r7, #0]
 80259b2:	429a      	cmp	r2, r3
 80259b4:	d90c      	bls.n	80259d0 <mpn_gcd_11+0xf4>
	{
	  u -= v;
 80259b6:	687a      	ldr	r2, [r7, #4]
 80259b8:	683b      	ldr	r3, [r7, #0]
 80259ba:	1ad3      	subs	r3, r2, r3
 80259bc:	607b      	str	r3, [r7, #4]
	  do
	    u >>= 1;
 80259be:	687b      	ldr	r3, [r7, #4]
 80259c0:	085b      	lsrs	r3, r3, #1
 80259c2:	607b      	str	r3, [r7, #4]
	  while ( (u & 1) == 0);
 80259c4:	687b      	ldr	r3, [r7, #4]
 80259c6:	f003 0301 	and.w	r3, r3, #1
 80259ca:	2b00      	cmp	r3, #0
 80259cc:	d0f7      	beq.n	80259be <mpn_gcd_11+0xe2>
 80259ce:	e00b      	b.n	80259e8 <mpn_gcd_11+0x10c>
	}
      else
	{
	  v -= u;
 80259d0:	683a      	ldr	r2, [r7, #0]
 80259d2:	687b      	ldr	r3, [r7, #4]
 80259d4:	1ad3      	subs	r3, r2, r3
 80259d6:	603b      	str	r3, [r7, #0]
	  do
	    v >>= 1;
 80259d8:	683b      	ldr	r3, [r7, #0]
 80259da:	085b      	lsrs	r3, r3, #1
 80259dc:	603b      	str	r3, [r7, #0]
	  while ( (v & 1) == 0);
 80259de:	683b      	ldr	r3, [r7, #0]
 80259e0:	f003 0301 	and.w	r3, r3, #1
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	d0f7      	beq.n	80259d8 <mpn_gcd_11+0xfc>
  while (u != v)
 80259e8:	687a      	ldr	r2, [r7, #4]
 80259ea:	683b      	ldr	r3, [r7, #0]
 80259ec:	429a      	cmp	r2, r3
 80259ee:	d1de      	bne.n	80259ae <mpn_gcd_11+0xd2>
	}
    }
  return u << shift;
 80259f0:	687a      	ldr	r2, [r7, #4]
 80259f2:	693b      	ldr	r3, [r7, #16]
 80259f4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80259f8:	4618      	mov	r0, r3
 80259fa:	3728      	adds	r7, #40	@ 0x28
 80259fc:	46bd      	mov	sp, r7
 80259fe:	bd80      	pop	{r7, pc}
 8025a00:	08038568 	.word	0x08038568
 8025a04:	0803bdbc 	.word	0x0803bdbc
 8025a08:	080382a0 	.word	0x080382a0

08025a0c <mpn_gcd>:

mp_size_t
mpn_gcd (mp_ptr rp, mp_ptr up, mp_size_t un, mp_ptr vp, mp_size_t vn)
{
 8025a0c:	b580      	push	{r7, lr}
 8025a0e:	b094      	sub	sp, #80	@ 0x50
 8025a10:	af02      	add	r7, sp, #8
 8025a12:	60f8      	str	r0, [r7, #12]
 8025a14:	60b9      	str	r1, [r7, #8]
 8025a16:	607a      	str	r2, [r7, #4]
 8025a18:	603b      	str	r3, [r7, #0]
  assert (un >= vn);
 8025a1a:	687a      	ldr	r2, [r7, #4]
 8025a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025a1e:	429a      	cmp	r2, r3
 8025a20:	da06      	bge.n	8025a30 <mpn_gcd+0x24>
 8025a22:	4b90      	ldr	r3, [pc, #576]	@ (8025c64 <mpn_gcd+0x258>)
 8025a24:	4a90      	ldr	r2, [pc, #576]	@ (8025c68 <mpn_gcd+0x25c>)
 8025a26:	f640 219f 	movw	r1, #2719	@ 0xa9f
 8025a2a:	4890      	ldr	r0, [pc, #576]	@ (8025c6c <mpn_gcd+0x260>)
 8025a2c:	f00f fc04 	bl	8035238 <__assert_func>
  assert (vn > 0);
 8025a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025a32:	2b00      	cmp	r3, #0
 8025a34:	dc06      	bgt.n	8025a44 <mpn_gcd+0x38>
 8025a36:	4b8e      	ldr	r3, [pc, #568]	@ (8025c70 <mpn_gcd+0x264>)
 8025a38:	4a8b      	ldr	r2, [pc, #556]	@ (8025c68 <mpn_gcd+0x25c>)
 8025a3a:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8025a3e:	488b      	ldr	r0, [pc, #556]	@ (8025c6c <mpn_gcd+0x260>)
 8025a40:	f00f fbfa 	bl	8035238 <__assert_func>
  assert (!GMP_MPN_OVERLAP_P (up, un, vp, vn));
 8025a44:	687b      	ldr	r3, [r7, #4]
 8025a46:	009b      	lsls	r3, r3, #2
 8025a48:	68ba      	ldr	r2, [r7, #8]
 8025a4a:	4413      	add	r3, r2
 8025a4c:	683a      	ldr	r2, [r7, #0]
 8025a4e:	429a      	cmp	r2, r3
 8025a50:	d20d      	bcs.n	8025a6e <mpn_gcd+0x62>
 8025a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025a54:	009b      	lsls	r3, r3, #2
 8025a56:	683a      	ldr	r2, [r7, #0]
 8025a58:	4413      	add	r3, r2
 8025a5a:	68ba      	ldr	r2, [r7, #8]
 8025a5c:	429a      	cmp	r2, r3
 8025a5e:	d206      	bcs.n	8025a6e <mpn_gcd+0x62>
 8025a60:	4b84      	ldr	r3, [pc, #528]	@ (8025c74 <mpn_gcd+0x268>)
 8025a62:	4a81      	ldr	r2, [pc, #516]	@ (8025c68 <mpn_gcd+0x25c>)
 8025a64:	f640 21a1 	movw	r1, #2721	@ 0xaa1
 8025a68:	4880      	ldr	r0, [pc, #512]	@ (8025c6c <mpn_gcd+0x260>)
 8025a6a:	f00f fbe5 	bl	8035238 <__assert_func>
  assert (vp[vn-1] > 0);
 8025a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025a70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025a74:	3b01      	subs	r3, #1
 8025a76:	009b      	lsls	r3, r3, #2
 8025a78:	683a      	ldr	r2, [r7, #0]
 8025a7a:	4413      	add	r3, r2
 8025a7c:	681b      	ldr	r3, [r3, #0]
 8025a7e:	2b00      	cmp	r3, #0
 8025a80:	d106      	bne.n	8025a90 <mpn_gcd+0x84>
 8025a82:	4b7d      	ldr	r3, [pc, #500]	@ (8025c78 <mpn_gcd+0x26c>)
 8025a84:	4a78      	ldr	r2, [pc, #480]	@ (8025c68 <mpn_gcd+0x25c>)
 8025a86:	f640 21a2 	movw	r1, #2722	@ 0xaa2
 8025a8a:	4878      	ldr	r0, [pc, #480]	@ (8025c6c <mpn_gcd+0x260>)
 8025a8c:	f00f fbd4 	bl	8035238 <__assert_func>
  assert ((up[0] | vp[0]) & 1);
 8025a90:	68bb      	ldr	r3, [r7, #8]
 8025a92:	681a      	ldr	r2, [r3, #0]
 8025a94:	683b      	ldr	r3, [r7, #0]
 8025a96:	681b      	ldr	r3, [r3, #0]
 8025a98:	4313      	orrs	r3, r2
 8025a9a:	f003 0301 	and.w	r3, r3, #1
 8025a9e:	2b00      	cmp	r3, #0
 8025aa0:	d106      	bne.n	8025ab0 <mpn_gcd+0xa4>
 8025aa2:	4b76      	ldr	r3, [pc, #472]	@ (8025c7c <mpn_gcd+0x270>)
 8025aa4:	4a70      	ldr	r2, [pc, #448]	@ (8025c68 <mpn_gcd+0x25c>)
 8025aa6:	f640 21a3 	movw	r1, #2723	@ 0xaa3
 8025aaa:	4870      	ldr	r0, [pc, #448]	@ (8025c6c <mpn_gcd+0x260>)
 8025aac:	f00f fbc4 	bl	8035238 <__assert_func>

  if (un > vn)
 8025ab0:	687a      	ldr	r2, [r7, #4]
 8025ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025ab4:	429a      	cmp	r2, r3
 8025ab6:	dd07      	ble.n	8025ac8 <mpn_gcd+0xbc>
    mpn_div_qr (NULL, up, un, vp, vn);
 8025ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025aba:	9300      	str	r3, [sp, #0]
 8025abc:	683b      	ldr	r3, [r7, #0]
 8025abe:	687a      	ldr	r2, [r7, #4]
 8025ac0:	68b9      	ldr	r1, [r7, #8]
 8025ac2:	2000      	movs	r0, #0
 8025ac4:	f7fe fc54 	bl	8024370 <mpn_div_qr>

  un = mpn_normalized_size (up, vn);
 8025ac8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8025aca:	68b8      	ldr	r0, [r7, #8]
 8025acc:	f7fc fedc 	bl	8022888 <mpn_normalized_size>
 8025ad0:	6078      	str	r0, [r7, #4]
  if (un == 0)
 8025ad2:	687b      	ldr	r3, [r7, #4]
 8025ad4:	2b00      	cmp	r3, #0
 8025ad6:	d106      	bne.n	8025ae6 <mpn_gcd+0xda>
    {
      mpn_copyi (rp, vp, vn);
 8025ad8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8025ada:	6839      	ldr	r1, [r7, #0]
 8025adc:	68f8      	ldr	r0, [r7, #12]
 8025ade:	f7fc fe45 	bl	802276c <mpn_copyi>
      return vn;
 8025ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025ae4:	e0e9      	b.n	8025cba <mpn_gcd+0x2ae>
    }

  if (!(vp[0] & 1))
 8025ae6:	683b      	ldr	r3, [r7, #0]
 8025ae8:	681b      	ldr	r3, [r3, #0]
 8025aea:	f003 0301 	and.w	r3, r3, #1
 8025aee:	2b00      	cmp	r3, #0
 8025af0:	f040 80cf 	bne.w	8025c92 <mpn_gcd+0x286>
    MPN_PTR_SWAP (up, un, vp, vn);
 8025af4:	68bb      	ldr	r3, [r7, #8]
 8025af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8025af8:	683b      	ldr	r3, [r7, #0]
 8025afa:	60bb      	str	r3, [r7, #8]
 8025afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025afe:	603b      	str	r3, [r7, #0]
 8025b00:	687b      	ldr	r3, [r7, #4]
 8025b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8025b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025b06:	607b      	str	r3, [r7, #4]
 8025b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025b0a:	653b      	str	r3, [r7, #80]	@ 0x50

  while (un > 1 || vn > 1)
 8025b0c:	e0c1      	b.n	8025c92 <mpn_gcd+0x286>
    {
      int shift;
      assert (vp[0] & 1);
 8025b0e:	683b      	ldr	r3, [r7, #0]
 8025b10:	681b      	ldr	r3, [r3, #0]
 8025b12:	f003 0301 	and.w	r3, r3, #1
 8025b16:	2b00      	cmp	r3, #0
 8025b18:	d10c      	bne.n	8025b34 <mpn_gcd+0x128>
 8025b1a:	4b59      	ldr	r3, [pc, #356]	@ (8025c80 <mpn_gcd+0x274>)
 8025b1c:	4a52      	ldr	r2, [pc, #328]	@ (8025c68 <mpn_gcd+0x25c>)
 8025b1e:	f640 21b5 	movw	r1, #2741	@ 0xab5
 8025b22:	4852      	ldr	r0, [pc, #328]	@ (8025c6c <mpn_gcd+0x260>)
 8025b24:	f00f fb88 	bl	8035238 <__assert_func>

      while (up[0] == 0)
	{
	  up++;
 8025b28:	68bb      	ldr	r3, [r7, #8]
 8025b2a:	3304      	adds	r3, #4
 8025b2c:	60bb      	str	r3, [r7, #8]
	  un--;
 8025b2e:	687b      	ldr	r3, [r7, #4]
 8025b30:	3b01      	subs	r3, #1
 8025b32:	607b      	str	r3, [r7, #4]
      while (up[0] == 0)
 8025b34:	68bb      	ldr	r3, [r7, #8]
 8025b36:	681b      	ldr	r3, [r3, #0]
 8025b38:	2b00      	cmp	r3, #0
 8025b3a:	d0f5      	beq.n	8025b28 <mpn_gcd+0x11c>
	}
      gmp_ctz (shift, up[0]);
 8025b3c:	68bb      	ldr	r3, [r7, #8]
 8025b3e:	681b      	ldr	r3, [r3, #0]
 8025b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8025b42:	2300      	movs	r3, #0
 8025b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8025b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025b48:	425b      	negs	r3, r3
 8025b4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025b4c:	4013      	ands	r3, r2
 8025b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8025b50:	2300      	movs	r3, #0
 8025b52:	643b      	str	r3, [r7, #64]	@ 0x40
 8025b54:	2308      	movs	r3, #8
 8025b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025b5a:	2b1f      	cmp	r3, #31
 8025b5c:	dc13      	bgt.n	8025b86 <mpn_gcd+0x17a>
 8025b5e:	e007      	b.n	8025b70 <mpn_gcd+0x164>
 8025b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8025b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025b64:	fa02 f303 	lsl.w	r3, r2, r3
 8025b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8025b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025b6c:	3308      	adds	r3, #8
 8025b6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8025b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8025b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025b76:	d3f3      	bcc.n	8025b60 <mpn_gcd+0x154>
 8025b78:	e005      	b.n	8025b86 <mpn_gcd+0x17a>
 8025b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8025b7c:	005b      	lsls	r3, r3, #1
 8025b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8025b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025b82:	3301      	adds	r3, #1
 8025b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8025b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8025b88:	2b00      	cmp	r3, #0
 8025b8a:	daf6      	bge.n	8025b7a <mpn_gcd+0x16e>
 8025b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025b8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8025b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025b92:	f1c3 031f 	rsb	r3, r3, #31
 8025b96:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (shift > 0)
 8025b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025b9a:	2b00      	cmp	r3, #0
 8025b9c:	dd21      	ble.n	8025be2 <mpn_gcd+0x1d6>
	{
	  gmp_assert_nocarry (mpn_rshift(up, up, un, shift));
 8025b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025ba0:	687a      	ldr	r2, [r7, #4]
 8025ba2:	68b9      	ldr	r1, [r7, #8]
 8025ba4:	68b8      	ldr	r0, [r7, #8]
 8025ba6:	f7fd fad1 	bl	802314c <mpn_rshift>
 8025baa:	6278      	str	r0, [r7, #36]	@ 0x24
 8025bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025bae:	2b00      	cmp	r3, #0
 8025bb0:	d006      	beq.n	8025bc0 <mpn_gcd+0x1b4>
 8025bb2:	4b34      	ldr	r3, [pc, #208]	@ (8025c84 <mpn_gcd+0x278>)
 8025bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8025c68 <mpn_gcd+0x25c>)
 8025bb6:	f640 21bf 	movw	r1, #2751	@ 0xabf
 8025bba:	482c      	ldr	r0, [pc, #176]	@ (8025c6c <mpn_gcd+0x260>)
 8025bbc:	f00f fb3c 	bl	8035238 <__assert_func>
	  un -= (up[un-1] == 0);
 8025bc0:	687b      	ldr	r3, [r7, #4]
 8025bc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025bc6:	3b01      	subs	r3, #1
 8025bc8:	009b      	lsls	r3, r3, #2
 8025bca:	68ba      	ldr	r2, [r7, #8]
 8025bcc:	4413      	add	r3, r2
 8025bce:	681b      	ldr	r3, [r3, #0]
 8025bd0:	2b00      	cmp	r3, #0
 8025bd2:	bf0c      	ite	eq
 8025bd4:	2301      	moveq	r3, #1
 8025bd6:	2300      	movne	r3, #0
 8025bd8:	b2db      	uxtb	r3, r3
 8025bda:	461a      	mov	r2, r3
 8025bdc:	687b      	ldr	r3, [r7, #4]
 8025bde:	1a9b      	subs	r3, r3, r2
 8025be0:	607b      	str	r3, [r7, #4]
	}

      if (un < vn)
 8025be2:	687a      	ldr	r2, [r7, #4]
 8025be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025be6:	429a      	cmp	r2, r3
 8025be8:	da0c      	bge.n	8025c04 <mpn_gcd+0x1f8>
	MPN_PTR_SWAP (up, un, vp, vn);
 8025bea:	68bb      	ldr	r3, [r7, #8]
 8025bec:	61bb      	str	r3, [r7, #24]
 8025bee:	683b      	ldr	r3, [r7, #0]
 8025bf0:	60bb      	str	r3, [r7, #8]
 8025bf2:	69bb      	ldr	r3, [r7, #24]
 8025bf4:	603b      	str	r3, [r7, #0]
 8025bf6:	687b      	ldr	r3, [r7, #4]
 8025bf8:	617b      	str	r3, [r7, #20]
 8025bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025bfc:	607b      	str	r3, [r7, #4]
 8025bfe:	697b      	ldr	r3, [r7, #20]
 8025c00:	653b      	str	r3, [r7, #80]	@ 0x50
 8025c02:	e01c      	b.n	8025c3e <mpn_gcd+0x232>
      else if (un == vn)
 8025c04:	687a      	ldr	r2, [r7, #4]
 8025c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025c08:	429a      	cmp	r2, r3
 8025c0a:	d118      	bne.n	8025c3e <mpn_gcd+0x232>
	{
	  int c = mpn_cmp (up, vp, un);
 8025c0c:	687a      	ldr	r2, [r7, #4]
 8025c0e:	6839      	ldr	r1, [r7, #0]
 8025c10:	68b8      	ldr	r0, [r7, #8]
 8025c12:	f7fc fdea 	bl	80227ea <mpn_cmp>
 8025c16:	6238      	str	r0, [r7, #32]
	  if (c == 0)
 8025c18:	6a3b      	ldr	r3, [r7, #32]
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	d106      	bne.n	8025c2c <mpn_gcd+0x220>
	    {
	      mpn_copyi (rp, up, un);
 8025c1e:	687a      	ldr	r2, [r7, #4]
 8025c20:	68b9      	ldr	r1, [r7, #8]
 8025c22:	68f8      	ldr	r0, [r7, #12]
 8025c24:	f7fc fda2 	bl	802276c <mpn_copyi>
	      return un;
 8025c28:	687b      	ldr	r3, [r7, #4]
 8025c2a:	e046      	b.n	8025cba <mpn_gcd+0x2ae>
	    }
	  else if (c < 0)
 8025c2c:	6a3b      	ldr	r3, [r7, #32]
 8025c2e:	2b00      	cmp	r3, #0
 8025c30:	da05      	bge.n	8025c3e <mpn_gcd+0x232>
	    MP_PTR_SWAP (up, vp);
 8025c32:	68bb      	ldr	r3, [r7, #8]
 8025c34:	61fb      	str	r3, [r7, #28]
 8025c36:	683b      	ldr	r3, [r7, #0]
 8025c38:	60bb      	str	r3, [r7, #8]
 8025c3a:	69fb      	ldr	r3, [r7, #28]
 8025c3c:	603b      	str	r3, [r7, #0]
	}

      gmp_assert_nocarry (mpn_sub (up, up, un, vp, vn));
 8025c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025c40:	9300      	str	r3, [sp, #0]
 8025c42:	683b      	ldr	r3, [r7, #0]
 8025c44:	687a      	ldr	r2, [r7, #4]
 8025c46:	68b9      	ldr	r1, [r7, #8]
 8025c48:	68b8      	ldr	r0, [r7, #8]
 8025c4a:	f7fc ffa7 	bl	8022b9c <mpn_sub>
 8025c4e:	6138      	str	r0, [r7, #16]
 8025c50:	693b      	ldr	r3, [r7, #16]
 8025c52:	2b00      	cmp	r3, #0
 8025c54:	d018      	beq.n	8025c88 <mpn_gcd+0x27c>
 8025c56:	4b0b      	ldr	r3, [pc, #44]	@ (8025c84 <mpn_gcd+0x278>)
 8025c58:	4a03      	ldr	r2, [pc, #12]	@ (8025c68 <mpn_gcd+0x25c>)
 8025c5a:	f640 21d1 	movw	r1, #2769	@ 0xad1
 8025c5e:	4803      	ldr	r0, [pc, #12]	@ (8025c6c <mpn_gcd+0x260>)
 8025c60:	f00f faea 	bl	8035238 <__assert_func>
 8025c64:	08038334 	.word	0x08038334
 8025c68:	0803bdc8 	.word	0x0803bdc8
 8025c6c:	080382a0 	.word	0x080382a0
 8025c70:	08038574 	.word	0x08038574
 8025c74:	0803857c 	.word	0x0803857c
 8025c78:	080385a0 	.word	0x080385a0
 8025c7c:	080385b0 	.word	0x080385b0
 8025c80:	080385c4 	.word	0x080385c4
 8025c84:	080384c4 	.word	0x080384c4
      un = mpn_normalized_size (up, un);
 8025c88:	6879      	ldr	r1, [r7, #4]
 8025c8a:	68b8      	ldr	r0, [r7, #8]
 8025c8c:	f7fc fdfc 	bl	8022888 <mpn_normalized_size>
 8025c90:	6078      	str	r0, [r7, #4]
  while (un > 1 || vn > 1)
 8025c92:	687b      	ldr	r3, [r7, #4]
 8025c94:	2b01      	cmp	r3, #1
 8025c96:	f73f af3a 	bgt.w	8025b0e <mpn_gcd+0x102>
 8025c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025c9c:	2b01      	cmp	r3, #1
 8025c9e:	f73f af36 	bgt.w	8025b0e <mpn_gcd+0x102>
    }
  rp[0] = mpn_gcd_11 (up[0], vp[0]);
 8025ca2:	68bb      	ldr	r3, [r7, #8]
 8025ca4:	681a      	ldr	r2, [r3, #0]
 8025ca6:	683b      	ldr	r3, [r7, #0]
 8025ca8:	681b      	ldr	r3, [r3, #0]
 8025caa:	4619      	mov	r1, r3
 8025cac:	4610      	mov	r0, r2
 8025cae:	f7ff fe15 	bl	80258dc <mpn_gcd_11>
 8025cb2:	4602      	mov	r2, r0
 8025cb4:	68fb      	ldr	r3, [r7, #12]
 8025cb6:	601a      	str	r2, [r3, #0]
  return 1;
 8025cb8:	2301      	movs	r3, #1
}
 8025cba:	4618      	mov	r0, r3
 8025cbc:	3748      	adds	r7, #72	@ 0x48
 8025cbe:	46bd      	mov	sp, r7
 8025cc0:	bd80      	pop	{r7, pc}
 8025cc2:	bf00      	nop

08025cc4 <mpz_gcd_ui>:

unsigned long
mpz_gcd_ui (mpz_t g, const mpz_t u, unsigned long v)
{
 8025cc4:	b580      	push	{r7, lr}
 8025cc6:	b088      	sub	sp, #32
 8025cc8:	af00      	add	r7, sp, #0
 8025cca:	60f8      	str	r0, [r7, #12]
 8025ccc:	60b9      	str	r1, [r7, #8]
 8025cce:	607a      	str	r2, [r7, #4]
  mpz_t t;
  mpz_init_set_ui(t, v);
 8025cd0:	f107 0314 	add.w	r3, r7, #20
 8025cd4:	6879      	ldr	r1, [r7, #4]
 8025cd6:	4618      	mov	r0, r3
 8025cd8:	f7fe fced 	bl	80246b6 <mpz_init_set_ui>
  mpz_gcd (t, u, t);
 8025cdc:	f107 0214 	add.w	r2, r7, #20
 8025ce0:	f107 0314 	add.w	r3, r7, #20
 8025ce4:	68b9      	ldr	r1, [r7, #8]
 8025ce6:	4618      	mov	r0, r3
 8025ce8:	f000 f842 	bl	8025d70 <mpz_gcd>
  if (v > 0)
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	2b00      	cmp	r3, #0
 8025cf0:	d005      	beq.n	8025cfe <mpz_gcd_ui+0x3a>
    v = mpz_get_ui (t);
 8025cf2:	f107 0314 	add.w	r3, r7, #20
 8025cf6:	4618      	mov	r0, r3
 8025cf8:	f7fe fd3e 	bl	8024778 <mpz_get_ui>
 8025cfc:	6078      	str	r0, [r7, #4]

  if (g)
 8025cfe:	68fb      	ldr	r3, [r7, #12]
 8025d00:	2b00      	cmp	r3, #0
 8025d02:	d005      	beq.n	8025d10 <mpz_gcd_ui+0x4c>
    mpz_swap (t, g);
 8025d04:	f107 0314 	add.w	r3, r7, #20
 8025d08:	68f9      	ldr	r1, [r7, #12]
 8025d0a:	4618      	mov	r0, r3
 8025d0c:	f7ff f809 	bl	8024d22 <mpz_swap>

  mpz_clear (t);
 8025d10:	f107 0314 	add.w	r3, r7, #20
 8025d14:	4618      	mov	r0, r3
 8025d16:	f7fe fc04 	bl	8024522 <mpz_clear>

  return v;
 8025d1a:	687b      	ldr	r3, [r7, #4]
}
 8025d1c:	4618      	mov	r0, r3
 8025d1e:	3720      	adds	r7, #32
 8025d20:	46bd      	mov	sp, r7
 8025d22:	bd80      	pop	{r7, pc}

08025d24 <mpz_make_odd>:

static mp_bitcnt_t
mpz_make_odd (mpz_t r)
{
 8025d24:	b580      	push	{r7, lr}
 8025d26:	b084      	sub	sp, #16
 8025d28:	af00      	add	r7, sp, #0
 8025d2a:	6078      	str	r0, [r7, #4]
  mp_bitcnt_t shift;

  assert (r->_mp_size > 0);
 8025d2c:	687b      	ldr	r3, [r7, #4]
 8025d2e:	685b      	ldr	r3, [r3, #4]
 8025d30:	2b00      	cmp	r3, #0
 8025d32:	dc06      	bgt.n	8025d42 <mpz_make_odd+0x1e>
 8025d34:	4b0b      	ldr	r3, [pc, #44]	@ (8025d64 <mpz_make_odd+0x40>)
 8025d36:	4a0c      	ldr	r2, [pc, #48]	@ (8025d68 <mpz_make_odd+0x44>)
 8025d38:	f640 21ee 	movw	r1, #2798	@ 0xaee
 8025d3c:	480b      	ldr	r0, [pc, #44]	@ (8025d6c <mpz_make_odd+0x48>)
 8025d3e:	f00f fa7b 	bl	8035238 <__assert_func>
  /* Count trailing zeros, equivalent to mpn_scan1, because we know that there is a 1 */
  shift = mpn_scan1 (r->_mp_d, 0);
 8025d42:	687b      	ldr	r3, [r7, #4]
 8025d44:	689b      	ldr	r3, [r3, #8]
 8025d46:	2100      	movs	r1, #0
 8025d48:	4618      	mov	r0, r3
 8025d4a:	f7fd fae1 	bl	8023310 <mpn_scan1>
 8025d4e:	60f8      	str	r0, [r7, #12]
  mpz_tdiv_q_2exp (r, r, shift);
 8025d50:	68fa      	ldr	r2, [r7, #12]
 8025d52:	6879      	ldr	r1, [r7, #4]
 8025d54:	6878      	ldr	r0, [r7, #4]
 8025d56:	f7ff fcef 	bl	8025738 <mpz_tdiv_q_2exp>

  return shift;
 8025d5a:	68fb      	ldr	r3, [r7, #12]
}
 8025d5c:	4618      	mov	r0, r3
 8025d5e:	3710      	adds	r7, #16
 8025d60:	46bd      	mov	sp, r7
 8025d62:	bd80      	pop	{r7, pc}
 8025d64:	080385d0 	.word	0x080385d0
 8025d68:	0803bdd0 	.word	0x0803bdd0
 8025d6c:	080382a0 	.word	0x080382a0

08025d70 <mpz_gcd>:

void
mpz_gcd (mpz_t g, const mpz_t u, const mpz_t v)
{
 8025d70:	b590      	push	{r4, r7, lr}
 8025d72:	b091      	sub	sp, #68	@ 0x44
 8025d74:	af02      	add	r7, sp, #8
 8025d76:	60f8      	str	r0, [r7, #12]
 8025d78:	60b9      	str	r1, [r7, #8]
 8025d7a:	607a      	str	r2, [r7, #4]
  mpz_t tu, tv;
  mp_bitcnt_t uz, vz, gz;

  if (u->_mp_size == 0)
 8025d7c:	68bb      	ldr	r3, [r7, #8]
 8025d7e:	685b      	ldr	r3, [r3, #4]
 8025d80:	2b00      	cmp	r3, #0
 8025d82:	d104      	bne.n	8025d8e <mpz_gcd+0x1e>
    {
      mpz_abs (g, v);
 8025d84:	6879      	ldr	r1, [r7, #4]
 8025d86:	68f8      	ldr	r0, [r7, #12]
 8025d88:	f7fe ffa4 	bl	8024cd4 <mpz_abs>
      return;
 8025d8c:	e058      	b.n	8025e40 <mpz_gcd+0xd0>
    }
  if (v->_mp_size == 0)
 8025d8e:	687b      	ldr	r3, [r7, #4]
 8025d90:	685b      	ldr	r3, [r3, #4]
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	d104      	bne.n	8025da0 <mpz_gcd+0x30>
    {
      mpz_abs (g, u);
 8025d96:	68b9      	ldr	r1, [r7, #8]
 8025d98:	68f8      	ldr	r0, [r7, #12]
 8025d9a:	f7fe ff9b 	bl	8024cd4 <mpz_abs>
      return;
 8025d9e:	e04f      	b.n	8025e40 <mpz_gcd+0xd0>
    }

  mpz_init (tu);
 8025da0:	f107 0320 	add.w	r3, r7, #32
 8025da4:	4618      	mov	r0, r3
 8025da6:	f7fe fb83 	bl	80244b0 <mpz_init>
  mpz_init (tv);
 8025daa:	f107 0314 	add.w	r3, r7, #20
 8025dae:	4618      	mov	r0, r3
 8025db0:	f7fe fb7e 	bl	80244b0 <mpz_init>

  mpz_abs (tu, u);
 8025db4:	f107 0320 	add.w	r3, r7, #32
 8025db8:	68b9      	ldr	r1, [r7, #8]
 8025dba:	4618      	mov	r0, r3
 8025dbc:	f7fe ff8a 	bl	8024cd4 <mpz_abs>
  uz = mpz_make_odd (tu);
 8025dc0:	f107 0320 	add.w	r3, r7, #32
 8025dc4:	4618      	mov	r0, r3
 8025dc6:	f7ff ffad 	bl	8025d24 <mpz_make_odd>
 8025dca:	6378      	str	r0, [r7, #52]	@ 0x34
  mpz_abs (tv, v);
 8025dcc:	f107 0314 	add.w	r3, r7, #20
 8025dd0:	6879      	ldr	r1, [r7, #4]
 8025dd2:	4618      	mov	r0, r3
 8025dd4:	f7fe ff7e 	bl	8024cd4 <mpz_abs>
  vz = mpz_make_odd (tv);
 8025dd8:	f107 0314 	add.w	r3, r7, #20
 8025ddc:	4618      	mov	r0, r3
 8025dde:	f7ff ffa1 	bl	8025d24 <mpz_make_odd>
 8025de2:	6338      	str	r0, [r7, #48]	@ 0x30
  gz = GMP_MIN (uz, vz);
 8025de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025de8:	4293      	cmp	r3, r2
 8025dea:	bf28      	it	cs
 8025dec:	4613      	movcs	r3, r2
 8025dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tu->_mp_size < tv->_mp_size)
 8025df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025df2:	69bb      	ldr	r3, [r7, #24]
 8025df4:	429a      	cmp	r2, r3
 8025df6:	da07      	bge.n	8025e08 <mpz_gcd+0x98>
    mpz_swap (tu, tv);
 8025df8:	f107 0214 	add.w	r2, r7, #20
 8025dfc:	f107 0320 	add.w	r3, r7, #32
 8025e00:	4611      	mov	r1, r2
 8025e02:	4618      	mov	r0, r3
 8025e04:	f7fe ff8d 	bl	8024d22 <mpz_swap>

  tu->_mp_size = mpn_gcd (tu->_mp_d, tu->_mp_d, tu->_mp_size, tv->_mp_d, tv->_mp_size);
 8025e08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8025e0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8025e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025e0e:	69fc      	ldr	r4, [r7, #28]
 8025e10:	69bb      	ldr	r3, [r7, #24]
 8025e12:	9300      	str	r3, [sp, #0]
 8025e14:	4623      	mov	r3, r4
 8025e16:	f7ff fdf9 	bl	8025a0c <mpn_gcd>
 8025e1a:	4603      	mov	r3, r0
 8025e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  mpz_mul_2exp (g, tu, gz);
 8025e1e:	f107 0320 	add.w	r3, r7, #32
 8025e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025e24:	4619      	mov	r1, r3
 8025e26:	68f8      	ldr	r0, [r7, #12]
 8025e28:	f7ff f9b8 	bl	802519c <mpz_mul_2exp>

  mpz_clear (tu);
 8025e2c:	f107 0320 	add.w	r3, r7, #32
 8025e30:	4618      	mov	r0, r3
 8025e32:	f7fe fb76 	bl	8024522 <mpz_clear>
  mpz_clear (tv);
 8025e36:	f107 0314 	add.w	r3, r7, #20
 8025e3a:	4618      	mov	r0, r3
 8025e3c:	f7fe fb71 	bl	8024522 <mpz_clear>
}
 8025e40:	373c      	adds	r7, #60	@ 0x3c
 8025e42:	46bd      	mov	sp, r7
 8025e44:	bd90      	pop	{r4, r7, pc}
	...

08025e48 <mpz_gcdext>:

void
mpz_gcdext (mpz_t g, mpz_t s, mpz_t t, const mpz_t u, const mpz_t v)
{
 8025e48:	b580      	push	{r7, lr}
 8025e4a:	b0a2      	sub	sp, #136	@ 0x88
 8025e4c:	af00      	add	r7, sp, #0
 8025e4e:	60f8      	str	r0, [r7, #12]
 8025e50:	60b9      	str	r1, [r7, #8]
 8025e52:	607a      	str	r2, [r7, #4]
 8025e54:	603b      	str	r3, [r7, #0]
  mpz_t tu, tv, s0, s1, t0, t1;
  mp_bitcnt_t uz, vz, gz;
  mp_bitcnt_t power;
  int cmp;

  if (u->_mp_size == 0)
 8025e56:	683b      	ldr	r3, [r7, #0]
 8025e58:	685b      	ldr	r3, [r3, #4]
 8025e5a:	2b00      	cmp	r3, #0
 8025e5c:	d118      	bne.n	8025e90 <mpz_gcdext+0x48>
    {
      /* g = 0 u + sgn(v) v */
      signed long sign = mpz_sgn (v);
 8025e5e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8025e62:	f7fe fe8d 	bl	8024b80 <mpz_sgn>
 8025e66:	65b8      	str	r0, [r7, #88]	@ 0x58
      mpz_abs (g, v);
 8025e68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8025e6c:	68f8      	ldr	r0, [r7, #12]
 8025e6e:	f7fe ff31 	bl	8024cd4 <mpz_abs>
      if (s)
 8025e72:	68bb      	ldr	r3, [r7, #8]
 8025e74:	2b00      	cmp	r3, #0
 8025e76:	d002      	beq.n	8025e7e <mpz_gcdext+0x36>
	s->_mp_size = 0;
 8025e78:	68bb      	ldr	r3, [r7, #8]
 8025e7a:	2200      	movs	r2, #0
 8025e7c:	605a      	str	r2, [r3, #4]
      if (t)
 8025e7e:	687b      	ldr	r3, [r7, #4]
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	f000 8266 	beq.w	8026352 <mpz_gcdext+0x50a>
	mpz_set_si (t, sign);
 8025e86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8025e88:	6878      	ldr	r0, [r7, #4]
 8025e8a:	f7fe fb92 	bl	80245b2 <mpz_set_si>
      return;
 8025e8e:	e260      	b.n	8026352 <mpz_gcdext+0x50a>
    }

  if (v->_mp_size == 0)
 8025e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8025e94:	685b      	ldr	r3, [r3, #4]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	d116      	bne.n	8025ec8 <mpz_gcdext+0x80>
    {
      /* g = sgn(u) u + 0 v */
      signed long sign = mpz_sgn (u);
 8025e9a:	6838      	ldr	r0, [r7, #0]
 8025e9c:	f7fe fe70 	bl	8024b80 <mpz_sgn>
 8025ea0:	65f8      	str	r0, [r7, #92]	@ 0x5c
      mpz_abs (g, u);
 8025ea2:	6839      	ldr	r1, [r7, #0]
 8025ea4:	68f8      	ldr	r0, [r7, #12]
 8025ea6:	f7fe ff15 	bl	8024cd4 <mpz_abs>
      if (s)
 8025eaa:	68bb      	ldr	r3, [r7, #8]
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	d003      	beq.n	8025eb8 <mpz_gcdext+0x70>
	mpz_set_si (s, sign);
 8025eb0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8025eb2:	68b8      	ldr	r0, [r7, #8]
 8025eb4:	f7fe fb7d 	bl	80245b2 <mpz_set_si>
      if (t)
 8025eb8:	687b      	ldr	r3, [r7, #4]
 8025eba:	2b00      	cmp	r3, #0
 8025ebc:	f000 824b 	beq.w	8026356 <mpz_gcdext+0x50e>
	t->_mp_size = 0;
 8025ec0:	687b      	ldr	r3, [r7, #4]
 8025ec2:	2200      	movs	r2, #0
 8025ec4:	605a      	str	r2, [r3, #4]
      return;
 8025ec6:	e246      	b.n	8026356 <mpz_gcdext+0x50e>
    }

  mpz_init (tu);
 8025ec8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8025ecc:	4618      	mov	r0, r3
 8025ece:	f7fe faef 	bl	80244b0 <mpz_init>
  mpz_init (tv);
 8025ed2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8025ed6:	4618      	mov	r0, r3
 8025ed8:	f7fe faea 	bl	80244b0 <mpz_init>
  mpz_init (s0);
 8025edc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8025ee0:	4618      	mov	r0, r3
 8025ee2:	f7fe fae5 	bl	80244b0 <mpz_init>
  mpz_init (s1);
 8025ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8025eea:	4618      	mov	r0, r3
 8025eec:	f7fe fae0 	bl	80244b0 <mpz_init>
  mpz_init (t0);
 8025ef0:	f107 031c 	add.w	r3, r7, #28
 8025ef4:	4618      	mov	r0, r3
 8025ef6:	f7fe fadb 	bl	80244b0 <mpz_init>
  mpz_init (t1);
 8025efa:	f107 0310 	add.w	r3, r7, #16
 8025efe:	4618      	mov	r0, r3
 8025f00:	f7fe fad6 	bl	80244b0 <mpz_init>

  mpz_abs (tu, u);
 8025f04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8025f08:	6839      	ldr	r1, [r7, #0]
 8025f0a:	4618      	mov	r0, r3
 8025f0c:	f7fe fee2 	bl	8024cd4 <mpz_abs>
  uz = mpz_make_odd (tu);
 8025f10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8025f14:	4618      	mov	r0, r3
 8025f16:	f7ff ff05 	bl	8025d24 <mpz_make_odd>
 8025f1a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  mpz_abs (tv, v);
 8025f1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8025f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8025f26:	4618      	mov	r0, r3
 8025f28:	f7fe fed4 	bl	8024cd4 <mpz_abs>
  vz = mpz_make_odd (tv);
 8025f2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8025f30:	4618      	mov	r0, r3
 8025f32:	f7ff fef7 	bl	8025d24 <mpz_make_odd>
 8025f36:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  gz = GMP_MIN (uz, vz);
 8025f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8025f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8025f42:	4293      	cmp	r3, r2
 8025f44:	bf28      	it	cs
 8025f46:	4613      	movcs	r3, r2
 8025f48:	677b      	str	r3, [r7, #116]	@ 0x74

  uz -= gz;
 8025f4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8025f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8025f50:	1ad3      	subs	r3, r2, r3
 8025f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  vz -= gz;
 8025f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8025f5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8025f5c:	1ad3      	subs	r3, r2, r3
 8025f5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  /* Cofactors corresponding to odd gcd. gz handled later. */
  if (tu->_mp_size < tv->_mp_size)
 8025f62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8025f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8025f66:	429a      	cmp	r2, r3
 8025f68:	da1f      	bge.n	8025faa <mpz_gcdext+0x162>
    {
      mpz_swap (tu, tv);
 8025f6a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8025f6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8025f72:	4611      	mov	r1, r2
 8025f74:	4618      	mov	r0, r3
 8025f76:	f7fe fed4 	bl	8024d22 <mpz_swap>
      MPZ_SRCPTR_SWAP (u, v);
 8025f7a:	683b      	ldr	r3, [r7, #0]
 8025f7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8025f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8025f82:	603b      	str	r3, [r7, #0]
 8025f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8025f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      MPZ_PTR_SWAP (s, t);
 8025f8a:	68bb      	ldr	r3, [r7, #8]
 8025f8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8025f8e:	687b      	ldr	r3, [r7, #4]
 8025f90:	60bb      	str	r3, [r7, #8]
 8025f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025f94:	607b      	str	r3, [r7, #4]
      MP_BITCNT_T_SWAP (uz, vz);
 8025f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8025f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8025f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8025fa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8025fa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   *
   * t0 = 2^uz, t1 = 2^uz q
   * s0 = 0,    s1 = 2^vz
   */

  mpz_tdiv_qr (t1, tu, tu, tv);
 8025faa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8025fae:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8025fb2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8025fb6:	f107 0010 	add.w	r0, r7, #16
 8025fba:	f7ff fac4 	bl	8025546 <mpz_tdiv_qr>
  mpz_mul_2exp (t1, t1, uz);
 8025fbe:	f107 0110 	add.w	r1, r7, #16
 8025fc2:	f107 0310 	add.w	r3, r7, #16
 8025fc6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8025fca:	4618      	mov	r0, r3
 8025fcc:	f7ff f8e6 	bl	802519c <mpz_mul_2exp>

  mpz_setbit (s1, vz);
 8025fd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8025fd4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8025fd8:	4618      	mov	r0, r3
 8025fda:	f001 f9fd 	bl	80273d8 <mpz_setbit>
  power = uz + vz;
 8025fde:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8025fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025fe6:	4413      	add	r3, r2
 8025fe8:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (tu->_mp_size > 0)
 8025fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	f340 808b 	ble.w	8026108 <mpz_gcdext+0x2c0>
    {
      mp_bitcnt_t shift;
      shift = mpz_make_odd (tu);
 8025ff2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8025ff6:	4618      	mov	r0, r3
 8025ff8:	f7ff fe94 	bl	8025d24 <mpz_make_odd>
 8025ffc:	67b8      	str	r0, [r7, #120]	@ 0x78
      mpz_setbit (t0, uz + shift);
 8025ffe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026002:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026004:	441a      	add	r2, r3
 8026006:	f107 031c 	add.w	r3, r7, #28
 802600a:	4611      	mov	r1, r2
 802600c:	4618      	mov	r0, r3
 802600e:	f001 f9e3 	bl	80273d8 <mpz_setbit>
      power += shift;
 8026012:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8026014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026016:	4413      	add	r3, r2
 8026018:	67fb      	str	r3, [r7, #124]	@ 0x7c

      for (;;)
	{
	  int c;
	  c = mpz_cmp (tu, tv);
 802601a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802601e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8026022:	4611      	mov	r1, r2
 8026024:	4618      	mov	r0, r3
 8026026:	f7fe fdd9 	bl	8024bdc <mpz_cmp>
 802602a:	6678      	str	r0, [r7, #100]	@ 0x64
	  if (c == 0)
 802602c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802602e:	2b00      	cmp	r3, #0
 8026030:	d072      	beq.n	8026118 <mpz_gcdext+0x2d0>
	    break;

	  if (c < 0)
 8026032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026034:	2b00      	cmp	r3, #0
 8026036:	da31      	bge.n	802609c <mpz_gcdext+0x254>
	      /* tv = tv' + tu
	       *
	       * u = t0 tu + t1 (tv' + tu) = (t0 + t1) tu + t1 tv'
	       * v = s0 tu + s1 (tv' + tu) = (s0 + s1) tu + s1 tv' */

	      mpz_sub (tv, tv, tu);
 8026038:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 802603c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8026040:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8026044:	4618      	mov	r0, r3
 8026046:	f7fe ffcd 	bl	8024fe4 <mpz_sub>
	      mpz_add (t0, t0, t1);
 802604a:	f107 0210 	add.w	r2, r7, #16
 802604e:	f107 011c 	add.w	r1, r7, #28
 8026052:	f107 031c 	add.w	r3, r7, #28
 8026056:	4618      	mov	r0, r3
 8026058:	f7fe ff9c 	bl	8024f94 <mpz_add>
	      mpz_add (s0, s0, s1);
 802605c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8026060:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8026064:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8026068:	4618      	mov	r0, r3
 802606a:	f7fe ff93 	bl	8024f94 <mpz_add>

	      shift = mpz_make_odd (tv);
 802606e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8026072:	4618      	mov	r0, r3
 8026074:	f7ff fe56 	bl	8025d24 <mpz_make_odd>
 8026078:	67b8      	str	r0, [r7, #120]	@ 0x78
	      mpz_mul_2exp (t1, t1, shift);
 802607a:	f107 0110 	add.w	r1, r7, #16
 802607e:	f107 0310 	add.w	r3, r7, #16
 8026082:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8026084:	4618      	mov	r0, r3
 8026086:	f7ff f889 	bl	802519c <mpz_mul_2exp>
	      mpz_mul_2exp (s1, s1, shift);
 802608a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 802608e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026092:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8026094:	4618      	mov	r0, r3
 8026096:	f7ff f881 	bl	802519c <mpz_mul_2exp>
 802609a:	e030      	b.n	80260fe <mpz_gcdext+0x2b6>
	    }
	  else
	    {
	      mpz_sub (tu, tu, tv);
 802609c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80260a0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80260a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80260a8:	4618      	mov	r0, r3
 80260aa:	f7fe ff9b 	bl	8024fe4 <mpz_sub>
	      mpz_add (t1, t0, t1);
 80260ae:	f107 0210 	add.w	r2, r7, #16
 80260b2:	f107 011c 	add.w	r1, r7, #28
 80260b6:	f107 0310 	add.w	r3, r7, #16
 80260ba:	4618      	mov	r0, r3
 80260bc:	f7fe ff6a 	bl	8024f94 <mpz_add>
	      mpz_add (s1, s0, s1);
 80260c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80260c4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80260c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80260cc:	4618      	mov	r0, r3
 80260ce:	f7fe ff61 	bl	8024f94 <mpz_add>

	      shift = mpz_make_odd (tu);
 80260d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80260d6:	4618      	mov	r0, r3
 80260d8:	f7ff fe24 	bl	8025d24 <mpz_make_odd>
 80260dc:	67b8      	str	r0, [r7, #120]	@ 0x78
	      mpz_mul_2exp (t0, t0, shift);
 80260de:	f107 011c 	add.w	r1, r7, #28
 80260e2:	f107 031c 	add.w	r3, r7, #28
 80260e6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80260e8:	4618      	mov	r0, r3
 80260ea:	f7ff f857 	bl	802519c <mpz_mul_2exp>
	      mpz_mul_2exp (s0, s0, shift);
 80260ee:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80260f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80260f6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80260f8:	4618      	mov	r0, r3
 80260fa:	f7ff f84f 	bl	802519c <mpz_mul_2exp>
	    }
	  power += shift;
 80260fe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8026100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026102:	4413      	add	r3, r2
 8026104:	67fb      	str	r3, [r7, #124]	@ 0x7c
	{
 8026106:	e788      	b.n	802601a <mpz_gcdext+0x1d2>
	}
    }
  else
    mpz_setbit (t0, uz);
 8026108:	f107 031c 	add.w	r3, r7, #28
 802610c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8026110:	4618      	mov	r0, r3
 8026112:	f001 f961 	bl	80273d8 <mpz_setbit>
 8026116:	e000      	b.n	802611a <mpz_gcdext+0x2d2>
	    break;
 8026118:	bf00      	nop

  /* Now tv = odd part of gcd, and -s0 and t0 are corresponding
     cofactors. */

  mpz_mul_2exp (tv, tv, gz);
 802611a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 802611e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8026122:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026124:	4618      	mov	r0, r3
 8026126:	f7ff f839 	bl	802519c <mpz_mul_2exp>
  mpz_neg (s0, s0);
 802612a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 802612e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8026132:	4611      	mov	r1, r2
 8026134:	4618      	mov	r0, r3
 8026136:	f7fe fde2 	bl	8024cfe <mpz_neg>

  /* 2^p g = s0 u + t0 v. Eliminate one factor of two at a time. To
     adjust cofactors, we need u / g and v / g */

  mpz_divexact (s1, v, tv);
 802613a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802613e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026142:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8026146:	4618      	mov	r0, r3
 8026148:	f7ff fb06 	bl	8025758 <mpz_divexact>
  mpz_abs (s1, s1);
 802614c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8026150:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026154:	4611      	mov	r1, r2
 8026156:	4618      	mov	r0, r3
 8026158:	f7fe fdbc 	bl	8024cd4 <mpz_abs>
  mpz_divexact (t1, u, tv);
 802615c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8026160:	f107 0310 	add.w	r3, r7, #16
 8026164:	6839      	ldr	r1, [r7, #0]
 8026166:	4618      	mov	r0, r3
 8026168:	f7ff faf6 	bl	8025758 <mpz_divexact>
  mpz_abs (t1, t1);
 802616c:	f107 0210 	add.w	r2, r7, #16
 8026170:	f107 0310 	add.w	r3, r7, #16
 8026174:	4611      	mov	r1, r2
 8026176:	4618      	mov	r0, r3
 8026178:	f7fe fdac 	bl	8024cd4 <mpz_abs>

  while (power-- > 0)
 802617c:	e058      	b.n	8026230 <mpz_gcdext+0x3e8>
    {
      /* s0 u + t0 v = (s0 - v/g) u - (t0 + u/g) v */
      if (mpz_odd_p (s0) || mpz_odd_p (t0))
 802617e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026180:	2b00      	cmp	r3, #0
 8026182:	bf14      	ite	ne
 8026184:	2301      	movne	r3, #1
 8026186:	2300      	moveq	r3, #0
 8026188:	b2db      	uxtb	r3, r3
 802618a:	461a      	mov	r2, r3
 802618c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802618e:	681b      	ldr	r3, [r3, #0]
 8026190:	4013      	ands	r3, r2
 8026192:	2b00      	cmp	r3, #0
 8026194:	d10b      	bne.n	80261ae <mpz_gcdext+0x366>
 8026196:	6a3b      	ldr	r3, [r7, #32]
 8026198:	2b00      	cmp	r3, #0
 802619a:	bf14      	ite	ne
 802619c:	2301      	movne	r3, #1
 802619e:	2300      	moveq	r3, #0
 80261a0:	b2db      	uxtb	r3, r3
 80261a2:	461a      	mov	r2, r3
 80261a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80261a6:	681b      	ldr	r3, [r3, #0]
 80261a8:	4013      	ands	r3, r2
 80261aa:	2b00      	cmp	r3, #0
 80261ac:	d011      	beq.n	80261d2 <mpz_gcdext+0x38a>
	{
	  mpz_sub (s0, s0, s1);
 80261ae:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80261b2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80261b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80261ba:	4618      	mov	r0, r3
 80261bc:	f7fe ff12 	bl	8024fe4 <mpz_sub>
	  mpz_add (t0, t0, t1);
 80261c0:	f107 0210 	add.w	r2, r7, #16
 80261c4:	f107 011c 	add.w	r1, r7, #28
 80261c8:	f107 031c 	add.w	r3, r7, #28
 80261cc:	4618      	mov	r0, r3
 80261ce:	f7fe fee1 	bl	8024f94 <mpz_add>
	}
      assert (mpz_even_p (t0) && mpz_even_p (s0));
 80261d2:	6a3b      	ldr	r3, [r7, #32]
 80261d4:	2b00      	cmp	r3, #0
 80261d6:	bf14      	ite	ne
 80261d8:	2301      	movne	r3, #1
 80261da:	2300      	moveq	r3, #0
 80261dc:	b2db      	uxtb	r3, r3
 80261de:	461a      	mov	r2, r3
 80261e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80261e2:	681b      	ldr	r3, [r3, #0]
 80261e4:	4013      	ands	r3, r2
 80261e6:	2b00      	cmp	r3, #0
 80261e8:	d10b      	bne.n	8026202 <mpz_gcdext+0x3ba>
 80261ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80261ec:	2b00      	cmp	r3, #0
 80261ee:	bf14      	ite	ne
 80261f0:	2301      	movne	r3, #1
 80261f2:	2300      	moveq	r3, #0
 80261f4:	b2db      	uxtb	r3, r3
 80261f6:	461a      	mov	r2, r3
 80261f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80261fa:	681b      	ldr	r3, [r3, #0]
 80261fc:	4013      	ands	r3, r2
 80261fe:	2b00      	cmp	r3, #0
 8026200:	d006      	beq.n	8026210 <mpz_gcdext+0x3c8>
 8026202:	4b57      	ldr	r3, [pc, #348]	@ (8026360 <mpz_gcdext+0x518>)
 8026204:	4a57      	ldr	r2, [pc, #348]	@ (8026364 <mpz_gcdext+0x51c>)
 8026206:	f640 31b3 	movw	r1, #2995	@ 0xbb3
 802620a:	4857      	ldr	r0, [pc, #348]	@ (8026368 <mpz_gcdext+0x520>)
 802620c:	f00f f814 	bl	8035238 <__assert_func>
      mpz_tdiv_q_2exp (s0, s0, 1);
 8026210:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8026214:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8026218:	2201      	movs	r2, #1
 802621a:	4618      	mov	r0, r3
 802621c:	f7ff fa8c 	bl	8025738 <mpz_tdiv_q_2exp>
      mpz_tdiv_q_2exp (t0, t0, 1);
 8026220:	f107 011c 	add.w	r1, r7, #28
 8026224:	f107 031c 	add.w	r3, r7, #28
 8026228:	2201      	movs	r2, #1
 802622a:	4618      	mov	r0, r3
 802622c:	f7ff fa84 	bl	8025738 <mpz_tdiv_q_2exp>
  while (power-- > 0)
 8026230:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8026232:	1e5a      	subs	r2, r3, #1
 8026234:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8026236:	2b00      	cmp	r3, #0
 8026238:	d1a1      	bne.n	802617e <mpz_gcdext+0x336>

     with some documented exceptions). Always choose the smallest s,
     if there are two choices for s with same absolute value, choose
     the one with smallest corresponding t (this asymmetric condition
     is needed to prefer s = 0, |t| = 1 when g = |a| = |b|). */
  mpz_add (s1, s0, s1);
 802623a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 802623e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8026242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026246:	4618      	mov	r0, r3
 8026248:	f7fe fea4 	bl	8024f94 <mpz_add>
  mpz_sub (t1, t0, t1);
 802624c:	f107 0210 	add.w	r2, r7, #16
 8026250:	f107 011c 	add.w	r1, r7, #28
 8026254:	f107 0310 	add.w	r3, r7, #16
 8026258:	4618      	mov	r0, r3
 802625a:	f7fe fec3 	bl	8024fe4 <mpz_sub>
  cmp = mpz_cmpabs (s0, s1);
 802625e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8026262:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8026266:	4611      	mov	r1, r2
 8026268:	4618      	mov	r0, r3
 802626a:	f7fe fd18 	bl	8024c9e <mpz_cmpabs>
 802626e:	6638      	str	r0, [r7, #96]	@ 0x60
  if (cmp > 0 || (cmp == 0 && mpz_cmpabs (t0, t1) > 0))
 8026270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026272:	2b00      	cmp	r3, #0
 8026274:	dc0d      	bgt.n	8026292 <mpz_gcdext+0x44a>
 8026276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026278:	2b00      	cmp	r3, #0
 802627a:	d11a      	bne.n	80262b2 <mpz_gcdext+0x46a>
 802627c:	f107 0210 	add.w	r2, r7, #16
 8026280:	f107 031c 	add.w	r3, r7, #28
 8026284:	4611      	mov	r1, r2
 8026286:	4618      	mov	r0, r3
 8026288:	f7fe fd09 	bl	8024c9e <mpz_cmpabs>
 802628c:	4603      	mov	r3, r0
 802628e:	2b00      	cmp	r3, #0
 8026290:	dd0f      	ble.n	80262b2 <mpz_gcdext+0x46a>
    {
      mpz_swap (s0, s1);
 8026292:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8026296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802629a:	4611      	mov	r1, r2
 802629c:	4618      	mov	r0, r3
 802629e:	f7fe fd40 	bl	8024d22 <mpz_swap>
      mpz_swap (t0, t1);
 80262a2:	f107 0210 	add.w	r2, r7, #16
 80262a6:	f107 031c 	add.w	r3, r7, #28
 80262aa:	4611      	mov	r1, r2
 80262ac:	4618      	mov	r0, r3
 80262ae:	f7fe fd38 	bl	8024d22 <mpz_swap>
    }
  if (u->_mp_size < 0)
 80262b2:	683b      	ldr	r3, [r7, #0]
 80262b4:	685b      	ldr	r3, [r3, #4]
 80262b6:	2b00      	cmp	r3, #0
 80262b8:	da07      	bge.n	80262ca <mpz_gcdext+0x482>
    mpz_neg (s0, s0);
 80262ba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80262be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80262c2:	4611      	mov	r1, r2
 80262c4:	4618      	mov	r0, r3
 80262c6:	f7fe fd1a 	bl	8024cfe <mpz_neg>
  if (v->_mp_size < 0)
 80262ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80262ce:	685b      	ldr	r3, [r3, #4]
 80262d0:	2b00      	cmp	r3, #0
 80262d2:	da07      	bge.n	80262e4 <mpz_gcdext+0x49c>
    mpz_neg (t0, t0);
 80262d4:	f107 021c 	add.w	r2, r7, #28
 80262d8:	f107 031c 	add.w	r3, r7, #28
 80262dc:	4611      	mov	r1, r2
 80262de:	4618      	mov	r0, r3
 80262e0:	f7fe fd0d 	bl	8024cfe <mpz_neg>

  mpz_swap (g, tv);
 80262e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80262e8:	4619      	mov	r1, r3
 80262ea:	68f8      	ldr	r0, [r7, #12]
 80262ec:	f7fe fd19 	bl	8024d22 <mpz_swap>
  if (s)
 80262f0:	68bb      	ldr	r3, [r7, #8]
 80262f2:	2b00      	cmp	r3, #0
 80262f4:	d005      	beq.n	8026302 <mpz_gcdext+0x4ba>
    mpz_swap (s, s0);
 80262f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80262fa:	4619      	mov	r1, r3
 80262fc:	68b8      	ldr	r0, [r7, #8]
 80262fe:	f7fe fd10 	bl	8024d22 <mpz_swap>
  if (t)
 8026302:	687b      	ldr	r3, [r7, #4]
 8026304:	2b00      	cmp	r3, #0
 8026306:	d005      	beq.n	8026314 <mpz_gcdext+0x4cc>
    mpz_swap (t, t0);
 8026308:	f107 031c 	add.w	r3, r7, #28
 802630c:	4619      	mov	r1, r3
 802630e:	6878      	ldr	r0, [r7, #4]
 8026310:	f7fe fd07 	bl	8024d22 <mpz_swap>

  mpz_clear (tu);
 8026314:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8026318:	4618      	mov	r0, r3
 802631a:	f7fe f902 	bl	8024522 <mpz_clear>
  mpz_clear (tv);
 802631e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8026322:	4618      	mov	r0, r3
 8026324:	f7fe f8fd 	bl	8024522 <mpz_clear>
  mpz_clear (s0);
 8026328:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802632c:	4618      	mov	r0, r3
 802632e:	f7fe f8f8 	bl	8024522 <mpz_clear>
  mpz_clear (s1);
 8026332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026336:	4618      	mov	r0, r3
 8026338:	f7fe f8f3 	bl	8024522 <mpz_clear>
  mpz_clear (t0);
 802633c:	f107 031c 	add.w	r3, r7, #28
 8026340:	4618      	mov	r0, r3
 8026342:	f7fe f8ee 	bl	8024522 <mpz_clear>
  mpz_clear (t1);
 8026346:	f107 0310 	add.w	r3, r7, #16
 802634a:	4618      	mov	r0, r3
 802634c:	f7fe f8e9 	bl	8024522 <mpz_clear>
 8026350:	e002      	b.n	8026358 <mpz_gcdext+0x510>
      return;
 8026352:	bf00      	nop
 8026354:	e000      	b.n	8026358 <mpz_gcdext+0x510>
      return;
 8026356:	bf00      	nop
}
 8026358:	3788      	adds	r7, #136	@ 0x88
 802635a:	46bd      	mov	sp, r7
 802635c:	bd80      	pop	{r7, pc}
 802635e:	bf00      	nop
 8026360:	080385e0 	.word	0x080385e0
 8026364:	0803bde0 	.word	0x0803bde0
 8026368:	080382a0 	.word	0x080382a0

0802636c <mpz_invert>:
  mpz_abs (r, r);
}

int
mpz_invert (mpz_t r, const mpz_t u, const mpz_t m)
{
 802636c:	b580      	push	{r7, lr}
 802636e:	b08e      	sub	sp, #56	@ 0x38
 8026370:	af02      	add	r7, sp, #8
 8026372:	60f8      	str	r0, [r7, #12]
 8026374:	60b9      	str	r1, [r7, #8]
 8026376:	607a      	str	r2, [r7, #4]
  mpz_t g, tr;
  int invertible;

  if (u->_mp_size == 0 || mpz_cmpabs_ui (m, 1) <= 0)
 8026378:	68bb      	ldr	r3, [r7, #8]
 802637a:	685b      	ldr	r3, [r3, #4]
 802637c:	2b00      	cmp	r3, #0
 802637e:	d006      	beq.n	802638e <mpz_invert+0x22>
 8026380:	2101      	movs	r1, #1
 8026382:	6878      	ldr	r0, [r7, #4]
 8026384:	f7fe fc5d 	bl	8024c42 <mpz_cmpabs_ui>
 8026388:	4603      	mov	r3, r0
 802638a:	2b00      	cmp	r3, #0
 802638c:	dc01      	bgt.n	8026392 <mpz_invert+0x26>
    return 0;
 802638e:	2300      	movs	r3, #0
 8026390:	e04c      	b.n	802642c <mpz_invert+0xc0>

  mpz_init (g);
 8026392:	f107 0320 	add.w	r3, r7, #32
 8026396:	4618      	mov	r0, r3
 8026398:	f7fe f88a 	bl	80244b0 <mpz_init>
  mpz_init (tr);
 802639c:	f107 0314 	add.w	r3, r7, #20
 80263a0:	4618      	mov	r0, r3
 80263a2:	f7fe f885 	bl	80244b0 <mpz_init>

  mpz_gcdext (g, tr, NULL, u, m);
 80263a6:	f107 0114 	add.w	r1, r7, #20
 80263aa:	f107 0020 	add.w	r0, r7, #32
 80263ae:	687b      	ldr	r3, [r7, #4]
 80263b0:	9300      	str	r3, [sp, #0]
 80263b2:	68bb      	ldr	r3, [r7, #8]
 80263b4:	2200      	movs	r2, #0
 80263b6:	f7ff fd47 	bl	8025e48 <mpz_gcdext>
  invertible = (mpz_cmp_ui (g, 1) == 0);
 80263ba:	f107 0320 	add.w	r3, r7, #32
 80263be:	2101      	movs	r1, #1
 80263c0:	4618      	mov	r0, r3
 80263c2:	f7fe fbf4 	bl	8024bae <mpz_cmp_ui>
 80263c6:	4603      	mov	r3, r0
 80263c8:	2b00      	cmp	r3, #0
 80263ca:	bf0c      	ite	eq
 80263cc:	2301      	moveq	r3, #1
 80263ce:	2300      	movne	r3, #0
 80263d0:	b2db      	uxtb	r3, r3
 80263d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (invertible)
 80263d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80263d6:	2b00      	cmp	r3, #0
 80263d8:	d01d      	beq.n	8026416 <mpz_invert+0xaa>
    {
      if (tr->_mp_size < 0)
 80263da:	69bb      	ldr	r3, [r7, #24]
 80263dc:	2b00      	cmp	r3, #0
 80263de:	da14      	bge.n	802640a <mpz_invert+0x9e>
	{
	  if (m->_mp_size >= 0)
 80263e0:	687b      	ldr	r3, [r7, #4]
 80263e2:	685b      	ldr	r3, [r3, #4]
 80263e4:	2b00      	cmp	r3, #0
 80263e6:	db08      	blt.n	80263fa <mpz_invert+0x8e>
	    mpz_add (tr, tr, m);
 80263e8:	f107 0114 	add.w	r1, r7, #20
 80263ec:	f107 0314 	add.w	r3, r7, #20
 80263f0:	687a      	ldr	r2, [r7, #4]
 80263f2:	4618      	mov	r0, r3
 80263f4:	f7fe fdce 	bl	8024f94 <mpz_add>
 80263f8:	e007      	b.n	802640a <mpz_invert+0x9e>
	  else
	    mpz_sub (tr, tr, m);
 80263fa:	f107 0114 	add.w	r1, r7, #20
 80263fe:	f107 0314 	add.w	r3, r7, #20
 8026402:	687a      	ldr	r2, [r7, #4]
 8026404:	4618      	mov	r0, r3
 8026406:	f7fe fded 	bl	8024fe4 <mpz_sub>
	}
      mpz_swap (r, tr);
 802640a:	f107 0314 	add.w	r3, r7, #20
 802640e:	4619      	mov	r1, r3
 8026410:	68f8      	ldr	r0, [r7, #12]
 8026412:	f7fe fc86 	bl	8024d22 <mpz_swap>
    }

  mpz_clear (g);
 8026416:	f107 0320 	add.w	r3, r7, #32
 802641a:	4618      	mov	r0, r3
 802641c:	f7fe f881 	bl	8024522 <mpz_clear>
  mpz_clear (tr);
 8026420:	f107 0314 	add.w	r3, r7, #20
 8026424:	4618      	mov	r0, r3
 8026426:	f7fe f87c 	bl	8024522 <mpz_clear>
  return invertible;
 802642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 802642c:	4618      	mov	r0, r3
 802642e:	3730      	adds	r7, #48	@ 0x30
 8026430:	46bd      	mov	sp, r7
 8026432:	bd80      	pop	{r7, pc}

08026434 <mpz_pow_ui>:

/* Higher level operations (sqrt, pow and root) */

void
mpz_pow_ui (mpz_t r, const mpz_t b, unsigned long e)
{
 8026434:	b580      	push	{r7, lr}
 8026436:	b088      	sub	sp, #32
 8026438:	af00      	add	r7, sp, #0
 802643a:	60f8      	str	r0, [r7, #12]
 802643c:	60b9      	str	r1, [r7, #8]
 802643e:	607a      	str	r2, [r7, #4]
  unsigned long bit;
  mpz_t tr;
  mpz_init_set_ui (tr, 1);
 8026440:	f107 0310 	add.w	r3, r7, #16
 8026444:	2101      	movs	r1, #1
 8026446:	4618      	mov	r0, r3
 8026448:	f7fe f935 	bl	80246b6 <mpz_init_set_ui>

  bit = GMP_ULONG_HIGHBIT;
 802644c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8026450:	61fb      	str	r3, [r7, #28]
  do
    {
      mpz_mul (tr, tr, tr);
 8026452:	f107 0210 	add.w	r2, r7, #16
 8026456:	f107 0110 	add.w	r1, r7, #16
 802645a:	f107 0310 	add.w	r3, r7, #16
 802645e:	4618      	mov	r0, r3
 8026460:	f7fe fe23 	bl	80250aa <mpz_mul>
      if (e & bit)
 8026464:	687a      	ldr	r2, [r7, #4]
 8026466:	69fb      	ldr	r3, [r7, #28]
 8026468:	4013      	ands	r3, r2
 802646a:	2b00      	cmp	r3, #0
 802646c:	d007      	beq.n	802647e <mpz_pow_ui+0x4a>
	mpz_mul (tr, tr, b);
 802646e:	f107 0110 	add.w	r1, r7, #16
 8026472:	f107 0310 	add.w	r3, r7, #16
 8026476:	68ba      	ldr	r2, [r7, #8]
 8026478:	4618      	mov	r0, r3
 802647a:	f7fe fe16 	bl	80250aa <mpz_mul>
      bit >>= 1;
 802647e:	69fb      	ldr	r3, [r7, #28]
 8026480:	085b      	lsrs	r3, r3, #1
 8026482:	61fb      	str	r3, [r7, #28]
    }
  while (bit > 0);
 8026484:	69fb      	ldr	r3, [r7, #28]
 8026486:	2b00      	cmp	r3, #0
 8026488:	d1e3      	bne.n	8026452 <mpz_pow_ui+0x1e>

  mpz_swap (r, tr);
 802648a:	f107 0310 	add.w	r3, r7, #16
 802648e:	4619      	mov	r1, r3
 8026490:	68f8      	ldr	r0, [r7, #12]
 8026492:	f7fe fc46 	bl	8024d22 <mpz_swap>
  mpz_clear (tr);
 8026496:	f107 0310 	add.w	r3, r7, #16
 802649a:	4618      	mov	r0, r3
 802649c:	f7fe f841 	bl	8024522 <mpz_clear>
}
 80264a0:	bf00      	nop
 80264a2:	3720      	adds	r7, #32
 80264a4:	46bd      	mov	sp, r7
 80264a6:	bd80      	pop	{r7, pc}

080264a8 <mpz_powm>:
  mpz_clear (b);
}

void
mpz_powm (mpz_t r, const mpz_t b, const mpz_t e, const mpz_t m)
{
 80264a8:	b580      	push	{r7, lr}
 80264aa:	b09c      	sub	sp, #112	@ 0x70
 80264ac:	af02      	add	r7, sp, #8
 80264ae:	60f8      	str	r0, [r7, #12]
 80264b0:	60b9      	str	r1, [r7, #8]
 80264b2:	607a      	str	r2, [r7, #4]
 80264b4:	603b      	str	r3, [r7, #0]
  mpz_t base;
  mp_size_t en, mn;
  mp_srcptr mp;
  struct gmp_div_inverse minv;
  unsigned shift;
  mp_ptr tp = NULL;
 80264b6:	2300      	movs	r3, #0
 80264b8:	65fb      	str	r3, [r7, #92]	@ 0x5c

  en = GMP_ABS (e->_mp_size);
 80264ba:	687b      	ldr	r3, [r7, #4]
 80264bc:	685b      	ldr	r3, [r3, #4]
 80264be:	2b00      	cmp	r3, #0
 80264c0:	bfb8      	it	lt
 80264c2:	425b      	neglt	r3, r3
 80264c4:	667b      	str	r3, [r7, #100]	@ 0x64
  mn = GMP_ABS (m->_mp_size);
 80264c6:	683b      	ldr	r3, [r7, #0]
 80264c8:	685b      	ldr	r3, [r3, #4]
 80264ca:	2b00      	cmp	r3, #0
 80264cc:	bfb8      	it	lt
 80264ce:	425b      	neglt	r3, r3
 80264d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (mn == 0)
 80264d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80264d4:	2b00      	cmp	r3, #0
 80264d6:	d102      	bne.n	80264de <mpz_powm+0x36>
    gmp_die ("mpz_powm: Zero modulo.");
 80264d8:	4888      	ldr	r0, [pc, #544]	@ (80266fc <mpz_powm+0x254>)
 80264da:	f7fc f8a1 	bl	8022620 <gmp_die>

  if (en == 0)
 80264de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	d109      	bne.n	80264f8 <mpz_powm+0x50>
    {
      mpz_set_ui (r, mpz_cmpabs_ui (m, 1));
 80264e4:	2101      	movs	r1, #1
 80264e6:	6838      	ldr	r0, [r7, #0]
 80264e8:	f7fe fbab 	bl	8024c42 <mpz_cmpabs_ui>
 80264ec:	4603      	mov	r3, r0
 80264ee:	4619      	mov	r1, r3
 80264f0:	68f8      	ldr	r0, [r7, #12]
 80264f2:	f7fe f883 	bl	80245fc <mpz_set_ui>
 80264f6:	e0fe      	b.n	80266f6 <mpz_powm+0x24e>
      return;
    }

  mp = m->_mp_d;
 80264f8:	683b      	ldr	r3, [r7, #0]
 80264fa:	689b      	ldr	r3, [r3, #8]
 80264fc:	663b      	str	r3, [r7, #96]	@ 0x60
  mpn_div_qr_invert (&minv, mp, mn);
 80264fe:	f107 0314 	add.w	r3, r7, #20
 8026502:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8026504:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8026506:	4618      	mov	r0, r3
 8026508:	f7fd f8d6 	bl	80236b8 <mpn_div_qr_invert>
  shift = minv.shift;
 802650c:	697b      	ldr	r3, [r7, #20]
 802650e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (shift > 0)
 8026510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8026512:	2b00      	cmp	r3, #0
 8026514:	d018      	beq.n	8026548 <mpz_powm+0xa0>
    {
      /* To avoid shifts, we do all our reductions, except the final
	 one, using a *normalized* m. */
      minv.shift = 0;
 8026516:	2300      	movs	r3, #0
 8026518:	617b      	str	r3, [r7, #20]

      tp = gmp_alloc_limbs (mn);
 802651a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 802651c:	f7fc f8dc 	bl	80226d8 <gmp_alloc_limbs>
 8026520:	65f8      	str	r0, [r7, #92]	@ 0x5c
      gmp_assert_nocarry (mpn_lshift (tp, mp, mn, shift));
 8026522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8026524:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8026526:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8026528:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 802652a:	f7fc fd9b 	bl	8023064 <mpn_lshift>
 802652e:	64b8      	str	r0, [r7, #72]	@ 0x48
 8026530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8026532:	2b00      	cmp	r3, #0
 8026534:	d006      	beq.n	8026544 <mpz_powm+0x9c>
 8026536:	4b72      	ldr	r3, [pc, #456]	@ (8026700 <mpz_powm+0x258>)
 8026538:	4a72      	ldr	r2, [pc, #456]	@ (8026704 <mpz_powm+0x25c>)
 802653a:	f640 4162 	movw	r1, #3170	@ 0xc62
 802653e:	4872      	ldr	r0, [pc, #456]	@ (8026708 <mpz_powm+0x260>)
 8026540:	f00e fe7a 	bl	8035238 <__assert_func>
      mp = tp;
 8026544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026546:	663b      	str	r3, [r7, #96]	@ 0x60
    }

  mpz_init (base);
 8026548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802654c:	4618      	mov	r0, r3
 802654e:	f7fd ffaf 	bl	80244b0 <mpz_init>

  if (e->_mp_size < 0)
 8026552:	687b      	ldr	r3, [r7, #4]
 8026554:	685b      	ldr	r3, [r3, #4]
 8026556:	2b00      	cmp	r3, #0
 8026558:	da0d      	bge.n	8026576 <mpz_powm+0xce>
    {
      if (!mpz_invert (base, b, m))
 802655a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802655e:	683a      	ldr	r2, [r7, #0]
 8026560:	68b9      	ldr	r1, [r7, #8]
 8026562:	4618      	mov	r0, r3
 8026564:	f7ff ff02 	bl	802636c <mpz_invert>
 8026568:	4603      	mov	r3, r0
 802656a:	2b00      	cmp	r3, #0
 802656c:	d14a      	bne.n	8026604 <mpz_powm+0x15c>
	gmp_die ("mpz_powm: Negative exponent and non-invertible base.");
 802656e:	4867      	ldr	r0, [pc, #412]	@ (802670c <mpz_powm+0x264>)
 8026570:	f7fc f856 	bl	8022620 <gmp_die>
 8026574:	e046      	b.n	8026604 <mpz_powm+0x15c>
    }
  else
    {
      mp_size_t bn;
      mpz_abs (base, b);
 8026576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802657a:	68b9      	ldr	r1, [r7, #8]
 802657c:	4618      	mov	r0, r3
 802657e:	f7fe fba9 	bl	8024cd4 <mpz_abs>

      bn = base->_mp_size;
 8026582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026584:	65bb      	str	r3, [r7, #88]	@ 0x58
      if (bn >= mn)
 8026586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8026588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802658a:	429a      	cmp	r2, r3
 802658c:	db0c      	blt.n	80265a8 <mpz_powm+0x100>
	{
	  mpn_div_qr_preinv (NULL, base->_mp_d, base->_mp_size, mp, mn, &minv);
 802658e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8026590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8026592:	f107 0314 	add.w	r3, r7, #20
 8026596:	9301      	str	r3, [sp, #4]
 8026598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802659a:	9300      	str	r3, [sp, #0]
 802659c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802659e:	2000      	movs	r0, #0
 80265a0:	f7fd fe3c 	bl	802421c <mpn_div_qr_preinv>
	  bn = mn;
 80265a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80265a6:	65bb      	str	r3, [r7, #88]	@ 0x58
	}

      /* We have reduced the absolute value. Now take care of the
	 sign. Note that we get zero represented non-canonically as
	 m. */
      if (b->_mp_size < 0)
 80265a8:	68bb      	ldr	r3, [r7, #8]
 80265aa:	685b      	ldr	r3, [r3, #4]
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	da22      	bge.n	80265f6 <mpz_powm+0x14e>
	{
	  mp_ptr bp = MPZ_REALLOC (base, mn);
 80265b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80265b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80265b4:	429a      	cmp	r2, r3
 80265b6:	dd07      	ble.n	80265c8 <mpz_powm+0x120>
 80265b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80265bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80265be:	4618      	mov	r0, r3
 80265c0:	f7fd ffc3 	bl	802454a <mpz_realloc>
 80265c4:	4603      	mov	r3, r0
 80265c6:	e000      	b.n	80265ca <mpz_powm+0x122>
 80265c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80265ca:	647b      	str	r3, [r7, #68]	@ 0x44
	  gmp_assert_nocarry (mpn_sub (bp, mp, mn, bp, bn));
 80265cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80265ce:	9300      	str	r3, [sp, #0]
 80265d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80265d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80265d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80265d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80265d8:	f7fc fae0 	bl	8022b9c <mpn_sub>
 80265dc:	6438      	str	r0, [r7, #64]	@ 0x40
 80265de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80265e0:	2b00      	cmp	r3, #0
 80265e2:	d006      	beq.n	80265f2 <mpz_powm+0x14a>
 80265e4:	4b46      	ldr	r3, [pc, #280]	@ (8026700 <mpz_powm+0x258>)
 80265e6:	4a47      	ldr	r2, [pc, #284]	@ (8026704 <mpz_powm+0x25c>)
 80265e8:	f640 417f 	movw	r1, #3199	@ 0xc7f
 80265ec:	4846      	ldr	r0, [pc, #280]	@ (8026708 <mpz_powm+0x260>)
 80265ee:	f00e fe23 	bl	8035238 <__assert_func>
	  bn = mn;
 80265f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80265f4:	65bb      	str	r3, [r7, #88]	@ 0x58
	}
      base->_mp_size = mpn_normalized_size (base->_mp_d, bn);
 80265f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80265f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80265fa:	4618      	mov	r0, r3
 80265fc:	f7fc f944 	bl	8022888 <mpn_normalized_size>
 8026600:	4603      	mov	r3, r0
 8026602:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  mpz_init_set_ui (tr, 1);
 8026604:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8026608:	2101      	movs	r1, #1
 802660a:	4618      	mov	r0, r3
 802660c:	f7fe f853 	bl	80246b6 <mpz_init_set_ui>

  while (--en >= 0)
 8026610:	e03c      	b.n	802668c <mpz_powm+0x1e4>
    {
      mp_limb_t w = e->_mp_d[en];
 8026612:	687b      	ldr	r3, [r7, #4]
 8026614:	689a      	ldr	r2, [r3, #8]
 8026616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026618:	009b      	lsls	r3, r3, #2
 802661a:	4413      	add	r3, r2
 802661c:	681b      	ldr	r3, [r3, #0]
 802661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      mp_limb_t bit;

      bit = GMP_LIMB_HIGHBIT;
 8026620:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8026624:	657b      	str	r3, [r7, #84]	@ 0x54
      do
	{
	  mpz_mul (tr, tr, tr);
 8026626:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 802662a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802662e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8026632:	4618      	mov	r0, r3
 8026634:	f7fe fd39 	bl	80250aa <mpz_mul>
	  if (w & bit)
 8026638:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802663a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802663c:	4013      	ands	r3, r2
 802663e:	2b00      	cmp	r3, #0
 8026640:	d008      	beq.n	8026654 <mpz_powm+0x1ac>
	    mpz_mul (tr, tr, base);
 8026642:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8026646:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802664a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 802664e:	4618      	mov	r0, r3
 8026650:	f7fe fd2b 	bl	80250aa <mpz_mul>
	  if (tr->_mp_size > mn)
 8026654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026656:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8026658:	429a      	cmp	r2, r3
 802665a:	da11      	bge.n	8026680 <mpz_powm+0x1d8>
	    {
	      mpn_div_qr_preinv (NULL, tr->_mp_d, tr->_mp_size, mp, mn, &minv);
 802665c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 802665e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8026660:	f107 0314 	add.w	r3, r7, #20
 8026664:	9301      	str	r3, [sp, #4]
 8026666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8026668:	9300      	str	r3, [sp, #0]
 802666a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802666c:	2000      	movs	r0, #0
 802666e:	f7fd fdd5 	bl	802421c <mpn_div_qr_preinv>
	      tr->_mp_size = mpn_normalized_size (tr->_mp_d, mn);
 8026672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026674:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8026676:	4618      	mov	r0, r3
 8026678:	f7fc f906 	bl	8022888 <mpn_normalized_size>
 802667c:	4603      	mov	r3, r0
 802667e:	637b      	str	r3, [r7, #52]	@ 0x34
	    }
	  bit >>= 1;
 8026680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026682:	085b      	lsrs	r3, r3, #1
 8026684:	657b      	str	r3, [r7, #84]	@ 0x54
	}
      while (bit > 0);
 8026686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026688:	2b00      	cmp	r3, #0
 802668a:	d1cc      	bne.n	8026626 <mpz_powm+0x17e>
  while (--en >= 0)
 802668c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802668e:	3b01      	subs	r3, #1
 8026690:	667b      	str	r3, [r7, #100]	@ 0x64
 8026692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026694:	2b00      	cmp	r3, #0
 8026696:	dabc      	bge.n	8026612 <mpz_powm+0x16a>
    }

  /* Final reduction */
  if (tr->_mp_size >= mn)
 8026698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802669a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802669c:	429a      	cmp	r2, r3
 802669e:	dc13      	bgt.n	80266c8 <mpz_powm+0x220>
    {
      minv.shift = shift;
 80266a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80266a2:	617b      	str	r3, [r7, #20]
      mpn_div_qr_preinv (NULL, tr->_mp_d, tr->_mp_size, mp, mn, &minv);
 80266a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80266a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80266a8:	f107 0314 	add.w	r3, r7, #20
 80266ac:	9301      	str	r3, [sp, #4]
 80266ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80266b0:	9300      	str	r3, [sp, #0]
 80266b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80266b4:	2000      	movs	r0, #0
 80266b6:	f7fd fdb1 	bl	802421c <mpn_div_qr_preinv>
      tr->_mp_size = mpn_normalized_size (tr->_mp_d, mn);
 80266ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80266bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80266be:	4618      	mov	r0, r3
 80266c0:	f7fc f8e2 	bl	8022888 <mpn_normalized_size>
 80266c4:	4603      	mov	r3, r0
 80266c6:	637b      	str	r3, [r7, #52]	@ 0x34
    }
  if (tp)
 80266c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	d003      	beq.n	80266d6 <mpz_powm+0x22e>
    gmp_free_limbs (tp, mn);
 80266ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80266d0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80266d2:	f7fc f839 	bl	8022748 <gmp_free_limbs>

  mpz_swap (r, tr);
 80266d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80266da:	4619      	mov	r1, r3
 80266dc:	68f8      	ldr	r0, [r7, #12]
 80266de:	f7fe fb20 	bl	8024d22 <mpz_swap>
  mpz_clear (tr);
 80266e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80266e6:	4618      	mov	r0, r3
 80266e8:	f7fd ff1b 	bl	8024522 <mpz_clear>
  mpz_clear (base);
 80266ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80266f0:	4618      	mov	r0, r3
 80266f2:	f7fd ff16 	bl	8024522 <mpz_clear>
}
 80266f6:	3768      	adds	r7, #104	@ 0x68
 80266f8:	46bd      	mov	sp, r7
 80266fa:	bd80      	pop	{r7, pc}
 80266fc:	08038604 	.word	0x08038604
 8026700:	080384c4 	.word	0x080384c4
 8026704:	0803bdec 	.word	0x0803bdec
 8026708:	080382a0 	.word	0x080382a0
 802670c:	0803861c 	.word	0x0803861c

08026710 <mpz_powm_ui>:

void
mpz_powm_ui (mpz_t r, const mpz_t b, unsigned long elimb, const mpz_t m)
{
 8026710:	b580      	push	{r7, lr}
 8026712:	b088      	sub	sp, #32
 8026714:	af00      	add	r7, sp, #0
 8026716:	60f8      	str	r0, [r7, #12]
 8026718:	60b9      	str	r1, [r7, #8]
 802671a:	607a      	str	r2, [r7, #4]
 802671c:	603b      	str	r3, [r7, #0]
  mpz_t e;

  mpz_init_set_ui (e, elimb);
 802671e:	f107 0314 	add.w	r3, r7, #20
 8026722:	6879      	ldr	r1, [r7, #4]
 8026724:	4618      	mov	r0, r3
 8026726:	f7fd ffc6 	bl	80246b6 <mpz_init_set_ui>
  mpz_powm (r, b, e, m);
 802672a:	f107 0214 	add.w	r2, r7, #20
 802672e:	683b      	ldr	r3, [r7, #0]
 8026730:	68b9      	ldr	r1, [r7, #8]
 8026732:	68f8      	ldr	r0, [r7, #12]
 8026734:	f7ff feb8 	bl	80264a8 <mpz_powm>
  mpz_clear (e);
 8026738:	f107 0314 	add.w	r3, r7, #20
 802673c:	4618      	mov	r0, r3
 802673e:	f7fd fef0 	bl	8024522 <mpz_clear>
}
 8026742:	bf00      	nop
 8026744:	3720      	adds	r7, #32
 8026746:	46bd      	mov	sp, r7
 8026748:	bd80      	pop	{r7, pc}
	...

0802674c <mpz_rootrem>:

/* x=trunc(y^(1/z)), r=y-x^z */
void
mpz_rootrem (mpz_t x, mpz_t r, const mpz_t y, unsigned long z)
{
 802674c:	b580      	push	{r7, lr}
 802674e:	b090      	sub	sp, #64	@ 0x40
 8026750:	af00      	add	r7, sp, #0
 8026752:	60f8      	str	r0, [r7, #12]
 8026754:	60b9      	str	r1, [r7, #8]
 8026756:	607a      	str	r2, [r7, #4]
 8026758:	603b      	str	r3, [r7, #0]
  int sgn;
  mp_bitcnt_t bc;
  mpz_t t, u;

  sgn = y->_mp_size < 0;
 802675a:	687b      	ldr	r3, [r7, #4]
 802675c:	685b      	ldr	r3, [r3, #4]
 802675e:	0fdb      	lsrs	r3, r3, #31
 8026760:	b2db      	uxtb	r3, r3
 8026762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((~z & sgn) != 0)
 8026764:	683b      	ldr	r3, [r7, #0]
 8026766:	43da      	mvns	r2, r3
 8026768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802676a:	4013      	ands	r3, r2
 802676c:	2b00      	cmp	r3, #0
 802676e:	d002      	beq.n	8026776 <mpz_rootrem+0x2a>
    gmp_die ("mpz_rootrem: Negative argument, with even root.");
 8026770:	4873      	ldr	r0, [pc, #460]	@ (8026940 <mpz_rootrem+0x1f4>)
 8026772:	f7fb ff55 	bl	8022620 <gmp_die>
  if (z == 0)
 8026776:	683b      	ldr	r3, [r7, #0]
 8026778:	2b00      	cmp	r3, #0
 802677a:	d102      	bne.n	8026782 <mpz_rootrem+0x36>
    gmp_die ("mpz_rootrem: Zeroth root.");
 802677c:	4871      	ldr	r0, [pc, #452]	@ (8026944 <mpz_rootrem+0x1f8>)
 802677e:	f7fb ff4f 	bl	8022620 <gmp_die>

  if (mpz_cmpabs_ui (y, 1) <= 0) {
 8026782:	2101      	movs	r1, #1
 8026784:	6878      	ldr	r0, [r7, #4]
 8026786:	f7fe fa5c 	bl	8024c42 <mpz_cmpabs_ui>
 802678a:	4603      	mov	r3, r0
 802678c:	2b00      	cmp	r3, #0
 802678e:	dc0e      	bgt.n	80267ae <mpz_rootrem+0x62>
    if (x)
 8026790:	68fb      	ldr	r3, [r7, #12]
 8026792:	2b00      	cmp	r3, #0
 8026794:	d003      	beq.n	802679e <mpz_rootrem+0x52>
      mpz_set (x, y);
 8026796:	6879      	ldr	r1, [r7, #4]
 8026798:	68f8      	ldr	r0, [r7, #12]
 802679a:	f7fd ff50 	bl	802463e <mpz_set>
    if (r)
 802679e:	68bb      	ldr	r3, [r7, #8]
 80267a0:	2b00      	cmp	r3, #0
 80267a2:	f000 80c8 	beq.w	8026936 <mpz_rootrem+0x1ea>
      r->_mp_size = 0;
 80267a6:	68bb      	ldr	r3, [r7, #8]
 80267a8:	2200      	movs	r2, #0
 80267aa:	605a      	str	r2, [r3, #4]
 80267ac:	e0c4      	b.n	8026938 <mpz_rootrem+0x1ec>
    return;
  }

  mpz_init (u);
 80267ae:	f107 0320 	add.w	r3, r7, #32
 80267b2:	4618      	mov	r0, r3
 80267b4:	f7fd fe7c 	bl	80244b0 <mpz_init>
  mpz_init (t);
 80267b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80267bc:	4618      	mov	r0, r3
 80267be:	f7fd fe77 	bl	80244b0 <mpz_init>
  bc = (mpz_sizeinbase (y, 2) - 1) / z + 1;
 80267c2:	2102      	movs	r1, #2
 80267c4:	6878      	ldr	r0, [r7, #4]
 80267c6:	f000 fe7d 	bl	80274c4 <mpz_sizeinbase>
 80267ca:	4603      	mov	r3, r0
 80267cc:	1e5a      	subs	r2, r3, #1
 80267ce:	683b      	ldr	r3, [r7, #0]
 80267d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80267d4:	3301      	adds	r3, #1
 80267d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  mpz_setbit (t, bc);
 80267d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80267dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80267de:	4618      	mov	r0, r3
 80267e0:	f000 fdfa 	bl	80273d8 <mpz_setbit>

  if (z == 2) /* simplify sqrt loop: z-1 == 1 */
 80267e4:	683b      	ldr	r3, [r7, #0]
 80267e6:	2b02      	cmp	r3, #2
 80267e8:	d12c      	bne.n	8026844 <mpz_rootrem+0xf8>
    do {
      mpz_swap (u, t);			/* u = x */
 80267ea:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80267ee:	f107 0320 	add.w	r3, r7, #32
 80267f2:	4611      	mov	r1, r2
 80267f4:	4618      	mov	r0, r3
 80267f6:	f7fe fa94 	bl	8024d22 <mpz_swap>
      mpz_tdiv_q (t, y, u);		/* t = y/x */
 80267fa:	f107 0220 	add.w	r2, r7, #32
 80267fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8026802:	6879      	ldr	r1, [r7, #4]
 8026804:	4618      	mov	r0, r3
 8026806:	f7fe feb1 	bl	802556c <mpz_tdiv_q>
      mpz_add (t, t, u);		/* t = y/x + x */
 802680a:	f107 0220 	add.w	r2, r7, #32
 802680e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8026812:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8026816:	4618      	mov	r0, r3
 8026818:	f7fe fbbc 	bl	8024f94 <mpz_add>
      mpz_tdiv_q_2exp (t, t, 1);	/* x'= (y/x + x)/2 */
 802681c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8026820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8026824:	2201      	movs	r2, #1
 8026826:	4618      	mov	r0, r3
 8026828:	f7fe ff86 	bl	8025738 <mpz_tdiv_q_2exp>
    } while (mpz_cmpabs (t, u) < 0);	/* |x'| < |x| */
 802682c:	f107 0220 	add.w	r2, r7, #32
 8026830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8026834:	4611      	mov	r1, r2
 8026836:	4618      	mov	r0, r3
 8026838:	f7fe fa31 	bl	8024c9e <mpz_cmpabs>
 802683c:	4603      	mov	r3, r0
 802683e:	2b00      	cmp	r3, #0
 8026840:	dbd3      	blt.n	80267ea <mpz_rootrem+0x9e>
 8026842:	e052      	b.n	80268ea <mpz_rootrem+0x19e>
  else /* z != 2 */ {
    mpz_t v;

    mpz_init (v);
 8026844:	f107 0314 	add.w	r3, r7, #20
 8026848:	4618      	mov	r0, r3
 802684a:	f7fd fe31 	bl	80244b0 <mpz_init>
    if (sgn)
 802684e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8026850:	2b00      	cmp	r3, #0
 8026852:	d007      	beq.n	8026864 <mpz_rootrem+0x118>
      mpz_neg (t, t);
 8026854:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8026858:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802685c:	4611      	mov	r1, r2
 802685e:	4618      	mov	r0, r3
 8026860:	f7fe fa4d 	bl	8024cfe <mpz_neg>

    do {
      mpz_swap (u, t);			/* u = x */
 8026864:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8026868:	f107 0320 	add.w	r3, r7, #32
 802686c:	4611      	mov	r1, r2
 802686e:	4618      	mov	r0, r3
 8026870:	f7fe fa57 	bl	8024d22 <mpz_swap>
      mpz_pow_ui (t, u, z - 1);		/* t = x^(z-1) */
 8026874:	683b      	ldr	r3, [r7, #0]
 8026876:	1e5a      	subs	r2, r3, #1
 8026878:	f107 0120 	add.w	r1, r7, #32
 802687c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8026880:	4618      	mov	r0, r3
 8026882:	f7ff fdd7 	bl	8026434 <mpz_pow_ui>
      mpz_tdiv_q (t, y, t);		/* t = y/x^(z-1) */
 8026886:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 802688a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802688e:	6879      	ldr	r1, [r7, #4]
 8026890:	4618      	mov	r0, r3
 8026892:	f7fe fe6b 	bl	802556c <mpz_tdiv_q>
      mpz_mul_ui (v, u, z - 1);		/* v = x*(z-1) */
 8026896:	683b      	ldr	r3, [r7, #0]
 8026898:	1e5a      	subs	r2, r3, #1
 802689a:	f107 0120 	add.w	r1, r7, #32
 802689e:	f107 0314 	add.w	r3, r7, #20
 80268a2:	4618      	mov	r0, r3
 80268a4:	f7fe fbe5 	bl	8025072 <mpz_mul_ui>
      mpz_add (t, t, v);		/* t = y/x^(z-1) + x*(z-1) */
 80268a8:	f107 0214 	add.w	r2, r7, #20
 80268ac:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80268b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80268b4:	4618      	mov	r0, r3
 80268b6:	f7fe fb6d 	bl	8024f94 <mpz_add>
      mpz_tdiv_q_ui (t, t, z);		/* x'=(y/x^(z-1) + x*(z-1))/z */
 80268ba:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80268be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80268c2:	683a      	ldr	r2, [r7, #0]
 80268c4:	4618      	mov	r0, r3
 80268c6:	f7fe ffbe 	bl	8025846 <mpz_tdiv_q_ui>
    } while (mpz_cmpabs (t, u) < 0);	/* |x'| < |x| */
 80268ca:	f107 0220 	add.w	r2, r7, #32
 80268ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80268d2:	4611      	mov	r1, r2
 80268d4:	4618      	mov	r0, r3
 80268d6:	f7fe f9e2 	bl	8024c9e <mpz_cmpabs>
 80268da:	4603      	mov	r3, r0
 80268dc:	2b00      	cmp	r3, #0
 80268de:	dbc1      	blt.n	8026864 <mpz_rootrem+0x118>

    mpz_clear (v);
 80268e0:	f107 0314 	add.w	r3, r7, #20
 80268e4:	4618      	mov	r0, r3
 80268e6:	f7fd fe1c 	bl	8024522 <mpz_clear>
  }

  if (r) {
 80268ea:	68bb      	ldr	r3, [r7, #8]
 80268ec:	2b00      	cmp	r3, #0
 80268ee:	d00e      	beq.n	802690e <mpz_rootrem+0x1c2>
    mpz_pow_ui (t, u, z);
 80268f0:	f107 0120 	add.w	r1, r7, #32
 80268f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80268f8:	683a      	ldr	r2, [r7, #0]
 80268fa:	4618      	mov	r0, r3
 80268fc:	f7ff fd9a 	bl	8026434 <mpz_pow_ui>
    mpz_sub (r, y, t);
 8026900:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8026904:	461a      	mov	r2, r3
 8026906:	6879      	ldr	r1, [r7, #4]
 8026908:	68b8      	ldr	r0, [r7, #8]
 802690a:	f7fe fb6b 	bl	8024fe4 <mpz_sub>
  }
  if (x)
 802690e:	68fb      	ldr	r3, [r7, #12]
 8026910:	2b00      	cmp	r3, #0
 8026912:	d005      	beq.n	8026920 <mpz_rootrem+0x1d4>
    mpz_swap (x, u);
 8026914:	f107 0320 	add.w	r3, r7, #32
 8026918:	4619      	mov	r1, r3
 802691a:	68f8      	ldr	r0, [r7, #12]
 802691c:	f7fe fa01 	bl	8024d22 <mpz_swap>
  mpz_clear (u);
 8026920:	f107 0320 	add.w	r3, r7, #32
 8026924:	4618      	mov	r0, r3
 8026926:	f7fd fdfc 	bl	8024522 <mpz_clear>
  mpz_clear (t);
 802692a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802692e:	4618      	mov	r0, r3
 8026930:	f7fd fdf7 	bl	8024522 <mpz_clear>
 8026934:	e000      	b.n	8026938 <mpz_rootrem+0x1ec>
    return;
 8026936:	bf00      	nop
}
 8026938:	3740      	adds	r7, #64	@ 0x40
 802693a:	46bd      	mov	sp, r7
 802693c:	bd80      	pop	{r7, pc}
 802693e:	bf00      	nop
 8026940:	08038654 	.word	0x08038654
 8026944:	08038684 	.word	0x08038684

08026948 <mpz_root>:

int
mpz_root (mpz_t x, const mpz_t y, unsigned long z)
{
 8026948:	b580      	push	{r7, lr}
 802694a:	b088      	sub	sp, #32
 802694c:	af00      	add	r7, sp, #0
 802694e:	60f8      	str	r0, [r7, #12]
 8026950:	60b9      	str	r1, [r7, #8]
 8026952:	607a      	str	r2, [r7, #4]
  int res;
  mpz_t r;

  mpz_init (r);
 8026954:	f107 0310 	add.w	r3, r7, #16
 8026958:	4618      	mov	r0, r3
 802695a:	f7fd fda9 	bl	80244b0 <mpz_init>
  mpz_rootrem (x, r, y, z);
 802695e:	f107 0110 	add.w	r1, r7, #16
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	68ba      	ldr	r2, [r7, #8]
 8026966:	68f8      	ldr	r0, [r7, #12]
 8026968:	f7ff fef0 	bl	802674c <mpz_rootrem>
  res = r->_mp_size == 0;
 802696c:	697b      	ldr	r3, [r7, #20]
 802696e:	2b00      	cmp	r3, #0
 8026970:	bf0c      	ite	eq
 8026972:	2301      	moveq	r3, #1
 8026974:	2300      	movne	r3, #0
 8026976:	b2db      	uxtb	r3, r3
 8026978:	61fb      	str	r3, [r7, #28]
  mpz_clear (r);
 802697a:	f107 0310 	add.w	r3, r7, #16
 802697e:	4618      	mov	r0, r3
 8026980:	f7fd fdcf 	bl	8024522 <mpz_clear>

  return res;
 8026984:	69fb      	ldr	r3, [r7, #28]
}
 8026986:	4618      	mov	r0, r3
 8026988:	3720      	adds	r7, #32
 802698a:	46bd      	mov	sp, r7
 802698c:	bd80      	pop	{r7, pc}

0802698e <mpz_sqrt>:
  mpz_rootrem (s, r, u, 2);
}

void
mpz_sqrt (mpz_t s, const mpz_t u)
{
 802698e:	b580      	push	{r7, lr}
 8026990:	b082      	sub	sp, #8
 8026992:	af00      	add	r7, sp, #0
 8026994:	6078      	str	r0, [r7, #4]
 8026996:	6039      	str	r1, [r7, #0]
  mpz_rootrem (s, NULL, u, 2);
 8026998:	2302      	movs	r3, #2
 802699a:	683a      	ldr	r2, [r7, #0]
 802699c:	2100      	movs	r1, #0
 802699e:	6878      	ldr	r0, [r7, #4]
 80269a0:	f7ff fed4 	bl	802674c <mpz_rootrem>
}
 80269a4:	bf00      	nop
 80269a6:	3708      	adds	r7, #8
 80269a8:	46bd      	mov	sp, r7
 80269aa:	bd80      	pop	{r7, pc}

080269ac <mpz_perfect_square_p>:

int
mpz_perfect_square_p (const mpz_t u)
{
 80269ac:	b580      	push	{r7, lr}
 80269ae:	b082      	sub	sp, #8
 80269b0:	af00      	add	r7, sp, #0
 80269b2:	6078      	str	r0, [r7, #4]
  if (u->_mp_size <= 0)
 80269b4:	687b      	ldr	r3, [r7, #4]
 80269b6:	685b      	ldr	r3, [r3, #4]
 80269b8:	2b00      	cmp	r3, #0
 80269ba:	dc07      	bgt.n	80269cc <mpz_perfect_square_p+0x20>
    return (u->_mp_size == 0);
 80269bc:	687b      	ldr	r3, [r7, #4]
 80269be:	685b      	ldr	r3, [r3, #4]
 80269c0:	2b00      	cmp	r3, #0
 80269c2:	bf0c      	ite	eq
 80269c4:	2301      	moveq	r3, #1
 80269c6:	2300      	movne	r3, #0
 80269c8:	b2db      	uxtb	r3, r3
 80269ca:	e005      	b.n	80269d8 <mpz_perfect_square_p+0x2c>
  else
    return mpz_root (NULL, u, 2);
 80269cc:	2202      	movs	r2, #2
 80269ce:	6879      	ldr	r1, [r7, #4]
 80269d0:	2000      	movs	r0, #0
 80269d2:	f7ff ffb9 	bl	8026948 <mpz_root>
 80269d6:	4603      	mov	r3, r0
}
 80269d8:	4618      	mov	r0, r3
 80269da:	3708      	adds	r7, #8
 80269dc:	46bd      	mov	sp, r7
 80269de:	bd80      	pop	{r7, pc}

080269e0 <gmp_jacobi_coprime>:

/* Computes Kronecker (a/b) with odd b, a!=0 and GCD(a,b) = 1 */
/* Adapted from JACOBI_BASE_METHOD==4 in mpn/generic/jacbase.c */
static int
gmp_jacobi_coprime (mp_limb_t a, mp_limb_t b)
{
 80269e0:	b580      	push	{r7, lr}
 80269e2:	b08e      	sub	sp, #56	@ 0x38
 80269e4:	af00      	add	r7, sp, #0
 80269e6:	6078      	str	r0, [r7, #4]
 80269e8:	6039      	str	r1, [r7, #0]
  int c, bit = 0;
 80269ea:	2300      	movs	r3, #0
 80269ec:	633b      	str	r3, [r7, #48]	@ 0x30

  assert (b & 1);
 80269ee:	683b      	ldr	r3, [r7, #0]
 80269f0:	f003 0301 	and.w	r3, r3, #1
 80269f4:	2b00      	cmp	r3, #0
 80269f6:	d106      	bne.n	8026a06 <gmp_jacobi_coprime+0x26>
 80269f8:	4b5a      	ldr	r3, [pc, #360]	@ (8026b64 <gmp_jacobi_coprime+0x184>)
 80269fa:	4a5b      	ldr	r2, [pc, #364]	@ (8026b68 <gmp_jacobi_coprime+0x188>)
 80269fc:	f640 516d 	movw	r1, #3437	@ 0xd6d
 8026a00:	485a      	ldr	r0, [pc, #360]	@ (8026b6c <gmp_jacobi_coprime+0x18c>)
 8026a02:	f00e fc19 	bl	8035238 <__assert_func>
  assert (a != 0);
 8026a06:	687b      	ldr	r3, [r7, #4]
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	d106      	bne.n	8026a1a <gmp_jacobi_coprime+0x3a>
 8026a0c:	4b58      	ldr	r3, [pc, #352]	@ (8026b70 <gmp_jacobi_coprime+0x190>)
 8026a0e:	4a56      	ldr	r2, [pc, #344]	@ (8026b68 <gmp_jacobi_coprime+0x188>)
 8026a10:	f640 516e 	movw	r1, #3438	@ 0xd6e
 8026a14:	4855      	ldr	r0, [pc, #340]	@ (8026b6c <gmp_jacobi_coprime+0x18c>)
 8026a16:	f00e fc0f 	bl	8035238 <__assert_func>
  /* assert (mpn_gcd_11 (a, b) == 1); */

  /* Below, we represent a and b shifted right so that the least
     significant one bit is implicit. */
  b >>= 1;
 8026a1a:	683b      	ldr	r3, [r7, #0]
 8026a1c:	085b      	lsrs	r3, r3, #1
 8026a1e:	603b      	str	r3, [r7, #0]

  gmp_ctz(c, a);
 8026a20:	687b      	ldr	r3, [r7, #4]
 8026a22:	61fb      	str	r3, [r7, #28]
 8026a24:	2300      	movs	r3, #0
 8026a26:	61bb      	str	r3, [r7, #24]
 8026a28:	69fb      	ldr	r3, [r7, #28]
 8026a2a:	425b      	negs	r3, r3
 8026a2c:	69fa      	ldr	r2, [r7, #28]
 8026a2e:	4013      	ands	r3, r2
 8026a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8026a32:	2300      	movs	r3, #0
 8026a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8026a36:	2308      	movs	r3, #8
 8026a38:	617b      	str	r3, [r7, #20]
 8026a3a:	697b      	ldr	r3, [r7, #20]
 8026a3c:	2b1f      	cmp	r3, #31
 8026a3e:	dc13      	bgt.n	8026a68 <gmp_jacobi_coprime+0x88>
 8026a40:	e007      	b.n	8026a52 <gmp_jacobi_coprime+0x72>
 8026a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026a44:	697b      	ldr	r3, [r7, #20]
 8026a46:	fa02 f303 	lsl.w	r3, r2, r3
 8026a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8026a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026a4e:	3308      	adds	r3, #8
 8026a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8026a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8026a58:	d3f3      	bcc.n	8026a42 <gmp_jacobi_coprime+0x62>
 8026a5a:	e005      	b.n	8026a68 <gmp_jacobi_coprime+0x88>
 8026a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026a5e:	005b      	lsls	r3, r3, #1
 8026a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8026a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026a64:	3301      	adds	r3, #1
 8026a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8026a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026a6a:	2b00      	cmp	r3, #0
 8026a6c:	daf6      	bge.n	8026a5c <gmp_jacobi_coprime+0x7c>
 8026a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026a70:	61bb      	str	r3, [r7, #24]
 8026a72:	69bb      	ldr	r3, [r7, #24]
 8026a74:	f1c3 031f 	rsb	r3, r3, #31
 8026a78:	637b      	str	r3, [r7, #52]	@ 0x34
  a >>= 1;
 8026a7a:	687b      	ldr	r3, [r7, #4]
 8026a7c:	085b      	lsrs	r3, r3, #1
 8026a7e:	607b      	str	r3, [r7, #4]

  for (;;)
    {
      a >>= c;
 8026a80:	687a      	ldr	r2, [r7, #4]
 8026a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026a84:	fa22 f303 	lsr.w	r3, r2, r3
 8026a88:	607b      	str	r3, [r7, #4]
      /* (2/b) = -1 if b = 3 or 5 mod 8 */
      bit ^= c & (b ^ (b >> 1));
 8026a8a:	683b      	ldr	r3, [r7, #0]
 8026a8c:	085a      	lsrs	r2, r3, #1
 8026a8e:	683b      	ldr	r3, [r7, #0]
 8026a90:	405a      	eors	r2, r3
 8026a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026a94:	401a      	ands	r2, r3
 8026a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026a98:	4053      	eors	r3, r2
 8026a9a:	633b      	str	r3, [r7, #48]	@ 0x30
      if (a < b)
 8026a9c:	687a      	ldr	r2, [r7, #4]
 8026a9e:	683b      	ldr	r3, [r7, #0]
 8026aa0:	429a      	cmp	r2, r3
 8026aa2:	d21b      	bcs.n	8026adc <gmp_jacobi_coprime+0xfc>
	{
	  if (a == 0)
 8026aa4:	687b      	ldr	r3, [r7, #4]
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	d109      	bne.n	8026abe <gmp_jacobi_coprime+0xde>
	    return bit & 1 ? -1 : 1;
 8026aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026aac:	f003 0301 	and.w	r3, r3, #1
 8026ab0:	2b00      	cmp	r3, #0
 8026ab2:	d002      	beq.n	8026aba <gmp_jacobi_coprime+0xda>
 8026ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8026ab8:	e04f      	b.n	8026b5a <gmp_jacobi_coprime+0x17a>
 8026aba:	2301      	movs	r3, #1
 8026abc:	e04d      	b.n	8026b5a <gmp_jacobi_coprime+0x17a>
	  bit ^= a & b;
 8026abe:	687a      	ldr	r2, [r7, #4]
 8026ac0:	683b      	ldr	r3, [r7, #0]
 8026ac2:	401a      	ands	r2, r3
 8026ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026ac6:	4053      	eors	r3, r2
 8026ac8:	633b      	str	r3, [r7, #48]	@ 0x30
	  a = b - a;
 8026aca:	683a      	ldr	r2, [r7, #0]
 8026acc:	687b      	ldr	r3, [r7, #4]
 8026ace:	1ad3      	subs	r3, r2, r3
 8026ad0:	607b      	str	r3, [r7, #4]
	  b -= a;
 8026ad2:	683a      	ldr	r2, [r7, #0]
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	1ad3      	subs	r3, r2, r3
 8026ad8:	603b      	str	r3, [r7, #0]
 8026ada:	e00d      	b.n	8026af8 <gmp_jacobi_coprime+0x118>
	}
      else
	{
	  a -= b;
 8026adc:	687a      	ldr	r2, [r7, #4]
 8026ade:	683b      	ldr	r3, [r7, #0]
 8026ae0:	1ad3      	subs	r3, r2, r3
 8026ae2:	607b      	str	r3, [r7, #4]
	  assert (a != 0);
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	2b00      	cmp	r3, #0
 8026ae8:	d106      	bne.n	8026af8 <gmp_jacobi_coprime+0x118>
 8026aea:	4b21      	ldr	r3, [pc, #132]	@ (8026b70 <gmp_jacobi_coprime+0x190>)
 8026aec:	4a1e      	ldr	r2, [pc, #120]	@ (8026b68 <gmp_jacobi_coprime+0x188>)
 8026aee:	f640 5188 	movw	r1, #3464	@ 0xd88
 8026af2:	481e      	ldr	r0, [pc, #120]	@ (8026b6c <gmp_jacobi_coprime+0x18c>)
 8026af4:	f00e fba0 	bl	8035238 <__assert_func>
	}

      gmp_ctz(c, a);
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	613b      	str	r3, [r7, #16]
 8026afc:	2300      	movs	r3, #0
 8026afe:	60fb      	str	r3, [r7, #12]
 8026b00:	693b      	ldr	r3, [r7, #16]
 8026b02:	425b      	negs	r3, r3
 8026b04:	693a      	ldr	r2, [r7, #16]
 8026b06:	4013      	ands	r3, r2
 8026b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8026b0a:	2300      	movs	r3, #0
 8026b0c:	623b      	str	r3, [r7, #32]
 8026b0e:	2308      	movs	r3, #8
 8026b10:	60bb      	str	r3, [r7, #8]
 8026b12:	68bb      	ldr	r3, [r7, #8]
 8026b14:	2b1f      	cmp	r3, #31
 8026b16:	dc13      	bgt.n	8026b40 <gmp_jacobi_coprime+0x160>
 8026b18:	e007      	b.n	8026b2a <gmp_jacobi_coprime+0x14a>
 8026b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026b1c:	68bb      	ldr	r3, [r7, #8]
 8026b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8026b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8026b24:	6a3b      	ldr	r3, [r7, #32]
 8026b26:	3308      	adds	r3, #8
 8026b28:	623b      	str	r3, [r7, #32]
 8026b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8026b30:	d3f3      	bcc.n	8026b1a <gmp_jacobi_coprime+0x13a>
 8026b32:	e005      	b.n	8026b40 <gmp_jacobi_coprime+0x160>
 8026b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026b36:	005b      	lsls	r3, r3, #1
 8026b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8026b3a:	6a3b      	ldr	r3, [r7, #32]
 8026b3c:	3301      	adds	r3, #1
 8026b3e:	623b      	str	r3, [r7, #32]
 8026b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026b42:	2b00      	cmp	r3, #0
 8026b44:	daf6      	bge.n	8026b34 <gmp_jacobi_coprime+0x154>
 8026b46:	6a3b      	ldr	r3, [r7, #32]
 8026b48:	60fb      	str	r3, [r7, #12]
 8026b4a:	68fb      	ldr	r3, [r7, #12]
 8026b4c:	f1c3 031f 	rsb	r3, r3, #31
 8026b50:	637b      	str	r3, [r7, #52]	@ 0x34
      ++c;
 8026b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026b54:	3301      	adds	r3, #1
 8026b56:	637b      	str	r3, [r7, #52]	@ 0x34
      a >>= c;
 8026b58:	e792      	b.n	8026a80 <gmp_jacobi_coprime+0xa0>
    }
}
 8026b5a:	4618      	mov	r0, r3
 8026b5c:	3738      	adds	r7, #56	@ 0x38
 8026b5e:	46bd      	mov	sp, r7
 8026b60:	bd80      	pop	{r7, pc}
 8026b62:	bf00      	nop
 8026b64:	080386c8 	.word	0x080386c8
 8026b68:	0803bdf8 	.word	0x0803bdf8
 8026b6c:	080382a0 	.word	0x080382a0
 8026b70:	080386d0 	.word	0x080386d0

08026b74 <gmp_lucas_step_k_2k>:

static void
gmp_lucas_step_k_2k (mpz_t V, mpz_t Qk, const mpz_t n)
{
 8026b74:	b580      	push	{r7, lr}
 8026b76:	b084      	sub	sp, #16
 8026b78:	af00      	add	r7, sp, #0
 8026b7a:	60f8      	str	r0, [r7, #12]
 8026b7c:	60b9      	str	r1, [r7, #8]
 8026b7e:	607a      	str	r2, [r7, #4]
  mpz_mod (Qk, Qk, n);
 8026b80:	687a      	ldr	r2, [r7, #4]
 8026b82:	68b9      	ldr	r1, [r7, #8]
 8026b84:	68b8      	ldr	r0, [r7, #8]
 8026b86:	f7fe fd15 	bl	80255b4 <mpz_mod>
  /* V_{2k} <- V_k ^ 2 - 2Q^k */
  mpz_mul (V, V, V);
 8026b8a:	68fa      	ldr	r2, [r7, #12]
 8026b8c:	68f9      	ldr	r1, [r7, #12]
 8026b8e:	68f8      	ldr	r0, [r7, #12]
 8026b90:	f7fe fa8b 	bl	80250aa <mpz_mul>
  mpz_submul_ui (V, Qk, 2);
 8026b94:	2202      	movs	r2, #2
 8026b96:	68b9      	ldr	r1, [r7, #8]
 8026b98:	68f8      	ldr	r0, [r7, #12]
 8026b9a:	f7fe fb6f 	bl	802527c <mpz_submul_ui>
  mpz_tdiv_r (V, V, n);
 8026b9e:	687a      	ldr	r2, [r7, #4]
 8026ba0:	68f9      	ldr	r1, [r7, #12]
 8026ba2:	68f8      	ldr	r0, [r7, #12]
 8026ba4:	f7fe fcf4 	bl	8025590 <mpz_tdiv_r>
  /* Q^{2k} = (Q^k)^2 */
  mpz_mul (Qk, Qk, Qk);
 8026ba8:	68ba      	ldr	r2, [r7, #8]
 8026baa:	68b9      	ldr	r1, [r7, #8]
 8026bac:	68b8      	ldr	r0, [r7, #8]
 8026bae:	f7fe fa7c 	bl	80250aa <mpz_mul>
}
 8026bb2:	bf00      	nop
 8026bb4:	3710      	adds	r7, #16
 8026bb6:	46bd      	mov	sp, r7
 8026bb8:	bd80      	pop	{r7, pc}
	...

08026bbc <gmp_lucas_mod>:
/* Requires an odd n > 4; b0 > 0; -2*Q must not overflow a long */
/* Returns (U_k == 0) and sets V=V_k and Qk=Q^k. */
static int
gmp_lucas_mod (mpz_t V, mpz_t Qk, long Q,
	       mp_bitcnt_t b0, const mpz_t n)
{
 8026bbc:	b580      	push	{r7, lr}
 8026bbe:	b08a      	sub	sp, #40	@ 0x28
 8026bc0:	af00      	add	r7, sp, #0
 8026bc2:	60f8      	str	r0, [r7, #12]
 8026bc4:	60b9      	str	r1, [r7, #8]
 8026bc6:	607a      	str	r2, [r7, #4]
 8026bc8:	603b      	str	r3, [r7, #0]
  mp_bitcnt_t bs;
  mpz_t U;
  int res;

  assert (b0 > 0);
 8026bca:	683b      	ldr	r3, [r7, #0]
 8026bcc:	2b00      	cmp	r3, #0
 8026bce:	d106      	bne.n	8026bde <gmp_lucas_mod+0x22>
 8026bd0:	4b69      	ldr	r3, [pc, #420]	@ (8026d78 <gmp_lucas_mod+0x1bc>)
 8026bd2:	4a6a      	ldr	r2, [pc, #424]	@ (8026d7c <gmp_lucas_mod+0x1c0>)
 8026bd4:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8026bd8:	4869      	ldr	r0, [pc, #420]	@ (8026d80 <gmp_lucas_mod+0x1c4>)
 8026bda:	f00e fb2d 	bl	8035238 <__assert_func>
  assert (Q <= - (LONG_MIN / 2));
 8026bde:	687b      	ldr	r3, [r7, #4]
 8026be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026be4:	dd06      	ble.n	8026bf4 <gmp_lucas_mod+0x38>
 8026be6:	4b67      	ldr	r3, [pc, #412]	@ (8026d84 <gmp_lucas_mod+0x1c8>)
 8026be8:	4a64      	ldr	r2, [pc, #400]	@ (8026d7c <gmp_lucas_mod+0x1c0>)
 8026bea:	f640 51a9 	movw	r1, #3497	@ 0xda9
 8026bee:	4864      	ldr	r0, [pc, #400]	@ (8026d80 <gmp_lucas_mod+0x1c4>)
 8026bf0:	f00e fb22 	bl	8035238 <__assert_func>
  assert (Q >= - (LONG_MAX / 2));
 8026bf4:	687b      	ldr	r3, [r7, #4]
 8026bf6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8026bfa:	dc06      	bgt.n	8026c0a <gmp_lucas_mod+0x4e>
 8026bfc:	4b62      	ldr	r3, [pc, #392]	@ (8026d88 <gmp_lucas_mod+0x1cc>)
 8026bfe:	4a5f      	ldr	r2, [pc, #380]	@ (8026d7c <gmp_lucas_mod+0x1c0>)
 8026c00:	f640 51aa 	movw	r1, #3498	@ 0xdaa
 8026c04:	485e      	ldr	r0, [pc, #376]	@ (8026d80 <gmp_lucas_mod+0x1c4>)
 8026c06:	f00e fb17 	bl	8035238 <__assert_func>
  assert (mpz_cmp_ui (n, 4) > 0);
 8026c0a:	2104      	movs	r1, #4
 8026c0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8026c0e:	f7fd ffce 	bl	8024bae <mpz_cmp_ui>
 8026c12:	4603      	mov	r3, r0
 8026c14:	2b00      	cmp	r3, #0
 8026c16:	dc06      	bgt.n	8026c26 <gmp_lucas_mod+0x6a>
 8026c18:	4b5c      	ldr	r3, [pc, #368]	@ (8026d8c <gmp_lucas_mod+0x1d0>)
 8026c1a:	4a58      	ldr	r2, [pc, #352]	@ (8026d7c <gmp_lucas_mod+0x1c0>)
 8026c1c:	f640 51ab 	movw	r1, #3499	@ 0xdab
 8026c20:	4857      	ldr	r0, [pc, #348]	@ (8026d80 <gmp_lucas_mod+0x1c4>)
 8026c22:	f00e fb09 	bl	8035238 <__assert_func>
  assert (mpz_odd_p (n));
 8026c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026c28:	685b      	ldr	r3, [r3, #4]
 8026c2a:	2b00      	cmp	r3, #0
 8026c2c:	bf14      	ite	ne
 8026c2e:	2301      	movne	r3, #1
 8026c30:	2300      	moveq	r3, #0
 8026c32:	b2db      	uxtb	r3, r3
 8026c34:	461a      	mov	r2, r3
 8026c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026c38:	689b      	ldr	r3, [r3, #8]
 8026c3a:	681b      	ldr	r3, [r3, #0]
 8026c3c:	4013      	ands	r3, r2
 8026c3e:	2b00      	cmp	r3, #0
 8026c40:	d106      	bne.n	8026c50 <gmp_lucas_mod+0x94>
 8026c42:	4b53      	ldr	r3, [pc, #332]	@ (8026d90 <gmp_lucas_mod+0x1d4>)
 8026c44:	4a4d      	ldr	r2, [pc, #308]	@ (8026d7c <gmp_lucas_mod+0x1c0>)
 8026c46:	f640 51ac 	movw	r1, #3500	@ 0xdac
 8026c4a:	484d      	ldr	r0, [pc, #308]	@ (8026d80 <gmp_lucas_mod+0x1c4>)
 8026c4c:	f00e faf4 	bl	8035238 <__assert_func>

  mpz_init_set_ui (U, 1); /* U1 = 1 */
 8026c50:	f107 0314 	add.w	r3, r7, #20
 8026c54:	2101      	movs	r1, #1
 8026c56:	4618      	mov	r0, r3
 8026c58:	f7fd fd2d 	bl	80246b6 <mpz_init_set_ui>
  mpz_set_ui (V, 1); /* V1 = 1 */
 8026c5c:	2101      	movs	r1, #1
 8026c5e:	68f8      	ldr	r0, [r7, #12]
 8026c60:	f7fd fccc 	bl	80245fc <mpz_set_ui>
  mpz_set_si (Qk, Q);
 8026c64:	6879      	ldr	r1, [r7, #4]
 8026c66:	68b8      	ldr	r0, [r7, #8]
 8026c68:	f7fd fca3 	bl	80245b2 <mpz_set_si>

  for (bs = mpz_sizeinbase (n, 2) - 1; --bs >= b0;)
 8026c6c:	2102      	movs	r1, #2
 8026c6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8026c70:	f000 fc28 	bl	80274c4 <mpz_sizeinbase>
 8026c74:	4603      	mov	r3, r0
 8026c76:	3b01      	subs	r3, #1
 8026c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8026c7a:	e064      	b.n	8026d46 <gmp_lucas_mod+0x18a>
    {
      /* U_{2k} <- U_k * V_k */
      mpz_mul (U, U, V);
 8026c7c:	f107 0114 	add.w	r1, r7, #20
 8026c80:	f107 0314 	add.w	r3, r7, #20
 8026c84:	68fa      	ldr	r2, [r7, #12]
 8026c86:	4618      	mov	r0, r3
 8026c88:	f7fe fa0f 	bl	80250aa <mpz_mul>
      /* V_{2k} <- V_k ^ 2 - 2Q^k */
      /* Q^{2k} = (Q^k)^2 */
      gmp_lucas_step_k_2k (V, Qk, n);
 8026c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026c8e:	68b9      	ldr	r1, [r7, #8]
 8026c90:	68f8      	ldr	r0, [r7, #12]
 8026c92:	f7ff ff6f 	bl	8026b74 <gmp_lucas_step_k_2k>

      /* A step k->k+1 is performed if the bit in $n$ is 1	*/
      /* mpz_tstbit(n,bs) or the bit is 0 in $n$ but	*/
      /* should be 1 in $n+1$ (bs == b0)			*/
      if (b0 == bs || mpz_tstbit (n, bs))
 8026c96:	683a      	ldr	r2, [r7, #0]
 8026c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026c9a:	429a      	cmp	r2, r3
 8026c9c:	d006      	beq.n	8026cac <gmp_lucas_mod+0xf0>
 8026c9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8026ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8026ca2:	f000 fa6d 	bl	8027180 <mpz_tstbit>
 8026ca6:	4603      	mov	r3, r0
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	d044      	beq.n	8026d36 <gmp_lucas_mod+0x17a>
	{
	  /* Q^{k+1} <- Q^k * Q */
	  mpz_mul_si (Qk, Qk, Q);
 8026cac:	687a      	ldr	r2, [r7, #4]
 8026cae:	68b9      	ldr	r1, [r7, #8]
 8026cb0:	68b8      	ldr	r0, [r7, #8]
 8026cb2:	f7fe f9bf 	bl	8025034 <mpz_mul_si>
	  /* U_{k+1} <- (U_k + V_k) / 2 */
	  mpz_swap (U, V); /* Keep in V the old value of U_k */
 8026cb6:	f107 0314 	add.w	r3, r7, #20
 8026cba:	68f9      	ldr	r1, [r7, #12]
 8026cbc:	4618      	mov	r0, r3
 8026cbe:	f7fe f830 	bl	8024d22 <mpz_swap>
	  mpz_add (U, U, V);
 8026cc2:	f107 0114 	add.w	r1, r7, #20
 8026cc6:	f107 0314 	add.w	r3, r7, #20
 8026cca:	68fa      	ldr	r2, [r7, #12]
 8026ccc:	4618      	mov	r0, r3
 8026cce:	f7fe f961 	bl	8024f94 <mpz_add>
	  /* We have to compute U/2, so we need an even value, */
	  /* equivalent (mod n) */
	  if (mpz_odd_p (U))
 8026cd2:	69bb      	ldr	r3, [r7, #24]
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	bf14      	ite	ne
 8026cd8:	2301      	movne	r3, #1
 8026cda:	2300      	moveq	r3, #0
 8026cdc:	b2db      	uxtb	r3, r3
 8026cde:	461a      	mov	r2, r3
 8026ce0:	69fb      	ldr	r3, [r7, #28]
 8026ce2:	681b      	ldr	r3, [r3, #0]
 8026ce4:	4013      	ands	r3, r2
 8026ce6:	2b00      	cmp	r3, #0
 8026ce8:	d007      	beq.n	8026cfa <gmp_lucas_mod+0x13e>
	    mpz_add (U, U, n);
 8026cea:	f107 0114 	add.w	r1, r7, #20
 8026cee:	f107 0314 	add.w	r3, r7, #20
 8026cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026cf4:	4618      	mov	r0, r3
 8026cf6:	f7fe f94d 	bl	8024f94 <mpz_add>
	  mpz_tdiv_q_2exp (U, U, 1);
 8026cfa:	f107 0114 	add.w	r1, r7, #20
 8026cfe:	f107 0314 	add.w	r3, r7, #20
 8026d02:	2201      	movs	r2, #1
 8026d04:	4618      	mov	r0, r3
 8026d06:	f7fe fd17 	bl	8025738 <mpz_tdiv_q_2exp>
	  /* V_{k+1} <-(D*U_k + V_k) / 2 =
			U_{k+1} + (D-1)/2*U_k = U_{k+1} - 2Q*U_k */
	  mpz_mul_si (V, V, -2*Q);
 8026d0a:	687a      	ldr	r2, [r7, #4]
 8026d0c:	4613      	mov	r3, r2
 8026d0e:	07db      	lsls	r3, r3, #31
 8026d10:	1a9b      	subs	r3, r3, r2
 8026d12:	005b      	lsls	r3, r3, #1
 8026d14:	461a      	mov	r2, r3
 8026d16:	68f9      	ldr	r1, [r7, #12]
 8026d18:	68f8      	ldr	r0, [r7, #12]
 8026d1a:	f7fe f98b 	bl	8025034 <mpz_mul_si>
	  mpz_add (V, U, V);
 8026d1e:	f107 0314 	add.w	r3, r7, #20
 8026d22:	68fa      	ldr	r2, [r7, #12]
 8026d24:	4619      	mov	r1, r3
 8026d26:	68f8      	ldr	r0, [r7, #12]
 8026d28:	f7fe f934 	bl	8024f94 <mpz_add>
	  mpz_tdiv_r (V, V, n);
 8026d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026d2e:	68f9      	ldr	r1, [r7, #12]
 8026d30:	68f8      	ldr	r0, [r7, #12]
 8026d32:	f7fe fc2d 	bl	8025590 <mpz_tdiv_r>
	}
      mpz_tdiv_r (U, U, n);
 8026d36:	f107 0114 	add.w	r1, r7, #20
 8026d3a:	f107 0314 	add.w	r3, r7, #20
 8026d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026d40:	4618      	mov	r0, r3
 8026d42:	f7fe fc25 	bl	8025590 <mpz_tdiv_r>
  for (bs = mpz_sizeinbase (n, 2) - 1; --bs >= b0;)
 8026d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026d48:	3b01      	subs	r3, #1
 8026d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8026d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026d4e:	683b      	ldr	r3, [r7, #0]
 8026d50:	429a      	cmp	r2, r3
 8026d52:	d293      	bcs.n	8026c7c <gmp_lucas_mod+0xc0>
    }

  res = U->_mp_size == 0;
 8026d54:	69bb      	ldr	r3, [r7, #24]
 8026d56:	2b00      	cmp	r3, #0
 8026d58:	bf0c      	ite	eq
 8026d5a:	2301      	moveq	r3, #1
 8026d5c:	2300      	movne	r3, #0
 8026d5e:	b2db      	uxtb	r3, r3
 8026d60:	623b      	str	r3, [r7, #32]
  mpz_clear (U);
 8026d62:	f107 0314 	add.w	r3, r7, #20
 8026d66:	4618      	mov	r0, r3
 8026d68:	f7fd fbdb 	bl	8024522 <mpz_clear>
  return res;
 8026d6c:	6a3b      	ldr	r3, [r7, #32]
}
 8026d6e:	4618      	mov	r0, r3
 8026d70:	3728      	adds	r7, #40	@ 0x28
 8026d72:	46bd      	mov	sp, r7
 8026d74:	bd80      	pop	{r7, pc}
 8026d76:	bf00      	nop
 8026d78:	080386d8 	.word	0x080386d8
 8026d7c:	0803be0c 	.word	0x0803be0c
 8026d80:	080382a0 	.word	0x080382a0
 8026d84:	080386e0 	.word	0x080386e0
 8026d88:	080386f8 	.word	0x080386f8
 8026d8c:	08038710 	.word	0x08038710
 8026d90:	08038728 	.word	0x08038728

08026d94 <gmp_stronglucas>:
/* Performs strong Lucas' test on x, with parameters suggested */
/* for the BPSW test. Qk is only passed to recycle a variable. */
/* Requires GCD (x,6) = 1.*/
static int
gmp_stronglucas (const mpz_t x, mpz_t Qk)
{
 8026d94:	b580      	push	{r7, lr}
 8026d96:	b090      	sub	sp, #64	@ 0x40
 8026d98:	af02      	add	r7, sp, #8
 8026d9a:	6078      	str	r0, [r7, #4]
 8026d9c:	6039      	str	r1, [r7, #0]
  mp_limb_t maxD, D; /* The absolute value is stored. */
  long Q;
  mp_limb_t tl;

  /* Test on the absolute value. */
  mpz_roinit_normal_n (n, x->_mp_d, GMP_ABS (x->_mp_size));
 8026d9e:	687b      	ldr	r3, [r7, #4]
 8026da0:	6899      	ldr	r1, [r3, #8]
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	685b      	ldr	r3, [r3, #4]
 8026da6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8026daa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8026dae:	f107 030c 	add.w	r3, r7, #12
 8026db2:	4618      	mov	r0, r3
 8026db4:	f7fd fd10 	bl	80247d8 <mpz_roinit_normal_n>

  assert (mpz_odd_p (n));
 8026db8:	693b      	ldr	r3, [r7, #16]
 8026dba:	2b00      	cmp	r3, #0
 8026dbc:	bf14      	ite	ne
 8026dbe:	2301      	movne	r3, #1
 8026dc0:	2300      	moveq	r3, #0
 8026dc2:	b2db      	uxtb	r3, r3
 8026dc4:	461a      	mov	r2, r3
 8026dc6:	697b      	ldr	r3, [r7, #20]
 8026dc8:	681b      	ldr	r3, [r3, #0]
 8026dca:	4013      	ands	r3, r2
 8026dcc:	2b00      	cmp	r3, #0
 8026dce:	d106      	bne.n	8026dde <gmp_stronglucas+0x4a>
 8026dd0:	4b47      	ldr	r3, [pc, #284]	@ (8026ef0 <gmp_stronglucas+0x15c>)
 8026dd2:	4a48      	ldr	r2, [pc, #288]	@ (8026ef4 <gmp_stronglucas+0x160>)
 8026dd4:	f640 51e6 	movw	r1, #3558	@ 0xde6
 8026dd8:	4847      	ldr	r0, [pc, #284]	@ (8026ef8 <gmp_stronglucas+0x164>)
 8026dda:	f00e fa2d 	bl	8035238 <__assert_func>
  /* assert (mpz_gcd_ui (NULL, n, 6) == 1); */
  if (mpz_root (Qk, n, 2))
 8026dde:	f107 030c 	add.w	r3, r7, #12
 8026de2:	2202      	movs	r2, #2
 8026de4:	4619      	mov	r1, r3
 8026de6:	6838      	ldr	r0, [r7, #0]
 8026de8:	f7ff fdae 	bl	8026948 <mpz_root>
 8026dec:	4603      	mov	r3, r0
 8026dee:	2b00      	cmp	r3, #0
 8026df0:	d001      	beq.n	8026df6 <gmp_stronglucas+0x62>
    return 0; /* A square is composite. */
 8026df2:	2300      	movs	r3, #0
 8026df4:	e077      	b.n	8026ee6 <gmp_stronglucas+0x152>

  /* Check Ds up to square root (in case, n is prime)
     or avoid overflows */
  maxD = (Qk->_mp_size == 1) ? Qk->_mp_d [0] - 1 : GMP_LIMB_MAX;
 8026df6:	683b      	ldr	r3, [r7, #0]
 8026df8:	685b      	ldr	r3, [r3, #4]
 8026dfa:	2b01      	cmp	r3, #1
 8026dfc:	d104      	bne.n	8026e08 <gmp_stronglucas+0x74>
 8026dfe:	683b      	ldr	r3, [r7, #0]
 8026e00:	689b      	ldr	r3, [r3, #8]
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	3b01      	subs	r3, #1
 8026e06:	e001      	b.n	8026e0c <gmp_stronglucas+0x78>
 8026e08:	f04f 33ff 	mov.w	r3, #4294967295
 8026e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  D = 3;
 8026e0e:	2303      	movs	r3, #3
 8026e10:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Search a D such that (D/n) = -1 in the sequence 5,-7,9,-11,.. */
  /* For those Ds we have (D/n) = (n/|D|) */
  do
    {
      if (D >= maxD)
 8026e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026e16:	429a      	cmp	r2, r3
 8026e18:	d307      	bcc.n	8026e2a <gmp_stronglucas+0x96>
	return 1 + (D != GMP_LIMB_MAX); /* (1 + ! ~ D) */
 8026e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026e20:	d001      	beq.n	8026e26 <gmp_stronglucas+0x92>
 8026e22:	2302      	movs	r3, #2
 8026e24:	e05f      	b.n	8026ee6 <gmp_stronglucas+0x152>
 8026e26:	2301      	movs	r3, #1
 8026e28:	e05d      	b.n	8026ee6 <gmp_stronglucas+0x152>
      D += 2;
 8026e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026e2c:	3302      	adds	r3, #2
 8026e2e:	633b      	str	r3, [r7, #48]	@ 0x30
      tl = mpz_tdiv_ui (n, D);
 8026e30:	f107 030c 	add.w	r3, r7, #12
 8026e34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8026e36:	4618      	mov	r0, r3
 8026e38:	f7fe fd2a 	bl	8025890 <mpz_tdiv_ui>
 8026e3c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (tl == 0)
 8026e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026e40:	2b00      	cmp	r3, #0
 8026e42:	d101      	bne.n	8026e48 <gmp_stronglucas+0xb4>
	return 0;
 8026e44:	2300      	movs	r3, #0
 8026e46:	e04e      	b.n	8026ee6 <gmp_stronglucas+0x152>
    }
  while (gmp_jacobi_coprime (tl, D) == 1);
 8026e48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8026e4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8026e4c:	f7ff fdc8 	bl	80269e0 <gmp_jacobi_coprime>
 8026e50:	4603      	mov	r3, r0
 8026e52:	2b01      	cmp	r3, #1
 8026e54:	d0dd      	beq.n	8026e12 <gmp_stronglucas+0x7e>

  mpz_init (V);
 8026e56:	f107 0318 	add.w	r3, r7, #24
 8026e5a:	4618      	mov	r0, r3
 8026e5c:	f7fd fb28 	bl	80244b0 <mpz_init>

  /* n-(D/n) = n+1 = d*2^{b0}, with d = (n>>b0) | 1 */
  b0 = mpn_common_scan (~ n->_mp_d[0], 0, n->_mp_d, n->_mp_size, GMP_LIMB_MAX);
 8026e60:	697b      	ldr	r3, [r7, #20]
 8026e62:	681b      	ldr	r3, [r3, #0]
 8026e64:	43d8      	mvns	r0, r3
 8026e66:	697a      	ldr	r2, [r7, #20]
 8026e68:	693b      	ldr	r3, [r7, #16]
 8026e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8026e6e:	9100      	str	r1, [sp, #0]
 8026e70:	2100      	movs	r1, #0
 8026e72:	f7fc f9d1 	bl	8023218 <mpn_common_scan>
 8026e76:	6378      	str	r0, [r7, #52]	@ 0x34
  /* b0 = mpz_scan0 (n, 0); */

  /* D= P^2 - 4Q; P = 1; Q = (1-D)/4 */
  Q = (D & 2) ? (long) (D >> 2) + 1 : -(long) (D >> 2);
 8026e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026e7a:	f003 0302 	and.w	r3, r3, #2
 8026e7e:	2b00      	cmp	r3, #0
 8026e80:	d003      	beq.n	8026e8a <gmp_stronglucas+0xf6>
 8026e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026e84:	089b      	lsrs	r3, r3, #2
 8026e86:	3301      	adds	r3, #1
 8026e88:	e002      	b.n	8026e90 <gmp_stronglucas+0xfc>
 8026e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026e8c:	089b      	lsrs	r3, r3, #2
 8026e8e:	425b      	negs	r3, r3
 8026e90:	627b      	str	r3, [r7, #36]	@ 0x24

  if (! gmp_lucas_mod (V, Qk, Q, b0, n))	/* If Ud != 0 */
 8026e92:	f107 0018 	add.w	r0, r7, #24
 8026e96:	f107 030c 	add.w	r3, r7, #12
 8026e9a:	9300      	str	r3, [sp, #0]
 8026e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026ea0:	6839      	ldr	r1, [r7, #0]
 8026ea2:	f7ff fe8b 	bl	8026bbc <gmp_lucas_mod>
 8026ea6:	4603      	mov	r3, r0
 8026ea8:	2b00      	cmp	r3, #0
 8026eaa:	d111      	bne.n	8026ed0 <gmp_stronglucas+0x13c>
    while (V->_mp_size != 0 && --b0 != 0)	/* while Vk != 0 */
 8026eac:	e007      	b.n	8026ebe <gmp_stronglucas+0x12a>
      /* V <- V ^ 2 - 2Q^k */
      /* Q^{2k} = (Q^k)^2 */
      gmp_lucas_step_k_2k (V, Qk, n);
 8026eae:	f107 020c 	add.w	r2, r7, #12
 8026eb2:	f107 0318 	add.w	r3, r7, #24
 8026eb6:	6839      	ldr	r1, [r7, #0]
 8026eb8:	4618      	mov	r0, r3
 8026eba:	f7ff fe5b 	bl	8026b74 <gmp_lucas_step_k_2k>
    while (V->_mp_size != 0 && --b0 != 0)	/* while Vk != 0 */
 8026ebe:	69fb      	ldr	r3, [r7, #28]
 8026ec0:	2b00      	cmp	r3, #0
 8026ec2:	d005      	beq.n	8026ed0 <gmp_stronglucas+0x13c>
 8026ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026ec6:	3b01      	subs	r3, #1
 8026ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8026eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026ecc:	2b00      	cmp	r3, #0
 8026ece:	d1ee      	bne.n	8026eae <gmp_stronglucas+0x11a>

  mpz_clear (V);
 8026ed0:	f107 0318 	add.w	r3, r7, #24
 8026ed4:	4618      	mov	r0, r3
 8026ed6:	f7fd fb24 	bl	8024522 <mpz_clear>
  return (b0 != 0);
 8026eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	bf14      	ite	ne
 8026ee0:	2301      	movne	r3, #1
 8026ee2:	2300      	moveq	r3, #0
 8026ee4:	b2db      	uxtb	r3, r3
}
 8026ee6:	4618      	mov	r0, r3
 8026ee8:	3738      	adds	r7, #56	@ 0x38
 8026eea:	46bd      	mov	sp, r7
 8026eec:	bd80      	pop	{r7, pc}
 8026eee:	bf00      	nop
 8026ef0:	08038728 	.word	0x08038728
 8026ef4:	0803be1c 	.word	0x0803be1c
 8026ef8:	080382a0 	.word	0x080382a0

08026efc <gmp_millerrabin>:

static int
gmp_millerrabin (const mpz_t n, const mpz_t nm1, mpz_t y,
		 const mpz_t q, mp_bitcnt_t k)
{
 8026efc:	b580      	push	{r7, lr}
 8026efe:	b084      	sub	sp, #16
 8026f00:	af00      	add	r7, sp, #0
 8026f02:	60f8      	str	r0, [r7, #12]
 8026f04:	60b9      	str	r1, [r7, #8]
 8026f06:	607a      	str	r2, [r7, #4]
 8026f08:	603b      	str	r3, [r7, #0]
  assert (k > 0);
 8026f0a:	69bb      	ldr	r3, [r7, #24]
 8026f0c:	2b00      	cmp	r3, #0
 8026f0e:	d106      	bne.n	8026f1e <gmp_millerrabin+0x22>
 8026f10:	4b1b      	ldr	r3, [pc, #108]	@ (8026f80 <gmp_millerrabin+0x84>)
 8026f12:	4a1c      	ldr	r2, [pc, #112]	@ (8026f84 <gmp_millerrabin+0x88>)
 8026f14:	f640 6114 	movw	r1, #3604	@ 0xe14
 8026f18:	481b      	ldr	r0, [pc, #108]	@ (8026f88 <gmp_millerrabin+0x8c>)
 8026f1a:	f00e f98d 	bl	8035238 <__assert_func>

  /* Caller must initialize y to the base. */
  mpz_powm (y, y, q, n);
 8026f1e:	68fb      	ldr	r3, [r7, #12]
 8026f20:	683a      	ldr	r2, [r7, #0]
 8026f22:	6879      	ldr	r1, [r7, #4]
 8026f24:	6878      	ldr	r0, [r7, #4]
 8026f26:	f7ff fabf 	bl	80264a8 <mpz_powm>

  if (mpz_cmp_ui (y, 1) == 0 || mpz_cmp (y, nm1) == 0)
 8026f2a:	2101      	movs	r1, #1
 8026f2c:	6878      	ldr	r0, [r7, #4]
 8026f2e:	f7fd fe3e 	bl	8024bae <mpz_cmp_ui>
 8026f32:	4603      	mov	r3, r0
 8026f34:	2b00      	cmp	r3, #0
 8026f36:	d006      	beq.n	8026f46 <gmp_millerrabin+0x4a>
 8026f38:	68b9      	ldr	r1, [r7, #8]
 8026f3a:	6878      	ldr	r0, [r7, #4]
 8026f3c:	f7fd fe4e 	bl	8024bdc <mpz_cmp>
 8026f40:	4603      	mov	r3, r0
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	d110      	bne.n	8026f68 <gmp_millerrabin+0x6c>
    return 1;
 8026f46:	2301      	movs	r3, #1
 8026f48:	e015      	b.n	8026f76 <gmp_millerrabin+0x7a>

  while (--k > 0)
    {
      mpz_powm_ui (y, y, 2, n);
 8026f4a:	68fb      	ldr	r3, [r7, #12]
 8026f4c:	2202      	movs	r2, #2
 8026f4e:	6879      	ldr	r1, [r7, #4]
 8026f50:	6878      	ldr	r0, [r7, #4]
 8026f52:	f7ff fbdd 	bl	8026710 <mpz_powm_ui>
      if (mpz_cmp (y, nm1) == 0)
 8026f56:	68b9      	ldr	r1, [r7, #8]
 8026f58:	6878      	ldr	r0, [r7, #4]
 8026f5a:	f7fd fe3f 	bl	8024bdc <mpz_cmp>
 8026f5e:	4603      	mov	r3, r0
 8026f60:	2b00      	cmp	r3, #0
 8026f62:	d101      	bne.n	8026f68 <gmp_millerrabin+0x6c>
	return 1;
 8026f64:	2301      	movs	r3, #1
 8026f66:	e006      	b.n	8026f76 <gmp_millerrabin+0x7a>
  while (--k > 0)
 8026f68:	69bb      	ldr	r3, [r7, #24]
 8026f6a:	3b01      	subs	r3, #1
 8026f6c:	61bb      	str	r3, [r7, #24]
 8026f6e:	69bb      	ldr	r3, [r7, #24]
 8026f70:	2b00      	cmp	r3, #0
 8026f72:	d1ea      	bne.n	8026f4a <gmp_millerrabin+0x4e>
    }
  return 0;
 8026f74:	2300      	movs	r3, #0
}
 8026f76:	4618      	mov	r0, r3
 8026f78:	3710      	adds	r7, #16
 8026f7a:	46bd      	mov	sp, r7
 8026f7c:	bd80      	pop	{r7, pc}
 8026f7e:	bf00      	nop
 8026f80:	08038738 	.word	0x08038738
 8026f84:	0803be2c 	.word	0x0803be2c
 8026f88:	080382a0 	.word	0x080382a0

08026f8c <mpz_probab_prime_p>:
/* Bit (p+1)/2 is set, for each odd prime <= 61 */
#define GMP_PRIME_MASK 0xc96996dcUL

int
mpz_probab_prime_p (const mpz_t n, int reps)
{
 8026f8c:	b580      	push	{r7, lr}
 8026f8e:	b090      	sub	sp, #64	@ 0x40
 8026f90:	af02      	add	r7, sp, #8
 8026f92:	6078      	str	r0, [r7, #4]
 8026f94:	6039      	str	r1, [r7, #0]
  int is_prime;
  int j;

  /* Note that we use the absolute value of n only, for compatibility
     with the real GMP. */
  if (mpz_even_p (n))
 8026f96:	687b      	ldr	r3, [r7, #4]
 8026f98:	685b      	ldr	r3, [r3, #4]
 8026f9a:	2b00      	cmp	r3, #0
 8026f9c:	bf14      	ite	ne
 8026f9e:	2301      	movne	r3, #1
 8026fa0:	2300      	moveq	r3, #0
 8026fa2:	b2db      	uxtb	r3, r3
 8026fa4:	461a      	mov	r2, r3
 8026fa6:	687b      	ldr	r3, [r7, #4]
 8026fa8:	689b      	ldr	r3, [r3, #8]
 8026faa:	681b      	ldr	r3, [r3, #0]
 8026fac:	4013      	ands	r3, r2
 8026fae:	2b00      	cmp	r3, #0
 8026fb0:	d10a      	bne.n	8026fc8 <mpz_probab_prime_p+0x3c>
    return (mpz_cmpabs_ui (n, 2) == 0) ? 2 : 0;
 8026fb2:	2102      	movs	r1, #2
 8026fb4:	6878      	ldr	r0, [r7, #4]
 8026fb6:	f7fd fe44 	bl	8024c42 <mpz_cmpabs_ui>
 8026fba:	4603      	mov	r3, r0
 8026fbc:	2b00      	cmp	r3, #0
 8026fbe:	d101      	bne.n	8026fc4 <mpz_probab_prime_p+0x38>
 8026fc0:	2302      	movs	r3, #2
 8026fc2:	e0cc      	b.n	802715e <mpz_probab_prime_p+0x1d2>
 8026fc4:	2300      	movs	r3, #0
 8026fc6:	e0ca      	b.n	802715e <mpz_probab_prime_p+0x1d2>

  /* Above test excludes n == 0 */
  assert (n->_mp_size != 0);
 8026fc8:	687b      	ldr	r3, [r7, #4]
 8026fca:	685b      	ldr	r3, [r3, #4]
 8026fcc:	2b00      	cmp	r3, #0
 8026fce:	d106      	bne.n	8026fde <mpz_probab_prime_p+0x52>
 8026fd0:	4b65      	ldr	r3, [pc, #404]	@ (8027168 <mpz_probab_prime_p+0x1dc>)
 8026fd2:	4a66      	ldr	r2, [pc, #408]	@ (802716c <mpz_probab_prime_p+0x1e0>)
 8026fd4:	f640 613c 	movw	r1, #3644	@ 0xe3c
 8026fd8:	4865      	ldr	r0, [pc, #404]	@ (8027170 <mpz_probab_prime_p+0x1e4>)
 8026fda:	f00e f92d 	bl	8035238 <__assert_func>

  if (mpz_cmpabs_ui (n, 64) < 0)
 8026fde:	2140      	movs	r1, #64	@ 0x40
 8026fe0:	6878      	ldr	r0, [r7, #4]
 8026fe2:	f7fd fe2e 	bl	8024c42 <mpz_cmpabs_ui>
 8026fe6:	4603      	mov	r3, r0
 8026fe8:	2b00      	cmp	r3, #0
 8026fea:	da09      	bge.n	8027000 <mpz_probab_prime_p+0x74>
    return (GMP_PRIME_MASK >> (n->_mp_d[0] >> 1)) & 2;
 8026fec:	687b      	ldr	r3, [r7, #4]
 8026fee:	689b      	ldr	r3, [r3, #8]
 8026ff0:	681b      	ldr	r3, [r3, #0]
 8026ff2:	085b      	lsrs	r3, r3, #1
 8026ff4:	4a5f      	ldr	r2, [pc, #380]	@ (8027174 <mpz_probab_prime_p+0x1e8>)
 8026ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8026ffa:	f003 0302 	and.w	r3, r3, #2
 8026ffe:	e0ae      	b.n	802715e <mpz_probab_prime_p+0x1d2>

  if (mpz_gcd_ui (NULL, n, GMP_PRIME_PRODUCT) != 1)
 8027000:	4a5d      	ldr	r2, [pc, #372]	@ (8027178 <mpz_probab_prime_p+0x1ec>)
 8027002:	6879      	ldr	r1, [r7, #4]
 8027004:	2000      	movs	r0, #0
 8027006:	f7fe fe5d 	bl	8025cc4 <mpz_gcd_ui>
 802700a:	4603      	mov	r3, r0
 802700c:	2b01      	cmp	r3, #1
 802700e:	d001      	beq.n	8027014 <mpz_probab_prime_p+0x88>
    return 0;
 8027010:	2300      	movs	r3, #0
 8027012:	e0a4      	b.n	802715e <mpz_probab_prime_p+0x1d2>

  /* All prime factors are >= 31. */
  if (mpz_cmpabs_ui (n, 31*31) < 0)
 8027014:	f240 31c1 	movw	r1, #961	@ 0x3c1
 8027018:	6878      	ldr	r0, [r7, #4]
 802701a:	f7fd fe12 	bl	8024c42 <mpz_cmpabs_ui>
 802701e:	4603      	mov	r3, r0
 8027020:	2b00      	cmp	r3, #0
 8027022:	da01      	bge.n	8027028 <mpz_probab_prime_p+0x9c>
    return 2;
 8027024:	2302      	movs	r3, #2
 8027026:	e09a      	b.n	802715e <mpz_probab_prime_p+0x1d2>

  mpz_init (nm1);
 8027028:	f107 0320 	add.w	r3, r7, #32
 802702c:	4618      	mov	r0, r3
 802702e:	f7fd fa3f 	bl	80244b0 <mpz_init>
  mpz_init (q);
 8027032:	f107 0314 	add.w	r3, r7, #20
 8027036:	4618      	mov	r0, r3
 8027038:	f7fd fa3a 	bl	80244b0 <mpz_init>

  /* Find q and k, where q is odd and n = 1 + 2**k * q.  */
  mpz_abs (nm1, n);
 802703c:	f107 0320 	add.w	r3, r7, #32
 8027040:	6879      	ldr	r1, [r7, #4]
 8027042:	4618      	mov	r0, r3
 8027044:	f7fd fe46 	bl	8024cd4 <mpz_abs>
  nm1->_mp_d[0] -= 1;
 8027048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802704a:	681a      	ldr	r2, [r3, #0]
 802704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802704e:	3a01      	subs	r2, #1
 8027050:	601a      	str	r2, [r3, #0]
  /* Count trailing zeros, equivalent to mpn_scan1, because we know that there is a 1 */
  k = mpn_scan1 (nm1->_mp_d, 0);
 8027052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027054:	2100      	movs	r1, #0
 8027056:	4618      	mov	r0, r3
 8027058:	f7fc f95a 	bl	8023310 <mpn_scan1>
 802705c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  mpz_tdiv_q_2exp (q, nm1, k);
 802705e:	f107 0120 	add.w	r1, r7, #32
 8027062:	f107 0314 	add.w	r3, r7, #20
 8027066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027068:	4618      	mov	r0, r3
 802706a:	f7fe fb65 	bl	8025738 <mpz_tdiv_q_2exp>

  /* BPSW test */
  mpz_init_set_ui (y, 2);
 802706e:	f107 0308 	add.w	r3, r7, #8
 8027072:	2102      	movs	r1, #2
 8027074:	4618      	mov	r0, r3
 8027076:	f7fd fb1e 	bl	80246b6 <mpz_init_set_ui>
  is_prime = gmp_millerrabin (n, nm1, y, q, k) && gmp_stronglucas (n, y);
 802707a:	f107 0014 	add.w	r0, r7, #20
 802707e:	f107 0208 	add.w	r2, r7, #8
 8027082:	f107 0120 	add.w	r1, r7, #32
 8027086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027088:	9300      	str	r3, [sp, #0]
 802708a:	4603      	mov	r3, r0
 802708c:	6878      	ldr	r0, [r7, #4]
 802708e:	f7ff ff35 	bl	8026efc <gmp_millerrabin>
 8027092:	4603      	mov	r3, r0
 8027094:	2b00      	cmp	r3, #0
 8027096:	d00a      	beq.n	80270ae <mpz_probab_prime_p+0x122>
 8027098:	f107 0308 	add.w	r3, r7, #8
 802709c:	4619      	mov	r1, r3
 802709e:	6878      	ldr	r0, [r7, #4]
 80270a0:	f7ff fe78 	bl	8026d94 <gmp_stronglucas>
 80270a4:	4603      	mov	r3, r0
 80270a6:	2b00      	cmp	r3, #0
 80270a8:	d001      	beq.n	80270ae <mpz_probab_prime_p+0x122>
 80270aa:	2301      	movs	r3, #1
 80270ac:	e000      	b.n	80270b0 <mpz_probab_prime_p+0x124>
 80270ae:	2300      	movs	r3, #0
 80270b0:	637b      	str	r3, [r7, #52]	@ 0x34
  reps -= 24; /* skip the first 24 repetitions */
 80270b2:	683b      	ldr	r3, [r7, #0]
 80270b4:	3b18      	subs	r3, #24
 80270b6:	603b      	str	r3, [r7, #0]
  /* Use Miller-Rabin, with a deterministic sequence of bases, a[j] =
     j^2 + j + 41 using Euler's polynomial. We potentially stop early,
     if a[j] >= n - 1. Since n >= 31*31, this can happen only if reps >
     30 (a[30] == 971 > 31*31 == 961). */

  for (j = 0; is_prime & (j < reps); j++)
 80270b8:	2300      	movs	r3, #0
 80270ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80270bc:	e031      	b.n	8027122 <mpz_probab_prime_p+0x196>
    {
      mpz_set_ui (y, (unsigned long) j*j+j+41);
 80270be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80270c0:	3301      	adds	r3, #1
 80270c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80270c4:	fb02 f303 	mul.w	r3, r2, r3
 80270c8:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80270cc:	f107 0308 	add.w	r3, r7, #8
 80270d0:	4611      	mov	r1, r2
 80270d2:	4618      	mov	r0, r3
 80270d4:	f7fd fa92 	bl	80245fc <mpz_set_ui>
      if (mpz_cmp (y, nm1) >= 0)
 80270d8:	f107 0220 	add.w	r2, r7, #32
 80270dc:	f107 0308 	add.w	r3, r7, #8
 80270e0:	4611      	mov	r1, r2
 80270e2:	4618      	mov	r0, r3
 80270e4:	f7fd fd7a 	bl	8024bdc <mpz_cmp>
 80270e8:	4603      	mov	r3, r0
 80270ea:	2b00      	cmp	r3, #0
 80270ec:	db09      	blt.n	8027102 <mpz_probab_prime_p+0x176>
	{
	  /* Don't try any further bases. This "early" break does not affect
	     the result for any reasonable reps value (<=5000 was tested) */
	  assert (j >= 30);
 80270ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80270f0:	2b1d      	cmp	r3, #29
 80270f2:	dc23      	bgt.n	802713c <mpz_probab_prime_p+0x1b0>
 80270f4:	4b21      	ldr	r3, [pc, #132]	@ (802717c <mpz_probab_prime_p+0x1f0>)
 80270f6:	4a1d      	ldr	r2, [pc, #116]	@ (802716c <mpz_probab_prime_p+0x1e0>)
 80270f8:	f640 6163 	movw	r1, #3683	@ 0xe63
 80270fc:	481c      	ldr	r0, [pc, #112]	@ (8027170 <mpz_probab_prime_p+0x1e4>)
 80270fe:	f00e f89b 	bl	8035238 <__assert_func>
	  break;
	}
      is_prime = gmp_millerrabin (n, nm1, y, q, k);
 8027102:	f107 0014 	add.w	r0, r7, #20
 8027106:	f107 0208 	add.w	r2, r7, #8
 802710a:	f107 0120 	add.w	r1, r7, #32
 802710e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027110:	9300      	str	r3, [sp, #0]
 8027112:	4603      	mov	r3, r0
 8027114:	6878      	ldr	r0, [r7, #4]
 8027116:	f7ff fef1 	bl	8026efc <gmp_millerrabin>
 802711a:	6378      	str	r0, [r7, #52]	@ 0x34
  for (j = 0; is_prime & (j < reps); j++)
 802711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802711e:	3301      	adds	r3, #1
 8027120:	633b      	str	r3, [r7, #48]	@ 0x30
 8027122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027124:	683b      	ldr	r3, [r7, #0]
 8027126:	429a      	cmp	r2, r3
 8027128:	bfb4      	ite	lt
 802712a:	2301      	movlt	r3, #1
 802712c:	2300      	movge	r3, #0
 802712e:	b2db      	uxtb	r3, r3
 8027130:	461a      	mov	r2, r3
 8027132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027134:	4013      	ands	r3, r2
 8027136:	2b00      	cmp	r3, #0
 8027138:	d1c1      	bne.n	80270be <mpz_probab_prime_p+0x132>
 802713a:	e000      	b.n	802713e <mpz_probab_prime_p+0x1b2>
	  break;
 802713c:	bf00      	nop
    }
  mpz_clear (nm1);
 802713e:	f107 0320 	add.w	r3, r7, #32
 8027142:	4618      	mov	r0, r3
 8027144:	f7fd f9ed 	bl	8024522 <mpz_clear>
  mpz_clear (q);
 8027148:	f107 0314 	add.w	r3, r7, #20
 802714c:	4618      	mov	r0, r3
 802714e:	f7fd f9e8 	bl	8024522 <mpz_clear>
  mpz_clear (y);
 8027152:	f107 0308 	add.w	r3, r7, #8
 8027156:	4618      	mov	r0, r3
 8027158:	f7fd f9e3 	bl	8024522 <mpz_clear>

  return is_prime;
 802715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 802715e:	4618      	mov	r0, r3
 8027160:	3738      	adds	r7, #56	@ 0x38
 8027162:	46bd      	mov	sp, r7
 8027164:	bd80      	pop	{r7, pc}
 8027166:	bf00      	nop
 8027168:	08038740 	.word	0x08038740
 802716c:	0803be3c 	.word	0x0803be3c
 8027170:	080382a0 	.word	0x080382a0
 8027174:	c96996dc 	.word	0xc96996dc
 8027178:	c0cfd797 	.word	0xc0cfd797
 802717c:	08038754 	.word	0x08038754

08027180 <mpz_tstbit>:
   two's complement is 110001. Clearing the least significant bit, we
   get two's complement 110000, and -010000. */

int
mpz_tstbit (const mpz_t d, mp_bitcnt_t bit_index)
{
 8027180:	b480      	push	{r7}
 8027182:	b089      	sub	sp, #36	@ 0x24
 8027184:	af00      	add	r7, sp, #0
 8027186:	6078      	str	r0, [r7, #4]
 8027188:	6039      	str	r1, [r7, #0]
  mp_size_t ds;
  mp_size_t dn;
  mp_limb_t w;
  int bit;

  ds = d->_mp_size;
 802718a:	687b      	ldr	r3, [r7, #4]
 802718c:	685b      	ldr	r3, [r3, #4]
 802718e:	61bb      	str	r3, [r7, #24]
  dn = GMP_ABS (ds);
 8027190:	69bb      	ldr	r3, [r7, #24]
 8027192:	2b00      	cmp	r3, #0
 8027194:	bfb8      	it	lt
 8027196:	425b      	neglt	r3, r3
 8027198:	617b      	str	r3, [r7, #20]
  limb_index = bit_index / GMP_LIMB_BITS;
 802719a:	683b      	ldr	r3, [r7, #0]
 802719c:	095b      	lsrs	r3, r3, #5
 802719e:	61fb      	str	r3, [r7, #28]
  if (limb_index >= dn)
 80271a0:	69fa      	ldr	r2, [r7, #28]
 80271a2:	697b      	ldr	r3, [r7, #20]
 80271a4:	429a      	cmp	r2, r3
 80271a6:	db03      	blt.n	80271b0 <mpz_tstbit+0x30>
    return ds < 0;
 80271a8:	69bb      	ldr	r3, [r7, #24]
 80271aa:	0fdb      	lsrs	r3, r3, #31
 80271ac:	b2db      	uxtb	r3, r3
 80271ae:	e036      	b.n	802721e <mpz_tstbit+0x9e>

  shift = bit_index % GMP_LIMB_BITS;
 80271b0:	683b      	ldr	r3, [r7, #0]
 80271b2:	f003 031f 	and.w	r3, r3, #31
 80271b6:	613b      	str	r3, [r7, #16]
  w = d->_mp_d[limb_index];
 80271b8:	687b      	ldr	r3, [r7, #4]
 80271ba:	689a      	ldr	r2, [r3, #8]
 80271bc:	69fb      	ldr	r3, [r7, #28]
 80271be:	009b      	lsls	r3, r3, #2
 80271c0:	4413      	add	r3, r2
 80271c2:	681b      	ldr	r3, [r3, #0]
 80271c4:	60fb      	str	r3, [r7, #12]
  bit = (w >> shift) & 1;
 80271c6:	68fa      	ldr	r2, [r7, #12]
 80271c8:	693b      	ldr	r3, [r7, #16]
 80271ca:	fa22 f303 	lsr.w	r3, r2, r3
 80271ce:	f003 0301 	and.w	r3, r3, #1
 80271d2:	60bb      	str	r3, [r7, #8]

  if (ds < 0)
 80271d4:	69bb      	ldr	r3, [r7, #24]
 80271d6:	2b00      	cmp	r3, #0
 80271d8:	da20      	bge.n	802721c <mpz_tstbit+0x9c>
    {
      /* d < 0. Check if any of the bits below is set: If so, our bit
	 must be complemented. */
      if (shift > 0 && (mp_limb_t) (w << (GMP_LIMB_BITS - shift)) > 0)
 80271da:	693b      	ldr	r3, [r7, #16]
 80271dc:	2b00      	cmp	r3, #0
 80271de:	d017      	beq.n	8027210 <mpz_tstbit+0x90>
 80271e0:	693b      	ldr	r3, [r7, #16]
 80271e2:	f1c3 0320 	rsb	r3, r3, #32
 80271e6:	68fa      	ldr	r2, [r7, #12]
 80271e8:	fa02 f303 	lsl.w	r3, r2, r3
 80271ec:	2b00      	cmp	r3, #0
 80271ee:	d00f      	beq.n	8027210 <mpz_tstbit+0x90>
	return bit ^ 1;
 80271f0:	68bb      	ldr	r3, [r7, #8]
 80271f2:	f083 0301 	eor.w	r3, r3, #1
 80271f6:	e012      	b.n	802721e <mpz_tstbit+0x9e>
      while (--limb_index >= 0)
	if (d->_mp_d[limb_index] > 0)
 80271f8:	687b      	ldr	r3, [r7, #4]
 80271fa:	689a      	ldr	r2, [r3, #8]
 80271fc:	69fb      	ldr	r3, [r7, #28]
 80271fe:	009b      	lsls	r3, r3, #2
 8027200:	4413      	add	r3, r2
 8027202:	681b      	ldr	r3, [r3, #0]
 8027204:	2b00      	cmp	r3, #0
 8027206:	d003      	beq.n	8027210 <mpz_tstbit+0x90>
	  return bit ^ 1;
 8027208:	68bb      	ldr	r3, [r7, #8]
 802720a:	f083 0301 	eor.w	r3, r3, #1
 802720e:	e006      	b.n	802721e <mpz_tstbit+0x9e>
      while (--limb_index >= 0)
 8027210:	69fb      	ldr	r3, [r7, #28]
 8027212:	3b01      	subs	r3, #1
 8027214:	61fb      	str	r3, [r7, #28]
 8027216:	69fb      	ldr	r3, [r7, #28]
 8027218:	2b00      	cmp	r3, #0
 802721a:	daed      	bge.n	80271f8 <mpz_tstbit+0x78>
    }
  return bit;
 802721c:	68bb      	ldr	r3, [r7, #8]
}
 802721e:	4618      	mov	r0, r3
 8027220:	3724      	adds	r7, #36	@ 0x24
 8027222:	46bd      	mov	sp, r7
 8027224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027228:	4770      	bx	lr

0802722a <mpz_abs_add_bit>:

static void
mpz_abs_add_bit (mpz_t d, mp_bitcnt_t bit_index)
{
 802722a:	b580      	push	{r7, lr}
 802722c:	b088      	sub	sp, #32
 802722e:	af00      	add	r7, sp, #0
 8027230:	6078      	str	r0, [r7, #4]
 8027232:	6039      	str	r1, [r7, #0]
  mp_size_t dn, limb_index;
  mp_limb_t bit;
  mp_ptr dp;

  dn = GMP_ABS (d->_mp_size);
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	685b      	ldr	r3, [r3, #4]
 8027238:	2b00      	cmp	r3, #0
 802723a:	bfb8      	it	lt
 802723c:	425b      	neglt	r3, r3
 802723e:	61fb      	str	r3, [r7, #28]

  limb_index = bit_index / GMP_LIMB_BITS;
 8027240:	683b      	ldr	r3, [r7, #0]
 8027242:	095b      	lsrs	r3, r3, #5
 8027244:	617b      	str	r3, [r7, #20]
  bit = (mp_limb_t) 1 << (bit_index % GMP_LIMB_BITS);
 8027246:	683b      	ldr	r3, [r7, #0]
 8027248:	f003 031f 	and.w	r3, r3, #31
 802724c:	2201      	movs	r2, #1
 802724e:	fa02 f303 	lsl.w	r3, r2, r3
 8027252:	613b      	str	r3, [r7, #16]

  if (limb_index >= dn)
 8027254:	697a      	ldr	r2, [r7, #20]
 8027256:	69fb      	ldr	r3, [r7, #28]
 8027258:	429a      	cmp	r2, r3
 802725a:	db29      	blt.n	80272b0 <mpz_abs_add_bit+0x86>
    {
      mp_size_t i;
      /* The bit should be set outside of the end of the number.
	 We have to increase the size of the number. */
      dp = MPZ_REALLOC (d, limb_index + 1);
 802725c:	687b      	ldr	r3, [r7, #4]
 802725e:	681b      	ldr	r3, [r3, #0]
 8027260:	697a      	ldr	r2, [r7, #20]
 8027262:	429a      	cmp	r2, r3
 8027264:	db07      	blt.n	8027276 <mpz_abs_add_bit+0x4c>
 8027266:	697b      	ldr	r3, [r7, #20]
 8027268:	3301      	adds	r3, #1
 802726a:	4619      	mov	r1, r3
 802726c:	6878      	ldr	r0, [r7, #4]
 802726e:	f7fd f96c 	bl	802454a <mpz_realloc>
 8027272:	4603      	mov	r3, r0
 8027274:	e001      	b.n	802727a <mpz_abs_add_bit+0x50>
 8027276:	687b      	ldr	r3, [r7, #4]
 8027278:	689b      	ldr	r3, [r3, #8]
 802727a:	60fb      	str	r3, [r7, #12]

      dp[limb_index] = bit;
 802727c:	697b      	ldr	r3, [r7, #20]
 802727e:	009b      	lsls	r3, r3, #2
 8027280:	68fa      	ldr	r2, [r7, #12]
 8027282:	4413      	add	r3, r2
 8027284:	693a      	ldr	r2, [r7, #16]
 8027286:	601a      	str	r2, [r3, #0]
      for (i = dn; i < limb_index; i++)
 8027288:	69fb      	ldr	r3, [r7, #28]
 802728a:	61bb      	str	r3, [r7, #24]
 802728c:	e008      	b.n	80272a0 <mpz_abs_add_bit+0x76>
	dp[i] = 0;
 802728e:	69bb      	ldr	r3, [r7, #24]
 8027290:	009b      	lsls	r3, r3, #2
 8027292:	68fa      	ldr	r2, [r7, #12]
 8027294:	4413      	add	r3, r2
 8027296:	2200      	movs	r2, #0
 8027298:	601a      	str	r2, [r3, #0]
      for (i = dn; i < limb_index; i++)
 802729a:	69bb      	ldr	r3, [r7, #24]
 802729c:	3301      	adds	r3, #1
 802729e:	61bb      	str	r3, [r7, #24]
 80272a0:	69ba      	ldr	r2, [r7, #24]
 80272a2:	697b      	ldr	r3, [r7, #20]
 80272a4:	429a      	cmp	r2, r3
 80272a6:	dbf2      	blt.n	802728e <mpz_abs_add_bit+0x64>
      dn = limb_index + 1;
 80272a8:	697b      	ldr	r3, [r7, #20]
 80272aa:	3301      	adds	r3, #1
 80272ac:	61fb      	str	r3, [r7, #28]
 80272ae:	e02c      	b.n	802730a <mpz_abs_add_bit+0xe0>
    }
  else
    {
      mp_limb_t cy;

      dp = d->_mp_d;
 80272b0:	687b      	ldr	r3, [r7, #4]
 80272b2:	689b      	ldr	r3, [r3, #8]
 80272b4:	60fb      	str	r3, [r7, #12]

      cy = mpn_add_1 (dp + limb_index, dp + limb_index, dn - limb_index, bit);
 80272b6:	697b      	ldr	r3, [r7, #20]
 80272b8:	009b      	lsls	r3, r3, #2
 80272ba:	68fa      	ldr	r2, [r7, #12]
 80272bc:	18d0      	adds	r0, r2, r3
 80272be:	697b      	ldr	r3, [r7, #20]
 80272c0:	009b      	lsls	r3, r3, #2
 80272c2:	68fa      	ldr	r2, [r7, #12]
 80272c4:	18d1      	adds	r1, r2, r3
 80272c6:	69fa      	ldr	r2, [r7, #28]
 80272c8:	697b      	ldr	r3, [r7, #20]
 80272ca:	1ad2      	subs	r2, r2, r3
 80272cc:	693b      	ldr	r3, [r7, #16]
 80272ce:	f7fb fb25 	bl	802291c <mpn_add_1>
 80272d2:	60b8      	str	r0, [r7, #8]
      if (cy > 0)
 80272d4:	68bb      	ldr	r3, [r7, #8]
 80272d6:	2b00      	cmp	r3, #0
 80272d8:	d017      	beq.n	802730a <mpz_abs_add_bit+0xe0>
	{
	  dp = MPZ_REALLOC (d, dn + 1);
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	681b      	ldr	r3, [r3, #0]
 80272de:	69fa      	ldr	r2, [r7, #28]
 80272e0:	429a      	cmp	r2, r3
 80272e2:	db07      	blt.n	80272f4 <mpz_abs_add_bit+0xca>
 80272e4:	69fb      	ldr	r3, [r7, #28]
 80272e6:	3301      	adds	r3, #1
 80272e8:	4619      	mov	r1, r3
 80272ea:	6878      	ldr	r0, [r7, #4]
 80272ec:	f7fd f92d 	bl	802454a <mpz_realloc>
 80272f0:	4603      	mov	r3, r0
 80272f2:	e001      	b.n	80272f8 <mpz_abs_add_bit+0xce>
 80272f4:	687b      	ldr	r3, [r7, #4]
 80272f6:	689b      	ldr	r3, [r3, #8]
 80272f8:	60fb      	str	r3, [r7, #12]
	  dp[dn++] = cy;
 80272fa:	69fb      	ldr	r3, [r7, #28]
 80272fc:	1c5a      	adds	r2, r3, #1
 80272fe:	61fa      	str	r2, [r7, #28]
 8027300:	009b      	lsls	r3, r3, #2
 8027302:	68fa      	ldr	r2, [r7, #12]
 8027304:	4413      	add	r3, r2
 8027306:	68ba      	ldr	r2, [r7, #8]
 8027308:	601a      	str	r2, [r3, #0]
	}
    }

  d->_mp_size = (d->_mp_size < 0) ? - dn : dn;
 802730a:	687b      	ldr	r3, [r7, #4]
 802730c:	685b      	ldr	r3, [r3, #4]
 802730e:	2b00      	cmp	r3, #0
 8027310:	da02      	bge.n	8027318 <mpz_abs_add_bit+0xee>
 8027312:	69fb      	ldr	r3, [r7, #28]
 8027314:	425b      	negs	r3, r3
 8027316:	e000      	b.n	802731a <mpz_abs_add_bit+0xf0>
 8027318:	69fb      	ldr	r3, [r7, #28]
 802731a:	687a      	ldr	r2, [r7, #4]
 802731c:	6053      	str	r3, [r2, #4]
}
 802731e:	bf00      	nop
 8027320:	3720      	adds	r7, #32
 8027322:	46bd      	mov	sp, r7
 8027324:	bd80      	pop	{r7, pc}
	...

08027328 <mpz_abs_sub_bit>:

static void
mpz_abs_sub_bit (mpz_t d, mp_bitcnt_t bit_index)
{
 8027328:	b580      	push	{r7, lr}
 802732a:	b088      	sub	sp, #32
 802732c:	af00      	add	r7, sp, #0
 802732e:	6078      	str	r0, [r7, #4]
 8027330:	6039      	str	r1, [r7, #0]
  mp_size_t dn, limb_index;
  mp_ptr dp;
  mp_limb_t bit;

  dn = GMP_ABS (d->_mp_size);
 8027332:	687b      	ldr	r3, [r7, #4]
 8027334:	685b      	ldr	r3, [r3, #4]
 8027336:	2b00      	cmp	r3, #0
 8027338:	bfb8      	it	lt
 802733a:	425b      	neglt	r3, r3
 802733c:	61fb      	str	r3, [r7, #28]
  dp = d->_mp_d;
 802733e:	687b      	ldr	r3, [r7, #4]
 8027340:	689b      	ldr	r3, [r3, #8]
 8027342:	61bb      	str	r3, [r7, #24]

  limb_index = bit_index / GMP_LIMB_BITS;
 8027344:	683b      	ldr	r3, [r7, #0]
 8027346:	095b      	lsrs	r3, r3, #5
 8027348:	617b      	str	r3, [r7, #20]
  bit = (mp_limb_t) 1 << (bit_index % GMP_LIMB_BITS);
 802734a:	683b      	ldr	r3, [r7, #0]
 802734c:	f003 031f 	and.w	r3, r3, #31
 8027350:	2201      	movs	r2, #1
 8027352:	fa02 f303 	lsl.w	r3, r2, r3
 8027356:	613b      	str	r3, [r7, #16]

  assert (limb_index < dn);
 8027358:	697a      	ldr	r2, [r7, #20]
 802735a:	69fb      	ldr	r3, [r7, #28]
 802735c:	429a      	cmp	r2, r3
 802735e:	db06      	blt.n	802736e <mpz_abs_sub_bit+0x46>
 8027360:	4b19      	ldr	r3, [pc, #100]	@ (80273c8 <mpz_abs_sub_bit+0xa0>)
 8027362:	4a1a      	ldr	r2, [pc, #104]	@ (80273cc <mpz_abs_sub_bit+0xa4>)
 8027364:	f640 61df 	movw	r1, #3807	@ 0xedf
 8027368:	4819      	ldr	r0, [pc, #100]	@ (80273d0 <mpz_abs_sub_bit+0xa8>)
 802736a:	f00d ff65 	bl	8035238 <__assert_func>

  gmp_assert_nocarry (mpn_sub_1 (dp + limb_index, dp + limb_index,
 802736e:	697b      	ldr	r3, [r7, #20]
 8027370:	009b      	lsls	r3, r3, #2
 8027372:	69ba      	ldr	r2, [r7, #24]
 8027374:	18d0      	adds	r0, r2, r3
 8027376:	697b      	ldr	r3, [r7, #20]
 8027378:	009b      	lsls	r3, r3, #2
 802737a:	69ba      	ldr	r2, [r7, #24]
 802737c:	18d1      	adds	r1, r2, r3
 802737e:	69fa      	ldr	r2, [r7, #28]
 8027380:	697b      	ldr	r3, [r7, #20]
 8027382:	1ad2      	subs	r2, r2, r3
 8027384:	693b      	ldr	r3, [r7, #16]
 8027386:	f7fb fb85 	bl	8022a94 <mpn_sub_1>
 802738a:	60f8      	str	r0, [r7, #12]
 802738c:	68fb      	ldr	r3, [r7, #12]
 802738e:	2b00      	cmp	r3, #0
 8027390:	d006      	beq.n	80273a0 <mpz_abs_sub_bit+0x78>
 8027392:	4b10      	ldr	r3, [pc, #64]	@ (80273d4 <mpz_abs_sub_bit+0xac>)
 8027394:	4a0d      	ldr	r2, [pc, #52]	@ (80273cc <mpz_abs_sub_bit+0xa4>)
 8027396:	f640 61e1 	movw	r1, #3809	@ 0xee1
 802739a:	480d      	ldr	r0, [pc, #52]	@ (80273d0 <mpz_abs_sub_bit+0xa8>)
 802739c:	f00d ff4c 	bl	8035238 <__assert_func>
				 dn - limb_index, bit));
  dn = mpn_normalized_size (dp, dn);
 80273a0:	69f9      	ldr	r1, [r7, #28]
 80273a2:	69b8      	ldr	r0, [r7, #24]
 80273a4:	f7fb fa70 	bl	8022888 <mpn_normalized_size>
 80273a8:	61f8      	str	r0, [r7, #28]
  d->_mp_size = (d->_mp_size < 0) ? - dn : dn;
 80273aa:	687b      	ldr	r3, [r7, #4]
 80273ac:	685b      	ldr	r3, [r3, #4]
 80273ae:	2b00      	cmp	r3, #0
 80273b0:	da02      	bge.n	80273b8 <mpz_abs_sub_bit+0x90>
 80273b2:	69fb      	ldr	r3, [r7, #28]
 80273b4:	425b      	negs	r3, r3
 80273b6:	e000      	b.n	80273ba <mpz_abs_sub_bit+0x92>
 80273b8:	69fb      	ldr	r3, [r7, #28]
 80273ba:	687a      	ldr	r2, [r7, #4]
 80273bc:	6053      	str	r3, [r2, #4]
}
 80273be:	bf00      	nop
 80273c0:	3720      	adds	r7, #32
 80273c2:	46bd      	mov	sp, r7
 80273c4:	bd80      	pop	{r7, pc}
 80273c6:	bf00      	nop
 80273c8:	0803875c 	.word	0x0803875c
 80273cc:	0803be50 	.word	0x0803be50
 80273d0:	080382a0 	.word	0x080382a0
 80273d4:	080384c4 	.word	0x080384c4

080273d8 <mpz_setbit>:

void
mpz_setbit (mpz_t d, mp_bitcnt_t bit_index)
{
 80273d8:	b580      	push	{r7, lr}
 80273da:	b082      	sub	sp, #8
 80273dc:	af00      	add	r7, sp, #0
 80273de:	6078      	str	r0, [r7, #4]
 80273e0:	6039      	str	r1, [r7, #0]
  if (!mpz_tstbit (d, bit_index))
 80273e2:	6839      	ldr	r1, [r7, #0]
 80273e4:	6878      	ldr	r0, [r7, #4]
 80273e6:	f7ff fecb 	bl	8027180 <mpz_tstbit>
 80273ea:	4603      	mov	r3, r0
 80273ec:	2b00      	cmp	r3, #0
 80273ee:	d10c      	bne.n	802740a <mpz_setbit+0x32>
    {
      if (d->_mp_size >= 0)
 80273f0:	687b      	ldr	r3, [r7, #4]
 80273f2:	685b      	ldr	r3, [r3, #4]
 80273f4:	2b00      	cmp	r3, #0
 80273f6:	db04      	blt.n	8027402 <mpz_setbit+0x2a>
	mpz_abs_add_bit (d, bit_index);
 80273f8:	6839      	ldr	r1, [r7, #0]
 80273fa:	6878      	ldr	r0, [r7, #4]
 80273fc:	f7ff ff15 	bl	802722a <mpz_abs_add_bit>
      else
	mpz_abs_sub_bit (d, bit_index);
    }
}
 8027400:	e003      	b.n	802740a <mpz_setbit+0x32>
	mpz_abs_sub_bit (d, bit_index);
 8027402:	6839      	ldr	r1, [r7, #0]
 8027404:	6878      	ldr	r0, [r7, #4]
 8027406:	f7ff ff8f 	bl	8027328 <mpz_abs_sub_bit>
}
 802740a:	bf00      	nop
 802740c:	3708      	adds	r7, #8
 802740e:	46bd      	mov	sp, r7
 8027410:	bd80      	pop	{r7, pc}

08027412 <mpz_scan1>:
  return c;
}

mp_bitcnt_t
mpz_scan1 (const mpz_t u, mp_bitcnt_t starting_bit)
{
 8027412:	b580      	push	{r7, lr}
 8027414:	b08a      	sub	sp, #40	@ 0x28
 8027416:	af02      	add	r7, sp, #8
 8027418:	6078      	str	r0, [r7, #4]
 802741a:	6039      	str	r1, [r7, #0]
  mp_ptr up;
  mp_size_t us, un, i;
  mp_limb_t limb, ux;

  us = u->_mp_size;
 802741c:	687b      	ldr	r3, [r7, #4]
 802741e:	685b      	ldr	r3, [r3, #4]
 8027420:	617b      	str	r3, [r7, #20]
  un = GMP_ABS (us);
 8027422:	697b      	ldr	r3, [r7, #20]
 8027424:	2b00      	cmp	r3, #0
 8027426:	bfb8      	it	lt
 8027428:	425b      	neglt	r3, r3
 802742a:	613b      	str	r3, [r7, #16]
  i = starting_bit / GMP_LIMB_BITS;
 802742c:	683b      	ldr	r3, [r7, #0]
 802742e:	095b      	lsrs	r3, r3, #5
 8027430:	60fb      	str	r3, [r7, #12]

  /* Past the end there's no 1 bits for u>=0, or an immediate 1 bit
     for u<0. Notice this test picks up any u==0 too. */
  if (i >= un)
 8027432:	68fa      	ldr	r2, [r7, #12]
 8027434:	693b      	ldr	r3, [r7, #16]
 8027436:	429a      	cmp	r2, r3
 8027438:	db07      	blt.n	802744a <mpz_scan1+0x38>
    return (us >= 0 ? ~(mp_bitcnt_t) 0 : starting_bit);
 802743a:	697b      	ldr	r3, [r7, #20]
 802743c:	2b00      	cmp	r3, #0
 802743e:	da01      	bge.n	8027444 <mpz_scan1+0x32>
 8027440:	683b      	ldr	r3, [r7, #0]
 8027442:	e03a      	b.n	80274ba <mpz_scan1+0xa8>
 8027444:	f04f 33ff 	mov.w	r3, #4294967295
 8027448:	e037      	b.n	80274ba <mpz_scan1+0xa8>

  up = u->_mp_d;
 802744a:	687b      	ldr	r3, [r7, #4]
 802744c:	689b      	ldr	r3, [r3, #8]
 802744e:	60bb      	str	r3, [r7, #8]
  ux = 0;
 8027450:	2300      	movs	r3, #0
 8027452:	61bb      	str	r3, [r7, #24]
  limb = up[i];
 8027454:	68fb      	ldr	r3, [r7, #12]
 8027456:	009b      	lsls	r3, r3, #2
 8027458:	68ba      	ldr	r2, [r7, #8]
 802745a:	4413      	add	r3, r2
 802745c:	681b      	ldr	r3, [r3, #0]
 802745e:	61fb      	str	r3, [r7, #28]

  if (starting_bit != 0)
 8027460:	683b      	ldr	r3, [r7, #0]
 8027462:	2b00      	cmp	r3, #0
 8027464:	d020      	beq.n	80274a8 <mpz_scan1+0x96>
    {
      if (us < 0)
 8027466:	697b      	ldr	r3, [r7, #20]
 8027468:	2b00      	cmp	r3, #0
 802746a:	da13      	bge.n	8027494 <mpz_scan1+0x82>
	{
	  ux = mpn_zero_p (up, i);
 802746c:	68f9      	ldr	r1, [r7, #12]
 802746e:	68b8      	ldr	r0, [r7, #8]
 8027470:	f7fb fa27 	bl	80228c2 <mpn_zero_p>
 8027474:	4603      	mov	r3, r0
 8027476:	61bb      	str	r3, [r7, #24]
	  limb = ~ limb + ux;
 8027478:	69ba      	ldr	r2, [r7, #24]
 802747a:	69fb      	ldr	r3, [r7, #28]
 802747c:	1ad3      	subs	r3, r2, r3
 802747e:	3b01      	subs	r3, #1
 8027480:	61fb      	str	r3, [r7, #28]
	  ux = - (mp_limb_t) (limb >= ux);
 8027482:	69fa      	ldr	r2, [r7, #28]
 8027484:	69bb      	ldr	r3, [r7, #24]
 8027486:	429a      	cmp	r2, r3
 8027488:	bf2c      	ite	cs
 802748a:	2301      	movcs	r3, #1
 802748c:	2300      	movcc	r3, #0
 802748e:	b2db      	uxtb	r3, r3
 8027490:	425b      	negs	r3, r3
 8027492:	61bb      	str	r3, [r7, #24]
	}

      /* Mask to 0 all bits before starting_bit, thus ignoring them. */
      limb &= GMP_LIMB_MAX << (starting_bit % GMP_LIMB_BITS);
 8027494:	683b      	ldr	r3, [r7, #0]
 8027496:	f003 031f 	and.w	r3, r3, #31
 802749a:	f04f 32ff 	mov.w	r2, #4294967295
 802749e:	fa02 f303 	lsl.w	r3, r2, r3
 80274a2:	69fa      	ldr	r2, [r7, #28]
 80274a4:	4013      	ands	r3, r2
 80274a6:	61fb      	str	r3, [r7, #28]
    }

  return mpn_common_scan (limb, i, up, un, ux);
 80274a8:	69bb      	ldr	r3, [r7, #24]
 80274aa:	9300      	str	r3, [sp, #0]
 80274ac:	693b      	ldr	r3, [r7, #16]
 80274ae:	68ba      	ldr	r2, [r7, #8]
 80274b0:	68f9      	ldr	r1, [r7, #12]
 80274b2:	69f8      	ldr	r0, [r7, #28]
 80274b4:	f7fb feb0 	bl	8023218 <mpn_common_scan>
 80274b8:	4603      	mov	r3, r0
}
 80274ba:	4618      	mov	r0, r3
 80274bc:	3720      	adds	r7, #32
 80274be:	46bd      	mov	sp, r7
 80274c0:	bd80      	pop	{r7, pc}
	...

080274c4 <mpz_sizeinbase>:

/* MPZ base conversion. */

size_t
mpz_sizeinbase (const mpz_t u, int base)
{
 80274c4:	b590      	push	{r4, r7, lr}
 80274c6:	b08d      	sub	sp, #52	@ 0x34
 80274c8:	af00      	add	r7, sp, #0
 80274ca:	6078      	str	r0, [r7, #4]
 80274cc:	6039      	str	r1, [r7, #0]
  mp_ptr tp;
  mp_bitcnt_t bits;
  struct gmp_div_inverse bi;
  size_t ndigits;

  assert (base >= 2);
 80274ce:	683b      	ldr	r3, [r7, #0]
 80274d0:	2b01      	cmp	r3, #1
 80274d2:	dc06      	bgt.n	80274e2 <mpz_sizeinbase+0x1e>
 80274d4:	4b64      	ldr	r3, [pc, #400]	@ (8027668 <mpz_sizeinbase+0x1a4>)
 80274d6:	4a65      	ldr	r2, [pc, #404]	@ (802766c <mpz_sizeinbase+0x1a8>)
 80274d8:	f241 0195 	movw	r1, #4245	@ 0x1095
 80274dc:	4864      	ldr	r0, [pc, #400]	@ (8027670 <mpz_sizeinbase+0x1ac>)
 80274de:	f00d feab 	bl	8035238 <__assert_func>
  assert (base <= 62);
 80274e2:	683b      	ldr	r3, [r7, #0]
 80274e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80274e6:	dd06      	ble.n	80274f6 <mpz_sizeinbase+0x32>
 80274e8:	4b62      	ldr	r3, [pc, #392]	@ (8027674 <mpz_sizeinbase+0x1b0>)
 80274ea:	4a60      	ldr	r2, [pc, #384]	@ (802766c <mpz_sizeinbase+0x1a8>)
 80274ec:	f241 0196 	movw	r1, #4246	@ 0x1096
 80274f0:	485f      	ldr	r0, [pc, #380]	@ (8027670 <mpz_sizeinbase+0x1ac>)
 80274f2:	f00d fea1 	bl	8035238 <__assert_func>

  un = GMP_ABS (u->_mp_size);
 80274f6:	687b      	ldr	r3, [r7, #4]
 80274f8:	685b      	ldr	r3, [r3, #4]
 80274fa:	2b00      	cmp	r3, #0
 80274fc:	bfb8      	it	lt
 80274fe:	425b      	neglt	r3, r3
 8027500:	627b      	str	r3, [r7, #36]	@ 0x24
  if (un == 0)
 8027502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027504:	2b00      	cmp	r3, #0
 8027506:	d101      	bne.n	802750c <mpz_sizeinbase+0x48>
    return 1;
 8027508:	2301      	movs	r3, #1
 802750a:	e0a8      	b.n	802765e <mpz_sizeinbase+0x19a>

  up = u->_mp_d;
 802750c:	687b      	ldr	r3, [r7, #4]
 802750e:	689b      	ldr	r3, [r3, #8]
 8027510:	623b      	str	r3, [r7, #32]

  bits = (un - 1) * GMP_LIMB_BITS + mpn_limb_size_in_base_2 (up[un-1]);
 8027512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027514:	3b01      	subs	r3, #1
 8027516:	015b      	lsls	r3, r3, #5
 8027518:	461c      	mov	r4, r3
 802751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802751c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027520:	3b01      	subs	r3, #1
 8027522:	009b      	lsls	r3, r3, #2
 8027524:	6a3a      	ldr	r2, [r7, #32]
 8027526:	4413      	add	r3, r2
 8027528:	681b      	ldr	r3, [r3, #0]
 802752a:	4618      	mov	r0, r3
 802752c:	f7fc ff82 	bl	8024434 <mpn_limb_size_in_base_2>
 8027530:	4603      	mov	r3, r0
 8027532:	4423      	add	r3, r4
 8027534:	61fb      	str	r3, [r7, #28]
  switch (base)
 8027536:	683b      	ldr	r3, [r7, #0]
 8027538:	3b02      	subs	r3, #2
 802753a:	2b1e      	cmp	r3, #30
 802753c:	d858      	bhi.n	80275f0 <mpz_sizeinbase+0x12c>
 802753e:	a201      	add	r2, pc, #4	@ (adr r2, 8027544 <mpz_sizeinbase+0x80>)
 8027540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027544:	080275c1 	.word	0x080275c1
 8027548:	080275f1 	.word	0x080275f1
 802754c:	080275c5 	.word	0x080275c5
 8027550:	080275f1 	.word	0x080275f1
 8027554:	080275f1 	.word	0x080275f1
 8027558:	080275f1 	.word	0x080275f1
 802755c:	080275cd 	.word	0x080275cd
 8027560:	080275f1 	.word	0x080275f1
 8027564:	080275f1 	.word	0x080275f1
 8027568:	080275f1 	.word	0x080275f1
 802756c:	080275f1 	.word	0x080275f1
 8027570:	080275f1 	.word	0x080275f1
 8027574:	080275f1 	.word	0x080275f1
 8027578:	080275f1 	.word	0x080275f1
 802757c:	080275db 	.word	0x080275db
 8027580:	080275f1 	.word	0x080275f1
 8027584:	080275f1 	.word	0x080275f1
 8027588:	080275f1 	.word	0x080275f1
 802758c:	080275f1 	.word	0x080275f1
 8027590:	080275f1 	.word	0x080275f1
 8027594:	080275f1 	.word	0x080275f1
 8027598:	080275f1 	.word	0x080275f1
 802759c:	080275f1 	.word	0x080275f1
 80275a0:	080275f1 	.word	0x080275f1
 80275a4:	080275f1 	.word	0x080275f1
 80275a8:	080275f1 	.word	0x080275f1
 80275ac:	080275f1 	.word	0x080275f1
 80275b0:	080275f1 	.word	0x080275f1
 80275b4:	080275f1 	.word	0x080275f1
 80275b8:	080275f1 	.word	0x080275f1
 80275bc:	080275e3 	.word	0x080275e3
    {
    case 2:
      return bits;
 80275c0:	69fb      	ldr	r3, [r7, #28]
 80275c2:	e04c      	b.n	802765e <mpz_sizeinbase+0x19a>
    case 4:
      return (bits + 1) / 2;
 80275c4:	69fb      	ldr	r3, [r7, #28]
 80275c6:	3301      	adds	r3, #1
 80275c8:	085b      	lsrs	r3, r3, #1
 80275ca:	e048      	b.n	802765e <mpz_sizeinbase+0x19a>
    case 8:
      return (bits + 2) / 3;
 80275cc:	69fb      	ldr	r3, [r7, #28]
 80275ce:	3302      	adds	r3, #2
 80275d0:	4a29      	ldr	r2, [pc, #164]	@ (8027678 <mpz_sizeinbase+0x1b4>)
 80275d2:	fba2 2303 	umull	r2, r3, r2, r3
 80275d6:	085b      	lsrs	r3, r3, #1
 80275d8:	e041      	b.n	802765e <mpz_sizeinbase+0x19a>
    case 16:
      return (bits + 3) / 4;
 80275da:	69fb      	ldr	r3, [r7, #28]
 80275dc:	3303      	adds	r3, #3
 80275de:	089b      	lsrs	r3, r3, #2
 80275e0:	e03d      	b.n	802765e <mpz_sizeinbase+0x19a>
    case 32:
      return (bits + 4) / 5;
 80275e2:	69fb      	ldr	r3, [r7, #28]
 80275e4:	3304      	adds	r3, #4
 80275e6:	4a25      	ldr	r2, [pc, #148]	@ (802767c <mpz_sizeinbase+0x1b8>)
 80275e8:	fba2 2303 	umull	r2, r3, r2, r3
 80275ec:	089b      	lsrs	r3, r3, #2
 80275ee:	e036      	b.n	802765e <mpz_sizeinbase+0x19a>
      /* FIXME: Do something more clever for the common case of base
	 10. */
    }

  tp = gmp_alloc_limbs (un);
 80275f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80275f2:	f7fb f871 	bl	80226d8 <gmp_alloc_limbs>
 80275f6:	61b8      	str	r0, [r7, #24]
  mpn_copyi (tp, up, un);
 80275f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80275fa:	6a39      	ldr	r1, [r7, #32]
 80275fc:	69b8      	ldr	r0, [r7, #24]
 80275fe:	f7fb f8b5 	bl	802276c <mpn_copyi>
  mpn_div_qr_1_invert (&bi, base);
 8027602:	683a      	ldr	r2, [r7, #0]
 8027604:	f107 0308 	add.w	r3, r7, #8
 8027608:	4611      	mov	r1, r2
 802760a:	4618      	mov	r0, r3
 802760c:	f7fb ffa8 	bl	8023560 <mpn_div_qr_1_invert>

  tn = un;
 8027610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ndigits = 0;
 8027614:	2300      	movs	r3, #0
 8027616:	62bb      	str	r3, [r7, #40]	@ 0x28
  do
    {
      ndigits++;
 8027618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802761a:	3301      	adds	r3, #1
 802761c:	62bb      	str	r3, [r7, #40]	@ 0x28
      mpn_div_qr_1_preinv (tp, tp, tn, &bi);
 802761e:	f107 0308 	add.w	r3, r7, #8
 8027622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027624:	69b9      	ldr	r1, [r7, #24]
 8027626:	69b8      	ldr	r0, [r7, #24]
 8027628:	f7fc f8e8 	bl	80237fc <mpn_div_qr_1_preinv>
      tn -= (tp[tn-1] == 0);
 802762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802762e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027632:	3b01      	subs	r3, #1
 8027634:	009b      	lsls	r3, r3, #2
 8027636:	69ba      	ldr	r2, [r7, #24]
 8027638:	4413      	add	r3, r2
 802763a:	681b      	ldr	r3, [r3, #0]
 802763c:	2b00      	cmp	r3, #0
 802763e:	bf0c      	ite	eq
 8027640:	2301      	moveq	r3, #1
 8027642:	2300      	movne	r3, #0
 8027644:	b2db      	uxtb	r3, r3
 8027646:	461a      	mov	r2, r3
 8027648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802764a:	1a9b      	subs	r3, r3, r2
 802764c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  while (tn > 0);
 802764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027650:	2b00      	cmp	r3, #0
 8027652:	dce1      	bgt.n	8027618 <mpz_sizeinbase+0x154>

  gmp_free_limbs (tp, un);
 8027654:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8027656:	69b8      	ldr	r0, [r7, #24]
 8027658:	f7fb f876 	bl	8022748 <gmp_free_limbs>
  return ndigits;
 802765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 802765e:	4618      	mov	r0, r3
 8027660:	3734      	adds	r7, #52	@ 0x34
 8027662:	46bd      	mov	sp, r7
 8027664:	bd90      	pop	{r4, r7, pc}
 8027666:	bf00      	nop
 8027668:	0803877c 	.word	0x0803877c
 802766c:	0803be60 	.word	0x0803be60
 8027670:	080382a0 	.word	0x080382a0
 8027674:	08038788 	.word	0x08038788
 8027678:	aaaaaaab 	.word	0xaaaaaaab
 802767c:	cccccccd 	.word	0xcccccccd

08027680 <gmp_detect_endian>:
}


static int
gmp_detect_endian (void)
{
 8027680:	b480      	push	{r7}
 8027682:	b083      	sub	sp, #12
 8027684:	af00      	add	r7, sp, #0
  static const int i = 2;
  const unsigned char *p = (const unsigned char *) &i;
 8027686:	4b06      	ldr	r3, [pc, #24]	@ (80276a0 <gmp_detect_endian+0x20>)
 8027688:	607b      	str	r3, [r7, #4]
  return 1 - *p;
 802768a:	687b      	ldr	r3, [r7, #4]
 802768c:	781b      	ldrb	r3, [r3, #0]
 802768e:	f1c3 0301 	rsb	r3, r3, #1
}
 8027692:	4618      	mov	r0, r3
 8027694:	370c      	adds	r7, #12
 8027696:	46bd      	mov	sp, r7
 8027698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802769c:	4770      	bx	lr
 802769e:	bf00      	nop
 80276a0:	0803be70 	.word	0x0803be70

080276a4 <mpz_import>:

/* Import and export. Does not support nails. */
void
mpz_import (mpz_t r, size_t count, int order, size_t size, int endian,
	    size_t nails, const void *src)
{
 80276a4:	b580      	push	{r7, lr}
 80276a6:	b08c      	sub	sp, #48	@ 0x30
 80276a8:	af00      	add	r7, sp, #0
 80276aa:	60f8      	str	r0, [r7, #12]
 80276ac:	60b9      	str	r1, [r7, #8]
 80276ae:	607a      	str	r2, [r7, #4]
 80276b0:	603b      	str	r3, [r7, #0]
     the low end). */
  size_t bytes;
  /* The index where the limb should be stored, when completed. */
  mp_size_t i;

  if (nails != 0)
 80276b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80276b4:	2b00      	cmp	r3, #0
 80276b6:	d002      	beq.n	80276be <mpz_import+0x1a>
    gmp_die ("mpz_import: Nails not supported.");
 80276b8:	4860      	ldr	r0, [pc, #384]	@ (802783c <mpz_import+0x198>)
 80276ba:	f7fa ffb1 	bl	8022620 <gmp_die>

  assert (order == 1 || order == -1);
 80276be:	687b      	ldr	r3, [r7, #4]
 80276c0:	2b01      	cmp	r3, #1
 80276c2:	d00a      	beq.n	80276da <mpz_import+0x36>
 80276c4:	687b      	ldr	r3, [r7, #4]
 80276c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80276ca:	d006      	beq.n	80276da <mpz_import+0x36>
 80276cc:	4b5c      	ldr	r3, [pc, #368]	@ (8027840 <mpz_import+0x19c>)
 80276ce:	4a5d      	ldr	r2, [pc, #372]	@ (8027844 <mpz_import+0x1a0>)
 80276d0:	f241 11aa 	movw	r1, #4522	@ 0x11aa
 80276d4:	485c      	ldr	r0, [pc, #368]	@ (8027848 <mpz_import+0x1a4>)
 80276d6:	f00d fdaf 	bl	8035238 <__assert_func>
  assert (endian >= -1 && endian <= 1);
 80276da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80276dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80276e0:	db02      	blt.n	80276e8 <mpz_import+0x44>
 80276e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80276e4:	2b01      	cmp	r3, #1
 80276e6:	dd06      	ble.n	80276f6 <mpz_import+0x52>
 80276e8:	4b58      	ldr	r3, [pc, #352]	@ (802784c <mpz_import+0x1a8>)
 80276ea:	4a56      	ldr	r2, [pc, #344]	@ (8027844 <mpz_import+0x1a0>)
 80276ec:	f241 11ab 	movw	r1, #4523	@ 0x11ab
 80276f0:	4855      	ldr	r0, [pc, #340]	@ (8027848 <mpz_import+0x1a4>)
 80276f2:	f00d fda1 	bl	8035238 <__assert_func>

  if (endian == 0)
 80276f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80276f8:	2b00      	cmp	r3, #0
 80276fa:	d102      	bne.n	8027702 <mpz_import+0x5e>
    endian = gmp_detect_endian ();
 80276fc:	f7ff ffc0 	bl	8027680 <gmp_detect_endian>
 8027700:	63b8      	str	r0, [r7, #56]	@ 0x38

  p = (unsigned char *) src;
 8027702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027704:	62fb      	str	r3, [r7, #44]	@ 0x2c

  word_step = (order != endian) ? 2 * size : 0;
 8027706:	687a      	ldr	r2, [r7, #4]
 8027708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802770a:	429a      	cmp	r2, r3
 802770c:	d002      	beq.n	8027714 <mpz_import+0x70>
 802770e:	683b      	ldr	r3, [r7, #0]
 8027710:	005b      	lsls	r3, r3, #1
 8027712:	e000      	b.n	8027716 <mpz_import+0x72>
 8027714:	2300      	movs	r3, #0
 8027716:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Process bytes from the least significant end, so point p at the
     least significant word. */
  if (order == 1)
 8027718:	687b      	ldr	r3, [r7, #4]
 802771a:	2b01      	cmp	r3, #1
 802771c:	d10a      	bne.n	8027734 <mpz_import+0x90>
    {
      p += size * (count - 1);
 802771e:	68bb      	ldr	r3, [r7, #8]
 8027720:	3b01      	subs	r3, #1
 8027722:	683a      	ldr	r2, [r7, #0]
 8027724:	fb02 f303 	mul.w	r3, r2, r3
 8027728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802772a:	4413      	add	r3, r2
 802772c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      word_step = - word_step;
 802772e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027730:	425b      	negs	r3, r3
 8027732:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

  /* And at least significant byte of that word. */
  if (endian == 1)
 8027734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027736:	2b01      	cmp	r3, #1
 8027738:	d104      	bne.n	8027744 <mpz_import+0xa0>
    p += (size - 1);
 802773a:	683b      	ldr	r3, [r7, #0]
 802773c:	3b01      	subs	r3, #1
 802773e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027740:	4413      	add	r3, r2
 8027742:	62fb      	str	r3, [r7, #44]	@ 0x2c

  rn = (size * count + sizeof(mp_limb_t) - 1) / sizeof(mp_limb_t);
 8027744:	683b      	ldr	r3, [r7, #0]
 8027746:	68ba      	ldr	r2, [r7, #8]
 8027748:	fb02 f303 	mul.w	r3, r2, r3
 802774c:	3303      	adds	r3, #3
 802774e:	089b      	lsrs	r3, r3, #2
 8027750:	617b      	str	r3, [r7, #20]
  rp = MPZ_REALLOC (r, rn);
 8027752:	68fb      	ldr	r3, [r7, #12]
 8027754:	681b      	ldr	r3, [r3, #0]
 8027756:	697a      	ldr	r2, [r7, #20]
 8027758:	429a      	cmp	r2, r3
 802775a:	dd05      	ble.n	8027768 <mpz_import+0xc4>
 802775c:	6979      	ldr	r1, [r7, #20]
 802775e:	68f8      	ldr	r0, [r7, #12]
 8027760:	f7fc fef3 	bl	802454a <mpz_realloc>
 8027764:	4603      	mov	r3, r0
 8027766:	e001      	b.n	802776c <mpz_import+0xc8>
 8027768:	68fb      	ldr	r3, [r7, #12]
 802776a:	689b      	ldr	r3, [r3, #8]
 802776c:	613b      	str	r3, [r7, #16]

  for (limb = 0, bytes = 0, i = 0; count > 0; count--, p += word_step)
 802776e:	2300      	movs	r3, #0
 8027770:	627b      	str	r3, [r7, #36]	@ 0x24
 8027772:	2300      	movs	r3, #0
 8027774:	623b      	str	r3, [r7, #32]
 8027776:	2300      	movs	r3, #0
 8027778:	61fb      	str	r3, [r7, #28]
 802777a:	e030      	b.n	80277de <mpz_import+0x13a>
    {
      size_t j;
      for (j = 0; j < size; j++, p -= (ptrdiff_t) endian)
 802777c:	2300      	movs	r3, #0
 802777e:	61bb      	str	r3, [r7, #24]
 8027780:	e022      	b.n	80277c8 <mpz_import+0x124>
	{
	  limb |= (mp_limb_t) *p << (bytes++ * CHAR_BIT);
 8027782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027784:	781b      	ldrb	r3, [r3, #0]
 8027786:	4619      	mov	r1, r3
 8027788:	6a3b      	ldr	r3, [r7, #32]
 802778a:	1c5a      	adds	r2, r3, #1
 802778c:	623a      	str	r2, [r7, #32]
 802778e:	00db      	lsls	r3, r3, #3
 8027790:	fa01 f303 	lsl.w	r3, r1, r3
 8027794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027796:	4313      	orrs	r3, r2
 8027798:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (bytes == sizeof(mp_limb_t))
 802779a:	6a3b      	ldr	r3, [r7, #32]
 802779c:	2b04      	cmp	r3, #4
 802779e:	d10b      	bne.n	80277b8 <mpz_import+0x114>
	    {
	      rp[i++] = limb;
 80277a0:	69fb      	ldr	r3, [r7, #28]
 80277a2:	1c5a      	adds	r2, r3, #1
 80277a4:	61fa      	str	r2, [r7, #28]
 80277a6:	009b      	lsls	r3, r3, #2
 80277a8:	693a      	ldr	r2, [r7, #16]
 80277aa:	4413      	add	r3, r2
 80277ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80277ae:	601a      	str	r2, [r3, #0]
	      bytes = 0;
 80277b0:	2300      	movs	r3, #0
 80277b2:	623b      	str	r3, [r7, #32]
	      limb = 0;
 80277b4:	2300      	movs	r3, #0
 80277b6:	627b      	str	r3, [r7, #36]	@ 0x24
      for (j = 0; j < size; j++, p -= (ptrdiff_t) endian)
 80277b8:	69bb      	ldr	r3, [r7, #24]
 80277ba:	3301      	adds	r3, #1
 80277bc:	61bb      	str	r3, [r7, #24]
 80277be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80277c0:	425b      	negs	r3, r3
 80277c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80277c4:	4413      	add	r3, r2
 80277c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80277c8:	69ba      	ldr	r2, [r7, #24]
 80277ca:	683b      	ldr	r3, [r7, #0]
 80277cc:	429a      	cmp	r2, r3
 80277ce:	d3d8      	bcc.n	8027782 <mpz_import+0xde>
  for (limb = 0, bytes = 0, i = 0; count > 0; count--, p += word_step)
 80277d0:	68bb      	ldr	r3, [r7, #8]
 80277d2:	3b01      	subs	r3, #1
 80277d4:	60bb      	str	r3, [r7, #8]
 80277d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80277d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80277da:	4413      	add	r3, r2
 80277dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80277de:	68bb      	ldr	r3, [r7, #8]
 80277e0:	2b00      	cmp	r3, #0
 80277e2:	d1cb      	bne.n	802777c <mpz_import+0xd8>
	    }
	}
    }
  assert (i + (bytes > 0) == rn);
 80277e4:	6a3b      	ldr	r3, [r7, #32]
 80277e6:	2b00      	cmp	r3, #0
 80277e8:	bf14      	ite	ne
 80277ea:	2301      	movne	r3, #1
 80277ec:	2300      	moveq	r3, #0
 80277ee:	b2db      	uxtb	r3, r3
 80277f0:	461a      	mov	r2, r3
 80277f2:	69fb      	ldr	r3, [r7, #28]
 80277f4:	4413      	add	r3, r2
 80277f6:	697a      	ldr	r2, [r7, #20]
 80277f8:	429a      	cmp	r2, r3
 80277fa:	d006      	beq.n	802780a <mpz_import+0x166>
 80277fc:	4b14      	ldr	r3, [pc, #80]	@ (8027850 <mpz_import+0x1ac>)
 80277fe:	4a11      	ldr	r2, [pc, #68]	@ (8027844 <mpz_import+0x1a0>)
 8027800:	f241 11d1 	movw	r1, #4561	@ 0x11d1
 8027804:	4810      	ldr	r0, [pc, #64]	@ (8027848 <mpz_import+0x1a4>)
 8027806:	f00d fd17 	bl	8035238 <__assert_func>
  if (limb != 0)
 802780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802780c:	2b00      	cmp	r3, #0
 802780e:	d008      	beq.n	8027822 <mpz_import+0x17e>
    rp[i++] = limb;
 8027810:	69fb      	ldr	r3, [r7, #28]
 8027812:	1c5a      	adds	r2, r3, #1
 8027814:	61fa      	str	r2, [r7, #28]
 8027816:	009b      	lsls	r3, r3, #2
 8027818:	693a      	ldr	r2, [r7, #16]
 802781a:	4413      	add	r3, r2
 802781c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802781e:	601a      	str	r2, [r3, #0]
 8027820:	e004      	b.n	802782c <mpz_import+0x188>
  else
    i = mpn_normalized_size (rp, i);
 8027822:	69f9      	ldr	r1, [r7, #28]
 8027824:	6938      	ldr	r0, [r7, #16]
 8027826:	f7fb f82f 	bl	8022888 <mpn_normalized_size>
 802782a:	61f8      	str	r0, [r7, #28]

  r->_mp_size = i;
 802782c:	68fb      	ldr	r3, [r7, #12]
 802782e:	69fa      	ldr	r2, [r7, #28]
 8027830:	605a      	str	r2, [r3, #4]
}
 8027832:	bf00      	nop
 8027834:	3730      	adds	r7, #48	@ 0x30
 8027836:	46bd      	mov	sp, r7
 8027838:	bd80      	pop	{r7, pc}
 802783a:	bf00      	nop
 802783c:	08038830 	.word	0x08038830
 8027840:	08038854 	.word	0x08038854
 8027844:	0803be74 	.word	0x0803be74
 8027848:	080382a0 	.word	0x080382a0
 802784c:	08038870 	.word	0x08038870
 8027850:	0803888c 	.word	0x0803888c

08027854 <mpz_export>:

void *
mpz_export (void *r, size_t *countp, int order, size_t size, int endian,
	    size_t nails, const mpz_t u)
{
 8027854:	b580      	push	{r7, lr}
 8027856:	b090      	sub	sp, #64	@ 0x40
 8027858:	af00      	add	r7, sp, #0
 802785a:	60f8      	str	r0, [r7, #12]
 802785c:	60b9      	str	r1, [r7, #8]
 802785e:	607a      	str	r2, [r7, #4]
 8027860:	603b      	str	r3, [r7, #0]
  size_t count;
  mp_size_t un;

  if (nails != 0)
 8027862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027864:	2b00      	cmp	r3, #0
 8027866:	d002      	beq.n	802786e <mpz_export+0x1a>
    gmp_die ("mpz_export: Nails not supported.");
 8027868:	4880      	ldr	r0, [pc, #512]	@ (8027a6c <mpz_export+0x218>)
 802786a:	f7fa fed9 	bl	8022620 <gmp_die>

  assert (order == 1 || order == -1);
 802786e:	687b      	ldr	r3, [r7, #4]
 8027870:	2b01      	cmp	r3, #1
 8027872:	d00a      	beq.n	802788a <mpz_export+0x36>
 8027874:	687b      	ldr	r3, [r7, #4]
 8027876:	f1b3 3fff 	cmp.w	r3, #4294967295
 802787a:	d006      	beq.n	802788a <mpz_export+0x36>
 802787c:	4b7c      	ldr	r3, [pc, #496]	@ (8027a70 <mpz_export+0x21c>)
 802787e:	4a7d      	ldr	r2, [pc, #500]	@ (8027a74 <mpz_export+0x220>)
 8027880:	f241 11e4 	movw	r1, #4580	@ 0x11e4
 8027884:	487c      	ldr	r0, [pc, #496]	@ (8027a78 <mpz_export+0x224>)
 8027886:	f00d fcd7 	bl	8035238 <__assert_func>
  assert (endian >= -1 && endian <= 1);
 802788a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027890:	db02      	blt.n	8027898 <mpz_export+0x44>
 8027892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027894:	2b01      	cmp	r3, #1
 8027896:	dd06      	ble.n	80278a6 <mpz_export+0x52>
 8027898:	4b78      	ldr	r3, [pc, #480]	@ (8027a7c <mpz_export+0x228>)
 802789a:	4a76      	ldr	r2, [pc, #472]	@ (8027a74 <mpz_export+0x220>)
 802789c:	f241 11e5 	movw	r1, #4581	@ 0x11e5
 80278a0:	4875      	ldr	r0, [pc, #468]	@ (8027a78 <mpz_export+0x224>)
 80278a2:	f00d fcc9 	bl	8035238 <__assert_func>
  assert (size > 0 || u->_mp_size == 0);
 80278a6:	683b      	ldr	r3, [r7, #0]
 80278a8:	2b00      	cmp	r3, #0
 80278aa:	d10a      	bne.n	80278c2 <mpz_export+0x6e>
 80278ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80278ae:	685b      	ldr	r3, [r3, #4]
 80278b0:	2b00      	cmp	r3, #0
 80278b2:	d006      	beq.n	80278c2 <mpz_export+0x6e>
 80278b4:	4b72      	ldr	r3, [pc, #456]	@ (8027a80 <mpz_export+0x22c>)
 80278b6:	4a6f      	ldr	r2, [pc, #444]	@ (8027a74 <mpz_export+0x220>)
 80278b8:	f241 11e6 	movw	r1, #4582	@ 0x11e6
 80278bc:	486e      	ldr	r0, [pc, #440]	@ (8027a78 <mpz_export+0x224>)
 80278be:	f00d fcbb 	bl	8035238 <__assert_func>

  un = u->_mp_size;
 80278c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80278c4:	685b      	ldr	r3, [r3, #4]
 80278c6:	61fb      	str	r3, [r7, #28]
  count = 0;
 80278c8:	2300      	movs	r3, #0
 80278ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (un != 0)
 80278cc:	69fb      	ldr	r3, [r7, #28]
 80278ce:	2b00      	cmp	r3, #0
 80278d0:	f000 80c1 	beq.w	8027a56 <mpz_export+0x202>
      /* The number of bytes left to do in this limb. */
      size_t bytes;
      /* The index where the limb was read. */
      mp_size_t i;

      un = GMP_ABS (un);
 80278d4:	69fb      	ldr	r3, [r7, #28]
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	bfb8      	it	lt
 80278da:	425b      	neglt	r3, r3
 80278dc:	61fb      	str	r3, [r7, #28]

      /* Count bytes in top limb. */
      limb = u->_mp_d[un-1];
 80278de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80278e0:	689a      	ldr	r2, [r3, #8]
 80278e2:	69fb      	ldr	r3, [r7, #28]
 80278e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80278e8:	3b01      	subs	r3, #1
 80278ea:	009b      	lsls	r3, r3, #2
 80278ec:	4413      	add	r3, r2
 80278ee:	681b      	ldr	r3, [r3, #0]
 80278f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      assert (limb != 0);
 80278f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80278f4:	2b00      	cmp	r3, #0
 80278f6:	d106      	bne.n	8027906 <mpz_export+0xb2>
 80278f8:	4b62      	ldr	r3, [pc, #392]	@ (8027a84 <mpz_export+0x230>)
 80278fa:	4a5e      	ldr	r2, [pc, #376]	@ (8027a74 <mpz_export+0x220>)
 80278fc:	f241 11fa 	movw	r1, #4602	@ 0x11fa
 8027900:	485d      	ldr	r0, [pc, #372]	@ (8027a78 <mpz_export+0x224>)
 8027902:	f00d fc99 	bl	8035238 <__assert_func>

      k = (GMP_LIMB_BITS <= CHAR_BIT);
 8027906:	2300      	movs	r3, #0
 8027908:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (!k)
 802790a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802790c:	2b00      	cmp	r3, #0
 802790e:	d10c      	bne.n	802792a <mpz_export+0xd6>
	{
	  do {
	    int LOCAL_CHAR_BIT = CHAR_BIT;
 8027910:	2308      	movs	r3, #8
 8027912:	61bb      	str	r3, [r7, #24]
	    k++; limb >>= LOCAL_CHAR_BIT;
 8027914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027916:	3301      	adds	r3, #1
 8027918:	63bb      	str	r3, [r7, #56]	@ 0x38
 802791a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802791c:	69bb      	ldr	r3, [r7, #24]
 802791e:	fa22 f303 	lsr.w	r3, r2, r3
 8027922:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  } while (limb != 0);
 8027924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027926:	2b00      	cmp	r3, #0
 8027928:	d1f2      	bne.n	8027910 <mpz_export+0xbc>
	}
      /* else limb = 0; */

      count = (k + (un-1) * sizeof (mp_limb_t) + size - 1) / size;
 802792a:	69fb      	ldr	r3, [r7, #28]
 802792c:	3b01      	subs	r3, #1
 802792e:	009a      	lsls	r2, r3, #2
 8027930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027932:	441a      	add	r2, r3
 8027934:	683b      	ldr	r3, [r7, #0]
 8027936:	4413      	add	r3, r2
 8027938:	1e5a      	subs	r2, r3, #1
 802793a:	683b      	ldr	r3, [r7, #0]
 802793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8027940:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if (!r)
 8027942:	68fb      	ldr	r3, [r7, #12]
 8027944:	2b00      	cmp	r3, #0
 8027946:	d108      	bne.n	802795a <mpz_export+0x106>
	r = gmp_alloc (count * size);
 8027948:	4b4f      	ldr	r3, [pc, #316]	@ (8027a88 <mpz_export+0x234>)
 802794a:	681b      	ldr	r3, [r3, #0]
 802794c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802794e:	6839      	ldr	r1, [r7, #0]
 8027950:	fb01 f202 	mul.w	r2, r1, r2
 8027954:	4610      	mov	r0, r2
 8027956:	4798      	blx	r3
 8027958:	60f8      	str	r0, [r7, #12]

      if (endian == 0)
 802795a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802795c:	2b00      	cmp	r3, #0
 802795e:	d102      	bne.n	8027966 <mpz_export+0x112>
	endian = gmp_detect_endian ();
 8027960:	f7ff fe8e 	bl	8027680 <gmp_detect_endian>
 8027964:	64b8      	str	r0, [r7, #72]	@ 0x48

      p = (unsigned char *) r;
 8027966:	68fb      	ldr	r3, [r7, #12]
 8027968:	637b      	str	r3, [r7, #52]	@ 0x34

      word_step = (order != endian) ? 2 * size : 0;
 802796a:	687a      	ldr	r2, [r7, #4]
 802796c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802796e:	429a      	cmp	r2, r3
 8027970:	d002      	beq.n	8027978 <mpz_export+0x124>
 8027972:	683b      	ldr	r3, [r7, #0]
 8027974:	005b      	lsls	r3, r3, #1
 8027976:	e000      	b.n	802797a <mpz_export+0x126>
 8027978:	2300      	movs	r3, #0
 802797a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Process bytes from the least significant end, so point p at the
	 least significant word. */
      if (order == 1)
 802797c:	687b      	ldr	r3, [r7, #4]
 802797e:	2b01      	cmp	r3, #1
 8027980:	d10a      	bne.n	8027998 <mpz_export+0x144>
	{
	  p += size * (count - 1);
 8027982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027984:	3b01      	subs	r3, #1
 8027986:	683a      	ldr	r2, [r7, #0]
 8027988:	fb02 f303 	mul.w	r3, r2, r3
 802798c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802798e:	4413      	add	r3, r2
 8027990:	637b      	str	r3, [r7, #52]	@ 0x34
	  word_step = - word_step;
 8027992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027994:	425b      	negs	r3, r3
 8027996:	633b      	str	r3, [r7, #48]	@ 0x30
	}

      /* And at least significant byte of that word. */
      if (endian == 1)
 8027998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802799a:	2b01      	cmp	r3, #1
 802799c:	d104      	bne.n	80279a8 <mpz_export+0x154>
	p += (size - 1);
 802799e:	683b      	ldr	r3, [r7, #0]
 80279a0:	3b01      	subs	r3, #1
 80279a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80279a4:	4413      	add	r3, r2
 80279a6:	637b      	str	r3, [r7, #52]	@ 0x34

      for (bytes = 0, i = 0, k = 0; k < count; k++, p += word_step)
 80279a8:	2300      	movs	r3, #0
 80279aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80279ac:	2300      	movs	r3, #0
 80279ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80279b0:	2300      	movs	r3, #0
 80279b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80279b4:	e035      	b.n	8027a22 <mpz_export+0x1ce>
	{
	  size_t j;
	  for (j = 0; j < size; ++j, p -= (ptrdiff_t) endian)
 80279b6:	2300      	movs	r3, #0
 80279b8:	623b      	str	r3, [r7, #32]
 80279ba:	e027      	b.n	8027a0c <mpz_export+0x1b8>
		  else
		    *p = 0;
		}
	      else
		{
		  int LOCAL_CHAR_BIT = CHAR_BIT;
 80279bc:	2308      	movs	r3, #8
 80279be:	617b      	str	r3, [r7, #20]
		  if (bytes == 0)
 80279c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	d10e      	bne.n	80279e4 <mpz_export+0x190>
		    {
		      if (i < un)
 80279c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80279c8:	69fb      	ldr	r3, [r7, #28]
 80279ca:	429a      	cmp	r2, r3
 80279cc:	da08      	bge.n	80279e0 <mpz_export+0x18c>
			limb = u->_mp_d[i++];
 80279ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80279d0:	689a      	ldr	r2, [r3, #8]
 80279d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80279d4:	1c59      	adds	r1, r3, #1
 80279d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80279d8:	009b      	lsls	r3, r3, #2
 80279da:	4413      	add	r3, r2
 80279dc:	681b      	ldr	r3, [r3, #0]
 80279de:	62fb      	str	r3, [r7, #44]	@ 0x2c
		      bytes = sizeof (mp_limb_t);
 80279e0:	2304      	movs	r3, #4
 80279e2:	62bb      	str	r3, [r7, #40]	@ 0x28
		    }
		  *p = limb;
 80279e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80279e6:	b2da      	uxtb	r2, r3
 80279e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80279ea:	701a      	strb	r2, [r3, #0]
		  limb >>= LOCAL_CHAR_BIT;
 80279ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80279ee:	697b      	ldr	r3, [r7, #20]
 80279f0:	fa22 f303 	lsr.w	r3, r2, r3
 80279f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  bytes--;
 80279f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80279f8:	3b01      	subs	r3, #1
 80279fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	  for (j = 0; j < size; ++j, p -= (ptrdiff_t) endian)
 80279fc:	6a3b      	ldr	r3, [r7, #32]
 80279fe:	3301      	adds	r3, #1
 8027a00:	623b      	str	r3, [r7, #32]
 8027a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027a04:	425b      	negs	r3, r3
 8027a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027a08:	4413      	add	r3, r2
 8027a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8027a0c:	6a3a      	ldr	r2, [r7, #32]
 8027a0e:	683b      	ldr	r3, [r7, #0]
 8027a10:	429a      	cmp	r2, r3
 8027a12:	d3d3      	bcc.n	80279bc <mpz_export+0x168>
      for (bytes = 0, i = 0, k = 0; k < count; k++, p += word_step)
 8027a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a16:	3301      	adds	r3, #1
 8027a18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8027a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027a1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027a1e:	4413      	add	r3, r2
 8027a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8027a22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027a26:	429a      	cmp	r2, r3
 8027a28:	d3c5      	bcc.n	80279b6 <mpz_export+0x162>
		}
	    }
	}
      assert (i == un);
 8027a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027a2c:	69fb      	ldr	r3, [r7, #28]
 8027a2e:	429a      	cmp	r2, r3
 8027a30:	d006      	beq.n	8027a40 <mpz_export+0x1ec>
 8027a32:	4b16      	ldr	r3, [pc, #88]	@ (8027a8c <mpz_export+0x238>)
 8027a34:	4a0f      	ldr	r2, [pc, #60]	@ (8027a74 <mpz_export+0x220>)
 8027a36:	f241 2139 	movw	r1, #4665	@ 0x1239
 8027a3a:	480f      	ldr	r0, [pc, #60]	@ (8027a78 <mpz_export+0x224>)
 8027a3c:	f00d fbfc 	bl	8035238 <__assert_func>
      assert (k == count);
 8027a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027a44:	429a      	cmp	r2, r3
 8027a46:	d006      	beq.n	8027a56 <mpz_export+0x202>
 8027a48:	4b11      	ldr	r3, [pc, #68]	@ (8027a90 <mpz_export+0x23c>)
 8027a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8027a74 <mpz_export+0x220>)
 8027a4c:	f241 213a 	movw	r1, #4666	@ 0x123a
 8027a50:	4809      	ldr	r0, [pc, #36]	@ (8027a78 <mpz_export+0x224>)
 8027a52:	f00d fbf1 	bl	8035238 <__assert_func>
    }

  if (countp)
 8027a56:	68bb      	ldr	r3, [r7, #8]
 8027a58:	2b00      	cmp	r3, #0
 8027a5a:	d002      	beq.n	8027a62 <mpz_export+0x20e>
    *countp = count;
 8027a5c:	68bb      	ldr	r3, [r7, #8]
 8027a5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8027a60:	601a      	str	r2, [r3, #0]

  return r;
 8027a62:	68fb      	ldr	r3, [r7, #12]
}
 8027a64:	4618      	mov	r0, r3
 8027a66:	3740      	adds	r7, #64	@ 0x40
 8027a68:	46bd      	mov	sp, r7
 8027a6a:	bd80      	pop	{r7, pc}
 8027a6c:	080388a4 	.word	0x080388a4
 8027a70:	08038854 	.word	0x08038854
 8027a74:	0803be80 	.word	0x0803be80
 8027a78:	080382a0 	.word	0x080382a0
 8027a7c:	08038870 	.word	0x08038870
 8027a80:	080388c8 	.word	0x080388c8
 8027a84:	080388e8 	.word	0x080388e8
 8027a88:	2000150c 	.word	0x2000150c
 8027a8c:	080388f4 	.word	0x080388f4
 8027a90:	080388fc 	.word	0x080388fc

08027a94 <is_digit_nonzero_ct>:
/********************** Constant-time unsigned comparisons ***********************/

// The following functions return 1 (TRUE) if condition is true, 0 (FALSE) otherwise
static inline unsigned int
is_digit_nonzero_ct(digit_t x)
{ // Is x != 0?
 8027a94:	b480      	push	{r7}
 8027a96:	b083      	sub	sp, #12
 8027a98:	af00      	add	r7, sp, #0
 8027a9a:	6078      	str	r0, [r7, #4]
    return (unsigned int)((x | (0 - x)) >> (RADIX - 1));
 8027a9c:	687b      	ldr	r3, [r7, #4]
 8027a9e:	425a      	negs	r2, r3
 8027aa0:	687b      	ldr	r3, [r7, #4]
 8027aa2:	4313      	orrs	r3, r2
 8027aa4:	0fdb      	lsrs	r3, r3, #31
}
 8027aa6:	4618      	mov	r0, r3
 8027aa8:	370c      	adds	r7, #12
 8027aaa:	46bd      	mov	sp, r7
 8027aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ab0:	4770      	bx	lr

08027ab2 <is_digit_zero_ct>:

static inline unsigned int
is_digit_zero_ct(digit_t x)
{ // Is x = 0?
 8027ab2:	b580      	push	{r7, lr}
 8027ab4:	b082      	sub	sp, #8
 8027ab6:	af00      	add	r7, sp, #0
 8027ab8:	6078      	str	r0, [r7, #4]
    return (unsigned int)(1 ^ is_digit_nonzero_ct(x));
 8027aba:	6878      	ldr	r0, [r7, #4]
 8027abc:	f7ff ffea 	bl	8027a94 <is_digit_nonzero_ct>
 8027ac0:	4603      	mov	r3, r0
 8027ac2:	f083 0301 	eor.w	r3, r3, #1
}
 8027ac6:	4618      	mov	r0, r3
 8027ac8:	3708      	adds	r7, #8
 8027aca:	46bd      	mov	sp, r7
 8027acc:	bd80      	pop	{r7, pc}

08027ace <is_digit_lessthan_ct>:

static inline unsigned int
is_digit_lessthan_ct(digit_t x, digit_t y)
{ // Is x < y?
 8027ace:	b480      	push	{r7}
 8027ad0:	b083      	sub	sp, #12
 8027ad2:	af00      	add	r7, sp, #0
 8027ad4:	6078      	str	r0, [r7, #4]
 8027ad6:	6039      	str	r1, [r7, #0]
    return (unsigned int)((x ^ ((x ^ y) | ((x - y) ^ y))) >> (RADIX - 1));
 8027ad8:	687a      	ldr	r2, [r7, #4]
 8027ada:	683b      	ldr	r3, [r7, #0]
 8027adc:	405a      	eors	r2, r3
 8027ade:	6879      	ldr	r1, [r7, #4]
 8027ae0:	683b      	ldr	r3, [r7, #0]
 8027ae2:	1ac9      	subs	r1, r1, r3
 8027ae4:	683b      	ldr	r3, [r7, #0]
 8027ae6:	404b      	eors	r3, r1
 8027ae8:	431a      	orrs	r2, r3
 8027aea:	687b      	ldr	r3, [r7, #4]
 8027aec:	4053      	eors	r3, r2
 8027aee:	0fdb      	lsrs	r3, r3, #31
}
 8027af0:	4618      	mov	r0, r3
 8027af2:	370c      	adds	r7, #12
 8027af4:	46bd      	mov	sp, r7
 8027af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027afa:	4770      	bx	lr

08027afc <sqisign_gen_MUL>:
#include <stdio.h>

// double-wide multiplication
void
MUL(digit_t *out, const digit_t a, const digit_t b)
{
 8027afc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8027b00:	b087      	sub	sp, #28
 8027b02:	af00      	add	r7, sp, #0
 8027b04:	60f8      	str	r0, [r7, #12]
 8027b06:	60b9      	str	r1, [r7, #8]
 8027b08:	607a      	str	r2, [r7, #4]
#ifdef RADIX_32
    uint64_t r = (uint64_t)a * b;
 8027b0a:	68bb      	ldr	r3, [r7, #8]
 8027b0c:	2200      	movs	r2, #0
 8027b0e:	469a      	mov	sl, r3
 8027b10:	4693      	mov	fp, r2
 8027b12:	687b      	ldr	r3, [r7, #4]
 8027b14:	2200      	movs	r2, #0
 8027b16:	4698      	mov	r8, r3
 8027b18:	4691      	mov	r9, r2
 8027b1a:	fb08 f20b 	mul.w	r2, r8, fp
 8027b1e:	fb0a f309 	mul.w	r3, sl, r9
 8027b22:	4413      	add	r3, r2
 8027b24:	fbaa 4508 	umull	r4, r5, sl, r8
 8027b28:	442b      	add	r3, r5
 8027b2a:	461d      	mov	r5, r3
 8027b2c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8027b30:	e9c7 4504 	strd	r4, r5, [r7, #16]
    out[0] = r & 0xFFFFFFFFUL;
 8027b34:	693a      	ldr	r2, [r7, #16]
 8027b36:	68fb      	ldr	r3, [r7, #12]
 8027b38:	601a      	str	r2, [r3, #0]
    out[1] = r >> 32;
 8027b3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8027b3e:	f04f 0200 	mov.w	r2, #0
 8027b42:	f04f 0300 	mov.w	r3, #0
 8027b46:	000a      	movs	r2, r1
 8027b48:	2300      	movs	r3, #0
 8027b4a:	68f9      	ldr	r1, [r7, #12]
 8027b4c:	3104      	adds	r1, #4
 8027b4e:	4613      	mov	r3, r2
 8027b50:	600b      	str	r3, [r1, #0]
    out[1] = temp & mask_low; // out10
    carry = temp & mask_high;
    out[1] ^= (ahbh & mask_high) + carry; // out11

#endif
}
 8027b52:	bf00      	nop
 8027b54:	371c      	adds	r7, #28
 8027b56:	46bd      	mov	sp, r7
 8027b58:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8027b5c:	4770      	bx	lr

08027b5e <sqisign_gen_mp_add>:

void
mp_add(digit_t *c, const digit_t *a, const digit_t *b, const unsigned int nwords)
{ // Multiprecision addition
 8027b5e:	b590      	push	{r4, r7, lr}
 8027b60:	b089      	sub	sp, #36	@ 0x24
 8027b62:	af00      	add	r7, sp, #0
 8027b64:	60f8      	str	r0, [r7, #12]
 8027b66:	60b9      	str	r1, [r7, #8]
 8027b68:	607a      	str	r2, [r7, #4]
 8027b6a:	603b      	str	r3, [r7, #0]
    unsigned int i, carry = 0;
 8027b6c:	2300      	movs	r3, #0
 8027b6e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < nwords; i++) {
 8027b70:	2300      	movs	r3, #0
 8027b72:	61fb      	str	r3, [r7, #28]
 8027b74:	e027      	b.n	8027bc6 <sqisign_gen_mp_add+0x68>
        ADDC(c[i], carry, a[i], b[i], carry);
 8027b76:	69fb      	ldr	r3, [r7, #28]
 8027b78:	009b      	lsls	r3, r3, #2
 8027b7a:	68ba      	ldr	r2, [r7, #8]
 8027b7c:	4413      	add	r3, r2
 8027b7e:	681b      	ldr	r3, [r3, #0]
 8027b80:	69ba      	ldr	r2, [r7, #24]
 8027b82:	4413      	add	r3, r2
 8027b84:	617b      	str	r3, [r7, #20]
 8027b86:	69fb      	ldr	r3, [r7, #28]
 8027b88:	009b      	lsls	r3, r3, #2
 8027b8a:	687a      	ldr	r2, [r7, #4]
 8027b8c:	4413      	add	r3, r2
 8027b8e:	6819      	ldr	r1, [r3, #0]
 8027b90:	69fb      	ldr	r3, [r7, #28]
 8027b92:	009b      	lsls	r3, r3, #2
 8027b94:	68fa      	ldr	r2, [r7, #12]
 8027b96:	4413      	add	r3, r2
 8027b98:	697a      	ldr	r2, [r7, #20]
 8027b9a:	440a      	add	r2, r1
 8027b9c:	601a      	str	r2, [r3, #0]
 8027b9e:	69b9      	ldr	r1, [r7, #24]
 8027ba0:	6978      	ldr	r0, [r7, #20]
 8027ba2:	f7ff ff94 	bl	8027ace <is_digit_lessthan_ct>
 8027ba6:	4604      	mov	r4, r0
 8027ba8:	69fb      	ldr	r3, [r7, #28]
 8027baa:	009b      	lsls	r3, r3, #2
 8027bac:	68fa      	ldr	r2, [r7, #12]
 8027bae:	4413      	add	r3, r2
 8027bb0:	681b      	ldr	r3, [r3, #0]
 8027bb2:	6979      	ldr	r1, [r7, #20]
 8027bb4:	4618      	mov	r0, r3
 8027bb6:	f7ff ff8a 	bl	8027ace <is_digit_lessthan_ct>
 8027bba:	4603      	mov	r3, r0
 8027bbc:	4323      	orrs	r3, r4
 8027bbe:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nwords; i++) {
 8027bc0:	69fb      	ldr	r3, [r7, #28]
 8027bc2:	3301      	adds	r3, #1
 8027bc4:	61fb      	str	r3, [r7, #28]
 8027bc6:	69fa      	ldr	r2, [r7, #28]
 8027bc8:	683b      	ldr	r3, [r7, #0]
 8027bca:	429a      	cmp	r2, r3
 8027bcc:	d3d3      	bcc.n	8027b76 <sqisign_gen_mp_add+0x18>
    }
}
 8027bce:	bf00      	nop
 8027bd0:	bf00      	nop
 8027bd2:	3724      	adds	r7, #36	@ 0x24
 8027bd4:	46bd      	mov	sp, r7
 8027bd6:	bd90      	pop	{r4, r7, pc}

08027bd8 <sqisign_gen_mp_shiftr>:

digit_t
mp_shiftr(digit_t *x, const unsigned int shift, const unsigned int nwords)
{ // Multiprecision right shift by 1...RADIX-1
 8027bd8:	b480      	push	{r7}
 8027bda:	b087      	sub	sp, #28
 8027bdc:	af00      	add	r7, sp, #0
 8027bde:	60f8      	str	r0, [r7, #12]
 8027be0:	60b9      	str	r1, [r7, #8]
 8027be2:	607a      	str	r2, [r7, #4]
    digit_t bit_out = x[0] & 1;
 8027be4:	68fb      	ldr	r3, [r7, #12]
 8027be6:	681b      	ldr	r3, [r3, #0]
 8027be8:	f003 0301 	and.w	r3, r3, #1
 8027bec:	613b      	str	r3, [r7, #16]

    for (unsigned int i = 0; i < nwords - 1; i++) {
 8027bee:	2300      	movs	r3, #0
 8027bf0:	617b      	str	r3, [r7, #20]
 8027bf2:	e01a      	b.n	8027c2a <sqisign_gen_mp_shiftr+0x52>
        SHIFTR(x[i + 1], x[i], shift, x[i], RADIX);
 8027bf4:	697b      	ldr	r3, [r7, #20]
 8027bf6:	009b      	lsls	r3, r3, #2
 8027bf8:	68fa      	ldr	r2, [r7, #12]
 8027bfa:	4413      	add	r3, r2
 8027bfc:	681a      	ldr	r2, [r3, #0]
 8027bfe:	68bb      	ldr	r3, [r7, #8]
 8027c00:	fa22 f103 	lsr.w	r1, r2, r3
 8027c04:	697b      	ldr	r3, [r7, #20]
 8027c06:	3301      	adds	r3, #1
 8027c08:	009b      	lsls	r3, r3, #2
 8027c0a:	68fa      	ldr	r2, [r7, #12]
 8027c0c:	4413      	add	r3, r2
 8027c0e:	681a      	ldr	r2, [r3, #0]
 8027c10:	68bb      	ldr	r3, [r7, #8]
 8027c12:	f1c3 0320 	rsb	r3, r3, #32
 8027c16:	409a      	lsls	r2, r3
 8027c18:	697b      	ldr	r3, [r7, #20]
 8027c1a:	009b      	lsls	r3, r3, #2
 8027c1c:	68f8      	ldr	r0, [r7, #12]
 8027c1e:	4403      	add	r3, r0
 8027c20:	404a      	eors	r2, r1
 8027c22:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 0; i < nwords - 1; i++) {
 8027c24:	697b      	ldr	r3, [r7, #20]
 8027c26:	3301      	adds	r3, #1
 8027c28:	617b      	str	r3, [r7, #20]
 8027c2a:	687b      	ldr	r3, [r7, #4]
 8027c2c:	3b01      	subs	r3, #1
 8027c2e:	697a      	ldr	r2, [r7, #20]
 8027c30:	429a      	cmp	r2, r3
 8027c32:	d3df      	bcc.n	8027bf4 <sqisign_gen_mp_shiftr+0x1c>
    }
    x[nwords - 1] >>= shift;
 8027c34:	687b      	ldr	r3, [r7, #4]
 8027c36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027c3a:	3b01      	subs	r3, #1
 8027c3c:	009b      	lsls	r3, r3, #2
 8027c3e:	68fa      	ldr	r2, [r7, #12]
 8027c40:	4413      	add	r3, r2
 8027c42:	6819      	ldr	r1, [r3, #0]
 8027c44:	687b      	ldr	r3, [r7, #4]
 8027c46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027c4a:	3b01      	subs	r3, #1
 8027c4c:	009b      	lsls	r3, r3, #2
 8027c4e:	68fa      	ldr	r2, [r7, #12]
 8027c50:	4413      	add	r3, r2
 8027c52:	68ba      	ldr	r2, [r7, #8]
 8027c54:	fa21 f202 	lsr.w	r2, r1, r2
 8027c58:	601a      	str	r2, [r3, #0]
    return bit_out;
 8027c5a:	693b      	ldr	r3, [r7, #16]
}
 8027c5c:	4618      	mov	r0, r3
 8027c5e:	371c      	adds	r7, #28
 8027c60:	46bd      	mov	sp, r7
 8027c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c66:	4770      	bx	lr

08027c68 <sqisign_gen_mp_shiftl>:

void
mp_shiftl(digit_t *x, const unsigned int shift, const unsigned int nwords)
{ // Multiprecision left shift by 1...RADIX-1
 8027c68:	b480      	push	{r7}
 8027c6a:	b087      	sub	sp, #28
 8027c6c:	af00      	add	r7, sp, #0
 8027c6e:	60f8      	str	r0, [r7, #12]
 8027c70:	60b9      	str	r1, [r7, #8]
 8027c72:	607a      	str	r2, [r7, #4]

    for (int i = nwords - 1; i > 0; i--) {
 8027c74:	687b      	ldr	r3, [r7, #4]
 8027c76:	3b01      	subs	r3, #1
 8027c78:	617b      	str	r3, [r7, #20]
 8027c7a:	e01c      	b.n	8027cb6 <sqisign_gen_mp_shiftl+0x4e>
        SHIFTL(x[i], x[i - 1], shift, x[i], RADIX);
 8027c7c:	697b      	ldr	r3, [r7, #20]
 8027c7e:	009b      	lsls	r3, r3, #2
 8027c80:	68fa      	ldr	r2, [r7, #12]
 8027c82:	4413      	add	r3, r2
 8027c84:	681a      	ldr	r2, [r3, #0]
 8027c86:	68bb      	ldr	r3, [r7, #8]
 8027c88:	fa02 f103 	lsl.w	r1, r2, r3
 8027c8c:	697b      	ldr	r3, [r7, #20]
 8027c8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027c92:	3b01      	subs	r3, #1
 8027c94:	009b      	lsls	r3, r3, #2
 8027c96:	68fa      	ldr	r2, [r7, #12]
 8027c98:	4413      	add	r3, r2
 8027c9a:	681a      	ldr	r2, [r3, #0]
 8027c9c:	68bb      	ldr	r3, [r7, #8]
 8027c9e:	f1c3 0320 	rsb	r3, r3, #32
 8027ca2:	40da      	lsrs	r2, r3
 8027ca4:	697b      	ldr	r3, [r7, #20]
 8027ca6:	009b      	lsls	r3, r3, #2
 8027ca8:	68f8      	ldr	r0, [r7, #12]
 8027caa:	4403      	add	r3, r0
 8027cac:	404a      	eors	r2, r1
 8027cae:	601a      	str	r2, [r3, #0]
    for (int i = nwords - 1; i > 0; i--) {
 8027cb0:	697b      	ldr	r3, [r7, #20]
 8027cb2:	3b01      	subs	r3, #1
 8027cb4:	617b      	str	r3, [r7, #20]
 8027cb6:	697b      	ldr	r3, [r7, #20]
 8027cb8:	2b00      	cmp	r3, #0
 8027cba:	dcdf      	bgt.n	8027c7c <sqisign_gen_mp_shiftl+0x14>
    }
    x[0] <<= shift;
 8027cbc:	68fb      	ldr	r3, [r7, #12]
 8027cbe:	681a      	ldr	r2, [r3, #0]
 8027cc0:	68bb      	ldr	r3, [r7, #8]
 8027cc2:	409a      	lsls	r2, r3
 8027cc4:	68fb      	ldr	r3, [r7, #12]
 8027cc6:	601a      	str	r2, [r3, #0]
}
 8027cc8:	bf00      	nop
 8027cca:	371c      	adds	r7, #28
 8027ccc:	46bd      	mov	sp, r7
 8027cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cd2:	4770      	bx	lr

08027cd4 <sqisign_gen_multiple_mp_shiftl>:

void
multiple_mp_shiftl(digit_t *x, const unsigned int shift, const unsigned int nwords)
{
 8027cd4:	b580      	push	{r7, lr}
 8027cd6:	b086      	sub	sp, #24
 8027cd8:	af00      	add	r7, sp, #0
 8027cda:	60f8      	str	r0, [r7, #12]
 8027cdc:	60b9      	str	r1, [r7, #8]
 8027cde:	607a      	str	r2, [r7, #4]
    int t = shift;
 8027ce0:	68bb      	ldr	r3, [r7, #8]
 8027ce2:	617b      	str	r3, [r7, #20]
    while (t > RADIX - 1) {
 8027ce4:	e007      	b.n	8027cf6 <sqisign_gen_multiple_mp_shiftl+0x22>
        mp_shiftl(x, RADIX - 1, nwords);
 8027ce6:	687a      	ldr	r2, [r7, #4]
 8027ce8:	211f      	movs	r1, #31
 8027cea:	68f8      	ldr	r0, [r7, #12]
 8027cec:	f7ff ffbc 	bl	8027c68 <sqisign_gen_mp_shiftl>
        t = t - (RADIX - 1);
 8027cf0:	697b      	ldr	r3, [r7, #20]
 8027cf2:	3b1f      	subs	r3, #31
 8027cf4:	617b      	str	r3, [r7, #20]
    while (t > RADIX - 1) {
 8027cf6:	697b      	ldr	r3, [r7, #20]
 8027cf8:	2b1f      	cmp	r3, #31
 8027cfa:	dcf4      	bgt.n	8027ce6 <sqisign_gen_multiple_mp_shiftl+0x12>
    }
    mp_shiftl(x, t, nwords);
 8027cfc:	697b      	ldr	r3, [r7, #20]
 8027cfe:	687a      	ldr	r2, [r7, #4]
 8027d00:	4619      	mov	r1, r3
 8027d02:	68f8      	ldr	r0, [r7, #12]
 8027d04:	f7ff ffb0 	bl	8027c68 <sqisign_gen_mp_shiftl>
}
 8027d08:	bf00      	nop
 8027d0a:	3718      	adds	r7, #24
 8027d0c:	46bd      	mov	sp, r7
 8027d0e:	bd80      	pop	{r7, pc}

08027d10 <sqisign_gen_mp_sub>:

// The below functions were taken from the EC module

void
mp_sub(digit_t *c, const digit_t *a, const digit_t *b, const unsigned int nwords)
{ // Multiprecision subtraction, assuming a > b
 8027d10:	b590      	push	{r4, r7, lr}
 8027d12:	b089      	sub	sp, #36	@ 0x24
 8027d14:	af00      	add	r7, sp, #0
 8027d16:	60f8      	str	r0, [r7, #12]
 8027d18:	60b9      	str	r1, [r7, #8]
 8027d1a:	607a      	str	r2, [r7, #4]
 8027d1c:	603b      	str	r3, [r7, #0]
    unsigned int i, borrow = 0;
 8027d1e:	2300      	movs	r3, #0
 8027d20:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < nwords; i++) {
 8027d22:	2300      	movs	r3, #0
 8027d24:	61fb      	str	r3, [r7, #28]
 8027d26:	e02e      	b.n	8027d86 <sqisign_gen_mp_sub+0x76>
        SUBC(c[i], borrow, a[i], b[i], borrow);
 8027d28:	69fb      	ldr	r3, [r7, #28]
 8027d2a:	009b      	lsls	r3, r3, #2
 8027d2c:	68ba      	ldr	r2, [r7, #8]
 8027d2e:	4413      	add	r3, r2
 8027d30:	681a      	ldr	r2, [r3, #0]
 8027d32:	69fb      	ldr	r3, [r7, #28]
 8027d34:	009b      	lsls	r3, r3, #2
 8027d36:	6879      	ldr	r1, [r7, #4]
 8027d38:	440b      	add	r3, r1
 8027d3a:	681b      	ldr	r3, [r3, #0]
 8027d3c:	1ad3      	subs	r3, r2, r3
 8027d3e:	617b      	str	r3, [r7, #20]
 8027d40:	69fb      	ldr	r3, [r7, #28]
 8027d42:	009b      	lsls	r3, r3, #2
 8027d44:	68ba      	ldr	r2, [r7, #8]
 8027d46:	4413      	add	r3, r2
 8027d48:	6818      	ldr	r0, [r3, #0]
 8027d4a:	69fb      	ldr	r3, [r7, #28]
 8027d4c:	009b      	lsls	r3, r3, #2
 8027d4e:	687a      	ldr	r2, [r7, #4]
 8027d50:	4413      	add	r3, r2
 8027d52:	681b      	ldr	r3, [r3, #0]
 8027d54:	4619      	mov	r1, r3
 8027d56:	f7ff feba 	bl	8027ace <is_digit_lessthan_ct>
 8027d5a:	4604      	mov	r4, r0
 8027d5c:	6978      	ldr	r0, [r7, #20]
 8027d5e:	f7ff fea8 	bl	8027ab2 <is_digit_zero_ct>
 8027d62:	4602      	mov	r2, r0
 8027d64:	69bb      	ldr	r3, [r7, #24]
 8027d66:	4013      	ands	r3, r2
 8027d68:	4323      	orrs	r3, r4
 8027d6a:	613b      	str	r3, [r7, #16]
 8027d6c:	69fb      	ldr	r3, [r7, #28]
 8027d6e:	009b      	lsls	r3, r3, #2
 8027d70:	68fa      	ldr	r2, [r7, #12]
 8027d72:	4413      	add	r3, r2
 8027d74:	6979      	ldr	r1, [r7, #20]
 8027d76:	69ba      	ldr	r2, [r7, #24]
 8027d78:	1a8a      	subs	r2, r1, r2
 8027d7a:	601a      	str	r2, [r3, #0]
 8027d7c:	693b      	ldr	r3, [r7, #16]
 8027d7e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nwords; i++) {
 8027d80:	69fb      	ldr	r3, [r7, #28]
 8027d82:	3301      	adds	r3, #1
 8027d84:	61fb      	str	r3, [r7, #28]
 8027d86:	69fa      	ldr	r2, [r7, #28]
 8027d88:	683b      	ldr	r3, [r7, #0]
 8027d8a:	429a      	cmp	r2, r3
 8027d8c:	d3cc      	bcc.n	8027d28 <sqisign_gen_mp_sub+0x18>
    }
}
 8027d8e:	bf00      	nop
 8027d90:	bf00      	nop
 8027d92:	3724      	adds	r7, #36	@ 0x24
 8027d94:	46bd      	mov	sp, r7
 8027d96:	bd90      	pop	{r4, r7, pc}

08027d98 <sqisign_gen_select_ct>:

void
select_ct(digit_t *c, const digit_t *a, const digit_t *b, const digit_t mask, const int nwords)
{ // Select c <- a if mask = 0, select c <- b if mask = 1...1
 8027d98:	b480      	push	{r7}
 8027d9a:	b087      	sub	sp, #28
 8027d9c:	af00      	add	r7, sp, #0
 8027d9e:	60f8      	str	r0, [r7, #12]
 8027da0:	60b9      	str	r1, [r7, #8]
 8027da2:	607a      	str	r2, [r7, #4]
 8027da4:	603b      	str	r3, [r7, #0]

    for (int i = 0; i < nwords; i++) {
 8027da6:	2300      	movs	r3, #0
 8027da8:	617b      	str	r3, [r7, #20]
 8027daa:	e01b      	b.n	8027de4 <sqisign_gen_select_ct+0x4c>
        c[i] = ((a[i] ^ b[i]) & mask) ^ a[i];
 8027dac:	697b      	ldr	r3, [r7, #20]
 8027dae:	009b      	lsls	r3, r3, #2
 8027db0:	68ba      	ldr	r2, [r7, #8]
 8027db2:	4413      	add	r3, r2
 8027db4:	681a      	ldr	r2, [r3, #0]
 8027db6:	697b      	ldr	r3, [r7, #20]
 8027db8:	009b      	lsls	r3, r3, #2
 8027dba:	6879      	ldr	r1, [r7, #4]
 8027dbc:	440b      	add	r3, r1
 8027dbe:	681b      	ldr	r3, [r3, #0]
 8027dc0:	405a      	eors	r2, r3
 8027dc2:	683b      	ldr	r3, [r7, #0]
 8027dc4:	ea02 0103 	and.w	r1, r2, r3
 8027dc8:	697b      	ldr	r3, [r7, #20]
 8027dca:	009b      	lsls	r3, r3, #2
 8027dcc:	68ba      	ldr	r2, [r7, #8]
 8027dce:	4413      	add	r3, r2
 8027dd0:	681a      	ldr	r2, [r3, #0]
 8027dd2:	697b      	ldr	r3, [r7, #20]
 8027dd4:	009b      	lsls	r3, r3, #2
 8027dd6:	68f8      	ldr	r0, [r7, #12]
 8027dd8:	4403      	add	r3, r0
 8027dda:	404a      	eors	r2, r1
 8027ddc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < nwords; i++) {
 8027dde:	697b      	ldr	r3, [r7, #20]
 8027de0:	3301      	adds	r3, #1
 8027de2:	617b      	str	r3, [r7, #20]
 8027de4:	697a      	ldr	r2, [r7, #20]
 8027de6:	6a3b      	ldr	r3, [r7, #32]
 8027de8:	429a      	cmp	r2, r3
 8027dea:	dbdf      	blt.n	8027dac <sqisign_gen_select_ct+0x14>
    }
}
 8027dec:	bf00      	nop
 8027dee:	bf00      	nop
 8027df0:	371c      	adds	r7, #28
 8027df2:	46bd      	mov	sp, r7
 8027df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027df8:	4770      	bx	lr

08027dfa <sqisign_gen_swap_ct>:

void
swap_ct(digit_t *a, digit_t *b, const digit_t option, const int nwords)
{ // Swap entries
 8027dfa:	b480      	push	{r7}
 8027dfc:	b087      	sub	sp, #28
 8027dfe:	af00      	add	r7, sp, #0
 8027e00:	60f8      	str	r0, [r7, #12]
 8027e02:	60b9      	str	r1, [r7, #8]
 8027e04:	607a      	str	r2, [r7, #4]
 8027e06:	603b      	str	r3, [r7, #0]
  // If option = 0 then P <- P and Q <- Q, else if option = 0xFF...FF then a <- b and b <- a
    digit_t temp;

    for (int i = 0; i < nwords; i++) {
 8027e08:	2300      	movs	r3, #0
 8027e0a:	617b      	str	r3, [r7, #20]
 8027e0c:	e028      	b.n	8027e60 <sqisign_gen_swap_ct+0x66>
        temp = option & (a[i] ^ b[i]);
 8027e0e:	697b      	ldr	r3, [r7, #20]
 8027e10:	009b      	lsls	r3, r3, #2
 8027e12:	68fa      	ldr	r2, [r7, #12]
 8027e14:	4413      	add	r3, r2
 8027e16:	681a      	ldr	r2, [r3, #0]
 8027e18:	697b      	ldr	r3, [r7, #20]
 8027e1a:	009b      	lsls	r3, r3, #2
 8027e1c:	68b9      	ldr	r1, [r7, #8]
 8027e1e:	440b      	add	r3, r1
 8027e20:	681b      	ldr	r3, [r3, #0]
 8027e22:	4053      	eors	r3, r2
 8027e24:	687a      	ldr	r2, [r7, #4]
 8027e26:	4013      	ands	r3, r2
 8027e28:	613b      	str	r3, [r7, #16]
        a[i] = temp ^ a[i];
 8027e2a:	697b      	ldr	r3, [r7, #20]
 8027e2c:	009b      	lsls	r3, r3, #2
 8027e2e:	68fa      	ldr	r2, [r7, #12]
 8027e30:	4413      	add	r3, r2
 8027e32:	6819      	ldr	r1, [r3, #0]
 8027e34:	697b      	ldr	r3, [r7, #20]
 8027e36:	009b      	lsls	r3, r3, #2
 8027e38:	68fa      	ldr	r2, [r7, #12]
 8027e3a:	4413      	add	r3, r2
 8027e3c:	693a      	ldr	r2, [r7, #16]
 8027e3e:	404a      	eors	r2, r1
 8027e40:	601a      	str	r2, [r3, #0]
        b[i] = temp ^ b[i];
 8027e42:	697b      	ldr	r3, [r7, #20]
 8027e44:	009b      	lsls	r3, r3, #2
 8027e46:	68ba      	ldr	r2, [r7, #8]
 8027e48:	4413      	add	r3, r2
 8027e4a:	6819      	ldr	r1, [r3, #0]
 8027e4c:	697b      	ldr	r3, [r7, #20]
 8027e4e:	009b      	lsls	r3, r3, #2
 8027e50:	68ba      	ldr	r2, [r7, #8]
 8027e52:	4413      	add	r3, r2
 8027e54:	693a      	ldr	r2, [r7, #16]
 8027e56:	404a      	eors	r2, r1
 8027e58:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < nwords; i++) {
 8027e5a:	697b      	ldr	r3, [r7, #20]
 8027e5c:	3301      	adds	r3, #1
 8027e5e:	617b      	str	r3, [r7, #20]
 8027e60:	697a      	ldr	r2, [r7, #20]
 8027e62:	683b      	ldr	r3, [r7, #0]
 8027e64:	429a      	cmp	r2, r3
 8027e66:	dbd2      	blt.n	8027e0e <sqisign_gen_swap_ct+0x14>
    }
}
 8027e68:	bf00      	nop
 8027e6a:	bf00      	nop
 8027e6c:	371c      	adds	r7, #28
 8027e6e:	46bd      	mov	sp, r7
 8027e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e74:	4770      	bx	lr

08027e76 <sqisign_gen_mp_compare>:

int
mp_compare(const digit_t *a, const digit_t *b, unsigned int nwords)
{ // Multiprecision comparison, a=b? : (1) a>b, (0) a=b, (-1) a<b
 8027e76:	b480      	push	{r7}
 8027e78:	b087      	sub	sp, #28
 8027e7a:	af00      	add	r7, sp, #0
 8027e7c:	60f8      	str	r0, [r7, #12]
 8027e7e:	60b9      	str	r1, [r7, #8]
 8027e80:	607a      	str	r2, [r7, #4]

    for (int i = nwords - 1; i >= 0; i--) {
 8027e82:	687b      	ldr	r3, [r7, #4]
 8027e84:	3b01      	subs	r3, #1
 8027e86:	617b      	str	r3, [r7, #20]
 8027e88:	e01f      	b.n	8027eca <sqisign_gen_mp_compare+0x54>
        if (a[i] > b[i])
 8027e8a:	697b      	ldr	r3, [r7, #20]
 8027e8c:	009b      	lsls	r3, r3, #2
 8027e8e:	68fa      	ldr	r2, [r7, #12]
 8027e90:	4413      	add	r3, r2
 8027e92:	681a      	ldr	r2, [r3, #0]
 8027e94:	697b      	ldr	r3, [r7, #20]
 8027e96:	009b      	lsls	r3, r3, #2
 8027e98:	68b9      	ldr	r1, [r7, #8]
 8027e9a:	440b      	add	r3, r1
 8027e9c:	681b      	ldr	r3, [r3, #0]
 8027e9e:	429a      	cmp	r2, r3
 8027ea0:	d901      	bls.n	8027ea6 <sqisign_gen_mp_compare+0x30>
            return 1;
 8027ea2:	2301      	movs	r3, #1
 8027ea4:	e015      	b.n	8027ed2 <sqisign_gen_mp_compare+0x5c>
        else if (a[i] < b[i])
 8027ea6:	697b      	ldr	r3, [r7, #20]
 8027ea8:	009b      	lsls	r3, r3, #2
 8027eaa:	68fa      	ldr	r2, [r7, #12]
 8027eac:	4413      	add	r3, r2
 8027eae:	681a      	ldr	r2, [r3, #0]
 8027eb0:	697b      	ldr	r3, [r7, #20]
 8027eb2:	009b      	lsls	r3, r3, #2
 8027eb4:	68b9      	ldr	r1, [r7, #8]
 8027eb6:	440b      	add	r3, r1
 8027eb8:	681b      	ldr	r3, [r3, #0]
 8027eba:	429a      	cmp	r2, r3
 8027ebc:	d202      	bcs.n	8027ec4 <sqisign_gen_mp_compare+0x4e>
            return -1;
 8027ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8027ec2:	e006      	b.n	8027ed2 <sqisign_gen_mp_compare+0x5c>
    for (int i = nwords - 1; i >= 0; i--) {
 8027ec4:	697b      	ldr	r3, [r7, #20]
 8027ec6:	3b01      	subs	r3, #1
 8027ec8:	617b      	str	r3, [r7, #20]
 8027eca:	697b      	ldr	r3, [r7, #20]
 8027ecc:	2b00      	cmp	r3, #0
 8027ece:	dadc      	bge.n	8027e8a <sqisign_gen_mp_compare+0x14>
    }
    return 0;
 8027ed0:	2300      	movs	r3, #0
}
 8027ed2:	4618      	mov	r0, r3
 8027ed4:	371c      	adds	r7, #28
 8027ed6:	46bd      	mov	sp, r7
 8027ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027edc:	4770      	bx	lr

08027ede <sqisign_gen_mp_copy>:
    }
}

void
mp_copy(digit_t *b, const digit_t *a, size_t nwords)
{
 8027ede:	b480      	push	{r7}
 8027ee0:	b087      	sub	sp, #28
 8027ee2:	af00      	add	r7, sp, #0
 8027ee4:	60f8      	str	r0, [r7, #12]
 8027ee6:	60b9      	str	r1, [r7, #8]
 8027ee8:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < nwords; i++) {
 8027eea:	2300      	movs	r3, #0
 8027eec:	617b      	str	r3, [r7, #20]
 8027eee:	e00c      	b.n	8027f0a <sqisign_gen_mp_copy+0x2c>
        b[i] = a[i];
 8027ef0:	697b      	ldr	r3, [r7, #20]
 8027ef2:	009b      	lsls	r3, r3, #2
 8027ef4:	68ba      	ldr	r2, [r7, #8]
 8027ef6:	441a      	add	r2, r3
 8027ef8:	697b      	ldr	r3, [r7, #20]
 8027efa:	009b      	lsls	r3, r3, #2
 8027efc:	68f9      	ldr	r1, [r7, #12]
 8027efe:	440b      	add	r3, r1
 8027f00:	6812      	ldr	r2, [r2, #0]
 8027f02:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < nwords; i++) {
 8027f04:	697b      	ldr	r3, [r7, #20]
 8027f06:	3301      	adds	r3, #1
 8027f08:	617b      	str	r3, [r7, #20]
 8027f0a:	697a      	ldr	r2, [r7, #20]
 8027f0c:	687b      	ldr	r3, [r7, #4]
 8027f0e:	429a      	cmp	r2, r3
 8027f10:	d3ee      	bcc.n	8027ef0 <sqisign_gen_mp_copy+0x12>
    }
}
 8027f12:	bf00      	nop
 8027f14:	bf00      	nop
 8027f16:	371c      	adds	r7, #28
 8027f18:	46bd      	mov	sp, r7
 8027f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f1e:	4770      	bx	lr

08027f20 <sqisign_gen_mp_mul>:

void
mp_mul(digit_t *c, const digit_t *a, const digit_t *b, size_t nwords)
{
 8027f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f24:	b095      	sub	sp, #84	@ 0x54
 8027f26:	af00      	add	r7, sp, #0
 8027f28:	6178      	str	r0, [r7, #20]
 8027f2a:	6139      	str	r1, [r7, #16]
 8027f2c:	60fa      	str	r2, [r7, #12]
 8027f2e:	60bb      	str	r3, [r7, #8]
 8027f30:	466b      	mov	r3, sp
 8027f32:	461e      	mov	r6, r3
    // Multiprecision multiplication, c = a*b, for nwords-digit inputs, with nwords-digit output
    // explicitly does not use the higher half of c, as we do not need in our applications
    digit_t carry, UV[2], t[nwords], cc[nwords];
 8027f34:	68b9      	ldr	r1, [r7, #8]
 8027f36:	460b      	mov	r3, r1
 8027f38:	3b01      	subs	r3, #1
 8027f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8027f3c:	2300      	movs	r3, #0
 8027f3e:	6039      	str	r1, [r7, #0]
 8027f40:	607b      	str	r3, [r7, #4]
 8027f42:	f04f 0200 	mov.w	r2, #0
 8027f46:	f04f 0300 	mov.w	r3, #0
 8027f4a:	6878      	ldr	r0, [r7, #4]
 8027f4c:	0143      	lsls	r3, r0, #5
 8027f4e:	6838      	ldr	r0, [r7, #0]
 8027f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8027f54:	6838      	ldr	r0, [r7, #0]
 8027f56:	0142      	lsls	r2, r0, #5
 8027f58:	2300      	movs	r3, #0
 8027f5a:	468a      	mov	sl, r1
 8027f5c:	469b      	mov	fp, r3
 8027f5e:	f04f 0200 	mov.w	r2, #0
 8027f62:	f04f 0300 	mov.w	r3, #0
 8027f66:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8027f6a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8027f6e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8027f72:	008b      	lsls	r3, r1, #2
 8027f74:	3307      	adds	r3, #7
 8027f76:	08db      	lsrs	r3, r3, #3
 8027f78:	00db      	lsls	r3, r3, #3
 8027f7a:	ebad 0d03 	sub.w	sp, sp, r3
 8027f7e:	466b      	mov	r3, sp
 8027f80:	3303      	adds	r3, #3
 8027f82:	089b      	lsrs	r3, r3, #2
 8027f84:	009b      	lsls	r3, r3, #2
 8027f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8027f88:	68b9      	ldr	r1, [r7, #8]
 8027f8a:	460b      	mov	r3, r1
 8027f8c:	3b01      	subs	r3, #1
 8027f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8027f90:	2300      	movs	r3, #0
 8027f92:	4688      	mov	r8, r1
 8027f94:	4699      	mov	r9, r3
 8027f96:	f04f 0200 	mov.w	r2, #0
 8027f9a:	f04f 0300 	mov.w	r3, #0
 8027f9e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8027fa2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8027fa6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8027faa:	2300      	movs	r3, #0
 8027fac:	460c      	mov	r4, r1
 8027fae:	461d      	mov	r5, r3
 8027fb0:	f04f 0200 	mov.w	r2, #0
 8027fb4:	f04f 0300 	mov.w	r3, #0
 8027fb8:	016b      	lsls	r3, r5, #5
 8027fba:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8027fbe:	0162      	lsls	r2, r4, #5
 8027fc0:	008b      	lsls	r3, r1, #2
 8027fc2:	3307      	adds	r3, #7
 8027fc4:	08db      	lsrs	r3, r3, #3
 8027fc6:	00db      	lsls	r3, r3, #3
 8027fc8:	ebad 0d03 	sub.w	sp, sp, r3
 8027fcc:	466b      	mov	r3, sp
 8027fce:	3303      	adds	r3, #3
 8027fd0:	089b      	lsrs	r3, r3, #2
 8027fd2:	009b      	lsls	r3, r3, #2
 8027fd4:	637b      	str	r3, [r7, #52]	@ 0x34

    for (size_t i = 0; i < nwords; i++) {
 8027fd6:	2300      	movs	r3, #0
 8027fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8027fda:	e007      	b.n	8027fec <sqisign_gen_mp_mul+0xcc>
        cc[i] = 0;
 8027fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027fde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8027fe0:	2100      	movs	r1, #0
 8027fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < nwords; i++) {
 8027fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027fe8:	3301      	adds	r3, #1
 8027fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8027fec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8027fee:	68bb      	ldr	r3, [r7, #8]
 8027ff0:	429a      	cmp	r2, r3
 8027ff2:	d3f3      	bcc.n	8027fdc <sqisign_gen_mp_mul+0xbc>
    }

    for (size_t i = 0; i < nwords; i++) {
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8027ff8:	e087      	b.n	802810a <sqisign_gen_mp_mul+0x1ea>

        MUL(t, a[i], b[0]);
 8027ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027ffc:	009b      	lsls	r3, r3, #2
 8027ffe:	693a      	ldr	r2, [r7, #16]
 8028000:	4413      	add	r3, r2
 8028002:	6819      	ldr	r1, [r3, #0]
 8028004:	68fb      	ldr	r3, [r7, #12]
 8028006:	681b      	ldr	r3, [r3, #0]
 8028008:	461a      	mov	r2, r3
 802800a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 802800c:	f7ff fd76 	bl	8027afc <sqisign_gen_MUL>

        for (size_t j = 1; j < nwords - 1; j++) {
 8028010:	2301      	movs	r3, #1
 8028012:	647b      	str	r3, [r7, #68]	@ 0x44
 8028014:	e035      	b.n	8028082 <sqisign_gen_mp_mul+0x162>
            MUL(UV, a[i], b[j]);
 8028016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8028018:	009b      	lsls	r3, r3, #2
 802801a:	693a      	ldr	r2, [r7, #16]
 802801c:	4413      	add	r3, r2
 802801e:	6819      	ldr	r1, [r3, #0]
 8028020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028022:	009b      	lsls	r3, r3, #2
 8028024:	68fa      	ldr	r2, [r7, #12]
 8028026:	4413      	add	r3, r2
 8028028:	681a      	ldr	r2, [r3, #0]
 802802a:	f107 031c 	add.w	r3, r7, #28
 802802e:	4618      	mov	r0, r3
 8028030:	f7ff fd64 	bl	8027afc <sqisign_gen_MUL>
            ADDC(t[j], carry, t[j], UV[0], 0);
 8028034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8028036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8028038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802803c:	627b      	str	r3, [r7, #36]	@ 0x24
 802803e:	69fa      	ldr	r2, [r7, #28]
 8028040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028042:	18d1      	adds	r1, r2, r3
 8028044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8028046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8028048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802804c:	2100      	movs	r1, #0
 802804e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028050:	f7ff fd3d 	bl	8027ace <is_digit_lessthan_ct>
 8028054:	4604      	mov	r4, r0
 8028056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8028058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802805e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8028060:	4618      	mov	r0, r3
 8028062:	f7ff fd34 	bl	8027ace <is_digit_lessthan_ct>
 8028066:	4603      	mov	r3, r0
 8028068:	4323      	orrs	r3, r4
 802806a:	62bb      	str	r3, [r7, #40]	@ 0x28
            t[j + 1] = UV[1] + carry;
 802806c:	6a39      	ldr	r1, [r7, #32]
 802806e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028070:	1c5a      	adds	r2, r3, #1
 8028072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028074:	4419      	add	r1, r3
 8028076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8028078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t j = 1; j < nwords - 1; j++) {
 802807c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802807e:	3301      	adds	r3, #1
 8028080:	647b      	str	r3, [r7, #68]	@ 0x44
 8028082:	68bb      	ldr	r3, [r7, #8]
 8028084:	3b01      	subs	r3, #1
 8028086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8028088:	429a      	cmp	r2, r3
 802808a:	d3c4      	bcc.n	8028016 <sqisign_gen_mp_mul+0xf6>
        }

        int j = nwords - 1;
 802808c:	68bb      	ldr	r3, [r7, #8]
 802808e:	3b01      	subs	r3, #1
 8028090:	633b      	str	r3, [r7, #48]	@ 0x30
        MUL(UV, a[i], b[j]);
 8028092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8028094:	009b      	lsls	r3, r3, #2
 8028096:	693a      	ldr	r2, [r7, #16]
 8028098:	4413      	add	r3, r2
 802809a:	6819      	ldr	r1, [r3, #0]
 802809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802809e:	009b      	lsls	r3, r3, #2
 80280a0:	68fa      	ldr	r2, [r7, #12]
 80280a2:	4413      	add	r3, r2
 80280a4:	681a      	ldr	r2, [r3, #0]
 80280a6:	f107 031c 	add.w	r3, r7, #28
 80280aa:	4618      	mov	r0, r3
 80280ac:	f7ff fd26 	bl	8027afc <sqisign_gen_MUL>
        ADDC(t[j], carry, t[j], UV[0], 0);
 80280b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80280b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80280b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80280b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80280ba:	69fa      	ldr	r2, [r7, #28]
 80280bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80280be:	18d1      	adds	r1, r2, r3
 80280c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80280c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80280c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80280c8:	2100      	movs	r1, #0
 80280ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80280cc:	f7ff fcff 	bl	8027ace <is_digit_lessthan_ct>
 80280d0:	4604      	mov	r4, r0
 80280d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80280d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80280d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80280da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80280dc:	4618      	mov	r0, r3
 80280de:	f7ff fcf6 	bl	8027ace <is_digit_lessthan_ct>
 80280e2:	4603      	mov	r3, r0
 80280e4:	4323      	orrs	r3, r4
 80280e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        mp_add(&cc[i], &cc[i], t, nwords - i);
 80280e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80280ea:	009b      	lsls	r3, r3, #2
 80280ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80280ee:	18d0      	adds	r0, r2, r3
 80280f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80280f2:	009b      	lsls	r3, r3, #2
 80280f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80280f6:	18d1      	adds	r1, r2, r3
 80280f8:	68ba      	ldr	r2, [r7, #8]
 80280fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80280fc:	1ad3      	subs	r3, r2, r3
 80280fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8028100:	f7ff fd2d 	bl	8027b5e <sqisign_gen_mp_add>
    for (size_t i = 0; i < nwords; i++) {
 8028104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8028106:	3301      	adds	r3, #1
 8028108:	64bb      	str	r3, [r7, #72]	@ 0x48
 802810a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802810c:	68bb      	ldr	r3, [r7, #8]
 802810e:	429a      	cmp	r2, r3
 8028110:	f4ff af73 	bcc.w	8027ffa <sqisign_gen_mp_mul+0xda>
    }

    mp_copy(c, cc, nwords);
 8028114:	68ba      	ldr	r2, [r7, #8]
 8028116:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8028118:	6978      	ldr	r0, [r7, #20]
 802811a:	f7ff fee0 	bl	8027ede <sqisign_gen_mp_copy>
 802811e:	46b5      	mov	sp, r6
}
 8028120:	bf00      	nop
 8028122:	3754      	adds	r7, #84	@ 0x54
 8028124:	46bd      	mov	sp, r7
 8028126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802812a <sqisign_gen_mp_mod_2exp>:

void
mp_mod_2exp(digit_t *a, unsigned int e, unsigned int nwords)
{ // Multiprecision modulo 2^e, with 0 <= a < 2^(e)
 802812a:	b480      	push	{r7}
 802812c:	b089      	sub	sp, #36	@ 0x24
 802812e:	af00      	add	r7, sp, #0
 8028130:	60f8      	str	r0, [r7, #12]
 8028132:	60b9      	str	r1, [r7, #8]
 8028134:	607a      	str	r2, [r7, #4]
    unsigned int i, q = e >> LOG2RADIX, r = e & (RADIX - 1);
 8028136:	68bb      	ldr	r3, [r7, #8]
 8028138:	095b      	lsrs	r3, r3, #5
 802813a:	61bb      	str	r3, [r7, #24]
 802813c:	68bb      	ldr	r3, [r7, #8]
 802813e:	f003 031f 	and.w	r3, r3, #31
 8028142:	617b      	str	r3, [r7, #20]

    if (q < nwords) {
 8028144:	69ba      	ldr	r2, [r7, #24]
 8028146:	687b      	ldr	r3, [r7, #4]
 8028148:	429a      	cmp	r2, r3
 802814a:	d221      	bcs.n	8028190 <sqisign_gen_mp_mod_2exp+0x66>
        a[q] &= ((digit_t)1 << r) - 1;
 802814c:	69bb      	ldr	r3, [r7, #24]
 802814e:	009b      	lsls	r3, r3, #2
 8028150:	68fa      	ldr	r2, [r7, #12]
 8028152:	4413      	add	r3, r2
 8028154:	6819      	ldr	r1, [r3, #0]
 8028156:	f04f 32ff 	mov.w	r2, #4294967295
 802815a:	697b      	ldr	r3, [r7, #20]
 802815c:	fa02 f303 	lsl.w	r3, r2, r3
 8028160:	43da      	mvns	r2, r3
 8028162:	69bb      	ldr	r3, [r7, #24]
 8028164:	009b      	lsls	r3, r3, #2
 8028166:	68f8      	ldr	r0, [r7, #12]
 8028168:	4403      	add	r3, r0
 802816a:	400a      	ands	r2, r1
 802816c:	601a      	str	r2, [r3, #0]

        for (i = q + 1; i < nwords; i++) {
 802816e:	69bb      	ldr	r3, [r7, #24]
 8028170:	3301      	adds	r3, #1
 8028172:	61fb      	str	r3, [r7, #28]
 8028174:	e008      	b.n	8028188 <sqisign_gen_mp_mod_2exp+0x5e>
            a[i] = 0;
 8028176:	69fb      	ldr	r3, [r7, #28]
 8028178:	009b      	lsls	r3, r3, #2
 802817a:	68fa      	ldr	r2, [r7, #12]
 802817c:	4413      	add	r3, r2
 802817e:	2200      	movs	r2, #0
 8028180:	601a      	str	r2, [r3, #0]
        for (i = q + 1; i < nwords; i++) {
 8028182:	69fb      	ldr	r3, [r7, #28]
 8028184:	3301      	adds	r3, #1
 8028186:	61fb      	str	r3, [r7, #28]
 8028188:	69fa      	ldr	r2, [r7, #28]
 802818a:	687b      	ldr	r3, [r7, #4]
 802818c:	429a      	cmp	r2, r3
 802818e:	d3f2      	bcc.n	8028176 <sqisign_gen_mp_mod_2exp+0x4c>
        }
    }
}
 8028190:	bf00      	nop
 8028192:	3724      	adds	r7, #36	@ 0x24
 8028194:	46bd      	mov	sp, r7
 8028196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802819a:	4770      	bx	lr

0802819c <sqisign_gen_mp_neg>:

void
mp_neg(digit_t *a, unsigned int nwords)
{ // negates a
 802819c:	b480      	push	{r7}
 802819e:	b085      	sub	sp, #20
 80281a0:	af00      	add	r7, sp, #0
 80281a2:	6078      	str	r0, [r7, #4]
 80281a4:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < nwords; i++) {
 80281a6:	2300      	movs	r3, #0
 80281a8:	60fb      	str	r3, [r7, #12]
 80281aa:	e00d      	b.n	80281c8 <sqisign_gen_mp_neg+0x2c>
        a[i] ^= -1;
 80281ac:	68fb      	ldr	r3, [r7, #12]
 80281ae:	009b      	lsls	r3, r3, #2
 80281b0:	687a      	ldr	r2, [r7, #4]
 80281b2:	4413      	add	r3, r2
 80281b4:	681a      	ldr	r2, [r3, #0]
 80281b6:	68fb      	ldr	r3, [r7, #12]
 80281b8:	009b      	lsls	r3, r3, #2
 80281ba:	6879      	ldr	r1, [r7, #4]
 80281bc:	440b      	add	r3, r1
 80281be:	43d2      	mvns	r2, r2
 80281c0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < nwords; i++) {
 80281c2:	68fb      	ldr	r3, [r7, #12]
 80281c4:	3301      	adds	r3, #1
 80281c6:	60fb      	str	r3, [r7, #12]
 80281c8:	68fa      	ldr	r2, [r7, #12]
 80281ca:	683b      	ldr	r3, [r7, #0]
 80281cc:	429a      	cmp	r2, r3
 80281ce:	d3ed      	bcc.n	80281ac <sqisign_gen_mp_neg+0x10>
    }

    a[0] += 1;
 80281d0:	687b      	ldr	r3, [r7, #4]
 80281d2:	681b      	ldr	r3, [r3, #0]
 80281d4:	1c5a      	adds	r2, r3, #1
 80281d6:	687b      	ldr	r3, [r7, #4]
 80281d8:	601a      	str	r2, [r3, #0]
}
 80281da:	bf00      	nop
 80281dc:	3714      	adds	r7, #20
 80281de:	46bd      	mov	sp, r7
 80281e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281e4:	4770      	bx	lr

080281e6 <sqisign_gen_mp_is_one>:

bool
mp_is_one(const digit_t *x, unsigned int nwords)
{ // returns true if x represents 1, and false otherwise
 80281e6:	b480      	push	{r7}
 80281e8:	b085      	sub	sp, #20
 80281ea:	af00      	add	r7, sp, #0
 80281ec:	6078      	str	r0, [r7, #4]
 80281ee:	6039      	str	r1, [r7, #0]
    if (x[0] != 1) {
 80281f0:	687b      	ldr	r3, [r7, #4]
 80281f2:	681b      	ldr	r3, [r3, #0]
 80281f4:	2b01      	cmp	r3, #1
 80281f6:	d001      	beq.n	80281fc <sqisign_gen_mp_is_one+0x16>
        return false;
 80281f8:	2300      	movs	r3, #0
 80281fa:	e013      	b.n	8028224 <sqisign_gen_mp_is_one+0x3e>
    }

    for (size_t i = 1; i < nwords; i++) {
 80281fc:	2301      	movs	r3, #1
 80281fe:	60fb      	str	r3, [r7, #12]
 8028200:	e00b      	b.n	802821a <sqisign_gen_mp_is_one+0x34>
        if (x[i] != 0) {
 8028202:	68fb      	ldr	r3, [r7, #12]
 8028204:	009b      	lsls	r3, r3, #2
 8028206:	687a      	ldr	r2, [r7, #4]
 8028208:	4413      	add	r3, r2
 802820a:	681b      	ldr	r3, [r3, #0]
 802820c:	2b00      	cmp	r3, #0
 802820e:	d001      	beq.n	8028214 <sqisign_gen_mp_is_one+0x2e>
            return false;
 8028210:	2300      	movs	r3, #0
 8028212:	e007      	b.n	8028224 <sqisign_gen_mp_is_one+0x3e>
    for (size_t i = 1; i < nwords; i++) {
 8028214:	68fb      	ldr	r3, [r7, #12]
 8028216:	3301      	adds	r3, #1
 8028218:	60fb      	str	r3, [r7, #12]
 802821a:	68fa      	ldr	r2, [r7, #12]
 802821c:	683b      	ldr	r3, [r7, #0]
 802821e:	429a      	cmp	r2, r3
 8028220:	d3ef      	bcc.n	8028202 <sqisign_gen_mp_is_one+0x1c>
        }
    }
    return true;
 8028222:	2301      	movs	r3, #1
}
 8028224:	4618      	mov	r0, r3
 8028226:	3714      	adds	r7, #20
 8028228:	46bd      	mov	sp, r7
 802822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802822e:	4770      	bx	lr

08028230 <sqisign_gen_mp_inv_2e>:

void
mp_inv_2e(digit_t *b, const digit_t *a, int e, unsigned int nwords)
{ // Inversion modulo 2^e, using Newton's method and Hensel lifting
 8028230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028234:	b0a1      	sub	sp, #132	@ 0x84
 8028236:	af00      	add	r7, sp, #0
 8028238:	6478      	str	r0, [r7, #68]	@ 0x44
 802823a:	6439      	str	r1, [r7, #64]	@ 0x40
 802823c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 802823e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8028240:	466b      	mov	r3, sp
 8028242:	461e      	mov	r6, r3
    // we take the first power of 2 larger than e to use
    // requires a to be odd, of course
    // returns b such that a*b = 1 mod 2^e
    assert((a[0] & 1) == 1);
 8028244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8028246:	681b      	ldr	r3, [r3, #0]
 8028248:	f003 0301 	and.w	r3, r3, #1
 802824c:	2b00      	cmp	r3, #0
 802824e:	d106      	bne.n	802825e <sqisign_gen_mp_inv_2e+0x2e>
 8028250:	4ba2      	ldr	r3, [pc, #648]	@ (80284dc <sqisign_gen_mp_inv_2e+0x2ac>)
 8028252:	4aa3      	ldr	r2, [pc, #652]	@ (80284e0 <sqisign_gen_mp_inv_2e+0x2b0>)
 8028254:	f240 1115 	movw	r1, #277	@ 0x115
 8028258:	48a2      	ldr	r0, [pc, #648]	@ (80284e4 <sqisign_gen_mp_inv_2e+0x2b4>)
 802825a:	f00c ffed 	bl	8035238 <__assert_func>

    digit_t x[nwords], y[nwords], aa[nwords], mp_one[nwords], tmp[nwords];
 802825e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8028260:	460b      	mov	r3, r1
 8028262:	3b01      	subs	r3, #1
 8028264:	673b      	str	r3, [r7, #112]	@ 0x70
 8028266:	2300      	movs	r3, #0
 8028268:	460c      	mov	r4, r1
 802826a:	461d      	mov	r5, r3
 802826c:	f04f 0200 	mov.w	r2, #0
 8028270:	f04f 0300 	mov.w	r3, #0
 8028274:	016b      	lsls	r3, r5, #5
 8028276:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 802827a:	0162      	lsls	r2, r4, #5
 802827c:	2300      	movs	r3, #0
 802827e:	4688      	mov	r8, r1
 8028280:	4699      	mov	r9, r3
 8028282:	f04f 0200 	mov.w	r2, #0
 8028286:	f04f 0300 	mov.w	r3, #0
 802828a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 802828e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8028292:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8028296:	008b      	lsls	r3, r1, #2
 8028298:	3307      	adds	r3, #7
 802829a:	08db      	lsrs	r3, r3, #3
 802829c:	00db      	lsls	r3, r3, #3
 802829e:	ebad 0d03 	sub.w	sp, sp, r3
 80282a2:	466b      	mov	r3, sp
 80282a4:	3303      	adds	r3, #3
 80282a6:	089b      	lsrs	r3, r3, #2
 80282a8:	009b      	lsls	r3, r3, #2
 80282aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80282ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80282ae:	460b      	mov	r3, r1
 80282b0:	3b01      	subs	r3, #1
 80282b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80282b4:	2300      	movs	r3, #0
 80282b6:	468a      	mov	sl, r1
 80282b8:	469b      	mov	fp, r3
 80282ba:	f04f 0200 	mov.w	r2, #0
 80282be:	f04f 0300 	mov.w	r3, #0
 80282c2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80282c6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80282ca:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80282ce:	2300      	movs	r3, #0
 80282d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80282d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80282d4:	f04f 0200 	mov.w	r2, #0
 80282d8:	f04f 0300 	mov.w	r3, #0
 80282dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80282e0:	4628      	mov	r0, r5
 80282e2:	0143      	lsls	r3, r0, #5
 80282e4:	4620      	mov	r0, r4
 80282e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80282ea:	4620      	mov	r0, r4
 80282ec:	0142      	lsls	r2, r0, #5
 80282ee:	008b      	lsls	r3, r1, #2
 80282f0:	3307      	adds	r3, #7
 80282f2:	08db      	lsrs	r3, r3, #3
 80282f4:	00db      	lsls	r3, r3, #3
 80282f6:	ebad 0d03 	sub.w	sp, sp, r3
 80282fa:	466b      	mov	r3, sp
 80282fc:	3303      	adds	r3, #3
 80282fe:	089b      	lsrs	r3, r3, #2
 8028300:	009b      	lsls	r3, r3, #2
 8028302:	667b      	str	r3, [r7, #100]	@ 0x64
 8028304:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8028306:	460b      	mov	r3, r1
 8028308:	3b01      	subs	r3, #1
 802830a:	663b      	str	r3, [r7, #96]	@ 0x60
 802830c:	2300      	movs	r3, #0
 802830e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8028310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8028312:	f04f 0200 	mov.w	r2, #0
 8028316:	f04f 0300 	mov.w	r3, #0
 802831a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 802831e:	4628      	mov	r0, r5
 8028320:	0143      	lsls	r3, r0, #5
 8028322:	4620      	mov	r0, r4
 8028324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028328:	4620      	mov	r0, r4
 802832a:	0142      	lsls	r2, r0, #5
 802832c:	2300      	movs	r3, #0
 802832e:	6239      	str	r1, [r7, #32]
 8028330:	627b      	str	r3, [r7, #36]	@ 0x24
 8028332:	f04f 0200 	mov.w	r2, #0
 8028336:	f04f 0300 	mov.w	r3, #0
 802833a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 802833e:	4628      	mov	r0, r5
 8028340:	0143      	lsls	r3, r0, #5
 8028342:	4620      	mov	r0, r4
 8028344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028348:	4620      	mov	r0, r4
 802834a:	0142      	lsls	r2, r0, #5
 802834c:	008b      	lsls	r3, r1, #2
 802834e:	3307      	adds	r3, #7
 8028350:	08db      	lsrs	r3, r3, #3
 8028352:	00db      	lsls	r3, r3, #3
 8028354:	ebad 0d03 	sub.w	sp, sp, r3
 8028358:	466b      	mov	r3, sp
 802835a:	3303      	adds	r3, #3
 802835c:	089b      	lsrs	r3, r3, #2
 802835e:	009b      	lsls	r3, r3, #2
 8028360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8028362:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8028364:	460b      	mov	r3, r1
 8028366:	3b01      	subs	r3, #1
 8028368:	65bb      	str	r3, [r7, #88]	@ 0x58
 802836a:	2300      	movs	r3, #0
 802836c:	61b9      	str	r1, [r7, #24]
 802836e:	61fb      	str	r3, [r7, #28]
 8028370:	f04f 0200 	mov.w	r2, #0
 8028374:	f04f 0300 	mov.w	r3, #0
 8028378:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 802837c:	4628      	mov	r0, r5
 802837e:	0143      	lsls	r3, r0, #5
 8028380:	4620      	mov	r0, r4
 8028382:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028386:	4620      	mov	r0, r4
 8028388:	0142      	lsls	r2, r0, #5
 802838a:	2300      	movs	r3, #0
 802838c:	6139      	str	r1, [r7, #16]
 802838e:	617b      	str	r3, [r7, #20]
 8028390:	f04f 0200 	mov.w	r2, #0
 8028394:	f04f 0300 	mov.w	r3, #0
 8028398:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 802839c:	4628      	mov	r0, r5
 802839e:	0143      	lsls	r3, r0, #5
 80283a0:	4620      	mov	r0, r4
 80283a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80283a6:	4620      	mov	r0, r4
 80283a8:	0142      	lsls	r2, r0, #5
 80283aa:	008b      	lsls	r3, r1, #2
 80283ac:	3307      	adds	r3, #7
 80283ae:	08db      	lsrs	r3, r3, #3
 80283b0:	00db      	lsls	r3, r3, #3
 80283b2:	ebad 0d03 	sub.w	sp, sp, r3
 80283b6:	466b      	mov	r3, sp
 80283b8:	3303      	adds	r3, #3
 80283ba:	089b      	lsrs	r3, r3, #2
 80283bc:	009b      	lsls	r3, r3, #2
 80283be:	657b      	str	r3, [r7, #84]	@ 0x54
 80283c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80283c2:	460b      	mov	r3, r1
 80283c4:	3b01      	subs	r3, #1
 80283c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80283c8:	2300      	movs	r3, #0
 80283ca:	60b9      	str	r1, [r7, #8]
 80283cc:	60fb      	str	r3, [r7, #12]
 80283ce:	f04f 0200 	mov.w	r2, #0
 80283d2:	f04f 0300 	mov.w	r3, #0
 80283d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80283da:	4628      	mov	r0, r5
 80283dc:	0143      	lsls	r3, r0, #5
 80283de:	4620      	mov	r0, r4
 80283e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80283e4:	4620      	mov	r0, r4
 80283e6:	0142      	lsls	r2, r0, #5
 80283e8:	2300      	movs	r3, #0
 80283ea:	6039      	str	r1, [r7, #0]
 80283ec:	607b      	str	r3, [r7, #4]
 80283ee:	f04f 0200 	mov.w	r2, #0
 80283f2:	f04f 0300 	mov.w	r3, #0
 80283f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80283fa:	4628      	mov	r0, r5
 80283fc:	0143      	lsls	r3, r0, #5
 80283fe:	4620      	mov	r0, r4
 8028400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028404:	4620      	mov	r0, r4
 8028406:	0142      	lsls	r2, r0, #5
 8028408:	008b      	lsls	r3, r1, #2
 802840a:	3307      	adds	r3, #7
 802840c:	08db      	lsrs	r3, r3, #3
 802840e:	00db      	lsls	r3, r3, #3
 8028410:	ebad 0d03 	sub.w	sp, sp, r3
 8028414:	466b      	mov	r3, sp
 8028416:	3303      	adds	r3, #3
 8028418:	089b      	lsrs	r3, r3, #2
 802841a:	009b      	lsls	r3, r3, #2
 802841c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    mp_copy(aa, a, nwords);
 802841e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8028420:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8028422:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8028424:	f7ff fd5b 	bl	8027ede <sqisign_gen_mp_copy>

    mp_one[0] = 1;
 8028428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802842a:	2201      	movs	r2, #1
 802842c:	601a      	str	r2, [r3, #0]
    for (unsigned int i = 1; i < nwords; i++) {
 802842e:	2301      	movs	r3, #1
 8028430:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8028432:	e007      	b.n	8028444 <sqisign_gen_mp_inv_2e+0x214>
        mp_one[i] = 0;
 8028434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8028436:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8028438:	2100      	movs	r1, #0
 802843a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 1; i < nwords; i++) {
 802843e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8028440:	3301      	adds	r3, #1
 8028442:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8028444:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8028446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028448:	429a      	cmp	r2, r3
 802844a:	d3f3      	bcc.n	8028434 <sqisign_gen_mp_inv_2e+0x204>
    }

    int p = 1;
 802844c:	2301      	movs	r3, #1
 802844e:	67bb      	str	r3, [r7, #120]	@ 0x78
    while ((1 << p) < e) {
 8028450:	e002      	b.n	8028458 <sqisign_gen_mp_inv_2e+0x228>
        p++;
 8028452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8028454:	3301      	adds	r3, #1
 8028456:	67bb      	str	r3, [r7, #120]	@ 0x78
    while ((1 << p) < e) {
 8028458:	2201      	movs	r2, #1
 802845a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802845c:	fa02 f303 	lsl.w	r3, r2, r3
 8028460:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8028462:	429a      	cmp	r2, r3
 8028464:	dcf5      	bgt.n	8028452 <sqisign_gen_mp_inv_2e+0x222>
    }
    p -= 2; // using k = 4 for initial inverse
 8028466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8028468:	3b02      	subs	r3, #2
 802846a:	67bb      	str	r3, [r7, #120]	@ 0x78
    int w = (1 << (p + 2));
 802846c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802846e:	3302      	adds	r3, #2
 8028470:	2201      	movs	r2, #1
 8028472:	fa02 f303 	lsl.w	r3, r2, r3
 8028476:	64bb      	str	r3, [r7, #72]	@ 0x48

    mp_mod_2exp(aa, w, nwords);
 8028478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802847a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802847c:	4619      	mov	r1, r3
 802847e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8028480:	f7ff fe53 	bl	802812a <sqisign_gen_mp_mod_2exp>
    mp_add(x, aa, aa, nwords);
 8028484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028486:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8028488:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 802848a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 802848c:	f7ff fb67 	bl	8027b5e <sqisign_gen_mp_add>
    mp_add(x, x, aa, nwords);  // should be 3a
 8028490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028492:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8028494:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8028496:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8028498:	f7ff fb61 	bl	8027b5e <sqisign_gen_mp_add>
    x[0] ^= (1 << 1);          // so that x equals (3a)^2 xor 2
 802849c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802849e:	681b      	ldr	r3, [r3, #0]
 80284a0:	f083 0202 	eor.w	r2, r3, #2
 80284a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80284a6:	601a      	str	r2, [r3, #0]
    mp_mod_2exp(x, w, nwords); // now x*a = 1 mod 2^4, which we lift
 80284a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80284aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80284ac:	4619      	mov	r1, r3
 80284ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80284b0:	f7ff fe3b 	bl	802812a <sqisign_gen_mp_mod_2exp>

    mp_mul(tmp, aa, x, nwords);
 80284b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80284b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80284b8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80284ba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80284bc:	f7ff fd30 	bl	8027f20 <sqisign_gen_mp_mul>
    mp_neg(tmp, nwords);
 80284c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80284c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80284c4:	f7ff fe6a 	bl	802819c <sqisign_gen_mp_neg>
    mp_add(y, mp_one, tmp, nwords);
 80284c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80284ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80284cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80284ce:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80284d0:	f7ff fb45 	bl	8027b5e <sqisign_gen_mp_add>

    // Hensel lifting for p rounds
    for (int i = 0; i < p; i++) {
 80284d4:	2300      	movs	r3, #0
 80284d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80284d8:	e01b      	b.n	8028512 <sqisign_gen_mp_inv_2e+0x2e2>
 80284da:	bf00      	nop
 80284dc:	08038914 	.word	0x08038914
 80284e0:	0803be8c 	.word	0x0803be8c
 80284e4:	08038924 	.word	0x08038924
        mp_add(tmp, mp_one, y, nwords);
 80284e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80284ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80284ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80284ee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80284f0:	f7ff fb35 	bl	8027b5e <sqisign_gen_mp_add>
        mp_mul(x, x, tmp, nwords);
 80284f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80284f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80284f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80284fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80284fc:	f7ff fd10 	bl	8027f20 <sqisign_gen_mp_mul>
        mp_mul(y, y, y, nwords);
 8028500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028502:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8028504:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8028506:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8028508:	f7ff fd0a 	bl	8027f20 <sqisign_gen_mp_mul>
    for (int i = 0; i < p; i++) {
 802850c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802850e:	3301      	adds	r3, #1
 8028510:	677b      	str	r3, [r7, #116]	@ 0x74
 8028512:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8028514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8028516:	429a      	cmp	r2, r3
 8028518:	dbe6      	blt.n	80284e8 <sqisign_gen_mp_inv_2e+0x2b8>
    }

    mp_mod_2exp(x, w, nwords);
 802851a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802851c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802851e:	4619      	mov	r1, r3
 8028520:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8028522:	f7ff fe02 	bl	802812a <sqisign_gen_mp_mod_2exp>
    mp_copy(b, x, nwords);
 8028526:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8028528:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 802852a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 802852c:	f7ff fcd7 	bl	8027ede <sqisign_gen_mp_copy>

    //  verify results
    mp_mul(x, x, aa, nwords);
 8028530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028532:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8028534:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8028536:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8028538:	f7ff fcf2 	bl	8027f20 <sqisign_gen_mp_mul>
    mp_mod_2exp(x, w, nwords);
 802853c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802853e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8028540:	4619      	mov	r1, r3
 8028542:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8028544:	f7ff fdf1 	bl	802812a <sqisign_gen_mp_mod_2exp>
    assert(mp_is_one(x, nwords));
 8028548:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 802854a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 802854c:	f7ff fe4b 	bl	80281e6 <sqisign_gen_mp_is_one>
 8028550:	4603      	mov	r3, r0
 8028552:	2b00      	cmp	r3, #0
 8028554:	d106      	bne.n	8028564 <sqisign_gen_mp_inv_2e+0x334>
 8028556:	4b06      	ldr	r3, [pc, #24]	@ (8028570 <sqisign_gen_mp_inv_2e+0x340>)
 8028558:	4a06      	ldr	r2, [pc, #24]	@ (8028574 <sqisign_gen_mp_inv_2e+0x344>)
 802855a:	f240 113d 	movw	r1, #317	@ 0x13d
 802855e:	4806      	ldr	r0, [pc, #24]	@ (8028578 <sqisign_gen_mp_inv_2e+0x348>)
 8028560:	f00c fe6a 	bl	8035238 <__assert_func>
 8028564:	46b5      	mov	sp, r6
}
 8028566:	bf00      	nop
 8028568:	3784      	adds	r7, #132	@ 0x84
 802856a:	46bd      	mov	sp, r7
 802856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028570:	08038938 	.word	0x08038938
 8028574:	0803be8c 	.word	0x0803be8c
 8028578:	08038924 	.word	0x08038924

0802857c <sqisign_gen_mp_invert_matrix>:

void
mp_invert_matrix(digit_t *r1, digit_t *r2, digit_t *s1, digit_t *s2, int e, unsigned int nwords)
{
 802857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028580:	b0a5      	sub	sp, #148	@ 0x94
 8028582:	af00      	add	r7, sp, #0
 8028584:	6578      	str	r0, [r7, #84]	@ 0x54
 8028586:	6539      	str	r1, [r7, #80]	@ 0x50
 8028588:	64fa      	str	r2, [r7, #76]	@ 0x4c
 802858a:	64bb      	str	r3, [r7, #72]	@ 0x48
 802858c:	466b      	mov	r3, sp
 802858e:	461e      	mov	r6, r3
    // given a matrix ( ( a, b ), (c,  d) ) of values mod 2^e
    // returns the inverse matrix gamma ( (d, -b), (-c, a) )
    // where gamma is the inverse of the determinant a*d - b*c
    // assumes the matrix is invertible, otherwises, inversion of determinant fails

    int p = 1;
 8028590:	2301      	movs	r3, #1
 8028592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while ((1 << p) < e) {
 8028596:	e004      	b.n	80285a2 <sqisign_gen_mp_invert_matrix+0x26>
        p++;
 8028598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802859c:	3301      	adds	r3, #1
 802859e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while ((1 << p) < e) {
 80285a2:	2201      	movs	r2, #1
 80285a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80285a8:	409a      	lsls	r2, r3
 80285aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80285ae:	4293      	cmp	r3, r2
 80285b0:	dcf2      	bgt.n	8028598 <sqisign_gen_mp_invert_matrix+0x1c>
    }
    int w = (1 << (p));
 80285b2:	2201      	movs	r2, #1
 80285b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80285b8:	fa02 f303 	lsl.w	r3, r2, r3
 80285bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    digit_t det[nwords], tmp[nwords], resa[nwords], resb[nwords], resc[nwords], resd[nwords];
 80285c0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80285c4:	460b      	mov	r3, r1
 80285c6:	3b01      	subs	r3, #1
 80285c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80285cc:	2300      	movs	r3, #0
 80285ce:	460c      	mov	r4, r1
 80285d0:	461d      	mov	r5, r3
 80285d2:	f04f 0200 	mov.w	r2, #0
 80285d6:	f04f 0300 	mov.w	r3, #0
 80285da:	016b      	lsls	r3, r5, #5
 80285dc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80285e0:	0162      	lsls	r2, r4, #5
 80285e2:	2300      	movs	r3, #0
 80285e4:	4688      	mov	r8, r1
 80285e6:	4699      	mov	r9, r3
 80285e8:	f04f 0200 	mov.w	r2, #0
 80285ec:	f04f 0300 	mov.w	r3, #0
 80285f0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80285f4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80285f8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80285fc:	008b      	lsls	r3, r1, #2
 80285fe:	3307      	adds	r3, #7
 8028600:	08db      	lsrs	r3, r3, #3
 8028602:	00db      	lsls	r3, r3, #3
 8028604:	ebad 0d03 	sub.w	sp, sp, r3
 8028608:	466b      	mov	r3, sp
 802860a:	3303      	adds	r3, #3
 802860c:	089b      	lsrs	r3, r3, #2
 802860e:	009b      	lsls	r3, r3, #2
 8028610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8028614:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8028618:	460b      	mov	r3, r1
 802861a:	3b01      	subs	r3, #1
 802861c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802861e:	2300      	movs	r3, #0
 8028620:	468a      	mov	sl, r1
 8028622:	469b      	mov	fp, r3
 8028624:	f04f 0200 	mov.w	r2, #0
 8028628:	f04f 0300 	mov.w	r3, #0
 802862c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8028630:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8028634:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8028638:	2300      	movs	r3, #0
 802863a:	6439      	str	r1, [r7, #64]	@ 0x40
 802863c:	647b      	str	r3, [r7, #68]	@ 0x44
 802863e:	f04f 0200 	mov.w	r2, #0
 8028642:	f04f 0300 	mov.w	r3, #0
 8028646:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 802864a:	4628      	mov	r0, r5
 802864c:	0143      	lsls	r3, r0, #5
 802864e:	4620      	mov	r0, r4
 8028650:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028654:	4620      	mov	r0, r4
 8028656:	0142      	lsls	r2, r0, #5
 8028658:	008b      	lsls	r3, r1, #2
 802865a:	3307      	adds	r3, #7
 802865c:	08db      	lsrs	r3, r3, #3
 802865e:	00db      	lsls	r3, r3, #3
 8028660:	ebad 0d03 	sub.w	sp, sp, r3
 8028664:	466b      	mov	r3, sp
 8028666:	3303      	adds	r3, #3
 8028668:	089b      	lsrs	r3, r3, #2
 802866a:	009b      	lsls	r3, r3, #2
 802866c:	67bb      	str	r3, [r7, #120]	@ 0x78
 802866e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8028672:	460b      	mov	r3, r1
 8028674:	3b01      	subs	r3, #1
 8028676:	677b      	str	r3, [r7, #116]	@ 0x74
 8028678:	2300      	movs	r3, #0
 802867a:	63b9      	str	r1, [r7, #56]	@ 0x38
 802867c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802867e:	f04f 0200 	mov.w	r2, #0
 8028682:	f04f 0300 	mov.w	r3, #0
 8028686:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 802868a:	4628      	mov	r0, r5
 802868c:	0143      	lsls	r3, r0, #5
 802868e:	4620      	mov	r0, r4
 8028690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028694:	4620      	mov	r0, r4
 8028696:	0142      	lsls	r2, r0, #5
 8028698:	2300      	movs	r3, #0
 802869a:	6339      	str	r1, [r7, #48]	@ 0x30
 802869c:	637b      	str	r3, [r7, #52]	@ 0x34
 802869e:	f04f 0200 	mov.w	r2, #0
 80286a2:	f04f 0300 	mov.w	r3, #0
 80286a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80286aa:	4628      	mov	r0, r5
 80286ac:	0143      	lsls	r3, r0, #5
 80286ae:	4620      	mov	r0, r4
 80286b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80286b4:	4620      	mov	r0, r4
 80286b6:	0142      	lsls	r2, r0, #5
 80286b8:	008b      	lsls	r3, r1, #2
 80286ba:	3307      	adds	r3, #7
 80286bc:	08db      	lsrs	r3, r3, #3
 80286be:	00db      	lsls	r3, r3, #3
 80286c0:	ebad 0d03 	sub.w	sp, sp, r3
 80286c4:	466b      	mov	r3, sp
 80286c6:	3303      	adds	r3, #3
 80286c8:	089b      	lsrs	r3, r3, #2
 80286ca:	009b      	lsls	r3, r3, #2
 80286cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80286ce:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80286d2:	460b      	mov	r3, r1
 80286d4:	3b01      	subs	r3, #1
 80286d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80286d8:	2300      	movs	r3, #0
 80286da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80286dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80286de:	f04f 0200 	mov.w	r2, #0
 80286e2:	f04f 0300 	mov.w	r3, #0
 80286e6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80286ea:	4628      	mov	r0, r5
 80286ec:	0143      	lsls	r3, r0, #5
 80286ee:	4620      	mov	r0, r4
 80286f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80286f4:	4620      	mov	r0, r4
 80286f6:	0142      	lsls	r2, r0, #5
 80286f8:	2300      	movs	r3, #0
 80286fa:	6239      	str	r1, [r7, #32]
 80286fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80286fe:	f04f 0200 	mov.w	r2, #0
 8028702:	f04f 0300 	mov.w	r3, #0
 8028706:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 802870a:	4628      	mov	r0, r5
 802870c:	0143      	lsls	r3, r0, #5
 802870e:	4620      	mov	r0, r4
 8028710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028714:	4620      	mov	r0, r4
 8028716:	0142      	lsls	r2, r0, #5
 8028718:	008b      	lsls	r3, r1, #2
 802871a:	3307      	adds	r3, #7
 802871c:	08db      	lsrs	r3, r3, #3
 802871e:	00db      	lsls	r3, r3, #3
 8028720:	ebad 0d03 	sub.w	sp, sp, r3
 8028724:	466b      	mov	r3, sp
 8028726:	3303      	adds	r3, #3
 8028728:	089b      	lsrs	r3, r3, #2
 802872a:	009b      	lsls	r3, r3, #2
 802872c:	66bb      	str	r3, [r7, #104]	@ 0x68
 802872e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8028732:	460b      	mov	r3, r1
 8028734:	3b01      	subs	r3, #1
 8028736:	667b      	str	r3, [r7, #100]	@ 0x64
 8028738:	2300      	movs	r3, #0
 802873a:	61b9      	str	r1, [r7, #24]
 802873c:	61fb      	str	r3, [r7, #28]
 802873e:	f04f 0200 	mov.w	r2, #0
 8028742:	f04f 0300 	mov.w	r3, #0
 8028746:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 802874a:	4628      	mov	r0, r5
 802874c:	0143      	lsls	r3, r0, #5
 802874e:	4620      	mov	r0, r4
 8028750:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028754:	4620      	mov	r0, r4
 8028756:	0142      	lsls	r2, r0, #5
 8028758:	2300      	movs	r3, #0
 802875a:	6139      	str	r1, [r7, #16]
 802875c:	617b      	str	r3, [r7, #20]
 802875e:	f04f 0200 	mov.w	r2, #0
 8028762:	f04f 0300 	mov.w	r3, #0
 8028766:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 802876a:	4628      	mov	r0, r5
 802876c:	0143      	lsls	r3, r0, #5
 802876e:	4620      	mov	r0, r4
 8028770:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8028774:	4620      	mov	r0, r4
 8028776:	0142      	lsls	r2, r0, #5
 8028778:	008b      	lsls	r3, r1, #2
 802877a:	3307      	adds	r3, #7
 802877c:	08db      	lsrs	r3, r3, #3
 802877e:	00db      	lsls	r3, r3, #3
 8028780:	ebad 0d03 	sub.w	sp, sp, r3
 8028784:	466b      	mov	r3, sp
 8028786:	3303      	adds	r3, #3
 8028788:	089b      	lsrs	r3, r3, #2
 802878a:	009b      	lsls	r3, r3, #2
 802878c:	663b      	str	r3, [r7, #96]	@ 0x60
 802878e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8028792:	460b      	mov	r3, r1
 8028794:	3b01      	subs	r3, #1
 8028796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8028798:	2300      	movs	r3, #0
 802879a:	60b9      	str	r1, [r7, #8]
 802879c:	60fb      	str	r3, [r7, #12]
 802879e:	f04f 0200 	mov.w	r2, #0
 80287a2:	f04f 0300 	mov.w	r3, #0
 80287a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80287aa:	4628      	mov	r0, r5
 80287ac:	0143      	lsls	r3, r0, #5
 80287ae:	4620      	mov	r0, r4
 80287b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80287b4:	4620      	mov	r0, r4
 80287b6:	0142      	lsls	r2, r0, #5
 80287b8:	2300      	movs	r3, #0
 80287ba:	6039      	str	r1, [r7, #0]
 80287bc:	607b      	str	r3, [r7, #4]
 80287be:	f04f 0200 	mov.w	r2, #0
 80287c2:	f04f 0300 	mov.w	r3, #0
 80287c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80287ca:	4628      	mov	r0, r5
 80287cc:	0143      	lsls	r3, r0, #5
 80287ce:	4620      	mov	r0, r4
 80287d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80287d4:	4620      	mov	r0, r4
 80287d6:	0142      	lsls	r2, r0, #5
 80287d8:	008b      	lsls	r3, r1, #2
 80287da:	3307      	adds	r3, #7
 80287dc:	08db      	lsrs	r3, r3, #3
 80287de:	00db      	lsls	r3, r3, #3
 80287e0:	ebad 0d03 	sub.w	sp, sp, r3
 80287e4:	466b      	mov	r3, sp
 80287e6:	3303      	adds	r3, #3
 80287e8:	089b      	lsrs	r3, r3, #2
 80287ea:	009b      	lsls	r3, r3, #2
 80287ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    mp_mul(tmp, r1, s2, nwords);
 80287ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80287f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80287f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80287f6:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80287f8:	f7ff fb92 	bl	8027f20 <sqisign_gen_mp_mul>
    mp_mul(det, r2, s1, nwords);
 80287fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8028802:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8028804:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8028808:	f7ff fb8a 	bl	8027f20 <sqisign_gen_mp_mul>
    mp_sub(det, tmp, det, nwords);
 802880c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028810:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8028814:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8028816:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 802881a:	f7ff fa79 	bl	8027d10 <sqisign_gen_mp_sub>
    mp_inv_2e(det, det, e, nwords);
 802881e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8028826:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 802882a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 802882e:	f7ff fcff 	bl	8028230 <sqisign_gen_mp_inv_2e>

    mp_mul(resa, det, s2, nwords);
 8028832:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8028838:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 802883c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 802883e:	f7ff fb6f 	bl	8027f20 <sqisign_gen_mp_mul>
    mp_mul(resb, det, r2, nwords);
 8028842:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028846:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8028848:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 802884c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 802884e:	f7ff fb67 	bl	8027f20 <sqisign_gen_mp_mul>
    mp_mul(resc, det, s1, nwords);
 8028852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028856:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8028858:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 802885c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 802885e:	f7ff fb5f 	bl	8027f20 <sqisign_gen_mp_mul>
    mp_mul(resd, det, r1, nwords);
 8028862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028866:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8028868:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 802886c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802886e:	f7ff fb57 	bl	8027f20 <sqisign_gen_mp_mul>

    mp_neg(resb, nwords);
 8028872:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8028876:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8028878:	f7ff fc90 	bl	802819c <sqisign_gen_mp_neg>
    mp_neg(resc, nwords);
 802887c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8028880:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8028882:	f7ff fc8b 	bl	802819c <sqisign_gen_mp_neg>

    mp_mod_2exp(resa, w, nwords);
 8028886:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802888a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 802888e:	4619      	mov	r1, r3
 8028890:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8028892:	f7ff fc4a 	bl	802812a <sqisign_gen_mp_mod_2exp>
    mp_mod_2exp(resb, w, nwords);
 8028896:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802889a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 802889e:	4619      	mov	r1, r3
 80288a0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80288a2:	f7ff fc42 	bl	802812a <sqisign_gen_mp_mod_2exp>
    mp_mod_2exp(resc, w, nwords);
 80288a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80288aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80288ae:	4619      	mov	r1, r3
 80288b0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80288b2:	f7ff fc3a 	bl	802812a <sqisign_gen_mp_mod_2exp>
    mp_mod_2exp(resd, w, nwords);
 80288b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80288ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80288be:	4619      	mov	r1, r3
 80288c0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80288c2:	f7ff fc32 	bl	802812a <sqisign_gen_mp_mod_2exp>

    mp_copy(r1, resa, nwords);
 80288c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80288ca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80288cc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80288ce:	f7ff fb06 	bl	8027ede <sqisign_gen_mp_copy>
    mp_copy(r2, resb, nwords);
 80288d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80288d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80288d8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80288da:	f7ff fb00 	bl	8027ede <sqisign_gen_mp_copy>
    mp_copy(s1, resc, nwords);
 80288de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80288e2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80288e4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80288e6:	f7ff fafa 	bl	8027ede <sqisign_gen_mp_copy>
    mp_copy(s2, resd, nwords);
 80288ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80288ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80288f0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80288f2:	f7ff faf4 	bl	8027ede <sqisign_gen_mp_copy>
 80288f6:	46b5      	mov	sp, r6
}
 80288f8:	bf00      	nop
 80288fa:	3794      	adds	r7, #148	@ 0x94
 80288fc:	46bd      	mov	sp, r7
 80288fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028904 <sqisign_gen_quat_order_elem_create>:
void
quat_order_elem_create(quat_alg_elem_t *elem,
                       const quat_p_extremal_maximal_order_t *order,
                       const ibz_vec_4_t *coeffs,
                       const quat_alg_t *Bpoo)
{
 8028904:	b580      	push	{r7, lr}
 8028906:	b094      	sub	sp, #80	@ 0x50
 8028908:	af00      	add	r7, sp, #0
 802890a:	60f8      	str	r0, [r7, #12]
 802890c:	60b9      	str	r1, [r7, #8]
 802890e:	607a      	str	r2, [r7, #4]
 8028910:	603b      	str	r3, [r7, #0]

    // var dec
    quat_alg_elem_t quat_temp;

    // var init
    quat_alg_elem_init(&quat_temp);
 8028912:	f107 0314 	add.w	r3, r7, #20
 8028916:	4618      	mov	r0, r3
 8028918:	f7e6 fa32 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>

    // elem = x
    quat_alg_scalar(elem, &(*coeffs)[0], &ibz_const_one);
 802891c:	687b      	ldr	r3, [r7, #4]
 802891e:	4a33      	ldr	r2, [pc, #204]	@ (80289ec <sqisign_gen_quat_order_elem_create+0xe8>)
 8028920:	4619      	mov	r1, r3
 8028922:	68f8      	ldr	r0, [r7, #12]
 8028924:	f7d8 fe0e 	bl	8001544 <sqisign_gen_quat_alg_scalar>

    // quat_temp = i*y
    quat_alg_scalar(&quat_temp, &((*coeffs)[1]), &ibz_const_one);
 8028928:	687b      	ldr	r3, [r7, #4]
 802892a:	f103 010c 	add.w	r1, r3, #12
 802892e:	f107 0314 	add.w	r3, r7, #20
 8028932:	4a2e      	ldr	r2, [pc, #184]	@ (80289ec <sqisign_gen_quat_order_elem_create+0xe8>)
 8028934:	4618      	mov	r0, r3
 8028936:	f7d8 fe05 	bl	8001544 <sqisign_gen_quat_alg_scalar>
    quat_alg_mul(&quat_temp, &order->z, &quat_temp, Bpoo);
 802893a:	68bb      	ldr	r3, [r7, #8]
 802893c:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8028940:	f107 0214 	add.w	r2, r7, #20
 8028944:	f107 0014 	add.w	r0, r7, #20
 8028948:	683b      	ldr	r3, [r7, #0]
 802894a:	f7d8 fd6a 	bl	8001422 <sqisign_gen_quat_alg_mul>

    // elem = x + i*y
    quat_alg_add(elem, elem, &quat_temp);
 802894e:	f107 0314 	add.w	r3, r7, #20
 8028952:	461a      	mov	r2, r3
 8028954:	68f9      	ldr	r1, [r7, #12]
 8028956:	68f8      	ldr	r0, [r7, #12]
 8028958:	f7d8 fd29 	bl	80013ae <sqisign_gen_quat_alg_add>

    // quat_temp = z * j
    quat_alg_scalar(&quat_temp, &(*coeffs)[2], &ibz_const_one);
 802895c:	687b      	ldr	r3, [r7, #4]
 802895e:	f103 0118 	add.w	r1, r3, #24
 8028962:	f107 0314 	add.w	r3, r7, #20
 8028966:	4a21      	ldr	r2, [pc, #132]	@ (80289ec <sqisign_gen_quat_order_elem_create+0xe8>)
 8028968:	4618      	mov	r0, r3
 802896a:	f7d8 fdeb 	bl	8001544 <sqisign_gen_quat_alg_scalar>
    quat_alg_mul(&quat_temp, &order->t, &quat_temp, Bpoo);
 802896e:	68bb      	ldr	r3, [r7, #8]
 8028970:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 8028974:	f107 0214 	add.w	r2, r7, #20
 8028978:	f107 0014 	add.w	r0, r7, #20
 802897c:	683b      	ldr	r3, [r7, #0]
 802897e:	f7d8 fd50 	bl	8001422 <sqisign_gen_quat_alg_mul>

    // elem = x + i* + z*j
    quat_alg_add(elem, elem, &quat_temp);
 8028982:	f107 0314 	add.w	r3, r7, #20
 8028986:	461a      	mov	r2, r3
 8028988:	68f9      	ldr	r1, [r7, #12]
 802898a:	68f8      	ldr	r0, [r7, #12]
 802898c:	f7d8 fd0f 	bl	80013ae <sqisign_gen_quat_alg_add>

    // quat_temp = t * j * i
    quat_alg_scalar(&quat_temp, &(*coeffs)[3], &ibz_const_one);
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8028996:	f107 0314 	add.w	r3, r7, #20
 802899a:	4a14      	ldr	r2, [pc, #80]	@ (80289ec <sqisign_gen_quat_order_elem_create+0xe8>)
 802899c:	4618      	mov	r0, r3
 802899e:	f7d8 fdd1 	bl	8001544 <sqisign_gen_quat_alg_scalar>
    quat_alg_mul(&quat_temp, &order->t, &quat_temp, Bpoo);
 80289a2:	68bb      	ldr	r3, [r7, #8]
 80289a4:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 80289a8:	f107 0214 	add.w	r2, r7, #20
 80289ac:	f107 0014 	add.w	r0, r7, #20
 80289b0:	683b      	ldr	r3, [r7, #0]
 80289b2:	f7d8 fd36 	bl	8001422 <sqisign_gen_quat_alg_mul>
    quat_alg_mul(&quat_temp, &quat_temp, &order->z, Bpoo);
 80289b6:	68bb      	ldr	r3, [r7, #8]
 80289b8:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80289bc:	f107 0114 	add.w	r1, r7, #20
 80289c0:	f107 0014 	add.w	r0, r7, #20
 80289c4:	683b      	ldr	r3, [r7, #0]
 80289c6:	f7d8 fd2c 	bl	8001422 <sqisign_gen_quat_alg_mul>

    // elem =  x + i*y + j*z + j*i*t
    quat_alg_add(elem, elem, &quat_temp);
 80289ca:	f107 0314 	add.w	r3, r7, #20
 80289ce:	461a      	mov	r2, r3
 80289d0:	68f9      	ldr	r1, [r7, #12]
 80289d2:	68f8      	ldr	r0, [r7, #12]
 80289d4:	f7d8 fceb 	bl	80013ae <sqisign_gen_quat_alg_add>

    quat_alg_elem_finalize(&quat_temp);
 80289d8:	f107 0314 	add.w	r3, r7, #20
 80289dc:	4618      	mov	r0, r3
 80289de:	f7e6 f9e5 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
}
 80289e2:	bf00      	nop
 80289e4:	3750      	adds	r7, #80	@ 0x50
 80289e6:	46bd      	mov	sp, r7
 80289e8:	bd80      	pop	{r7, pc}
 80289ea:	bf00      	nop
 80289ec:	0803b900 	.word	0x0803b900

080289f0 <sqisign_gen_quat_represent_integer>:
int
quat_represent_integer(quat_alg_elem_t *gamma,
                       const ibz_t *n_gamma,
                       int non_diag,
                       const quat_represent_integer_params_t *params)
{
 80289f0:	b590      	push	{r4, r7, lr}
 80289f2:	b0bb      	sub	sp, #236	@ 0xec
 80289f4:	af00      	add	r7, sp, #0
 80289f6:	60f8      	str	r0, [r7, #12]
 80289f8:	60b9      	str	r1, [r7, #8]
 80289fa:	607a      	str	r2, [r7, #4]
 80289fc:	603b      	str	r3, [r7, #0]

    if (ibz_is_even(n_gamma)) {
 80289fe:	68b8      	ldr	r0, [r7, #8]
 8028a00:	f7f4 fc0d 	bl	801d21e <sqisign_gen_ibz_is_even>
 8028a04:	4603      	mov	r3, r0
 8028a06:	2b00      	cmp	r3, #0
 8028a08:	d001      	beq.n	8028a0e <sqisign_gen_quat_represent_integer+0x1e>
        return 0;
 8028a0a:	2300      	movs	r3, #0
 8028a0c:	e3a9      	b.n	8029162 <sqisign_gen_quat_represent_integer+0x772>
    ibz_t bound, sq_bound, temp;
    ibz_t test;
    ibz_vec_4_t coeffs; // coeffs = [x,y,z,t]
    quat_alg_elem_t quat_temp;

    if (non_diag)
 8028a0e:	687b      	ldr	r3, [r7, #4]
 8028a10:	2b00      	cmp	r3, #0
 8028a12:	d00d      	beq.n	8028a30 <sqisign_gen_quat_represent_integer+0x40>
        assert(params->order->q % 4 == 1);
 8028a14:	683b      	ldr	r3, [r7, #0]
 8028a16:	685b      	ldr	r3, [r3, #4]
 8028a18:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8028a1c:	f003 0303 	and.w	r3, r3, #3
 8028a20:	2b01      	cmp	r3, #1
 8028a22:	d005      	beq.n	8028a30 <sqisign_gen_quat_represent_integer+0x40>
 8028a24:	4bbb      	ldr	r3, [pc, #748]	@ (8028d14 <sqisign_gen_quat_represent_integer+0x324>)
 8028a26:	4abc      	ldr	r2, [pc, #752]	@ (8028d18 <sqisign_gen_quat_represent_integer+0x328>)
 8028a28:	2164      	movs	r1, #100	@ 0x64
 8028a2a:	48bc      	ldr	r0, [pc, #752]	@ (8028d1c <sqisign_gen_quat_represent_integer+0x32c>)
 8028a2c:	f00c fc04 	bl	8035238 <__assert_func>

    // var init
    found = 0;
 8028a30:	2300      	movs	r3, #0
 8028a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    ibz_init(&bound);
 8028a36:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8028a3a:	4618      	mov	r0, r3
 8028a3c:	f7f4 fae3 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&test);
 8028a40:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8028a44:	4618      	mov	r0, r3
 8028a46:	f7f4 fade 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&temp);
 8028a4a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028a4e:	4618      	mov	r0, r3
 8028a50:	f7f4 fad9 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&q);
 8028a54:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8028a58:	4618      	mov	r0, r3
 8028a5a:	f7f4 fad4 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&sq_bound);
 8028a5e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8028a62:	4618      	mov	r0, r3
 8028a64:	f7f4 facf 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_vec_4_init(&coeffs);
 8028a68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028a6c:	4618      	mov	r0, r3
 8028a6e:	f7e6 f9d0 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>
    quat_alg_elem_init(&quat_temp);
 8028a72:	f107 0320 	add.w	r3, r7, #32
 8028a76:	4618      	mov	r0, r3
 8028a78:	f7e6 f982 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    ibz_init(&adjusted_n_gamma);
 8028a7c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8028a80:	4618      	mov	r0, r3
 8028a82:	f7f4 fac0 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&cornacchia_target);
 8028a86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028a8a:	4618      	mov	r0, r3
 8028a8c:	f7f4 fabb 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_set(&q, params->order->q);
 8028a90:	683b      	ldr	r3, [r7, #0]
 8028a92:	685b      	ldr	r3, [r3, #4]
 8028a94:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8028a98:	461a      	mov	r2, r3
 8028a9a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8028a9e:	4611      	mov	r1, r2
 8028aa0:	4618      	mov	r0, r3
 8028aa2:	f7f4 fbde 	bl	801d262 <sqisign_gen_ibz_set>

    // this could be removed in the current state
    int standard_order = (params->order->q == 1);
 8028aa6:	683b      	ldr	r3, [r7, #0]
 8028aa8:	685b      	ldr	r3, [r3, #4]
 8028aaa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8028aae:	2b01      	cmp	r3, #1
 8028ab0:	bf0c      	ite	eq
 8028ab2:	2301      	moveq	r3, #1
 8028ab4:	2300      	movne	r3, #0
 8028ab6:	b2db      	uxtb	r3, r3
 8028ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    // adjusting the norm of gamma (multiplying by 4 to find a solution in an order of odd level)
    if (non_diag || standard_order) {
 8028abc:	687b      	ldr	r3, [r7, #4]
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d103      	bne.n	8028aca <sqisign_gen_quat_represent_integer+0xda>
 8028ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8028ac6:	2b00      	cmp	r3, #0
 8028ac8:	d00f      	beq.n	8028aea <sqisign_gen_quat_represent_integer+0xfa>
        ibz_mul(&adjusted_n_gamma, n_gamma, &ibz_const_two);
 8028aca:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8028ace:	4a94      	ldr	r2, [pc, #592]	@ (8028d20 <sqisign_gen_quat_represent_integer+0x330>)
 8028ad0:	68b9      	ldr	r1, [r7, #8]
 8028ad2:	4618      	mov	r0, r3
 8028ad4:	f7f4 facb 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&adjusted_n_gamma, &adjusted_n_gamma, &ibz_const_two);
 8028ad8:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8028adc:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8028ae0:	4a8f      	ldr	r2, [pc, #572]	@ (8028d20 <sqisign_gen_quat_represent_integer+0x330>)
 8028ae2:	4618      	mov	r0, r3
 8028ae4:	f7f4 fac3 	bl	801d06e <sqisign_gen_ibz_mul>
 8028ae8:	e005      	b.n	8028af6 <sqisign_gen_quat_represent_integer+0x106>
    } else {
        ibz_copy(&adjusted_n_gamma, n_gamma);
 8028aea:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8028aee:	68b9      	ldr	r1, [r7, #8]
 8028af0:	4618      	mov	r0, r3
 8028af2:	f7f4 fbc3 	bl	801d27c <sqisign_gen_ibz_copy>
    }
    // computation of the first bound = sqrt (adjust_n_gamma / p - q)
    ibz_div(&sq_bound, &bound, &adjusted_n_gamma, &((params->algebra)->p));
 8028af6:	683b      	ldr	r3, [r7, #0]
 8028af8:	689b      	ldr	r3, [r3, #8]
 8028afa:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8028afe:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8028b02:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8028b06:	f7f4 fadb 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_set(&temp, params->order->q);
 8028b0a:	683b      	ldr	r3, [r7, #0]
 8028b0c:	685b      	ldr	r3, [r3, #4]
 8028b0e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8028b12:	461a      	mov	r2, r3
 8028b14:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028b18:	4611      	mov	r1, r2
 8028b1a:	4618      	mov	r0, r3
 8028b1c:	f7f4 fba1 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_sub(&sq_bound, &sq_bound, &temp);
 8028b20:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028b24:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8028b28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8028b2c:	4618      	mov	r0, r3
 8028b2e:	f7f4 fa8f 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_sqrt_floor(&bound, &sq_bound);
 8028b32:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8028b36:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8028b3a:	4611      	mov	r1, r2
 8028b3c:	4618      	mov	r0, r3
 8028b3e:	f7f4 fd91 	bl	801d664 <sqisign_gen_ibz_sqrt_floor>

    // the size of the search space is roughly n_gamma / (p√q)
    ibz_t counter;
    ibz_init(&counter);
 8028b42:	f107 0314 	add.w	r3, r7, #20
 8028b46:	4618      	mov	r0, r3
 8028b48:	f7f4 fa5d 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_mul(&temp, &temp, &((params->algebra)->p));
 8028b4c:	683b      	ldr	r3, [r7, #0]
 8028b4e:	689b      	ldr	r3, [r3, #8]
 8028b50:	461a      	mov	r2, r3
 8028b52:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8028b56:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028b5a:	4618      	mov	r0, r3
 8028b5c:	f7f4 fa87 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_mul(&temp, &temp, &((params->algebra)->p));
 8028b60:	683b      	ldr	r3, [r7, #0]
 8028b62:	689b      	ldr	r3, [r3, #8]
 8028b64:	461a      	mov	r2, r3
 8028b66:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8028b6a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028b6e:	4618      	mov	r0, r3
 8028b70:	f7f4 fa7d 	bl	801d06e <sqisign_gen_ibz_mul>
    ibz_sqrt_floor(&temp, &temp);
 8028b74:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028b78:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028b7c:	4611      	mov	r1, r2
 8028b7e:	4618      	mov	r0, r3
 8028b80:	f7f4 fd70 	bl	801d664 <sqisign_gen_ibz_sqrt_floor>
    ibz_div(&counter, &temp, &adjusted_n_gamma, &temp);
 8028b84:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028b88:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8028b8c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8028b90:	f107 0014 	add.w	r0, r7, #20
 8028b94:	f7f4 fa94 	bl	801d0c0 <sqisign_gen_ibz_div>

    // entering the main loop
    while (!found && ibz_cmp(&counter, &ibz_const_zero) != 0) {
 8028b98:	e265      	b.n	8029066 <sqisign_gen_quat_represent_integer+0x676>
        // decreasing the counter
        ibz_sub(&counter, &counter, &ibz_const_one);
 8028b9a:	f107 0114 	add.w	r1, r7, #20
 8028b9e:	f107 0314 	add.w	r3, r7, #20
 8028ba2:	4a60      	ldr	r2, [pc, #384]	@ (8028d24 <sqisign_gen_quat_represent_integer+0x334>)
 8028ba4:	4618      	mov	r0, r3
 8028ba6:	f7f4 fa53 	bl	801d050 <sqisign_gen_ibz_sub>

        // we start by sampling the first coordinate
        ibz_rand_interval(&coeffs[2], &ibz_const_one, &bound);
 8028baa:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8028bae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028bb2:	3318      	adds	r3, #24
 8028bb4:	495b      	ldr	r1, [pc, #364]	@ (8028d24 <sqisign_gen_quat_represent_integer+0x334>)
 8028bb6:	4618      	mov	r0, r3
 8028bb8:	f7f4 fb86 	bl	801d2c8 <sqisign_gen_ibz_rand_interval>

        // then, we sample the second coordinate
        // computing the second bound in temp as sqrt( (adjust_n_gamma - p*coeffs[2]²)/qp )
        ibz_mul(&cornacchia_target, &coeffs[2], &coeffs[2]);
 8028bbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028bc0:	f103 0218 	add.w	r2, r3, #24
 8028bc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028bc8:	f103 0118 	add.w	r1, r3, #24
 8028bcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028bd0:	4618      	mov	r0, r3
 8028bd2:	f7f4 fa4c 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&temp, &cornacchia_target, &(params->algebra->p));
 8028bd6:	683b      	ldr	r3, [r7, #0]
 8028bd8:	689b      	ldr	r3, [r3, #8]
 8028bda:	461a      	mov	r2, r3
 8028bdc:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028be0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028be4:	4618      	mov	r0, r3
 8028be6:	f7f4 fa42 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_sub(&temp, &adjusted_n_gamma, &temp);
 8028bea:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028bee:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8028bf2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028bf6:	4618      	mov	r0, r3
 8028bf8:	f7f4 fa2a 	bl	801d050 <sqisign_gen_ibz_sub>
        ibz_mul(&sq_bound, &q, &(params->algebra->p));
 8028bfc:	683b      	ldr	r3, [r7, #0]
 8028bfe:	689b      	ldr	r3, [r3, #8]
 8028c00:	461a      	mov	r2, r3
 8028c02:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8028c06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8028c0a:	4618      	mov	r0, r3
 8028c0c:	f7f4 fa2f 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_div(&temp, &sq_bound, &temp, &sq_bound);
 8028c10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8028c14:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028c18:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8028c1c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8028c20:	f7f4 fa4e 	bl	801d0c0 <sqisign_gen_ibz_div>
        ibz_sqrt_floor(&temp, &temp);
 8028c24:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028c28:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028c2c:	4611      	mov	r1, r2
 8028c2e:	4618      	mov	r0, r3
 8028c30:	f7f4 fd18 	bl	801d664 <sqisign_gen_ibz_sqrt_floor>

        if (ibz_cmp(&temp, &ibz_const_zero) == 0) {
 8028c34:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028c38:	493b      	ldr	r1, [pc, #236]	@ (8028d28 <sqisign_gen_quat_represent_integer+0x338>)
 8028c3a:	4618      	mov	r0, r3
 8028c3c:	f7f4 fab8 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8028c40:	4603      	mov	r3, r0
 8028c42:	2b00      	cmp	r3, #0
 8028c44:	f000 820e 	beq.w	8029064 <sqisign_gen_quat_represent_integer+0x674>
            continue;
        }
        // sampling the second value
        ibz_rand_interval(&coeffs[3], &ibz_const_one, &temp);
 8028c48:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028c4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028c50:	3324      	adds	r3, #36	@ 0x24
 8028c52:	4934      	ldr	r1, [pc, #208]	@ (8028d24 <sqisign_gen_quat_represent_integer+0x334>)
 8028c54:	4618      	mov	r0, r3
 8028c56:	f7f4 fb37 	bl	801d2c8 <sqisign_gen_ibz_rand_interval>

        // compute cornacchia_target = n_gamma - p * (z² + q*t²)
        ibz_mul(&temp, &coeffs[3], &coeffs[3]);
 8028c5a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028c5e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8028c62:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028c66:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8028c6a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028c6e:	4618      	mov	r0, r3
 8028c70:	f7f4 f9fd 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_mul(&temp, &q, &temp);
 8028c74:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028c78:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8028c7c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028c80:	4618      	mov	r0, r3
 8028c82:	f7f4 f9f4 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_add(&cornacchia_target, &cornacchia_target, &temp);
 8028c86:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028c8a:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028c8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028c92:	4618      	mov	r0, r3
 8028c94:	f7f4 f9cd 	bl	801d032 <sqisign_gen_ibz_add>
        ibz_mul(&cornacchia_target, &cornacchia_target, &((params->algebra)->p));
 8028c98:	683b      	ldr	r3, [r7, #0]
 8028c9a:	689b      	ldr	r3, [r3, #8]
 8028c9c:	461a      	mov	r2, r3
 8028c9e:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028ca2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028ca6:	4618      	mov	r0, r3
 8028ca8:	f7f4 f9e1 	bl	801d06e <sqisign_gen_ibz_mul>
        ibz_sub(&cornacchia_target, &adjusted_n_gamma, &cornacchia_target);
 8028cac:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8028cb0:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8028cb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028cb8:	4618      	mov	r0, r3
 8028cba:	f7f4 f9c9 	bl	801d050 <sqisign_gen_ibz_sub>
        assert(ibz_cmp(&cornacchia_target, &ibz_const_zero) > 0);
 8028cbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028cc2:	4919      	ldr	r1, [pc, #100]	@ (8028d28 <sqisign_gen_quat_represent_integer+0x338>)
 8028cc4:	4618      	mov	r0, r3
 8028cc6:	f7f4 fa73 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8028cca:	4603      	mov	r3, r0
 8028ccc:	2b00      	cmp	r3, #0
 8028cce:	dc05      	bgt.n	8028cdc <sqisign_gen_quat_represent_integer+0x2ec>
 8028cd0:	4b16      	ldr	r3, [pc, #88]	@ (8028d2c <sqisign_gen_quat_represent_integer+0x33c>)
 8028cd2:	4a11      	ldr	r2, [pc, #68]	@ (8028d18 <sqisign_gen_quat_represent_integer+0x328>)
 8028cd4:	21a9      	movs	r1, #169	@ 0xa9
 8028cd6:	4811      	ldr	r0, [pc, #68]	@ (8028d1c <sqisign_gen_quat_represent_integer+0x32c>)
 8028cd8:	f00c faae 	bl	8035238 <__assert_func>

        // applying cornacchia
        if (ibz_probab_prime(&cornacchia_target, params->primality_test_iterations))
 8028cdc:	683b      	ldr	r3, [r7, #0]
 8028cde:	681a      	ldr	r2, [r3, #0]
 8028ce0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028ce4:	4611      	mov	r1, r2
 8028ce6:	4618      	mov	r0, r3
 8028ce8:	f7f4 fc73 	bl	801d5d2 <sqisign_gen_ibz_probab_prime>
 8028cec:	4603      	mov	r3, r0
 8028cee:	2b00      	cmp	r3, #0
 8028cf0:	d01e      	beq.n	8028d30 <sqisign_gen_quat_represent_integer+0x340>
            found = ibz_cornacchia_prime(&(coeffs[0]), &(coeffs[1]), &q, &cornacchia_target);
 8028cf2:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 8028cf6:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8028cfa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028cfe:	f103 010c 	add.w	r1, r3, #12
 8028d02:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8028d06:	4623      	mov	r3, r4
 8028d08:	f7f4 ff22 	bl	801db50 <sqisign_gen_ibz_cornacchia_prime>
 8028d0c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8028d10:	e011      	b.n	8028d36 <sqisign_gen_quat_represent_integer+0x346>
 8028d12:	bf00      	nop
 8028d14:	08038950 	.word	0x08038950
 8028d18:	0803bea4 	.word	0x0803bea4
 8028d1c:	0803896c 	.word	0x0803896c
 8028d20:	0803b90c 	.word	0x0803b90c
 8028d24:	0803b900 	.word	0x0803b900
 8028d28:	0803b8f4 	.word	0x0803b8f4
 8028d2c:	08038984 	.word	0x08038984
        else
            found = 0;
 8028d30:	2300      	movs	r3, #0
 8028d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

        if (found && non_diag && standard_order) {
 8028d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8028d3a:	2b00      	cmp	r3, #0
 8028d3c:	d056      	beq.n	8028dec <sqisign_gen_quat_represent_integer+0x3fc>
 8028d3e:	687b      	ldr	r3, [r7, #4]
 8028d40:	2b00      	cmp	r3, #0
 8028d42:	d053      	beq.n	8028dec <sqisign_gen_quat_represent_integer+0x3fc>
 8028d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8028d48:	2b00      	cmp	r3, #0
 8028d4a:	d04f      	beq.n	8028dec <sqisign_gen_quat_represent_integer+0x3fc>
            // check that we can divide by two at least once
            // the treatmeat depends if the basis contains (1+j)/2 or (1+k)/2
            // we must have x = t mod 2 and y = z mod 2
            // if q=1 we can simply swap x and y
            if (ibz_is_odd(&coeffs[0]) != ibz_is_odd(&coeffs[3])) {
 8028d4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028d50:	4618      	mov	r0, r3
 8028d52:	f7f4 fa78 	bl	801d246 <sqisign_gen_ibz_is_odd>
 8028d56:	4604      	mov	r4, r0
 8028d58:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028d5c:	3324      	adds	r3, #36	@ 0x24
 8028d5e:	4618      	mov	r0, r3
 8028d60:	f7f4 fa71 	bl	801d246 <sqisign_gen_ibz_is_odd>
 8028d64:	4603      	mov	r3, r0
 8028d66:	429c      	cmp	r4, r3
 8028d68:	d008      	beq.n	8028d7c <sqisign_gen_quat_represent_integer+0x38c>
                ibz_swap(&coeffs[1], &coeffs[0]);
 8028d6a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8028d6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028d72:	330c      	adds	r3, #12
 8028d74:	4611      	mov	r1, r2
 8028d76:	4618      	mov	r0, r3
 8028d78:	f7f4 fa8d 	bl	801d296 <sqisign_gen_ibz_swap>
            }
            // we further check that (x-t)/2 = 1 mod 2 and (y-z)/2 = 1 mod 2 to ensure that the
            // resulting endomorphism will behave well for dim 2 computations
            found = found && ((ibz_get(&coeffs[0]) - ibz_get(&coeffs[3])) % 4 == 2) &&
 8028d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8028d80:	2b00      	cmp	r3, #0
 8028d82:	d030      	beq.n	8028de6 <sqisign_gen_quat_represent_integer+0x3f6>
 8028d84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028d88:	4618      	mov	r0, r3
 8028d8a:	f7f4 fa91 	bl	801d2b0 <sqisign_gen_ibz_get>
 8028d8e:	4604      	mov	r4, r0
 8028d90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028d94:	3324      	adds	r3, #36	@ 0x24
 8028d96:	4618      	mov	r0, r3
 8028d98:	f7f4 fa8a 	bl	801d2b0 <sqisign_gen_ibz_get>
 8028d9c:	4603      	mov	r3, r0
 8028d9e:	1ae3      	subs	r3, r4, r3
 8028da0:	425a      	negs	r2, r3
 8028da2:	f003 0303 	and.w	r3, r3, #3
 8028da6:	f002 0203 	and.w	r2, r2, #3
 8028daa:	bf58      	it	pl
 8028dac:	4253      	negpl	r3, r2
 8028dae:	2b02      	cmp	r3, #2
 8028db0:	d119      	bne.n	8028de6 <sqisign_gen_quat_represent_integer+0x3f6>
                    ((ibz_get(&coeffs[1]) - ibz_get(&coeffs[2])) % 4 == 2);
 8028db2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028db6:	330c      	adds	r3, #12
 8028db8:	4618      	mov	r0, r3
 8028dba:	f7f4 fa79 	bl	801d2b0 <sqisign_gen_ibz_get>
 8028dbe:	4604      	mov	r4, r0
 8028dc0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028dc4:	3318      	adds	r3, #24
 8028dc6:	4618      	mov	r0, r3
 8028dc8:	f7f4 fa72 	bl	801d2b0 <sqisign_gen_ibz_get>
 8028dcc:	4603      	mov	r3, r0
 8028dce:	1ae3      	subs	r3, r4, r3
 8028dd0:	425a      	negs	r2, r3
 8028dd2:	f003 0303 	and.w	r3, r3, #3
 8028dd6:	f002 0203 	and.w	r2, r2, #3
 8028dda:	bf58      	it	pl
 8028ddc:	4253      	negpl	r3, r2
            found = found && ((ibz_get(&coeffs[0]) - ibz_get(&coeffs[3])) % 4 == 2) &&
 8028dde:	2b02      	cmp	r3, #2
 8028de0:	d101      	bne.n	8028de6 <sqisign_gen_quat_represent_integer+0x3f6>
 8028de2:	2301      	movs	r3, #1
 8028de4:	e000      	b.n	8028de8 <sqisign_gen_quat_represent_integer+0x3f8>
 8028de6:	2300      	movs	r3, #0
 8028de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        }
        if (found) {
 8028dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8028df0:	2b00      	cmp	r3, #0
 8028df2:	f000 8138 	beq.w	8029066 <sqisign_gen_quat_represent_integer+0x676>

#ifndef NDEBUG
            ibz_set(&temp, (params->order->q));
 8028df6:	683b      	ldr	r3, [r7, #0]
 8028df8:	685b      	ldr	r3, [r3, #4]
 8028dfa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8028dfe:	461a      	mov	r2, r3
 8028e00:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028e04:	4611      	mov	r1, r2
 8028e06:	4618      	mov	r0, r3
 8028e08:	f7f4 fa2b 	bl	801d262 <sqisign_gen_ibz_set>
            ibz_mul(&temp, &temp, &(coeffs[1]));
 8028e0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028e10:	f103 020c 	add.w	r2, r3, #12
 8028e14:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8028e18:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028e1c:	4618      	mov	r0, r3
 8028e1e:	f7f4 f926 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mul(&temp, &temp, &(coeffs[1]));
 8028e22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028e26:	f103 020c 	add.w	r2, r3, #12
 8028e2a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8028e2e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028e32:	4618      	mov	r0, r3
 8028e34:	f7f4 f91b 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mul(&test, &(coeffs[0]), &(coeffs[0]));
 8028e38:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8028e3c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8028e40:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8028e44:	4618      	mov	r0, r3
 8028e46:	f7f4 f912 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&temp, &temp, &test);
 8028e4a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8028e4e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8028e52:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028e56:	4618      	mov	r0, r3
 8028e58:	f7f4 f8eb 	bl	801d032 <sqisign_gen_ibz_add>
            assert(0 == ibz_cmp(&temp, &cornacchia_target));
 8028e5c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8028e60:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028e64:	4611      	mov	r1, r2
 8028e66:	4618      	mov	r0, r3
 8028e68:	f7f4 f9a2 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8028e6c:	4603      	mov	r3, r0
 8028e6e:	2b00      	cmp	r3, #0
 8028e70:	d005      	beq.n	8028e7e <sqisign_gen_quat_represent_integer+0x48e>
 8028e72:	4bbe      	ldr	r3, [pc, #760]	@ (802916c <sqisign_gen_quat_represent_integer+0x77c>)
 8028e74:	4abe      	ldr	r2, [pc, #760]	@ (8029170 <sqisign_gen_quat_represent_integer+0x780>)
 8028e76:	21c6      	movs	r1, #198	@ 0xc6
 8028e78:	48be      	ldr	r0, [pc, #760]	@ (8029174 <sqisign_gen_quat_represent_integer+0x784>)
 8028e7a:	f00c f9dd 	bl	8035238 <__assert_func>

            ibz_mul(&cornacchia_target, &(coeffs[3]), &(coeffs[3]));
 8028e7e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028e82:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8028e86:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028e8a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8028e8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028e92:	4618      	mov	r0, r3
 8028e94:	f7f4 f8eb 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mul(&cornacchia_target, &cornacchia_target, &(params->algebra->p));
 8028e98:	683b      	ldr	r3, [r7, #0]
 8028e9a:	689b      	ldr	r3, [r3, #8]
 8028e9c:	461a      	mov	r2, r3
 8028e9e:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028ea2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028ea6:	4618      	mov	r0, r3
 8028ea8:	f7f4 f8e1 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mul(&temp, &(coeffs[1]), &(coeffs[1]));
 8028eac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028eb0:	f103 020c 	add.w	r2, r3, #12
 8028eb4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028eb8:	f103 010c 	add.w	r1, r3, #12
 8028ebc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028ec0:	4618      	mov	r0, r3
 8028ec2:	f7f4 f8d4 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&cornacchia_target, &cornacchia_target, &temp);
 8028ec6:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028eca:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028ece:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028ed2:	4618      	mov	r0, r3
 8028ed4:	f7f4 f8ad 	bl	801d032 <sqisign_gen_ibz_add>
            ibz_set(&temp, (params->order->q));
 8028ed8:	683b      	ldr	r3, [r7, #0]
 8028eda:	685b      	ldr	r3, [r3, #4]
 8028edc:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8028ee0:	461a      	mov	r2, r3
 8028ee2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028ee6:	4611      	mov	r1, r2
 8028ee8:	4618      	mov	r0, r3
 8028eea:	f7f4 f9ba 	bl	801d262 <sqisign_gen_ibz_set>
            ibz_mul(&cornacchia_target, &cornacchia_target, &temp);
 8028eee:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028ef2:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028ef6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028efa:	4618      	mov	r0, r3
 8028efc:	f7f4 f8b7 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mul(&temp, &(coeffs[0]), &coeffs[0]);
 8028f00:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8028f04:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8028f08:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028f0c:	4618      	mov	r0, r3
 8028f0e:	f7f4 f8ae 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&cornacchia_target, &cornacchia_target, &temp);
 8028f12:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028f16:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028f1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028f1e:	4618      	mov	r0, r3
 8028f20:	f7f4 f887 	bl	801d032 <sqisign_gen_ibz_add>
            ibz_mul(&temp, &(coeffs[2]), &coeffs[2]);
 8028f24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028f28:	f103 0218 	add.w	r2, r3, #24
 8028f2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028f30:	f103 0118 	add.w	r1, r3, #24
 8028f34:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028f38:	4618      	mov	r0, r3
 8028f3a:	f7f4 f898 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_mul(&temp, &temp, &(params->algebra->p));
 8028f3e:	683b      	ldr	r3, [r7, #0]
 8028f40:	689b      	ldr	r3, [r3, #8]
 8028f42:	461a      	mov	r2, r3
 8028f44:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8028f48:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028f4c:	4618      	mov	r0, r3
 8028f4e:	f7f4 f88e 	bl	801d06e <sqisign_gen_ibz_mul>
            ibz_add(&cornacchia_target, &cornacchia_target, &temp);
 8028f52:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8028f56:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8028f5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028f5e:	4618      	mov	r0, r3
 8028f60:	f7f4 f867 	bl	801d032 <sqisign_gen_ibz_add>
            assert(0 == ibz_cmp(&cornacchia_target, &adjusted_n_gamma));
 8028f64:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8028f68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8028f6c:	4611      	mov	r1, r2
 8028f6e:	4618      	mov	r0, r3
 8028f70:	f7f4 f91e 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8028f74:	4603      	mov	r3, r0
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	d005      	beq.n	8028f86 <sqisign_gen_quat_represent_integer+0x596>
 8028f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8029178 <sqisign_gen_quat_represent_integer+0x788>)
 8028f7c:	4a7c      	ldr	r2, [pc, #496]	@ (8029170 <sqisign_gen_quat_represent_integer+0x780>)
 8028f7e:	21d3      	movs	r1, #211	@ 0xd3
 8028f80:	487c      	ldr	r0, [pc, #496]	@ (8029174 <sqisign_gen_quat_represent_integer+0x784>)
 8028f82:	f00c f959 	bl	8035238 <__assert_func>
#endif
            // translate x,y,z,t into the quaternion element gamma
            quat_order_elem_create(gamma, (params->order), &coeffs, (params->algebra));
 8028f86:	683b      	ldr	r3, [r7, #0]
 8028f88:	6859      	ldr	r1, [r3, #4]
 8028f8a:	683b      	ldr	r3, [r7, #0]
 8028f8c:	689b      	ldr	r3, [r3, #8]
 8028f8e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8028f92:	68f8      	ldr	r0, [r7, #12]
 8028f94:	f7ff fcb6 	bl	8028904 <sqisign_gen_quat_order_elem_create>
#ifndef NDEBUG
            quat_alg_norm(&temp, &(coeffs[0]), gamma, (params->algebra));
 8028f98:	683b      	ldr	r3, [r7, #0]
 8028f9a:	689b      	ldr	r3, [r3, #8]
 8028f9c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8028fa0:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8028fa4:	68fa      	ldr	r2, [r7, #12]
 8028fa6:	f7d8 fa59 	bl	800145c <sqisign_gen_quat_alg_norm>
            assert(ibz_is_one(&(coeffs[0])));
 8028faa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8028fae:	4618      	mov	r0, r3
 8028fb0:	f7f4 f921 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 8028fb4:	4603      	mov	r3, r0
 8028fb6:	2b00      	cmp	r3, #0
 8028fb8:	d105      	bne.n	8028fc6 <sqisign_gen_quat_represent_integer+0x5d6>
 8028fba:	4b70      	ldr	r3, [pc, #448]	@ (802917c <sqisign_gen_quat_represent_integer+0x78c>)
 8028fbc:	4a6c      	ldr	r2, [pc, #432]	@ (8029170 <sqisign_gen_quat_represent_integer+0x780>)
 8028fbe:	21d9      	movs	r1, #217	@ 0xd9
 8028fc0:	486c      	ldr	r0, [pc, #432]	@ (8029174 <sqisign_gen_quat_represent_integer+0x784>)
 8028fc2:	f00c f939 	bl	8035238 <__assert_func>
            assert(0 == ibz_cmp(&temp, &adjusted_n_gamma));
 8028fc6:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8028fca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8028fce:	4611      	mov	r1, r2
 8028fd0:	4618      	mov	r0, r3
 8028fd2:	f7f4 f8ed 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8028fd6:	4603      	mov	r3, r0
 8028fd8:	2b00      	cmp	r3, #0
 8028fda:	d005      	beq.n	8028fe8 <sqisign_gen_quat_represent_integer+0x5f8>
 8028fdc:	4b68      	ldr	r3, [pc, #416]	@ (8029180 <sqisign_gen_quat_represent_integer+0x790>)
 8028fde:	4a64      	ldr	r2, [pc, #400]	@ (8029170 <sqisign_gen_quat_represent_integer+0x780>)
 8028fe0:	21da      	movs	r1, #218	@ 0xda
 8028fe2:	4864      	ldr	r0, [pc, #400]	@ (8029174 <sqisign_gen_quat_represent_integer+0x784>)
 8028fe4:	f00c f928 	bl	8035238 <__assert_func>
            assert(quat_lattice_contains(NULL, &((params->order)->order), gamma));
 8028fe8:	683b      	ldr	r3, [r7, #0]
 8028fea:	685b      	ldr	r3, [r3, #4]
 8028fec:	68fa      	ldr	r2, [r7, #12]
 8028fee:	4619      	mov	r1, r3
 8028ff0:	2000      	movs	r0, #0
 8028ff2:	f7f8 f979 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8028ff6:	4603      	mov	r3, r0
 8028ff8:	2b00      	cmp	r3, #0
 8028ffa:	d105      	bne.n	8029008 <sqisign_gen_quat_represent_integer+0x618>
 8028ffc:	4b61      	ldr	r3, [pc, #388]	@ (8029184 <sqisign_gen_quat_represent_integer+0x794>)
 8028ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8029170 <sqisign_gen_quat_represent_integer+0x780>)
 8029000:	21db      	movs	r1, #219	@ 0xdb
 8029002:	485c      	ldr	r0, [pc, #368]	@ (8029174 <sqisign_gen_quat_represent_integer+0x784>)
 8029004:	f00c f918 	bl	8035238 <__assert_func>
#endif
            // making gamma primitive
            // coeffs contains the coefficients of primitivized gamma in the basis of order
            quat_alg_make_primitive(&coeffs, &temp, gamma, &((params->order)->order));
 8029008:	683b      	ldr	r3, [r7, #0]
 802900a:	685b      	ldr	r3, [r3, #4]
 802900c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8029010:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8029014:	68fa      	ldr	r2, [r7, #12]
 8029016:	f7d8 faef 	bl	80015f8 <sqisign_gen_quat_alg_make_primitive>

            if (non_diag || standard_order)
 802901a:	687b      	ldr	r3, [r7, #4]
 802901c:	2b00      	cmp	r3, #0
 802901e:	d103      	bne.n	8029028 <sqisign_gen_quat_represent_integer+0x638>
 8029020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8029024:	2b00      	cmp	r3, #0
 8029026:	d00e      	beq.n	8029046 <sqisign_gen_quat_represent_integer+0x656>
                found = (ibz_cmp(&temp, &ibz_const_two) == 0);
 8029028:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802902c:	4956      	ldr	r1, [pc, #344]	@ (8029188 <sqisign_gen_quat_represent_integer+0x798>)
 802902e:	4618      	mov	r0, r3
 8029030:	f7f4 f8be 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8029034:	4603      	mov	r3, r0
 8029036:	2b00      	cmp	r3, #0
 8029038:	bf0c      	ite	eq
 802903a:	2301      	moveq	r3, #1
 802903c:	2300      	movne	r3, #0
 802903e:	b2db      	uxtb	r3, r3
 8029040:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8029044:	e00f      	b.n	8029066 <sqisign_gen_quat_represent_integer+0x676>
            else
                found = (ibz_cmp(&temp, &ibz_const_one) == 0);
 8029046:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802904a:	4950      	ldr	r1, [pc, #320]	@ (802918c <sqisign_gen_quat_represent_integer+0x79c>)
 802904c:	4618      	mov	r0, r3
 802904e:	f7f4 f8af 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8029052:	4603      	mov	r3, r0
 8029054:	2b00      	cmp	r3, #0
 8029056:	bf0c      	ite	eq
 8029058:	2301      	moveq	r3, #1
 802905a:	2300      	movne	r3, #0
 802905c:	b2db      	uxtb	r3, r3
 802905e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8029062:	e000      	b.n	8029066 <sqisign_gen_quat_represent_integer+0x676>
            continue;
 8029064:	bf00      	nop
    while (!found && ibz_cmp(&counter, &ibz_const_zero) != 0) {
 8029066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802906a:	2b00      	cmp	r3, #0
 802906c:	d109      	bne.n	8029082 <sqisign_gen_quat_represent_integer+0x692>
 802906e:	f107 0314 	add.w	r3, r7, #20
 8029072:	4947      	ldr	r1, [pc, #284]	@ (8029190 <sqisign_gen_quat_represent_integer+0x7a0>)
 8029074:	4618      	mov	r0, r3
 8029076:	f7f4 f89b 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 802907a:	4603      	mov	r3, r0
 802907c:	2b00      	cmp	r3, #0
 802907e:	f47f ad8c 	bne.w	8028b9a <sqisign_gen_quat_represent_integer+0x1aa>
        }
    }

    if (found) {
 8029082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8029086:	2b00      	cmp	r3, #0
 8029088:	d037      	beq.n	80290fa <sqisign_gen_quat_represent_integer+0x70a>
        // new gamma
        ibz_mat_4x4_eval(&coeffs, &(((params->order)->order).basis), &coeffs);
 802908a:	683b      	ldr	r3, [r7, #0]
 802908c:	685b      	ldr	r3, [r3, #4]
 802908e:	f103 010c 	add.w	r1, r3, #12
 8029092:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8029096:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802909a:	4618      	mov	r0, r3
 802909c:	f7e2 f815 	bl	800b0ca <sqisign_gen_ibz_mat_4x4_eval>
        ibz_copy(&gamma->coord[0], &coeffs[0]);
 80290a0:	68fb      	ldr	r3, [r7, #12]
 80290a2:	330c      	adds	r3, #12
 80290a4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80290a8:	4611      	mov	r1, r2
 80290aa:	4618      	mov	r0, r3
 80290ac:	f7f4 f8e6 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&gamma->coord[1], &coeffs[1]);
 80290b0:	68fb      	ldr	r3, [r7, #12]
 80290b2:	f103 0218 	add.w	r2, r3, #24
 80290b6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80290ba:	330c      	adds	r3, #12
 80290bc:	4619      	mov	r1, r3
 80290be:	4610      	mov	r0, r2
 80290c0:	f7f4 f8dc 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&gamma->coord[2], &coeffs[2]);
 80290c4:	68fb      	ldr	r3, [r7, #12]
 80290c6:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80290ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80290ce:	3318      	adds	r3, #24
 80290d0:	4619      	mov	r1, r3
 80290d2:	4610      	mov	r0, r2
 80290d4:	f7f4 f8d2 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&gamma->coord[3], &coeffs[3]);
 80290d8:	68fb      	ldr	r3, [r7, #12]
 80290da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80290de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80290e2:	3324      	adds	r3, #36	@ 0x24
 80290e4:	4619      	mov	r1, r3
 80290e6:	4610      	mov	r0, r2
 80290e8:	f7f4 f8c8 	bl	801d27c <sqisign_gen_ibz_copy>
        ibz_copy(&gamma->denom, &(((params->order)->order).denom));
 80290ec:	68fa      	ldr	r2, [r7, #12]
 80290ee:	683b      	ldr	r3, [r7, #0]
 80290f0:	685b      	ldr	r3, [r3, #4]
 80290f2:	4619      	mov	r1, r3
 80290f4:	4610      	mov	r0, r2
 80290f6:	f7f4 f8c1 	bl	801d27c <sqisign_gen_ibz_copy>
    }
    // var finalize
    ibz_finalize(&counter);
 80290fa:	f107 0314 	add.w	r3, r7, #20
 80290fe:	4618      	mov	r0, r3
 8029100:	f7f3 ff8c 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&bound);
 8029104:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8029108:	4618      	mov	r0, r3
 802910a:	f7f3 ff87 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&temp);
 802910e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8029112:	4618      	mov	r0, r3
 8029114:	f7f3 ff82 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&sq_bound);
 8029118:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802911c:	4618      	mov	r0, r3
 802911e:	f7f3 ff7d 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&coeffs);
 8029122:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8029126:	4618      	mov	r0, r3
 8029128:	f7e5 fe8f 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
    quat_alg_elem_finalize(&quat_temp);
 802912c:	f107 0320 	add.w	r3, r7, #32
 8029130:	4618      	mov	r0, r3
 8029132:	f7e5 fe3b 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    ibz_finalize(&adjusted_n_gamma);
 8029136:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 802913a:	4618      	mov	r0, r3
 802913c:	f7f3 ff6e 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&cornacchia_target);
 8029140:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8029144:	4618      	mov	r0, r3
 8029146:	f7f3 ff69 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&q);
 802914a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 802914e:	4618      	mov	r0, r3
 8029150:	f7f3 ff64 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&test);
 8029154:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8029158:	4618      	mov	r0, r3
 802915a:	f7f3 ff5f 	bl	801d01c <sqisign_gen_ibz_finalize>

    return found;
 802915e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
}
 8029162:	4618      	mov	r0, r3
 8029164:	37ec      	adds	r7, #236	@ 0xec
 8029166:	46bd      	mov	sp, r7
 8029168:	bd90      	pop	{r4, r7, pc}
 802916a:	bf00      	nop
 802916c:	080389b8 	.word	0x080389b8
 8029170:	0803bea4 	.word	0x0803bea4
 8029174:	0803896c 	.word	0x0803896c
 8029178:	080389e0 	.word	0x080389e0
 802917c:	08038a14 	.word	0x08038a14
 8029180:	08038a30 	.word	0x08038a30
 8029184:	08038a58 	.word	0x08038a58
 8029188:	0803b90c 	.word	0x0803b90c
 802918c:	0803b900 	.word	0x0803b900
 8029190:	0803b8f4 	.word	0x0803b8f4

08029194 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm>:
quat_sampling_random_ideal_O0_given_norm(quat_left_ideal_t *lideal,
                                         const ibz_t *norm,
                                         int is_prime,
                                         const quat_represent_integer_params_t *params,
                                         const ibz_t *prime_cofactor)
{
 8029194:	b580      	push	{r7, lr}
 8029196:	b0b0      	sub	sp, #192	@ 0xc0
 8029198:	af02      	add	r7, sp, #8
 802919a:	60f8      	str	r0, [r7, #12]
 802919c:	60b9      	str	r1, [r7, #8]
 802919e:	607a      	str	r2, [r7, #4]
 80291a0:	603b      	str	r3, [r7, #0]

    ibz_t n_temp, norm_d;
    ibz_t disc;
    quat_alg_elem_t gen, gen_rerand;
    int found = 0;
 80291a2:	2300      	movs	r3, #0
 80291a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    ibz_init(&n_temp);
 80291a8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80291ac:	4618      	mov	r0, r3
 80291ae:	f7f3 ff2a 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm_d);
 80291b2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80291b6:	4618      	mov	r0, r3
 80291b8:	f7f3 ff25 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&disc);
 80291bc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80291c0:	4618      	mov	r0, r3
 80291c2:	f7f3 ff20 	bl	801d006 <sqisign_gen_ibz_init>
    quat_alg_elem_init(&gen);
 80291c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80291ca:	4618      	mov	r0, r3
 80291cc:	f7e5 fdd8 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>
    quat_alg_elem_init(&gen_rerand);
 80291d0:	f107 0310 	add.w	r3, r7, #16
 80291d4:	4618      	mov	r0, r3
 80291d6:	f7e5 fdd3 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>

    // when the norm is prime we can be quite efficient
    // by avoiding to run represent integer
    // the first step is to generate one ideal of the correct norm
    if (is_prime) {
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	2b00      	cmp	r3, #0
 80291de:	d076      	beq.n	80292ce <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x13a>

        // we find a quaternion element of norm divisible by norm
        while (!found) {
 80291e0:	e070      	b.n	80292c4 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x130>
            // generating a trace-zero element at random
            ibz_set(&gen.coord[0], 0);
 80291e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80291e6:	330c      	adds	r3, #12
 80291e8:	2100      	movs	r1, #0
 80291ea:	4618      	mov	r0, r3
 80291ec:	f7f4 f839 	bl	801d262 <sqisign_gen_ibz_set>
            ibz_sub(&n_temp, norm, &ibz_const_one);
 80291f0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80291f4:	4ac0      	ldr	r2, [pc, #768]	@ (80294f8 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x364>)
 80291f6:	68b9      	ldr	r1, [r7, #8]
 80291f8:	4618      	mov	r0, r3
 80291fa:	f7f3 ff29 	bl	801d050 <sqisign_gen_ibz_sub>
            for (int i = 1; i < 4; i++)
 80291fe:	2301      	movs	r3, #1
 8029200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8029204:	e015      	b.n	8029232 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x9e>
                ibz_rand_interval(&gen.coord[i], &ibz_const_zero, &n_temp);
 8029206:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 802920a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802920e:	4613      	mov	r3, r2
 8029210:	005b      	lsls	r3, r3, #1
 8029212:	4413      	add	r3, r2
 8029214:	009b      	lsls	r3, r3, #2
 8029216:	3308      	adds	r3, #8
 8029218:	440b      	add	r3, r1
 802921a:	3304      	adds	r3, #4
 802921c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8029220:	49b6      	ldr	r1, [pc, #728]	@ (80294fc <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x368>)
 8029222:	4618      	mov	r0, r3
 8029224:	f7f4 f850 	bl	801d2c8 <sqisign_gen_ibz_rand_interval>
            for (int i = 1; i < 4; i++)
 8029228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802922c:	3301      	adds	r3, #1
 802922e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8029232:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8029236:	2b03      	cmp	r3, #3
 8029238:	dde5      	ble.n	8029206 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x72>

            // first, we compute the norm of the gen
            quat_alg_norm(&n_temp, &norm_d, &gen, (params->algebra));
 802923a:	683b      	ldr	r3, [r7, #0]
 802923c:	689b      	ldr	r3, [r3, #8]
 802923e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8029242:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8029246:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 802924a:	f7d8 f907 	bl	800145c <sqisign_gen_quat_alg_norm>
            assert(ibz_is_one(&norm_d));
 802924e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8029252:	4618      	mov	r0, r3
 8029254:	f7f3 ffcf 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 8029258:	4603      	mov	r3, r0
 802925a:	2b00      	cmp	r3, #0
 802925c:	d106      	bne.n	802926c <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0xd8>
 802925e:	4ba8      	ldr	r3, [pc, #672]	@ (8029500 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x36c>)
 8029260:	4aa8      	ldr	r2, [pc, #672]	@ (8029504 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x370>)
 8029262:	f240 1121 	movw	r1, #289	@ 0x121
 8029266:	48a8      	ldr	r0, [pc, #672]	@ (8029508 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x374>)
 8029268:	f00b ffe6 	bl	8035238 <__assert_func>

            // and finally the negation mod norm
            ibz_neg(&disc, &n_temp);
 802926c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8029270:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8029274:	4611      	mov	r1, r2
 8029276:	4618      	mov	r0, r3
 8029278:	f7f3 ff08 	bl	801d08c <sqisign_gen_ibz_neg>
            ibz_mod(&disc, &disc, norm);
 802927c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8029280:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8029284:	68ba      	ldr	r2, [r7, #8]
 8029286:	4618      	mov	r0, r3
 8029288:	f7f3 ff4b 	bl	801d122 <sqisign_gen_ibz_mod>
            // now we check that -n is a square mod norm
            // and if the square root exists we compute it
            found = ibz_sqrt_mod_p(&gen.coord[0], &disc, norm);
 802928c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8029290:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8029294:	330c      	adds	r3, #12
 8029296:	68ba      	ldr	r2, [r7, #8]
 8029298:	4618      	mov	r0, r3
 802929a:	f7f4 f9f1 	bl	801d680 <sqisign_gen_ibz_sqrt_mod_p>
 802929e:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            found = found && !quat_alg_elem_is_zero(&gen);
 80292a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80292a6:	2b00      	cmp	r3, #0
 80292a8:	d009      	beq.n	80292be <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x12a>
 80292aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80292ae:	4618      	mov	r0, r3
 80292b0:	f7d8 fa5e 	bl	8001770 <sqisign_gen_quat_alg_elem_is_zero>
 80292b4:	4603      	mov	r3, r0
 80292b6:	2b00      	cmp	r3, #0
 80292b8:	d101      	bne.n	80292be <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x12a>
 80292ba:	2301      	movs	r3, #1
 80292bc:	e000      	b.n	80292c0 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x12c>
 80292be:	2300      	movs	r3, #0
 80292c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while (!found) {
 80292c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80292c8:	2b00      	cmp	r3, #0
 80292ca:	d08a      	beq.n	80291e2 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x4e>
 80292cc:	e03a      	b.n	8029344 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x1b0>
        }
    } else {
        assert(prime_cofactor != NULL);
 80292ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80292d2:	2b00      	cmp	r3, #0
 80292d4:	d106      	bne.n	80292e4 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x150>
 80292d6:	4b8d      	ldr	r3, [pc, #564]	@ (802950c <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x378>)
 80292d8:	4a8a      	ldr	r2, [pc, #552]	@ (8029504 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x370>)
 80292da:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80292de:	488a      	ldr	r0, [pc, #552]	@ (8029508 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x374>)
 80292e0:	f00b ffaa 	bl	8035238 <__assert_func>
        // if it is not prime or we don't know if it is prime, we may just use represent integer
        // and use a precomputed prime as cofactor
        assert(!ibz_is_zero(norm));
 80292e4:	68b8      	ldr	r0, [r7, #8]
 80292e6:	f7f3 ff72 	bl	801d1ce <sqisign_gen_ibz_is_zero>
 80292ea:	4603      	mov	r3, r0
 80292ec:	2b00      	cmp	r3, #0
 80292ee:	d006      	beq.n	80292fe <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x16a>
 80292f0:	4b87      	ldr	r3, [pc, #540]	@ (8029510 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x37c>)
 80292f2:	4a84      	ldr	r2, [pc, #528]	@ (8029504 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x370>)
 80292f4:	f240 112f 	movw	r1, #303	@ 0x12f
 80292f8:	4883      	ldr	r0, [pc, #524]	@ (8029508 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x374>)
 80292fa:	f00b ff9d 	bl	8035238 <__assert_func>
        ibz_mul(&n_temp, prime_cofactor, norm);
 80292fe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8029302:	68ba      	ldr	r2, [r7, #8]
 8029304:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8029308:	4618      	mov	r0, r3
 802930a:	f7f3 feb0 	bl	801d06e <sqisign_gen_ibz_mul>
        found = quat_represent_integer(&gen, &n_temp, 0, params);
 802930e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8029312:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8029316:	683b      	ldr	r3, [r7, #0]
 8029318:	2200      	movs	r2, #0
 802931a:	f7ff fb69 	bl	80289f0 <sqisign_gen_quat_represent_integer>
 802931e:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
        found = found && !quat_alg_elem_is_zero(&gen);
 8029322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8029326:	2b00      	cmp	r3, #0
 8029328:	d009      	beq.n	802933e <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x1aa>
 802932a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802932e:	4618      	mov	r0, r3
 8029330:	f7d8 fa1e 	bl	8001770 <sqisign_gen_quat_alg_elem_is_zero>
 8029334:	4603      	mov	r3, r0
 8029336:	2b00      	cmp	r3, #0
 8029338:	d101      	bne.n	802933e <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x1aa>
 802933a:	2301      	movs	r3, #1
 802933c:	e000      	b.n	8029340 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x1ac>
 802933e:	2300      	movs	r3, #0
 8029340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    }
#ifndef NDEBUG
    if (found) {
 8029344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8029348:	2b00      	cmp	r3, #0
 802934a:	d030      	beq.n	80293ae <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x21a>
        // first, we compute the norm of the gen
        quat_alg_norm(&n_temp, &norm_d, &gen, (params->algebra));
 802934c:	683b      	ldr	r3, [r7, #0]
 802934e:	689b      	ldr	r3, [r3, #8]
 8029350:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8029354:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8029358:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 802935c:	f7d8 f87e 	bl	800145c <sqisign_gen_quat_alg_norm>
        assert(ibz_is_one(&norm_d));
 8029360:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8029364:	4618      	mov	r0, r3
 8029366:	f7f3 ff46 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 802936a:	4603      	mov	r3, r0
 802936c:	2b00      	cmp	r3, #0
 802936e:	d106      	bne.n	802937e <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x1ea>
 8029370:	4b63      	ldr	r3, [pc, #396]	@ (8029500 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x36c>)
 8029372:	4a64      	ldr	r2, [pc, #400]	@ (8029504 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x370>)
 8029374:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8029378:	4863      	ldr	r0, [pc, #396]	@ (8029508 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x374>)
 802937a:	f00b ff5d 	bl	8035238 <__assert_func>
        ibz_mod(&n_temp, &n_temp, norm);
 802937e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8029382:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8029386:	68ba      	ldr	r2, [r7, #8]
 8029388:	4618      	mov	r0, r3
 802938a:	f7f3 feca 	bl	801d122 <sqisign_gen_ibz_mod>
        assert(ibz_cmp(&n_temp, &ibz_const_zero) == 0);
 802938e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8029392:	495a      	ldr	r1, [pc, #360]	@ (80294fc <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x368>)
 8029394:	4618      	mov	r0, r3
 8029396:	f7f3 ff0b 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 802939a:	4603      	mov	r3, r0
 802939c:	2b00      	cmp	r3, #0
 802939e:	d006      	beq.n	80293ae <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x21a>
 80293a0:	4b5c      	ldr	r3, [pc, #368]	@ (8029514 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x380>)
 80293a2:	4a58      	ldr	r2, [pc, #352]	@ (8029504 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x370>)
 80293a4:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 80293a8:	4857      	ldr	r0, [pc, #348]	@ (8029508 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x374>)
 80293aa:	f00b ff45 	bl	8035238 <__assert_func>
    }
#endif

    // now we just have to rerandomize the class of the ideal generated by gen
    found = 0;
 80293ae:	2300      	movs	r3, #0
 80293b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (!found) {
 80293b4:	e055      	b.n	8029462 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x2ce>
        for (int i = 0; i < 4; i++) {
 80293b6:	2300      	movs	r3, #0
 80293b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80293bc:	e014      	b.n	80293e8 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x254>
            ibz_rand_interval(&gen_rerand.coord[i], &ibz_const_one, norm);
 80293be:	f107 0110 	add.w	r1, r7, #16
 80293c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80293c6:	4613      	mov	r3, r2
 80293c8:	005b      	lsls	r3, r3, #1
 80293ca:	4413      	add	r3, r2
 80293cc:	009b      	lsls	r3, r3, #2
 80293ce:	3308      	adds	r3, #8
 80293d0:	440b      	add	r3, r1
 80293d2:	3304      	adds	r3, #4
 80293d4:	68ba      	ldr	r2, [r7, #8]
 80293d6:	4948      	ldr	r1, [pc, #288]	@ (80294f8 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x364>)
 80293d8:	4618      	mov	r0, r3
 80293da:	f7f3 ff75 	bl	801d2c8 <sqisign_gen_ibz_rand_interval>
        for (int i = 0; i < 4; i++) {
 80293de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80293e2:	3301      	adds	r3, #1
 80293e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80293e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80293ec:	2b03      	cmp	r3, #3
 80293ee:	dde6      	ble.n	80293be <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x22a>
        }
        quat_alg_norm(&n_temp, &norm_d, &gen_rerand, (params->algebra));
 80293f0:	683b      	ldr	r3, [r7, #0]
 80293f2:	689b      	ldr	r3, [r3, #8]
 80293f4:	f107 0210 	add.w	r2, r7, #16
 80293f8:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80293fc:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8029400:	f7d8 f82c 	bl	800145c <sqisign_gen_quat_alg_norm>
        assert(ibz_is_one(&norm_d));
 8029404:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8029408:	4618      	mov	r0, r3
 802940a:	f7f3 fef4 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 802940e:	4603      	mov	r3, r0
 8029410:	2b00      	cmp	r3, #0
 8029412:	d106      	bne.n	8029422 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x28e>
 8029414:	4b3a      	ldr	r3, [pc, #232]	@ (8029500 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x36c>)
 8029416:	4a3b      	ldr	r2, [pc, #236]	@ (8029504 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x370>)
 8029418:	f240 1145 	movw	r1, #325	@ 0x145
 802941c:	483a      	ldr	r0, [pc, #232]	@ (8029508 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x374>)
 802941e:	f00b ff0b 	bl	8035238 <__assert_func>
        ibz_gcd(&disc, &n_temp, norm);
 8029422:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8029426:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 802942a:	68ba      	ldr	r2, [r7, #8]
 802942c:	4618      	mov	r0, r3
 802942e:	f7f4 f8df 	bl	801d5f0 <sqisign_gen_ibz_gcd>
        found = ibz_is_one(&disc);
 8029432:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8029436:	4618      	mov	r0, r3
 8029438:	f7f3 fedd 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 802943c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
        found = found && !quat_alg_elem_is_zero(&gen_rerand);
 8029440:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8029444:	2b00      	cmp	r3, #0
 8029446:	d009      	beq.n	802945c <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x2c8>
 8029448:	f107 0310 	add.w	r3, r7, #16
 802944c:	4618      	mov	r0, r3
 802944e:	f7d8 f98f 	bl	8001770 <sqisign_gen_quat_alg_elem_is_zero>
 8029452:	4603      	mov	r3, r0
 8029454:	2b00      	cmp	r3, #0
 8029456:	d101      	bne.n	802945c <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x2c8>
 8029458:	2301      	movs	r3, #1
 802945a:	e000      	b.n	802945e <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x2ca>
 802945c:	2300      	movs	r3, #0
 802945e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (!found) {
 8029462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8029466:	2b00      	cmp	r3, #0
 8029468:	d0a5      	beq.n	80293b6 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x222>
    }

    quat_alg_mul(&gen, &gen, &gen_rerand, (params->algebra));
 802946a:	683b      	ldr	r3, [r7, #0]
 802946c:	689b      	ldr	r3, [r3, #8]
 802946e:	f107 0210 	add.w	r2, r7, #16
 8029472:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8029476:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 802947a:	f7d7 ffd2 	bl	8001422 <sqisign_gen_quat_alg_mul>
    // in both cases, whether norm is prime or not prime,
    // gen is not divisible by any integer factor of the target norm
    // therefore the call below will yield an ideal of the correct norm
    quat_lideal_create(lideal, &gen, norm, &((params->order)->order), (params->algebra));
 802947e:	683b      	ldr	r3, [r7, #0]
 8029480:	685b      	ldr	r3, [r3, #4]
 8029482:	461a      	mov	r2, r3
 8029484:	683b      	ldr	r3, [r7, #0]
 8029486:	689b      	ldr	r3, [r3, #8]
 8029488:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 802948c:	9300      	str	r3, [sp, #0]
 802948e:	4613      	mov	r3, r2
 8029490:	68ba      	ldr	r2, [r7, #8]
 8029492:	68f8      	ldr	r0, [r7, #12]
 8029494:	f7f3 f8b0 	bl	801c5f8 <sqisign_gen_quat_lideal_create>
    assert(ibz_cmp(norm, &(lideal->norm)) == 0);
 8029498:	68fb      	ldr	r3, [r7, #12]
 802949a:	33cc      	adds	r3, #204	@ 0xcc
 802949c:	4619      	mov	r1, r3
 802949e:	68b8      	ldr	r0, [r7, #8]
 80294a0:	f7f3 fe86 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 80294a4:	4603      	mov	r3, r0
 80294a6:	2b00      	cmp	r3, #0
 80294a8:	d006      	beq.n	80294b8 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x324>
 80294aa:	4b1b      	ldr	r3, [pc, #108]	@ (8029518 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x384>)
 80294ac:	4a15      	ldr	r2, [pc, #84]	@ (8029504 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x370>)
 80294ae:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80294b2:	4815      	ldr	r0, [pc, #84]	@ (8029508 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm+0x374>)
 80294b4:	f00b fec0 	bl	8035238 <__assert_func>

    ibz_finalize(&n_temp);
 80294b8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80294bc:	4618      	mov	r0, r3
 80294be:	f7f3 fdad 	bl	801d01c <sqisign_gen_ibz_finalize>
    quat_alg_elem_finalize(&gen);
 80294c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80294c6:	4618      	mov	r0, r3
 80294c8:	f7e5 fc70 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    quat_alg_elem_finalize(&gen_rerand);
 80294cc:	f107 0310 	add.w	r3, r7, #16
 80294d0:	4618      	mov	r0, r3
 80294d2:	f7e5 fc6b 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    ibz_finalize(&norm_d);
 80294d6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80294da:	4618      	mov	r0, r3
 80294dc:	f7f3 fd9e 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&disc);
 80294e0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80294e4:	4618      	mov	r0, r3
 80294e6:	f7f3 fd99 	bl	801d01c <sqisign_gen_ibz_finalize>
    return (found);
 80294ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
}
 80294ee:	4618      	mov	r0, r3
 80294f0:	37b8      	adds	r7, #184	@ 0xb8
 80294f2:	46bd      	mov	sp, r7
 80294f4:	bd80      	pop	{r7, pc}
 80294f6:	bf00      	nop
 80294f8:	0803b900 	.word	0x0803b900
 80294fc:	0803b8f4 	.word	0x0803b8f4
 8029500:	08038a98 	.word	0x08038a98
 8029504:	0803bec8 	.word	0x0803bec8
 8029508:	0803896c 	.word	0x0803896c
 802950c:	08038aac 	.word	0x08038aac
 8029510:	08038ac4 	.word	0x08038ac4
 8029514:	08038ad8 	.word	0x08038ad8
 8029518:	08038b00 	.word	0x08038b00

0802951c <sqisign_gen_quat_change_to_O0_basis>:

void
quat_change_to_O0_basis(ibz_vec_4_t *vec, const quat_alg_elem_t *el)
{
 802951c:	b580      	push	{r7, lr}
 802951e:	b086      	sub	sp, #24
 8029520:	af00      	add	r7, sp, #0
 8029522:	6078      	str	r0, [r7, #4]
 8029524:	6039      	str	r1, [r7, #0]
    ibz_t tmp;
    ibz_init(&tmp);
 8029526:	f107 030c 	add.w	r3, r7, #12
 802952a:	4618      	mov	r0, r3
 802952c:	f7f3 fd6b 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_copy(&(*vec)[2], &el->coord[2]);
 8029530:	687b      	ldr	r3, [r7, #4]
 8029532:	f103 0218 	add.w	r2, r3, #24
 8029536:	683b      	ldr	r3, [r7, #0]
 8029538:	3324      	adds	r3, #36	@ 0x24
 802953a:	4619      	mov	r1, r3
 802953c:	4610      	mov	r0, r2
 802953e:	f7f3 fe9d 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_add(&(*vec)[2], &(*vec)[2], &(*vec)[2]); // double (not optimal if el->denom is even...)
 8029542:	687b      	ldr	r3, [r7, #4]
 8029544:	f103 0018 	add.w	r0, r3, #24
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	f103 0118 	add.w	r1, r3, #24
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	3318      	adds	r3, #24
 8029552:	461a      	mov	r2, r3
 8029554:	f7f3 fd6d 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_copy(&(*vec)[3], &el->coord[3]);         // double (not optimal if el->denom is even...)
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 802955e:	683b      	ldr	r3, [r7, #0]
 8029560:	3330      	adds	r3, #48	@ 0x30
 8029562:	4619      	mov	r1, r3
 8029564:	4610      	mov	r0, r2
 8029566:	f7f3 fe89 	bl	801d27c <sqisign_gen_ibz_copy>
    ibz_add(&(*vec)[3], &(*vec)[3], &(*vec)[3]);
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8029570:	687b      	ldr	r3, [r7, #4]
 8029572:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8029576:	687b      	ldr	r3, [r7, #4]
 8029578:	3324      	adds	r3, #36	@ 0x24
 802957a:	461a      	mov	r2, r3
 802957c:	f7f3 fd59 	bl	801d032 <sqisign_gen_ibz_add>
    ibz_sub(&(*vec)[0], &el->coord[0], &el->coord[3]);
 8029580:	6878      	ldr	r0, [r7, #4]
 8029582:	683b      	ldr	r3, [r7, #0]
 8029584:	f103 010c 	add.w	r1, r3, #12
 8029588:	683b      	ldr	r3, [r7, #0]
 802958a:	3330      	adds	r3, #48	@ 0x30
 802958c:	461a      	mov	r2, r3
 802958e:	f7f3 fd5f 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_sub(&(*vec)[1], &el->coord[1], &el->coord[2]);
 8029592:	687b      	ldr	r3, [r7, #4]
 8029594:	f103 000c 	add.w	r0, r3, #12
 8029598:	683b      	ldr	r3, [r7, #0]
 802959a:	f103 0118 	add.w	r1, r3, #24
 802959e:	683b      	ldr	r3, [r7, #0]
 80295a0:	3324      	adds	r3, #36	@ 0x24
 80295a2:	461a      	mov	r2, r3
 80295a4:	f7f3 fd54 	bl	801d050 <sqisign_gen_ibz_sub>

    assert(ibz_divides(&(*vec)[0], &el->denom));
 80295a8:	687b      	ldr	r3, [r7, #4]
 80295aa:	683a      	ldr	r2, [r7, #0]
 80295ac:	4611      	mov	r1, r2
 80295ae:	4618      	mov	r0, r3
 80295b0:	f7f3 fdd4 	bl	801d15c <sqisign_gen_ibz_divides>
 80295b4:	4603      	mov	r3, r0
 80295b6:	2b00      	cmp	r3, #0
 80295b8:	d106      	bne.n	80295c8 <sqisign_gen_quat_change_to_O0_basis+0xac>
 80295ba:	4b35      	ldr	r3, [pc, #212]	@ (8029690 <sqisign_gen_quat_change_to_O0_basis+0x174>)
 80295bc:	4a35      	ldr	r2, [pc, #212]	@ (8029694 <sqisign_gen_quat_change_to_O0_basis+0x178>)
 80295be:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 80295c2:	4835      	ldr	r0, [pc, #212]	@ (8029698 <sqisign_gen_quat_change_to_O0_basis+0x17c>)
 80295c4:	f00b fe38 	bl	8035238 <__assert_func>
    assert(ibz_divides(&(*vec)[1], &el->denom));
 80295c8:	687b      	ldr	r3, [r7, #4]
 80295ca:	330c      	adds	r3, #12
 80295cc:	683a      	ldr	r2, [r7, #0]
 80295ce:	4611      	mov	r1, r2
 80295d0:	4618      	mov	r0, r3
 80295d2:	f7f3 fdc3 	bl	801d15c <sqisign_gen_ibz_divides>
 80295d6:	4603      	mov	r3, r0
 80295d8:	2b00      	cmp	r3, #0
 80295da:	d106      	bne.n	80295ea <sqisign_gen_quat_change_to_O0_basis+0xce>
 80295dc:	4b2f      	ldr	r3, [pc, #188]	@ (802969c <sqisign_gen_quat_change_to_O0_basis+0x180>)
 80295de:	4a2d      	ldr	r2, [pc, #180]	@ (8029694 <sqisign_gen_quat_change_to_O0_basis+0x178>)
 80295e0:	f240 1167 	movw	r1, #359	@ 0x167
 80295e4:	482c      	ldr	r0, [pc, #176]	@ (8029698 <sqisign_gen_quat_change_to_O0_basis+0x17c>)
 80295e6:	f00b fe27 	bl	8035238 <__assert_func>
    assert(ibz_divides(&(*vec)[2], &el->denom));
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	3318      	adds	r3, #24
 80295ee:	683a      	ldr	r2, [r7, #0]
 80295f0:	4611      	mov	r1, r2
 80295f2:	4618      	mov	r0, r3
 80295f4:	f7f3 fdb2 	bl	801d15c <sqisign_gen_ibz_divides>
 80295f8:	4603      	mov	r3, r0
 80295fa:	2b00      	cmp	r3, #0
 80295fc:	d106      	bne.n	802960c <sqisign_gen_quat_change_to_O0_basis+0xf0>
 80295fe:	4b28      	ldr	r3, [pc, #160]	@ (80296a0 <sqisign_gen_quat_change_to_O0_basis+0x184>)
 8029600:	4a24      	ldr	r2, [pc, #144]	@ (8029694 <sqisign_gen_quat_change_to_O0_basis+0x178>)
 8029602:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8029606:	4824      	ldr	r0, [pc, #144]	@ (8029698 <sqisign_gen_quat_change_to_O0_basis+0x17c>)
 8029608:	f00b fe16 	bl	8035238 <__assert_func>
    assert(ibz_divides(&(*vec)[3], &el->denom));
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	3324      	adds	r3, #36	@ 0x24
 8029610:	683a      	ldr	r2, [r7, #0]
 8029612:	4611      	mov	r1, r2
 8029614:	4618      	mov	r0, r3
 8029616:	f7f3 fda1 	bl	801d15c <sqisign_gen_ibz_divides>
 802961a:	4603      	mov	r3, r0
 802961c:	2b00      	cmp	r3, #0
 802961e:	d106      	bne.n	802962e <sqisign_gen_quat_change_to_O0_basis+0x112>
 8029620:	4b20      	ldr	r3, [pc, #128]	@ (80296a4 <sqisign_gen_quat_change_to_O0_basis+0x188>)
 8029622:	4a1c      	ldr	r2, [pc, #112]	@ (8029694 <sqisign_gen_quat_change_to_O0_basis+0x178>)
 8029624:	f240 1169 	movw	r1, #361	@ 0x169
 8029628:	481b      	ldr	r0, [pc, #108]	@ (8029698 <sqisign_gen_quat_change_to_O0_basis+0x17c>)
 802962a:	f00b fe05 	bl	8035238 <__assert_func>

    ibz_div(&(*vec)[0], &tmp, &(*vec)[0], &el->denom);
 802962e:	6878      	ldr	r0, [r7, #4]
 8029630:	687a      	ldr	r2, [r7, #4]
 8029632:	683b      	ldr	r3, [r7, #0]
 8029634:	f107 010c 	add.w	r1, r7, #12
 8029638:	f7f3 fd42 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_div(&(*vec)[1], &tmp, &(*vec)[1], &el->denom);
 802963c:	687b      	ldr	r3, [r7, #4]
 802963e:	f103 000c 	add.w	r0, r3, #12
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	f103 020c 	add.w	r2, r3, #12
 8029648:	683b      	ldr	r3, [r7, #0]
 802964a:	f107 010c 	add.w	r1, r7, #12
 802964e:	f7f3 fd37 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_div(&(*vec)[2], &tmp, &(*vec)[2], &el->denom);
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	f103 0018 	add.w	r0, r3, #24
 8029658:	687b      	ldr	r3, [r7, #4]
 802965a:	f103 0218 	add.w	r2, r3, #24
 802965e:	683b      	ldr	r3, [r7, #0]
 8029660:	f107 010c 	add.w	r1, r7, #12
 8029664:	f7f3 fd2c 	bl	801d0c0 <sqisign_gen_ibz_div>
    ibz_div(&(*vec)[3], &tmp, &(*vec)[3], &el->denom);
 8029668:	687b      	ldr	r3, [r7, #4]
 802966a:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 802966e:	687b      	ldr	r3, [r7, #4]
 8029670:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8029674:	683b      	ldr	r3, [r7, #0]
 8029676:	f107 010c 	add.w	r1, r7, #12
 802967a:	f7f3 fd21 	bl	801d0c0 <sqisign_gen_ibz_div>

    ibz_finalize(&tmp);
 802967e:	f107 030c 	add.w	r3, r7, #12
 8029682:	4618      	mov	r0, r3
 8029684:	f7f3 fcca 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8029688:	bf00      	nop
 802968a:	3718      	adds	r7, #24
 802968c:	46bd      	mov	sp, r7
 802968e:	bd80      	pop	{r7, pc}
 8029690:	08038b24 	.word	0x08038b24
 8029694:	0803bf00 	.word	0x0803bf00
 8029698:	0803896c 	.word	0x0803896c
 802969c:	08038b48 	.word	0x08038b48
 80296a0:	08038b6c 	.word	0x08038b6c
 80296a4:	08038b90 	.word	0x08038b90

080296a8 <randombytes_stm32_m4>:


#if defined(STM32)
extern RNG_HandleTypeDef hrng;
static int
randombytes_stm32_m4(unsigned char *x, unsigned long long xlen){
 80296a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80296ac:	b088      	sub	sp, #32
 80296ae:	af00      	add	r7, sp, #0
 80296b0:	60f8      	str	r0, [r7, #12]
 80296b2:	e9c7 2300 	strd	r2, r3, [r7]
    for (unsigned long long i = 0; i < xlen; i += 4){
 80296b6:	f04f 0200 	mov.w	r2, #0
 80296ba:	f04f 0300 	mov.w	r3, #0
 80296be:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80296c2:	e038      	b.n	8029736 <randombytes_stm32_m4+0x8e>
        uint32_t r;
        if (HAL_RNG_GenerateRandomNumber(&hrng, &r) != HAL_OK) {
 80296c4:	f107 0310 	add.w	r3, r7, #16
 80296c8:	4619      	mov	r1, r3
 80296ca:	4822      	ldr	r0, [pc, #136]	@ (8029754 <randombytes_stm32_m4+0xac>)
 80296cc:	f00a faa0 	bl	8033c10 <HAL_RNG_GenerateRandomNumber>
 80296d0:	4603      	mov	r3, r0
 80296d2:	2b00      	cmp	r3, #0
 80296d4:	d002      	beq.n	80296dc <randombytes_stm32_m4+0x34>
            return -1;
 80296d6:	f04f 33ff 	mov.w	r3, #4294967295
 80296da:	e035      	b.n	8029748 <randombytes_stm32_m4+0xa0>
        }
        for (int j = 0; j < 4 && i + j < xlen; j++) {
 80296dc:	2300      	movs	r3, #0
 80296de:	617b      	str	r3, [r7, #20]
 80296e0:	e00e      	b.n	8029700 <randombytes_stm32_m4+0x58>
            x[i + j] = (r >> (8 * j)) & 0xFF;
 80296e2:	693a      	ldr	r2, [r7, #16]
 80296e4:	697b      	ldr	r3, [r7, #20]
 80296e6:	00db      	lsls	r3, r3, #3
 80296e8:	fa22 f103 	lsr.w	r1, r2, r3
 80296ec:	69ba      	ldr	r2, [r7, #24]
 80296ee:	697b      	ldr	r3, [r7, #20]
 80296f0:	4413      	add	r3, r2
 80296f2:	68fa      	ldr	r2, [r7, #12]
 80296f4:	4413      	add	r3, r2
 80296f6:	b2ca      	uxtb	r2, r1
 80296f8:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4 && i + j < xlen; j++) {
 80296fa:	697b      	ldr	r3, [r7, #20]
 80296fc:	3301      	adds	r3, #1
 80296fe:	617b      	str	r3, [r7, #20]
 8029700:	697b      	ldr	r3, [r7, #20]
 8029702:	2b03      	cmp	r3, #3
 8029704:	dc0f      	bgt.n	8029726 <randombytes_stm32_m4+0x7e>
 8029706:	697b      	ldr	r3, [r7, #20]
 8029708:	17da      	asrs	r2, r3, #31
 802970a:	4698      	mov	r8, r3
 802970c:	4691      	mov	r9, r2
 802970e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029712:	eb18 0402 	adds.w	r4, r8, r2
 8029716:	eb49 0503 	adc.w	r5, r9, r3
 802971a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802971e:	4294      	cmp	r4, r2
 8029720:	eb75 0303 	sbcs.w	r3, r5, r3
 8029724:	d3dd      	bcc.n	80296e2 <randombytes_stm32_m4+0x3a>
    for (unsigned long long i = 0; i < xlen; i += 4){
 8029726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802972a:	f112 0a04 	adds.w	sl, r2, #4
 802972e:	f143 0b00 	adc.w	fp, r3, #0
 8029732:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8029736:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802973a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802973e:	4290      	cmp	r0, r2
 8029740:	eb71 0303 	sbcs.w	r3, r1, r3
 8029744:	d3be      	bcc.n	80296c4 <randombytes_stm32_m4+0x1c>
        }
    }
    return 0;
 8029746:	2300      	movs	r3, #0
}
 8029748:	4618      	mov	r0, r3
 802974a:	3720      	adds	r7, #32
 802974c:	46bd      	mov	sp, r7
 802974e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029752:	bf00      	nop
 8029754:	20001d84 	.word	0x20001d84

08029758 <randombytes_select>:
#endif /* defined(STM32) */

SQISIGN_API
int
randombytes_select(unsigned char *buf, unsigned long long n)
{
 8029758:	b580      	push	{r7, lr}
 802975a:	b084      	sub	sp, #16
 802975c:	af00      	add	r7, sp, #0
 802975e:	60f8      	str	r0, [r7, #12]
 8029760:	e9c7 2300 	strd	r2, r3, [r7]
    return randombytes_win32_randombytes(buf, n);
#elif defined(__wasi__)
    /* Use WASI */
    return randombytes_wasi_randombytes(buf, n);
#elif defined(STM32)
    return randombytes_stm32_m4(buf,n);
 8029764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029768:	68f8      	ldr	r0, [r7, #12]
 802976a:	f7ff ff9d 	bl	80296a8 <randombytes_stm32_m4>
 802976e:	4603      	mov	r3, r0
#else
#error "randombytes(...) is not supported on this platform"
#endif
}
 8029770:	4618      	mov	r0, r3
 8029772:	3710      	adds	r7, #16
 8029774:	46bd      	mov	sp, r7
 8029776:	bd80      	pop	{r7, pc}

08029778 <randombytes>:

#ifdef RANDOMBYTES_SYSTEM
SQISIGN_API
int
randombytes(unsigned char *x, unsigned long long xlen)
{
 8029778:	b5b0      	push	{r4, r5, r7, lr}
 802977a:	b086      	sub	sp, #24
 802977c:	af00      	add	r7, sp, #0
 802977e:	60f8      	str	r0, [r7, #12]
 8029780:	e9c7 2300 	strd	r2, r3, [r7]

    int ret = randombytes_select(x, (size_t)xlen);
 8029784:	683b      	ldr	r3, [r7, #0]
 8029786:	2200      	movs	r2, #0
 8029788:	461c      	mov	r4, r3
 802978a:	4615      	mov	r5, r2
 802978c:	4622      	mov	r2, r4
 802978e:	462b      	mov	r3, r5
 8029790:	68f8      	ldr	r0, [r7, #12]
 8029792:	f7ff ffe1 	bl	8029758 <randombytes_select>
 8029796:	6178      	str	r0, [r7, #20]
#ifdef ENABLE_CT_TESTING
    VALGRIND_MAKE_MEM_UNDEFINED(x, xlen);
#endif
    return ret;
 8029798:	697b      	ldr	r3, [r7, #20]
}
 802979a:	4618      	mov	r0, r3
 802979c:	3718      	adds	r7, #24
 802979e:	46bd      	mov	sp, r7
 80297a0:	bdb0      	pop	{r4, r5, r7, pc}

080297a2 <copy_point>:
{
 80297a2:	b580      	push	{r7, lr}
 80297a4:	b082      	sub	sp, #8
 80297a6:	af00      	add	r7, sp, #0
 80297a8:	6078      	str	r0, [r7, #4]
 80297aa:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 80297ac:	687b      	ldr	r3, [r7, #4]
 80297ae:	683a      	ldr	r2, [r7, #0]
 80297b0:	4611      	mov	r1, r2
 80297b2:	4618      	mov	r0, r3
 80297b4:	f7e9 f93a 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 80297b8:	687b      	ldr	r3, [r7, #4]
 80297ba:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80297be:	683b      	ldr	r3, [r7, #0]
 80297c0:	3348      	adds	r3, #72	@ 0x48
 80297c2:	4619      	mov	r1, r3
 80297c4:	4610      	mov	r0, r2
 80297c6:	f7e9 f931 	bl	8012a2c <fp2_copy>
}
 80297ca:	bf00      	nop
 80297cc:	3708      	adds	r7, #8
 80297ce:	46bd      	mov	sp, r7
 80297d0:	bd80      	pop	{r7, pc}

080297d2 <copy_basis>:
{
 80297d2:	b580      	push	{r7, lr}
 80297d4:	b082      	sub	sp, #8
 80297d6:	af00      	add	r7, sp, #0
 80297d8:	6078      	str	r0, [r7, #4]
 80297da:	6039      	str	r1, [r7, #0]
    copy_point(&B1->P, &B0->P);
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	683a      	ldr	r2, [r7, #0]
 80297e0:	4611      	mov	r1, r2
 80297e2:	4618      	mov	r0, r3
 80297e4:	f7ff ffdd 	bl	80297a2 <copy_point>
    copy_point(&B1->Q, &B0->Q);
 80297e8:	687b      	ldr	r3, [r7, #4]
 80297ea:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80297ee:	683b      	ldr	r3, [r7, #0]
 80297f0:	3390      	adds	r3, #144	@ 0x90
 80297f2:	4619      	mov	r1, r3
 80297f4:	4610      	mov	r0, r2
 80297f6:	f7ff ffd4 	bl	80297a2 <copy_point>
    copy_point(&B1->PmQ, &B0->PmQ);
 80297fa:	687b      	ldr	r3, [r7, #4]
 80297fc:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8029800:	683b      	ldr	r3, [r7, #0]
 8029802:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8029806:	4619      	mov	r1, r3
 8029808:	4610      	mov	r0, r2
 802980a:	f7ff ffca 	bl	80297a2 <copy_point>
}
 802980e:	bf00      	nop
 8029810:	3708      	adds	r7, #8
 8029812:	46bd      	mov	sp, r7
 8029814:	bd80      	pop	{r7, pc}

08029816 <copy_curve>:
{
 8029816:	b580      	push	{r7, lr}
 8029818:	b082      	sub	sp, #8
 802981a:	af00      	add	r7, sp, #0
 802981c:	6078      	str	r0, [r7, #4]
 802981e:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 8029820:	687b      	ldr	r3, [r7, #4]
 8029822:	683a      	ldr	r2, [r7, #0]
 8029824:	4611      	mov	r1, r2
 8029826:	4618      	mov	r0, r3
 8029828:	f7e9 f900 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 802982c:	687b      	ldr	r3, [r7, #4]
 802982e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8029832:	683b      	ldr	r3, [r7, #0]
 8029834:	3348      	adds	r3, #72	@ 0x48
 8029836:	4619      	mov	r1, r3
 8029838:	4610      	mov	r0, r2
 802983a:	f7e9 f8f7 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 802983e:	683b      	ldr	r3, [r7, #0]
 8029840:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8029844:	687b      	ldr	r3, [r7, #4]
 8029846:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 802984a:	687b      	ldr	r3, [r7, #4]
 802984c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8029850:	683b      	ldr	r3, [r7, #0]
 8029852:	3390      	adds	r3, #144	@ 0x90
 8029854:	4619      	mov	r1, r3
 8029856:	4610      	mov	r0, r2
 8029858:	f7ff ffa3 	bl	80297a2 <copy_point>
}
 802985c:	bf00      	nop
 802985e:	3708      	adds	r7, #8
 8029860:	46bd      	mov	sp, r7
 8029862:	bd80      	pop	{r7, pc}

08029864 <test_point_order_twof>:
{
 8029864:	b580      	push	{r7, lr}
 8029866:	b0f2      	sub	sp, #456	@ 0x1c8
 8029868:	af00      	add	r7, sp, #0
 802986a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802986e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8029872:	6018      	str	r0, [r3, #0]
 8029874:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8029878:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 802987c:	6019      	str	r1, [r3, #0]
 802987e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8029882:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8029886:	601a      	str	r2, [r3, #0]
    test = *P;
 8029888:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802988c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8029890:	681a      	ldr	r2, [r3, #0]
 8029892:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8029896:	4611      	mov	r1, r2
 8029898:	2290      	movs	r2, #144	@ 0x90
 802989a:	4618      	mov	r0, r3
 802989c:	f00c fa7f 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 80298a0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80298a4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80298a8:	f107 0214 	add.w	r2, r7, #20
 80298ac:	6819      	ldr	r1, [r3, #0]
 80298ae:	4610      	mov	r0, r2
 80298b0:	f7ff ffb1 	bl	8029816 <copy_curve>
    if (ec_is_zero(&test))
 80298b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80298b8:	4618      	mov	r0, r3
 80298ba:	f7e1 feb4 	bl	800b626 <ec_is_zero>
 80298be:	4603      	mov	r3, r0
 80298c0:	2b00      	cmp	r3, #0
 80298c2:	d001      	beq.n	80298c8 <test_point_order_twof+0x64>
        return 0;
 80298c4:	2300      	movs	r3, #0
 80298c6:	e026      	b.n	8029916 <test_point_order_twof+0xb2>
    ec_dbl_iter(&test, t - 1, &test, &curve);
 80298c8:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80298cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80298d0:	681b      	ldr	r3, [r3, #0]
 80298d2:	1e59      	subs	r1, r3, #1
 80298d4:	f107 0314 	add.w	r3, r7, #20
 80298d8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80298dc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80298e0:	f7e3 f916 	bl	800cb10 <ec_dbl_iter>
    if (ec_is_zero(&test))
 80298e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80298e8:	4618      	mov	r0, r3
 80298ea:	f7e1 fe9c 	bl	800b626 <ec_is_zero>
 80298ee:	4603      	mov	r3, r0
 80298f0:	2b00      	cmp	r3, #0
 80298f2:	d001      	beq.n	80298f8 <test_point_order_twof+0x94>
        return 0;
 80298f4:	2300      	movs	r3, #0
 80298f6:	e00e      	b.n	8029916 <test_point_order_twof+0xb2>
    ec_dbl(&test, &test, &curve);
 80298f8:	f107 0214 	add.w	r2, r7, #20
 80298fc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8029900:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8029904:	4618      	mov	r0, r3
 8029906:	f7e3 f8d1 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 802990a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 802990e:	4618      	mov	r0, r3
 8029910:	f7e1 fe89 	bl	800b626 <ec_is_zero>
 8029914:	4603      	mov	r3, r0
}
 8029916:	4618      	mov	r0, r3
 8029918:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 802991c:	46bd      	mov	sp, r7
 802991e:	bd80      	pop	{r7, pc}

08029920 <test_basis_order_twof>:
{
 8029920:	b580      	push	{r7, lr}
 8029922:	b088      	sub	sp, #32
 8029924:	af00      	add	r7, sp, #0
 8029926:	60f8      	str	r0, [r7, #12]
 8029928:	60b9      	str	r1, [r7, #8]
 802992a:	607a      	str	r2, [r7, #4]
    int check_P = test_point_order_twof(&B->P, E, t);
 802992c:	68fb      	ldr	r3, [r7, #12]
 802992e:	687a      	ldr	r2, [r7, #4]
 8029930:	68b9      	ldr	r1, [r7, #8]
 8029932:	4618      	mov	r0, r3
 8029934:	f7ff ff96 	bl	8029864 <test_point_order_twof>
 8029938:	61f8      	str	r0, [r7, #28]
    int check_Q = test_point_order_twof(&B->Q, E, t);
 802993a:	68fb      	ldr	r3, [r7, #12]
 802993c:	3390      	adds	r3, #144	@ 0x90
 802993e:	687a      	ldr	r2, [r7, #4]
 8029940:	68b9      	ldr	r1, [r7, #8]
 8029942:	4618      	mov	r0, r3
 8029944:	f7ff ff8e 	bl	8029864 <test_point_order_twof>
 8029948:	61b8      	str	r0, [r7, #24]
    int check_PmQ = test_point_order_twof(&B->PmQ, E, t);
 802994a:	68fb      	ldr	r3, [r7, #12]
 802994c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8029950:	687a      	ldr	r2, [r7, #4]
 8029952:	68b9      	ldr	r1, [r7, #8]
 8029954:	4618      	mov	r0, r3
 8029956:	f7ff ff85 	bl	8029864 <test_point_order_twof>
 802995a:	6178      	str	r0, [r7, #20]
    return check_P & check_Q & check_PmQ;
 802995c:	69fa      	ldr	r2, [r7, #28]
 802995e:	69bb      	ldr	r3, [r7, #24]
 8029960:	401a      	ands	r2, r3
 8029962:	697b      	ldr	r3, [r7, #20]
 8029964:	4013      	ands	r3, r2
}
 8029966:	4618      	mov	r0, r3
 8029968:	3720      	adds	r7, #32
 802996a:	46bd      	mov	sp, r7
 802996c:	bd80      	pop	{r7, pc}

0802996e <test_couple_point_order_twof>:
 * @param t: an integer
 * @returns 0xFFFFFFFF on success, 0 on failure
 */
static int
test_couple_point_order_twof(const theta_couple_point_t *T, const theta_couple_curve_t *E, int t)
{
 802996e:	b580      	push	{r7, lr}
 8029970:	b086      	sub	sp, #24
 8029972:	af00      	add	r7, sp, #0
 8029974:	60f8      	str	r0, [r7, #12]
 8029976:	60b9      	str	r1, [r7, #8]
 8029978:	607a      	str	r2, [r7, #4]
    int check_P1 = test_point_order_twof(&T->P1, &E->E1, t);
 802997a:	68fb      	ldr	r3, [r7, #12]
 802997c:	68b9      	ldr	r1, [r7, #8]
 802997e:	687a      	ldr	r2, [r7, #4]
 8029980:	4618      	mov	r0, r3
 8029982:	f7ff ff6f 	bl	8029864 <test_point_order_twof>
 8029986:	6178      	str	r0, [r7, #20]
    int check_P2 = test_point_order_twof(&T->P2, &E->E2, t);
 8029988:	68fb      	ldr	r3, [r7, #12]
 802998a:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802998e:	68bb      	ldr	r3, [r7, #8]
 8029990:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8029994:	687a      	ldr	r2, [r7, #4]
 8029996:	4619      	mov	r1, r3
 8029998:	f7ff ff64 	bl	8029864 <test_point_order_twof>
 802999c:	6138      	str	r0, [r7, #16]

    return check_P1 & check_P2;
 802999e:	697a      	ldr	r2, [r7, #20]
 80299a0:	693b      	ldr	r3, [r7, #16]
 80299a2:	4013      	ands	r3, r2
}
 80299a4:	4618      	mov	r0, r3
 80299a6:	3718      	adds	r7, #24
 80299a8:	46bd      	mov	sp, r7
 80299aa:	bd80      	pop	{r7, pc}

080299ac <commit>:

// compute the commitment with ideal to isogeny clapotis
// and apply it to the basis of E0 (together with the multiplication by some scalar u)
static bool
commit(ec_curve_t *E_com, ec_basis_t *basis_even_com, quat_left_ideal_t *lideal_com)
{
 80299ac:	b580      	push	{r7, lr}
 80299ae:	b088      	sub	sp, #32
 80299b0:	af02      	add	r7, sp, #8
 80299b2:	60f8      	str	r0, [r7, #12]
 80299b4:	60b9      	str	r1, [r7, #8]
 80299b6:	607a      	str	r2, [r7, #4]

    bool found = false;
 80299b8:	2300      	movs	r3, #0
 80299ba:	75fb      	strb	r3, [r7, #23]

    found = quat_sampling_random_ideal_O0_given_norm(lideal_com, &COM_DEGREE, 1, &QUAT_represent_integer_params, NULL);
 80299bc:	2300      	movs	r3, #0
 80299be:	9300      	str	r3, [sp, #0]
 80299c0:	4b1b      	ldr	r3, [pc, #108]	@ (8029a30 <commit+0x84>)
 80299c2:	2201      	movs	r2, #1
 80299c4:	491b      	ldr	r1, [pc, #108]	@ (8029a34 <commit+0x88>)
 80299c6:	6878      	ldr	r0, [r7, #4]
 80299c8:	f7ff fbe4 	bl	8029194 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm>
 80299cc:	4603      	mov	r3, r0
 80299ce:	2b00      	cmp	r3, #0
 80299d0:	bf14      	ite	ne
 80299d2:	2301      	movne	r3, #1
 80299d4:	2300      	moveq	r3, #0
 80299d6:	75fb      	strb	r3, [r7, #23]
    // replacing it with a shorter prime norm equivalent ideal
    found = found && quat_lideal_prime_norm_reduced_equivalent(
 80299d8:	7dfb      	ldrb	r3, [r7, #23]
 80299da:	2b00      	cmp	r3, #0
 80299dc:	d00a      	beq.n	80299f4 <commit+0x48>
 80299de:	2340      	movs	r3, #64	@ 0x40
 80299e0:	2220      	movs	r2, #32
 80299e2:	4915      	ldr	r1, [pc, #84]	@ (8029a38 <commit+0x8c>)
 80299e4:	6878      	ldr	r0, [r7, #4]
 80299e6:	f7f8 f80d 	bl	8021a04 <sqisign_gen_quat_lideal_prime_norm_reduced_equivalent>
 80299ea:	4603      	mov	r3, r0
 80299ec:	2b00      	cmp	r3, #0
 80299ee:	d001      	beq.n	80299f4 <commit+0x48>
 80299f0:	2301      	movs	r3, #1
 80299f2:	e000      	b.n	80299f6 <commit+0x4a>
 80299f4:	2300      	movs	r3, #0
 80299f6:	75fb      	strb	r3, [r7, #23]
 80299f8:	7dfb      	ldrb	r3, [r7, #23]
 80299fa:	f003 0301 	and.w	r3, r3, #1
 80299fe:	75fb      	strb	r3, [r7, #23]
                         lideal_com, &QUATALG_PINFTY, QUAT_primality_num_iter, QUAT_equiv_bound_coeff);
    // ideal to isogeny clapotis
    found = found && dim2id2iso_arbitrary_isogeny_evaluation(basis_even_com, E_com, lideal_com);
 8029a00:	7dfb      	ldrb	r3, [r7, #23]
 8029a02:	2b00      	cmp	r3, #0
 8029a04:	d009      	beq.n	8029a1a <commit+0x6e>
 8029a06:	687a      	ldr	r2, [r7, #4]
 8029a08:	68f9      	ldr	r1, [r7, #12]
 8029a0a:	68b8      	ldr	r0, [r7, #8]
 8029a0c:	f7e0 f8c2 	bl	8009b94 <dim2id2iso_arbitrary_isogeny_evaluation>
 8029a10:	4603      	mov	r3, r0
 8029a12:	2b00      	cmp	r3, #0
 8029a14:	d001      	beq.n	8029a1a <commit+0x6e>
 8029a16:	2301      	movs	r3, #1
 8029a18:	e000      	b.n	8029a1c <commit+0x70>
 8029a1a:	2300      	movs	r3, #0
 8029a1c:	75fb      	strb	r3, [r7, #23]
 8029a1e:	7dfb      	ldrb	r3, [r7, #23]
 8029a20:	f003 0301 	and.w	r3, r3, #1
 8029a24:	75fb      	strb	r3, [r7, #23]
    return found;
 8029a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8029a28:	4618      	mov	r0, r3
 8029a2a:	3718      	adds	r7, #24
 8029a2c:	46bd      	mov	sp, r7
 8029a2e:	bd80      	pop	{r7, pc}
 8029a30:	0803ce38 	.word	0x0803ce38
 8029a34:	0803ce74 	.word	0x0803ce74
 8029a38:	0803bf30 	.word	0x0803bf30

08029a3c <compute_challenge_ideal_signature>:

static void
compute_challenge_ideal_signature(quat_left_ideal_t *lideal_chall_two, const signature_t *sig, const secret_key_t *sk)
{
 8029a3c:	b580      	push	{r7, lr}
 8029a3e:	b08a      	sub	sp, #40	@ 0x28
 8029a40:	af00      	add	r7, sp, #0
 8029a42:	60f8      	str	r0, [r7, #12]
 8029a44:	60b9      	str	r1, [r7, #8]
 8029a46:	607a      	str	r2, [r7, #4]
    ibz_vec_2_t vec;
    ibz_vec_2_init(&vec);
 8029a48:	f107 0310 	add.w	r3, r7, #16
 8029a4c:	4618      	mov	r0, r3
 8029a4e:	f7e5 f9be 	bl	800edce <sqisign_gen_ibz_vec_2_init>

    // vec is a vector [1, chall_coeff] coefficients encoding the kernel of the challenge
    // isogeny as B[0] + chall_coeff*B[1] where B is the canonical basis of the
    // 2^TORSION_EVEN_POWER torsion of EA
    ibz_set(&vec[0], 1);
 8029a52:	f107 0310 	add.w	r3, r7, #16
 8029a56:	2101      	movs	r1, #1
 8029a58:	4618      	mov	r0, r3
 8029a5a:	f7f3 fc02 	bl	801d262 <sqisign_gen_ibz_set>
    ibz_copy_digit_array(&vec[1], sig->chall_coeff);
 8029a5e:	68bb      	ldr	r3, [r7, #8]
 8029a60:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8029a64:	f107 0310 	add.w	r3, r7, #16
 8029a68:	330c      	adds	r3, #12
 8029a6a:	2208      	movs	r2, #8
 8029a6c:	4618      	mov	r0, r3
 8029a6e:	f7f3 fd80 	bl	801d572 <sqisign_gen_ibz_copy_digits>

    // now we compute the ideal associated to the challenge
    // for that, we need to find vec such that
    // the kernel of the challenge isogeny is generated by vec[0]*B0[0] + vec[1]*B0[1] where B0
    // is the image through the secret key isogeny of the canonical basis E0
    ibz_mat_2x2_eval(&vec, &(sk->mat_BAcan_to_BA0_two), &vec);
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	f503 7100 	add.w	r1, r3, #512	@ 0x200
 8029a78:	f107 0210 	add.w	r2, r7, #16
 8029a7c:	f107 0310 	add.w	r3, r7, #16
 8029a80:	4618      	mov	r0, r3
 8029a82:	f7db f86d 	bl	8004b60 <sqisign_gen_ibz_mat_2x2_eval>

    // lideal_chall_two is the pullback of the ideal challenge through the secret key ideal
    id2iso_kernel_dlogs_to_ideal_even(lideal_chall_two, &vec, TORSION_EVEN_POWER);
 8029a86:	f107 0310 	add.w	r3, r7, #16
 8029a8a:	22f8      	movs	r2, #248	@ 0xf8
 8029a8c:	4619      	mov	r1, r3
 8029a8e:	68f8      	ldr	r0, [r7, #12]
 8029a90:	f7f2 f92e 	bl	801bcf0 <id2iso_kernel_dlogs_to_ideal_even>
    assert(ibz_cmp(&lideal_chall_two->norm, &TORSION_PLUS_2POWER) == 0);
 8029a94:	68fb      	ldr	r3, [r7, #12]
 8029a96:	33cc      	adds	r3, #204	@ 0xcc
 8029a98:	490a      	ldr	r1, [pc, #40]	@ (8029ac4 <compute_challenge_ideal_signature+0x88>)
 8029a9a:	4618      	mov	r0, r3
 8029a9c:	f7f3 fb88 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8029aa0:	4603      	mov	r3, r0
 8029aa2:	2b00      	cmp	r3, #0
 8029aa4:	d005      	beq.n	8029ab2 <compute_challenge_ideal_signature+0x76>
 8029aa6:	4b08      	ldr	r3, [pc, #32]	@ (8029ac8 <compute_challenge_ideal_signature+0x8c>)
 8029aa8:	4a08      	ldr	r2, [pc, #32]	@ (8029acc <compute_challenge_ideal_signature+0x90>)
 8029aaa:	212d      	movs	r1, #45	@ 0x2d
 8029aac:	4808      	ldr	r0, [pc, #32]	@ (8029ad0 <compute_challenge_ideal_signature+0x94>)
 8029aae:	f00b fbc3 	bl	8035238 <__assert_func>

    ibz_vec_2_finalize(&vec);
 8029ab2:	f107 0310 	add.w	r3, r7, #16
 8029ab6:	4618      	mov	r0, r3
 8029ab8:	f7e5 f99a 	bl	800edf0 <sqisign_gen_ibz_vec_2_finalize>
}
 8029abc:	bf00      	nop
 8029abe:	3728      	adds	r7, #40	@ 0x28
 8029ac0:	46bd      	mov	sp, r7
 8029ac2:	bd80      	pop	{r7, pc}
 8029ac4:	0803ce5c 	.word	0x0803ce5c
 8029ac8:	08038bc0 	.word	0x08038bc0
 8029acc:	08038bfc 	.word	0x08038bfc
 8029ad0:	08038c00 	.word	0x08038c00

08029ad4 <sample_response>:

static void
sample_response(quat_alg_elem_t *x, const quat_lattice_t *lattice, const ibz_t *lattice_content)
{
 8029ad4:	b580      	push	{r7, lr}
 8029ad6:	b088      	sub	sp, #32
 8029ad8:	af00      	add	r7, sp, #0
 8029ada:	60f8      	str	r0, [r7, #12]
 8029adc:	60b9      	str	r1, [r7, #8]
 8029ade:	607a      	str	r2, [r7, #4]
    ibz_t bound;
    ibz_init(&bound);
 8029ae0:	f107 0310 	add.w	r3, r7, #16
 8029ae4:	4618      	mov	r0, r3
 8029ae6:	f7f3 fa8e 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_pow(&bound, &ibz_const_two, SQIsign_response_length);
 8029aea:	f107 0310 	add.w	r3, r7, #16
 8029aee:	227e      	movs	r2, #126	@ 0x7e
 8029af0:	4916      	ldr	r1, [pc, #88]	@ (8029b4c <sample_response+0x78>)
 8029af2:	4618      	mov	r0, r3
 8029af4:	f7f3 fb40 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_sub(&bound, &bound, &ibz_const_one);
 8029af8:	f107 0110 	add.w	r1, r7, #16
 8029afc:	f107 0310 	add.w	r3, r7, #16
 8029b00:	4a13      	ldr	r2, [pc, #76]	@ (8029b50 <sample_response+0x7c>)
 8029b02:	4618      	mov	r0, r3
 8029b04:	f7f3 faa4 	bl	801d050 <sqisign_gen_ibz_sub>
    ibz_mul(&bound, &bound, lattice_content);
 8029b08:	f107 0110 	add.w	r1, r7, #16
 8029b0c:	f107 0310 	add.w	r3, r7, #16
 8029b10:	687a      	ldr	r2, [r7, #4]
 8029b12:	4618      	mov	r0, r3
 8029b14:	f7f3 faab 	bl	801d06e <sqisign_gen_ibz_mul>

    int ok UNUSED = quat_lattice_sample_from_ball(x, lattice, &QUATALG_PINFTY, &bound);
 8029b18:	f107 0310 	add.w	r3, r7, #16
 8029b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8029b54 <sample_response+0x80>)
 8029b1e:	68b9      	ldr	r1, [r7, #8]
 8029b20:	68f8      	ldr	r0, [r7, #12]
 8029b22:	f7f6 fcef 	bl	8020504 <sqisign_gen_quat_lattice_sample_from_ball>
 8029b26:	61f8      	str	r0, [r7, #28]
    assert(ok);
 8029b28:	69fb      	ldr	r3, [r7, #28]
 8029b2a:	2b00      	cmp	r3, #0
 8029b2c:	d105      	bne.n	8029b3a <sample_response+0x66>
 8029b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8029b58 <sample_response+0x84>)
 8029b30:	4a0a      	ldr	r2, [pc, #40]	@ (8029b5c <sample_response+0x88>)
 8029b32:	213c      	movs	r1, #60	@ 0x3c
 8029b34:	480a      	ldr	r0, [pc, #40]	@ (8029b60 <sample_response+0x8c>)
 8029b36:	f00b fb7f 	bl	8035238 <__assert_func>

    ibz_finalize(&bound);
 8029b3a:	f107 0310 	add.w	r3, r7, #16
 8029b3e:	4618      	mov	r0, r3
 8029b40:	f7f3 fa6c 	bl	801d01c <sqisign_gen_ibz_finalize>
}
 8029b44:	bf00      	nop
 8029b46:	3720      	adds	r7, #32
 8029b48:	46bd      	mov	sp, r7
 8029b4a:	bd80      	pop	{r7, pc}
 8029b4c:	0803b90c 	.word	0x0803b90c
 8029b50:	0803b900 	.word	0x0803b900
 8029b54:	0803bf30 	.word	0x0803bf30
 8029b58:	08038c14 	.word	0x08038c14
 8029b5c:	08038bfc 	.word	0x08038bfc
 8029b60:	08038c00 	.word	0x08038c00

08029b64 <compute_response_quat_element>:
compute_response_quat_element(quat_alg_elem_t *resp_quat,
                              ibz_t *lattice_content,
                              const secret_key_t *sk,
                              const quat_left_ideal_t *lideal_chall_two,
                              const quat_left_ideal_t *lideal_commit)
{
 8029b64:	b590      	push	{r4, r7, lr}
 8029b66:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8029b6a:	af00      	add	r7, sp, #0
 8029b6c:	f507 7422 	add.w	r4, r7, #648	@ 0x288
 8029b70:	f5a4 741f 	sub.w	r4, r4, #636	@ 0x27c
 8029b74:	6020      	str	r0, [r4, #0]
 8029b76:	f507 7022 	add.w	r0, r7, #648	@ 0x288
 8029b7a:	f5a0 7020 	sub.w	r0, r0, #640	@ 0x280
 8029b7e:	6001      	str	r1, [r0, #0]
 8029b80:	f507 7122 	add.w	r1, r7, #648	@ 0x288
 8029b84:	f5a1 7121 	sub.w	r1, r1, #644	@ 0x284
 8029b88:	600a      	str	r2, [r1, #0]
 8029b8a:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8029b8e:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8029b92:	6013      	str	r3, [r2, #0]
    quat_left_ideal_t lideal_chall_secret;
    quat_lattice_t lattice_hom_chall_to_com, lat_commit;

    // Init
    quat_left_ideal_init(&lideal_chall_secret);
 8029b94:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8029b98:	4618      	mov	r0, r3
 8029b9a:	f7e5 fa49 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    quat_lattice_init(&lat_commit);
 8029b9e:	f107 0314 	add.w	r3, r7, #20
 8029ba2:	4618      	mov	r0, r3
 8029ba4:	f7e5 fa1d 	bl	800efe2 <sqisign_gen_quat_lattice_init>
    quat_lattice_init(&lattice_hom_chall_to_com);
 8029ba8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8029bac:	4618      	mov	r0, r3
 8029bae:	f7e5 fa18 	bl	800efe2 <sqisign_gen_quat_lattice_init>

    // lideal_chall_secret = lideal_secret * lideal_chall_two
    quat_lideal_inter(&lideal_chall_secret, lideal_chall_two, &(sk->secret_ideal), &QUATALG_PINFTY);
 8029bb2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029bb6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8029bba:	681b      	ldr	r3, [r3, #0]
 8029bbc:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8029bc0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029bc4:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8029bc8:	f507 70d6 	add.w	r0, r7, #428	@ 0x1ac
 8029bcc:	4b22      	ldr	r3, [pc, #136]	@ (8029c58 <compute_response_quat_element+0xf4>)
 8029bce:	6809      	ldr	r1, [r1, #0]
 8029bd0:	f7f2 ff40 	bl	801ca54 <sqisign_gen_quat_lideal_inter>

    // now we compute lideal_com_to_chall which is dual(Icom)* lideal_chall_secret
    quat_lattice_conjugate_without_hnf(&lat_commit, &(lideal_commit->lattice));
 8029bd4:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8029bd8:	f107 0314 	add.w	r3, r7, #20
 8029bdc:	4611      	mov	r1, r2
 8029bde:	4618      	mov	r0, r3
 8029be0:	f7f6 fea1 	bl	8020926 <sqisign_gen_quat_lattice_conjugate_without_hnf>
    quat_lattice_intersect(&lattice_hom_chall_to_com, &lideal_chall_secret.lattice, &lat_commit);
 8029be4:	f107 0214 	add.w	r2, r7, #20
 8029be8:	f507 71d6 	add.w	r1, r7, #428	@ 0x1ac
 8029bec:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8029bf0:	4618      	mov	r0, r3
 8029bf2:	f7f7 f8a5 	bl	8020d40 <sqisign_gen_quat_lattice_intersect>

    // sampling the smallest response
    ibz_mul(lattice_content, &lideal_chall_secret.norm, &lideal_commit->norm);
 8029bf6:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8029bfa:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8029bfe:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8029c02:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8029c06:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c0a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029c0e:	6818      	ldr	r0, [r3, #0]
 8029c10:	f7f3 fa2d 	bl	801d06e <sqisign_gen_ibz_mul>
    sample_response(resp_quat, &lattice_hom_chall_to_com, lattice_content);
 8029c14:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c18:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8029c1c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8029c20:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c24:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029c28:	6812      	ldr	r2, [r2, #0]
 8029c2a:	6818      	ldr	r0, [r3, #0]
 8029c2c:	f7ff ff52 	bl	8029ad4 <sample_response>

    // Clean up
    quat_left_ideal_finalize(&lideal_chall_secret);
 8029c30:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8029c34:	4618      	mov	r0, r3
 8029c36:	f7e5 fa10 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
    quat_lattice_finalize(&lat_commit);
 8029c3a:	f107 0314 	add.w	r3, r7, #20
 8029c3e:	4618      	mov	r0, r3
 8029c40:	f7e5 f9e5 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
    quat_lattice_finalize(&lattice_hom_chall_to_com);
 8029c44:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8029c48:	4618      	mov	r0, r3
 8029c4a:	f7e5 f9e0 	bl	800f00e <sqisign_gen_quat_lattice_finalize>
}
 8029c4e:	bf00      	nop
 8029c50:	f507 7723 	add.w	r7, r7, #652	@ 0x28c
 8029c54:	46bd      	mov	sp, r7
 8029c56:	bd90      	pop	{r4, r7, pc}
 8029c58:	0803bf30 	.word	0x0803bf30

08029c5c <compute_backtracking_signature>:

static void
compute_backtracking_signature(signature_t *sig, quat_alg_elem_t *resp_quat, ibz_t *lattice_content, ibz_t *remain)
{
 8029c5c:	b580      	push	{r7, lr}
 8029c5e:	b094      	sub	sp, #80	@ 0x50
 8029c60:	af00      	add	r7, sp, #0
 8029c62:	60f8      	str	r0, [r7, #12]
 8029c64:	60b9      	str	r1, [r7, #8]
 8029c66:	607a      	str	r2, [r7, #4]
 8029c68:	603b      	str	r3, [r7, #0]
    uint_fast8_t backtracking;
    ibz_t tmp;
    ibz_init(&tmp);
 8029c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8029c6e:	4618      	mov	r0, r3
 8029c70:	f7f3 f9c9 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_vec_4_t dummy_coord;
    ibz_vec_4_init(&dummy_coord);
 8029c74:	f107 0310 	add.w	r3, r7, #16
 8029c78:	4618      	mov	r0, r3
 8029c7a:	f7e5 f8ca 	bl	800ee12 <sqisign_gen_ibz_vec_4_init>

    quat_alg_make_primitive(&dummy_coord, &tmp, resp_quat, &MAXORD_O0);
 8029c7e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8029c82:	f107 0010 	add.w	r0, r7, #16
 8029c86:	4b20      	ldr	r3, [pc, #128]	@ (8029d08 <compute_backtracking_signature+0xac>)
 8029c88:	68ba      	ldr	r2, [r7, #8]
 8029c8a:	f7d7 fcb5 	bl	80015f8 <sqisign_gen_quat_alg_make_primitive>
    ibz_mul(&resp_quat->denom, &resp_quat->denom, &tmp);
 8029c8e:	68bb      	ldr	r3, [r7, #8]
 8029c90:	68b9      	ldr	r1, [r7, #8]
 8029c92:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8029c96:	4618      	mov	r0, r3
 8029c98:	f7f3 f9e9 	bl	801d06e <sqisign_gen_ibz_mul>
    assert(quat_lattice_contains(NULL, &MAXORD_O0, resp_quat));
 8029c9c:	68ba      	ldr	r2, [r7, #8]
 8029c9e:	491a      	ldr	r1, [pc, #104]	@ (8029d08 <compute_backtracking_signature+0xac>)
 8029ca0:	2000      	movs	r0, #0
 8029ca2:	f7f7 fb21 	bl	80212e8 <sqisign_gen_quat_lattice_contains>
 8029ca6:	4603      	mov	r3, r0
 8029ca8:	2b00      	cmp	r3, #0
 8029caa:	d105      	bne.n	8029cb8 <compute_backtracking_signature+0x5c>
 8029cac:	4b17      	ldr	r3, [pc, #92]	@ (8029d0c <compute_backtracking_signature+0xb0>)
 8029cae:	4a18      	ldr	r2, [pc, #96]	@ (8029d10 <compute_backtracking_signature+0xb4>)
 8029cb0:	216d      	movs	r1, #109	@ 0x6d
 8029cb2:	4818      	ldr	r0, [pc, #96]	@ (8029d14 <compute_backtracking_signature+0xb8>)
 8029cb4:	f00b fac0 	bl	8035238 <__assert_func>

    // the backtracking is the common part of the response and the challenge
    // its degree is the scalar tmp computed above such that quat_resp is in tmp * O0.
    backtracking = ibz_two_adic(&tmp);
 8029cb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8029cbc:	4618      	mov	r0, r3
 8029cbe:	f7f3 fa6a 	bl	801d196 <sqisign_gen_ibz_two_adic>
 8029cc2:	4603      	mov	r3, r0
 8029cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sig->backtracking = backtracking;
 8029cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8029cc8:	b2da      	uxtb	r2, r3
 8029cca:	68fb      	ldr	r3, [r7, #12]
 8029ccc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    ibz_pow(&tmp, &ibz_const_two, backtracking);
 8029cd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8029cd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8029cd6:	4910      	ldr	r1, [pc, #64]	@ (8029d18 <compute_backtracking_signature+0xbc>)
 8029cd8:	4618      	mov	r0, r3
 8029cda:	f7f3 fa4d 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_div(lattice_content, remain, lattice_content, &tmp);
 8029cde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8029ce2:	687a      	ldr	r2, [r7, #4]
 8029ce4:	6839      	ldr	r1, [r7, #0]
 8029ce6:	6878      	ldr	r0, [r7, #4]
 8029ce8:	f7f3 f9ea 	bl	801d0c0 <sqisign_gen_ibz_div>

    ibz_finalize(&tmp);
 8029cec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8029cf0:	4618      	mov	r0, r3
 8029cf2:	f7f3 f993 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_4_finalize(&dummy_coord);
 8029cf6:	f107 0310 	add.w	r3, r7, #16
 8029cfa:	4618      	mov	r0, r3
 8029cfc:	f7e5 f8a5 	bl	800ee4a <sqisign_gen_ibz_vec_4_finalize>
}
 8029d00:	bf00      	nop
 8029d02:	3750      	adds	r7, #80	@ 0x50
 8029d04:	46bd      	mov	sp, r7
 8029d06:	bd80      	pop	{r7, pc}
 8029d08:	0803bf3c 	.word	0x0803bf3c
 8029d0c:	08038c18 	.word	0x08038c18
 8029d10:	08038bfc 	.word	0x08038bfc
 8029d14:	08038c00 	.word	0x08038c00
 8029d18:	0803b90c 	.word	0x0803b90c

08029d1c <compute_random_aux_norm_and_helpers>:
                                    ibz_t *remain,
                                    const ibz_t *lattice_content,
                                    quat_alg_elem_t *resp_quat,
                                    quat_left_ideal_t *lideal_com_resp,
                                    quat_left_ideal_t *lideal_commit)
{
 8029d1c:	b580      	push	{r7, lr}
 8029d1e:	b096      	sub	sp, #88	@ 0x58
 8029d20:	af02      	add	r7, sp, #8
 8029d22:	60f8      	str	r0, [r7, #12]
 8029d24:	60b9      	str	r1, [r7, #8]
 8029d26:	607a      	str	r2, [r7, #4]
 8029d28:	603b      	str	r3, [r7, #0]
    uint_fast8_t exp_diadic_val_full_resp;

    ibz_t tmp, degree_full_resp, degree_odd_resp, norm_d;

    // Init
    ibz_init(&degree_full_resp);
 8029d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8029d2e:	4618      	mov	r0, r3
 8029d30:	f7f3 f969 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&degree_odd_resp);
 8029d34:	f107 0320 	add.w	r3, r7, #32
 8029d38:	4618      	mov	r0, r3
 8029d3a:	f7f3 f964 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&norm_d);
 8029d3e:	f107 0314 	add.w	r3, r7, #20
 8029d42:	4618      	mov	r0, r3
 8029d44:	f7f3 f95f 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&tmp);
 8029d48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8029d4c:	4618      	mov	r0, r3
 8029d4e:	f7f3 f95a 	bl	801d006 <sqisign_gen_ibz_init>

    quat_alg_norm(&degree_full_resp, &norm_d, resp_quat, &QUATALG_PINFTY);
 8029d52:	f107 0114 	add.w	r1, r7, #20
 8029d56:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8029d5a:	4b63      	ldr	r3, [pc, #396]	@ (8029ee8 <compute_random_aux_norm_and_helpers+0x1cc>)
 8029d5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8029d5e:	f7d7 fb7d 	bl	800145c <sqisign_gen_quat_alg_norm>

    // dividing by n(lideal_com) * n(lideal_secret_chall)
    assert(ibz_is_one(&norm_d));
 8029d62:	f107 0314 	add.w	r3, r7, #20
 8029d66:	4618      	mov	r0, r3
 8029d68:	f7f3 fa45 	bl	801d1f6 <sqisign_gen_ibz_is_one>
 8029d6c:	4603      	mov	r3, r0
 8029d6e:	2b00      	cmp	r3, #0
 8029d70:	d105      	bne.n	8029d7e <compute_random_aux_norm_and_helpers+0x62>
 8029d72:	4b5e      	ldr	r3, [pc, #376]	@ (8029eec <compute_random_aux_norm_and_helpers+0x1d0>)
 8029d74:	4a5e      	ldr	r2, [pc, #376]	@ (8029ef0 <compute_random_aux_norm_and_helpers+0x1d4>)
 8029d76:	2193      	movs	r1, #147	@ 0x93
 8029d78:	485e      	ldr	r0, [pc, #376]	@ (8029ef4 <compute_random_aux_norm_and_helpers+0x1d8>)
 8029d7a:	f00b fa5d 	bl	8035238 <__assert_func>
    ibz_div(&degree_full_resp, remain, &degree_full_resp, lattice_content);
 8029d7e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8029d82:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8029d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029d88:	6839      	ldr	r1, [r7, #0]
 8029d8a:	f7f3 f999 	bl	801d0c0 <sqisign_gen_ibz_div>
    assert(ibz_cmp(remain, &ibz_const_zero) == 0);
 8029d8e:	495a      	ldr	r1, [pc, #360]	@ (8029ef8 <compute_random_aux_norm_and_helpers+0x1dc>)
 8029d90:	6838      	ldr	r0, [r7, #0]
 8029d92:	f7f3 fa0d 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8029d96:	4603      	mov	r3, r0
 8029d98:	2b00      	cmp	r3, #0
 8029d9a:	d005      	beq.n	8029da8 <compute_random_aux_norm_and_helpers+0x8c>
 8029d9c:	4b57      	ldr	r3, [pc, #348]	@ (8029efc <compute_random_aux_norm_and_helpers+0x1e0>)
 8029d9e:	4a54      	ldr	r2, [pc, #336]	@ (8029ef0 <compute_random_aux_norm_and_helpers+0x1d4>)
 8029da0:	2195      	movs	r1, #149	@ 0x95
 8029da2:	4854      	ldr	r0, [pc, #336]	@ (8029ef4 <compute_random_aux_norm_and_helpers+0x1d8>)
 8029da4:	f00b fa48 	bl	8035238 <__assert_func>

    // computing the diadic valuation
    exp_diadic_val_full_resp = ibz_two_adic(&degree_full_resp);
 8029da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8029dac:	4618      	mov	r0, r3
 8029dae:	f7f3 f9f2 	bl	801d196 <sqisign_gen_ibz_two_adic>
 8029db2:	4603      	mov	r3, r0
 8029db4:	64bb      	str	r3, [r7, #72]	@ 0x48
    sig->two_resp_length = exp_diadic_val_full_resp;
 8029db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8029db8:	b2da      	uxtb	r2, r3
 8029dba:	68fb      	ldr	r3, [r7, #12]
 8029dbc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    // removing the power of two part
    ibz_pow(&tmp, &ibz_const_two, exp_diadic_val_full_resp);
 8029dc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8029dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8029dc6:	494e      	ldr	r1, [pc, #312]	@ (8029f00 <compute_random_aux_norm_and_helpers+0x1e4>)
 8029dc8:	4618      	mov	r0, r3
 8029dca:	f7f3 f9d5 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_div(&degree_odd_resp, remain, &degree_full_resp, &tmp);
 8029dce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8029dd2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8029dd6:	f107 0020 	add.w	r0, r7, #32
 8029dda:	6839      	ldr	r1, [r7, #0]
 8029ddc:	f7f3 f970 	bl	801d0c0 <sqisign_gen_ibz_div>
    assert(ibz_cmp(remain, &ibz_const_zero) == 0);
 8029de0:	4945      	ldr	r1, [pc, #276]	@ (8029ef8 <compute_random_aux_norm_and_helpers+0x1dc>)
 8029de2:	6838      	ldr	r0, [r7, #0]
 8029de4:	f7f3 f9e4 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8029de8:	4603      	mov	r3, r0
 8029dea:	2b00      	cmp	r3, #0
 8029dec:	d005      	beq.n	8029dfa <compute_random_aux_norm_and_helpers+0xde>
 8029dee:	4b43      	ldr	r3, [pc, #268]	@ (8029efc <compute_random_aux_norm_and_helpers+0x1e0>)
 8029df0:	4a3f      	ldr	r2, [pc, #252]	@ (8029ef0 <compute_random_aux_norm_and_helpers+0x1d4>)
 8029df2:	219e      	movs	r1, #158	@ 0x9e
 8029df4:	483f      	ldr	r0, [pc, #252]	@ (8029ef4 <compute_random_aux_norm_and_helpers+0x1d8>)
 8029df6:	f00b fa1f 	bl	8035238 <__assert_func>
#ifndef NDEBUG
    ibz_pow(&tmp, &ibz_const_two, SQIsign_response_length - sig->backtracking);
 8029dfa:	68fb      	ldr	r3, [r7, #12]
 8029dfc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8029e00:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8029e04:	461a      	mov	r2, r3
 8029e06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8029e0a:	493d      	ldr	r1, [pc, #244]	@ (8029f00 <compute_random_aux_norm_and_helpers+0x1e4>)
 8029e0c:	4618      	mov	r0, r3
 8029e0e:	f7f3 f9b3 	bl	801d178 <sqisign_gen_ibz_pow>
    assert(ibz_cmp(&tmp, &degree_odd_resp) > 0);
 8029e12:	f107 0220 	add.w	r2, r7, #32
 8029e16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8029e1a:	4611      	mov	r1, r2
 8029e1c:	4618      	mov	r0, r3
 8029e1e:	f7f3 f9c7 	bl	801d1b0 <sqisign_gen_ibz_cmp>
 8029e22:	4603      	mov	r3, r0
 8029e24:	2b00      	cmp	r3, #0
 8029e26:	dc05      	bgt.n	8029e34 <compute_random_aux_norm_and_helpers+0x118>
 8029e28:	4b36      	ldr	r3, [pc, #216]	@ (8029f04 <compute_random_aux_norm_and_helpers+0x1e8>)
 8029e2a:	4a31      	ldr	r2, [pc, #196]	@ (8029ef0 <compute_random_aux_norm_and_helpers+0x1d4>)
 8029e2c:	21a1      	movs	r1, #161	@ 0xa1
 8029e2e:	4831      	ldr	r0, [pc, #196]	@ (8029ef4 <compute_random_aux_norm_and_helpers+0x1d8>)
 8029e30:	f00b fa02 	bl	8035238 <__assert_func>
#endif

    // creating the ideal
    quat_alg_conj(resp_quat, resp_quat);
 8029e34:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8029e36:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8029e38:	f7d7 fbab 	bl	8001592 <sqisign_gen_quat_alg_conj>

    // setting the norm
    ibz_mul(&tmp, &lideal_commit->norm, &degree_odd_resp);
 8029e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8029e3e:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8029e42:	f107 0220 	add.w	r2, r7, #32
 8029e46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8029e4a:	4618      	mov	r0, r3
 8029e4c:	f7f3 f90f 	bl	801d06e <sqisign_gen_ibz_mul>
    quat_lideal_create(lideal_com_resp, resp_quat, &tmp, &MAXORD_O0, &QUATALG_PINFTY);
 8029e50:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8029e54:	4b24      	ldr	r3, [pc, #144]	@ (8029ee8 <compute_random_aux_norm_and_helpers+0x1cc>)
 8029e56:	9300      	str	r3, [sp, #0]
 8029e58:	4b2b      	ldr	r3, [pc, #172]	@ (8029f08 <compute_random_aux_norm_and_helpers+0x1ec>)
 8029e5a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8029e5c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8029e5e:	f7f2 fbcb 	bl	801c5f8 <sqisign_gen_quat_lideal_create>

    // now we compute the ideal_aux
    // computing the norm
    pow_dim2_deg_resp = SQIsign_response_length - exp_diadic_val_full_resp - sig->backtracking;
 8029e62:	68fb      	ldr	r3, [r7, #12]
 8029e64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8029e68:	461a      	mov	r2, r3
 8029e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8029e6c:	4413      	add	r3, r2
 8029e6e:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8029e72:	647b      	str	r3, [r7, #68]	@ 0x44
    ibz_pow(remain, &ibz_const_two, pow_dim2_deg_resp);
 8029e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8029e76:	4922      	ldr	r1, [pc, #136]	@ (8029f00 <compute_random_aux_norm_and_helpers+0x1e4>)
 8029e78:	6838      	ldr	r0, [r7, #0]
 8029e7a:	f7f3 f97d 	bl	801d178 <sqisign_gen_ibz_pow>
    ibz_sub(random_aux_norm, remain, &degree_odd_resp);
 8029e7e:	f107 0320 	add.w	r3, r7, #32
 8029e82:	461a      	mov	r2, r3
 8029e84:	6839      	ldr	r1, [r7, #0]
 8029e86:	68b8      	ldr	r0, [r7, #8]
 8029e88:	f7f3 f8e2 	bl	801d050 <sqisign_gen_ibz_sub>

    // multiplying by 2^HD_extra_torsion to account for the fact that
    // we use extra torsion above the kernel
    for (int i = 0; i < HD_extra_torsion; i++)
 8029e8c:	2300      	movs	r3, #0
 8029e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8029e90:	e007      	b.n	8029ea2 <compute_random_aux_norm_and_helpers+0x186>
        ibz_mul(remain, remain, &ibz_const_two);
 8029e92:	4a1b      	ldr	r2, [pc, #108]	@ (8029f00 <compute_random_aux_norm_and_helpers+0x1e4>)
 8029e94:	6839      	ldr	r1, [r7, #0]
 8029e96:	6838      	ldr	r0, [r7, #0]
 8029e98:	f7f3 f8e9 	bl	801d06e <sqisign_gen_ibz_mul>
    for (int i = 0; i < HD_extra_torsion; i++)
 8029e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8029e9e:	3301      	adds	r3, #1
 8029ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8029ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8029ea4:	2b01      	cmp	r3, #1
 8029ea6:	ddf4      	ble.n	8029e92 <compute_random_aux_norm_and_helpers+0x176>

    ibz_invmod(degree_resp_inv, &degree_odd_resp, remain);
 8029ea8:	f107 0320 	add.w	r3, r7, #32
 8029eac:	683a      	ldr	r2, [r7, #0]
 8029eae:	4619      	mov	r1, r3
 8029eb0:	6878      	ldr	r0, [r7, #4]
 8029eb2:	f7f3 fbac 	bl	801d60e <sqisign_gen_ibz_invmod>

    ibz_finalize(&degree_full_resp);
 8029eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8029eba:	4618      	mov	r0, r3
 8029ebc:	f7f3 f8ae 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&degree_odd_resp);
 8029ec0:	f107 0320 	add.w	r3, r7, #32
 8029ec4:	4618      	mov	r0, r3
 8029ec6:	f7f3 f8a9 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&norm_d);
 8029eca:	f107 0314 	add.w	r3, r7, #20
 8029ece:	4618      	mov	r0, r3
 8029ed0:	f7f3 f8a4 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&tmp);
 8029ed4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8029ed8:	4618      	mov	r0, r3
 8029eda:	f7f3 f89f 	bl	801d01c <sqisign_gen_ibz_finalize>

    return pow_dim2_deg_resp;
 8029ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8029ee0:	4618      	mov	r0, r3
 8029ee2:	3750      	adds	r7, #80	@ 0x50
 8029ee4:	46bd      	mov	sp, r7
 8029ee6:	bd80      	pop	{r7, pc}
 8029ee8:	0803bf30 	.word	0x0803bf30
 8029eec:	08038c4c 	.word	0x08038c4c
 8029ef0:	08038bfc 	.word	0x08038bfc
 8029ef4:	08038c00 	.word	0x08038c00
 8029ef8:	0803b8f4 	.word	0x0803b8f4
 8029efc:	08038c60 	.word	0x08038c60
 8029f00:	0803b90c 	.word	0x0803b90c
 8029f04:	08038c88 	.word	0x08038c88
 8029f08:	0803bf3c 	.word	0x0803bf3c

08029f0c <evaluate_random_aux_isogeny_signature>:
static int
evaluate_random_aux_isogeny_signature(ec_curve_t *E_aux,
                                      ec_basis_t *B_aux,
                                      const ibz_t *norm,
                                      const quat_left_ideal_t *lideal_com_resp)
{
 8029f0c:	b590      	push	{r4, r7, lr}
 8029f0e:	b0f7      	sub	sp, #476	@ 0x1dc
 8029f10:	af02      	add	r7, sp, #8
 8029f12:	f507 74e8 	add.w	r4, r7, #464	@ 0x1d0
 8029f16:	f5a4 74e2 	sub.w	r4, r4, #452	@ 0x1c4
 8029f1a:	6020      	str	r0, [r4, #0]
 8029f1c:	f507 70e8 	add.w	r0, r7, #464	@ 0x1d0
 8029f20:	f5a0 70e4 	sub.w	r0, r0, #456	@ 0x1c8
 8029f24:	6001      	str	r1, [r0, #0]
 8029f26:	f507 71e8 	add.w	r1, r7, #464	@ 0x1d0
 8029f2a:	f5a1 71e6 	sub.w	r1, r1, #460	@ 0x1cc
 8029f2e:	600a      	str	r2, [r1, #0]
 8029f30:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 8029f34:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8029f38:	6013      	str	r3, [r2, #0]
    quat_left_ideal_t lideal_aux;
    quat_left_ideal_t lideal_aux_resp_com;

    // Init
    quat_left_ideal_init(&lideal_aux);
 8029f3a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8029f3e:	4618      	mov	r0, r3
 8029f40:	f7e5 f876 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    quat_left_ideal_init(&lideal_aux_resp_com);
 8029f44:	f107 0314 	add.w	r3, r7, #20
 8029f48:	4618      	mov	r0, r3
 8029f4a:	f7e5 f871 	bl	800f030 <sqisign_gen_quat_left_ideal_init>

    // sampling the ideal at random
    int found = quat_sampling_random_ideal_O0_given_norm(
 8029f4e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8029f52:	f5a3 71e6 	sub.w	r1, r3, #460	@ 0x1cc
 8029f56:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8029f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8029fd0 <evaluate_random_aux_isogeny_signature+0xc4>)
 8029f5c:	9300      	str	r3, [sp, #0]
 8029f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8029fd4 <evaluate_random_aux_isogeny_signature+0xc8>)
 8029f60:	2200      	movs	r2, #0
 8029f62:	6809      	ldr	r1, [r1, #0]
 8029f64:	f7ff f916 	bl	8029194 <sqisign_gen_quat_sampling_random_ideal_O0_given_norm>
 8029f68:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
        &lideal_aux, norm, 0, &QUAT_represent_integer_params, &QUAT_prime_cofactor);

    if (found) {
 8029f6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8029f70:	2b00      	cmp	r3, #0
 8029f72:	d025      	beq.n	8029fc0 <evaluate_random_aux_isogeny_signature+0xb4>
        // pushing forward
        quat_lideal_inter(&lideal_aux_resp_com, lideal_com_resp, &lideal_aux, &QUATALG_PINFTY);
 8029f74:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8029f78:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8029f7c:	f5a3 71e8 	sub.w	r1, r3, #464	@ 0x1d0
 8029f80:	f107 0014 	add.w	r0, r7, #20
 8029f84:	4b14      	ldr	r3, [pc, #80]	@ (8029fd8 <evaluate_random_aux_isogeny_signature+0xcc>)
 8029f86:	6809      	ldr	r1, [r1, #0]
 8029f88:	f7f2 fd64 	bl	801ca54 <sqisign_gen_quat_lideal_inter>

        // now we evaluate this isogeny on the basis of E0
        found = dim2id2iso_arbitrary_isogeny_evaluation(B_aux, E_aux, &lideal_aux_resp_com);
 8029f8c:	f107 0214 	add.w	r2, r7, #20
 8029f90:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8029f94:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8029f98:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8029f9c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8029fa0:	6809      	ldr	r1, [r1, #0]
 8029fa2:	6818      	ldr	r0, [r3, #0]
 8029fa4:	f7df fdf6 	bl	8009b94 <dim2id2iso_arbitrary_isogeny_evaluation>
 8029fa8:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc

        // Clean up
        quat_left_ideal_finalize(&lideal_aux_resp_com);
 8029fac:	f107 0314 	add.w	r3, r7, #20
 8029fb0:	4618      	mov	r0, r3
 8029fb2:	f7e5 f852 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
        quat_left_ideal_finalize(&lideal_aux);
 8029fb6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8029fba:	4618      	mov	r0, r3
 8029fbc:	f7e5 f84d 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
    }

    return found;
 8029fc0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
}
 8029fc4:	4618      	mov	r0, r3
 8029fc6:	f507 77ea 	add.w	r7, r7, #468	@ 0x1d4
 8029fca:	46bd      	mov	sp, r7
 8029fcc:	bd90      	pop	{r4, r7, pc}
 8029fce:	bf00      	nop
 8029fd0:	0803bf24 	.word	0x0803bf24
 8029fd4:	0803ce38 	.word	0x0803ce38
 8029fd8:	0803bf30 	.word	0x0803bf30

08029fdc <compute_dim2_isogeny_challenge>:
                               theta_couple_curve_with_basis_t *domain,
                               const ibz_t *degree_resp_inv,
                               int pow_dim2_deg_resp,
                               int exp_diadic_val_full_resp,
                               int reduced_order)
{
 8029fdc:	b590      	push	{r4, r7, lr}
 8029fde:	f6ad 3da4 	subw	sp, sp, #2980	@ 0xba4
 8029fe2:	af04      	add	r7, sp, #16
 8029fe4:	f507 6439 	add.w	r4, r7, #2960	@ 0xb90
 8029fe8:	f6a4 3484 	subw	r4, r4, #2948	@ 0xb84
 8029fec:	6020      	str	r0, [r4, #0]
 8029fee:	f507 6039 	add.w	r0, r7, #2960	@ 0xb90
 8029ff2:	f6a0 3088 	subw	r0, r0, #2952	@ 0xb88
 8029ff6:	6001      	str	r1, [r0, #0]
 8029ff8:	f507 6139 	add.w	r1, r7, #2960	@ 0xb90
 8029ffc:	f6a1 318c 	subw	r1, r1, #2956	@ 0xb8c
 802a000:	600a      	str	r2, [r1, #0]
 802a002:	f507 6239 	add.w	r2, r7, #2960	@ 0xb90
 802a006:	f5a2 6239 	sub.w	r2, r2, #2960	@ 0xb90
 802a00a:	6013      	str	r3, [r2, #0]
    // where Echl' is 2^exp_diadic_val_full_resp isogenous to Echal
    // ker Phi = <(Bcom_can.P,Baux.P),(Bcom_can.Q,Baux.Q)>

    // preparing the domain
    theta_couple_curve_t EcomXEaux;
    copy_curve(&EcomXEaux.E1, &domain->E1);
 802a00c:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a010:	f6a3 3388 	subw	r3, r3, #2952	@ 0xb88
 802a014:	681a      	ldr	r2, [r3, #0]
 802a016:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 802a01a:	4611      	mov	r1, r2
 802a01c:	4618      	mov	r0, r3
 802a01e:	f7ff fbfa 	bl	8029816 <copy_curve>
    copy_curve(&EcomXEaux.E2, &domain->E2);
 802a022:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a026:	f6a3 3388 	subw	r3, r3, #2952	@ 0xb88
 802a02a:	681b      	ldr	r3, [r3, #0]
 802a02c:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 802a030:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 802a034:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802a038:	4611      	mov	r1, r2
 802a03a:	4618      	mov	r0, r3
 802a03c:	f7ff fbeb 	bl	8029816 <copy_curve>

    // preparing the kernel
    theta_kernel_couple_points_t dim_two_ker;
    copy_bases_to_kernel(&dim_two_ker, &domain->B1, &domain->B2);
 802a040:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a044:	f6a3 3388 	subw	r3, r3, #2952	@ 0xb88
 802a048:	681b      	ldr	r3, [r3, #0]
 802a04a:	f503 7112 	add.w	r1, r3, #584	@ 0x248
 802a04e:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a052:	f6a3 3388 	subw	r3, r3, #2952	@ 0xb88
 802a056:	681b      	ldr	r3, [r3, #0]
 802a058:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 802a05c:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a060:	4618      	mov	r0, r3
 802a062:	f7ef feb3 	bl	8019dcc <copy_bases_to_kernel>

    // dividing by the degree of the response
    digit_t scalar[NWORDS_ORDER];
    ibz_to_digit_array(scalar, degree_resp_inv);
 802a066:	f207 53bc 	addw	r3, r7, #1468	@ 0x5bc
 802a06a:	2220      	movs	r2, #32
 802a06c:	2100      	movs	r1, #0
 802a06e:	4618      	mov	r0, r3
 802a070:	f00b fdc6 	bl	8035c00 <memset>
 802a074:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a078:	f6a3 338c 	subw	r3, r3, #2956	@ 0xb8c
 802a07c:	f207 52bc 	addw	r2, r7, #1468	@ 0x5bc
 802a080:	6819      	ldr	r1, [r3, #0]
 802a082:	4610      	mov	r0, r2
 802a084:	f7f3 fa8c 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ec_mul(&dim_two_ker.T1.P2, scalar, reduced_order, &dim_two_ker.T1.P2, &EcomXEaux.E2);
 802a088:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a08c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802a090:	f207 51bc 	addw	r1, r7, #1468	@ 0x5bc
 802a094:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a098:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802a09c:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 802a0a0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802a0a4:	9300      	str	r3, [sp, #0]
 802a0a6:	4613      	mov	r3, r2
 802a0a8:	f8d7 2ba4 	ldr.w	r2, [r7, #2980]	@ 0xba4
 802a0ac:	f7e2 fdc7 	bl	800cc3e <ec_mul>
    ec_mul(&dim_two_ker.T2.P2, scalar, reduced_order, &dim_two_ker.T2.P2, &EcomXEaux.E2);
 802a0b0:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a0b4:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 802a0b8:	f207 51bc 	addw	r1, r7, #1468	@ 0x5bc
 802a0bc:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a0c0:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 802a0c4:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 802a0c8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802a0cc:	9300      	str	r3, [sp, #0]
 802a0ce:	4613      	mov	r3, r2
 802a0d0:	f8d7 2ba4 	ldr.w	r2, [r7, #2980]	@ 0xba4
 802a0d4:	f7e2 fdb3 	bl	800cc3e <ec_mul>
    ec_mul(&dim_two_ker.T1m2.P2, scalar, reduced_order, &dim_two_ker.T1m2.P2, &EcomXEaux.E2);
 802a0d8:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a0dc:	f503 7234 	add.w	r2, r3, #720	@ 0x2d0
 802a0e0:	f207 51bc 	addw	r1, r7, #1468	@ 0x5bc
 802a0e4:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a0e8:	f503 7034 	add.w	r0, r3, #720	@ 0x2d0
 802a0ec:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 802a0f0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802a0f4:	9300      	str	r3, [sp, #0]
 802a0f6:	4613      	mov	r3, r2
 802a0f8:	f8d7 2ba4 	ldr.w	r2, [r7, #2980]	@ 0xba4
 802a0fc:	f7e2 fd9f 	bl	800cc3e <ec_mul>

    // and multiplying by 2^exp_diadic...
    double_couple_point_iter(&dim_two_ker.T1, exp_diadic_val_full_resp, &dim_two_ker.T1, &EcomXEaux);
 802a100:	f8d7 1ba0 	ldr.w	r1, [r7, #2976]	@ 0xba0
 802a104:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 802a108:	f207 52dc 	addw	r2, r7, #1500	@ 0x5dc
 802a10c:	f207 50dc 	addw	r0, r7, #1500	@ 0x5dc
 802a110:	f7ef fcf5 	bl	8019afe <double_couple_point_iter>
    double_couple_point_iter(&dim_two_ker.T2, exp_diadic_val_full_resp, &dim_two_ker.T2, &EcomXEaux);
 802a114:	f8d7 1ba0 	ldr.w	r1, [r7, #2976]	@ 0xba0
 802a118:	f607 143c 	addw	r4, r7, #2364	@ 0x93c
 802a11c:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a120:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802a124:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a128:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 802a12c:	4623      	mov	r3, r4
 802a12e:	f7ef fce6 	bl	8019afe <double_couple_point_iter>
    double_couple_point_iter(&dim_two_ker.T1m2, exp_diadic_val_full_resp, &dim_two_ker.T1m2, &EcomXEaux);
 802a132:	f8d7 1ba0 	ldr.w	r1, [r7, #2976]	@ 0xba0
 802a136:	f607 143c 	addw	r4, r7, #2364	@ 0x93c
 802a13a:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a13e:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 802a142:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 802a146:	f503 7010 	add.w	r0, r3, #576	@ 0x240
 802a14a:	4623      	mov	r3, r4
 802a14c:	f7ef fcd7 	bl	8019afe <double_couple_point_iter>

    theta_couple_point_t pushed_points[3];
    theta_couple_point_t *const Tev1 = pushed_points + 0, *const Tev2 = pushed_points + 1,
 802a150:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 802a154:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
 802a158:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 802a15c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802a160:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
                                *const Tev1m2 = pushed_points + 2;
 802a164:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 802a168:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 802a16c:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84

    // Set points on the commitment curve
    copy_point(&Tev1->P1, &domain->B1.P);
 802a170:	f8d7 2b8c 	ldr.w	r2, [r7, #2956]	@ 0xb8c
 802a174:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a178:	f6a3 3388 	subw	r3, r3, #2952	@ 0xb88
 802a17c:	681b      	ldr	r3, [r3, #0]
 802a17e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 802a182:	4619      	mov	r1, r3
 802a184:	4610      	mov	r0, r2
 802a186:	f7ff fb0c 	bl	80297a2 <copy_point>
    copy_point(&Tev2->P1, &domain->B1.Q);
 802a18a:	f8d7 2b88 	ldr.w	r2, [r7, #2952]	@ 0xb88
 802a18e:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a192:	f6a3 3388 	subw	r3, r3, #2952	@ 0xb88
 802a196:	681b      	ldr	r3, [r3, #0]
 802a198:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 802a19c:	4619      	mov	r1, r3
 802a19e:	4610      	mov	r0, r2
 802a1a0:	f7ff faff 	bl	80297a2 <copy_point>
    copy_point(&Tev1m2->P1, &domain->B1.PmQ);
 802a1a4:	f8d7 2b84 	ldr.w	r2, [r7, #2948]	@ 0xb84
 802a1a8:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a1ac:	f6a3 3388 	subw	r3, r3, #2952	@ 0xb88
 802a1b0:	681b      	ldr	r3, [r3, #0]
 802a1b2:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 802a1b6:	4619      	mov	r1, r3
 802a1b8:	4610      	mov	r0, r2
 802a1ba:	f7ff faf2 	bl	80297a2 <copy_point>

    // Zero points on the aux curve
    ec_point_init(&Tev1->P2);
 802a1be:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 802a1c2:	3390      	adds	r3, #144	@ 0x90
 802a1c4:	4618      	mov	r0, r3
 802a1c6:	f7e1 f917 	bl	800b3f8 <ec_point_init>
    ec_point_init(&Tev2->P2);
 802a1ca:	f8d7 3b88 	ldr.w	r3, [r7, #2952]	@ 0xb88
 802a1ce:	3390      	adds	r3, #144	@ 0x90
 802a1d0:	4618      	mov	r0, r3
 802a1d2:	f7e1 f911 	bl	800b3f8 <ec_point_init>
    ec_point_init(&Tev1m2->P2);
 802a1d6:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 802a1da:	3390      	adds	r3, #144	@ 0x90
 802a1dc:	4618      	mov	r0, r3
 802a1de:	f7e1 f90b 	bl	800b3f8 <ec_point_init>

    theta_couple_curve_t codomain_product;

    // computation of the dim2 isogeny
    if (!theta_chain_compute_and_eval_randomized(pow_dim2_deg_resp,
 802a1e2:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a1e6:	f5a3 6339 	sub.w	r3, r3, #2960	@ 0xb90
 802a1ea:	6818      	ldr	r0, [r3, #0]
 802a1ec:	f207 52dc 	addw	r2, r7, #1500	@ 0x5dc
 802a1f0:	f607 113c 	addw	r1, r7, #2364	@ 0x93c
 802a1f4:	2303      	movs	r3, #3
 802a1f6:	9302      	str	r3, [sp, #8]
 802a1f8:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 802a1fc:	9301      	str	r3, [sp, #4]
 802a1fe:	f107 0314 	add.w	r3, r7, #20
 802a202:	9300      	str	r3, [sp, #0]
 802a204:	2301      	movs	r3, #1
 802a206:	f006 fa8d 	bl	8030724 <theta_chain_compute_and_eval_randomized>
 802a20a:	4603      	mov	r3, r0
 802a20c:	2b00      	cmp	r3, #0
 802a20e:	d101      	bne.n	802a214 <compute_dim2_isogeny_challenge+0x238>
                                                 &dim_two_ker,
                                                 true,
                                                 &codomain_product,
                                                 pushed_points,
                                                 sizeof(pushed_points) / sizeof(*pushed_points)))
        return 0;
 802a210:	2300      	movs	r3, #0
 802a212:	e07e      	b.n	802a312 <compute_dim2_isogeny_challenge+0x336>

    assert(test_couple_point_order_twof(Tev1, &codomain_product, reduced_order));
 802a214:	f107 0314 	add.w	r3, r7, #20
 802a218:	f8d7 2ba4 	ldr.w	r2, [r7, #2980]	@ 0xba4
 802a21c:	4619      	mov	r1, r3
 802a21e:	f8d7 0b8c 	ldr.w	r0, [r7, #2956]	@ 0xb8c
 802a222:	f7ff fba4 	bl	802996e <test_couple_point_order_twof>
 802a226:	4603      	mov	r3, r0
 802a228:	2b00      	cmp	r3, #0
 802a22a:	d106      	bne.n	802a23a <compute_dim2_isogeny_challenge+0x25e>
 802a22c:	4b3b      	ldr	r3, [pc, #236]	@ (802a31c <compute_dim2_isogeny_challenge+0x340>)
 802a22e:	4a3c      	ldr	r2, [pc, #240]	@ (802a320 <compute_dim2_isogeny_challenge+0x344>)
 802a230:	f240 111b 	movw	r1, #283	@ 0x11b
 802a234:	483b      	ldr	r0, [pc, #236]	@ (802a324 <compute_dim2_isogeny_challenge+0x348>)
 802a236:	f00a ffff 	bl	8035238 <__assert_func>

    // Set the auxiliary curve
    copy_curve(&codomain->E1, &codomain_product.E2);
 802a23a:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a23e:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a242:	681a      	ldr	r2, [r3, #0]
 802a244:	f107 0314 	add.w	r3, r7, #20
 802a248:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802a24c:	4619      	mov	r1, r3
 802a24e:	4610      	mov	r0, r2
 802a250:	f7ff fae1 	bl	8029816 <copy_curve>

    // Set the codomain curve from the dim 2 isogeny
    // it should always be the first curve
    copy_curve(&codomain->E2, &codomain_product.E1);
 802a254:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a258:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a25c:	681b      	ldr	r3, [r3, #0]
 802a25e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802a262:	f107 0214 	add.w	r2, r7, #20
 802a266:	4611      	mov	r1, r2
 802a268:	4618      	mov	r0, r3
 802a26a:	f7ff fad4 	bl	8029816 <copy_curve>

    // Set the evaluated basis points
    copy_point(&codomain->B1.P, &Tev1->P2);
 802a26e:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a272:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a276:	681b      	ldr	r3, [r3, #0]
 802a278:	f503 7212 	add.w	r2, r3, #584	@ 0x248
 802a27c:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 802a280:	3390      	adds	r3, #144	@ 0x90
 802a282:	4619      	mov	r1, r3
 802a284:	4610      	mov	r0, r2
 802a286:	f7ff fa8c 	bl	80297a2 <copy_point>
    copy_point(&codomain->B1.Q, &Tev2->P2);
 802a28a:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a28e:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a292:	681b      	ldr	r3, [r3, #0]
 802a294:	f503 7236 	add.w	r2, r3, #728	@ 0x2d8
 802a298:	f8d7 3b88 	ldr.w	r3, [r7, #2952]	@ 0xb88
 802a29c:	3390      	adds	r3, #144	@ 0x90
 802a29e:	4619      	mov	r1, r3
 802a2a0:	4610      	mov	r0, r2
 802a2a2:	f7ff fa7e 	bl	80297a2 <copy_point>
    copy_point(&codomain->B1.PmQ, &Tev1m2->P2);
 802a2a6:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a2aa:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a2ae:	681b      	ldr	r3, [r3, #0]
 802a2b0:	f503 725a 	add.w	r2, r3, #872	@ 0x368
 802a2b4:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 802a2b8:	3390      	adds	r3, #144	@ 0x90
 802a2ba:	4619      	mov	r1, r3
 802a2bc:	4610      	mov	r0, r2
 802a2be:	f7ff fa70 	bl	80297a2 <copy_point>

    copy_point(&codomain->B2.P, &Tev1->P1);
 802a2c2:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a2c6:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a2ca:	681b      	ldr	r3, [r3, #0]
 802a2cc:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 802a2d0:	f8d7 2b8c 	ldr.w	r2, [r7, #2956]	@ 0xb8c
 802a2d4:	4611      	mov	r1, r2
 802a2d6:	4618      	mov	r0, r3
 802a2d8:	f7ff fa63 	bl	80297a2 <copy_point>
    copy_point(&codomain->B2.Q, &Tev2->P1);
 802a2dc:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a2e0:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a2e4:	681b      	ldr	r3, [r3, #0]
 802a2e6:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 802a2ea:	f8d7 2b88 	ldr.w	r2, [r7, #2952]	@ 0xb88
 802a2ee:	4611      	mov	r1, r2
 802a2f0:	4618      	mov	r0, r3
 802a2f2:	f7ff fa56 	bl	80297a2 <copy_point>
    copy_point(&codomain->B2.PmQ, &Tev1m2->P1);
 802a2f6:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 802a2fa:	f6a3 3384 	subw	r3, r3, #2948	@ 0xb84
 802a2fe:	681b      	ldr	r3, [r3, #0]
 802a300:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 802a304:	f8d7 2b84 	ldr.w	r2, [r7, #2948]	@ 0xb84
 802a308:	4611      	mov	r1, r2
 802a30a:	4618      	mov	r0, r3
 802a30c:	f7ff fa49 	bl	80297a2 <copy_point>
    return 1;
 802a310:	2301      	movs	r3, #1
}
 802a312:	4618      	mov	r0, r3
 802a314:	f607 3794 	addw	r7, r7, #2964	@ 0xb94
 802a318:	46bd      	mov	sp, r7
 802a31a:	bd90      	pop	{r4, r7, pc}
 802a31c:	08038cac 	.word	0x08038cac
 802a320:	08038bfc 	.word	0x08038bfc
 802a324:	08038c00 	.word	0x08038c00

0802a328 <compute_small_chain_isogeny_signature>:
compute_small_chain_isogeny_signature(ec_curve_t *E_chall_2,
                                      ec_basis_t *B_chall_2,
                                      const quat_alg_elem_t *resp_quat,
                                      int pow_dim2_deg_resp,
                                      int length)
{
 802a328:	b590      	push	{r4, r7, lr}
 802a32a:	f5ad 7d59 	sub.w	sp, sp, #868	@ 0x364
 802a32e:	af02      	add	r7, sp, #8
 802a330:	f507 7456 	add.w	r4, r7, #856	@ 0x358
 802a334:	f5a4 7453 	sub.w	r4, r4, #844	@ 0x34c
 802a338:	6020      	str	r0, [r4, #0]
 802a33a:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 802a33e:	f5a0 7054 	sub.w	r0, r0, #848	@ 0x350
 802a342:	6001      	str	r1, [r0, #0]
 802a344:	f507 7156 	add.w	r1, r7, #856	@ 0x358
 802a348:	f5a1 7155 	sub.w	r1, r1, #852	@ 0x354
 802a34c:	600a      	str	r2, [r1, #0]
 802a34e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 802a352:	f5a2 7256 	sub.w	r2, r2, #856	@ 0x358
 802a356:	6013      	str	r3, [r2, #0]
    int ret = 1;
 802a358:	2301      	movs	r3, #1
 802a35a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354

    ibz_t two_pow;
    ibz_init(&two_pow);
 802a35e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 802a362:	4618      	mov	r0, r3
 802a364:	f7f2 fe4f 	bl	801d006 <sqisign_gen_ibz_init>

    ibz_vec_2_t vec_resp_two;
    ibz_vec_2_init(&vec_resp_two);
 802a368:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 802a36c:	4618      	mov	r0, r3
 802a36e:	f7e4 fd2e 	bl	800edce <sqisign_gen_ibz_vec_2_init>

    quat_left_ideal_t lideal_resp_two;
    quat_left_ideal_init(&lideal_resp_two);
 802a372:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 802a376:	4618      	mov	r0, r3
 802a378:	f7e4 fe5a 	bl	800f030 <sqisign_gen_quat_left_ideal_init>

    // computing the ideal
    ibz_pow(&two_pow, &ibz_const_two, length);
 802a37c:	f8d7 2368 	ldr.w	r2, [r7, #872]	@ 0x368
 802a380:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 802a384:	4976      	ldr	r1, [pc, #472]	@ (802a560 <compute_small_chain_isogeny_signature+0x238>)
 802a386:	4618      	mov	r0, r3
 802a388:	f7f2 fef6 	bl	801d178 <sqisign_gen_ibz_pow>

    // we compute the generator of the challenge ideal
    quat_lideal_create(&lideal_resp_two, resp_quat, &two_pow, &MAXORD_O0, &QUATALG_PINFTY);
 802a38c:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 802a390:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a394:	f5a3 7155 	sub.w	r1, r3, #852	@ 0x354
 802a398:	f507 7015 	add.w	r0, r7, #596	@ 0x254
 802a39c:	4b71      	ldr	r3, [pc, #452]	@ (802a564 <compute_small_chain_isogeny_signature+0x23c>)
 802a39e:	9300      	str	r3, [sp, #0]
 802a3a0:	4b71      	ldr	r3, [pc, #452]	@ (802a568 <compute_small_chain_isogeny_signature+0x240>)
 802a3a2:	6809      	ldr	r1, [r1, #0]
 802a3a4:	f7f2 f928 	bl	801c5f8 <sqisign_gen_quat_lideal_create>

    // computing the coefficients of the kernel in terms of the basis of O0
    id2iso_ideal_to_kernel_dlogs_even(&vec_resp_two, &lideal_resp_two);
 802a3a8:	f507 7215 	add.w	r2, r7, #596	@ 0x254
 802a3ac:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 802a3b0:	4611      	mov	r1, r2
 802a3b2:	4618      	mov	r0, r3
 802a3b4:	f7f0 ff92 	bl	801b2dc <id2iso_ideal_to_kernel_dlogs_even>

    ec_point_t points[3];
    copy_point(&points[0], &B_chall_2->P);
 802a3b8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a3bc:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a3c0:	681a      	ldr	r2, [r3, #0]
 802a3c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a3c6:	4611      	mov	r1, r2
 802a3c8:	4618      	mov	r0, r3
 802a3ca:	f7ff f9ea 	bl	80297a2 <copy_point>
    copy_point(&points[1], &B_chall_2->Q);
 802a3ce:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a3d2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a3d6:	681b      	ldr	r3, [r3, #0]
 802a3d8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802a3dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a3e0:	3390      	adds	r3, #144	@ 0x90
 802a3e2:	4611      	mov	r1, r2
 802a3e4:	4618      	mov	r0, r3
 802a3e6:	f7ff f9dc 	bl	80297a2 <copy_point>
    copy_point(&points[2], &B_chall_2->PmQ);
 802a3ea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a3ee:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a3f2:	681b      	ldr	r3, [r3, #0]
 802a3f4:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802a3f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a3fc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802a400:	4611      	mov	r1, r2
 802a402:	4618      	mov	r0, r3
 802a404:	f7ff f9cd 	bl	80297a2 <copy_point>

    // getting down to the right order and applying the matrix
    ec_dbl_iter_basis(B_chall_2, pow_dim2_deg_resp + HD_extra_torsion, B_chall_2, E_chall_2);
 802a408:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a40c:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 802a410:	681b      	ldr	r3, [r3, #0]
 802a412:	1c99      	adds	r1, r3, #2
 802a414:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a418:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 802a41c:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 802a420:	f5a2 7254 	sub.w	r2, r2, #848	@ 0x350
 802a424:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 802a428:	f5a0 7054 	sub.w	r0, r0, #848	@ 0x350
 802a42c:	681b      	ldr	r3, [r3, #0]
 802a42e:	6812      	ldr	r2, [r2, #0]
 802a430:	6800      	ldr	r0, [r0, #0]
 802a432:	f7e2 fbdf 	bl	800cbf4 <ec_dbl_iter_basis>
    assert(test_basis_order_twof(B_chall_2, E_chall_2, length));
 802a436:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a43a:	f5a3 7153 	sub.w	r1, r3, #844	@ 0x34c
 802a43e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a442:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a446:	f8d7 2368 	ldr.w	r2, [r7, #872]	@ 0x368
 802a44a:	6809      	ldr	r1, [r1, #0]
 802a44c:	6818      	ldr	r0, [r3, #0]
 802a44e:	f7ff fa67 	bl	8029920 <test_basis_order_twof>
 802a452:	4603      	mov	r3, r0
 802a454:	2b00      	cmp	r3, #0
 802a456:	d106      	bne.n	802a466 <compute_small_chain_isogeny_signature+0x13e>
 802a458:	4b44      	ldr	r3, [pc, #272]	@ (802a56c <compute_small_chain_isogeny_signature+0x244>)
 802a45a:	4a45      	ldr	r2, [pc, #276]	@ (802a570 <compute_small_chain_isogeny_signature+0x248>)
 802a45c:	f240 1151 	movw	r1, #337	@ 0x151
 802a460:	4844      	ldr	r0, [pc, #272]	@ (802a574 <compute_small_chain_isogeny_signature+0x24c>)
 802a462:	f00a fee9 	bl	8035238 <__assert_func>

    ec_point_t ker;
    // applying the vector to find the kernel
    ec_biscalar_mul_ibz_vec(&ker, &vec_resp_two, length, B_chall_2, E_chall_2);
 802a466:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a46a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a46e:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 802a472:	f107 0014 	add.w	r0, r7, #20
 802a476:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 802a47a:	f5a2 7253 	sub.w	r2, r2, #844	@ 0x34c
 802a47e:	6812      	ldr	r2, [r2, #0]
 802a480:	9200      	str	r2, [sp, #0]
 802a482:	681b      	ldr	r3, [r3, #0]
 802a484:	f8d7 2368 	ldr.w	r2, [r7, #872]	@ 0x368
 802a488:	f7f0 feef 	bl	801b26a <ec_biscalar_mul_ibz_vec>
    assert(test_point_order_twof(&ker, E_chall_2, length));
 802a48c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a490:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 802a494:	f107 0014 	add.w	r0, r7, #20
 802a498:	f8d7 2368 	ldr.w	r2, [r7, #872]	@ 0x368
 802a49c:	6819      	ldr	r1, [r3, #0]
 802a49e:	f7ff f9e1 	bl	8029864 <test_point_order_twof>
 802a4a2:	4603      	mov	r3, r0
 802a4a4:	2b00      	cmp	r3, #0
 802a4a6:	d106      	bne.n	802a4b6 <compute_small_chain_isogeny_signature+0x18e>
 802a4a8:	4b33      	ldr	r3, [pc, #204]	@ (802a578 <compute_small_chain_isogeny_signature+0x250>)
 802a4aa:	4a31      	ldr	r2, [pc, #196]	@ (802a570 <compute_small_chain_isogeny_signature+0x248>)
 802a4ac:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 802a4b0:	4830      	ldr	r0, [pc, #192]	@ (802a574 <compute_small_chain_isogeny_signature+0x24c>)
 802a4b2:	f00a fec1 	bl	8035238 <__assert_func>

    // computing the isogeny and pushing the points
    if (ec_eval_small_chain(E_chall_2, &ker, length, points, 3, true)) {
 802a4b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a4ba:	f107 0114 	add.w	r1, r7, #20
 802a4be:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 802a4c2:	f5a2 7053 	sub.w	r0, r2, #844	@ 0x34c
 802a4c6:	2201      	movs	r2, #1
 802a4c8:	9201      	str	r2, [sp, #4]
 802a4ca:	2203      	movs	r2, #3
 802a4cc:	9200      	str	r2, [sp, #0]
 802a4ce:	f8d7 2368 	ldr.w	r2, [r7, #872]	@ 0x368
 802a4d2:	6800      	ldr	r0, [r0, #0]
 802a4d4:	f7f4 f888 	bl	801e5e8 <ec_eval_small_chain>
 802a4d8:	4603      	mov	r3, r0
 802a4da:	2b00      	cmp	r3, #0
 802a4dc:	d002      	beq.n	802a4e4 <compute_small_chain_isogeny_signature+0x1bc>
        ret = 0;
 802a4de:	2300      	movs	r3, #0
 802a4e0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    }

    // copying the result
    copy_point(&B_chall_2->P, &points[0]);
 802a4e4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a4e8:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a4ec:	681b      	ldr	r3, [r3, #0]
 802a4ee:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 802a4f2:	4611      	mov	r1, r2
 802a4f4:	4618      	mov	r0, r3
 802a4f6:	f7ff f954 	bl	80297a2 <copy_point>
    copy_point(&B_chall_2->Q, &points[1]);
 802a4fa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a4fe:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a502:	681b      	ldr	r3, [r3, #0]
 802a504:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802a508:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a50c:	3390      	adds	r3, #144	@ 0x90
 802a50e:	4619      	mov	r1, r3
 802a510:	4610      	mov	r0, r2
 802a512:	f7ff f946 	bl	80297a2 <copy_point>
    copy_point(&B_chall_2->PmQ, &points[2]);
 802a516:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 802a51a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 802a51e:	681b      	ldr	r3, [r3, #0]
 802a520:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802a524:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802a528:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802a52c:	4619      	mov	r1, r3
 802a52e:	4610      	mov	r0, r2
 802a530:	f7ff f937 	bl	80297a2 <copy_point>

    ibz_finalize(&two_pow);
 802a534:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 802a538:	4618      	mov	r0, r3
 802a53a:	f7f2 fd6f 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_vec_2_finalize(&vec_resp_two);
 802a53e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 802a542:	4618      	mov	r0, r3
 802a544:	f7e4 fc54 	bl	800edf0 <sqisign_gen_ibz_vec_2_finalize>
    quat_left_ideal_finalize(&lideal_resp_two);
 802a548:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 802a54c:	4618      	mov	r0, r3
 802a54e:	f7e4 fd84 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>

    return ret;
 802a552:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
}
 802a556:	4618      	mov	r0, r3
 802a558:	f507 7757 	add.w	r7, r7, #860	@ 0x35c
 802a55c:	46bd      	mov	sp, r7
 802a55e:	bd90      	pop	{r4, r7, pc}
 802a560:	0803b90c 	.word	0x0803b90c
 802a564:	0803bf30 	.word	0x0803bf30
 802a568:	0803bf3c 	.word	0x0803bf3c
 802a56c:	08038cf4 	.word	0x08038cf4
 802a570:	08038bfc 	.word	0x08038bfc
 802a574:	08038c00 	.word	0x08038c00
 802a578:	08038d28 	.word	0x08038d28

0802a57c <compute_challenge_codomain_signature>:
compute_challenge_codomain_signature(const signature_t *sig,
                                     secret_key_t *sk,
                                     ec_curve_t *E_chall,
                                     const ec_curve_t *E_chall_2,
                                     ec_basis_t *B_chall_2)
{
 802a57c:	b5b0      	push	{r4, r5, r7, lr}
 802a57e:	f5ad 6d9d 	sub.w	sp, sp, #1256	@ 0x4e8
 802a582:	af02      	add	r7, sp, #8
 802a584:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 802a588:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 802a58c:	6020      	str	r0, [r4, #0]
 802a58e:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 802a592:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 802a596:	6001      	str	r1, [r0, #0]
 802a598:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 802a59c:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 802a5a0:	600a      	str	r2, [r1, #0]
 802a5a2:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 802a5a6:	f5a2 629c 	sub.w	r2, r2, #1248	@ 0x4e0
 802a5aa:	6013      	str	r3, [r2, #0]
    ec_isog_even_t phi_chall;
    ec_basis_t bas_sk;
    copy_basis(&bas_sk, &sk->canonical_basis);
 802a5ac:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a5b0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 802a5b4:	681b      	ldr	r3, [r3, #0]
 802a5b6:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 802a5ba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802a5be:	4611      	mov	r1, r2
 802a5c0:	4618      	mov	r0, r3
 802a5c2:	f7ff f906 	bl	80297d2 <copy_basis>

    phi_chall.curve = sk->curve;
 802a5c6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a5ca:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 802a5ce:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a5d2:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 802a5d6:	681b      	ldr	r3, [r3, #0]
 802a5d8:	4610      	mov	r0, r2
 802a5da:	4619      	mov	r1, r3
 802a5dc:	f44f 7392 	mov.w	r3, #292	@ 0x124
 802a5e0:	461a      	mov	r2, r3
 802a5e2:	f00b fbdc 	bl	8035d9e <memcpy>
    phi_chall.length = TORSION_EVEN_POWER - sig->backtracking;
 802a5e6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a5ea:	f2a3 43d4 	subw	r3, r3, #1236	@ 0x4d4
 802a5ee:	681b      	ldr	r3, [r3, #0]
 802a5f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 802a5f4:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 802a5f8:	461a      	mov	r2, r3
 802a5fa:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a5fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 802a602:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    assert(test_basis_order_twof(&bas_sk, &sk->curve, TORSION_EVEN_POWER));
 802a606:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a60a:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 802a60e:	6819      	ldr	r1, [r3, #0]
 802a610:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802a614:	22f8      	movs	r2, #248	@ 0xf8
 802a616:	4618      	mov	r0, r3
 802a618:	f7ff f982 	bl	8029920 <test_basis_order_twof>
 802a61c:	4603      	mov	r3, r0
 802a61e:	2b00      	cmp	r3, #0
 802a620:	d106      	bne.n	802a630 <compute_challenge_codomain_signature+0xb4>
 802a622:	4b6f      	ldr	r3, [pc, #444]	@ (802a7e0 <compute_challenge_codomain_signature+0x264>)
 802a624:	4a6f      	ldr	r2, [pc, #444]	@ (802a7e4 <compute_challenge_codomain_signature+0x268>)
 802a626:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 802a62a:	486f      	ldr	r0, [pc, #444]	@ (802a7e8 <compute_challenge_codomain_signature+0x26c>)
 802a62c:	f00a fe04 	bl	8035238 <__assert_func>

    // Compute the kernel
    {
        ec_ladder3pt(&phi_chall.kernel, sig->chall_coeff, &bas_sk.P, &bas_sk.Q, &bas_sk.PmQ, &sk->curve);
 802a630:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a634:	f2a3 43d4 	subw	r3, r3, #1236	@ 0x4d4
 802a638:	681b      	ldr	r3, [r3, #0]
 802a63a:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 802a63e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a642:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 802a646:	681b      	ldr	r3, [r3, #0]
 802a648:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 802a64c:	f102 0590 	add.w	r5, r2, #144	@ 0x90
 802a650:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 802a654:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 802a658:	f502 7092 	add.w	r0, r2, #292	@ 0x124
 802a65c:	9301      	str	r3, [sp, #4]
 802a65e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802a662:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802a666:	9300      	str	r3, [sp, #0]
 802a668:	462b      	mov	r3, r5
 802a66a:	4622      	mov	r2, r4
 802a66c:	f7e2 f948 	bl	800c900 <ec_ladder3pt>
    }
    assert(test_point_order_twof(&phi_chall.kernel, &sk->curve, TORSION_EVEN_POWER));
 802a670:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a674:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 802a678:	6819      	ldr	r1, [r3, #0]
 802a67a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802a67e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802a682:	22f8      	movs	r2, #248	@ 0xf8
 802a684:	4618      	mov	r0, r3
 802a686:	f7ff f8ed 	bl	8029864 <test_point_order_twof>
 802a68a:	4603      	mov	r3, r0
 802a68c:	2b00      	cmp	r3, #0
 802a68e:	d106      	bne.n	802a69e <compute_challenge_codomain_signature+0x122>
 802a690:	4b56      	ldr	r3, [pc, #344]	@ (802a7ec <compute_challenge_codomain_signature+0x270>)
 802a692:	4a54      	ldr	r2, [pc, #336]	@ (802a7e4 <compute_challenge_codomain_signature+0x268>)
 802a694:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 802a698:	4853      	ldr	r0, [pc, #332]	@ (802a7e8 <compute_challenge_codomain_signature+0x26c>)
 802a69a:	f00a fdcd 	bl	8035238 <__assert_func>

    // Double kernel to get correct order
    ec_dbl_iter(&phi_chall.kernel, sig->backtracking, &phi_chall.kernel, &sk->curve);
 802a69e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a6a2:	f2a3 43d4 	subw	r3, r3, #1236	@ 0x4d4
 802a6a6:	681b      	ldr	r3, [r3, #0]
 802a6a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 802a6ac:	461c      	mov	r4, r3
 802a6ae:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a6b2:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 802a6b6:	6819      	ldr	r1, [r3, #0]
 802a6b8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802a6bc:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 802a6c0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802a6c4:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 802a6c8:	460b      	mov	r3, r1
 802a6ca:	4621      	mov	r1, r4
 802a6cc:	f7e2 fa20 	bl	800cb10 <ec_dbl_iter>

    assert(test_point_order_twof(&phi_chall.kernel, E_chall, phi_chall.length));
 802a6d0:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a6d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 802a6d8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 802a6dc:	4619      	mov	r1, r3
 802a6de:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a6e2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 802a6e6:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 802a6ea:	f502 7092 	add.w	r0, r2, #292	@ 0x124
 802a6ee:	460a      	mov	r2, r1
 802a6f0:	6819      	ldr	r1, [r3, #0]
 802a6f2:	f7ff f8b7 	bl	8029864 <test_point_order_twof>
 802a6f6:	4603      	mov	r3, r0
 802a6f8:	2b00      	cmp	r3, #0
 802a6fa:	d106      	bne.n	802a70a <compute_challenge_codomain_signature+0x18e>
 802a6fc:	4b3c      	ldr	r3, [pc, #240]	@ (802a7f0 <compute_challenge_codomain_signature+0x274>)
 802a6fe:	4a39      	ldr	r2, [pc, #228]	@ (802a7e4 <compute_challenge_codomain_signature+0x268>)
 802a700:	f240 1181 	movw	r1, #385	@ 0x181
 802a704:	4838      	ldr	r0, [pc, #224]	@ (802a7e8 <compute_challenge_codomain_signature+0x26c>)
 802a706:	f00a fd97 	bl	8035238 <__assert_func>

    // Compute the codomain from challenge isogeny
    if (ec_eval_even(E_chall, &phi_chall, NULL, 0))
 802a70a:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 802a70e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a712:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 802a716:	2300      	movs	r3, #0
 802a718:	2200      	movs	r2, #0
 802a71a:	6800      	ldr	r0, [r0, #0]
 802a71c:	f7f3 ff46 	bl	801e5ac <ec_eval_even>
 802a720:	4603      	mov	r3, r0
 802a722:	2b00      	cmp	r3, #0
 802a724:	d001      	beq.n	802a72a <compute_challenge_codomain_signature+0x1ae>
        return 0;
 802a726:	2300      	movs	r3, #0
 802a728:	e054      	b.n	802a7d4 <compute_challenge_codomain_signature+0x258>

#ifndef NDEBUG
    fp2_t j_chall, j_codomain;
    ec_j_inv(&j_codomain, E_chall_2);
 802a72a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a72e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 802a732:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 802a736:	6819      	ldr	r1, [r3, #0]
 802a738:	4610      	mov	r0, r2
 802a73a:	f7e1 f91a 	bl	800b972 <ec_j_inv>
    ec_j_inv(&j_chall, E_chall);
 802a73e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a742:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 802a746:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802a74a:	6819      	ldr	r1, [r3, #0]
 802a74c:	4610      	mov	r0, r2
 802a74e:	f7e1 f910 	bl	800b972 <ec_j_inv>
    // apparently its always the second one curve
    assert(fp2_is_equal(&j_chall, &j_codomain));
 802a752:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 802a756:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802a75a:	4611      	mov	r1, r2
 802a75c:	4618      	mov	r0, r3
 802a75e:	f7e8 f931 	bl	80129c4 <fp2_is_equal>
 802a762:	4603      	mov	r3, r0
 802a764:	2b00      	cmp	r3, #0
 802a766:	d106      	bne.n	802a776 <compute_challenge_codomain_signature+0x1fa>
 802a768:	4b22      	ldr	r3, [pc, #136]	@ (802a7f4 <compute_challenge_codomain_signature+0x278>)
 802a76a:	4a1e      	ldr	r2, [pc, #120]	@ (802a7e4 <compute_challenge_codomain_signature+0x268>)
 802a76c:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 802a770:	481d      	ldr	r0, [pc, #116]	@ (802a7e8 <compute_challenge_codomain_signature+0x26c>)
 802a772:	f00a fd61 	bl	8035238 <__assert_func>
#endif

    // applying the isomorphism from E_chall_2 to E_chall
    ec_isom_t isom;
    if (ec_isomorphism(&isom, E_chall_2, E_chall))
 802a776:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a77a:	f2a3 42dc 	subw	r2, r3, #1244	@ 0x4dc
 802a77e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 802a782:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 802a786:	f107 0010 	add.w	r0, r7, #16
 802a78a:	6812      	ldr	r2, [r2, #0]
 802a78c:	6819      	ldr	r1, [r3, #0]
 802a78e:	f7f4 f82e 	bl	801e7ee <ec_isomorphism>
 802a792:	4603      	mov	r3, r0
 802a794:	2b00      	cmp	r3, #0
 802a796:	d001      	beq.n	802a79c <compute_challenge_codomain_signature+0x220>
        return 0; // error due to a corner case with 1/p probability
 802a798:	2300      	movs	r3, #0
 802a79a:	e01b      	b.n	802a7d4 <compute_challenge_codomain_signature+0x258>
    ec_iso_eval(&B_chall_2->P, &isom);
 802a79c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 802a7a0:	f107 0210 	add.w	r2, r7, #16
 802a7a4:	4611      	mov	r1, r2
 802a7a6:	4618      	mov	r0, r3
 802a7a8:	f7f4 fa5f 	bl	801ec6a <ec_iso_eval>
    ec_iso_eval(&B_chall_2->Q, &isom);
 802a7ac:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 802a7b0:	3390      	adds	r3, #144	@ 0x90
 802a7b2:	f107 0210 	add.w	r2, r7, #16
 802a7b6:	4611      	mov	r1, r2
 802a7b8:	4618      	mov	r0, r3
 802a7ba:	f7f4 fa56 	bl	801ec6a <ec_iso_eval>
    ec_iso_eval(&B_chall_2->PmQ, &isom);
 802a7be:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 802a7c2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802a7c6:	f107 0210 	add.w	r2, r7, #16
 802a7ca:	4611      	mov	r1, r2
 802a7cc:	4618      	mov	r0, r3
 802a7ce:	f7f4 fa4c 	bl	801ec6a <ec_iso_eval>

    return 1;
 802a7d2:	2301      	movs	r3, #1
}
 802a7d4:	4618      	mov	r0, r3
 802a7d6:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 802a7da:	46bd      	mov	sp, r7
 802a7dc:	bdb0      	pop	{r4, r5, r7, pc}
 802a7de:	bf00      	nop
 802a7e0:	08038d58 	.word	0x08038d58
 802a7e4:	08038bfc 	.word	0x08038bfc
 802a7e8:	08038c00 	.word	0x08038c00
 802a7ec:	08038d98 	.word	0x08038d98
 802a7f0:	08038de4 	.word	0x08038de4
 802a7f4:	08038e28 	.word	0x08038e28

0802a7f8 <set_aux_curve_signature>:

static void
set_aux_curve_signature(signature_t *sig, ec_curve_t *E_aux)
{
 802a7f8:	b580      	push	{r7, lr}
 802a7fa:	b082      	sub	sp, #8
 802a7fc:	af00      	add	r7, sp, #0
 802a7fe:	6078      	str	r0, [r7, #4]
 802a800:	6039      	str	r1, [r7, #0]
    ec_normalize_curve(E_aux);
 802a802:	6838      	ldr	r0, [r7, #0]
 802a804:	f7e0 fe72 	bl	800b4ec <ec_normalize_curve>
    fp2_copy(&sig->E_aux_A, &E_aux->A);
 802a808:	687b      	ldr	r3, [r7, #4]
 802a80a:	683a      	ldr	r2, [r7, #0]
 802a80c:	4611      	mov	r1, r2
 802a80e:	4618      	mov	r0, r3
 802a810:	f7e8 f90c 	bl	8012a2c <fp2_copy>
}
 802a814:	bf00      	nop
 802a816:	3708      	adds	r7, #8
 802a818:	46bd      	mov	sp, r7
 802a81a:	bd80      	pop	{r7, pc}

0802a81c <compute_and_set_basis_change_matrix>:
                                    const ec_basis_t *B_aux_2,
                                    ec_basis_t *B_chall_2,
                                    ec_curve_t *E_aux_2,
                                    ec_curve_t *E_chall,
                                    int f)
{
 802a81c:	b5b0      	push	{r4, r5, r7, lr}
 802a81e:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 802a822:	af02      	add	r7, sp, #8
 802a824:	f507 6483 	add.w	r4, r7, #1048	@ 0x418
 802a828:	f2a4 440c 	subw	r4, r4, #1036	@ 0x40c
 802a82c:	6020      	str	r0, [r4, #0]
 802a82e:	f507 6083 	add.w	r0, r7, #1048	@ 0x418
 802a832:	f5a0 6082 	sub.w	r0, r0, #1040	@ 0x410
 802a836:	6001      	str	r1, [r0, #0]
 802a838:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 802a83c:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 802a840:	600a      	str	r2, [r1, #0]
 802a842:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 802a846:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 802a84a:	6013      	str	r3, [r2, #0]
    // Matrices for change of bases matrices
    ibz_mat_2x2_t mat_Baux2_to_Baux2_can, mat_Bchall_can_to_Bchall;
    ibz_mat_2x2_init(&mat_Baux2_to_Baux2_can);
 802a84c:	f507 737a 	add.w	r3, r7, #1000	@ 0x3e8
 802a850:	4618      	mov	r0, r3
 802a852:	f7e4 fb16 	bl	800ee82 <sqisign_gen_ibz_mat_2x2_init>
    ibz_mat_2x2_init(&mat_Bchall_can_to_Bchall);
 802a856:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802a85a:	4618      	mov	r0, r3
 802a85c:	f7e4 fb11 	bl	800ee82 <sqisign_gen_ibz_mat_2x2_init>

    // Compute canonical bases
    ec_basis_t B_can_chall, B_aux_2_can;
    sig->hint_chall = ec_curve_to_basis_2f_to_hint(&B_can_chall, E_chall, TORSION_EVEN_POWER);
 802a860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802a864:	22f8      	movs	r2, #248	@ 0xf8
 802a866:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 802a86a:	4618      	mov	r0, r3
 802a86c:	f7d7 ff02 	bl	8002674 <ec_curve_to_basis_2f_to_hint>
 802a870:	4603      	mov	r3, r0
 802a872:	461a      	mov	r2, r3
 802a874:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a878:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802a87c:	681b      	ldr	r3, [r3, #0]
 802a87e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    sig->hint_aux = ec_curve_to_basis_2f_to_hint(&B_aux_2_can, E_aux_2, TORSION_EVEN_POWER);
 802a882:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a886:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 802a88a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 802a88e:	22f8      	movs	r2, #248	@ 0xf8
 802a890:	6819      	ldr	r1, [r3, #0]
 802a892:	f7d7 feef 	bl	8002674 <ec_curve_to_basis_2f_to_hint>
 802a896:	4603      	mov	r3, r0
 802a898:	461a      	mov	r2, r3
 802a89a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a89e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802a8a2:	681b      	ldr	r3, [r3, #0]
 802a8a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

#ifndef NDEBUG
    {
        // Ensure all points have the desired order
        assert(test_basis_order_twof(&B_aux_2_can, E_aux_2, TORSION_EVEN_POWER));
 802a8a8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a8ac:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 802a8b0:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 802a8b4:	22f8      	movs	r2, #248	@ 0xf8
 802a8b6:	6819      	ldr	r1, [r3, #0]
 802a8b8:	f7ff f832 	bl	8029920 <test_basis_order_twof>
 802a8bc:	4603      	mov	r3, r0
 802a8be:	2b00      	cmp	r3, #0
 802a8c0:	d106      	bne.n	802a8d0 <compute_and_set_basis_change_matrix+0xb4>
 802a8c2:	4b9a      	ldr	r3, [pc, #616]	@ (802ab2c <compute_and_set_basis_change_matrix+0x310>)
 802a8c4:	4a9a      	ldr	r2, [pc, #616]	@ (802ab30 <compute_and_set_basis_change_matrix+0x314>)
 802a8c6:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 802a8ca:	489a      	ldr	r0, [pc, #616]	@ (802ab34 <compute_and_set_basis_change_matrix+0x318>)
 802a8cc:	f00a fcb4 	bl	8035238 <__assert_func>
        assert(test_basis_order_twof(B_aux_2, E_aux_2, f));
 802a8d0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a8d4:	f5a3 6183 	sub.w	r1, r3, #1048	@ 0x418
 802a8d8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a8dc:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 802a8e0:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 802a8e4:	6809      	ldr	r1, [r1, #0]
 802a8e6:	6818      	ldr	r0, [r3, #0]
 802a8e8:	f7ff f81a 	bl	8029920 <test_basis_order_twof>
 802a8ec:	4603      	mov	r3, r0
 802a8ee:	2b00      	cmp	r3, #0
 802a8f0:	d106      	bne.n	802a900 <compute_and_set_basis_change_matrix+0xe4>
 802a8f2:	4b91      	ldr	r3, [pc, #580]	@ (802ab38 <compute_and_set_basis_change_matrix+0x31c>)
 802a8f4:	4a8e      	ldr	r2, [pc, #568]	@ (802ab30 <compute_and_set_basis_change_matrix+0x314>)
 802a8f6:	f240 11b7 	movw	r1, #439	@ 0x1b7
 802a8fa:	488e      	ldr	r0, [pc, #568]	@ (802ab34 <compute_and_set_basis_change_matrix+0x318>)
 802a8fc:	f00a fc9c 	bl	8035238 <__assert_func>
        fp2_t w0;
        weil(&w0, f, &B_aux_2->P, &B_aux_2->Q, &B_aux_2->PmQ, E_aux_2);
 802a900:	f8d7 142c 	ldr.w	r1, [r7, #1068]	@ 0x42c
 802a904:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a908:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 802a90c:	681c      	ldr	r4, [r3, #0]
 802a90e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a912:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 802a916:	681b      	ldr	r3, [r3, #0]
 802a918:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 802a91c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a920:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 802a924:	681b      	ldr	r3, [r3, #0]
 802a926:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802a92a:	f107 0010 	add.w	r0, r7, #16
 802a92e:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 802a932:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 802a936:	6812      	ldr	r2, [r2, #0]
 802a938:	9201      	str	r2, [sp, #4]
 802a93a:	9300      	str	r3, [sp, #0]
 802a93c:	462b      	mov	r3, r5
 802a93e:	4622      	mov	r2, r4
 802a940:	f7d8 fe52 	bl	80035e8 <weil>
    }
#endif

    // compute the matrix to go from B_aux_2 to B_aux_2_can
    change_of_basis_matrix_tate_invert(&mat_Baux2_to_Baux2_can, &B_aux_2_can, B_aux_2, E_aux_2, f);
 802a944:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a948:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 802a94c:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 802a950:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 802a954:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 802a958:	f507 707a 	add.w	r0, r7, #1000	@ 0x3e8
 802a95c:	f8d7 142c 	ldr.w	r1, [r7, #1068]	@ 0x42c
 802a960:	9100      	str	r1, [sp, #0]
 802a962:	681b      	ldr	r3, [r3, #0]
 802a964:	6812      	ldr	r2, [r2, #0]
 802a966:	4621      	mov	r1, r4
 802a968:	f7f1 fd0b 	bl	801c382 <change_of_basis_matrix_tate_invert>

    // apply the change of basis to B_chall_2
    matrix_application_even_basis(B_chall_2, E_chall, &mat_Baux2_to_Baux2_can, f);
 802a96c:	f507 727a 	add.w	r2, r7, #1000	@ 0x3e8
 802a970:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a974:	f2a3 4014 	subw	r0, r3, #1044	@ 0x414
 802a978:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 802a97c:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 802a980:	6800      	ldr	r0, [r0, #0]
 802a982:	f7f0 fe67 	bl	801b654 <matrix_application_even_basis>

#ifndef NDEBUG
    {
        // Ensure all points have the desired order
        assert(test_basis_order_twof(&B_can_chall, E_chall, TORSION_EVEN_POWER));
 802a986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802a98a:	22f8      	movs	r2, #248	@ 0xf8
 802a98c:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 802a990:	4618      	mov	r0, r3
 802a992:	f7fe ffc5 	bl	8029920 <test_basis_order_twof>
 802a996:	4603      	mov	r3, r0
 802a998:	2b00      	cmp	r3, #0
 802a99a:	d106      	bne.n	802a9aa <compute_and_set_basis_change_matrix+0x18e>
 802a99c:	4b67      	ldr	r3, [pc, #412]	@ (802ab3c <compute_and_set_basis_change_matrix+0x320>)
 802a99e:	4a64      	ldr	r2, [pc, #400]	@ (802ab30 <compute_and_set_basis_change_matrix+0x314>)
 802a9a0:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 802a9a4:	4863      	ldr	r0, [pc, #396]	@ (802ab34 <compute_and_set_basis_change_matrix+0x318>)
 802a9a6:	f00a fc47 	bl	8035238 <__assert_func>
    }
#endif

    // compute the matrix to go from B_chall_can to B_chall_2
    change_of_basis_matrix_tate(&mat_Bchall_can_to_Bchall, B_chall_2, &B_can_chall, E_chall, f);
 802a9aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 802a9ae:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802a9b2:	f2a3 4114 	subw	r1, r3, #1044	@ 0x414
 802a9b6:	f507 706e 	add.w	r0, r7, #952	@ 0x3b8
 802a9ba:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 802a9be:	9300      	str	r3, [sp, #0]
 802a9c0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 802a9c4:	6809      	ldr	r1, [r1, #0]
 802a9c6:	f7f1 fcc7 	bl	801c358 <change_of_basis_matrix_tate>

    // Assert all values in the matrix are of the expected size for packing
    assert(ibz_bitsize(&mat_Bchall_can_to_Bchall[0][0]) <= SQIsign_response_length + HD_extra_torsion);
 802a9ca:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802a9ce:	4618      	mov	r0, r3
 802a9d0:	f7f2 fdc2 	bl	801d558 <sqisign_gen_ibz_bitsize>
 802a9d4:	4603      	mov	r3, r0
 802a9d6:	2b80      	cmp	r3, #128	@ 0x80
 802a9d8:	dd06      	ble.n	802a9e8 <compute_and_set_basis_change_matrix+0x1cc>
 802a9da:	4b59      	ldr	r3, [pc, #356]	@ (802ab40 <compute_and_set_basis_change_matrix+0x324>)
 802a9dc:	4a54      	ldr	r2, [pc, #336]	@ (802ab30 <compute_and_set_basis_change_matrix+0x314>)
 802a9de:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 802a9e2:	4854      	ldr	r0, [pc, #336]	@ (802ab34 <compute_and_set_basis_change_matrix+0x318>)
 802a9e4:	f00a fc28 	bl	8035238 <__assert_func>
    assert(ibz_bitsize(&mat_Bchall_can_to_Bchall[0][1]) <= SQIsign_response_length + HD_extra_torsion);
 802a9e8:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802a9ec:	330c      	adds	r3, #12
 802a9ee:	4618      	mov	r0, r3
 802a9f0:	f7f2 fdb2 	bl	801d558 <sqisign_gen_ibz_bitsize>
 802a9f4:	4603      	mov	r3, r0
 802a9f6:	2b80      	cmp	r3, #128	@ 0x80
 802a9f8:	dd06      	ble.n	802aa08 <compute_and_set_basis_change_matrix+0x1ec>
 802a9fa:	4b52      	ldr	r3, [pc, #328]	@ (802ab44 <compute_and_set_basis_change_matrix+0x328>)
 802a9fc:	4a4c      	ldr	r2, [pc, #304]	@ (802ab30 <compute_and_set_basis_change_matrix+0x314>)
 802a9fe:	f240 11cf 	movw	r1, #463	@ 0x1cf
 802aa02:	484c      	ldr	r0, [pc, #304]	@ (802ab34 <compute_and_set_basis_change_matrix+0x318>)
 802aa04:	f00a fc18 	bl	8035238 <__assert_func>
    assert(ibz_bitsize(&mat_Bchall_can_to_Bchall[1][0]) <= SQIsign_response_length + HD_extra_torsion);
 802aa08:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802aa0c:	3318      	adds	r3, #24
 802aa0e:	4618      	mov	r0, r3
 802aa10:	f7f2 fda2 	bl	801d558 <sqisign_gen_ibz_bitsize>
 802aa14:	4603      	mov	r3, r0
 802aa16:	2b80      	cmp	r3, #128	@ 0x80
 802aa18:	dd06      	ble.n	802aa28 <compute_and_set_basis_change_matrix+0x20c>
 802aa1a:	4b4b      	ldr	r3, [pc, #300]	@ (802ab48 <compute_and_set_basis_change_matrix+0x32c>)
 802aa1c:	4a44      	ldr	r2, [pc, #272]	@ (802ab30 <compute_and_set_basis_change_matrix+0x314>)
 802aa1e:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 802aa22:	4844      	ldr	r0, [pc, #272]	@ (802ab34 <compute_and_set_basis_change_matrix+0x318>)
 802aa24:	f00a fc08 	bl	8035238 <__assert_func>
    assert(ibz_bitsize(&mat_Bchall_can_to_Bchall[1][1]) <= SQIsign_response_length + HD_extra_torsion);
 802aa28:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802aa2c:	3324      	adds	r3, #36	@ 0x24
 802aa2e:	4618      	mov	r0, r3
 802aa30:	f7f2 fd92 	bl	801d558 <sqisign_gen_ibz_bitsize>
 802aa34:	4603      	mov	r3, r0
 802aa36:	2b80      	cmp	r3, #128	@ 0x80
 802aa38:	dd06      	ble.n	802aa48 <compute_and_set_basis_change_matrix+0x22c>
 802aa3a:	4b44      	ldr	r3, [pc, #272]	@ (802ab4c <compute_and_set_basis_change_matrix+0x330>)
 802aa3c:	4a3c      	ldr	r2, [pc, #240]	@ (802ab30 <compute_and_set_basis_change_matrix+0x314>)
 802aa3e:	f240 11d1 	movw	r1, #465	@ 0x1d1
 802aa42:	483c      	ldr	r0, [pc, #240]	@ (802ab34 <compute_and_set_basis_change_matrix+0x318>)
 802aa44:	f00a fbf8 	bl	8035238 <__assert_func>

    // Set the basis change matrix to signature
    ibz_to_digit_array(sig->mat_Bchall_can_to_B_chall[0][0], &(mat_Bchall_can_to_Bchall[0][0]));
 802aa48:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aa4c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aa50:	681b      	ldr	r3, [r3, #0]
 802aa52:	334c      	adds	r3, #76	@ 0x4c
 802aa54:	2220      	movs	r2, #32
 802aa56:	2100      	movs	r1, #0
 802aa58:	4618      	mov	r0, r3
 802aa5a:	f00b f8d1 	bl	8035c00 <memset>
 802aa5e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aa62:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aa66:	681b      	ldr	r3, [r3, #0]
 802aa68:	334c      	adds	r3, #76	@ 0x4c
 802aa6a:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 802aa6e:	4611      	mov	r1, r2
 802aa70:	4618      	mov	r0, r3
 802aa72:	f7f2 fd95 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ibz_to_digit_array(sig->mat_Bchall_can_to_B_chall[0][1], &(mat_Bchall_can_to_Bchall[0][1]));
 802aa76:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aa7a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aa7e:	681b      	ldr	r3, [r3, #0]
 802aa80:	336c      	adds	r3, #108	@ 0x6c
 802aa82:	2220      	movs	r2, #32
 802aa84:	2100      	movs	r1, #0
 802aa86:	4618      	mov	r0, r3
 802aa88:	f00b f8ba 	bl	8035c00 <memset>
 802aa8c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aa90:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aa94:	681b      	ldr	r3, [r3, #0]
 802aa96:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 802aa9a:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802aa9e:	330c      	adds	r3, #12
 802aaa0:	4619      	mov	r1, r3
 802aaa2:	4610      	mov	r0, r2
 802aaa4:	f7f2 fd7c 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ibz_to_digit_array(sig->mat_Bchall_can_to_B_chall[1][0], &(mat_Bchall_can_to_Bchall[1][0]));
 802aaa8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aaac:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aab0:	681b      	ldr	r3, [r3, #0]
 802aab2:	338c      	adds	r3, #140	@ 0x8c
 802aab4:	2220      	movs	r2, #32
 802aab6:	2100      	movs	r1, #0
 802aab8:	4618      	mov	r0, r3
 802aaba:	f00b f8a1 	bl	8035c00 <memset>
 802aabe:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aac2:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aac6:	681b      	ldr	r3, [r3, #0]
 802aac8:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 802aacc:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802aad0:	3318      	adds	r3, #24
 802aad2:	4619      	mov	r1, r3
 802aad4:	4610      	mov	r0, r2
 802aad6:	f7f2 fd63 	bl	801d5a0 <sqisign_gen_ibz_to_digits>
    ibz_to_digit_array(sig->mat_Bchall_can_to_B_chall[1][1], &(mat_Bchall_can_to_Bchall[1][1]));
 802aada:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aade:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aae2:	681b      	ldr	r3, [r3, #0]
 802aae4:	33ac      	adds	r3, #172	@ 0xac
 802aae6:	2220      	movs	r2, #32
 802aae8:	2100      	movs	r1, #0
 802aaea:	4618      	mov	r0, r3
 802aaec:	f00b f888 	bl	8035c00 <memset>
 802aaf0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 802aaf4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 802aaf8:	681b      	ldr	r3, [r3, #0]
 802aafa:	f103 02ac 	add.w	r2, r3, #172	@ 0xac
 802aafe:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802ab02:	3324      	adds	r3, #36	@ 0x24
 802ab04:	4619      	mov	r1, r3
 802ab06:	4610      	mov	r0, r2
 802ab08:	f7f2 fd4a 	bl	801d5a0 <sqisign_gen_ibz_to_digits>

    // Finalise the matrices
    ibz_mat_2x2_finalize(&mat_Bchall_can_to_Bchall);
 802ab0c:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 802ab10:	4618      	mov	r0, r3
 802ab12:	f7e4 f9e2 	bl	800eeda <sqisign_gen_ibz_mat_2x2_finalize>
    ibz_mat_2x2_finalize(&mat_Baux2_to_Baux2_can);
 802ab16:	f507 737a 	add.w	r3, r7, #1000	@ 0x3e8
 802ab1a:	4618      	mov	r0, r3
 802ab1c:	f7e4 f9dd 	bl	800eeda <sqisign_gen_ibz_mat_2x2_finalize>
}
 802ab20:	bf00      	nop
 802ab22:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 802ab26:	46bd      	mov	sp, r7
 802ab28:	bdb0      	pop	{r4, r5, r7, pc}
 802ab2a:	bf00      	nop
 802ab2c:	08038e4c 	.word	0x08038e4c
 802ab30:	08038bfc 	.word	0x08038bfc
 802ab34:	08038c00 	.word	0x08038c00
 802ab38:	08038e90 	.word	0x08038e90
 802ab3c:	08038ebc 	.word	0x08038ebc
 802ab40:	08038f00 	.word	0x08038f00
 802ab44:	08038f5c 	.word	0x08038f5c
 802ab48:	08038fb8 	.word	0x08038fb8
 802ab4c:	08039014 	.word	0x08039014

0802ab50 <protocols_sign>:

int
protocols_sign(signature_t *sig, const public_key_t *pk, secret_key_t *sk, const unsigned char *m, size_t l)
{
 802ab50:	b5b0      	push	{r4, r5, r7, lr}
 802ab52:	f5ad 6d7a 	sub.w	sp, sp, #4000	@ 0xfa0
 802ab56:	af04      	add	r7, sp, #16
 802ab58:	f507 6479 	add.w	r4, r7, #3984	@ 0xf90
 802ab5c:	f6a4 7484 	subw	r4, r4, #3972	@ 0xf84
 802ab60:	6020      	str	r0, [r4, #0]
 802ab62:	f507 6079 	add.w	r0, r7, #3984	@ 0xf90
 802ab66:	f6a0 7088 	subw	r0, r0, #3976	@ 0xf88
 802ab6a:	6001      	str	r1, [r0, #0]
 802ab6c:	f507 6179 	add.w	r1, r7, #3984	@ 0xf90
 802ab70:	f6a1 718c 	subw	r1, r1, #3980	@ 0xf8c
 802ab74:	600a      	str	r2, [r1, #0]
 802ab76:	f507 6279 	add.w	r2, r7, #3984	@ 0xf90
 802ab7a:	f5a2 6279 	sub.w	r2, r2, #3984	@ 0xf90
 802ab7e:	6013      	str	r3, [r2, #0]
    int ret = 0;
 802ab80:	2300      	movs	r3, #0
 802ab82:	f8c7 3f8c 	str.w	r3, [r7, #3980]	@ 0xf8c
    int reduced_order = 0; // work around false positive gcc warning
 802ab86:	2300      	movs	r3, #0
 802ab88:	f8c7 3f88 	str.w	r3, [r7, #3976]	@ 0xf88

    uint_fast8_t pow_dim2_deg_resp;
    assert(SQIsign_response_length <= (intmax_t)UINT_FAST8_MAX); // otherwise we might need more bits there

    ibz_t remain, lattice_content, random_aux_norm, degree_resp_inv;
    ibz_init(&remain);
 802ab8c:	f607 7378 	addw	r3, r7, #3960	@ 0xf78
 802ab90:	4618      	mov	r0, r3
 802ab92:	f7f2 fa38 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&lattice_content);
 802ab96:	f607 736c 	addw	r3, r7, #3948	@ 0xf6c
 802ab9a:	4618      	mov	r0, r3
 802ab9c:	f7f2 fa33 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&random_aux_norm);
 802aba0:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 802aba4:	4618      	mov	r0, r3
 802aba6:	f7f2 fa2e 	bl	801d006 <sqisign_gen_ibz_init>
    ibz_init(&degree_resp_inv);
 802abaa:	f607 7354 	addw	r3, r7, #3924	@ 0xf54
 802abae:	4618      	mov	r0, r3
 802abb0:	f7f2 fa29 	bl	801d006 <sqisign_gen_ibz_init>

    quat_alg_elem_t resp_quat;
    quat_alg_elem_init(&resp_quat);
 802abb4:	f607 7318 	addw	r3, r7, #3864	@ 0xf18
 802abb8:	4618      	mov	r0, r3
 802abba:	f7e4 f8e1 	bl	800ed80 <sqisign_gen_quat_alg_elem_init>

    quat_left_ideal_t lideal_commit, lideal_com_resp;
    quat_left_ideal_init(&lideal_commit);
 802abbe:	f607 633c 	addw	r3, r7, #3644	@ 0xe3c
 802abc2:	4618      	mov	r0, r3
 802abc4:	f7e4 fa34 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    quat_left_ideal_init(&lideal_com_resp);
 802abc8:	f507 6356 	add.w	r3, r7, #3424	@ 0xd60
 802abcc:	4618      	mov	r0, r3
 802abce:	f7e4 fa2f 	bl	800f030 <sqisign_gen_quat_left_ideal_init>
    // This structure holds two curves E1 x E2 together with a basis
    // Bi of Ei[2^n]
    theta_couple_curve_with_basis_t Eaux2_Echall2;

    // This will hold the challenge curve
    ec_curve_t E_chall = sk->curve;
 802abd2:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802abd6:	f6a3 62a4 	subw	r2, r3, #3748	@ 0xea4
 802abda:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802abde:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 802abe2:	681b      	ldr	r3, [r3, #0]
 802abe4:	4610      	mov	r0, r2
 802abe6:	4619      	mov	r1, r3
 802abe8:	f44f 7392 	mov.w	r3, #292	@ 0x124
 802abec:	461a      	mov	r2, r3
 802abee:	f00b f8d6 	bl	8035d9e <memcpy>

    ec_curve_init(&Ecom_Eaux.E1);
 802abf2:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802abf6:	4618      	mov	r0, r3
 802abf8:	f7e0 fc0f 	bl	800b41a <ec_curve_init>
    ec_curve_init(&Ecom_Eaux.E2);
 802abfc:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ac00:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802ac04:	4618      	mov	r0, r3
 802ac06:	f7e0 fc08 	bl	800b41a <ec_curve_init>

    while (!ret) {
 802ac0a:	e1ab      	b.n	802af64 <protocols_sign+0x414>

        // computing the commitment
        ret = commit(&Ecom_Eaux.E1, &Ecom_Eaux.B1, &lideal_commit);
 802ac0c:	f607 623c 	addw	r2, r7, #3644	@ 0xe3c
 802ac10:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ac14:	f503 7112 	add.w	r1, r3, #584	@ 0x248
 802ac18:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ac1c:	4618      	mov	r0, r3
 802ac1e:	f7fe fec5 	bl	80299ac <commit>
 802ac22:	4603      	mov	r3, r0
 802ac24:	f8c7 3f8c 	str.w	r3, [r7, #3980]	@ 0xf8c

        // start again if the commitment generation has failed
        if (!ret) {
 802ac28:	f8d7 3f8c 	ldr.w	r3, [r7, #3980]	@ 0xf8c
 802ac2c:	2b00      	cmp	r3, #0
 802ac2e:	f000 8196 	beq.w	802af5e <protocols_sign+0x40e>
            continue;
        }

        // Hash the message to a kernel generator
        // i.e. a scalar such that ker = P + [s]Q
        hash_to_challenge(&sig->chall_coeff, pk, &Ecom_Eaux.E1, m, l);
 802ac32:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ac36:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802ac3a:	681b      	ldr	r3, [r3, #0]
 802ac3c:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 802ac40:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ac44:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 802ac48:	f507 64f7 	add.w	r4, r7, #1976	@ 0x7b8
 802ac4c:	f507 6279 	add.w	r2, r7, #3984	@ 0xf90
 802ac50:	f6a2 7188 	subw	r1, r2, #3976	@ 0xf88
 802ac54:	f8d7 2fa0 	ldr.w	r2, [r7, #4000]	@ 0xfa0
 802ac58:	9200      	str	r2, [sp, #0]
 802ac5a:	681b      	ldr	r3, [r3, #0]
 802ac5c:	4622      	mov	r2, r4
 802ac5e:	6809      	ldr	r1, [r1, #0]
 802ac60:	f7d9 fe1a 	bl	8004898 <hash_to_challenge>
        // Compute the challenge ideal and response quaternion element
        {
            quat_left_ideal_t lideal_chall_two;
            quat_left_ideal_init(&lideal_chall_two);
 802ac64:	f107 0310 	add.w	r3, r7, #16
 802ac68:	4618      	mov	r0, r3
 802ac6a:	f7e4 f9e1 	bl	800f030 <sqisign_gen_quat_left_ideal_init>

            // computing the challenge ideal
            compute_challenge_ideal_signature(&lideal_chall_two, sig, sk);
 802ac6e:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ac72:	f6a3 728c 	subw	r2, r3, #3980	@ 0xf8c
 802ac76:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ac7a:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802ac7e:	f107 0010 	add.w	r0, r7, #16
 802ac82:	6812      	ldr	r2, [r2, #0]
 802ac84:	6819      	ldr	r1, [r3, #0]
 802ac86:	f7fe fed9 	bl	8029a3c <compute_challenge_ideal_signature>
            compute_response_quat_element(&resp_quat, &lattice_content, sk, &lideal_chall_two, &lideal_commit);
 802ac8a:	f107 0410 	add.w	r4, r7, #16
 802ac8e:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ac92:	f6a3 728c 	subw	r2, r3, #3980	@ 0xf8c
 802ac96:	f607 716c 	addw	r1, r7, #3948	@ 0xf6c
 802ac9a:	f607 7018 	addw	r0, r7, #3864	@ 0xf18
 802ac9e:	f607 633c 	addw	r3, r7, #3644	@ 0xe3c
 802aca2:	9300      	str	r3, [sp, #0]
 802aca4:	4623      	mov	r3, r4
 802aca6:	6812      	ldr	r2, [r2, #0]
 802aca8:	f7fe ff5c 	bl	8029b64 <compute_response_quat_element>

            // Clean up
            quat_left_ideal_finalize(&lideal_chall_two);
 802acac:	f107 0310 	add.w	r3, r7, #16
 802acb0:	4618      	mov	r0, r3
 802acb2:	f7e4 f9d2 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
        }

        // computing the amount of backtracking we're making
        // and removing it
        compute_backtracking_signature(sig, &resp_quat, &lattice_content, &remain);
 802acb6:	f607 7378 	addw	r3, r7, #3960	@ 0xf78
 802acba:	f607 726c 	addw	r2, r7, #3948	@ 0xf6c
 802acbe:	f607 7118 	addw	r1, r7, #3864	@ 0xf18
 802acc2:	f507 6079 	add.w	r0, r7, #3984	@ 0xf90
 802acc6:	f6a0 7084 	subw	r0, r0, #3972	@ 0xf84
 802acca:	6800      	ldr	r0, [r0, #0]
 802accc:	f7fe ffc6 	bl	8029c5c <compute_backtracking_signature>

        // creating lideal_com * lideal_resp
        // we first compute the norm of lideal_resp
        // norm of the resp_quat
        pow_dim2_deg_resp = compute_random_aux_norm_and_helpers(sig,
 802acd0:	f607 7478 	addw	r4, r7, #3960	@ 0xf78
 802acd4:	f607 7254 	addw	r2, r7, #3924	@ 0xf54
 802acd8:	f507 6176 	add.w	r1, r7, #3936	@ 0xf60
 802acdc:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ace0:	f6a3 7084 	subw	r0, r3, #3972	@ 0xf84
 802ace4:	f607 633c 	addw	r3, r7, #3644	@ 0xe3c
 802ace8:	9303      	str	r3, [sp, #12]
 802acea:	f507 6356 	add.w	r3, r7, #3424	@ 0xd60
 802acee:	9302      	str	r3, [sp, #8]
 802acf0:	f607 7318 	addw	r3, r7, #3864	@ 0xf18
 802acf4:	9301      	str	r3, [sp, #4]
 802acf6:	f607 736c 	addw	r3, r7, #3948	@ 0xf6c
 802acfa:	9300      	str	r3, [sp, #0]
 802acfc:	4623      	mov	r3, r4
 802acfe:	6800      	ldr	r0, [r0, #0]
 802ad00:	f7ff f80c 	bl	8029d1c <compute_random_aux_norm_and_helpers>
 802ad04:	f8c7 0f84 	str.w	r0, [r7, #3972]	@ 0xf84
        // notational conventions:
        // B0 = canonical basis of E0
        // B_com = image through commitment isogeny (odd degree) of canonical basis of E0
        // B_aux = image through aux_resp_com isogeny (odd degree) of canonical basis of E0

        if (pow_dim2_deg_resp > 0) {
 802ad08:	f8d7 3f84 	ldr.w	r3, [r7, #3972]	@ 0xf84
 802ad0c:	2b00      	cmp	r3, #0
 802ad0e:	f000 8090 	beq.w	802ae32 <protocols_sign+0x2e2>
            // Evaluate the random aux ideal on the curve E0 and its basis to find E_aux and B_aux
            ret =
                evaluate_random_aux_isogeny_signature(&Ecom_Eaux.E2, &Ecom_Eaux.B2, &random_aux_norm, &lideal_com_resp);
 802ad12:	f507 6456 	add.w	r4, r7, #3424	@ 0xd60
 802ad16:	f507 6276 	add.w	r2, r7, #3936	@ 0xf60
 802ad1a:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ad1e:	f503 717e 	add.w	r1, r3, #1016	@ 0x3f8
 802ad22:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ad26:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 802ad2a:	4623      	mov	r3, r4
 802ad2c:	f7ff f8ee 	bl	8029f0c <evaluate_random_aux_isogeny_signature>
 802ad30:	f8c7 0f8c 	str.w	r0, [r7, #3980]	@ 0xf8c

            // auxiliary isogeny computation failed we must start again
            if (!ret) {
 802ad34:	f8d7 3f8c 	ldr.w	r3, [r7, #3980]	@ 0xf8c
 802ad38:	2b00      	cmp	r3, #0
 802ad3a:	f000 8112 	beq.w	802af62 <protocols_sign+0x412>
                continue;
            }

#ifndef NDEBUG
            // testing that the order of the points in the bases is as expected
            assert(test_basis_order_twof(&Ecom_Eaux.B1, &Ecom_Eaux.E1, TORSION_EVEN_POWER));
 802ad3e:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 802ad42:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ad46:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 802ad4a:	22f8      	movs	r2, #248	@ 0xf8
 802ad4c:	4618      	mov	r0, r3
 802ad4e:	f7fe fde7 	bl	8029920 <test_basis_order_twof>
 802ad52:	4603      	mov	r3, r0
 802ad54:	2b00      	cmp	r3, #0
 802ad56:	d106      	bne.n	802ad66 <protocols_sign+0x216>
 802ad58:	4bab      	ldr	r3, [pc, #684]	@ (802b008 <protocols_sign+0x4b8>)
 802ad5a:	4aac      	ldr	r2, [pc, #688]	@ (802b00c <protocols_sign+0x4bc>)
 802ad5c:	f44f 710f 	mov.w	r1, #572	@ 0x23c
 802ad60:	48ab      	ldr	r0, [pc, #684]	@ (802b010 <protocols_sign+0x4c0>)
 802ad62:	f00a fa69 	bl	8035238 <__assert_func>
            assert(test_basis_order_twof(&Ecom_Eaux.B2, &Ecom_Eaux.E2, TORSION_EVEN_POWER));
 802ad66:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ad6a:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 802ad6e:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ad72:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 802ad76:	22f8      	movs	r2, #248	@ 0xf8
 802ad78:	4618      	mov	r0, r3
 802ad7a:	f7fe fdd1 	bl	8029920 <test_basis_order_twof>
 802ad7e:	4603      	mov	r3, r0
 802ad80:	2b00      	cmp	r3, #0
 802ad82:	d106      	bne.n	802ad92 <protocols_sign+0x242>
 802ad84:	4ba3      	ldr	r3, [pc, #652]	@ (802b014 <protocols_sign+0x4c4>)
 802ad86:	4aa1      	ldr	r2, [pc, #644]	@ (802b00c <protocols_sign+0x4bc>)
 802ad88:	f240 213d 	movw	r1, #573	@ 0x23d
 802ad8c:	48a0      	ldr	r0, [pc, #640]	@ (802b010 <protocols_sign+0x4c0>)
 802ad8e:	f00a fa53 	bl	8035238 <__assert_func>
#endif

            // applying the matrix to compute Baux
            // first, we reduce to the relevant order
            reduced_order = pow_dim2_deg_resp + HD_extra_torsion + sig->two_resp_length;
 802ad92:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ad96:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802ad9a:	681b      	ldr	r3, [r3, #0]
 802ad9c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 802ada0:	461a      	mov	r2, r3
 802ada2:	f8d7 3f84 	ldr.w	r3, [r7, #3972]	@ 0xf84
 802ada6:	4413      	add	r3, r2
 802ada8:	3302      	adds	r3, #2
 802adaa:	f8c7 3f88 	str.w	r3, [r7, #3976]	@ 0xf88
            ec_dbl_iter_basis(&Ecom_Eaux.B1, TORSION_EVEN_POWER - reduced_order, &Ecom_Eaux.B1, &Ecom_Eaux.E1);
 802adae:	f8d7 3f88 	ldr.w	r3, [r7, #3976]	@ 0xf88
 802adb2:	f1c3 01f8 	rsb	r1, r3, #248	@ 0xf8
 802adb6:	f507 64f7 	add.w	r4, r7, #1976	@ 0x7b8
 802adba:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802adbe:	f503 7212 	add.w	r2, r3, #584	@ 0x248
 802adc2:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802adc6:	f503 7012 	add.w	r0, r3, #584	@ 0x248
 802adca:	4623      	mov	r3, r4
 802adcc:	f7e1 ff12 	bl	800cbf4 <ec_dbl_iter_basis>
            ec_dbl_iter_basis(&Ecom_Eaux.B2, TORSION_EVEN_POWER - reduced_order, &Ecom_Eaux.B2, &Ecom_Eaux.E2);
 802add0:	f8d7 3f88 	ldr.w	r3, [r7, #3976]	@ 0xf88
 802add4:	f1c3 01f8 	rsb	r1, r3, #248	@ 0xf8
 802add8:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802addc:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 802ade0:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ade4:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 802ade8:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802adec:	f503 707e 	add.w	r0, r3, #1016	@ 0x3f8
 802adf0:	4623      	mov	r3, r4
 802adf2:	f7e1 feff 	bl	800cbf4 <ec_dbl_iter_basis>
            // and codomain
            // E_aux_2 x E_chall_2 (note: E_chall_2 is isomorphic to E_chall)
            // and evaluated points stored as bases in
            // B_aux_2 on E_aux_2
            // B_chall_2 on E_chall_2
            ret = compute_dim2_isogeny_challenge(
 802adf6:	f8d7 4f84 	ldr.w	r4, [r7, #3972]	@ 0xf84
                &Eaux2_Echall2, &Ecom_Eaux, &degree_resp_inv, pow_dim2_deg_resp, sig->two_resp_length, reduced_order);
 802adfa:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802adfe:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802ae02:	681b      	ldr	r3, [r3, #0]
 802ae04:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
            ret = compute_dim2_isogeny_challenge(
 802ae08:	461d      	mov	r5, r3
 802ae0a:	f607 7254 	addw	r2, r7, #3924	@ 0xf54
 802ae0e:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 802ae12:	f507 7004 	add.w	r0, r7, #528	@ 0x210
 802ae16:	f8d7 3f88 	ldr.w	r3, [r7, #3976]	@ 0xf88
 802ae1a:	9301      	str	r3, [sp, #4]
 802ae1c:	9500      	str	r5, [sp, #0]
 802ae1e:	4623      	mov	r3, r4
 802ae20:	f7ff f8dc 	bl	8029fdc <compute_dim2_isogeny_challenge>
 802ae24:	f8c7 0f8c 	str.w	r0, [r7, #3980]	@ 0xf8c
            if (!ret)
 802ae28:	f8d7 3f8c 	ldr.w	r3, [r7, #3980]	@ 0xf8c
 802ae2c:	2b00      	cmp	r3, #0
 802ae2e:	d149      	bne.n	802aec4 <protocols_sign+0x374>
                continue;
 802ae30:	e098      	b.n	802af64 <protocols_sign+0x414>
        } else {
            // No 2d isogeny needed, so simulate a "Kani matrix" identity here
            copy_curve(&Eaux2_Echall2.E1, &Ecom_Eaux.E1);
 802ae32:	f507 62f7 	add.w	r2, r7, #1976	@ 0x7b8
 802ae36:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802ae3a:	4611      	mov	r1, r2
 802ae3c:	4618      	mov	r0, r3
 802ae3e:	f7fe fcea 	bl	8029816 <copy_curve>
            copy_curve(&Eaux2_Echall2.E2, &Ecom_Eaux.E1);
 802ae42:	f507 62f7 	add.w	r2, r7, #1976	@ 0x7b8
 802ae46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802ae4a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802ae4e:	4611      	mov	r1, r2
 802ae50:	4618      	mov	r0, r3
 802ae52:	f7fe fce0 	bl	8029816 <copy_curve>

            reduced_order = sig->two_resp_length;
 802ae56:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802ae5a:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802ae5e:	681b      	ldr	r3, [r3, #0]
 802ae60:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 802ae64:	f8c7 3f88 	str.w	r3, [r7, #3976]	@ 0xf88
            ec_dbl_iter_basis(&Eaux2_Echall2.B1, TORSION_EVEN_POWER - reduced_order, &Ecom_Eaux.B1, &Ecom_Eaux.E1);
 802ae68:	f8d7 3f88 	ldr.w	r3, [r7, #3976]	@ 0xf88
 802ae6c:	f1c3 01f8 	rsb	r1, r3, #248	@ 0xf8
 802ae70:	f507 64f7 	add.w	r4, r7, #1976	@ 0x7b8
 802ae74:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ae78:	f503 7212 	add.w	r2, r3, #584	@ 0x248
 802ae7c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802ae80:	f503 7012 	add.w	r0, r3, #584	@ 0x248
 802ae84:	4623      	mov	r3, r4
 802ae86:	f7e1 feb5 	bl	800cbf4 <ec_dbl_iter_basis>
            ec_dbl_iter_basis(&Eaux2_Echall2.B1, TORSION_EVEN_POWER - reduced_order, &Ecom_Eaux.B1, &Ecom_Eaux.E1);
 802ae8a:	f8d7 3f88 	ldr.w	r3, [r7, #3976]	@ 0xf88
 802ae8e:	f1c3 01f8 	rsb	r1, r3, #248	@ 0xf8
 802ae92:	f507 64f7 	add.w	r4, r7, #1976	@ 0x7b8
 802ae96:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 802ae9a:	f503 7212 	add.w	r2, r3, #584	@ 0x248
 802ae9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802aea2:	f503 7012 	add.w	r0, r3, #584	@ 0x248
 802aea6:	4623      	mov	r3, r4
 802aea8:	f7e1 fea4 	bl	800cbf4 <ec_dbl_iter_basis>
            copy_basis(&Eaux2_Echall2.B2, &Eaux2_Echall2.B1);
 802aeac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802aeb0:	f503 7212 	add.w	r2, r3, #584	@ 0x248
 802aeb4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802aeb8:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 802aebc:	4611      	mov	r1, r2
 802aebe:	4618      	mov	r0, r3
 802aec0:	f7fe fc87 	bl	80297d2 <copy_basis>
        }

        // computation of the remaining small chain of two isogenies when needed
        if (sig->two_resp_length > 0) {
 802aec4:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802aec8:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802aecc:	681b      	ldr	r3, [r3, #0]
 802aece:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 802aed2:	2b00      	cmp	r3, #0
 802aed4:	d021      	beq.n	802af1a <protocols_sign+0x3ca>
            if (!compute_small_chain_isogeny_signature(
 802aed6:	f8d7 4f84 	ldr.w	r4, [r7, #3972]	@ 0xf84
                    &Eaux2_Echall2.E2, &Eaux2_Echall2.B2, &resp_quat, pow_dim2_deg_resp, sig->two_resp_length)) {
 802aeda:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802aede:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802aee2:	681b      	ldr	r3, [r3, #0]
 802aee4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
            if (!compute_small_chain_isogeny_signature(
 802aee8:	461d      	mov	r5, r3
 802aeea:	f607 7218 	addw	r2, r7, #3864	@ 0xf18
 802aeee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802aef2:	f503 717e 	add.w	r1, r3, #1016	@ 0x3f8
 802aef6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802aefa:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 802aefe:	9500      	str	r5, [sp, #0]
 802af00:	4623      	mov	r3, r4
 802af02:	f7ff fa11 	bl	802a328 <compute_small_chain_isogeny_signature>
 802af06:	4603      	mov	r3, r0
 802af08:	2b00      	cmp	r3, #0
 802af0a:	d106      	bne.n	802af1a <protocols_sign+0x3ca>
                assert(0); // this shouldn't fail
 802af0c:	4b42      	ldr	r3, [pc, #264]	@ (802b018 <protocols_sign+0x4c8>)
 802af0e:	4a3f      	ldr	r2, [pc, #252]	@ (802b00c <protocols_sign+0x4bc>)
 802af10:	f44f 7118 	mov.w	r1, #608	@ 0x260
 802af14:	483e      	ldr	r0, [pc, #248]	@ (802b010 <protocols_sign+0x4c0>)
 802af16:	f00a f98f 	bl	8035238 <__assert_func>
            }
        }

        // computation of the challenge codomain
        if (!compute_challenge_codomain_signature(sig, sk, &E_chall, &Eaux2_Echall2.E2, &Eaux2_Echall2.B2))
 802af1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802af1e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 802af22:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 802af26:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802af2a:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 802af2e:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802af32:	f6a3 7084 	subw	r0, r3, #3972	@ 0xf84
 802af36:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802af3a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 802af3e:	9300      	str	r3, [sp, #0]
 802af40:	4623      	mov	r3, r4
 802af42:	6809      	ldr	r1, [r1, #0]
 802af44:	6800      	ldr	r0, [r0, #0]
 802af46:	f7ff fb19 	bl	802a57c <compute_challenge_codomain_signature>
 802af4a:	4603      	mov	r3, r0
 802af4c:	2b00      	cmp	r3, #0
 802af4e:	d109      	bne.n	802af64 <protocols_sign+0x414>
            assert(0); // this shouldn't fail
 802af50:	4b31      	ldr	r3, [pc, #196]	@ (802b018 <protocols_sign+0x4c8>)
 802af52:	4a2e      	ldr	r2, [pc, #184]	@ (802b00c <protocols_sign+0x4bc>)
 802af54:	f240 2166 	movw	r1, #614	@ 0x266
 802af58:	482d      	ldr	r0, [pc, #180]	@ (802b010 <protocols_sign+0x4c0>)
 802af5a:	f00a f96d 	bl	8035238 <__assert_func>
            continue;
 802af5e:	bf00      	nop
 802af60:	e000      	b.n	802af64 <protocols_sign+0x414>
                continue;
 802af62:	bf00      	nop
    while (!ret) {
 802af64:	f8d7 3f8c 	ldr.w	r3, [r7, #3980]	@ 0xf8c
 802af68:	2b00      	cmp	r3, #0
 802af6a:	f43f ae4f 	beq.w	802ac0c <protocols_sign+0xbc>
    }

    // Set to the signature the Montgomery A-coefficient of E_aux_2
    set_aux_curve_signature(sig, &Eaux2_Echall2.E1);
 802af6e:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 802af72:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802af76:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 802af7a:	4611      	mov	r1, r2
 802af7c:	6818      	ldr	r0, [r3, #0]
 802af7e:	f7ff fc3b 	bl	802a7f8 <set_aux_curve_signature>

    // Set the basis change matrix from canonical bases to the supplied bases
    compute_and_set_basis_change_matrix(
 802af82:	f507 7404 	add.w	r4, r7, #528	@ 0x210
 802af86:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802af8a:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 802af8e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802af92:	f503 7112 	add.w	r1, r3, #584	@ 0x248
 802af96:	f507 6379 	add.w	r3, r7, #3984	@ 0xf90
 802af9a:	f6a3 7084 	subw	r0, r3, #3972	@ 0xf84
 802af9e:	f8d7 3f88 	ldr.w	r3, [r7, #3976]	@ 0xf88
 802afa2:	9301      	str	r3, [sp, #4]
 802afa4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 802afa8:	9300      	str	r3, [sp, #0]
 802afaa:	4623      	mov	r3, r4
 802afac:	6800      	ldr	r0, [r0, #0]
 802afae:	f7ff fc35 	bl	802a81c <compute_and_set_basis_change_matrix>
        sig, &Eaux2_Echall2.B1, &Eaux2_Echall2.B2, &Eaux2_Echall2.E1, &E_chall, reduced_order);

    quat_alg_elem_finalize(&resp_quat);
 802afb2:	f607 7318 	addw	r3, r7, #3864	@ 0xf18
 802afb6:	4618      	mov	r0, r3
 802afb8:	f7e3 fef8 	bl	800edac <sqisign_gen_quat_alg_elem_finalize>
    quat_left_ideal_finalize(&lideal_commit);
 802afbc:	f607 633c 	addw	r3, r7, #3644	@ 0xe3c
 802afc0:	4618      	mov	r0, r3
 802afc2:	f7e4 f84a 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>
    quat_left_ideal_finalize(&lideal_com_resp);
 802afc6:	f507 6356 	add.w	r3, r7, #3424	@ 0xd60
 802afca:	4618      	mov	r0, r3
 802afcc:	f7e4 f845 	bl	800f05a <sqisign_gen_quat_left_ideal_finalize>

    ibz_finalize(&lattice_content);
 802afd0:	f607 736c 	addw	r3, r7, #3948	@ 0xf6c
 802afd4:	4618      	mov	r0, r3
 802afd6:	f7f2 f821 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&remain);
 802afda:	f607 7378 	addw	r3, r7, #3960	@ 0xf78
 802afde:	4618      	mov	r0, r3
 802afe0:	f7f2 f81c 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&degree_resp_inv);
 802afe4:	f607 7354 	addw	r3, r7, #3924	@ 0xf54
 802afe8:	4618      	mov	r0, r3
 802afea:	f7f2 f817 	bl	801d01c <sqisign_gen_ibz_finalize>
    ibz_finalize(&random_aux_norm);
 802afee:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 802aff2:	4618      	mov	r0, r3
 802aff4:	f7f2 f812 	bl	801d01c <sqisign_gen_ibz_finalize>

    return ret;
 802aff8:	f8d7 3f8c 	ldr.w	r3, [r7, #3980]	@ 0xf8c
}
 802affc:	4618      	mov	r0, r3
 802affe:	f507 6779 	add.w	r7, r7, #3984	@ 0xf90
 802b002:	46bd      	mov	sp, r7
 802b004:	bdb0      	pop	{r4, r5, r7, pc}
 802b006:	bf00      	nop
 802b008:	08039070 	.word	0x08039070
 802b00c:	08038bfc 	.word	0x08038bfc
 802b010:	08038c00 	.word	0x08038c00
 802b014:	080390b8 	.word	0x080390b8
 802b018:	08039100 	.word	0x08039100

0802b01c <sqisign_keypair>:

#if defined(ENABLE_SIGN)
SQISIGN_API
int
sqisign_keypair(unsigned char *pk, unsigned char *sk)
{
 802b01c:	b580      	push	{r7, lr}
 802b01e:	f5ad 6da3 	sub.w	sp, sp, #1304	@ 0x518
 802b022:	af00      	add	r7, sp, #0
 802b024:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802b028:	f2a3 5314 	subw	r3, r3, #1300	@ 0x514
 802b02c:	6018      	str	r0, [r3, #0]
 802b02e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802b032:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 802b036:	6019      	str	r1, [r3, #0]
    int ret = 0;
 802b038:	2300      	movs	r3, #0
 802b03a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    secret_key_t skt;
    public_key_t pkt = { 0 };
 802b03e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802b042:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 802b046:	4618      	mov	r0, r3
 802b048:	f44f 7394 	mov.w	r3, #296	@ 0x128
 802b04c:	461a      	mov	r2, r3
 802b04e:	2100      	movs	r1, #0
 802b050:	f00a fdd6 	bl	8035c00 <memset>
    secret_key_init(&skt);
 802b054:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 802b058:	4618      	mov	r0, r3
 802b05a:	f7f3 fef6 	bl	801ee4a <secret_key_init>

    ret = !protocols_keygen(&pkt, &skt);
 802b05e:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 802b062:	f107 030c 	add.w	r3, r7, #12
 802b066:	4611      	mov	r1, r2
 802b068:	4618      	mov	r0, r3
 802b06a:	f7f3 ff1b 	bl	801eea4 <protocols_keygen>
 802b06e:	4603      	mov	r3, r0
 802b070:	2b00      	cmp	r3, #0
 802b072:	bf0c      	ite	eq
 802b074:	2301      	moveq	r3, #1
 802b076:	2300      	movne	r3, #0
 802b078:	b2db      	uxtb	r3, r3
 802b07a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514

    secret_key_to_bytes(sk, &skt, &pkt);
 802b07e:	f107 020c 	add.w	r2, r7, #12
 802b082:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 802b086:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802b08a:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 802b08e:	6818      	ldr	r0, [r3, #0]
 802b090:	f7e3 f8d2 	bl	800e238 <secret_key_to_bytes>
    public_key_to_bytes(pk, &pkt);
 802b094:	f107 020c 	add.w	r2, r7, #12
 802b098:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802b09c:	f2a3 5314 	subw	r3, r3, #1300	@ 0x514
 802b0a0:	4611      	mov	r1, r2
 802b0a2:	6818      	ldr	r0, [r3, #0]
 802b0a4:	f7e3 fb52 	bl	800e74c <public_key_to_bytes>
    secret_key_finalize(&skt);
 802b0a8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 802b0ac:	4618      	mov	r0, r3
 802b0ae:	f7f3 fee4 	bl	801ee7a <secret_key_finalize>
    return ret;
 802b0b2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
}
 802b0b6:	4618      	mov	r0, r3
 802b0b8:	f507 67a3 	add.w	r7, r7, #1304	@ 0x518
 802b0bc:	46bd      	mov	sp, r7
 802b0be:	bd80      	pop	{r7, pc}

0802b0c0 <sqisign_sign>:
sqisign_sign(unsigned char *sm,
             unsigned long long *smlen,
             const unsigned char *m,
             unsigned long long mlen,
             const unsigned char *sk)
{
 802b0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b0c2:	f2ad 6d1c 	subw	sp, sp, #1564	@ 0x61c
 802b0c6:	af02      	add	r7, sp, #8
 802b0c8:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b0cc:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 802b0d0:	6018      	str	r0, [r3, #0]
 802b0d2:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b0d6:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 802b0da:	6019      	str	r1, [r3, #0]
 802b0dc:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b0e0:	f2a3 630c 	subw	r3, r3, #1548	@ 0x60c
 802b0e4:	601a      	str	r2, [r3, #0]
    int ret = 0;
 802b0e6:	2300      	movs	r3, #0
 802b0e8:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
    secret_key_t skt;
    public_key_t pkt = { 0 };
 802b0ec:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b0f0:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 802b0f4:	4618      	mov	r0, r3
 802b0f6:	f44f 7394 	mov.w	r3, #296	@ 0x128
 802b0fa:	461a      	mov	r2, r3
 802b0fc:	2100      	movs	r1, #0
 802b0fe:	f00a fd7f 	bl	8035c00 <memset>
    signature_t sigt;
    secret_key_init(&skt);
 802b102:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 802b106:	4618      	mov	r0, r3
 802b108:	f7f3 fe9f 	bl	801ee4a <secret_key_init>
    secret_key_from_bytes(&skt, &pkt, sk);
 802b10c:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 802b110:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 802b114:	f8d7 2630 	ldr.w	r2, [r7, #1584]	@ 0x630
 802b118:	4618      	mov	r0, r3
 802b11a:	f7e3 f977 	bl	800e40c <secret_key_from_bytes>

    memmove(sm + SIGNATURE_BYTES, m, mlen);
 802b11e:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b122:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 802b126:	681b      	ldr	r3, [r3, #0]
 802b128:	f103 0094 	add.w	r0, r3, #148	@ 0x94
 802b12c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 802b130:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b134:	f2a3 630c 	subw	r3, r3, #1548	@ 0x60c
 802b138:	6819      	ldr	r1, [r3, #0]
 802b13a:	f00a fd47 	bl	8035bcc <memmove>

    ret = !protocols_sign(&sigt, &pkt, &skt, sm + SIGNATURE_BYTES, mlen);
 802b13e:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b142:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 802b146:	681b      	ldr	r3, [r3, #0]
 802b148:	f103 0694 	add.w	r6, r3, #148	@ 0x94
 802b14c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 802b150:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 802b154:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 802b158:	f107 0014 	add.w	r0, r7, #20
 802b15c:	9300      	str	r3, [sp, #0]
 802b15e:	4633      	mov	r3, r6
 802b160:	f7ff fcf6 	bl	802ab50 <protocols_sign>
 802b164:	4603      	mov	r3, r0
 802b166:	2b00      	cmp	r3, #0
 802b168:	bf0c      	ite	eq
 802b16a:	2301      	moveq	r3, #1
 802b16c:	2300      	movne	r3, #0
 802b16e:	b2db      	uxtb	r3, r3
 802b170:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
    if (ret != 0) {
 802b174:	f8d7 360c 	ldr.w	r3, [r7, #1548]	@ 0x60c
 802b178:	2b00      	cmp	r3, #0
 802b17a:	d00b      	beq.n	802b194 <sqisign_sign+0xd4>
        *smlen = 0;
 802b17c:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b180:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 802b184:	6819      	ldr	r1, [r3, #0]
 802b186:	f04f 0200 	mov.w	r2, #0
 802b18a:	f04f 0300 	mov.w	r3, #0
 802b18e:	e9c1 2300 	strd	r2, r3, [r1]
        goto err;
 802b192:	e018      	b.n	802b1c6 <sqisign_sign+0x106>
    }

    signature_to_bytes(sm, &sigt);
 802b194:	f107 0214 	add.w	r2, r7, #20
 802b198:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b19c:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 802b1a0:	4611      	mov	r1, r2
 802b1a2:	6818      	ldr	r0, [r3, #0]
 802b1a4:	f7e3 fb26 	bl	800e7f4 <signature_to_bytes>
    *smlen = SIGNATURE_BYTES + mlen;
 802b1a8:	f507 63c5 	add.w	r3, r7, #1576	@ 0x628
 802b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b1b0:	f112 0494 	adds.w	r4, r2, #148	@ 0x94
 802b1b4:	f143 0500 	adc.w	r5, r3, #0
 802b1b8:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 802b1bc:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 802b1c0:	681b      	ldr	r3, [r3, #0]
 802b1c2:	e9c3 4500 	strd	r4, r5, [r3]

err:
    secret_key_finalize(&skt);
 802b1c6:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 802b1ca:	4618      	mov	r0, r3
 802b1cc:	f7f3 fe55 	bl	801ee7a <secret_key_finalize>
    return ret;
 802b1d0:	f8d7 360c 	ldr.w	r3, [r7, #1548]	@ 0x60c
}
 802b1d4:	4618      	mov	r0, r3
 802b1d6:	f207 6714 	addw	r7, r7, #1556	@ 0x614
 802b1da:	46bd      	mov	sp, r7
 802b1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b1de <sqisign_open>:
sqisign_open(unsigned char *m,
             unsigned long long *mlen,
             const unsigned char *sm,
             unsigned long long smlen,
             const unsigned char *pk)
{
 802b1de:	b5b0      	push	{r4, r5, r7, lr}
 802b1e0:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 802b1e4:	af00      	add	r7, sp, #0
 802b1e6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b1ea:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802b1ee:	6018      	str	r0, [r3, #0]
 802b1f0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b1f4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 802b1f8:	6019      	str	r1, [r3, #0]
 802b1fa:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b1fe:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 802b202:	601a      	str	r2, [r3, #0]
    int ret = 0;
 802b204:	2300      	movs	r3, #0
 802b206:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    public_key_t pkt = { 0 };
 802b20a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b20e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802b212:	4618      	mov	r0, r3
 802b214:	f44f 7394 	mov.w	r3, #296	@ 0x128
 802b218:	461a      	mov	r2, r3
 802b21a:	2100      	movs	r1, #0
 802b21c:	f00a fcf0 	bl	8035c00 <memset>
    signature_t sigt;

    public_key_from_bytes(&pkt, pk);
 802b220:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 802b224:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 802b228:	4618      	mov	r0, r3
 802b22a:	f7e3 fab9 	bl	800e7a0 <public_key_from_bytes>
    signature_from_bytes(&sigt, sm);
 802b22e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b232:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 802b236:	f107 0214 	add.w	r2, r7, #20
 802b23a:	6819      	ldr	r1, [r3, #0]
 802b23c:	4610      	mov	r0, r2
 802b23e:	f7e3 fb53 	bl	800e8e8 <signature_from_bytes>

    ret = !protocols_verify(&sigt, &pkt, sm + SIGNATURE_BYTES, smlen - SIGNATURE_BYTES);
 802b242:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b246:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 802b24a:	681b      	ldr	r3, [r3, #0]
 802b24c:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 802b250:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 802b254:	3b94      	subs	r3, #148	@ 0x94
 802b256:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 802b25a:	f107 0014 	add.w	r0, r7, #20
 802b25e:	f006 fa3f 	bl	80316e0 <protocols_verify>
 802b262:	4603      	mov	r3, r0
 802b264:	2b00      	cmp	r3, #0
 802b266:	bf0c      	ite	eq
 802b268:	2301      	moveq	r3, #1
 802b26a:	2300      	movne	r3, #0
 802b26c:	b2db      	uxtb	r3, r3
 802b26e:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

    if (!ret) {
 802b272:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 802b276:	2b00      	cmp	r3, #0
 802b278:	d122      	bne.n	802b2c0 <sqisign_open+0xe2>
        *mlen = smlen - SIGNATURE_BYTES;
 802b27a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 802b27e:	f1b2 0494 	subs.w	r4, r2, #148	@ 0x94
 802b282:	f143 35ff 	adc.w	r5, r3, #4294967295
 802b286:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b28a:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 802b28e:	681b      	ldr	r3, [r3, #0]
 802b290:	e9c3 4500 	strd	r4, r5, [r3]
        memmove(m, sm + SIGNATURE_BYTES, *mlen);
 802b294:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b298:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 802b29c:	681b      	ldr	r3, [r3, #0]
 802b29e:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 802b2a2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b2a6:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 802b2aa:	681b      	ldr	r3, [r3, #0]
 802b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b2b4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802b2b8:	6818      	ldr	r0, [r3, #0]
 802b2ba:	f00a fc87 	bl	8035bcc <memmove>
 802b2be:	e016      	b.n	802b2ee <sqisign_open+0x110>
    } else {
        *mlen = 0;
 802b2c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b2c4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 802b2c8:	6819      	ldr	r1, [r3, #0]
 802b2ca:	f04f 0200 	mov.w	r2, #0
 802b2ce:	f04f 0300 	mov.w	r3, #0
 802b2d2:	e9c1 2300 	strd	r2, r3, [r1]
        memset(m, 0, smlen - SIGNATURE_BYTES);
 802b2d6:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 802b2da:	f1a3 0294 	sub.w	r2, r3, #148	@ 0x94
 802b2de:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 802b2e2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802b2e6:	2100      	movs	r1, #0
 802b2e8:	6818      	ldr	r0, [r3, #0]
 802b2ea:	f00a fc89 	bl	8035c00 <memset>
    }

    return ret;
 802b2ee:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
}
 802b2f2:	4618      	mov	r0, r3
 802b2f4:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 802b2f8:	46bd      	mov	sp, r7
 802b2fa:	bdb0      	pop	{r4, r5, r7, pc}

0802b2fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802b2fc:	b480      	push	{r7}
 802b2fe:	b083      	sub	sp, #12
 802b300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802b302:	2300      	movs	r3, #0
 802b304:	607b      	str	r3, [r7, #4]
 802b306:	4b10      	ldr	r3, [pc, #64]	@ (802b348 <HAL_MspInit+0x4c>)
 802b308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b30a:	4a0f      	ldr	r2, [pc, #60]	@ (802b348 <HAL_MspInit+0x4c>)
 802b30c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802b310:	6453      	str	r3, [r2, #68]	@ 0x44
 802b312:	4b0d      	ldr	r3, [pc, #52]	@ (802b348 <HAL_MspInit+0x4c>)
 802b314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802b31a:	607b      	str	r3, [r7, #4]
 802b31c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802b31e:	2300      	movs	r3, #0
 802b320:	603b      	str	r3, [r7, #0]
 802b322:	4b09      	ldr	r3, [pc, #36]	@ (802b348 <HAL_MspInit+0x4c>)
 802b324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b326:	4a08      	ldr	r2, [pc, #32]	@ (802b348 <HAL_MspInit+0x4c>)
 802b328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802b32c:	6413      	str	r3, [r2, #64]	@ 0x40
 802b32e:	4b06      	ldr	r3, [pc, #24]	@ (802b348 <HAL_MspInit+0x4c>)
 802b330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802b336:	603b      	str	r3, [r7, #0]
 802b338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802b33a:	bf00      	nop
 802b33c:	370c      	adds	r7, #12
 802b33e:	46bd      	mov	sp, r7
 802b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b344:	4770      	bx	lr
 802b346:	bf00      	nop
 802b348:	40023800 	.word	0x40023800

0802b34c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802b34c:	b580      	push	{r7, lr}
 802b34e:	b08a      	sub	sp, #40	@ 0x28
 802b350:	af00      	add	r7, sp, #0
 802b352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b354:	f107 0314 	add.w	r3, r7, #20
 802b358:	2200      	movs	r2, #0
 802b35a:	601a      	str	r2, [r3, #0]
 802b35c:	605a      	str	r2, [r3, #4]
 802b35e:	609a      	str	r2, [r3, #8]
 802b360:	60da      	str	r2, [r3, #12]
 802b362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 802b364:	687b      	ldr	r3, [r7, #4]
 802b366:	681b      	ldr	r3, [r3, #0]
 802b368:	4a29      	ldr	r2, [pc, #164]	@ (802b410 <HAL_I2C_MspInit+0xc4>)
 802b36a:	4293      	cmp	r3, r2
 802b36c:	d14b      	bne.n	802b406 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802b36e:	2300      	movs	r3, #0
 802b370:	613b      	str	r3, [r7, #16]
 802b372:	4b28      	ldr	r3, [pc, #160]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b376:	4a27      	ldr	r2, [pc, #156]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b378:	f043 0304 	orr.w	r3, r3, #4
 802b37c:	6313      	str	r3, [r2, #48]	@ 0x30
 802b37e:	4b25      	ldr	r3, [pc, #148]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b382:	f003 0304 	and.w	r3, r3, #4
 802b386:	613b      	str	r3, [r7, #16]
 802b388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b38a:	2300      	movs	r3, #0
 802b38c:	60fb      	str	r3, [r7, #12]
 802b38e:	4b21      	ldr	r3, [pc, #132]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b392:	4a20      	ldr	r2, [pc, #128]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b394:	f043 0301 	orr.w	r3, r3, #1
 802b398:	6313      	str	r3, [r2, #48]	@ 0x30
 802b39a:	4b1e      	ldr	r3, [pc, #120]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b39e:	f003 0301 	and.w	r3, r3, #1
 802b3a2:	60fb      	str	r3, [r7, #12]
 802b3a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 802b3a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802b3aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b3ac:	2312      	movs	r3, #18
 802b3ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b3b0:	2301      	movs	r3, #1
 802b3b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b3b4:	2300      	movs	r3, #0
 802b3b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802b3b8:	2304      	movs	r3, #4
 802b3ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 802b3bc:	f107 0314 	add.w	r3, r7, #20
 802b3c0:	4619      	mov	r1, r3
 802b3c2:	4815      	ldr	r0, [pc, #84]	@ (802b418 <HAL_I2C_MspInit+0xcc>)
 802b3c4:	f007 fb5a 	bl	8032a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 802b3c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802b3cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802b3ce:	2312      	movs	r3, #18
 802b3d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802b3d2:	2301      	movs	r3, #1
 802b3d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b3d6:	2300      	movs	r3, #0
 802b3d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802b3da:	2304      	movs	r3, #4
 802b3dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 802b3de:	f107 0314 	add.w	r3, r7, #20
 802b3e2:	4619      	mov	r1, r3
 802b3e4:	480d      	ldr	r0, [pc, #52]	@ (802b41c <HAL_I2C_MspInit+0xd0>)
 802b3e6:	f007 fb49 	bl	8032a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 802b3ea:	2300      	movs	r3, #0
 802b3ec:	60bb      	str	r3, [r7, #8]
 802b3ee:	4b09      	ldr	r3, [pc, #36]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b3f2:	4a08      	ldr	r2, [pc, #32]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b3f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802b3f8:	6413      	str	r3, [r2, #64]	@ 0x40
 802b3fa:	4b06      	ldr	r3, [pc, #24]	@ (802b414 <HAL_I2C_MspInit+0xc8>)
 802b3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b3fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802b402:	60bb      	str	r3, [r7, #8]
 802b404:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 802b406:	bf00      	nop
 802b408:	3728      	adds	r7, #40	@ 0x28
 802b40a:	46bd      	mov	sp, r7
 802b40c:	bd80      	pop	{r7, pc}
 802b40e:	bf00      	nop
 802b410:	40005c00 	.word	0x40005c00
 802b414:	40023800 	.word	0x40023800
 802b418:	40020800 	.word	0x40020800
 802b41c:	40020000 	.word	0x40020000

0802b420 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 802b420:	b480      	push	{r7}
 802b422:	b085      	sub	sp, #20
 802b424:	af00      	add	r7, sp, #0
 802b426:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 802b428:	687b      	ldr	r3, [r7, #4]
 802b42a:	681b      	ldr	r3, [r3, #0]
 802b42c:	4a0b      	ldr	r2, [pc, #44]	@ (802b45c <HAL_RNG_MspInit+0x3c>)
 802b42e:	4293      	cmp	r3, r2
 802b430:	d10d      	bne.n	802b44e <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 802b432:	2300      	movs	r3, #0
 802b434:	60fb      	str	r3, [r7, #12]
 802b436:	4b0a      	ldr	r3, [pc, #40]	@ (802b460 <HAL_RNG_MspInit+0x40>)
 802b438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802b43a:	4a09      	ldr	r2, [pc, #36]	@ (802b460 <HAL_RNG_MspInit+0x40>)
 802b43c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b440:	6353      	str	r3, [r2, #52]	@ 0x34
 802b442:	4b07      	ldr	r3, [pc, #28]	@ (802b460 <HAL_RNG_MspInit+0x40>)
 802b444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802b446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802b44a:	60fb      	str	r3, [r7, #12]
 802b44c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 802b44e:	bf00      	nop
 802b450:	3714      	adds	r7, #20
 802b452:	46bd      	mov	sp, r7
 802b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b458:	4770      	bx	lr
 802b45a:	bf00      	nop
 802b45c:	50060800 	.word	0x50060800
 802b460:	40023800 	.word	0x40023800

0802b464 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 802b464:	b580      	push	{r7, lr}
 802b466:	b08a      	sub	sp, #40	@ 0x28
 802b468:	af00      	add	r7, sp, #0
 802b46a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b46c:	f107 0314 	add.w	r3, r7, #20
 802b470:	2200      	movs	r2, #0
 802b472:	601a      	str	r2, [r3, #0]
 802b474:	605a      	str	r2, [r3, #4]
 802b476:	609a      	str	r2, [r3, #8]
 802b478:	60da      	str	r2, [r3, #12]
 802b47a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 802b47c:	687b      	ldr	r3, [r7, #4]
 802b47e:	681b      	ldr	r3, [r3, #0]
 802b480:	4a19      	ldr	r2, [pc, #100]	@ (802b4e8 <HAL_SPI_MspInit+0x84>)
 802b482:	4293      	cmp	r3, r2
 802b484:	d12c      	bne.n	802b4e0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 802b486:	2300      	movs	r3, #0
 802b488:	613b      	str	r3, [r7, #16]
 802b48a:	4b18      	ldr	r3, [pc, #96]	@ (802b4ec <HAL_SPI_MspInit+0x88>)
 802b48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b48e:	4a17      	ldr	r2, [pc, #92]	@ (802b4ec <HAL_SPI_MspInit+0x88>)
 802b490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802b494:	6453      	str	r3, [r2, #68]	@ 0x44
 802b496:	4b15      	ldr	r3, [pc, #84]	@ (802b4ec <HAL_SPI_MspInit+0x88>)
 802b498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b49a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802b49e:	613b      	str	r3, [r7, #16]
 802b4a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 802b4a2:	2300      	movs	r3, #0
 802b4a4:	60fb      	str	r3, [r7, #12]
 802b4a6:	4b11      	ldr	r3, [pc, #68]	@ (802b4ec <HAL_SPI_MspInit+0x88>)
 802b4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4aa:	4a10      	ldr	r2, [pc, #64]	@ (802b4ec <HAL_SPI_MspInit+0x88>)
 802b4ac:	f043 0320 	orr.w	r3, r3, #32
 802b4b0:	6313      	str	r3, [r2, #48]	@ 0x30
 802b4b2:	4b0e      	ldr	r3, [pc, #56]	@ (802b4ec <HAL_SPI_MspInit+0x88>)
 802b4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b4b6:	f003 0320 	and.w	r3, r3, #32
 802b4ba:	60fb      	str	r3, [r7, #12]
 802b4bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 802b4be:	f44f 7360 	mov.w	r3, #896	@ 0x380
 802b4c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b4c4:	2302      	movs	r3, #2
 802b4c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b4c8:	2300      	movs	r3, #0
 802b4ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b4cc:	2300      	movs	r3, #0
 802b4ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 802b4d0:	2305      	movs	r3, #5
 802b4d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802b4d4:	f107 0314 	add.w	r3, r7, #20
 802b4d8:	4619      	mov	r1, r3
 802b4da:	4805      	ldr	r0, [pc, #20]	@ (802b4f0 <HAL_SPI_MspInit+0x8c>)
 802b4dc:	f007 face 	bl	8032a7c <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 802b4e0:	bf00      	nop
 802b4e2:	3728      	adds	r7, #40	@ 0x28
 802b4e4:	46bd      	mov	sp, r7
 802b4e6:	bd80      	pop	{r7, pc}
 802b4e8:	40015000 	.word	0x40015000
 802b4ec:	40023800 	.word	0x40023800
 802b4f0:	40021400 	.word	0x40021400

0802b4f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 802b4f4:	b480      	push	{r7}
 802b4f6:	b085      	sub	sp, #20
 802b4f8:	af00      	add	r7, sp, #0
 802b4fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 802b4fc:	687b      	ldr	r3, [r7, #4]
 802b4fe:	681b      	ldr	r3, [r3, #0]
 802b500:	4a0b      	ldr	r2, [pc, #44]	@ (802b530 <HAL_TIM_Base_MspInit+0x3c>)
 802b502:	4293      	cmp	r3, r2
 802b504:	d10d      	bne.n	802b522 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 802b506:	2300      	movs	r3, #0
 802b508:	60fb      	str	r3, [r7, #12]
 802b50a:	4b0a      	ldr	r3, [pc, #40]	@ (802b534 <HAL_TIM_Base_MspInit+0x40>)
 802b50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b50e:	4a09      	ldr	r2, [pc, #36]	@ (802b534 <HAL_TIM_Base_MspInit+0x40>)
 802b510:	f043 0301 	orr.w	r3, r3, #1
 802b514:	6453      	str	r3, [r2, #68]	@ 0x44
 802b516:	4b07      	ldr	r3, [pc, #28]	@ (802b534 <HAL_TIM_Base_MspInit+0x40>)
 802b518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b51a:	f003 0301 	and.w	r3, r3, #1
 802b51e:	60fb      	str	r3, [r7, #12]
 802b520:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 802b522:	bf00      	nop
 802b524:	3714      	adds	r7, #20
 802b526:	46bd      	mov	sp, r7
 802b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b52c:	4770      	bx	lr
 802b52e:	bf00      	nop
 802b530:	40010000 	.word	0x40010000
 802b534:	40023800 	.word	0x40023800

0802b538 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802b538:	b580      	push	{r7, lr}
 802b53a:	b08a      	sub	sp, #40	@ 0x28
 802b53c:	af00      	add	r7, sp, #0
 802b53e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b540:	f107 0314 	add.w	r3, r7, #20
 802b544:	2200      	movs	r2, #0
 802b546:	601a      	str	r2, [r3, #0]
 802b548:	605a      	str	r2, [r3, #4]
 802b54a:	609a      	str	r2, [r3, #8]
 802b54c:	60da      	str	r2, [r3, #12]
 802b54e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 802b550:	687b      	ldr	r3, [r7, #4]
 802b552:	681b      	ldr	r3, [r3, #0]
 802b554:	4a19      	ldr	r2, [pc, #100]	@ (802b5bc <HAL_UART_MspInit+0x84>)
 802b556:	4293      	cmp	r3, r2
 802b558:	d12c      	bne.n	802b5b4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 802b55a:	2300      	movs	r3, #0
 802b55c:	613b      	str	r3, [r7, #16]
 802b55e:	4b18      	ldr	r3, [pc, #96]	@ (802b5c0 <HAL_UART_MspInit+0x88>)
 802b560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b562:	4a17      	ldr	r2, [pc, #92]	@ (802b5c0 <HAL_UART_MspInit+0x88>)
 802b564:	f043 0310 	orr.w	r3, r3, #16
 802b568:	6453      	str	r3, [r2, #68]	@ 0x44
 802b56a:	4b15      	ldr	r3, [pc, #84]	@ (802b5c0 <HAL_UART_MspInit+0x88>)
 802b56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b56e:	f003 0310 	and.w	r3, r3, #16
 802b572:	613b      	str	r3, [r7, #16]
 802b574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b576:	2300      	movs	r3, #0
 802b578:	60fb      	str	r3, [r7, #12]
 802b57a:	4b11      	ldr	r3, [pc, #68]	@ (802b5c0 <HAL_UART_MspInit+0x88>)
 802b57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b57e:	4a10      	ldr	r2, [pc, #64]	@ (802b5c0 <HAL_UART_MspInit+0x88>)
 802b580:	f043 0301 	orr.w	r3, r3, #1
 802b584:	6313      	str	r3, [r2, #48]	@ 0x30
 802b586:	4b0e      	ldr	r3, [pc, #56]	@ (802b5c0 <HAL_UART_MspInit+0x88>)
 802b588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b58a:	f003 0301 	and.w	r3, r3, #1
 802b58e:	60fb      	str	r3, [r7, #12]
 802b590:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 802b592:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 802b596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b598:	2302      	movs	r3, #2
 802b59a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b59c:	2300      	movs	r3, #0
 802b59e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b5a0:	2303      	movs	r3, #3
 802b5a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 802b5a4:	2307      	movs	r3, #7
 802b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802b5a8:	f107 0314 	add.w	r3, r7, #20
 802b5ac:	4619      	mov	r1, r3
 802b5ae:	4805      	ldr	r0, [pc, #20]	@ (802b5c4 <HAL_UART_MspInit+0x8c>)
 802b5b0:	f007 fa64 	bl	8032a7c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 802b5b4:	bf00      	nop
 802b5b6:	3728      	adds	r7, #40	@ 0x28
 802b5b8:	46bd      	mov	sp, r7
 802b5ba:	bd80      	pop	{r7, pc}
 802b5bc:	40011000 	.word	0x40011000
 802b5c0:	40023800 	.word	0x40023800
 802b5c4:	40020000 	.word	0x40020000

0802b5c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 802b5c8:	b580      	push	{r7, lr}
 802b5ca:	b086      	sub	sp, #24
 802b5cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 802b5ce:	1d3b      	adds	r3, r7, #4
 802b5d0:	2200      	movs	r2, #0
 802b5d2:	601a      	str	r2, [r3, #0]
 802b5d4:	605a      	str	r2, [r3, #4]
 802b5d6:	609a      	str	r2, [r3, #8]
 802b5d8:	60da      	str	r2, [r3, #12]
 802b5da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 802b5dc:	4b3b      	ldr	r3, [pc, #236]	@ (802b6cc <HAL_FMC_MspInit+0x104>)
 802b5de:	681b      	ldr	r3, [r3, #0]
 802b5e0:	2b00      	cmp	r3, #0
 802b5e2:	d16f      	bne.n	802b6c4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 802b5e4:	4b39      	ldr	r3, [pc, #228]	@ (802b6cc <HAL_FMC_MspInit+0x104>)
 802b5e6:	2201      	movs	r2, #1
 802b5e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 802b5ea:	2300      	movs	r3, #0
 802b5ec:	603b      	str	r3, [r7, #0]
 802b5ee:	4b38      	ldr	r3, [pc, #224]	@ (802b6d0 <HAL_FMC_MspInit+0x108>)
 802b5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802b5f2:	4a37      	ldr	r2, [pc, #220]	@ (802b6d0 <HAL_FMC_MspInit+0x108>)
 802b5f4:	f043 0301 	orr.w	r3, r3, #1
 802b5f8:	6393      	str	r3, [r2, #56]	@ 0x38
 802b5fa:	4b35      	ldr	r3, [pc, #212]	@ (802b6d0 <HAL_FMC_MspInit+0x108>)
 802b5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802b5fe:	f003 0301 	and.w	r3, r3, #1
 802b602:	603b      	str	r3, [r7, #0]
 802b604:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802b606:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 802b60a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b60c:	2302      	movs	r3, #2
 802b60e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b610:	2300      	movs	r3, #0
 802b612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b614:	2303      	movs	r3, #3
 802b616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802b618:	230c      	movs	r3, #12
 802b61a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802b61c:	1d3b      	adds	r3, r7, #4
 802b61e:	4619      	mov	r1, r3
 802b620:	482c      	ldr	r0, [pc, #176]	@ (802b6d4 <HAL_FMC_MspInit+0x10c>)
 802b622:	f007 fa2b 	bl	8032a7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 802b626:	2301      	movs	r3, #1
 802b628:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b62a:	2302      	movs	r3, #2
 802b62c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b62e:	2300      	movs	r3, #0
 802b630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b632:	2303      	movs	r3, #3
 802b634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802b636:	230c      	movs	r3, #12
 802b638:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802b63a:	1d3b      	adds	r3, r7, #4
 802b63c:	4619      	mov	r1, r3
 802b63e:	4826      	ldr	r0, [pc, #152]	@ (802b6d8 <HAL_FMC_MspInit+0x110>)
 802b640:	f007 fa1c 	bl	8032a7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 802b644:	f248 1333 	movw	r3, #33075	@ 0x8133
 802b648:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b64a:	2302      	movs	r3, #2
 802b64c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b64e:	2300      	movs	r3, #0
 802b650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b652:	2303      	movs	r3, #3
 802b654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802b656:	230c      	movs	r3, #12
 802b658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802b65a:	1d3b      	adds	r3, r7, #4
 802b65c:	4619      	mov	r1, r3
 802b65e:	481f      	ldr	r0, [pc, #124]	@ (802b6dc <HAL_FMC_MspInit+0x114>)
 802b660:	f007 fa0c 	bl	8032a7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 802b664:	f64f 7383 	movw	r3, #65411	@ 0xff83
 802b668:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b66a:	2302      	movs	r3, #2
 802b66c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b66e:	2300      	movs	r3, #0
 802b670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b672:	2303      	movs	r3, #3
 802b674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802b676:	230c      	movs	r3, #12
 802b678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802b67a:	1d3b      	adds	r3, r7, #4
 802b67c:	4619      	mov	r1, r3
 802b67e:	4818      	ldr	r0, [pc, #96]	@ (802b6e0 <HAL_FMC_MspInit+0x118>)
 802b680:	f007 f9fc 	bl	8032a7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 802b684:	f24c 7303 	movw	r3, #50947	@ 0xc703
 802b688:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b68a:	2302      	movs	r3, #2
 802b68c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b68e:	2300      	movs	r3, #0
 802b690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b692:	2303      	movs	r3, #3
 802b694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802b696:	230c      	movs	r3, #12
 802b698:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802b69a:	1d3b      	adds	r3, r7, #4
 802b69c:	4619      	mov	r1, r3
 802b69e:	4811      	ldr	r0, [pc, #68]	@ (802b6e4 <HAL_FMC_MspInit+0x11c>)
 802b6a0:	f007 f9ec 	bl	8032a7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 802b6a4:	2360      	movs	r3, #96	@ 0x60
 802b6a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b6a8:	2302      	movs	r3, #2
 802b6aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b6ac:	2300      	movs	r3, #0
 802b6ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b6b0:	2303      	movs	r3, #3
 802b6b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802b6b4:	230c      	movs	r3, #12
 802b6b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802b6b8:	1d3b      	adds	r3, r7, #4
 802b6ba:	4619      	mov	r1, r3
 802b6bc:	480a      	ldr	r0, [pc, #40]	@ (802b6e8 <HAL_FMC_MspInit+0x120>)
 802b6be:	f007 f9dd 	bl	8032a7c <HAL_GPIO_Init>
 802b6c2:	e000      	b.n	802b6c6 <HAL_FMC_MspInit+0xfe>
    return;
 802b6c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 802b6c6:	3718      	adds	r7, #24
 802b6c8:	46bd      	mov	sp, r7
 802b6ca:	bd80      	pop	{r7, pc}
 802b6cc:	20002128 	.word	0x20002128
 802b6d0:	40023800 	.word	0x40023800
 802b6d4:	40021400 	.word	0x40021400
 802b6d8:	40020800 	.word	0x40020800
 802b6dc:	40021800 	.word	0x40021800
 802b6e0:	40021000 	.word	0x40021000
 802b6e4:	40020c00 	.word	0x40020c00
 802b6e8:	40020400 	.word	0x40020400

0802b6ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 802b6ec:	b580      	push	{r7, lr}
 802b6ee:	b082      	sub	sp, #8
 802b6f0:	af00      	add	r7, sp, #0
 802b6f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 802b6f4:	f7ff ff68 	bl	802b5c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 802b6f8:	bf00      	nop
 802b6fa:	3708      	adds	r7, #8
 802b6fc:	46bd      	mov	sp, r7
 802b6fe:	bd80      	pop	{r7, pc}

0802b700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802b700:	b580      	push	{r7, lr}
 802b702:	b08e      	sub	sp, #56	@ 0x38
 802b704:	af00      	add	r7, sp, #0
 802b706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 802b708:	2300      	movs	r3, #0
 802b70a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 802b70c:	2300      	movs	r3, #0
 802b70e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 802b710:	2300      	movs	r3, #0
 802b712:	60fb      	str	r3, [r7, #12]
 802b714:	4b33      	ldr	r3, [pc, #204]	@ (802b7e4 <HAL_InitTick+0xe4>)
 802b716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b718:	4a32      	ldr	r2, [pc, #200]	@ (802b7e4 <HAL_InitTick+0xe4>)
 802b71a:	f043 0310 	orr.w	r3, r3, #16
 802b71e:	6413      	str	r3, [r2, #64]	@ 0x40
 802b720:	4b30      	ldr	r3, [pc, #192]	@ (802b7e4 <HAL_InitTick+0xe4>)
 802b722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b724:	f003 0310 	and.w	r3, r3, #16
 802b728:	60fb      	str	r3, [r7, #12]
 802b72a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 802b72c:	f107 0210 	add.w	r2, r7, #16
 802b730:	f107 0314 	add.w	r3, r7, #20
 802b734:	4611      	mov	r1, r2
 802b736:	4618      	mov	r0, r3
 802b738:	f008 fa0e 	bl	8033b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 802b73c:	6a3b      	ldr	r3, [r7, #32]
 802b73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 802b740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b742:	2b00      	cmp	r3, #0
 802b744:	d103      	bne.n	802b74e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 802b746:	f008 f9df 	bl	8033b08 <HAL_RCC_GetPCLK1Freq>
 802b74a:	6378      	str	r0, [r7, #52]	@ 0x34
 802b74c:	e004      	b.n	802b758 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 802b74e:	f008 f9db 	bl	8033b08 <HAL_RCC_GetPCLK1Freq>
 802b752:	4603      	mov	r3, r0
 802b754:	005b      	lsls	r3, r3, #1
 802b756:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 802b758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b75a:	4a23      	ldr	r2, [pc, #140]	@ (802b7e8 <HAL_InitTick+0xe8>)
 802b75c:	fba2 2303 	umull	r2, r3, r2, r3
 802b760:	0c9b      	lsrs	r3, r3, #18
 802b762:	3b01      	subs	r3, #1
 802b764:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 802b766:	4b21      	ldr	r3, [pc, #132]	@ (802b7ec <HAL_InitTick+0xec>)
 802b768:	4a21      	ldr	r2, [pc, #132]	@ (802b7f0 <HAL_InitTick+0xf0>)
 802b76a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 802b76c:	4b1f      	ldr	r3, [pc, #124]	@ (802b7ec <HAL_InitTick+0xec>)
 802b76e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 802b772:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 802b774:	4a1d      	ldr	r2, [pc, #116]	@ (802b7ec <HAL_InitTick+0xec>)
 802b776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802b778:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 802b77a:	4b1c      	ldr	r3, [pc, #112]	@ (802b7ec <HAL_InitTick+0xec>)
 802b77c:	2200      	movs	r2, #0
 802b77e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 802b780:	4b1a      	ldr	r3, [pc, #104]	@ (802b7ec <HAL_InitTick+0xec>)
 802b782:	2200      	movs	r2, #0
 802b784:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802b786:	4b19      	ldr	r3, [pc, #100]	@ (802b7ec <HAL_InitTick+0xec>)
 802b788:	2200      	movs	r2, #0
 802b78a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 802b78c:	4817      	ldr	r0, [pc, #92]	@ (802b7ec <HAL_InitTick+0xec>)
 802b78e:	f008 fbaf 	bl	8033ef0 <HAL_TIM_Base_Init>
 802b792:	4603      	mov	r3, r0
 802b794:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 802b798:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802b79c:	2b00      	cmp	r3, #0
 802b79e:	d11b      	bne.n	802b7d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 802b7a0:	4812      	ldr	r0, [pc, #72]	@ (802b7ec <HAL_InitTick+0xec>)
 802b7a2:	f008 fbf5 	bl	8033f90 <HAL_TIM_Base_Start_IT>
 802b7a6:	4603      	mov	r3, r0
 802b7a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 802b7ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802b7b0:	2b00      	cmp	r3, #0
 802b7b2:	d111      	bne.n	802b7d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 802b7b4:	2036      	movs	r0, #54	@ 0x36
 802b7b6:	f006 ff95 	bl	80326e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802b7ba:	687b      	ldr	r3, [r7, #4]
 802b7bc:	2b0f      	cmp	r3, #15
 802b7be:	d808      	bhi.n	802b7d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 802b7c0:	2200      	movs	r2, #0
 802b7c2:	6879      	ldr	r1, [r7, #4]
 802b7c4:	2036      	movs	r0, #54	@ 0x36
 802b7c6:	f006 ff71 	bl	80326ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 802b7ca:	4a0a      	ldr	r2, [pc, #40]	@ (802b7f4 <HAL_InitTick+0xf4>)
 802b7cc:	687b      	ldr	r3, [r7, #4]
 802b7ce:	6013      	str	r3, [r2, #0]
 802b7d0:	e002      	b.n	802b7d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 802b7d2:	2301      	movs	r3, #1
 802b7d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 802b7d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 802b7dc:	4618      	mov	r0, r3
 802b7de:	3738      	adds	r7, #56	@ 0x38
 802b7e0:	46bd      	mov	sp, r7
 802b7e2:	bd80      	pop	{r7, pc}
 802b7e4:	40023800 	.word	0x40023800
 802b7e8:	431bde83 	.word	0x431bde83
 802b7ec:	2000212c 	.word	0x2000212c
 802b7f0:	40001000 	.word	0x40001000
 802b7f4:	20001cac 	.word	0x20001cac

0802b7f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802b7f8:	b480      	push	{r7}
 802b7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 802b7fc:	bf00      	nop
 802b7fe:	e7fd      	b.n	802b7fc <NMI_Handler+0x4>

0802b800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802b800:	b580      	push	{r7, lr}
 802b802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("DEAD");
 802b804:	4802      	ldr	r0, [pc, #8]	@ (802b810 <HardFault_Handler+0x10>)
 802b806:	f00a f899 	bl	803593c <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802b80a:	bf00      	nop
 802b80c:	e7fd      	b.n	802b80a <HardFault_Handler+0xa>
 802b80e:	bf00      	nop
 802b810:	08039104 	.word	0x08039104

0802b814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802b814:	b480      	push	{r7}
 802b816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802b818:	bf00      	nop
 802b81a:	e7fd      	b.n	802b818 <MemManage_Handler+0x4>

0802b81c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802b81c:	b480      	push	{r7}
 802b81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802b820:	bf00      	nop
 802b822:	e7fd      	b.n	802b820 <BusFault_Handler+0x4>

0802b824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802b824:	b480      	push	{r7}
 802b826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802b828:	bf00      	nop
 802b82a:	e7fd      	b.n	802b828 <UsageFault_Handler+0x4>

0802b82c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802b82c:	b480      	push	{r7}
 802b82e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802b830:	bf00      	nop
 802b832:	46bd      	mov	sp, r7
 802b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b838:	4770      	bx	lr

0802b83a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802b83a:	b480      	push	{r7}
 802b83c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802b83e:	bf00      	nop
 802b840:	46bd      	mov	sp, r7
 802b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b846:	4770      	bx	lr

0802b848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802b848:	b480      	push	{r7}
 802b84a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802b84c:	bf00      	nop
 802b84e:	46bd      	mov	sp, r7
 802b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b854:	4770      	bx	lr

0802b856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802b856:	b480      	push	{r7}
 802b858:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802b85a:	bf00      	nop
 802b85c:	46bd      	mov	sp, r7
 802b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b862:	4770      	bx	lr

0802b864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 802b864:	b580      	push	{r7, lr}
 802b866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 802b868:	4802      	ldr	r0, [pc, #8]	@ (802b874 <TIM6_DAC_IRQHandler+0x10>)
 802b86a:	f008 fc01 	bl	8034070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 802b86e:	bf00      	nop
 802b870:	bd80      	pop	{r7, pc}
 802b872:	bf00      	nop
 802b874:	2000212c 	.word	0x2000212c

0802b878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802b878:	b480      	push	{r7}
 802b87a:	af00      	add	r7, sp, #0
  return 1;
 802b87c:	2301      	movs	r3, #1
}
 802b87e:	4618      	mov	r0, r3
 802b880:	46bd      	mov	sp, r7
 802b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b886:	4770      	bx	lr

0802b888 <_kill>:

int _kill(int pid, int sig)
{
 802b888:	b580      	push	{r7, lr}
 802b88a:	b082      	sub	sp, #8
 802b88c:	af00      	add	r7, sp, #0
 802b88e:	6078      	str	r0, [r7, #4]
 802b890:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 802b892:	f00a fa57 	bl	8035d44 <__errno>
 802b896:	4603      	mov	r3, r0
 802b898:	2216      	movs	r2, #22
 802b89a:	601a      	str	r2, [r3, #0]
  return -1;
 802b89c:	f04f 33ff 	mov.w	r3, #4294967295
}
 802b8a0:	4618      	mov	r0, r3
 802b8a2:	3708      	adds	r7, #8
 802b8a4:	46bd      	mov	sp, r7
 802b8a6:	bd80      	pop	{r7, pc}

0802b8a8 <_exit>:

void _exit (int status)
{
 802b8a8:	b580      	push	{r7, lr}
 802b8aa:	b082      	sub	sp, #8
 802b8ac:	af00      	add	r7, sp, #0
 802b8ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 802b8b0:	f04f 31ff 	mov.w	r1, #4294967295
 802b8b4:	6878      	ldr	r0, [r7, #4]
 802b8b6:	f7ff ffe7 	bl	802b888 <_kill>
  while (1) {}    /* Make sure we hang here */
 802b8ba:	bf00      	nop
 802b8bc:	e7fd      	b.n	802b8ba <_exit+0x12>

0802b8be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802b8be:	b580      	push	{r7, lr}
 802b8c0:	b086      	sub	sp, #24
 802b8c2:	af00      	add	r7, sp, #0
 802b8c4:	60f8      	str	r0, [r7, #12]
 802b8c6:	60b9      	str	r1, [r7, #8]
 802b8c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b8ca:	2300      	movs	r3, #0
 802b8cc:	617b      	str	r3, [r7, #20]
 802b8ce:	e00a      	b.n	802b8e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 802b8d0:	f3af 8000 	nop.w
 802b8d4:	4601      	mov	r1, r0
 802b8d6:	68bb      	ldr	r3, [r7, #8]
 802b8d8:	1c5a      	adds	r2, r3, #1
 802b8da:	60ba      	str	r2, [r7, #8]
 802b8dc:	b2ca      	uxtb	r2, r1
 802b8de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b8e0:	697b      	ldr	r3, [r7, #20]
 802b8e2:	3301      	adds	r3, #1
 802b8e4:	617b      	str	r3, [r7, #20]
 802b8e6:	697a      	ldr	r2, [r7, #20]
 802b8e8:	687b      	ldr	r3, [r7, #4]
 802b8ea:	429a      	cmp	r2, r3
 802b8ec:	dbf0      	blt.n	802b8d0 <_read+0x12>
  }

  return len;
 802b8ee:	687b      	ldr	r3, [r7, #4]
}
 802b8f0:	4618      	mov	r0, r3
 802b8f2:	3718      	adds	r7, #24
 802b8f4:	46bd      	mov	sp, r7
 802b8f6:	bd80      	pop	{r7, pc}

0802b8f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 802b8f8:	b480      	push	{r7}
 802b8fa:	b083      	sub	sp, #12
 802b8fc:	af00      	add	r7, sp, #0
 802b8fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 802b900:	f04f 33ff 	mov.w	r3, #4294967295
}
 802b904:	4618      	mov	r0, r3
 802b906:	370c      	adds	r7, #12
 802b908:	46bd      	mov	sp, r7
 802b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b90e:	4770      	bx	lr

0802b910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 802b910:	b480      	push	{r7}
 802b912:	b083      	sub	sp, #12
 802b914:	af00      	add	r7, sp, #0
 802b916:	6078      	str	r0, [r7, #4]
 802b918:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802b91a:	683b      	ldr	r3, [r7, #0]
 802b91c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 802b920:	605a      	str	r2, [r3, #4]
  return 0;
 802b922:	2300      	movs	r3, #0
}
 802b924:	4618      	mov	r0, r3
 802b926:	370c      	adds	r7, #12
 802b928:	46bd      	mov	sp, r7
 802b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b92e:	4770      	bx	lr

0802b930 <_isatty>:

int _isatty(int file)
{
 802b930:	b480      	push	{r7}
 802b932:	b083      	sub	sp, #12
 802b934:	af00      	add	r7, sp, #0
 802b936:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802b938:	2301      	movs	r3, #1
}
 802b93a:	4618      	mov	r0, r3
 802b93c:	370c      	adds	r7, #12
 802b93e:	46bd      	mov	sp, r7
 802b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b944:	4770      	bx	lr

0802b946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802b946:	b480      	push	{r7}
 802b948:	b085      	sub	sp, #20
 802b94a:	af00      	add	r7, sp, #0
 802b94c:	60f8      	str	r0, [r7, #12]
 802b94e:	60b9      	str	r1, [r7, #8]
 802b950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802b952:	2300      	movs	r3, #0
}
 802b954:	4618      	mov	r0, r3
 802b956:	3714      	adds	r7, #20
 802b958:	46bd      	mov	sp, r7
 802b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b95e:	4770      	bx	lr

0802b960 <_sbrk>:
 */

extern char __HeapLimit;

void *_sbrk(ptrdiff_t incr)
{
 802b960:	b480      	push	{r7}
 802b962:	b085      	sub	sp, #20
 802b964:	af00      	add	r7, sp, #0
 802b966:	6078      	str	r0, [r7, #4]
  //extern uint32_t _Min_Stack_Size;
  //const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  //const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  if (NULL == __sbrk_heap_end)
 802b968:	4b0b      	ldr	r3, [pc, #44]	@ (802b998 <_sbrk+0x38>)
 802b96a:	681b      	ldr	r3, [r3, #0]
 802b96c:	2b00      	cmp	r3, #0
 802b96e:	d102      	bne.n	802b976 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 802b970:	4b09      	ldr	r3, [pc, #36]	@ (802b998 <_sbrk+0x38>)
 802b972:	4a0a      	ldr	r2, [pc, #40]	@ (802b99c <_sbrk+0x3c>)
 802b974:	601a      	str	r2, [r3, #0]
    errno = ENOMEM;
    return (void *)-1;
  }*/


  prev_heap_end = __sbrk_heap_end;
 802b976:	4b08      	ldr	r3, [pc, #32]	@ (802b998 <_sbrk+0x38>)
 802b978:	681b      	ldr	r3, [r3, #0]
 802b97a:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802b97c:	4b06      	ldr	r3, [pc, #24]	@ (802b998 <_sbrk+0x38>)
 802b97e:	681a      	ldr	r2, [r3, #0]
 802b980:	687b      	ldr	r3, [r7, #4]
 802b982:	4413      	add	r3, r2
 802b984:	4a04      	ldr	r2, [pc, #16]	@ (802b998 <_sbrk+0x38>)
 802b986:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802b988:	68fb      	ldr	r3, [r7, #12]
}
 802b98a:	4618      	mov	r0, r3
 802b98c:	3714      	adds	r7, #20
 802b98e:	46bd      	mov	sp, r7
 802b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b994:	4770      	bx	lr
 802b996:	bf00      	nop
 802b998:	20002174 	.word	0x20002174
 802b99c:	d0000000 	.word	0xd0000000

0802b9a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802b9a0:	b480      	push	{r7}
 802b9a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802b9a4:	4b06      	ldr	r3, [pc, #24]	@ (802b9c0 <SystemInit+0x20>)
 802b9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802b9aa:	4a05      	ldr	r2, [pc, #20]	@ (802b9c0 <SystemInit+0x20>)
 802b9ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 802b9b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 802b9b4:	bf00      	nop
 802b9b6:	46bd      	mov	sp, r7
 802b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9bc:	4770      	bx	lr
 802b9be:	bf00      	nop
 802b9c0:	e000ed00 	.word	0xe000ed00

0802b9c4 <copy_point>:
{
 802b9c4:	b580      	push	{r7, lr}
 802b9c6:	b082      	sub	sp, #8
 802b9c8:	af00      	add	r7, sp, #0
 802b9ca:	6078      	str	r0, [r7, #4]
 802b9cc:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 802b9ce:	687b      	ldr	r3, [r7, #4]
 802b9d0:	683a      	ldr	r2, [r7, #0]
 802b9d2:	4611      	mov	r1, r2
 802b9d4:	4618      	mov	r0, r3
 802b9d6:	f7e7 f829 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 802b9da:	687b      	ldr	r3, [r7, #4]
 802b9dc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802b9e0:	683b      	ldr	r3, [r7, #0]
 802b9e2:	3348      	adds	r3, #72	@ 0x48
 802b9e4:	4619      	mov	r1, r3
 802b9e6:	4610      	mov	r0, r2
 802b9e8:	f7e7 f820 	bl	8012a2c <fp2_copy>
}
 802b9ec:	bf00      	nop
 802b9ee:	3708      	adds	r7, #8
 802b9f0:	46bd      	mov	sp, r7
 802b9f2:	bd80      	pop	{r7, pc}

0802b9f4 <copy_curve>:
{
 802b9f4:	b580      	push	{r7, lr}
 802b9f6:	b082      	sub	sp, #8
 802b9f8:	af00      	add	r7, sp, #0
 802b9fa:	6078      	str	r0, [r7, #4]
 802b9fc:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 802b9fe:	687b      	ldr	r3, [r7, #4]
 802ba00:	683a      	ldr	r2, [r7, #0]
 802ba02:	4611      	mov	r1, r2
 802ba04:	4618      	mov	r0, r3
 802ba06:	f7e7 f811 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 802ba0a:	687b      	ldr	r3, [r7, #4]
 802ba0c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802ba10:	683b      	ldr	r3, [r7, #0]
 802ba12:	3348      	adds	r3, #72	@ 0x48
 802ba14:	4619      	mov	r1, r3
 802ba16:	4610      	mov	r0, r2
 802ba18:	f7e7 f808 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 802ba1c:	683b      	ldr	r3, [r7, #0]
 802ba1e:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 802ba22:	687b      	ldr	r3, [r7, #4]
 802ba24:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 802ba28:	687b      	ldr	r3, [r7, #4]
 802ba2a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802ba2e:	683b      	ldr	r3, [r7, #0]
 802ba30:	3390      	adds	r3, #144	@ 0x90
 802ba32:	4619      	mov	r1, r3
 802ba34:	4610      	mov	r0, r2
 802ba36:	f7ff ffc5 	bl	802b9c4 <copy_point>
}
 802ba3a:	bf00      	nop
 802ba3c:	3708      	adds	r7, #8
 802ba3e:	46bd      	mov	sp, r7
 802ba40:	bd80      	pop	{r7, pc}

0802ba42 <test_point_order_twof>:
{
 802ba42:	b580      	push	{r7, lr}
 802ba44:	b0f2      	sub	sp, #456	@ 0x1c8
 802ba46:	af00      	add	r7, sp, #0
 802ba48:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802ba4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 802ba50:	6018      	str	r0, [r3, #0]
 802ba52:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802ba56:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 802ba5a:	6019      	str	r1, [r3, #0]
 802ba5c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802ba60:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 802ba64:	601a      	str	r2, [r3, #0]
    test = *P;
 802ba66:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802ba6a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 802ba6e:	681a      	ldr	r2, [r3, #0]
 802ba70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 802ba74:	4611      	mov	r1, r2
 802ba76:	2290      	movs	r2, #144	@ 0x90
 802ba78:	4618      	mov	r0, r3
 802ba7a:	f00a f990 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 802ba7e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802ba82:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 802ba86:	f107 0214 	add.w	r2, r7, #20
 802ba8a:	6819      	ldr	r1, [r3, #0]
 802ba8c:	4610      	mov	r0, r2
 802ba8e:	f7ff ffb1 	bl	802b9f4 <copy_curve>
    if (ec_is_zero(&test))
 802ba92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 802ba96:	4618      	mov	r0, r3
 802ba98:	f7df fdc5 	bl	800b626 <ec_is_zero>
 802ba9c:	4603      	mov	r3, r0
 802ba9e:	2b00      	cmp	r3, #0
 802baa0:	d001      	beq.n	802baa6 <test_point_order_twof+0x64>
        return 0;
 802baa2:	2300      	movs	r3, #0
 802baa4:	e026      	b.n	802baf4 <test_point_order_twof+0xb2>
    ec_dbl_iter(&test, t - 1, &test, &curve);
 802baa6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 802baaa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 802baae:	681b      	ldr	r3, [r3, #0]
 802bab0:	1e59      	subs	r1, r3, #1
 802bab2:	f107 0314 	add.w	r3, r7, #20
 802bab6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 802baba:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 802babe:	f7e1 f827 	bl	800cb10 <ec_dbl_iter>
    if (ec_is_zero(&test))
 802bac2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 802bac6:	4618      	mov	r0, r3
 802bac8:	f7df fdad 	bl	800b626 <ec_is_zero>
 802bacc:	4603      	mov	r3, r0
 802bace:	2b00      	cmp	r3, #0
 802bad0:	d001      	beq.n	802bad6 <test_point_order_twof+0x94>
        return 0;
 802bad2:	2300      	movs	r3, #0
 802bad4:	e00e      	b.n	802baf4 <test_point_order_twof+0xb2>
    ec_dbl(&test, &test, &curve);
 802bad6:	f107 0214 	add.w	r2, r7, #20
 802bada:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 802bade:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 802bae2:	4618      	mov	r0, r3
 802bae4:	f7e0 ffe2 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 802bae8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 802baec:	4618      	mov	r0, r3
 802baee:	f7df fd9a 	bl	800b626 <ec_is_zero>
 802baf2:	4603      	mov	r3, r0
}
 802baf4:	4618      	mov	r0, r3
 802baf6:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 802bafa:	46bd      	mov	sp, r7
 802bafc:	bd80      	pop	{r7, pc}

0802bafe <test_jac_order_twof>:
 *
 * @return 0xFFFFFFFF if the order is correct, 0 otherwise
 */
static int
test_jac_order_twof(const jac_point_t *P, const ec_curve_t *E, int t)
{
 802bafe:	b580      	push	{r7, lr}
 802bb00:	b0bc      	sub	sp, #240	@ 0xf0
 802bb02:	af00      	add	r7, sp, #0
 802bb04:	60f8      	str	r0, [r7, #12]
 802bb06:	60b9      	str	r1, [r7, #8]
 802bb08:	607a      	str	r2, [r7, #4]
    jac_point_t test;
    test = *P;
 802bb0a:	68fa      	ldr	r2, [r7, #12]
 802bb0c:	f107 0314 	add.w	r3, r7, #20
 802bb10:	4611      	mov	r1, r2
 802bb12:	22d8      	movs	r2, #216	@ 0xd8
 802bb14:	4618      	mov	r0, r3
 802bb16:	f00a f942 	bl	8035d9e <memcpy>
    if (fp2_is_zero(&test.z))
 802bb1a:	f107 0314 	add.w	r3, r7, #20
 802bb1e:	3390      	adds	r3, #144	@ 0x90
 802bb20:	4618      	mov	r0, r3
 802bb22:	f7e6 ff3b 	bl	801299c <fp2_is_zero>
 802bb26:	4603      	mov	r3, r0
 802bb28:	2b00      	cmp	r3, #0
 802bb2a:	d001      	beq.n	802bb30 <test_jac_order_twof+0x32>
        return 0;
 802bb2c:	2300      	movs	r3, #0
 802bb2e:	e030      	b.n	802bb92 <test_jac_order_twof+0x94>
    for (int i = 0; i < t - 1; i++) {
 802bb30:	2300      	movs	r3, #0
 802bb32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 802bb36:	e00c      	b.n	802bb52 <test_jac_order_twof+0x54>
        DBL(&test, &test, E);
 802bb38:	f107 0114 	add.w	r1, r7, #20
 802bb3c:	f107 0314 	add.w	r3, r7, #20
 802bb40:	68ba      	ldr	r2, [r7, #8]
 802bb42:	4618      	mov	r0, r3
 802bb44:	f7e1 fab0 	bl	800d0a8 <DBL>
    for (int i = 0; i < t - 1; i++) {
 802bb48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 802bb4c:	3301      	adds	r3, #1
 802bb4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 802bb52:	687b      	ldr	r3, [r7, #4]
 802bb54:	3b01      	subs	r3, #1
 802bb56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802bb5a:	429a      	cmp	r2, r3
 802bb5c:	dbec      	blt.n	802bb38 <test_jac_order_twof+0x3a>
    }
    if (fp2_is_zero(&test.z))
 802bb5e:	f107 0314 	add.w	r3, r7, #20
 802bb62:	3390      	adds	r3, #144	@ 0x90
 802bb64:	4618      	mov	r0, r3
 802bb66:	f7e6 ff19 	bl	801299c <fp2_is_zero>
 802bb6a:	4603      	mov	r3, r0
 802bb6c:	2b00      	cmp	r3, #0
 802bb6e:	d001      	beq.n	802bb74 <test_jac_order_twof+0x76>
        return 0;
 802bb70:	2300      	movs	r3, #0
 802bb72:	e00e      	b.n	802bb92 <test_jac_order_twof+0x94>
    DBL(&test, &test, E);
 802bb74:	f107 0114 	add.w	r1, r7, #20
 802bb78:	f107 0314 	add.w	r3, r7, #20
 802bb7c:	68ba      	ldr	r2, [r7, #8]
 802bb7e:	4618      	mov	r0, r3
 802bb80:	f7e1 fa92 	bl	800d0a8 <DBL>
    return (fp2_is_zero(&test.z));
 802bb84:	f107 0314 	add.w	r3, r7, #20
 802bb88:	3390      	adds	r3, #144	@ 0x90
 802bb8a:	4618      	mov	r0, r3
 802bb8c:	f7e6 ff06 	bl	801299c <fp2_is_zero>
 802bb90:	4603      	mov	r3, r0
}
 802bb92:	4618      	mov	r0, r3
 802bb94:	37f0      	adds	r7, #240	@ 0xf0
 802bb96:	46bd      	mov	sp, r7
 802bb98:	bd80      	pop	{r7, pc}

0802bb9a <hadamard>:
 * out = (x+y+z+t, x-y+z-t, x+y-z-t, x-y-z+t)
 *
 */
static inline void
hadamard(theta_point_t *out, const theta_point_t *in)
{
 802bb9a:	b580      	push	{r7, lr}
 802bb9c:	b0ca      	sub	sp, #296	@ 0x128
 802bb9e:	af00      	add	r7, sp, #0
 802bba0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bba4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802bba8:	6018      	str	r0, [r3, #0]
 802bbaa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bbae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bbb2:	6019      	str	r1, [r3, #0]
    fp2_t t1, t2, t3, t4;

    // t1 = x + y
    fp2_add(&t1, &in->x, &in->y);
 802bbb4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bbb8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bbbc:	6819      	ldr	r1, [r3, #0]
 802bbbe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bbc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bbc6:	681b      	ldr	r3, [r3, #0]
 802bbc8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802bbcc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 802bbd0:	4618      	mov	r0, r3
 802bbd2:	f7e6 ff43 	bl	8012a5c <fp2_add>
    // t2 = x - y
    fp2_sub(&t2, &in->x, &in->y);
 802bbd6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bbda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bbde:	6819      	ldr	r1, [r3, #0]
 802bbe0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bbe4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bbe8:	681b      	ldr	r3, [r3, #0]
 802bbea:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802bbee:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802bbf2:	4618      	mov	r0, r3
 802bbf4:	f7e6 ff68 	bl	8012ac8 <fp2_sub>
    // t3 = z + t
    fp2_add(&t3, &in->z, &in->t);
 802bbf8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bbfc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bc00:	681b      	ldr	r3, [r3, #0]
 802bc02:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802bc06:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bc0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bc0e:	681b      	ldr	r3, [r3, #0]
 802bc10:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802bc14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802bc18:	4618      	mov	r0, r3
 802bc1a:	f7e6 ff1f 	bl	8012a5c <fp2_add>
    // t4 = z - t
    fp2_sub(&t4, &in->z, &in->t);
 802bc1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bc22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bc26:	681b      	ldr	r3, [r3, #0]
 802bc28:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802bc2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bc30:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802bc34:	681b      	ldr	r3, [r3, #0]
 802bc36:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802bc3a:	f107 0308 	add.w	r3, r7, #8
 802bc3e:	4618      	mov	r0, r3
 802bc40:	f7e6 ff42 	bl	8012ac8 <fp2_sub>

    fp2_add(&out->x, &t1, &t3);
 802bc44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bc48:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802bc4c:	681b      	ldr	r3, [r3, #0]
 802bc4e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802bc52:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 802bc56:	4618      	mov	r0, r3
 802bc58:	f7e6 ff00 	bl	8012a5c <fp2_add>
    fp2_add(&out->y, &t2, &t4);
 802bc5c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bc60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802bc64:	681b      	ldr	r3, [r3, #0]
 802bc66:	3348      	adds	r3, #72	@ 0x48
 802bc68:	f107 0208 	add.w	r2, r7, #8
 802bc6c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 802bc70:	4618      	mov	r0, r3
 802bc72:	f7e6 fef3 	bl	8012a5c <fp2_add>
    fp2_sub(&out->z, &t1, &t3);
 802bc76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bc7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802bc7e:	681b      	ldr	r3, [r3, #0]
 802bc80:	3390      	adds	r3, #144	@ 0x90
 802bc82:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802bc86:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 802bc8a:	4618      	mov	r0, r3
 802bc8c:	f7e6 ff1c 	bl	8012ac8 <fp2_sub>
    fp2_sub(&out->t, &t2, &t4);
 802bc90:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802bc94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802bc98:	681b      	ldr	r3, [r3, #0]
 802bc9a:	33d8      	adds	r3, #216	@ 0xd8
 802bc9c:	f107 0208 	add.w	r2, r7, #8
 802bca0:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 802bca4:	4618      	mov	r0, r3
 802bca6:	f7e6 ff0f 	bl	8012ac8 <fp2_sub>
}
 802bcaa:	bf00      	nop
 802bcac:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 802bcb0:	46bd      	mov	sp, r7
 802bcb2:	bd80      	pop	{r7, pc}

0802bcb4 <pointwise_square>:
 * out = (x^2, y^2, z^2, t^2)
 *
 */
static inline void
pointwise_square(theta_point_t *out, const theta_point_t *in)
{
 802bcb4:	b580      	push	{r7, lr}
 802bcb6:	b082      	sub	sp, #8
 802bcb8:	af00      	add	r7, sp, #0
 802bcba:	6078      	str	r0, [r7, #4]
 802bcbc:	6039      	str	r1, [r7, #0]
    fp2_sqr(&out->x, &in->x);
 802bcbe:	687b      	ldr	r3, [r7, #4]
 802bcc0:	683a      	ldr	r2, [r7, #0]
 802bcc2:	4611      	mov	r1, r2
 802bcc4:	4618      	mov	r0, r3
 802bcc6:	f7e6 ff81 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->y, &in->y);
 802bcca:	687b      	ldr	r3, [r7, #4]
 802bccc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802bcd0:	683b      	ldr	r3, [r7, #0]
 802bcd2:	3348      	adds	r3, #72	@ 0x48
 802bcd4:	4619      	mov	r1, r3
 802bcd6:	4610      	mov	r0, r2
 802bcd8:	f7e6 ff78 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->z, &in->z);
 802bcdc:	687b      	ldr	r3, [r7, #4]
 802bcde:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802bce2:	683b      	ldr	r3, [r7, #0]
 802bce4:	3390      	adds	r3, #144	@ 0x90
 802bce6:	4619      	mov	r1, r3
 802bce8:	4610      	mov	r0, r2
 802bcea:	f7e6 ff6f 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->t, &in->t);
 802bcee:	687b      	ldr	r3, [r7, #4]
 802bcf0:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802bcf4:	683b      	ldr	r3, [r7, #0]
 802bcf6:	33d8      	adds	r3, #216	@ 0xd8
 802bcf8:	4619      	mov	r1, r3
 802bcfa:	4610      	mov	r0, r2
 802bcfc:	f7e6 ff66 	bl	8012bcc <fp2_sqr>
}
 802bd00:	bf00      	nop
 802bd02:	3708      	adds	r7, #8
 802bd04:	46bd      	mov	sp, r7
 802bd06:	bd80      	pop	{r7, pc}

0802bd08 <to_squared_theta>:
 * out = (x^2+y^2+z^2+t^2, x^2-y^2+z^2-t^2, x^2+y^2-z^2-t^2, x^2-y^2-z^2+t^2)
 *
 */
static inline void
to_squared_theta(theta_point_t *out, const theta_point_t *in)
{
 802bd08:	b580      	push	{r7, lr}
 802bd0a:	b082      	sub	sp, #8
 802bd0c:	af00      	add	r7, sp, #0
 802bd0e:	6078      	str	r0, [r7, #4]
 802bd10:	6039      	str	r1, [r7, #0]
    pointwise_square(out, in);
 802bd12:	6839      	ldr	r1, [r7, #0]
 802bd14:	6878      	ldr	r0, [r7, #4]
 802bd16:	f7ff ffcd 	bl	802bcb4 <pointwise_square>
    hadamard(out, out);
 802bd1a:	6879      	ldr	r1, [r7, #4]
 802bd1c:	6878      	ldr	r0, [r7, #4]
 802bd1e:	f7ff ff3c 	bl	802bb9a <hadamard>
}
 802bd22:	bf00      	nop
 802bd24:	3708      	adds	r7, #8
 802bd26:	46bd      	mov	sp, r7
 802bd28:	bd80      	pop	{r7, pc}
	...

0802bd2c <select_base_change_matrix>:
static inline void
select_base_change_matrix(basis_change_matrix_t *M,
                          const basis_change_matrix_t *M1,
                          const precomp_basis_change_matrix_t *M2,
                          const uint32_t option)
{
 802bd2c:	b580      	push	{r7, lr}
 802bd2e:	b086      	sub	sp, #24
 802bd30:	af00      	add	r7, sp, #0
 802bd32:	60f8      	str	r0, [r7, #12]
 802bd34:	60b9      	str	r1, [r7, #8]
 802bd36:	607a      	str	r2, [r7, #4]
 802bd38:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 4; i++)
 802bd3a:	2300      	movs	r3, #0
 802bd3c:	617b      	str	r3, [r7, #20]
 802bd3e:	e038      	b.n	802bdb2 <select_base_change_matrix+0x86>
        for (int j = 0; j < 4; j++)
 802bd40:	2300      	movs	r3, #0
 802bd42:	613b      	str	r3, [r7, #16]
 802bd44:	e02f      	b.n	802bda6 <select_base_change_matrix+0x7a>
            fp2_select(&M->m[i][j], &M1->m[i][j], &FP2_CONSTANTS[M2->m[i][j]], option);
 802bd46:	693b      	ldr	r3, [r7, #16]
 802bd48:	461a      	mov	r2, r3
 802bd4a:	00d2      	lsls	r2, r2, #3
 802bd4c:	441a      	add	r2, r3
 802bd4e:	00d3      	lsls	r3, r2, #3
 802bd50:	461a      	mov	r2, r3
 802bd52:	6979      	ldr	r1, [r7, #20]
 802bd54:	460b      	mov	r3, r1
 802bd56:	00db      	lsls	r3, r3, #3
 802bd58:	440b      	add	r3, r1
 802bd5a:	015b      	lsls	r3, r3, #5
 802bd5c:	4413      	add	r3, r2
 802bd5e:	68fa      	ldr	r2, [r7, #12]
 802bd60:	18d0      	adds	r0, r2, r3
 802bd62:	693b      	ldr	r3, [r7, #16]
 802bd64:	461a      	mov	r2, r3
 802bd66:	00d2      	lsls	r2, r2, #3
 802bd68:	441a      	add	r2, r3
 802bd6a:	00d3      	lsls	r3, r2, #3
 802bd6c:	461a      	mov	r2, r3
 802bd6e:	6979      	ldr	r1, [r7, #20]
 802bd70:	460b      	mov	r3, r1
 802bd72:	00db      	lsls	r3, r3, #3
 802bd74:	440b      	add	r3, r1
 802bd76:	015b      	lsls	r3, r3, #5
 802bd78:	4413      	add	r3, r2
 802bd7a:	68ba      	ldr	r2, [r7, #8]
 802bd7c:	18d1      	adds	r1, r2, r3
 802bd7e:	687a      	ldr	r2, [r7, #4]
 802bd80:	697b      	ldr	r3, [r7, #20]
 802bd82:	009b      	lsls	r3, r3, #2
 802bd84:	441a      	add	r2, r3
 802bd86:	693b      	ldr	r3, [r7, #16]
 802bd88:	4413      	add	r3, r2
 802bd8a:	781b      	ldrb	r3, [r3, #0]
 802bd8c:	461a      	mov	r2, r3
 802bd8e:	4613      	mov	r3, r2
 802bd90:	00db      	lsls	r3, r3, #3
 802bd92:	4413      	add	r3, r2
 802bd94:	00db      	lsls	r3, r3, #3
 802bd96:	4a0b      	ldr	r2, [pc, #44]	@ (802bdc4 <select_base_change_matrix+0x98>)
 802bd98:	441a      	add	r2, r3
 802bd9a:	683b      	ldr	r3, [r7, #0]
 802bd9c:	f7e7 fad9 	bl	8013352 <fp2_select>
        for (int j = 0; j < 4; j++)
 802bda0:	693b      	ldr	r3, [r7, #16]
 802bda2:	3301      	adds	r3, #1
 802bda4:	613b      	str	r3, [r7, #16]
 802bda6:	693b      	ldr	r3, [r7, #16]
 802bda8:	2b03      	cmp	r3, #3
 802bdaa:	ddcc      	ble.n	802bd46 <select_base_change_matrix+0x1a>
    for (int i = 0; i < 4; i++)
 802bdac:	697b      	ldr	r3, [r7, #20]
 802bdae:	3301      	adds	r3, #1
 802bdb0:	617b      	str	r3, [r7, #20]
 802bdb2:	697b      	ldr	r3, [r7, #20]
 802bdb4:	2b03      	cmp	r3, #3
 802bdb6:	ddc3      	ble.n	802bd40 <select_base_change_matrix+0x14>
}
 802bdb8:	bf00      	nop
 802bdba:	bf00      	nop
 802bdbc:	3718      	adds	r7, #24
 802bdbe:	46bd      	mov	sp, r7
 802bdc0:	bd80      	pop	{r7, pc}
 802bdc2:	bf00      	nop
 802bdc4:	0803b4ac 	.word	0x0803b4ac

0802bdc8 <set_base_change_matrix_from_precomp>:

// Set a regular base change matrix from a precomputed one
static inline void
set_base_change_matrix_from_precomp(basis_change_matrix_t *res, const precomp_basis_change_matrix_t *M)
{
 802bdc8:	b590      	push	{r4, r7, lr}
 802bdca:	b085      	sub	sp, #20
 802bdcc:	af00      	add	r7, sp, #0
 802bdce:	6078      	str	r0, [r7, #4]
 802bdd0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++)
 802bdd2:	2300      	movs	r3, #0
 802bdd4:	60fb      	str	r3, [r7, #12]
 802bdd6:	e02d      	b.n	802be34 <set_base_change_matrix_from_precomp+0x6c>
        for (int j = 0; j < 4; j++)
 802bdd8:	2300      	movs	r3, #0
 802bdda:	60bb      	str	r3, [r7, #8]
 802bddc:	e024      	b.n	802be28 <set_base_change_matrix_from_precomp+0x60>
            res->m[i][j] = FP2_CONSTANTS[M->m[i][j]];
 802bdde:	683a      	ldr	r2, [r7, #0]
 802bde0:	68fb      	ldr	r3, [r7, #12]
 802bde2:	009b      	lsls	r3, r3, #2
 802bde4:	441a      	add	r2, r3
 802bde6:	68bb      	ldr	r3, [r7, #8]
 802bde8:	4413      	add	r3, r2
 802bdea:	781b      	ldrb	r3, [r3, #0]
 802bdec:	461c      	mov	r4, r3
 802bdee:	6878      	ldr	r0, [r7, #4]
 802bdf0:	68bb      	ldr	r3, [r7, #8]
 802bdf2:	68f9      	ldr	r1, [r7, #12]
 802bdf4:	461a      	mov	r2, r3
 802bdf6:	00d2      	lsls	r2, r2, #3
 802bdf8:	441a      	add	r2, r3
 802bdfa:	00d3      	lsls	r3, r2, #3
 802bdfc:	461a      	mov	r2, r3
 802bdfe:	460b      	mov	r3, r1
 802be00:	00db      	lsls	r3, r3, #3
 802be02:	440b      	add	r3, r1
 802be04:	015b      	lsls	r3, r3, #5
 802be06:	4413      	add	r3, r2
 802be08:	18c1      	adds	r1, r0, r3
 802be0a:	4a0e      	ldr	r2, [pc, #56]	@ (802be44 <set_base_change_matrix_from_precomp+0x7c>)
 802be0c:	4623      	mov	r3, r4
 802be0e:	00db      	lsls	r3, r3, #3
 802be10:	4423      	add	r3, r4
 802be12:	00db      	lsls	r3, r3, #3
 802be14:	4413      	add	r3, r2
 802be16:	4608      	mov	r0, r1
 802be18:	4619      	mov	r1, r3
 802be1a:	2348      	movs	r3, #72	@ 0x48
 802be1c:	461a      	mov	r2, r3
 802be1e:	f009 ffbe 	bl	8035d9e <memcpy>
        for (int j = 0; j < 4; j++)
 802be22:	68bb      	ldr	r3, [r7, #8]
 802be24:	3301      	adds	r3, #1
 802be26:	60bb      	str	r3, [r7, #8]
 802be28:	68bb      	ldr	r3, [r7, #8]
 802be2a:	2b03      	cmp	r3, #3
 802be2c:	ddd7      	ble.n	802bdde <set_base_change_matrix_from_precomp+0x16>
    for (int i = 0; i < 4; i++)
 802be2e:	68fb      	ldr	r3, [r7, #12]
 802be30:	3301      	adds	r3, #1
 802be32:	60fb      	str	r3, [r7, #12]
 802be34:	68fb      	ldr	r3, [r7, #12]
 802be36:	2b03      	cmp	r3, #3
 802be38:	ddce      	ble.n	802bdd8 <set_base_change_matrix_from_precomp+0x10>
}
 802be3a:	bf00      	nop
 802be3c:	bf00      	nop
 802be3e:	3714      	adds	r7, #20
 802be40:	46bd      	mov	sp, r7
 802be42:	bd90      	pop	{r4, r7, pc}
 802be44:	0803b4ac 	.word	0x0803b4ac

0802be48 <choose_index_theta_point>:

static inline void
choose_index_theta_point(fp2_t *res, int ind, const theta_point_t *T)
{
 802be48:	b580      	push	{r7, lr}
 802be4a:	b086      	sub	sp, #24
 802be4c:	af00      	add	r7, sp, #0
 802be4e:	60f8      	str	r0, [r7, #12]
 802be50:	60b9      	str	r1, [r7, #8]
 802be52:	607a      	str	r2, [r7, #4]
    const fp2_t *src = NULL;
 802be54:	2300      	movs	r3, #0
 802be56:	617b      	str	r3, [r7, #20]
    switch (ind % 4) {
 802be58:	68bb      	ldr	r3, [r7, #8]
 802be5a:	425a      	negs	r2, r3
 802be5c:	f003 0303 	and.w	r3, r3, #3
 802be60:	f002 0203 	and.w	r2, r2, #3
 802be64:	bf58      	it	pl
 802be66:	4253      	negpl	r3, r2
 802be68:	2b03      	cmp	r3, #3
 802be6a:	d81a      	bhi.n	802bea2 <choose_index_theta_point+0x5a>
 802be6c:	a201      	add	r2, pc, #4	@ (adr r2, 802be74 <choose_index_theta_point+0x2c>)
 802be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be72:	bf00      	nop
 802be74:	0802be85 	.word	0x0802be85
 802be78:	0802be8b 	.word	0x0802be8b
 802be7c:	0802be93 	.word	0x0802be93
 802be80:	0802be9b 	.word	0x0802be9b
        case 0:
            src = &T->x;
 802be84:	687b      	ldr	r3, [r7, #4]
 802be86:	617b      	str	r3, [r7, #20]
            break;
 802be88:	e011      	b.n	802beae <choose_index_theta_point+0x66>
        case 1:
            src = &T->y;
 802be8a:	687b      	ldr	r3, [r7, #4]
 802be8c:	3348      	adds	r3, #72	@ 0x48
 802be8e:	617b      	str	r3, [r7, #20]
            break;
 802be90:	e00d      	b.n	802beae <choose_index_theta_point+0x66>
        case 2:
            src = &T->z;
 802be92:	687b      	ldr	r3, [r7, #4]
 802be94:	3390      	adds	r3, #144	@ 0x90
 802be96:	617b      	str	r3, [r7, #20]
            break;
 802be98:	e009      	b.n	802beae <choose_index_theta_point+0x66>
        case 3:
            src = &T->t;
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	33d8      	adds	r3, #216	@ 0xd8
 802be9e:	617b      	str	r3, [r7, #20]
            break;
 802bea0:	e005      	b.n	802beae <choose_index_theta_point+0x66>
        default:
            assert(0);
 802bea2:	4b07      	ldr	r3, [pc, #28]	@ (802bec0 <choose_index_theta_point+0x78>)
 802bea4:	4a07      	ldr	r2, [pc, #28]	@ (802bec4 <choose_index_theta_point+0x7c>)
 802bea6:	2131      	movs	r1, #49	@ 0x31
 802bea8:	4807      	ldr	r0, [pc, #28]	@ (802bec8 <choose_index_theta_point+0x80>)
 802beaa:	f009 f9c5 	bl	8035238 <__assert_func>
    }
    fp2_copy(res, src);
 802beae:	6979      	ldr	r1, [r7, #20]
 802beb0:	68f8      	ldr	r0, [r7, #12]
 802beb2:	f7e6 fdbb 	bl	8012a2c <fp2_copy>
}
 802beb6:	bf00      	nop
 802beb8:	3718      	adds	r7, #24
 802beba:	46bd      	mov	sp, r7
 802bebc:	bd80      	pop	{r7, pc}
 802bebe:	bf00      	nop
 802bec0:	08039118 	.word	0x08039118
 802bec4:	0803911c 	.word	0x0803911c
 802bec8:	08039120 	.word	0x08039120

0802becc <apply_isomorphism_general>:
static void
apply_isomorphism_general(theta_point_t *res,
                          const basis_change_matrix_t *M,
                          const theta_point_t *P,
                          const bool Pt_not_zero)
{
 802becc:	b590      	push	{r4, r7, lr}
 802bece:	b0df      	sub	sp, #380	@ 0x17c
 802bed0:	af00      	add	r7, sp, #0
 802bed2:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 802bed6:	f5a4 74b6 	sub.w	r4, r4, #364	@ 0x16c
 802beda:	6020      	str	r0, [r4, #0]
 802bedc:	f507 70bc 	add.w	r0, r7, #376	@ 0x178
 802bee0:	f5a0 70b8 	sub.w	r0, r0, #368	@ 0x170
 802bee4:	6001      	str	r1, [r0, #0]
 802bee6:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 802beea:	f5a1 71ba 	sub.w	r1, r1, #372	@ 0x174
 802beee:	600a      	str	r2, [r1, #0]
 802bef0:	461a      	mov	r2, r3
 802bef2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bef6:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 802befa:	701a      	strb	r2, [r3, #0]
    fp2_t x1;
    theta_point_t temp;

    fp2_mul(&temp.x, &P->x, &M->m[0][0]);
 802befc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf00:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802bf04:	6819      	ldr	r1, [r3, #0]
 802bf06:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf0a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802bf0e:	681a      	ldr	r2, [r3, #0]
 802bf10:	f107 0310 	add.w	r3, r7, #16
 802bf14:	4618      	mov	r0, r3
 802bf16:	f7e6 fe0a 	bl	8012b2e <fp2_mul>
    fp2_mul(&x1, &P->y, &M->m[0][1]);
 802bf1a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf1e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802bf22:	681b      	ldr	r3, [r3, #0]
 802bf24:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802bf28:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802bf30:	681b      	ldr	r3, [r3, #0]
 802bf32:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802bf36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802bf3a:	4618      	mov	r0, r3
 802bf3c:	f7e6 fdf7 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.x, &temp.x, &x1);
 802bf40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802bf44:	f107 0110 	add.w	r1, r7, #16
 802bf48:	f107 0310 	add.w	r3, r7, #16
 802bf4c:	4618      	mov	r0, r3
 802bf4e:	f7e6 fd85 	bl	8012a5c <fp2_add>
    fp2_mul(&x1, &P->z, &M->m[0][2]);
 802bf52:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf56:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802bf5a:	681b      	ldr	r3, [r3, #0]
 802bf5c:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802bf60:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf64:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802bf68:	681b      	ldr	r3, [r3, #0]
 802bf6a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802bf6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802bf72:	4618      	mov	r0, r3
 802bf74:	f7e6 fddb 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.x, &temp.x, &x1);
 802bf78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802bf7c:	f107 0110 	add.w	r1, r7, #16
 802bf80:	f107 0310 	add.w	r3, r7, #16
 802bf84:	4618      	mov	r0, r3
 802bf86:	f7e6 fd69 	bl	8012a5c <fp2_add>

    fp2_mul(&temp.y, &P->x, &M->m[1][0]);
 802bf8a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf8e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802bf92:	6819      	ldr	r1, [r3, #0]
 802bf94:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bf98:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802bf9c:	681b      	ldr	r3, [r3, #0]
 802bf9e:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802bfa2:	f107 0310 	add.w	r3, r7, #16
 802bfa6:	3348      	adds	r3, #72	@ 0x48
 802bfa8:	4618      	mov	r0, r3
 802bfaa:	f7e6 fdc0 	bl	8012b2e <fp2_mul>
    fp2_mul(&x1, &P->y, &M->m[1][1]);
 802bfae:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bfb2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802bfb6:	681b      	ldr	r3, [r3, #0]
 802bfb8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802bfbc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bfc0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802bfc4:	681b      	ldr	r3, [r3, #0]
 802bfc6:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 802bfca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802bfce:	4618      	mov	r0, r3
 802bfd0:	f7e6 fdad 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.y, &temp.y, &x1);
 802bfd4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802bfd8:	f107 0310 	add.w	r3, r7, #16
 802bfdc:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802bfe0:	f107 0310 	add.w	r3, r7, #16
 802bfe4:	3348      	adds	r3, #72	@ 0x48
 802bfe6:	4618      	mov	r0, r3
 802bfe8:	f7e6 fd38 	bl	8012a5c <fp2_add>
    fp2_mul(&x1, &P->z, &M->m[1][2]);
 802bfec:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bff0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802bff4:	681b      	ldr	r3, [r3, #0]
 802bff6:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802bffa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802bffe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c002:	681b      	ldr	r3, [r3, #0]
 802c004:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 802c008:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c00c:	4618      	mov	r0, r3
 802c00e:	f7e6 fd8e 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.y, &temp.y, &x1);
 802c012:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c016:	f107 0310 	add.w	r3, r7, #16
 802c01a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802c01e:	f107 0310 	add.w	r3, r7, #16
 802c022:	3348      	adds	r3, #72	@ 0x48
 802c024:	4618      	mov	r0, r3
 802c026:	f7e6 fd19 	bl	8012a5c <fp2_add>

    fp2_mul(&temp.z, &P->x, &M->m[2][0]);
 802c02a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c02e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c032:	6819      	ldr	r1, [r3, #0]
 802c034:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c038:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c03c:	681b      	ldr	r3, [r3, #0]
 802c03e:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 802c042:	f107 0310 	add.w	r3, r7, #16
 802c046:	3390      	adds	r3, #144	@ 0x90
 802c048:	4618      	mov	r0, r3
 802c04a:	f7e6 fd70 	bl	8012b2e <fp2_mul>
    fp2_mul(&x1, &P->y, &M->m[2][1]);
 802c04e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c052:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c056:	681b      	ldr	r3, [r3, #0]
 802c058:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802c05c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c060:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c064:	681b      	ldr	r3, [r3, #0]
 802c066:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 802c06a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c06e:	4618      	mov	r0, r3
 802c070:	f7e6 fd5d 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.z, &temp.z, &x1);
 802c074:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c078:	f107 0310 	add.w	r3, r7, #16
 802c07c:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c080:	f107 0310 	add.w	r3, r7, #16
 802c084:	3390      	adds	r3, #144	@ 0x90
 802c086:	4618      	mov	r0, r3
 802c088:	f7e6 fce8 	bl	8012a5c <fp2_add>
    fp2_mul(&x1, &P->z, &M->m[2][2]);
 802c08c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c090:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c094:	681b      	ldr	r3, [r3, #0]
 802c096:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c09a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c09e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c0a2:	681b      	ldr	r3, [r3, #0]
 802c0a4:	f503 7234 	add.w	r2, r3, #720	@ 0x2d0
 802c0a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c0ac:	4618      	mov	r0, r3
 802c0ae:	f7e6 fd3e 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.z, &temp.z, &x1);
 802c0b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c0b6:	f107 0310 	add.w	r3, r7, #16
 802c0ba:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c0be:	f107 0310 	add.w	r3, r7, #16
 802c0c2:	3390      	adds	r3, #144	@ 0x90
 802c0c4:	4618      	mov	r0, r3
 802c0c6:	f7e6 fcc9 	bl	8012a5c <fp2_add>

    fp2_mul(&temp.t, &P->x, &M->m[3][0]);
 802c0ca:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c0ce:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c0d2:	6819      	ldr	r1, [r3, #0]
 802c0d4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c0d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c0dc:	681b      	ldr	r3, [r3, #0]
 802c0de:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 802c0e2:	f107 0310 	add.w	r3, r7, #16
 802c0e6:	33d8      	adds	r3, #216	@ 0xd8
 802c0e8:	4618      	mov	r0, r3
 802c0ea:	f7e6 fd20 	bl	8012b2e <fp2_mul>
    fp2_mul(&x1, &P->y, &M->m[3][1]);
 802c0ee:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c0f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c0f6:	681b      	ldr	r3, [r3, #0]
 802c0f8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802c0fc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c100:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c104:	681b      	ldr	r3, [r3, #0]
 802c106:	f503 726a 	add.w	r2, r3, #936	@ 0x3a8
 802c10a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c10e:	4618      	mov	r0, r3
 802c110:	f7e6 fd0d 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.t, &temp.t, &x1);
 802c114:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c118:	f107 0310 	add.w	r3, r7, #16
 802c11c:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c120:	f107 0310 	add.w	r3, r7, #16
 802c124:	33d8      	adds	r3, #216	@ 0xd8
 802c126:	4618      	mov	r0, r3
 802c128:	f7e6 fc98 	bl	8012a5c <fp2_add>
    fp2_mul(&x1, &P->z, &M->m[3][2]);
 802c12c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c130:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c134:	681b      	ldr	r3, [r3, #0]
 802c136:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c13a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c13e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c142:	681b      	ldr	r3, [r3, #0]
 802c144:	f503 727c 	add.w	r2, r3, #1008	@ 0x3f0
 802c148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c14c:	4618      	mov	r0, r3
 802c14e:	f7e6 fcee 	bl	8012b2e <fp2_mul>
    fp2_add(&temp.t, &temp.t, &x1);
 802c152:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c156:	f107 0310 	add.w	r3, r7, #16
 802c15a:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c15e:	f107 0310 	add.w	r3, r7, #16
 802c162:	33d8      	adds	r3, #216	@ 0xd8
 802c164:	4618      	mov	r0, r3
 802c166:	f7e6 fc79 	bl	8012a5c <fp2_add>

    if (Pt_not_zero) {
 802c16a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c16e:	f2a3 1375 	subw	r3, r3, #373	@ 0x175
 802c172:	781b      	ldrb	r3, [r3, #0]
 802c174:	2b00      	cmp	r3, #0
 802c176:	d078      	beq.n	802c26a <apply_isomorphism_general+0x39e>
        fp2_mul(&x1, &P->t, &M->m[0][3]);
 802c178:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c17c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c180:	681b      	ldr	r3, [r3, #0]
 802c182:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c186:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c18a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c18e:	681b      	ldr	r3, [r3, #0]
 802c190:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802c194:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c198:	4618      	mov	r0, r3
 802c19a:	f7e6 fcc8 	bl	8012b2e <fp2_mul>
        fp2_add(&temp.x, &temp.x, &x1);
 802c19e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c1a2:	f107 0110 	add.w	r1, r7, #16
 802c1a6:	f107 0310 	add.w	r3, r7, #16
 802c1aa:	4618      	mov	r0, r3
 802c1ac:	f7e6 fc56 	bl	8012a5c <fp2_add>

        fp2_mul(&x1, &P->t, &M->m[1][3]);
 802c1b0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c1b4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c1b8:	681b      	ldr	r3, [r3, #0]
 802c1ba:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c1be:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c1c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c1c6:	681b      	ldr	r3, [r3, #0]
 802c1c8:	f503 72fc 	add.w	r2, r3, #504	@ 0x1f8
 802c1cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c1d0:	4618      	mov	r0, r3
 802c1d2:	f7e6 fcac 	bl	8012b2e <fp2_mul>
        fp2_add(&temp.y, &temp.y, &x1);
 802c1d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c1da:	f107 0310 	add.w	r3, r7, #16
 802c1de:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802c1e2:	f107 0310 	add.w	r3, r7, #16
 802c1e6:	3348      	adds	r3, #72	@ 0x48
 802c1e8:	4618      	mov	r0, r3
 802c1ea:	f7e6 fc37 	bl	8012a5c <fp2_add>

        fp2_mul(&x1, &P->t, &M->m[2][3]);
 802c1ee:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c1f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c1f6:	681b      	ldr	r3, [r3, #0]
 802c1f8:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c1fc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c200:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c204:	681b      	ldr	r3, [r3, #0]
 802c206:	f503 7246 	add.w	r2, r3, #792	@ 0x318
 802c20a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c20e:	4618      	mov	r0, r3
 802c210:	f7e6 fc8d 	bl	8012b2e <fp2_mul>
        fp2_add(&temp.z, &temp.z, &x1);
 802c214:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c218:	f107 0310 	add.w	r3, r7, #16
 802c21c:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c220:	f107 0310 	add.w	r3, r7, #16
 802c224:	3390      	adds	r3, #144	@ 0x90
 802c226:	4618      	mov	r0, r3
 802c228:	f7e6 fc18 	bl	8012a5c <fp2_add>

        fp2_mul(&x1, &P->t, &M->m[3][3]);
 802c22c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c230:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 802c234:	681b      	ldr	r3, [r3, #0]
 802c236:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c23a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c23e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 802c242:	681b      	ldr	r3, [r3, #0]
 802c244:	f503 6287 	add.w	r2, r3, #1080	@ 0x438
 802c248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c24c:	4618      	mov	r0, r3
 802c24e:	f7e6 fc6e 	bl	8012b2e <fp2_mul>
        fp2_add(&temp.t, &temp.t, &x1);
 802c252:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802c256:	f107 0310 	add.w	r3, r7, #16
 802c25a:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c25e:	f107 0310 	add.w	r3, r7, #16
 802c262:	33d8      	adds	r3, #216	@ 0xd8
 802c264:	4618      	mov	r0, r3
 802c266:	f7e6 fbf9 	bl	8012a5c <fp2_add>
    }

    fp2_copy(&res->x, &temp.x);
 802c26a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c26e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 802c272:	681b      	ldr	r3, [r3, #0]
 802c274:	f107 0210 	add.w	r2, r7, #16
 802c278:	4611      	mov	r1, r2
 802c27a:	4618      	mov	r0, r3
 802c27c:	f7e6 fbd6 	bl	8012a2c <fp2_copy>
    fp2_copy(&res->y, &temp.y);
 802c280:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c284:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 802c288:	681b      	ldr	r3, [r3, #0]
 802c28a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802c28e:	f107 0310 	add.w	r3, r7, #16
 802c292:	3348      	adds	r3, #72	@ 0x48
 802c294:	4619      	mov	r1, r3
 802c296:	4610      	mov	r0, r2
 802c298:	f7e6 fbc8 	bl	8012a2c <fp2_copy>
    fp2_copy(&res->z, &temp.z);
 802c29c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c2a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 802c2a4:	681b      	ldr	r3, [r3, #0]
 802c2a6:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802c2aa:	f107 0310 	add.w	r3, r7, #16
 802c2ae:	3390      	adds	r3, #144	@ 0x90
 802c2b0:	4619      	mov	r1, r3
 802c2b2:	4610      	mov	r0, r2
 802c2b4:	f7e6 fbba 	bl	8012a2c <fp2_copy>
    fp2_copy(&res->t, &temp.t);
 802c2b8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802c2bc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 802c2c0:	681b      	ldr	r3, [r3, #0]
 802c2c2:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802c2c6:	f107 0310 	add.w	r3, r7, #16
 802c2ca:	33d8      	adds	r3, #216	@ 0xd8
 802c2cc:	4619      	mov	r1, r3
 802c2ce:	4610      	mov	r0, r2
 802c2d0:	f7e6 fbac 	bl	8012a2c <fp2_copy>
}
 802c2d4:	bf00      	nop
 802c2d6:	f507 77be 	add.w	r7, r7, #380	@ 0x17c
 802c2da:	46bd      	mov	sp, r7
 802c2dc:	bd90      	pop	{r4, r7, pc}

0802c2de <apply_isomorphism>:

static void
apply_isomorphism(theta_point_t *res, const basis_change_matrix_t *M, const theta_point_t *P)
{
 802c2de:	b580      	push	{r7, lr}
 802c2e0:	b084      	sub	sp, #16
 802c2e2:	af00      	add	r7, sp, #0
 802c2e4:	60f8      	str	r0, [r7, #12]
 802c2e6:	60b9      	str	r1, [r7, #8]
 802c2e8:	607a      	str	r2, [r7, #4]
    apply_isomorphism_general(res, M, P, true);
 802c2ea:	2301      	movs	r3, #1
 802c2ec:	687a      	ldr	r2, [r7, #4]
 802c2ee:	68b9      	ldr	r1, [r7, #8]
 802c2f0:	68f8      	ldr	r0, [r7, #12]
 802c2f2:	f7ff fdeb 	bl	802becc <apply_isomorphism_general>
}
 802c2f6:	bf00      	nop
 802c2f8:	3710      	adds	r7, #16
 802c2fa:	46bd      	mov	sp, r7
 802c2fc:	bd80      	pop	{r7, pc}

0802c2fe <base_change_matrix_multiplication>:
// set res = M1 * M2 with matrix multiplication
static void
base_change_matrix_multiplication(basis_change_matrix_t *res,
                                  const basis_change_matrix_t *M1,
                                  const basis_change_matrix_t *M2)
{
 802c2fe:	b590      	push	{r4, r7, lr}
 802c300:	f2ad 5d7c 	subw	sp, sp, #1404	@ 0x57c
 802c304:	af00      	add	r7, sp, #0
 802c306:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c30a:	f2a3 536c 	subw	r3, r3, #1388	@ 0x56c
 802c30e:	6018      	str	r0, [r3, #0]
 802c310:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c314:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
 802c318:	6019      	str	r1, [r3, #0]
 802c31a:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c31e:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802c322:	601a      	str	r2, [r3, #0]
    basis_change_matrix_t tmp;
    fp2_t sum, m_ik, m_kj;
    for (int i = 0; i < 4; i++) {
 802c324:	2300      	movs	r3, #0
 802c326:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 802c32a:	e08f      	b.n	802c44c <base_change_matrix_multiplication+0x14e>
        for (int j = 0; j < 4; j++) {
 802c32c:	2300      	movs	r3, #0
 802c32e:	f8c7 3570 	str.w	r3, [r7, #1392]	@ 0x570
 802c332:	e081      	b.n	802c438 <base_change_matrix_multiplication+0x13a>
            fp2_set_zero(&sum);
 802c334:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802c338:	4618      	mov	r0, r3
 802c33a:	f7e6 fb1e 	bl	801297a <fp2_set_zero>
            for (int k = 0; k < 4; k++) {
 802c33e:	2300      	movs	r3, #0
 802c340:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 802c344:	e052      	b.n	802c3ec <base_change_matrix_multiplication+0xee>
                m_ik = M1->m[i][k];
 802c346:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c34a:	f2a3 541c 	subw	r4, r3, #1308	@ 0x51c
 802c34e:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c352:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
 802c356:	6818      	ldr	r0, [r3, #0]
 802c358:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 802c35c:	f8d7 1574 	ldr.w	r1, [r7, #1396]	@ 0x574
 802c360:	461a      	mov	r2, r3
 802c362:	00d2      	lsls	r2, r2, #3
 802c364:	441a      	add	r2, r3
 802c366:	00d3      	lsls	r3, r2, #3
 802c368:	461a      	mov	r2, r3
 802c36a:	460b      	mov	r3, r1
 802c36c:	00db      	lsls	r3, r3, #3
 802c36e:	440b      	add	r3, r1
 802c370:	015b      	lsls	r3, r3, #5
 802c372:	4413      	add	r3, r2
 802c374:	4403      	add	r3, r0
 802c376:	4620      	mov	r0, r4
 802c378:	4619      	mov	r1, r3
 802c37a:	2348      	movs	r3, #72	@ 0x48
 802c37c:	461a      	mov	r2, r3
 802c37e:	f009 fd0e 	bl	8035d9e <memcpy>
                m_kj = M2->m[k][j];
 802c382:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c386:	f2a3 5464 	subw	r4, r3, #1380	@ 0x564
 802c38a:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c38e:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802c392:	6818      	ldr	r0, [r3, #0]
 802c394:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
 802c398:	f8d7 156c 	ldr.w	r1, [r7, #1388]	@ 0x56c
 802c39c:	461a      	mov	r2, r3
 802c39e:	00d2      	lsls	r2, r2, #3
 802c3a0:	441a      	add	r2, r3
 802c3a2:	00d3      	lsls	r3, r2, #3
 802c3a4:	461a      	mov	r2, r3
 802c3a6:	460b      	mov	r3, r1
 802c3a8:	00db      	lsls	r3, r3, #3
 802c3aa:	440b      	add	r3, r1
 802c3ac:	015b      	lsls	r3, r3, #5
 802c3ae:	4413      	add	r3, r2
 802c3b0:	4403      	add	r3, r0
 802c3b2:	4620      	mov	r0, r4
 802c3b4:	4619      	mov	r1, r3
 802c3b6:	2348      	movs	r3, #72	@ 0x48
 802c3b8:	461a      	mov	r2, r3
 802c3ba:	f009 fcf0 	bl	8035d9e <memcpy>
                fp2_mul(&m_ik, &m_ik, &m_kj);
 802c3be:	f107 0214 	add.w	r2, r7, #20
 802c3c2:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 802c3c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802c3ca:	4618      	mov	r0, r3
 802c3cc:	f7e6 fbaf 	bl	8012b2e <fp2_mul>
                fp2_add(&sum, &sum, &m_ik);
 802c3d0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 802c3d4:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 802c3d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802c3dc:	4618      	mov	r0, r3
 802c3de:	f7e6 fb3d 	bl	8012a5c <fp2_add>
            for (int k = 0; k < 4; k++) {
 802c3e2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 802c3e6:	3301      	adds	r3, #1
 802c3e8:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 802c3ec:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 802c3f0:	2b03      	cmp	r3, #3
 802c3f2:	dda8      	ble.n	802c346 <base_change_matrix_multiplication+0x48>
            }
            tmp.m[i][j] = sum;
 802c3f4:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c3f8:	f2a3 408c 	subw	r0, r3, #1164	@ 0x48c
 802c3fc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
 802c400:	f8d7 1574 	ldr.w	r1, [r7, #1396]	@ 0x574
 802c404:	461a      	mov	r2, r3
 802c406:	00d2      	lsls	r2, r2, #3
 802c408:	441a      	add	r2, r3
 802c40a:	00d3      	lsls	r3, r2, #3
 802c40c:	461a      	mov	r2, r3
 802c40e:	460b      	mov	r3, r1
 802c410:	00db      	lsls	r3, r3, #3
 802c412:	440b      	add	r3, r1
 802c414:	015b      	lsls	r3, r3, #5
 802c416:	4413      	add	r3, r2
 802c418:	18c2      	adds	r2, r0, r3
 802c41a:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c41e:	f2a3 43d4 	subw	r3, r3, #1236	@ 0x4d4
 802c422:	4610      	mov	r0, r2
 802c424:	4619      	mov	r1, r3
 802c426:	2348      	movs	r3, #72	@ 0x48
 802c428:	461a      	mov	r2, r3
 802c42a:	f009 fcb8 	bl	8035d9e <memcpy>
        for (int j = 0; j < 4; j++) {
 802c42e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
 802c432:	3301      	adds	r3, #1
 802c434:	f8c7 3570 	str.w	r3, [r7, #1392]	@ 0x570
 802c438:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
 802c43c:	2b03      	cmp	r3, #3
 802c43e:	f77f af79 	ble.w	802c334 <base_change_matrix_multiplication+0x36>
    for (int i = 0; i < 4; i++) {
 802c442:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 802c446:	3301      	adds	r3, #1
 802c448:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 802c44c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 802c450:	2b03      	cmp	r3, #3
 802c452:	f77f af6b 	ble.w	802c32c <base_change_matrix_multiplication+0x2e>
        }
    }
    *res = tmp;
 802c456:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c45a:	f2a3 536c 	subw	r3, r3, #1388	@ 0x56c
 802c45e:	681a      	ldr	r2, [r3, #0]
 802c460:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 802c464:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 802c468:	4610      	mov	r0, r2
 802c46a:	4619      	mov	r1, r3
 802c46c:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 802c470:	461a      	mov	r2, r3
 802c472:	f009 fc94 	bl	8035d9e <memcpy>
}
 802c476:	bf00      	nop
 802c478:	f207 577c 	addw	r7, r7, #1404	@ 0x57c
 802c47c:	46bd      	mov	sp, r7
 802c47e:	bd90      	pop	{r4, r7, pc}

0802c480 <base_change>:

// compute the theta_point corresponding to the couple of point T on an elliptic product
static void
base_change(theta_point_t *out, const theta_gluing_t *phi, const theta_couple_point_t *T)
{
 802c480:	b580      	push	{r7, lr}
 802c482:	b0cc      	sub	sp, #304	@ 0x130
 802c484:	af00      	add	r7, sp, #0
 802c486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c48a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802c48e:	6018      	str	r0, [r3, #0]
 802c490:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c494:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802c498:	6019      	str	r1, [r3, #0]
 802c49a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c49e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c4a2:	601a      	str	r2, [r3, #0]
    theta_point_t null_point;

    // null_point = (a : b : c : d)
    // a = P1.x P2.x, b = P1.x P2.z, c = P1.z P2.x, d = P1.z P2.z
    fp2_mul(&null_point.x, &T->P1.x, &T->P2.x);
 802c4a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c4a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c4ac:	6819      	ldr	r1, [r3, #0]
 802c4ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c4b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c4b6:	681b      	ldr	r3, [r3, #0]
 802c4b8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802c4bc:	f107 0310 	add.w	r3, r7, #16
 802c4c0:	4618      	mov	r0, r3
 802c4c2:	f7e6 fb34 	bl	8012b2e <fp2_mul>
    fp2_mul(&null_point.y, &T->P1.x, &T->P2.z);
 802c4c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c4ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c4ce:	6819      	ldr	r1, [r3, #0]
 802c4d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c4d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c4d8:	681b      	ldr	r3, [r3, #0]
 802c4da:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802c4de:	f107 0310 	add.w	r3, r7, #16
 802c4e2:	3348      	adds	r3, #72	@ 0x48
 802c4e4:	4618      	mov	r0, r3
 802c4e6:	f7e6 fb22 	bl	8012b2e <fp2_mul>
    fp2_mul(&null_point.z, &T->P2.x, &T->P1.z);
 802c4ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c4ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c4f2:	681b      	ldr	r3, [r3, #0]
 802c4f4:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c4f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c4fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c500:	681b      	ldr	r3, [r3, #0]
 802c502:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802c506:	f107 0310 	add.w	r3, r7, #16
 802c50a:	3390      	adds	r3, #144	@ 0x90
 802c50c:	4618      	mov	r0, r3
 802c50e:	f7e6 fb0e 	bl	8012b2e <fp2_mul>
    fp2_mul(&null_point.t, &T->P1.z, &T->P2.z);
 802c512:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c516:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c51a:	681b      	ldr	r3, [r3, #0]
 802c51c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802c520:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c524:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802c528:	681b      	ldr	r3, [r3, #0]
 802c52a:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802c52e:	f107 0310 	add.w	r3, r7, #16
 802c532:	33d8      	adds	r3, #216	@ 0xd8
 802c534:	4618      	mov	r0, r3
 802c536:	f7e6 fafa 	bl	8012b2e <fp2_mul>

    // Apply the basis change
    apply_isomorphism(out, &phi->M, &null_point);
 802c53a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c53e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802c542:	681b      	ldr	r3, [r3, #0]
 802c544:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 802c548:	f107 0210 	add.w	r2, r7, #16
 802c54c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c550:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802c554:	6818      	ldr	r0, [r3, #0]
 802c556:	f7ff fec2 	bl	802c2de <apply_isomorphism>
}
 802c55a:	bf00      	nop
 802c55c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 802c560:	46bd      	mov	sp, r7
 802c562:	bd80      	pop	{r7, pc}

0802c564 <action_by_translation_z_and_det>:

static void
action_by_translation_z_and_det(fp2_t *z_inv, fp2_t *det_inv, const ec_point_t *P4, const ec_point_t *P2)
{
 802c564:	b580      	push	{r7, lr}
 802c566:	b096      	sub	sp, #88	@ 0x58
 802c568:	af00      	add	r7, sp, #0
 802c56a:	60f8      	str	r0, [r7, #12]
 802c56c:	60b9      	str	r1, [r7, #8]
 802c56e:	607a      	str	r2, [r7, #4]
 802c570:	603b      	str	r3, [r7, #0]
    // Store the Z-coordinate to invert
    fp2_copy(z_inv, &P4->z);
 802c572:	687b      	ldr	r3, [r7, #4]
 802c574:	3348      	adds	r3, #72	@ 0x48
 802c576:	4619      	mov	r1, r3
 802c578:	68f8      	ldr	r0, [r7, #12]
 802c57a:	f7e6 fa57 	bl	8012a2c <fp2_copy>

    // Then collect detij = xij wij - uij zij
    fp2_t tmp;
    fp2_mul(det_inv, &P4->x, &P2->z);
 802c57e:	6879      	ldr	r1, [r7, #4]
 802c580:	683b      	ldr	r3, [r7, #0]
 802c582:	3348      	adds	r3, #72	@ 0x48
 802c584:	461a      	mov	r2, r3
 802c586:	68b8      	ldr	r0, [r7, #8]
 802c588:	f7e6 fad1 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &P4->z, &P2->x);
 802c58c:	687b      	ldr	r3, [r7, #4]
 802c58e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802c592:	683a      	ldr	r2, [r7, #0]
 802c594:	f107 0310 	add.w	r3, r7, #16
 802c598:	4618      	mov	r0, r3
 802c59a:	f7e6 fac8 	bl	8012b2e <fp2_mul>
    fp2_sub(det_inv, det_inv, &tmp);
 802c59e:	f107 0310 	add.w	r3, r7, #16
 802c5a2:	461a      	mov	r2, r3
 802c5a4:	68b9      	ldr	r1, [r7, #8]
 802c5a6:	68b8      	ldr	r0, [r7, #8]
 802c5a8:	f7e6 fa8e 	bl	8012ac8 <fp2_sub>
}
 802c5ac:	bf00      	nop
 802c5ae:	3758      	adds	r7, #88	@ 0x58
 802c5b0:	46bd      	mov	sp, r7
 802c5b2:	bd80      	pop	{r7, pc}

0802c5b4 <action_by_translation_compute_matrix>:
action_by_translation_compute_matrix(translation_matrix_t *G,
                                     const ec_point_t *P4,
                                     const ec_point_t *P2,
                                     const fp2_t *z_inv,
                                     const fp2_t *det_inv)
{
 802c5b4:	b580      	push	{r7, lr}
 802c5b6:	b096      	sub	sp, #88	@ 0x58
 802c5b8:	af00      	add	r7, sp, #0
 802c5ba:	60f8      	str	r0, [r7, #12]
 802c5bc:	60b9      	str	r1, [r7, #8]
 802c5be:	607a      	str	r2, [r7, #4]
 802c5c0:	603b      	str	r3, [r7, #0]
    fp2_t tmp;

    // Gi.g10 = uij xij /detij - xij/zij
    fp2_mul(&tmp, &P4->x, z_inv);
 802c5c2:	68b9      	ldr	r1, [r7, #8]
 802c5c4:	f107 0310 	add.w	r3, r7, #16
 802c5c8:	683a      	ldr	r2, [r7, #0]
 802c5ca:	4618      	mov	r0, r3
 802c5cc:	f7e6 faaf 	bl	8012b2e <fp2_mul>
    fp2_mul(&G->g10, &P4->x, &P2->x);
 802c5d0:	68fb      	ldr	r3, [r7, #12]
 802c5d2:	3390      	adds	r3, #144	@ 0x90
 802c5d4:	68b9      	ldr	r1, [r7, #8]
 802c5d6:	687a      	ldr	r2, [r7, #4]
 802c5d8:	4618      	mov	r0, r3
 802c5da:	f7e6 faa8 	bl	8012b2e <fp2_mul>
    fp2_mul(&G->g10, &G->g10, det_inv);
 802c5de:	68fb      	ldr	r3, [r7, #12]
 802c5e0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802c5e4:	68fb      	ldr	r3, [r7, #12]
 802c5e6:	3390      	adds	r3, #144	@ 0x90
 802c5e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802c5ea:	4619      	mov	r1, r3
 802c5ec:	f7e6 fa9f 	bl	8012b2e <fp2_mul>
    fp2_sub(&G->g10, &G->g10, &tmp);
 802c5f0:	68fb      	ldr	r3, [r7, #12]
 802c5f2:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802c5f6:	68fb      	ldr	r3, [r7, #12]
 802c5f8:	3390      	adds	r3, #144	@ 0x90
 802c5fa:	f107 0210 	add.w	r2, r7, #16
 802c5fe:	4619      	mov	r1, r3
 802c600:	f7e6 fa62 	bl	8012ac8 <fp2_sub>

    // Gi.g11 = uij zij * detij
    fp2_mul(&G->g11, &P2->x, det_inv);
 802c604:	68fb      	ldr	r3, [r7, #12]
 802c606:	33d8      	adds	r3, #216	@ 0xd8
 802c608:	6879      	ldr	r1, [r7, #4]
 802c60a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802c60c:	4618      	mov	r0, r3
 802c60e:	f7e6 fa8e 	bl	8012b2e <fp2_mul>
    fp2_mul(&G->g11, &G->g11, &P4->z);
 802c612:	68fb      	ldr	r3, [r7, #12]
 802c614:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802c618:	68fb      	ldr	r3, [r7, #12]
 802c61a:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802c61e:	68bb      	ldr	r3, [r7, #8]
 802c620:	3348      	adds	r3, #72	@ 0x48
 802c622:	461a      	mov	r2, r3
 802c624:	f7e6 fa83 	bl	8012b2e <fp2_mul>

    // Gi.g00 = -Gi.g11
    fp2_neg(&G->g00, &G->g11);
 802c628:	68fa      	ldr	r2, [r7, #12]
 802c62a:	68fb      	ldr	r3, [r7, #12]
 802c62c:	33d8      	adds	r3, #216	@ 0xd8
 802c62e:	4619      	mov	r1, r3
 802c630:	4610      	mov	r0, r2
 802c632:	f7e6 fa64 	bl	8012afe <fp2_neg>

    // Gi.g01 = - wij zij detij
    fp2_mul(&G->g01, &P2->z, det_inv);
 802c636:	68fb      	ldr	r3, [r7, #12]
 802c638:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802c63c:	687b      	ldr	r3, [r7, #4]
 802c63e:	3348      	adds	r3, #72	@ 0x48
 802c640:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802c642:	4619      	mov	r1, r3
 802c644:	f7e6 fa73 	bl	8012b2e <fp2_mul>
    fp2_mul(&G->g01, &G->g01, &P4->z);
 802c648:	68fb      	ldr	r3, [r7, #12]
 802c64a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802c64e:	68fb      	ldr	r3, [r7, #12]
 802c650:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802c654:	68bb      	ldr	r3, [r7, #8]
 802c656:	3348      	adds	r3, #72	@ 0x48
 802c658:	461a      	mov	r2, r3
 802c65a:	f7e6 fa68 	bl	8012b2e <fp2_mul>
    fp2_neg(&G->g01, &G->g01);
 802c65e:	68fb      	ldr	r3, [r7, #12]
 802c660:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802c664:	68fb      	ldr	r3, [r7, #12]
 802c666:	3348      	adds	r3, #72	@ 0x48
 802c668:	4619      	mov	r1, r3
 802c66a:	4610      	mov	r0, r2
 802c66c:	f7e6 fa47 	bl	8012afe <fp2_neg>
}
 802c670:	bf00      	nop
 802c672:	3758      	adds	r7, #88	@ 0x58
 802c674:	46bd      	mov	sp, r7
 802c676:	bd80      	pop	{r7, pc}

0802c678 <verify_two_torsion>:
// Returns 1 if the basis is as expected and 0 otherwise
// We only expect this to fail for malformed signatures, so
// do not require this to run in constant time.
static int
verify_two_torsion(const theta_couple_point_t *K1_2, const theta_couple_point_t *K2_2, const theta_couple_curve_t *E12)
{
 802c678:	b590      	push	{r4, r7, lr}
 802c67a:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 802c67e:	af00      	add	r7, sp, #0
 802c680:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c684:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 802c688:	6018      	str	r0, [r3, #0]
 802c68a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c68e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 802c692:	6019      	str	r1, [r3, #0]
 802c694:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c698:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 802c69c:	601a      	str	r2, [r3, #0]
    // First check if any point in K1_2 or K2_2 is zero, if they are then the points did not have
    // order 8 when we started gluing
    if (ec_is_zero(&K1_2->P1) | ec_is_zero(&K1_2->P2) | ec_is_zero(&K2_2->P1) | ec_is_zero(&K2_2->P2)) {
 802c69e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c6a2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 802c6a6:	681b      	ldr	r3, [r3, #0]
 802c6a8:	4618      	mov	r0, r3
 802c6aa:	f7de ffbc 	bl	800b626 <ec_is_zero>
 802c6ae:	4604      	mov	r4, r0
 802c6b0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c6b4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 802c6b8:	681b      	ldr	r3, [r3, #0]
 802c6ba:	3390      	adds	r3, #144	@ 0x90
 802c6bc:	4618      	mov	r0, r3
 802c6be:	f7de ffb2 	bl	800b626 <ec_is_zero>
 802c6c2:	4603      	mov	r3, r0
 802c6c4:	431c      	orrs	r4, r3
 802c6c6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c6ca:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 802c6ce:	681b      	ldr	r3, [r3, #0]
 802c6d0:	4618      	mov	r0, r3
 802c6d2:	f7de ffa8 	bl	800b626 <ec_is_zero>
 802c6d6:	4603      	mov	r3, r0
 802c6d8:	431c      	orrs	r4, r3
 802c6da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c6de:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 802c6e2:	681b      	ldr	r3, [r3, #0]
 802c6e4:	3390      	adds	r3, #144	@ 0x90
 802c6e6:	4618      	mov	r0, r3
 802c6e8:	f7de ff9d 	bl	800b626 <ec_is_zero>
 802c6ec:	4603      	mov	r3, r0
 802c6ee:	4323      	orrs	r3, r4
 802c6f0:	2b00      	cmp	r3, #0
 802c6f2:	d001      	beq.n	802c6f8 <verify_two_torsion+0x80>
        return 0;
 802c6f4:	2300      	movs	r3, #0
 802c6f6:	e063      	b.n	802c7c0 <verify_two_torsion+0x148>
    }

    // Now ensure that P1, Q1 and P2, Q2 are independent. For points of order two this means
    // that they're not the same
    if (ec_is_equal(&K1_2->P1, &K2_2->P1) | ec_is_equal(&K1_2->P2, &K2_2->P2)) {
 802c6f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c6fc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 802c700:	681a      	ldr	r2, [r3, #0]
 802c702:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c706:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 802c70a:	681b      	ldr	r3, [r3, #0]
 802c70c:	4619      	mov	r1, r3
 802c70e:	4610      	mov	r0, r2
 802c710:	f7de ffab 	bl	800b66a <ec_is_equal>
 802c714:	4604      	mov	r4, r0
 802c716:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c71a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 802c71e:	681b      	ldr	r3, [r3, #0]
 802c720:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802c724:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c728:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 802c72c:	681b      	ldr	r3, [r3, #0]
 802c72e:	3390      	adds	r3, #144	@ 0x90
 802c730:	4619      	mov	r1, r3
 802c732:	4610      	mov	r0, r2
 802c734:	f7de ff99 	bl	800b66a <ec_is_equal>
 802c738:	4603      	mov	r3, r0
 802c73a:	4323      	orrs	r3, r4
 802c73c:	2b00      	cmp	r3, #0
 802c73e:	d001      	beq.n	802c744 <verify_two_torsion+0xcc>
        return 0;
 802c740:	2300      	movs	r3, #0
 802c742:	e03d      	b.n	802c7c0 <verify_two_torsion+0x148>
    }

    // Finally, double points to ensure all points have order exactly 0
    theta_couple_point_t O1, O2;
    double_couple_point(&O1, K1_2, E12);
 802c744:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c748:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 802c74c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c750:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 802c754:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 802c758:	6812      	ldr	r2, [r2, #0]
 802c75a:	6819      	ldr	r1, [r3, #0]
 802c75c:	f7ed f9b3 	bl	8019ac6 <double_couple_point>
    double_couple_point(&O2, K2_2, E12);
 802c760:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c764:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 802c768:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c76c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 802c770:	f107 0010 	add.w	r0, r7, #16
 802c774:	6812      	ldr	r2, [r2, #0]
 802c776:	6819      	ldr	r1, [r3, #0]
 802c778:	f7ed f9a5 	bl	8019ac6 <double_couple_point>
    // If this check fails then the points had order 2*f for some f, and the kernel is malformed.
    if (!(ec_is_zero(&O1.P1) & ec_is_zero(&O1.P2) & ec_is_zero(&O2.P1) & ec_is_zero(&O2.P2))) {
 802c77c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c780:	4618      	mov	r0, r3
 802c782:	f7de ff50 	bl	800b626 <ec_is_zero>
 802c786:	4604      	mov	r4, r0
 802c788:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802c78c:	3390      	adds	r3, #144	@ 0x90
 802c78e:	4618      	mov	r0, r3
 802c790:	f7de ff49 	bl	800b626 <ec_is_zero>
 802c794:	4603      	mov	r3, r0
 802c796:	401c      	ands	r4, r3
 802c798:	f107 0310 	add.w	r3, r7, #16
 802c79c:	4618      	mov	r0, r3
 802c79e:	f7de ff42 	bl	800b626 <ec_is_zero>
 802c7a2:	4603      	mov	r3, r0
 802c7a4:	401c      	ands	r4, r3
 802c7a6:	f107 0310 	add.w	r3, r7, #16
 802c7aa:	3390      	adds	r3, #144	@ 0x90
 802c7ac:	4618      	mov	r0, r3
 802c7ae:	f7de ff3a 	bl	800b626 <ec_is_zero>
 802c7b2:	4603      	mov	r3, r0
 802c7b4:	4023      	ands	r3, r4
 802c7b6:	2b00      	cmp	r3, #0
 802c7b8:	d101      	bne.n	802c7be <verify_two_torsion+0x146>
        return 0;
 802c7ba:	2300      	movs	r3, #0
 802c7bc:	e000      	b.n	802c7c0 <verify_two_torsion+0x148>
    }

    return 1;
 802c7be:	2301      	movs	r3, #1
}
 802c7c0:	4618      	mov	r0, r3
 802c7c2:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 802c7c6:	46bd      	mov	sp, r7
 802c7c8:	bd90      	pop	{r4, r7, pc}

0802c7ca <action_by_translation>:
static int
action_by_translation(translation_matrix_t *Gi,
                      const theta_couple_point_t *K1_4,
                      const theta_couple_point_t *K2_4,
                      const theta_couple_curve_t *E12)
{
 802c7ca:	b590      	push	{r4, r7, lr}
 802c7cc:	f2ad 4d9c 	subw	sp, sp, #1180	@ 0x49c
 802c7d0:	af02      	add	r7, sp, #8
 802c7d2:	f507 6492 	add.w	r4, r7, #1168	@ 0x490
 802c7d6:	f2a4 4484 	subw	r4, r4, #1156	@ 0x484
 802c7da:	6020      	str	r0, [r4, #0]
 802c7dc:	f507 6092 	add.w	r0, r7, #1168	@ 0x490
 802c7e0:	f5a0 6091 	sub.w	r0, r0, #1160	@ 0x488
 802c7e4:	6001      	str	r1, [r0, #0]
 802c7e6:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 802c7ea:	f2a1 418c 	subw	r1, r1, #1164	@ 0x48c
 802c7ee:	600a      	str	r2, [r1, #0]
 802c7f0:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 802c7f4:	f5a2 6292 	sub.w	r2, r2, #1168	@ 0x490
 802c7f8:	6013      	str	r3, [r2, #0]
    // Compute points of order 2 from Ki_4
    theta_couple_point_t K1_2, K2_2;
    double_couple_point(&K1_2, K1_4, E12);
 802c7fa:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c7fe:	f5a3 6292 	sub.w	r2, r3, #1168	@ 0x490
 802c802:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c806:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 802c80a:	f507 705c 	add.w	r0, r7, #880	@ 0x370
 802c80e:	6812      	ldr	r2, [r2, #0]
 802c810:	6819      	ldr	r1, [r3, #0]
 802c812:	f7ed f958 	bl	8019ac6 <double_couple_point>
    double_couple_point(&K2_2, K2_4, E12);
 802c816:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c81a:	f5a3 6292 	sub.w	r2, r3, #1168	@ 0x490
 802c81e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c822:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 802c826:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 802c82a:	6812      	ldr	r2, [r2, #0]
 802c82c:	6819      	ldr	r1, [r3, #0]
 802c82e:	f7ed f94a 	bl	8019ac6 <double_couple_point>

    if (!verify_two_torsion(&K1_2, &K2_2, E12)) {
 802c832:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c836:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 802c83a:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 802c83e:	f507 705c 	add.w	r0, r7, #880	@ 0x370
 802c842:	681a      	ldr	r2, [r3, #0]
 802c844:	f7ff ff18 	bl	802c678 <verify_two_torsion>
 802c848:	4603      	mov	r3, r0
 802c84a:	2b00      	cmp	r3, #0
 802c84c:	d101      	bne.n	802c852 <action_by_translation+0x88>
        return 0;
 802c84e:	2300      	movs	r3, #0
 802c850:	e0ca      	b.n	802c9e8 <action_by_translation+0x21e>

    // We need to invert four Z coordinates and
    // four determinants which we do with batched
    // inversion
    fp2_t inverses[8];
    action_by_translation_z_and_det(&inverses[0], &inverses[4], &K1_4->P1, &K1_2.P1);
 802c852:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c856:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 802c85a:	681a      	ldr	r2, [r3, #0]
 802c85c:	f507 745c 	add.w	r4, r7, #880	@ 0x370
 802c860:	f107 0310 	add.w	r3, r7, #16
 802c864:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 802c868:	f107 0010 	add.w	r0, r7, #16
 802c86c:	4623      	mov	r3, r4
 802c86e:	f7ff fe79 	bl	802c564 <action_by_translation_z_and_det>
    action_by_translation_z_and_det(&inverses[1], &inverses[5], &K1_4->P2, &K1_2.P2);
 802c872:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c876:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 802c87a:	681b      	ldr	r3, [r3, #0]
 802c87c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802c880:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 802c884:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 802c888:	f107 0310 	add.w	r3, r7, #16
 802c88c:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 802c890:	f107 0310 	add.w	r3, r7, #16
 802c894:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802c898:	4623      	mov	r3, r4
 802c89a:	f7ff fe63 	bl	802c564 <action_by_translation_z_and_det>
    action_by_translation_z_and_det(&inverses[2], &inverses[6], &K2_4->P1, &K2_2.P1);
 802c89e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c8a2:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 802c8a6:	681a      	ldr	r2, [r3, #0]
 802c8a8:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 802c8ac:	f107 0310 	add.w	r3, r7, #16
 802c8b0:	f503 71d8 	add.w	r1, r3, #432	@ 0x1b0
 802c8b4:	f107 0310 	add.w	r3, r7, #16
 802c8b8:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802c8bc:	4623      	mov	r3, r4
 802c8be:	f7ff fe51 	bl	802c564 <action_by_translation_z_and_det>
    action_by_translation_z_and_det(&inverses[3], &inverses[7], &K2_4->P2, &K2_2.P2);
 802c8c2:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c8c6:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 802c8ca:	681b      	ldr	r3, [r3, #0]
 802c8cc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802c8d0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c8d4:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 802c8d8:	f107 0310 	add.w	r3, r7, #16
 802c8dc:	f503 71fc 	add.w	r1, r3, #504	@ 0x1f8
 802c8e0:	f107 0310 	add.w	r3, r7, #16
 802c8e4:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802c8e8:	4623      	mov	r3, r4
 802c8ea:	f7ff fe3b 	bl	802c564 <action_by_translation_z_and_det>

    fp2_batched_inv(inverses, 8);
 802c8ee:	f107 0310 	add.w	r3, r7, #16
 802c8f2:	2108      	movs	r1, #8
 802c8f4:	4618      	mov	r0, r3
 802c8f6:	f7e6 fb35 	bl	8012f64 <fp2_batched_inv>
    if (fp2_is_zero(&inverses[0]))
 802c8fa:	f107 0310 	add.w	r3, r7, #16
 802c8fe:	4618      	mov	r0, r3
 802c900:	f7e6 f84c 	bl	801299c <fp2_is_zero>
 802c904:	4603      	mov	r3, r0
 802c906:	2b00      	cmp	r3, #0
 802c908:	d001      	beq.n	802c90e <action_by_translation+0x144>
        return 0; // something was wrong with our input (which somehow was not caught by
 802c90a:	2300      	movs	r3, #0
 802c90c:	e06c      	b.n	802c9e8 <action_by_translation+0x21e>
                  // verify_two_torsion)

    action_by_translation_compute_matrix(&Gi[0], &K1_4->P1, &K1_2.P1, &inverses[0], &inverses[4]);
 802c90e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c912:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 802c916:	6819      	ldr	r1, [r3, #0]
 802c918:	f107 0410 	add.w	r4, r7, #16
 802c91c:	f507 725c 	add.w	r2, r7, #880	@ 0x370
 802c920:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c924:	f2a3 4084 	subw	r0, r3, #1156	@ 0x484
 802c928:	f107 0310 	add.w	r3, r7, #16
 802c92c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802c930:	9300      	str	r3, [sp, #0]
 802c932:	4623      	mov	r3, r4
 802c934:	6800      	ldr	r0, [r0, #0]
 802c936:	f7ff fe3d 	bl	802c5b4 <action_by_translation_compute_matrix>
    action_by_translation_compute_matrix(&Gi[1], &K1_4->P2, &K1_2.P2, &inverses[1], &inverses[5]);
 802c93a:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c93e:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 802c942:	681b      	ldr	r3, [r3, #0]
 802c944:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 802c948:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c94c:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 802c950:	681b      	ldr	r3, [r3, #0]
 802c952:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c956:	f107 0310 	add.w	r3, r7, #16
 802c95a:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 802c95e:	f507 735c 	add.w	r3, r7, #880	@ 0x370
 802c962:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802c966:	f107 0310 	add.w	r3, r7, #16
 802c96a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 802c96e:	9300      	str	r3, [sp, #0]
 802c970:	4623      	mov	r3, r4
 802c972:	f7ff fe1f 	bl	802c5b4 <action_by_translation_compute_matrix>
    action_by_translation_compute_matrix(&Gi[2], &K2_4->P1, &K2_2.P1, &inverses[2], &inverses[6]);
 802c976:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c97a:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 802c97e:	681b      	ldr	r3, [r3, #0]
 802c980:	f503 7010 	add.w	r0, r3, #576	@ 0x240
 802c984:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c988:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 802c98c:	6819      	ldr	r1, [r3, #0]
 802c98e:	f107 0310 	add.w	r3, r7, #16
 802c992:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 802c996:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 802c99a:	f107 0310 	add.w	r3, r7, #16
 802c99e:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 802c9a2:	9300      	str	r3, [sp, #0]
 802c9a4:	4623      	mov	r3, r4
 802c9a6:	f7ff fe05 	bl	802c5b4 <action_by_translation_compute_matrix>
    action_by_translation_compute_matrix(&Gi[3], &K2_4->P2, &K2_2.P2, &inverses[3], &inverses[7]);
 802c9aa:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c9ae:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 802c9b2:	681b      	ldr	r3, [r3, #0]
 802c9b4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 802c9b8:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802c9bc:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 802c9c0:	681b      	ldr	r3, [r3, #0]
 802c9c2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802c9c6:	f107 0310 	add.w	r3, r7, #16
 802c9ca:	f103 04d8 	add.w	r4, r3, #216	@ 0xd8
 802c9ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 802c9d2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802c9d6:	f107 0310 	add.w	r3, r7, #16
 802c9da:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 802c9de:	9300      	str	r3, [sp, #0]
 802c9e0:	4623      	mov	r3, r4
 802c9e2:	f7ff fde7 	bl	802c5b4 <action_by_translation_compute_matrix>

    return 1;
 802c9e6:	2301      	movs	r3, #1
}
 802c9e8:	4618      	mov	r0, r3
 802c9ea:	f207 4794 	addw	r7, r7, #1172	@ 0x494
 802c9ee:	46bd      	mov	sp, r7
 802c9f0:	bd90      	pop	{r4, r7, pc}

0802c9f2 <gluing_change_of_basis>:
static int
gluing_change_of_basis(basis_change_matrix_t *M,
                       const theta_couple_point_t *K1_4,
                       const theta_couple_point_t *K2_4,
                       const theta_couple_curve_t *E12)
{
 802c9f2:	b590      	push	{r4, r7, lr}
 802c9f4:	f2ad 5dfc 	subw	sp, sp, #1532	@ 0x5fc
 802c9f8:	af00      	add	r7, sp, #0
 802c9fa:	f507 64bf 	add.w	r4, r7, #1528	@ 0x5f8
 802c9fe:	f2a4 54ec 	subw	r4, r4, #1516	@ 0x5ec
 802ca02:	6020      	str	r0, [r4, #0]
 802ca04:	f507 60bf 	add.w	r0, r7, #1528	@ 0x5f8
 802ca08:	f5a0 60be 	sub.w	r0, r0, #1520	@ 0x5f0
 802ca0c:	6001      	str	r1, [r0, #0]
 802ca0e:	f507 61bf 	add.w	r1, r7, #1528	@ 0x5f8
 802ca12:	f2a1 51f4 	subw	r1, r1, #1524	@ 0x5f4
 802ca16:	600a      	str	r2, [r1, #0]
 802ca18:	f507 62bf 	add.w	r2, r7, #1528	@ 0x5f8
 802ca1c:	f5a2 62bf 	sub.w	r2, r2, #1528	@ 0x5f8
 802ca20:	6013      	str	r3, [r2, #0]
    // Compute the four 2x2 matrices for the action by translation
    // on the four points:
    translation_matrix_t Gi[4];
    if (!action_by_translation(Gi, K1_4, K2_4, E12))
 802ca22:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ca26:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 802ca2a:	f507 62bf 	add.w	r2, r7, #1528	@ 0x5f8
 802ca2e:	f2a2 52f4 	subw	r2, r2, #1524	@ 0x5f4
 802ca32:	f507 61bf 	add.w	r1, r7, #1528	@ 0x5f8
 802ca36:	f5a1 61be 	sub.w	r1, r1, #1520	@ 0x5f0
 802ca3a:	f507 70bc 	add.w	r0, r7, #376	@ 0x178
 802ca3e:	681b      	ldr	r3, [r3, #0]
 802ca40:	6812      	ldr	r2, [r2, #0]
 802ca42:	6809      	ldr	r1, [r1, #0]
 802ca44:	f7ff fec1 	bl	802c7ca <action_by_translation>
 802ca48:	4603      	mov	r3, r0
 802ca4a:	2b00      	cmp	r3, #0
 802ca4c:	d102      	bne.n	802ca54 <gluing_change_of_basis+0x62>
        return 0;
 802ca4e:	2300      	movs	r3, #0
 802ca50:	f000 bc4c 	b.w	802d2ec <gluing_change_of_basis+0x8fa>

    // Computation of the 4x4 matrix from Mij
    // t001, t101 (resp t002, t102) first column of M11 * M21 (resp M12 * M22)
    fp2_t t001, t101, t002, t102, tmp;

    fp2_mul(&t001, &Gi[0].g00, &Gi[2].g00);
 802ca54:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ca58:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 802ca5c:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 802ca60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802ca64:	4618      	mov	r0, r3
 802ca66:	f7e6 f862 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &Gi[0].g01, &Gi[2].g10);
 802ca6a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ca6e:	f503 7234 	add.w	r2, r3, #720	@ 0x2d0
 802ca72:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ca76:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802ca7a:	f107 0310 	add.w	r3, r7, #16
 802ca7e:	4618      	mov	r0, r3
 802ca80:	f7e6 f855 	bl	8012b2e <fp2_mul>
    fp2_add(&t001, &t001, &tmp);
 802ca84:	f107 0210 	add.w	r2, r7, #16
 802ca88:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 802ca8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802ca90:	4618      	mov	r0, r3
 802ca92:	f7e5 ffe3 	bl	8012a5c <fp2_add>

    fp2_mul(&t101, &Gi[0].g10, &Gi[2].g00);
 802ca96:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ca9a:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 802ca9e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802caa2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802caa6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802caaa:	4618      	mov	r0, r3
 802caac:	f7e6 f83f 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &Gi[0].g11, &Gi[2].g10);
 802cab0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cab4:	f503 7234 	add.w	r2, r3, #720	@ 0x2d0
 802cab8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cabc:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802cac0:	f107 0310 	add.w	r3, r7, #16
 802cac4:	4618      	mov	r0, r3
 802cac6:	f7e6 f832 	bl	8012b2e <fp2_mul>
    fp2_add(&t101, &t101, &tmp);
 802caca:	f107 0210 	add.w	r2, r7, #16
 802cace:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802cad2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802cad6:	4618      	mov	r0, r3
 802cad8:	f7e5 ffc0 	bl	8012a5c <fp2_add>

    fp2_mul(&t002, &Gi[1].g00, &Gi[3].g00);
 802cadc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cae0:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 802cae4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cae8:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 802caec:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802caf0:	4618      	mov	r0, r3
 802caf2:	f7e6 f81c 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &Gi[1].g01, &Gi[3].g10);
 802caf6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cafa:	f503 727c 	add.w	r2, r3, #1008	@ 0x3f0
 802cafe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cb02:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 802cb06:	f107 0310 	add.w	r3, r7, #16
 802cb0a:	4618      	mov	r0, r3
 802cb0c:	f7e6 f80f 	bl	8012b2e <fp2_mul>
    fp2_add(&t002, &t002, &tmp);
 802cb10:	f107 0210 	add.w	r2, r7, #16
 802cb14:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 802cb18:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802cb1c:	4618      	mov	r0, r3
 802cb1e:	f7e5 ff9d 	bl	8012a5c <fp2_add>

    fp2_mul(&t102, &Gi[1].g10, &Gi[3].g00);
 802cb22:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cb26:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 802cb2a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cb2e:	f503 71d8 	add.w	r1, r3, #432	@ 0x1b0
 802cb32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802cb36:	4618      	mov	r0, r3
 802cb38:	f7e5 fff9 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &Gi[1].g11, &Gi[3].g10);
 802cb3c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cb40:	f503 727c 	add.w	r2, r3, #1008	@ 0x3f0
 802cb44:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cb48:	f503 71fc 	add.w	r1, r3, #504	@ 0x1f8
 802cb4c:	f107 0310 	add.w	r3, r7, #16
 802cb50:	4618      	mov	r0, r3
 802cb52:	f7e5 ffec 	bl	8012b2e <fp2_mul>
    fp2_add(&t102, &t102, &tmp);
 802cb56:	f107 0210 	add.w	r2, r7, #16
 802cb5a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 802cb5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802cb62:	4618      	mov	r0, r3
 802cb64:	f7e5 ff7a 	bl	8012a5c <fp2_add>

    // trace for the first row
    fp2_set_one(&M->m[0][0]);
 802cb68:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cb6c:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cb70:	681b      	ldr	r3, [r3, #0]
 802cb72:	4618      	mov	r0, r3
 802cb74:	f7e5 fef0 	bl	8012958 <fp2_set_one>
    fp2_mul(&tmp, &t001, &t002);
 802cb78:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 802cb7c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 802cb80:	f107 0310 	add.w	r3, r7, #16
 802cb84:	4618      	mov	r0, r3
 802cb86:	f7e5 ffd2 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][0], &M->m[0][0], &tmp);
 802cb8a:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cb8e:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cb92:	6818      	ldr	r0, [r3, #0]
 802cb94:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cb98:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cb9c:	681b      	ldr	r3, [r3, #0]
 802cb9e:	f107 0210 	add.w	r2, r7, #16
 802cba2:	4619      	mov	r1, r3
 802cba4:	f7e5 ff5a 	bl	8012a5c <fp2_add>
    fp2_mul(&tmp, &Gi[2].g00, &Gi[3].g00);
 802cba8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cbac:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 802cbb0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cbb4:	f503 7110 	add.w	r1, r3, #576	@ 0x240
 802cbb8:	f107 0310 	add.w	r3, r7, #16
 802cbbc:	4618      	mov	r0, r3
 802cbbe:	f7e5 ffb6 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][0], &M->m[0][0], &tmp);
 802cbc2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cbc6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cbca:	6818      	ldr	r0, [r3, #0]
 802cbcc:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cbd0:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cbd4:	681b      	ldr	r3, [r3, #0]
 802cbd6:	f107 0210 	add.w	r2, r7, #16
 802cbda:	4619      	mov	r1, r3
 802cbdc:	f7e5 ff3e 	bl	8012a5c <fp2_add>
    fp2_mul(&tmp, &Gi[0].g00, &Gi[1].g00);
 802cbe0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cbe4:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802cbe8:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 802cbec:	f107 0310 	add.w	r3, r7, #16
 802cbf0:	4618      	mov	r0, r3
 802cbf2:	f7e5 ff9c 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][0], &M->m[0][0], &tmp);
 802cbf6:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cbfa:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cbfe:	6818      	ldr	r0, [r3, #0]
 802cc00:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cc04:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cc08:	681b      	ldr	r3, [r3, #0]
 802cc0a:	f107 0210 	add.w	r2, r7, #16
 802cc0e:	4619      	mov	r1, r3
 802cc10:	f7e5 ff24 	bl	8012a5c <fp2_add>

    fp2_mul(&M->m[0][1], &t001, &t102);
 802cc14:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cc18:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cc1c:	681b      	ldr	r3, [r3, #0]
 802cc1e:	3348      	adds	r3, #72	@ 0x48
 802cc20:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802cc24:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 802cc28:	4618      	mov	r0, r3
 802cc2a:	f7e5 ff80 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &Gi[2].g00, &Gi[3].g10);
 802cc2e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cc32:	f503 727c 	add.w	r2, r3, #1008	@ 0x3f0
 802cc36:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cc3a:	f503 7110 	add.w	r1, r3, #576	@ 0x240
 802cc3e:	f107 0310 	add.w	r3, r7, #16
 802cc42:	4618      	mov	r0, r3
 802cc44:	f7e5 ff73 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][1], &M->m[0][1], &tmp);
 802cc48:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cc4c:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cc50:	681b      	ldr	r3, [r3, #0]
 802cc52:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802cc56:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cc5a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cc5e:	681b      	ldr	r3, [r3, #0]
 802cc60:	3348      	adds	r3, #72	@ 0x48
 802cc62:	f107 0210 	add.w	r2, r7, #16
 802cc66:	4619      	mov	r1, r3
 802cc68:	f7e5 fef8 	bl	8012a5c <fp2_add>
    fp2_mul(&tmp, &Gi[0].g00, &Gi[1].g10);
 802cc6c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cc70:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 802cc74:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 802cc78:	f107 0310 	add.w	r3, r7, #16
 802cc7c:	4618      	mov	r0, r3
 802cc7e:	f7e5 ff56 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][1], &M->m[0][1], &tmp);
 802cc82:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cc86:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cc8a:	681b      	ldr	r3, [r3, #0]
 802cc8c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802cc90:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cc94:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cc98:	681b      	ldr	r3, [r3, #0]
 802cc9a:	3348      	adds	r3, #72	@ 0x48
 802cc9c:	f107 0210 	add.w	r2, r7, #16
 802cca0:	4619      	mov	r1, r3
 802cca2:	f7e5 fedb 	bl	8012a5c <fp2_add>

    fp2_mul(&M->m[0][2], &t101, &t002);
 802cca6:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ccaa:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ccae:	681b      	ldr	r3, [r3, #0]
 802ccb0:	3390      	adds	r3, #144	@ 0x90
 802ccb2:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 802ccb6:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802ccba:	4618      	mov	r0, r3
 802ccbc:	f7e5 ff37 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &Gi[2].g10, &Gi[3].g00);
 802ccc0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ccc4:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 802ccc8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cccc:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 802ccd0:	f107 0310 	add.w	r3, r7, #16
 802ccd4:	4618      	mov	r0, r3
 802ccd6:	f7e5 ff2a 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][2], &M->m[0][2], &tmp);
 802ccda:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ccde:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cce2:	681b      	ldr	r3, [r3, #0]
 802cce4:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802cce8:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ccec:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ccf0:	681b      	ldr	r3, [r3, #0]
 802ccf2:	3390      	adds	r3, #144	@ 0x90
 802ccf4:	f107 0210 	add.w	r2, r7, #16
 802ccf8:	4619      	mov	r1, r3
 802ccfa:	f7e5 feaf 	bl	8012a5c <fp2_add>
    fp2_mul(&tmp, &Gi[0].g10, &Gi[1].g00);
 802ccfe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cd02:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802cd06:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cd0a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802cd0e:	f107 0310 	add.w	r3, r7, #16
 802cd12:	4618      	mov	r0, r3
 802cd14:	f7e5 ff0b 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][2], &M->m[0][2], &tmp);
 802cd18:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cd1c:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cd20:	681b      	ldr	r3, [r3, #0]
 802cd22:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802cd26:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cd2a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cd2e:	681b      	ldr	r3, [r3, #0]
 802cd30:	3390      	adds	r3, #144	@ 0x90
 802cd32:	f107 0210 	add.w	r2, r7, #16
 802cd36:	4619      	mov	r1, r3
 802cd38:	f7e5 fe90 	bl	8012a5c <fp2_add>

    fp2_mul(&M->m[0][3], &t101, &t102);
 802cd3c:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cd40:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cd44:	681b      	ldr	r3, [r3, #0]
 802cd46:	33d8      	adds	r3, #216	@ 0xd8
 802cd48:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802cd4c:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802cd50:	4618      	mov	r0, r3
 802cd52:	f7e5 feec 	bl	8012b2e <fp2_mul>
    fp2_mul(&tmp, &Gi[2].g10, &Gi[3].g10);
 802cd56:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cd5a:	f503 727c 	add.w	r2, r3, #1008	@ 0x3f0
 802cd5e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cd62:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 802cd66:	f107 0310 	add.w	r3, r7, #16
 802cd6a:	4618      	mov	r0, r3
 802cd6c:	f7e5 fedf 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][3], &M->m[0][3], &tmp);
 802cd70:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cd74:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cd78:	681b      	ldr	r3, [r3, #0]
 802cd7a:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802cd7e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cd82:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cd86:	681b      	ldr	r3, [r3, #0]
 802cd88:	33d8      	adds	r3, #216	@ 0xd8
 802cd8a:	f107 0210 	add.w	r2, r7, #16
 802cd8e:	4619      	mov	r1, r3
 802cd90:	f7e5 fe64 	bl	8012a5c <fp2_add>
    fp2_mul(&tmp, &Gi[0].g10, &Gi[1].g10);
 802cd94:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cd98:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 802cd9c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cda0:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802cda4:	f107 0310 	add.w	r3, r7, #16
 802cda8:	4618      	mov	r0, r3
 802cdaa:	f7e5 fec0 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[0][3], &M->m[0][3], &tmp);
 802cdae:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cdb2:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cdb6:	681b      	ldr	r3, [r3, #0]
 802cdb8:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802cdbc:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cdc0:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cdc4:	681b      	ldr	r3, [r3, #0]
 802cdc6:	33d8      	adds	r3, #216	@ 0xd8
 802cdc8:	f107 0210 	add.w	r2, r7, #16
 802cdcc:	4619      	mov	r1, r3
 802cdce:	f7e5 fe45 	bl	8012a5c <fp2_add>

    // Compute the action of (0,out.K2_4.P2) for the second row
    fp2_mul(&tmp, &Gi[3].g01, &M->m[0][1]);
 802cdd2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cdd6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cdda:	681b      	ldr	r3, [r3, #0]
 802cddc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802cde0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cde4:	f503 716a 	add.w	r1, r3, #936	@ 0x3a8
 802cde8:	f107 0310 	add.w	r3, r7, #16
 802cdec:	4618      	mov	r0, r3
 802cdee:	f7e5 fe9e 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[1][0], &Gi[3].g00, &M->m[0][0]);
 802cdf2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cdf6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cdfa:	681b      	ldr	r3, [r3, #0]
 802cdfc:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 802ce00:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce04:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce08:	681a      	ldr	r2, [r3, #0]
 802ce0a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ce0e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 802ce12:	4619      	mov	r1, r3
 802ce14:	f7e5 fe8b 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[1][0], &M->m[1][0], &tmp);
 802ce18:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce1c:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce20:	681b      	ldr	r3, [r3, #0]
 802ce22:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 802ce26:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce2a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce2e:	681b      	ldr	r3, [r3, #0]
 802ce30:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802ce34:	f107 0210 	add.w	r2, r7, #16
 802ce38:	4619      	mov	r1, r3
 802ce3a:	f7e5 fe0f 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[3].g11, &M->m[0][1]);
 802ce3e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce42:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce46:	681b      	ldr	r3, [r3, #0]
 802ce48:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802ce4c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ce50:	f503 6187 	add.w	r1, r3, #1080	@ 0x438
 802ce54:	f107 0310 	add.w	r3, r7, #16
 802ce58:	4618      	mov	r0, r3
 802ce5a:	f7e5 fe68 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[1][1], &Gi[3].g10, &M->m[0][0]);
 802ce5e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce62:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce66:	681b      	ldr	r3, [r3, #0]
 802ce68:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 802ce6c:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce70:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce74:	681a      	ldr	r2, [r3, #0]
 802ce76:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ce7a:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 802ce7e:	4619      	mov	r1, r3
 802ce80:	f7e5 fe55 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[1][1], &M->m[1][1], &tmp);
 802ce84:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce88:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce8c:	681b      	ldr	r3, [r3, #0]
 802ce8e:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 802ce92:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ce96:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ce9a:	681b      	ldr	r3, [r3, #0]
 802ce9c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 802cea0:	f107 0210 	add.w	r2, r7, #16
 802cea4:	4619      	mov	r1, r3
 802cea6:	f7e5 fdd9 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[3].g01, &M->m[0][3]);
 802ceaa:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802ceae:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ceb2:	681b      	ldr	r3, [r3, #0]
 802ceb4:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802ceb8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cebc:	f503 716a 	add.w	r1, r3, #936	@ 0x3a8
 802cec0:	f107 0310 	add.w	r3, r7, #16
 802cec4:	4618      	mov	r0, r3
 802cec6:	f7e5 fe32 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[1][2], &Gi[3].g00, &M->m[0][2]);
 802ceca:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cece:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802ced2:	681b      	ldr	r3, [r3, #0]
 802ced4:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 802ced8:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cedc:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cee0:	681b      	ldr	r3, [r3, #0]
 802cee2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802cee6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802ceea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 802ceee:	4619      	mov	r1, r3
 802cef0:	f7e5 fe1d 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[1][2], &M->m[1][2], &tmp);
 802cef4:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cef8:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cefc:	681b      	ldr	r3, [r3, #0]
 802cefe:	f503 70d8 	add.w	r0, r3, #432	@ 0x1b0
 802cf02:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cf06:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cf0a:	681b      	ldr	r3, [r3, #0]
 802cf0c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 802cf10:	f107 0210 	add.w	r2, r7, #16
 802cf14:	4619      	mov	r1, r3
 802cf16:	f7e5 fda1 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[3].g11, &M->m[0][3]);
 802cf1a:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cf1e:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cf22:	681b      	ldr	r3, [r3, #0]
 802cf24:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802cf28:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cf2c:	f503 6187 	add.w	r1, r3, #1080	@ 0x438
 802cf30:	f107 0310 	add.w	r3, r7, #16
 802cf34:	4618      	mov	r0, r3
 802cf36:	f7e5 fdfa 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[1][3], &Gi[3].g10, &M->m[0][2]);
 802cf3a:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cf3e:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cf42:	681b      	ldr	r3, [r3, #0]
 802cf44:	f503 70fc 	add.w	r0, r3, #504	@ 0x1f8
 802cf48:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cf4c:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cf50:	681b      	ldr	r3, [r3, #0]
 802cf52:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802cf56:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cf5a:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 802cf5e:	4619      	mov	r1, r3
 802cf60:	f7e5 fde5 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[1][3], &M->m[1][3], &tmp);
 802cf64:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cf68:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cf6c:	681b      	ldr	r3, [r3, #0]
 802cf6e:	f503 70fc 	add.w	r0, r3, #504	@ 0x1f8
 802cf72:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cf76:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cf7a:	681b      	ldr	r3, [r3, #0]
 802cf7c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 802cf80:	f107 0210 	add.w	r2, r7, #16
 802cf84:	4619      	mov	r1, r3
 802cf86:	f7e5 fd69 	bl	8012a5c <fp2_add>

    // compute the action of (K1_4.P1,0) for the third row
    fp2_mul(&tmp, &Gi[0].g01, &M->m[0][2]);
 802cf8a:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cf8e:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cf92:	681b      	ldr	r3, [r3, #0]
 802cf94:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802cf98:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cf9c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802cfa0:	f107 0310 	add.w	r3, r7, #16
 802cfa4:	4618      	mov	r0, r3
 802cfa6:	f7e5 fdc2 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[2][0], &Gi[0].g00, &M->m[0][0]);
 802cfaa:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cfae:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cfb2:	681b      	ldr	r3, [r3, #0]
 802cfb4:	f503 7010 	add.w	r0, r3, #576	@ 0x240
 802cfb8:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cfbc:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cfc0:	681a      	ldr	r2, [r3, #0]
 802cfc2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802cfc6:	4619      	mov	r1, r3
 802cfc8:	f7e5 fdb1 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[2][0], &M->m[2][0], &tmp);
 802cfcc:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cfd0:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cfd4:	681b      	ldr	r3, [r3, #0]
 802cfd6:	f503 7010 	add.w	r0, r3, #576	@ 0x240
 802cfda:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cfde:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cfe2:	681b      	ldr	r3, [r3, #0]
 802cfe4:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 802cfe8:	f107 0210 	add.w	r2, r7, #16
 802cfec:	4619      	mov	r1, r3
 802cfee:	f7e5 fd35 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[0].g01, &M->m[0][3]);
 802cff2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802cff6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802cffa:	681b      	ldr	r3, [r3, #0]
 802cffc:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802d000:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d004:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d008:	f107 0310 	add.w	r3, r7, #16
 802d00c:	4618      	mov	r0, r3
 802d00e:	f7e5 fd8e 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[2][1], &Gi[0].g00, &M->m[0][1]);
 802d012:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d016:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d01a:	681b      	ldr	r3, [r3, #0]
 802d01c:	f503 7022 	add.w	r0, r3, #648	@ 0x288
 802d020:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d024:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d028:	681b      	ldr	r3, [r3, #0]
 802d02a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802d02e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d032:	4619      	mov	r1, r3
 802d034:	f7e5 fd7b 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[2][1], &M->m[2][1], &tmp);
 802d038:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d03c:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d040:	681b      	ldr	r3, [r3, #0]
 802d042:	f503 7022 	add.w	r0, r3, #648	@ 0x288
 802d046:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d04a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d04e:	681b      	ldr	r3, [r3, #0]
 802d050:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 802d054:	f107 0210 	add.w	r2, r7, #16
 802d058:	4619      	mov	r1, r3
 802d05a:	f7e5 fcff 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[0].g11, &M->m[0][2]);
 802d05e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d062:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d066:	681b      	ldr	r3, [r3, #0]
 802d068:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802d06c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d070:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802d074:	f107 0310 	add.w	r3, r7, #16
 802d078:	4618      	mov	r0, r3
 802d07a:	f7e5 fd58 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[2][2], &Gi[0].g10, &M->m[0][0]);
 802d07e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d082:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d086:	681b      	ldr	r3, [r3, #0]
 802d088:	f503 7034 	add.w	r0, r3, #720	@ 0x2d0
 802d08c:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d090:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d094:	681a      	ldr	r2, [r3, #0]
 802d096:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d09a:	3390      	adds	r3, #144	@ 0x90
 802d09c:	4619      	mov	r1, r3
 802d09e:	f7e5 fd46 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[2][2], &M->m[2][2], &tmp);
 802d0a2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d0a6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d0aa:	681b      	ldr	r3, [r3, #0]
 802d0ac:	f503 7034 	add.w	r0, r3, #720	@ 0x2d0
 802d0b0:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d0b4:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d0b8:	681b      	ldr	r3, [r3, #0]
 802d0ba:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 802d0be:	f107 0210 	add.w	r2, r7, #16
 802d0c2:	4619      	mov	r1, r3
 802d0c4:	f7e5 fcca 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[0].g11, &M->m[0][3]);
 802d0c8:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d0cc:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d0d0:	681b      	ldr	r3, [r3, #0]
 802d0d2:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802d0d6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d0da:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802d0de:	f107 0310 	add.w	r3, r7, #16
 802d0e2:	4618      	mov	r0, r3
 802d0e4:	f7e5 fd23 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[2][3], &Gi[0].g10, &M->m[0][1]);
 802d0e8:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d0ec:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d0f0:	681b      	ldr	r3, [r3, #0]
 802d0f2:	f503 7046 	add.w	r0, r3, #792	@ 0x318
 802d0f6:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d0fa:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d0fe:	681b      	ldr	r3, [r3, #0]
 802d100:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802d104:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d108:	3390      	adds	r3, #144	@ 0x90
 802d10a:	4619      	mov	r1, r3
 802d10c:	f7e5 fd0f 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[2][3], &M->m[2][3], &tmp);
 802d110:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d114:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d118:	681b      	ldr	r3, [r3, #0]
 802d11a:	f503 7046 	add.w	r0, r3, #792	@ 0x318
 802d11e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d122:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d126:	681b      	ldr	r3, [r3, #0]
 802d128:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 802d12c:	f107 0210 	add.w	r2, r7, #16
 802d130:	4619      	mov	r1, r3
 802d132:	f7e5 fc93 	bl	8012a5c <fp2_add>

    // compute the action of (K1_4.P1,K2_4.P2) for the final row
    fp2_mul(&tmp, &Gi[0].g01, &M->m[1][2]);
 802d136:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d13a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d13e:	681b      	ldr	r3, [r3, #0]
 802d140:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 802d144:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d148:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d14c:	f107 0310 	add.w	r3, r7, #16
 802d150:	4618      	mov	r0, r3
 802d152:	f7e5 fcec 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[3][0], &Gi[0].g00, &M->m[1][0]);
 802d156:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d15a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d15e:	681b      	ldr	r3, [r3, #0]
 802d160:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 802d164:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d168:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d16c:	681b      	ldr	r3, [r3, #0]
 802d16e:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802d172:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d176:	4619      	mov	r1, r3
 802d178:	f7e5 fcd9 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[3][0], &M->m[3][0], &tmp);
 802d17c:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d180:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d184:	681b      	ldr	r3, [r3, #0]
 802d186:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 802d18a:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d18e:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d192:	681b      	ldr	r3, [r3, #0]
 802d194:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 802d198:	f107 0210 	add.w	r2, r7, #16
 802d19c:	4619      	mov	r1, r3
 802d19e:	f7e5 fc5d 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[0].g01, &M->m[1][3]);
 802d1a2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d1a6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d1aa:	681b      	ldr	r3, [r3, #0]
 802d1ac:	f503 72fc 	add.w	r2, r3, #504	@ 0x1f8
 802d1b0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d1b4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d1b8:	f107 0310 	add.w	r3, r7, #16
 802d1bc:	4618      	mov	r0, r3
 802d1be:	f7e5 fcb6 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[3][1], &Gi[0].g00, &M->m[1][1]);
 802d1c2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d1c6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d1ca:	681b      	ldr	r3, [r3, #0]
 802d1cc:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 802d1d0:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d1d4:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d1d8:	681b      	ldr	r3, [r3, #0]
 802d1da:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 802d1de:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d1e2:	4619      	mov	r1, r3
 802d1e4:	f7e5 fca3 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[3][1], &M->m[3][1], &tmp);
 802d1e8:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d1ec:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d1f0:	681b      	ldr	r3, [r3, #0]
 802d1f2:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 802d1f6:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d1fa:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d1fe:	681b      	ldr	r3, [r3, #0]
 802d200:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 802d204:	f107 0210 	add.w	r2, r7, #16
 802d208:	4619      	mov	r1, r3
 802d20a:	f7e5 fc27 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[0].g11, &M->m[1][2]);
 802d20e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d212:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d216:	681b      	ldr	r3, [r3, #0]
 802d218:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 802d21c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d220:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802d224:	f107 0310 	add.w	r3, r7, #16
 802d228:	4618      	mov	r0, r3
 802d22a:	f7e5 fc80 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[3][2], &Gi[0].g10, &M->m[1][0]);
 802d22e:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d232:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d236:	681b      	ldr	r3, [r3, #0]
 802d238:	f503 707c 	add.w	r0, r3, #1008	@ 0x3f0
 802d23c:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d240:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d244:	681b      	ldr	r3, [r3, #0]
 802d246:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 802d24a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d24e:	3390      	adds	r3, #144	@ 0x90
 802d250:	4619      	mov	r1, r3
 802d252:	f7e5 fc6c 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[3][2], &M->m[3][2], &tmp);
 802d256:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d25a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d25e:	681b      	ldr	r3, [r3, #0]
 802d260:	f503 707c 	add.w	r0, r3, #1008	@ 0x3f0
 802d264:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d268:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d26c:	681b      	ldr	r3, [r3, #0]
 802d26e:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 802d272:	f107 0210 	add.w	r2, r7, #16
 802d276:	4619      	mov	r1, r3
 802d278:	f7e5 fbf0 	bl	8012a5c <fp2_add>

    fp2_mul(&tmp, &Gi[0].g11, &M->m[1][3]);
 802d27c:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d280:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d284:	681b      	ldr	r3, [r3, #0]
 802d286:	f503 72fc 	add.w	r2, r3, #504	@ 0x1f8
 802d28a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d28e:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802d292:	f107 0310 	add.w	r3, r7, #16
 802d296:	4618      	mov	r0, r3
 802d298:	f7e5 fc49 	bl	8012b2e <fp2_mul>
    fp2_mul(&M->m[3][3], &Gi[0].g10, &M->m[1][1]);
 802d29c:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d2a0:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d2a4:	681b      	ldr	r3, [r3, #0]
 802d2a6:	f503 6087 	add.w	r0, r3, #1080	@ 0x438
 802d2aa:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d2ae:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d2b2:	681b      	ldr	r3, [r3, #0]
 802d2b4:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 802d2b8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 802d2bc:	3390      	adds	r3, #144	@ 0x90
 802d2be:	4619      	mov	r1, r3
 802d2c0:	f7e5 fc35 	bl	8012b2e <fp2_mul>
    fp2_add(&M->m[3][3], &M->m[3][3], &tmp);
 802d2c4:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d2c8:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d2cc:	681b      	ldr	r3, [r3, #0]
 802d2ce:	f503 6087 	add.w	r0, r3, #1080	@ 0x438
 802d2d2:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 802d2d6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 802d2da:	681b      	ldr	r3, [r3, #0]
 802d2dc:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 802d2e0:	f107 0210 	add.w	r2, r7, #16
 802d2e4:	4619      	mov	r1, r3
 802d2e6:	f7e5 fbb9 	bl	8012a5c <fp2_add>

    return 1;
 802d2ea:	2301      	movs	r3, #1
}
 802d2ec:	4618      	mov	r0, r3
 802d2ee:	f207 57fc 	addw	r7, r7, #1532	@ 0x5fc
 802d2f2:	46bd      	mov	sp, r7
 802d2f4:	bd90      	pop	{r4, r7, pc}
	...

0802d2f8 <gluing_compute>:
gluing_compute(theta_gluing_t *out,
               const theta_couple_curve_t *E12,
               const theta_couple_jac_point_t *xyK1_8,
               const theta_couple_jac_point_t *xyK2_8,
               bool verify)
{
 802d2f8:	b590      	push	{r4, r7, lr}
 802d2fa:	f6ad 2dd4 	subw	sp, sp, #2772	@ 0xad4
 802d2fe:	af02      	add	r7, sp, #8
 802d300:	f607 24c8 	addw	r4, r7, #2760	@ 0xac8
 802d304:	f6a4 24bc 	subw	r4, r4, #2748	@ 0xabc
 802d308:	6020      	str	r0, [r4, #0]
 802d30a:	f607 20c8 	addw	r0, r7, #2760	@ 0xac8
 802d30e:	f5a0 602c 	sub.w	r0, r0, #2752	@ 0xac0
 802d312:	6001      	str	r1, [r0, #0]
 802d314:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 802d318:	f6a1 21c4 	subw	r1, r1, #2756	@ 0xac4
 802d31c:	600a      	str	r2, [r1, #0]
 802d31e:	f607 22c8 	addw	r2, r7, #2760	@ 0xac8
 802d322:	f6a2 22c8 	subw	r2, r2, #2760	@ 0xac8
 802d326:	6013      	str	r3, [r2, #0]
    // Ensure that we have been given the eight torsion
#ifndef NDEBUG
    {
        int check = test_jac_order_twof(&xyK1_8->P1, &E12->E1, 3);
 802d328:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d32c:	f6a3 23c4 	subw	r3, r3, #2756	@ 0xac4
 802d330:	6818      	ldr	r0, [r3, #0]
 802d332:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d336:	f5a3 632c 	sub.w	r3, r3, #2752	@ 0xac0
 802d33a:	681b      	ldr	r3, [r3, #0]
 802d33c:	2203      	movs	r2, #3
 802d33e:	4619      	mov	r1, r3
 802d340:	f7fe fbdd 	bl	802bafe <test_jac_order_twof>
 802d344:	f8c7 0ac4 	str.w	r0, [r7, #2756]	@ 0xac4
        if (!check)
 802d348:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 802d34c:	2b00      	cmp	r3, #0
 802d34e:	d108      	bne.n	802d362 <gluing_compute+0x6a>
            debug_print("xyK1_8->P1 does not have order 8");
 802d350:	4baa      	ldr	r3, [pc, #680]	@ (802d5fc <gluing_compute+0x304>)
 802d352:	9300      	str	r3, [sp, #0]
 802d354:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 802d358:	4aa9      	ldr	r2, [pc, #676]	@ (802d600 <gluing_compute+0x308>)
 802d35a:	49aa      	ldr	r1, [pc, #680]	@ (802d604 <gluing_compute+0x30c>)
 802d35c:	48aa      	ldr	r0, [pc, #680]	@ (802d608 <gluing_compute+0x310>)
 802d35e:	f008 faed 	bl	803593c <iprintf>
        check = test_jac_order_twof(&xyK2_8->P1, &E12->E1, 3);
 802d362:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d366:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 802d36a:	6818      	ldr	r0, [r3, #0]
 802d36c:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d370:	f5a3 632c 	sub.w	r3, r3, #2752	@ 0xac0
 802d374:	681b      	ldr	r3, [r3, #0]
 802d376:	2203      	movs	r2, #3
 802d378:	4619      	mov	r1, r3
 802d37a:	f7fe fbc0 	bl	802bafe <test_jac_order_twof>
 802d37e:	f8c7 0ac4 	str.w	r0, [r7, #2756]	@ 0xac4
        if (!check)
 802d382:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 802d386:	2b00      	cmp	r3, #0
 802d388:	d108      	bne.n	802d39c <gluing_compute+0xa4>
            debug_print("xyK2_8->P1 does not have order 8");
 802d38a:	4b9c      	ldr	r3, [pc, #624]	@ (802d5fc <gluing_compute+0x304>)
 802d38c:	9300      	str	r3, [sp, #0]
 802d38e:	f240 139b 	movw	r3, #411	@ 0x19b
 802d392:	4a9b      	ldr	r2, [pc, #620]	@ (802d600 <gluing_compute+0x308>)
 802d394:	499d      	ldr	r1, [pc, #628]	@ (802d60c <gluing_compute+0x314>)
 802d396:	489c      	ldr	r0, [pc, #624]	@ (802d608 <gluing_compute+0x310>)
 802d398:	f008 fad0 	bl	803593c <iprintf>
        check = test_jac_order_twof(&xyK1_8->P2, &E12->E2, 3);
 802d39c:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d3a0:	f6a3 23c4 	subw	r3, r3, #2756	@ 0xac4
 802d3a4:	681b      	ldr	r3, [r3, #0]
 802d3a6:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802d3aa:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d3ae:	f5a3 632c 	sub.w	r3, r3, #2752	@ 0xac0
 802d3b2:	681b      	ldr	r3, [r3, #0]
 802d3b4:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802d3b8:	2203      	movs	r2, #3
 802d3ba:	4619      	mov	r1, r3
 802d3bc:	f7fe fb9f 	bl	802bafe <test_jac_order_twof>
 802d3c0:	f8c7 0ac4 	str.w	r0, [r7, #2756]	@ 0xac4
        if (!check)
 802d3c4:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 802d3c8:	2b00      	cmp	r3, #0
 802d3ca:	d108      	bne.n	802d3de <gluing_compute+0xe6>
            debug_print("xyK2_8->P1 does not have order 8");
 802d3cc:	4b8b      	ldr	r3, [pc, #556]	@ (802d5fc <gluing_compute+0x304>)
 802d3ce:	9300      	str	r3, [sp, #0]
 802d3d0:	f44f 73cf 	mov.w	r3, #414	@ 0x19e
 802d3d4:	4a8a      	ldr	r2, [pc, #552]	@ (802d600 <gluing_compute+0x308>)
 802d3d6:	498d      	ldr	r1, [pc, #564]	@ (802d60c <gluing_compute+0x314>)
 802d3d8:	488b      	ldr	r0, [pc, #556]	@ (802d608 <gluing_compute+0x310>)
 802d3da:	f008 faaf 	bl	803593c <iprintf>
        check = test_jac_order_twof(&xyK2_8->P2, &E12->E2, 3);
 802d3de:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d3e2:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 802d3e6:	681b      	ldr	r3, [r3, #0]
 802d3e8:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802d3ec:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d3f0:	f5a3 632c 	sub.w	r3, r3, #2752	@ 0xac0
 802d3f4:	681b      	ldr	r3, [r3, #0]
 802d3f6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802d3fa:	2203      	movs	r2, #3
 802d3fc:	4619      	mov	r1, r3
 802d3fe:	f7fe fb7e 	bl	802bafe <test_jac_order_twof>
 802d402:	f8c7 0ac4 	str.w	r0, [r7, #2756]	@ 0xac4
        if (!check)
 802d406:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 802d40a:	2b00      	cmp	r3, #0
 802d40c:	d108      	bne.n	802d420 <gluing_compute+0x128>
            debug_print("xyK2_8->P2 does not have order 8");
 802d40e:	4b7b      	ldr	r3, [pc, #492]	@ (802d5fc <gluing_compute+0x304>)
 802d410:	9300      	str	r3, [sp, #0]
 802d412:	f240 13a1 	movw	r3, #417	@ 0x1a1
 802d416:	4a7a      	ldr	r2, [pc, #488]	@ (802d600 <gluing_compute+0x308>)
 802d418:	497d      	ldr	r1, [pc, #500]	@ (802d610 <gluing_compute+0x318>)
 802d41a:	487b      	ldr	r0, [pc, #492]	@ (802d608 <gluing_compute+0x310>)
 802d41c:	f008 fa8e 	bl	803593c <iprintf>
    }
#endif

    out->xyK1_8 = *xyK1_8;
 802d420:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d424:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d428:	681b      	ldr	r3, [r3, #0]
 802d42a:	f607 22c8 	addw	r2, r7, #2760	@ 0xac8
 802d42e:	f6a2 22c4 	subw	r2, r2, #2756	@ 0xac4
 802d432:	6812      	ldr	r2, [r2, #0]
 802d434:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 802d438:	4611      	mov	r1, r2
 802d43a:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 802d43e:	4618      	mov	r0, r3
 802d440:	f008 fcad 	bl	8035d9e <memcpy>
    out->domain = *E12;
 802d444:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d448:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d44c:	681a      	ldr	r2, [r3, #0]
 802d44e:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d452:	f5a3 632c 	sub.w	r3, r3, #2752	@ 0xac0
 802d456:	681b      	ldr	r3, [r3, #0]
 802d458:	4610      	mov	r0, r2
 802d45a:	4619      	mov	r1, r3
 802d45c:	f44f 7312 	mov.w	r3, #584	@ 0x248
 802d460:	461a      	mov	r2, r3
 802d462:	f008 fc9c 	bl	8035d9e <memcpy>

    // Given points in E[8] x E[8] we need the four torsion below
    theta_couple_jac_point_t xyK1_4, xyK2_4;

    double_couple_jac_point(&xyK1_4, xyK1_8, E12);
 802d466:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d46a:	f5a3 622c 	sub.w	r2, r3, #2752	@ 0xac0
 802d46e:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d472:	f6a3 23c4 	subw	r3, r3, #2756	@ 0xac4
 802d476:	f607 1014 	addw	r0, r7, #2324	@ 0x914
 802d47a:	6812      	ldr	r2, [r2, #0]
 802d47c:	6819      	ldr	r1, [r3, #0]
 802d47e:	f7ec fb68 	bl	8019b52 <double_couple_jac_point>
    double_couple_jac_point(&xyK2_4, xyK2_8, E12);
 802d482:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d486:	f5a3 622c 	sub.w	r2, r3, #2752	@ 0xac0
 802d48a:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d48e:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 802d492:	f207 7064 	addw	r0, r7, #1892	@ 0x764
 802d496:	6812      	ldr	r2, [r2, #0]
 802d498:	6819      	ldr	r1, [r3, #0]
 802d49a:	f7ec fb5a 	bl	8019b52 <double_couple_jac_point>

    // Convert from (X:Y:Z) coordinates to (X:Z)
    theta_couple_point_t K1_8, K2_8;
    theta_couple_point_t K1_4, K2_4;

    couple_jac_to_xz(&K1_8, xyK1_8);
 802d49e:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d4a2:	f6a3 23c4 	subw	r3, r3, #2756	@ 0xac4
 802d4a6:	f207 6244 	addw	r2, r7, #1604	@ 0x644
 802d4aa:	6819      	ldr	r1, [r3, #0]
 802d4ac:	4610      	mov	r0, r2
 802d4ae:	f7ec fc75 	bl	8019d9c <couple_jac_to_xz>
    couple_jac_to_xz(&K2_8, xyK2_8);
 802d4b2:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d4b6:	f6a3 23c8 	subw	r3, r3, #2760	@ 0xac8
 802d4ba:	f207 5224 	addw	r2, r7, #1316	@ 0x524
 802d4be:	6819      	ldr	r1, [r3, #0]
 802d4c0:	4610      	mov	r0, r2
 802d4c2:	f7ec fc6b 	bl	8019d9c <couple_jac_to_xz>
    couple_jac_to_xz(&K1_4, &xyK1_4);
 802d4c6:	f607 1214 	addw	r2, r7, #2324	@ 0x914
 802d4ca:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 802d4ce:	4611      	mov	r1, r2
 802d4d0:	4618      	mov	r0, r3
 802d4d2:	f7ec fc63 	bl	8019d9c <couple_jac_to_xz>
    couple_jac_to_xz(&K2_4, &xyK2_4);
 802d4d6:	f207 7264 	addw	r2, r7, #1892	@ 0x764
 802d4da:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 802d4de:	4611      	mov	r1, r2
 802d4e0:	4618      	mov	r0, r3
 802d4e2:	f7ec fc5b 	bl	8019d9c <couple_jac_to_xz>

    // Set the basis change matrix, if we have not been given a valid K[8] for this computation
    // gluing_change_of_basis will detect this and return 0
    if (!gluing_change_of_basis(&out->M, &K1_4, &K2_4, E12)) {
 802d4e6:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d4ea:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d4ee:	681b      	ldr	r3, [r3, #0]
 802d4f0:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
 802d4f4:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d4f8:	f5a3 632c 	sub.w	r3, r3, #2752	@ 0xac0
 802d4fc:	f507 7239 	add.w	r2, r7, #740	@ 0x2e4
 802d500:	f207 4104 	addw	r1, r7, #1028	@ 0x404
 802d504:	681b      	ldr	r3, [r3, #0]
 802d506:	f7ff fa74 	bl	802c9f2 <gluing_change_of_basis>
 802d50a:	4603      	mov	r3, r0
 802d50c:	2b00      	cmp	r3, #0
 802d50e:	d10a      	bne.n	802d526 <gluing_compute+0x22e>
        debug_print("gluing failed as kernel does not have correct order");
 802d510:	4b3a      	ldr	r3, [pc, #232]	@ (802d5fc <gluing_compute+0x304>)
 802d512:	9300      	str	r3, [sp, #0]
 802d514:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 802d518:	4a39      	ldr	r2, [pc, #228]	@ (802d600 <gluing_compute+0x308>)
 802d51a:	493e      	ldr	r1, [pc, #248]	@ (802d614 <gluing_compute+0x31c>)
 802d51c:	483a      	ldr	r0, [pc, #232]	@ (802d608 <gluing_compute+0x310>)
 802d51e:	f008 fa0d 	bl	803593c <iprintf>
        return 0;
 802d522:	2300      	movs	r3, #0
 802d524:	e17b      	b.n	802d81e <gluing_compute+0x526>
    }

    // apply the base change to the kernel
    theta_point_t TT1, TT2;

    base_change(&TT1, out, &K1_8);
 802d526:	f207 6244 	addw	r2, r7, #1604	@ 0x644
 802d52a:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d52e:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d532:	f507 70e2 	add.w	r0, r7, #452	@ 0x1c4
 802d536:	6819      	ldr	r1, [r3, #0]
 802d538:	f7fe ffa2 	bl	802c480 <base_change>
    base_change(&TT2, out, &K2_8);
 802d53c:	f207 5224 	addw	r2, r7, #1316	@ 0x524
 802d540:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d544:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d548:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 802d54c:	6819      	ldr	r1, [r3, #0]
 802d54e:	f7fe ff97 	bl	802c480 <base_change>

    // compute the codomain
    to_squared_theta(&TT1, &TT1);
 802d552:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 802d556:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d55a:	4611      	mov	r1, r2
 802d55c:	4618      	mov	r0, r3
 802d55e:	f7fe fbd3 	bl	802bd08 <to_squared_theta>
    to_squared_theta(&TT2, &TT2);
 802d562:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 802d566:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802d56a:	4611      	mov	r1, r2
 802d56c:	4618      	mov	r0, r3
 802d56e:	f7fe fbcb 	bl	802bd08 <to_squared_theta>

    // If the kernel is well formed then TT1.t and TT2.t are zero
    // if they are not, we exit early as the signature we are validating
    // is probably malformed
    if (!(fp2_is_zero(&TT1.t) & fp2_is_zero(&TT2.t))) {
 802d572:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d576:	33d8      	adds	r3, #216	@ 0xd8
 802d578:	4618      	mov	r0, r3
 802d57a:	f7e5 fa0f 	bl	801299c <fp2_is_zero>
 802d57e:	4604      	mov	r4, r0
 802d580:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802d584:	33d8      	adds	r3, #216	@ 0xd8
 802d586:	4618      	mov	r0, r3
 802d588:	f7e5 fa08 	bl	801299c <fp2_is_zero>
 802d58c:	4603      	mov	r3, r0
 802d58e:	4023      	ands	r3, r4
 802d590:	2b00      	cmp	r3, #0
 802d592:	d10a      	bne.n	802d5aa <gluing_compute+0x2b2>
        debug_print("gluing failed TT1.t or TT2.t is not zero");
 802d594:	4b19      	ldr	r3, [pc, #100]	@ (802d5fc <gluing_compute+0x304>)
 802d596:	9300      	str	r3, [sp, #0]
 802d598:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 802d59c:	4a18      	ldr	r2, [pc, #96]	@ (802d600 <gluing_compute+0x308>)
 802d59e:	491e      	ldr	r1, [pc, #120]	@ (802d618 <gluing_compute+0x320>)
 802d5a0:	4819      	ldr	r0, [pc, #100]	@ (802d608 <gluing_compute+0x310>)
 802d5a2:	f008 f9cb 	bl	803593c <iprintf>
        return 0;
 802d5a6:	2300      	movs	r3, #0
 802d5a8:	e139      	b.n	802d81e <gluing_compute+0x526>
    }
    // Test our projective factors are non zero
    if (fp2_is_zero(&TT1.x) | fp2_is_zero(&TT2.x) | fp2_is_zero(&TT1.y) | fp2_is_zero(&TT2.z) | fp2_is_zero(&TT1.z))
 802d5aa:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d5ae:	4618      	mov	r0, r3
 802d5b0:	f7e5 f9f4 	bl	801299c <fp2_is_zero>
 802d5b4:	4604      	mov	r4, r0
 802d5b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802d5ba:	4618      	mov	r0, r3
 802d5bc:	f7e5 f9ee 	bl	801299c <fp2_is_zero>
 802d5c0:	4603      	mov	r3, r0
 802d5c2:	431c      	orrs	r4, r3
 802d5c4:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d5c8:	3348      	adds	r3, #72	@ 0x48
 802d5ca:	4618      	mov	r0, r3
 802d5cc:	f7e5 f9e6 	bl	801299c <fp2_is_zero>
 802d5d0:	4603      	mov	r3, r0
 802d5d2:	431c      	orrs	r4, r3
 802d5d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802d5d8:	3390      	adds	r3, #144	@ 0x90
 802d5da:	4618      	mov	r0, r3
 802d5dc:	f7e5 f9de 	bl	801299c <fp2_is_zero>
 802d5e0:	4603      	mov	r3, r0
 802d5e2:	431c      	orrs	r4, r3
 802d5e4:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d5e8:	3390      	adds	r3, #144	@ 0x90
 802d5ea:	4618      	mov	r0, r3
 802d5ec:	f7e5 f9d6 	bl	801299c <fp2_is_zero>
 802d5f0:	4603      	mov	r3, r0
 802d5f2:	4323      	orrs	r3, r4
 802d5f4:	2b00      	cmp	r3, #0
 802d5f6:	d011      	beq.n	802d61c <gluing_compute+0x324>
        return 0; // invalid input
 802d5f8:	2300      	movs	r3, #0
 802d5fa:	e110      	b.n	802d81e <gluing_compute+0x526>
 802d5fc:	0803911c 	.word	0x0803911c
 802d600:	08039140 	.word	0x08039140
 802d604:	08039154 	.word	0x08039154
 802d608:	08039178 	.word	0x08039178
 802d60c:	080391a8 	.word	0x080391a8
 802d610:	080391cc 	.word	0x080391cc
 802d614:	080391f0 	.word	0x080391f0
 802d618:	08039224 	.word	0x08039224

    // Projective factor: Ax
    fp2_mul(&out->codomain.x, &TT1.x, &TT2.x);
 802d61c:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d620:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d624:	681b      	ldr	r3, [r3, #0]
 802d626:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 802d62a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 802d62e:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 802d632:	4618      	mov	r0, r3
 802d634:	f7e5 fa7b 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.y, &TT1.y, &TT2.x);
 802d638:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d63c:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d640:	681b      	ldr	r3, [r3, #0]
 802d642:	f503 6027 	add.w	r0, r3, #2672	@ 0xa70
 802d646:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 802d64a:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d64e:	3348      	adds	r3, #72	@ 0x48
 802d650:	4619      	mov	r1, r3
 802d652:	f7e5 fa6c 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.z, &TT1.x, &TT2.z);
 802d656:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d65a:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d65e:	681b      	ldr	r3, [r3, #0]
 802d660:	f603 20b8 	addw	r0, r3, #2744	@ 0xab8
 802d664:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802d668:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802d66c:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d670:	4619      	mov	r1, r3
 802d672:	f7e5 fa5c 	bl	8012b2e <fp2_mul>
    fp2_set_zero(&out->codomain.t);
 802d676:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d67a:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d67e:	681b      	ldr	r3, [r3, #0]
 802d680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 802d684:	4618      	mov	r0, r3
 802d686:	f7e5 f978 	bl	801297a <fp2_set_zero>
    // Projective factor: ABCxz
    fp2_mul(&out->precomputation.x, &TT1.y, &TT2.z);
 802d68a:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d68e:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d692:	681b      	ldr	r3, [r3, #0]
 802d694:	f603 1008 	addw	r0, r3, #2312	@ 0x908
 802d698:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802d69c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802d6a0:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d6a4:	3348      	adds	r3, #72	@ 0x48
 802d6a6:	4619      	mov	r1, r3
 802d6a8:	f7e5 fa41 	bl	8012b2e <fp2_mul>
    fp2_copy(&out->precomputation.y, &out->codomain.z);
 802d6ac:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d6b0:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d6b4:	681b      	ldr	r3, [r3, #0]
 802d6b6:	f503 6215 	add.w	r2, r3, #2384	@ 0x950
 802d6ba:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d6be:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d6c2:	681b      	ldr	r3, [r3, #0]
 802d6c4:	f603 23b8 	addw	r3, r3, #2744	@ 0xab8
 802d6c8:	4619      	mov	r1, r3
 802d6ca:	4610      	mov	r0, r2
 802d6cc:	f7e5 f9ae 	bl	8012a2c <fp2_copy>
    fp2_copy(&out->precomputation.z, &out->codomain.y);
 802d6d0:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d6d4:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d6d8:	681b      	ldr	r3, [r3, #0]
 802d6da:	f603 1298 	addw	r2, r3, #2456	@ 0x998
 802d6de:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d6e2:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d6e6:	681b      	ldr	r3, [r3, #0]
 802d6e8:	f503 6327 	add.w	r3, r3, #2672	@ 0xa70
 802d6ec:	4619      	mov	r1, r3
 802d6ee:	4610      	mov	r0, r2
 802d6f0:	f7e5 f99c 	bl	8012a2c <fp2_copy>
    fp2_set_zero(&out->precomputation.t);
 802d6f4:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d6f8:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d6fc:	681b      	ldr	r3, [r3, #0]
 802d6fe:	f503 631e 	add.w	r3, r3, #2528	@ 0x9e0
 802d702:	4618      	mov	r0, r3
 802d704:	f7e5 f939 	bl	801297a <fp2_set_zero>

    // Compute the two components of phi(K1_8) = (x:x:y:y).
    fp2_mul(&out->imageK1_8.x, &TT1.x, &out->precomputation.x);
 802d708:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d70c:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d710:	681b      	ldr	r3, [r3, #0]
 802d712:	f503 707e 	add.w	r0, r3, #1016	@ 0x3f8
 802d716:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d71a:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d71e:	681b      	ldr	r3, [r3, #0]
 802d720:	f603 1208 	addw	r2, r3, #2312	@ 0x908
 802d724:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d728:	4619      	mov	r1, r3
 802d72a:	f7e5 fa00 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->imageK1_8.y, &TT1.z, &out->precomputation.z);
 802d72e:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d732:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d736:	681b      	ldr	r3, [r3, #0]
 802d738:	f503 6088 	add.w	r0, r3, #1088	@ 0x440
 802d73c:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d740:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d744:	681b      	ldr	r3, [r3, #0]
 802d746:	f603 1298 	addw	r2, r3, #2456	@ 0x998
 802d74a:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d74e:	3390      	adds	r3, #144	@ 0x90
 802d750:	4619      	mov	r1, r3
 802d752:	f7e5 f9ec 	bl	8012b2e <fp2_mul>

    // If K1_8 and K2_8 are our 8-torsion points, this ensures that the
    // 4-torsion points [2]K1_8 and [2]K2_8 are isotropic.
    if (verify) {
 802d756:	f897 3ad8 	ldrb.w	r3, [r7, #2776]	@ 0xad8
 802d75a:	2b00      	cmp	r3, #0
 802d75c:	d04c      	beq.n	802d7f8 <gluing_compute+0x500>
        fp2_t t1, t2;
        fp2_mul(&t1, &TT1.y, &out->precomputation.y);
 802d75e:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d762:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d766:	681b      	ldr	r3, [r3, #0]
 802d768:	f503 6215 	add.w	r2, r3, #2384	@ 0x950
 802d76c:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 802d770:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d774:	f107 0314 	add.w	r3, r7, #20
 802d778:	4618      	mov	r0, r3
 802d77a:	f7e5 f9d8 	bl	8012b2e <fp2_mul>
        if (!fp2_is_equal(&out->imageK1_8.x, &t1))
 802d77e:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d782:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d786:	681b      	ldr	r3, [r3, #0]
 802d788:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 802d78c:	f107 0214 	add.w	r2, r7, #20
 802d790:	4611      	mov	r1, r2
 802d792:	4618      	mov	r0, r3
 802d794:	f7e5 f916 	bl	80129c4 <fp2_is_equal>
 802d798:	4603      	mov	r3, r0
 802d79a:	2b00      	cmp	r3, #0
 802d79c:	d101      	bne.n	802d7a2 <gluing_compute+0x4aa>
            return 0;
 802d79e:	2300      	movs	r3, #0
 802d7a0:	e03d      	b.n	802d81e <gluing_compute+0x526>
        fp2_mul(&t1, &TT2.x, &out->precomputation.x);
 802d7a2:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d7a6:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d7aa:	681b      	ldr	r3, [r3, #0]
 802d7ac:	f603 1208 	addw	r2, r3, #2312	@ 0x908
 802d7b0:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 802d7b4:	f107 0314 	add.w	r3, r7, #20
 802d7b8:	4618      	mov	r0, r3
 802d7ba:	f7e5 f9b8 	bl	8012b2e <fp2_mul>
        fp2_mul(&t2, &TT2.z, &out->precomputation.z);
 802d7be:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d7c2:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d7c6:	681b      	ldr	r3, [r3, #0]
 802d7c8:	f603 1298 	addw	r2, r3, #2456	@ 0x998
 802d7cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802d7d0:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802d7d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802d7d8:	4618      	mov	r0, r3
 802d7da:	f7e5 f9a8 	bl	8012b2e <fp2_mul>
        if (!fp2_is_equal(&t2, &t1))
 802d7de:	f107 0214 	add.w	r2, r7, #20
 802d7e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802d7e6:	4611      	mov	r1, r2
 802d7e8:	4618      	mov	r0, r3
 802d7ea:	f7e5 f8eb 	bl	80129c4 <fp2_is_equal>
 802d7ee:	4603      	mov	r3, r0
 802d7f0:	2b00      	cmp	r3, #0
 802d7f2:	d101      	bne.n	802d7f8 <gluing_compute+0x500>
            return 0;
 802d7f4:	2300      	movs	r3, #0
 802d7f6:	e012      	b.n	802d81e <gluing_compute+0x526>
    }

    // compute the final codomain
    hadamard(&out->codomain, &out->codomain);
 802d7f8:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d7fc:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d800:	681b      	ldr	r3, [r3, #0]
 802d802:	f603 2228 	addw	r2, r3, #2600	@ 0xa28
 802d806:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 802d80a:	f6a3 23bc 	subw	r3, r3, #2748	@ 0xabc
 802d80e:	681b      	ldr	r3, [r3, #0]
 802d810:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 802d814:	4619      	mov	r1, r3
 802d816:	4610      	mov	r0, r2
 802d818:	f7fe f9bf 	bl	802bb9a <hadamard>
    return 1;
 802d81c:	2301      	movs	r3, #1
}
 802d81e:	4618      	mov	r0, r3
 802d820:	f607 27cc 	addw	r7, r7, #2764	@ 0xacc
 802d824:	46bd      	mov	sp, r7
 802d826:	bd90      	pop	{r4, r7, pc}

0802d828 <gluing_eval_point>:

// sub routine of the gluing eval
static void
gluing_eval_point(theta_point_t *image, const theta_couple_jac_point_t *P, const theta_gluing_t *phi)
{
 802d828:	b580      	push	{r7, lr}
 802d82a:	f5ad 6d80 	sub.w	sp, sp, #1024	@ 0x400
 802d82e:	af00      	add	r7, sp, #0
 802d830:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d834:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 802d838:	6018      	str	r0, [r3, #0]
 802d83a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d83e:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 802d842:	6019      	str	r1, [r3, #0]
 802d844:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d848:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802d84c:	601a      	str	r2, [r3, #0]
    theta_point_t T1, T2;
    add_components_t add_comp1, add_comp2;

    // Compute the cross addition components of P1+Q1 and P2+Q2
    jac_to_xz_add_components(&add_comp1, &P->P1, &phi->xyK1_8.P1, &phi->domain.E1);
 802d84e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d852:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 802d856:	6819      	ldr	r1, [r3, #0]
 802d858:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d85c:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802d860:	681b      	ldr	r3, [r3, #0]
 802d862:	f503 7212 	add.w	r2, r3, #584	@ 0x248
 802d866:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d86a:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802d86e:	681b      	ldr	r3, [r3, #0]
 802d870:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 802d874:	f7e0 f9bd 	bl	800dbf2 <jac_to_xz_add_components>
    jac_to_xz_add_components(&add_comp2, &P->P2, &phi->xyK1_8.P2, &phi->domain.E2);
 802d878:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d87c:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 802d880:	681b      	ldr	r3, [r3, #0]
 802d882:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802d886:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d88a:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802d88e:	681b      	ldr	r3, [r3, #0]
 802d890:	f503 7248 	add.w	r2, r3, #800	@ 0x320
 802d894:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d898:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802d89c:	681b      	ldr	r3, [r3, #0]
 802d89e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802d8a2:	f107 0010 	add.w	r0, r7, #16
 802d8a6:	f7e0 f9a4 	bl	800dbf2 <jac_to_xz_add_components>

    // Compute T1 and T2 derived from the cross addition components.
    fp2_mul(&T1.x, &add_comp1.u, &add_comp2.u); // T1x = u1u2
 802d8aa:	f107 0210 	add.w	r2, r7, #16
 802d8ae:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802d8b2:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802d8b6:	4618      	mov	r0, r3
 802d8b8:	f7e5 f939 	bl	8012b2e <fp2_mul>
    fp2_mul(&T2.t, &add_comp1.v, &add_comp2.v); // T2t = v1v2
 802d8bc:	f107 0310 	add.w	r3, r7, #16
 802d8c0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802d8c4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802d8c8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d8cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d8d0:	33d8      	adds	r3, #216	@ 0xd8
 802d8d2:	4618      	mov	r0, r3
 802d8d4:	f7e5 f92b 	bl	8012b2e <fp2_mul>
    fp2_add(&T1.x, &T1.x, &T2.t);               // T1x = u1u2 + v1v2
 802d8d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d8dc:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802d8e0:	f507 7138 	add.w	r1, r7, #736	@ 0x2e0
 802d8e4:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802d8e8:	4618      	mov	r0, r3
 802d8ea:	f7e5 f8b7 	bl	8012a5c <fp2_add>
    fp2_mul(&T1.y, &add_comp1.u, &add_comp2.w); // T1y = u1w2
 802d8ee:	f107 0310 	add.w	r3, r7, #16
 802d8f2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802d8f6:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802d8fa:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802d8fe:	3348      	adds	r3, #72	@ 0x48
 802d900:	4618      	mov	r0, r3
 802d902:	f7e5 f914 	bl	8012b2e <fp2_mul>
    fp2_mul(&T1.z, &add_comp1.w, &add_comp2.u); // T1z = w1u2
 802d906:	f107 0210 	add.w	r2, r7, #16
 802d90a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802d90e:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802d912:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802d916:	3390      	adds	r3, #144	@ 0x90
 802d918:	4618      	mov	r0, r3
 802d91a:	f7e5 f908 	bl	8012b2e <fp2_mul>
    fp2_mul(&T1.t, &add_comp1.w, &add_comp2.w); // T1t = w1w2
 802d91e:	f107 0310 	add.w	r3, r7, #16
 802d922:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802d926:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802d92a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802d92e:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802d932:	33d8      	adds	r3, #216	@ 0xd8
 802d934:	4618      	mov	r0, r3
 802d936:	f7e5 f8fa 	bl	8012b2e <fp2_mul>
    fp2_add(&T2.x, &add_comp1.u, &add_comp1.v); // T2x = (u1+v1)
 802d93a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802d93e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802d942:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802d946:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d94a:	4618      	mov	r0, r3
 802d94c:	f7e5 f886 	bl	8012a5c <fp2_add>
    fp2_add(&T2.y, &add_comp2.u, &add_comp2.v); // T2y = (u2+v2)
 802d950:	f107 0310 	add.w	r3, r7, #16
 802d954:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802d958:	f107 0110 	add.w	r1, r7, #16
 802d95c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d960:	3348      	adds	r3, #72	@ 0x48
 802d962:	4618      	mov	r0, r3
 802d964:	f7e5 f87a 	bl	8012a5c <fp2_add>
    fp2_mul(&T2.x, &T2.x, &T2.y);               // T2x = (u1+v1)(u2+v2)
 802d968:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d96c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802d970:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 802d974:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d978:	4618      	mov	r0, r3
 802d97a:	f7e5 f8d8 	bl	8012b2e <fp2_mul>
    fp2_sub(&T2.x, &T2.x, &T1.x);               // T1x = v1u2 + u1v2
 802d97e:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 802d982:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 802d986:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d98a:	4618      	mov	r0, r3
 802d98c:	f7e5 f89c 	bl	8012ac8 <fp2_sub>
    fp2_mul(&T2.y, &add_comp1.v, &add_comp2.w); // T2y = v1w2
 802d990:	f107 0310 	add.w	r3, r7, #16
 802d994:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802d998:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802d99c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d9a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d9a4:	3348      	adds	r3, #72	@ 0x48
 802d9a6:	4618      	mov	r0, r3
 802d9a8:	f7e5 f8c1 	bl	8012b2e <fp2_mul>
    fp2_mul(&T2.z, &add_comp1.w, &add_comp2.v); // T2z = w1v2
 802d9ac:	f107 0310 	add.w	r3, r7, #16
 802d9b0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802d9b4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802d9b8:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802d9bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d9c0:	3390      	adds	r3, #144	@ 0x90
 802d9c2:	4618      	mov	r0, r3
 802d9c4:	f7e5 f8b3 	bl	8012b2e <fp2_mul>
    fp2_set_zero(&T2.t);                        // T2t = 0
 802d9c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802d9cc:	33d8      	adds	r3, #216	@ 0xd8
 802d9ce:	4618      	mov	r0, r3
 802d9d0:	f7e4 ffd3 	bl	801297a <fp2_set_zero>

    // Apply the basis change and compute their respective square
    // theta(P+Q) = M.T1 - M.T2 and theta(P-Q) = M.T1 + M.T2
    apply_isomorphism_general(&T1, &phi->M, &T1, true);
 802d9d4:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d9d8:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802d9dc:	681b      	ldr	r3, [r3, #0]
 802d9de:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 802d9e2:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 802d9e6:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 802d9ea:	2301      	movs	r3, #1
 802d9ec:	f7fe fa6e 	bl	802becc <apply_isomorphism_general>
    apply_isomorphism_general(&T2, &phi->M, &T2, false);
 802d9f0:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802d9f4:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802d9f8:	681b      	ldr	r3, [r3, #0]
 802d9fa:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 802d9fe:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 802da02:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 802da06:	2300      	movs	r3, #0
 802da08:	f7fe fa60 	bl	802becc <apply_isomorphism_general>
    pointwise_square(&T1, &T1);
 802da0c:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 802da10:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da14:	4611      	mov	r1, r2
 802da16:	4618      	mov	r0, r3
 802da18:	f7fe f94c 	bl	802bcb4 <pointwise_square>
    pointwise_square(&T2, &T2);
 802da1c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 802da20:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802da24:	4611      	mov	r1, r2
 802da26:	4618      	mov	r0, r3
 802da28:	f7fe f944 	bl	802bcb4 <pointwise_square>

    // the difference between the two is therefore theta(P+Q)theta(P-Q)
    // whose hadamard transform is then the product of the dual
    // theta_points of phi(P) and phi(Q).
    fp2_sub(&T1.x, &T1.x, &T2.x);
 802da2c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 802da30:	f507 7138 	add.w	r1, r7, #736	@ 0x2e0
 802da34:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da38:	4618      	mov	r0, r3
 802da3a:	f7e5 f845 	bl	8012ac8 <fp2_sub>
    fp2_sub(&T1.y, &T1.y, &T2.y);
 802da3e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802da42:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802da46:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da4a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802da4e:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da52:	3348      	adds	r3, #72	@ 0x48
 802da54:	4618      	mov	r0, r3
 802da56:	f7e5 f837 	bl	8012ac8 <fp2_sub>
    fp2_sub(&T1.z, &T1.z, &T2.z);
 802da5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802da5e:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802da62:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da66:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802da6a:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da6e:	3390      	adds	r3, #144	@ 0x90
 802da70:	4618      	mov	r0, r3
 802da72:	f7e5 f829 	bl	8012ac8 <fp2_sub>
    fp2_sub(&T1.t, &T1.t, &T2.t);
 802da76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802da7a:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802da7e:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da82:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802da86:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da8a:	33d8      	adds	r3, #216	@ 0xd8
 802da8c:	4618      	mov	r0, r3
 802da8e:	f7e5 f81b 	bl	8012ac8 <fp2_sub>
    hadamard(&T1, &T1);
 802da92:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 802da96:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802da9a:	4611      	mov	r1, r2
 802da9c:	4618      	mov	r0, r3
 802da9e:	f7fe f87c 	bl	802bb9a <hadamard>

    // Compute (x, y, z, t)
    // As imageK1_8 = (x:x:y:y), its inverse is (y:y:x:x).
    fp2_mul(&image->x, &T1.x, &phi->imageK1_8.y);
 802daa2:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802daa6:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 802daaa:	6818      	ldr	r0, [r3, #0]
 802daac:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802dab0:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802dab4:	681b      	ldr	r3, [r3, #0]
 802dab6:	f503 6288 	add.w	r2, r3, #1088	@ 0x440
 802daba:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802dabe:	4619      	mov	r1, r3
 802dac0:	f7e5 f835 	bl	8012b2e <fp2_mul>
    fp2_mul(&image->y, &T1.y, &phi->imageK1_8.y);
 802dac4:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802dac8:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 802dacc:	681b      	ldr	r3, [r3, #0]
 802dace:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802dad2:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802dad6:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802dada:	681b      	ldr	r3, [r3, #0]
 802dadc:	f503 6288 	add.w	r2, r3, #1088	@ 0x440
 802dae0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802dae4:	3348      	adds	r3, #72	@ 0x48
 802dae6:	4619      	mov	r1, r3
 802dae8:	f7e5 f821 	bl	8012b2e <fp2_mul>
    fp2_mul(&image->z, &T1.z, &phi->imageK1_8.x);
 802daec:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802daf0:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 802daf4:	681b      	ldr	r3, [r3, #0]
 802daf6:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802dafa:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802dafe:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802db02:	681b      	ldr	r3, [r3, #0]
 802db04:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 802db08:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802db0c:	3390      	adds	r3, #144	@ 0x90
 802db0e:	4619      	mov	r1, r3
 802db10:	f7e5 f80d 	bl	8012b2e <fp2_mul>
    fp2_mul(&image->t, &T1.t, &phi->imageK1_8.x);
 802db14:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802db18:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 802db1c:	681b      	ldr	r3, [r3, #0]
 802db1e:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802db22:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802db26:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 802db2a:	681b      	ldr	r3, [r3, #0]
 802db2c:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 802db30:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802db34:	33d8      	adds	r3, #216	@ 0xd8
 802db36:	4619      	mov	r1, r3
 802db38:	f7e4 fff9 	bl	8012b2e <fp2_mul>

    hadamard(image, image);
 802db3c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802db40:	f5a3 727d 	sub.w	r2, r3, #1012	@ 0x3f4
 802db44:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 802db48:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 802db4c:	6811      	ldr	r1, [r2, #0]
 802db4e:	6818      	ldr	r0, [r3, #0]
 802db50:	f7fe f823 	bl	802bb9a <hadamard>
}
 802db54:	bf00      	nop
 802db56:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 802db5a:	46bd      	mov	sp, r7
 802db5c:	bd80      	pop	{r7, pc}

0802db5e <gluing_eval_point_special_case>:
// Same as gluing_eval_point but in the very special case where we already know that the point will
// have a zero coordinate at the place where the zero coordinate of the dual_theta_nullpoint would
// have made the computation difficult
static int
gluing_eval_point_special_case(theta_point_t *image, const theta_couple_point_t *P, const theta_gluing_t *phi)
{
 802db5e:	b580      	push	{r7, lr}
 802db60:	b0cc      	sub	sp, #304	@ 0x130
 802db62:	af00      	add	r7, sp, #0
 802db64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802db68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802db6c:	6018      	str	r0, [r3, #0]
 802db6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802db72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802db76:	6019      	str	r1, [r3, #0]
 802db78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802db7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802db80:	601a      	str	r2, [r3, #0]
    theta_point_t T;

    // Apply the basis change
    base_change(&T, phi, P);
 802db82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802db86:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 802db8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802db8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802db92:	f107 0010 	add.w	r0, r7, #16
 802db96:	6812      	ldr	r2, [r2, #0]
 802db98:	6819      	ldr	r1, [r3, #0]
 802db9a:	f7fe fc71 	bl	802c480 <base_change>

    // Apply the to_squared_theta transform
    to_squared_theta(&T, &T);
 802db9e:	f107 0210 	add.w	r2, r7, #16
 802dba2:	f107 0310 	add.w	r3, r7, #16
 802dba6:	4611      	mov	r1, r2
 802dba8:	4618      	mov	r0, r3
 802dbaa:	f7fe f8ad 	bl	802bd08 <to_squared_theta>

    // This coordinate should always be 0 in a gluing because D=0.
    // If this is not the case, something went very wrong, so reject
    if (!fp2_is_zero(&T.t))
 802dbae:	f107 0310 	add.w	r3, r7, #16
 802dbb2:	33d8      	adds	r3, #216	@ 0xd8
 802dbb4:	4618      	mov	r0, r3
 802dbb6:	f7e4 fef1 	bl	801299c <fp2_is_zero>
 802dbba:	4603      	mov	r3, r0
 802dbbc:	2b00      	cmp	r3, #0
 802dbbe:	d101      	bne.n	802dbc4 <gluing_eval_point_special_case+0x66>
        return 0;
 802dbc0:	2300      	movs	r3, #0
 802dbc2:	e04e      	b.n	802dc62 <gluing_eval_point_special_case+0x104>

    // Compute (x, y, z, t)
    fp2_mul(&image->x, &T.x, &phi->precomputation.x);
 802dbc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dbc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802dbcc:	6818      	ldr	r0, [r3, #0]
 802dbce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dbd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802dbd6:	681b      	ldr	r3, [r3, #0]
 802dbd8:	f603 1208 	addw	r2, r3, #2312	@ 0x908
 802dbdc:	f107 0310 	add.w	r3, r7, #16
 802dbe0:	4619      	mov	r1, r3
 802dbe2:	f7e4 ffa4 	bl	8012b2e <fp2_mul>
    fp2_mul(&image->y, &T.y, &phi->precomputation.y);
 802dbe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dbea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802dbee:	681b      	ldr	r3, [r3, #0]
 802dbf0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802dbf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dbf8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802dbfc:	681b      	ldr	r3, [r3, #0]
 802dbfe:	f503 6215 	add.w	r2, r3, #2384	@ 0x950
 802dc02:	f107 0310 	add.w	r3, r7, #16
 802dc06:	3348      	adds	r3, #72	@ 0x48
 802dc08:	4619      	mov	r1, r3
 802dc0a:	f7e4 ff90 	bl	8012b2e <fp2_mul>
    fp2_mul(&image->z, &T.z, &phi->precomputation.z);
 802dc0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dc12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802dc16:	681b      	ldr	r3, [r3, #0]
 802dc18:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802dc1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dc20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802dc24:	681b      	ldr	r3, [r3, #0]
 802dc26:	f603 1298 	addw	r2, r3, #2456	@ 0x998
 802dc2a:	f107 0310 	add.w	r3, r7, #16
 802dc2e:	3390      	adds	r3, #144	@ 0x90
 802dc30:	4619      	mov	r1, r3
 802dc32:	f7e4 ff7c 	bl	8012b2e <fp2_mul>
    fp2_set_zero(&image->t);
 802dc36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dc3a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802dc3e:	681b      	ldr	r3, [r3, #0]
 802dc40:	33d8      	adds	r3, #216	@ 0xd8
 802dc42:	4618      	mov	r0, r3
 802dc44:	f7e4 fe99 	bl	801297a <fp2_set_zero>

    hadamard(image, image);
 802dc48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dc4c:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 802dc50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802dc54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802dc58:	6811      	ldr	r1, [r2, #0]
 802dc5a:	6818      	ldr	r0, [r3, #0]
 802dc5c:	f7fd ff9d 	bl	802bb9a <hadamard>
    return 1;
 802dc60:	2301      	movs	r3, #1
}
 802dc62:	4618      	mov	r0, r3
 802dc64:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 802dc68:	46bd      	mov	sp, r7
 802dc6a:	bd80      	pop	{r7, pc}

0802dc6c <gluing_eval_basis>:
gluing_eval_basis(theta_point_t *image1,
                  theta_point_t *image2,
                  const theta_couple_jac_point_t *xyT1,
                  const theta_couple_jac_point_t *xyT2,
                  const theta_gluing_t *phi)
{
 802dc6c:	b580      	push	{r7, lr}
 802dc6e:	b084      	sub	sp, #16
 802dc70:	af00      	add	r7, sp, #0
 802dc72:	60f8      	str	r0, [r7, #12]
 802dc74:	60b9      	str	r1, [r7, #8]
 802dc76:	607a      	str	r2, [r7, #4]
 802dc78:	603b      	str	r3, [r7, #0]
    gluing_eval_point(image1, xyT1, phi);
 802dc7a:	69ba      	ldr	r2, [r7, #24]
 802dc7c:	6879      	ldr	r1, [r7, #4]
 802dc7e:	68f8      	ldr	r0, [r7, #12]
 802dc80:	f7ff fdd2 	bl	802d828 <gluing_eval_point>
    gluing_eval_point(image2, xyT2, phi);
 802dc84:	69ba      	ldr	r2, [r7, #24]
 802dc86:	6839      	ldr	r1, [r7, #0]
 802dc88:	68b8      	ldr	r0, [r7, #8]
 802dc8a:	f7ff fdcd 	bl	802d828 <gluing_eval_point>
}
 802dc8e:	bf00      	nop
 802dc90:	3710      	adds	r7, #16
 802dc92:	46bd      	mov	sp, r7
 802dc94:	bd80      	pop	{r7, pc}

0802dc96 <theta_isogeny_compute>:
                      const theta_point_t *T1_8,
                      const theta_point_t *T2_8,
                      bool hadamard_bool_1,
                      bool hadamard_bool_2,
                      bool verify)
{
 802dc96:	b590      	push	{r4, r7, lr}
 802dc98:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 802dc9c:	af00      	add	r7, sp, #0
 802dc9e:	f507 744a 	add.w	r4, r7, #808	@ 0x328
 802dca2:	f5a4 7447 	sub.w	r4, r4, #796	@ 0x31c
 802dca6:	6020      	str	r0, [r4, #0]
 802dca8:	f507 704a 	add.w	r0, r7, #808	@ 0x328
 802dcac:	f5a0 7048 	sub.w	r0, r0, #800	@ 0x320
 802dcb0:	6001      	str	r1, [r0, #0]
 802dcb2:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 802dcb6:	f5a1 7149 	sub.w	r1, r1, #804	@ 0x324
 802dcba:	600a      	str	r2, [r1, #0]
 802dcbc:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 802dcc0:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 802dcc4:	6013      	str	r3, [r2, #0]
    out->hadamard_bool_1 = hadamard_bool_1;
 802dcc6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dcca:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dcce:	681b      	ldr	r3, [r3, #0]
 802dcd0:	f897 2338 	ldrb.w	r2, [r7, #824]	@ 0x338
 802dcd4:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
    out->hadamard_bool_2 = hadamard_bool_2;
 802dcd8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dcdc:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dce0:	681b      	ldr	r3, [r3, #0]
 802dce2:	f897 233c 	ldrb.w	r2, [r7, #828]	@ 0x33c
 802dce6:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241
    out->domain = *A;
 802dcea:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dcee:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dcf2:	681b      	ldr	r3, [r3, #0]
 802dcf4:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 802dcf8:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
 802dcfc:	6812      	ldr	r2, [r2, #0]
 802dcfe:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 802dd02:	4611      	mov	r1, r2
 802dd04:	f44f 7259 	mov.w	r2, #868	@ 0x364
 802dd08:	4618      	mov	r0, r3
 802dd0a:	f008 f848 	bl	8035d9e <memcpy>
    out->T1_8 = *T1_8;
 802dd0e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dd12:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dd16:	681a      	ldr	r2, [r3, #0]
 802dd18:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dd1c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 802dd20:	681b      	ldr	r3, [r3, #0]
 802dd22:	4610      	mov	r0, r2
 802dd24:	4619      	mov	r1, r3
 802dd26:	f44f 7390 	mov.w	r3, #288	@ 0x120
 802dd2a:	461a      	mov	r2, r3
 802dd2c:	f008 f837 	bl	8035d9e <memcpy>
    out->T2_8 = *T2_8;
 802dd30:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dd34:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dd38:	681b      	ldr	r3, [r3, #0]
 802dd3a:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 802dd3e:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 802dd42:	6812      	ldr	r2, [r2, #0]
 802dd44:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802dd48:	4611      	mov	r1, r2
 802dd4a:	f44f 7290 	mov.w	r2, #288	@ 0x120
 802dd4e:	4618      	mov	r0, r3
 802dd50:	f008 f825 	bl	8035d9e <memcpy>
    out->codomain.precomputation = false;
 802dd54:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dd58:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dd5c:	681b      	ldr	r3, [r3, #0]
 802dd5e:	2200      	movs	r2, #0
 802dd60:	f883 27e8 	strb.w	r2, [r3, #2024]	@ 0x7e8

    theta_point_t TT1, TT2;

    if (hadamard_bool_1) {
 802dd64:	f897 3338 	ldrb.w	r3, [r7, #824]	@ 0x338
 802dd68:	2b00      	cmp	r3, #0
 802dd6a:	d024      	beq.n	802ddb6 <theta_isogeny_compute+0x120>
        hadamard(&TT1, T1_8);
 802dd6c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dd70:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 802dd74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 802dd78:	6819      	ldr	r1, [r3, #0]
 802dd7a:	4610      	mov	r0, r2
 802dd7c:	f7fd ff0d 	bl	802bb9a <hadamard>
        to_squared_theta(&TT1, &TT1);
 802dd80:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 802dd84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802dd88:	4611      	mov	r1, r2
 802dd8a:	4618      	mov	r0, r3
 802dd8c:	f7fd ffbc 	bl	802bd08 <to_squared_theta>
        hadamard(&TT2, T2_8);
 802dd90:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dd94:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 802dd98:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 802dd9c:	6819      	ldr	r1, [r3, #0]
 802dd9e:	4610      	mov	r0, r2
 802dda0:	f7fd fefb 	bl	802bb9a <hadamard>
        to_squared_theta(&TT2, &TT2);
 802dda4:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 802dda8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802ddac:	4611      	mov	r1, r2
 802ddae:	4618      	mov	r0, r3
 802ddb0:	f7fd ffaa 	bl	802bd08 <to_squared_theta>
 802ddb4:	e013      	b.n	802ddde <theta_isogeny_compute+0x148>
    } else {
        to_squared_theta(&TT1, T1_8);
 802ddb6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802ddba:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 802ddbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 802ddc2:	6819      	ldr	r1, [r3, #0]
 802ddc4:	4610      	mov	r0, r2
 802ddc6:	f7fd ff9f 	bl	802bd08 <to_squared_theta>
        to_squared_theta(&TT2, T2_8);
 802ddca:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802ddce:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 802ddd2:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 802ddd6:	6819      	ldr	r1, [r3, #0]
 802ddd8:	4610      	mov	r0, r2
 802ddda:	f7fd ff95 	bl	802bd08 <to_squared_theta>
    // TT1=(Ax, Bx, Cy, Dy), TT2=(Az, Bw, Cz, Dw)
    // But ABCDxzw=0 can only happen if we had an unexpected splitting in
    // the isogeny chain.
    // In either case reject
    // (this is not strictly necessary, we could just return (0:0:0:0))
    if (fp2_is_zero(&TT2.x) | fp2_is_zero(&TT2.y) | fp2_is_zero(&TT2.z) | fp2_is_zero(&TT2.t) | fp2_is_zero(&TT1.x) |
 802ddde:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802dde2:	4618      	mov	r0, r3
 802dde4:	f7e4 fdda 	bl	801299c <fp2_is_zero>
 802dde8:	4604      	mov	r4, r0
 802ddea:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802ddee:	3348      	adds	r3, #72	@ 0x48
 802ddf0:	4618      	mov	r0, r3
 802ddf2:	f7e4 fdd3 	bl	801299c <fp2_is_zero>
 802ddf6:	4603      	mov	r3, r0
 802ddf8:	431c      	orrs	r4, r3
 802ddfa:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802ddfe:	3390      	adds	r3, #144	@ 0x90
 802de00:	4618      	mov	r0, r3
 802de02:	f7e4 fdcb 	bl	801299c <fp2_is_zero>
 802de06:	4603      	mov	r3, r0
 802de08:	431c      	orrs	r4, r3
 802de0a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802de0e:	33d8      	adds	r3, #216	@ 0xd8
 802de10:	4618      	mov	r0, r3
 802de12:	f7e4 fdc3 	bl	801299c <fp2_is_zero>
 802de16:	4603      	mov	r3, r0
 802de18:	431c      	orrs	r4, r3
 802de1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802de1e:	4618      	mov	r0, r3
 802de20:	f7e4 fdbc 	bl	801299c <fp2_is_zero>
 802de24:	4603      	mov	r3, r0
 802de26:	431c      	orrs	r4, r3
        fp2_is_zero(&TT1.y))
 802de28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802de2c:	3348      	adds	r3, #72	@ 0x48
 802de2e:	4618      	mov	r0, r3
 802de30:	f7e4 fdb4 	bl	801299c <fp2_is_zero>
 802de34:	4603      	mov	r3, r0
    if (fp2_is_zero(&TT2.x) | fp2_is_zero(&TT2.y) | fp2_is_zero(&TT2.z) | fp2_is_zero(&TT2.t) | fp2_is_zero(&TT1.x) |
 802de36:	4323      	orrs	r3, r4
 802de38:	2b00      	cmp	r3, #0
 802de3a:	d001      	beq.n	802de40 <theta_isogeny_compute+0x1aa>
        return 0;
 802de3c:	2300      	movs	r3, #0
 802de3e:	e16b      	b.n	802e118 <theta_isogeny_compute+0x482>

    fp2_mul(&t1, &TT1.x, &TT2.y);
 802de40:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802de44:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802de48:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 802de4c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802de50:	4618      	mov	r0, r3
 802de52:	f7e4 fe6c 	bl	8012b2e <fp2_mul>
    fp2_mul(&t2, &TT1.y, &TT2.x);
 802de56:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 802de5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802de5e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802de62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802de66:	4618      	mov	r0, r3
 802de68:	f7e4 fe61 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.x, &TT2.x, &t1);
 802de6c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802de70:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802de74:	681b      	ldr	r3, [r3, #0]
 802de76:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 802de7a:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 802de7e:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802de82:	4618      	mov	r0, r3
 802de84:	f7e4 fe53 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.y, &TT2.y, &t2);
 802de88:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802de8c:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802de90:	681b      	ldr	r3, [r3, #0]
 802de92:	f503 60e2 	add.w	r0, r3, #1808	@ 0x710
 802de96:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802de9a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802de9e:	3348      	adds	r3, #72	@ 0x48
 802dea0:	4619      	mov	r1, r3
 802dea2:	f7e4 fe44 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.z, &TT2.z, &t1);
 802dea6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802deaa:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802deae:	681b      	ldr	r3, [r3, #0]
 802deb0:	f503 60eb 	add.w	r0, r3, #1880	@ 0x758
 802deb4:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 802deb8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802debc:	3390      	adds	r3, #144	@ 0x90
 802debe:	4619      	mov	r1, r3
 802dec0:	f7e4 fe35 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.t, &TT2.t, &t2);
 802dec4:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dec8:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802decc:	681b      	ldr	r3, [r3, #0]
 802dece:	f503 60f4 	add.w	r0, r3, #1952	@ 0x7a0
 802ded2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802ded6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802deda:	33d8      	adds	r3, #216	@ 0xd8
 802dedc:	4619      	mov	r1, r3
 802dede:	f7e4 fe26 	bl	8012b2e <fp2_mul>
    fp2_t t3;
    fp2_mul(&t3, &TT2.z, &TT2.t);
 802dee2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802dee6:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802deea:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802deee:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802def2:	f107 0310 	add.w	r3, r7, #16
 802def6:	4618      	mov	r0, r3
 802def8:	f7e4 fe19 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.x, &t3, &TT1.y);
 802defc:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802df00:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802df04:	681b      	ldr	r3, [r3, #0]
 802df06:	f503 60b5 	add.w	r0, r3, #1448	@ 0x5a8
 802df0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802df0e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802df12:	f107 0310 	add.w	r3, r7, #16
 802df16:	4619      	mov	r1, r3
 802df18:	f7e4 fe09 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.y, &t3, &TT1.x);
 802df1c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802df20:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802df24:	681b      	ldr	r3, [r3, #0]
 802df26:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 802df2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 802df2e:	f107 0110 	add.w	r1, r7, #16
 802df32:	4618      	mov	r0, r3
 802df34:	f7e4 fdfb 	bl	8012b2e <fp2_mul>
    fp2_copy(&out->precomputation.z, &out->codomain.null_point.t);
 802df38:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802df3c:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802df40:	681b      	ldr	r3, [r3, #0]
 802df42:	f503 62c7 	add.w	r2, r3, #1592	@ 0x638
 802df46:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802df4a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802df4e:	681b      	ldr	r3, [r3, #0]
 802df50:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 802df54:	4619      	mov	r1, r3
 802df56:	4610      	mov	r0, r2
 802df58:	f7e4 fd68 	bl	8012a2c <fp2_copy>
    fp2_copy(&out->precomputation.t, &out->codomain.null_point.z);
 802df5c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802df60:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802df64:	681b      	ldr	r3, [r3, #0]
 802df66:	f503 62d0 	add.w	r2, r3, #1664	@ 0x680
 802df6a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802df6e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802df72:	681b      	ldr	r3, [r3, #0]
 802df74:	f503 63eb 	add.w	r3, r3, #1880	@ 0x758
 802df78:	4619      	mov	r1, r3
 802df7a:	4610      	mov	r0, r2
 802df7c:	f7e4 fd56 	bl	8012a2c <fp2_copy>

    // If T1_8 and T2_8 are our 8-torsion points, this ensures that the
    // 4-torsion points 2T1_8 and 2T2_8 are isotropic.
    if (verify) {
 802df80:	f897 3340 	ldrb.w	r3, [r7, #832]	@ 0x340
 802df84:	2b00      	cmp	r3, #0
 802df86:	f000 80b0 	beq.w	802e0ea <theta_isogeny_compute+0x454>
        fp2_mul(&t1, &TT1.x, &out->precomputation.x);
 802df8a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802df8e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802df92:	681b      	ldr	r3, [r3, #0]
 802df94:	f503 62b5 	add.w	r2, r3, #1448	@ 0x5a8
 802df98:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 802df9c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802dfa0:	4618      	mov	r0, r3
 802dfa2:	f7e4 fdc4 	bl	8012b2e <fp2_mul>
        fp2_mul(&t2, &TT1.y, &out->precomputation.y);
 802dfa6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dfaa:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dfae:	681b      	ldr	r3, [r3, #0]
 802dfb0:	f503 62be 	add.w	r2, r3, #1520	@ 0x5f0
 802dfb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802dfb8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802dfbc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802dfc0:	4618      	mov	r0, r3
 802dfc2:	f7e4 fdb4 	bl	8012b2e <fp2_mul>
        if (!fp2_is_equal(&t1, &t2))
 802dfc6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802dfca:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802dfce:	4611      	mov	r1, r2
 802dfd0:	4618      	mov	r0, r3
 802dfd2:	f7e4 fcf7 	bl	80129c4 <fp2_is_equal>
 802dfd6:	4603      	mov	r3, r0
 802dfd8:	2b00      	cmp	r3, #0
 802dfda:	d101      	bne.n	802dfe0 <theta_isogeny_compute+0x34a>
            return 0;
 802dfdc:	2300      	movs	r3, #0
 802dfde:	e09b      	b.n	802e118 <theta_isogeny_compute+0x482>
        fp2_mul(&t1, &TT1.z, &out->precomputation.z);
 802dfe0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802dfe4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802dfe8:	681b      	ldr	r3, [r3, #0]
 802dfea:	f503 62c7 	add.w	r2, r3, #1592	@ 0x638
 802dfee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802dff2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802dff6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802dffa:	4618      	mov	r0, r3
 802dffc:	f7e4 fd97 	bl	8012b2e <fp2_mul>
        fp2_mul(&t2, &TT1.t, &out->precomputation.t);
 802e000:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802e004:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802e008:	681b      	ldr	r3, [r3, #0]
 802e00a:	f503 62d0 	add.w	r2, r3, #1664	@ 0x680
 802e00e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 802e012:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802e016:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802e01a:	4618      	mov	r0, r3
 802e01c:	f7e4 fd87 	bl	8012b2e <fp2_mul>
        if (!fp2_is_equal(&t1, &t2))
 802e020:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802e024:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e028:	4611      	mov	r1, r2
 802e02a:	4618      	mov	r0, r3
 802e02c:	f7e4 fcca 	bl	80129c4 <fp2_is_equal>
 802e030:	4603      	mov	r3, r0
 802e032:	2b00      	cmp	r3, #0
 802e034:	d101      	bne.n	802e03a <theta_isogeny_compute+0x3a4>
            return 0;
 802e036:	2300      	movs	r3, #0
 802e038:	e06e      	b.n	802e118 <theta_isogeny_compute+0x482>
        fp2_mul(&t1, &TT2.x, &out->precomputation.x);
 802e03a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802e03e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802e042:	681b      	ldr	r3, [r3, #0]
 802e044:	f503 62b5 	add.w	r2, r3, #1448	@ 0x5a8
 802e048:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 802e04c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e050:	4618      	mov	r0, r3
 802e052:	f7e4 fd6c 	bl	8012b2e <fp2_mul>
        fp2_mul(&t2, &TT2.z, &out->precomputation.z);
 802e056:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802e05a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802e05e:	681b      	ldr	r3, [r3, #0]
 802e060:	f503 62c7 	add.w	r2, r3, #1592	@ 0x638
 802e064:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802e068:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802e06c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802e070:	4618      	mov	r0, r3
 802e072:	f7e4 fd5c 	bl	8012b2e <fp2_mul>
        if (!fp2_is_equal(&t1, &t2))
 802e076:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802e07a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e07e:	4611      	mov	r1, r2
 802e080:	4618      	mov	r0, r3
 802e082:	f7e4 fc9f 	bl	80129c4 <fp2_is_equal>
 802e086:	4603      	mov	r3, r0
 802e088:	2b00      	cmp	r3, #0
 802e08a:	d101      	bne.n	802e090 <theta_isogeny_compute+0x3fa>
            return 0;
 802e08c:	2300      	movs	r3, #0
 802e08e:	e043      	b.n	802e118 <theta_isogeny_compute+0x482>
        fp2_mul(&t1, &TT2.y, &out->precomputation.y);
 802e090:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802e094:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802e098:	681b      	ldr	r3, [r3, #0]
 802e09a:	f503 62be 	add.w	r2, r3, #1520	@ 0x5f0
 802e09e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802e0a2:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802e0a6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e0aa:	4618      	mov	r0, r3
 802e0ac:	f7e4 fd3f 	bl	8012b2e <fp2_mul>
        fp2_mul(&t2, &TT2.t, &out->precomputation.t);
 802e0b0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802e0b4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802e0b8:	681b      	ldr	r3, [r3, #0]
 802e0ba:	f503 62d0 	add.w	r2, r3, #1664	@ 0x680
 802e0be:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 802e0c2:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802e0c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802e0ca:	4618      	mov	r0, r3
 802e0cc:	f7e4 fd2f 	bl	8012b2e <fp2_mul>
        if (!fp2_is_equal(&t1, &t2))
 802e0d0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802e0d4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e0d8:	4611      	mov	r1, r2
 802e0da:	4618      	mov	r0, r3
 802e0dc:	f7e4 fc72 	bl	80129c4 <fp2_is_equal>
 802e0e0:	4603      	mov	r3, r0
 802e0e2:	2b00      	cmp	r3, #0
 802e0e4:	d101      	bne.n	802e0ea <theta_isogeny_compute+0x454>
            return 0;
 802e0e6:	2300      	movs	r3, #0
 802e0e8:	e016      	b.n	802e118 <theta_isogeny_compute+0x482>
    }

    if (hadamard_bool_2) {
 802e0ea:	f897 333c 	ldrb.w	r3, [r7, #828]	@ 0x33c
 802e0ee:	2b00      	cmp	r3, #0
 802e0f0:	d011      	beq.n	802e116 <theta_isogeny_compute+0x480>
        hadamard(&out->codomain.null_point, &out->codomain.null_point);
 802e0f2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802e0f6:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802e0fa:	681b      	ldr	r3, [r3, #0]
 802e0fc:	f503 62d9 	add.w	r2, r3, #1736	@ 0x6c8
 802e100:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 802e104:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 802e108:	681b      	ldr	r3, [r3, #0]
 802e10a:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 802e10e:	4619      	mov	r1, r3
 802e110:	4610      	mov	r0, r2
 802e112:	f7fd fd42 	bl	802bb9a <hadamard>
    }
    return 1;
 802e116:	2301      	movs	r3, #1
}
 802e118:	4618      	mov	r0, r3
 802e11a:	f507 774b 	add.w	r7, r7, #812	@ 0x32c
 802e11e:	46bd      	mov	sp, r7
 802e120:	bd90      	pop	{r4, r7, pc}

0802e122 <theta_isogeny_compute_4>:
                        const theta_structure_t *A,
                        const theta_point_t *T1_4,
                        const theta_point_t *T2_4,
                        bool hadamard_bool_1,
                        bool hadamard_bool_2)
{
 802e122:	b590      	push	{r4, r7, lr}
 802e124:	f5ad 7d39 	sub.w	sp, sp, #740	@ 0x2e4
 802e128:	af00      	add	r7, sp, #0
 802e12a:	f507 7438 	add.w	r4, r7, #736	@ 0x2e0
 802e12e:	f5a4 7435 	sub.w	r4, r4, #724	@ 0x2d4
 802e132:	6020      	str	r0, [r4, #0]
 802e134:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 802e138:	f5a0 7036 	sub.w	r0, r0, #728	@ 0x2d8
 802e13c:	6001      	str	r1, [r0, #0]
 802e13e:	f507 7138 	add.w	r1, r7, #736	@ 0x2e0
 802e142:	f5a1 7137 	sub.w	r1, r1, #732	@ 0x2dc
 802e146:	600a      	str	r2, [r1, #0]
 802e148:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 802e14c:	f5a2 7238 	sub.w	r2, r2, #736	@ 0x2e0
 802e150:	6013      	str	r3, [r2, #0]
    out->hadamard_bool_1 = hadamard_bool_1;
 802e152:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e156:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e15a:	681b      	ldr	r3, [r3, #0]
 802e15c:	f897 22f0 	ldrb.w	r2, [r7, #752]	@ 0x2f0
 802e160:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
    out->hadamard_bool_2 = hadamard_bool_2;
 802e164:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e168:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e16c:	681b      	ldr	r3, [r3, #0]
 802e16e:	f897 22f4 	ldrb.w	r2, [r7, #756]	@ 0x2f4
 802e172:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241
    out->domain = *A;
 802e176:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e17a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e17e:	681b      	ldr	r3, [r3, #0]
 802e180:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 802e184:	f5a2 7236 	sub.w	r2, r2, #728	@ 0x2d8
 802e188:	6812      	ldr	r2, [r2, #0]
 802e18a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 802e18e:	4611      	mov	r1, r2
 802e190:	f44f 7259 	mov.w	r2, #868	@ 0x364
 802e194:	4618      	mov	r0, r3
 802e196:	f007 fe02 	bl	8035d9e <memcpy>
    out->T1_8 = *T1_4;
 802e19a:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e19e:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e1a2:	681a      	ldr	r2, [r3, #0]
 802e1a4:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e1a8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 802e1ac:	681b      	ldr	r3, [r3, #0]
 802e1ae:	4610      	mov	r0, r2
 802e1b0:	4619      	mov	r1, r3
 802e1b2:	f44f 7390 	mov.w	r3, #288	@ 0x120
 802e1b6:	461a      	mov	r2, r3
 802e1b8:	f007 fdf1 	bl	8035d9e <memcpy>
    out->T2_8 = *T2_4;
 802e1bc:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e1c0:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e1c4:	681b      	ldr	r3, [r3, #0]
 802e1c6:	f507 7238 	add.w	r2, r7, #736	@ 0x2e0
 802e1ca:	f5a2 7238 	sub.w	r2, r2, #736	@ 0x2e0
 802e1ce:	6812      	ldr	r2, [r2, #0]
 802e1d0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802e1d4:	4611      	mov	r1, r2
 802e1d6:	f44f 7290 	mov.w	r2, #288	@ 0x120
 802e1da:	4618      	mov	r0, r3
 802e1dc:	f007 fddf 	bl	8035d9e <memcpy>
    out->codomain.precomputation = false;
 802e1e0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e1e4:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e1e8:	681b      	ldr	r3, [r3, #0]
 802e1ea:	2200      	movs	r2, #0
 802e1ec:	f883 27e8 	strb.w	r2, [r3, #2024]	@ 0x7e8
    // TT1 = (xAB, _ , xCD, _)
    // TT2 = (AA,BB,CC,DD)

    // fp2_t xA_inv,zA_inv,tB_inv;

    if (hadamard_bool_1) {
 802e1f0:	f897 32f0 	ldrb.w	r3, [r7, #752]	@ 0x2f0
 802e1f4:	2b00      	cmp	r3, #0
 802e1f6:	d025      	beq.n	802e244 <theta_isogeny_compute_4+0x122>
        hadamard(&TT1, T1_4);
 802e1f8:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e1fc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 802e200:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 802e204:	6819      	ldr	r1, [r3, #0]
 802e206:	4610      	mov	r0, r2
 802e208:	f7fd fcc7 	bl	802bb9a <hadamard>
        to_squared_theta(&TT1, &TT1);
 802e20c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 802e210:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802e214:	4611      	mov	r1, r2
 802e216:	4618      	mov	r0, r3
 802e218:	f7fd fd76 	bl	802bd08 <to_squared_theta>

        hadamard(&TT2, &A->null_point);
 802e21c:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e220:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 802e224:	681a      	ldr	r2, [r3, #0]
 802e226:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e22a:	4611      	mov	r1, r2
 802e22c:	4618      	mov	r0, r3
 802e22e:	f7fd fcb4 	bl	802bb9a <hadamard>
        to_squared_theta(&TT2, &TT2);
 802e232:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 802e236:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e23a:	4611      	mov	r1, r2
 802e23c:	4618      	mov	r0, r3
 802e23e:	f7fd fd63 	bl	802bd08 <to_squared_theta>
 802e242:	e014      	b.n	802e26e <theta_isogeny_compute_4+0x14c>
    } else {
        to_squared_theta(&TT1, T1_4);
 802e244:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e248:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 802e24c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 802e250:	6819      	ldr	r1, [r3, #0]
 802e252:	4610      	mov	r0, r2
 802e254:	f7fd fd58 	bl	802bd08 <to_squared_theta>
        to_squared_theta(&TT2, &A->null_point);
 802e258:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e25c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 802e260:	681a      	ldr	r2, [r3, #0]
 802e262:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e266:	4611      	mov	r1, r2
 802e268:	4618      	mov	r0, r3
 802e26a:	f7fd fd4d 	bl	802bd08 <to_squared_theta>
    }

    fp2_t sqaabb, sqaacc;
    fp2_mul(&sqaabb, &TT2.x, &TT2.y);
 802e26e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e272:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802e276:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 802e27a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802e27e:	4618      	mov	r0, r3
 802e280:	f7e4 fc55 	bl	8012b2e <fp2_mul>
    fp2_mul(&sqaacc, &TT2.x, &TT2.z);
 802e284:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e288:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802e28c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 802e290:	f107 0310 	add.w	r3, r7, #16
 802e294:	4618      	mov	r0, r3
 802e296:	f7e4 fc4a 	bl	8012b2e <fp2_mul>
    // No need to check the square roots, only used for signing.
    // sqaabb = sqrt(AA*BB)
    fp2_sqrt(&sqaabb);
 802e29a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 802e29e:	4618      	mov	r0, r3
 802e2a0:	f7e4 fd32 	bl	8012d08 <fp2_sqrt>
    // sqaacc = sqrt(AA*CC)
    fp2_sqrt(&sqaacc);
 802e2a4:	f107 0310 	add.w	r3, r7, #16
 802e2a8:	4618      	mov	r0, r3
 802e2aa:	f7e4 fd2d 	bl	8012d08 <fp2_sqrt>

    // we compute out->codomain.null_point = (xAB * sqaacc * AA, xAB *sqaabb *sqaacc, xCD*sqaabb *
    // AA) out->precomputation = (xAB * BB * CC *DD , sqaabb * CC * DD * xAB , sqaacc * BB* DD * xAB
    // , xCD * sqaabb *sqaacc * BB)

    fp2_mul(&out->codomain.null_point.y, &sqaabb, &sqaacc);
 802e2ae:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e2b2:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e2b6:	681b      	ldr	r3, [r3, #0]
 802e2b8:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 802e2bc:	f107 0210 	add.w	r2, r7, #16
 802e2c0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 802e2c4:	4618      	mov	r0, r3
 802e2c6:	f7e4 fc32 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.t, &out->codomain.null_point.y, &TT1.z);
 802e2ca:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e2ce:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e2d2:	681b      	ldr	r3, [r3, #0]
 802e2d4:	f503 60d0 	add.w	r0, r3, #1664	@ 0x680
 802e2d8:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e2dc:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e2e0:	681b      	ldr	r3, [r3, #0]
 802e2e2:	f503 61e2 	add.w	r1, r3, #1808	@ 0x710
 802e2e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802e2ea:	3390      	adds	r3, #144	@ 0x90
 802e2ec:	461a      	mov	r2, r3
 802e2ee:	f7e4 fc1e 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.y, &out->codomain.null_point.y,
 802e2f2:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e2f6:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e2fa:	681b      	ldr	r3, [r3, #0]
 802e2fc:	f503 60e2 	add.w	r0, r3, #1808	@ 0x710
 802e300:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e304:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e308:	681b      	ldr	r3, [r3, #0]
 802e30a:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 802e30e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 802e312:	4619      	mov	r1, r3
 802e314:	f7e4 fc0b 	bl	8012b2e <fp2_mul>
            &TT1.x); // done for out->codomain.null_point.y

    fp2_mul(&out->codomain.null_point.t, &TT1.z, &sqaabb);
 802e318:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e31c:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e320:	681b      	ldr	r3, [r3, #0]
 802e322:	f503 60f4 	add.w	r0, r3, #1952	@ 0x7a0
 802e326:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802e32a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802e32e:	3390      	adds	r3, #144	@ 0x90
 802e330:	4619      	mov	r1, r3
 802e332:	f7e4 fbfc 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.t, &out->codomain.null_point.t,
 802e336:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e33a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e33e:	681b      	ldr	r3, [r3, #0]
 802e340:	f503 60f4 	add.w	r0, r3, #1952	@ 0x7a0
 802e344:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e348:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e34c:	681b      	ldr	r3, [r3, #0]
 802e34e:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 802e352:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 802e356:	4619      	mov	r1, r3
 802e358:	f7e4 fbe9 	bl	8012b2e <fp2_mul>
            &TT2.x); // done for out->codomain.null_point.t

    fp2_mul(&out->codomain.null_point.x, &TT1.x, &TT2.x);
 802e35c:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e360:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e364:	681b      	ldr	r3, [r3, #0]
 802e366:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 802e36a:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 802e36e:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 802e372:	4618      	mov	r0, r3
 802e374:	f7e4 fbdb 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.z, &out->codomain.null_point.x,
 802e378:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e37c:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e380:	681b      	ldr	r3, [r3, #0]
 802e382:	f503 60eb 	add.w	r0, r3, #1880	@ 0x758
 802e386:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e38a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e38e:	681b      	ldr	r3, [r3, #0]
 802e390:	f503 61d9 	add.w	r1, r3, #1736	@ 0x6c8
 802e394:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e398:	3390      	adds	r3, #144	@ 0x90
 802e39a:	461a      	mov	r2, r3
 802e39c:	f7e4 fbc7 	bl	8012b2e <fp2_mul>
            &TT2.z); // done for out->codomain.null_point.z
    fp2_mul(&out->codomain.null_point.x, &out->codomain.null_point.x,
 802e3a0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e3a4:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e3a8:	681b      	ldr	r3, [r3, #0]
 802e3aa:	f503 60d9 	add.w	r0, r3, #1736	@ 0x6c8
 802e3ae:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e3b2:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e3b6:	681b      	ldr	r3, [r3, #0]
 802e3b8:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 802e3bc:	f107 0210 	add.w	r2, r7, #16
 802e3c0:	4619      	mov	r1, r3
 802e3c2:	f7e4 fbb4 	bl	8012b2e <fp2_mul>
            &sqaacc); // done for out->codomain.null_point.x

    fp2_mul(&out->precomputation.x, &TT1.x, &TT2.t);
 802e3c6:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e3ca:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e3ce:	681b      	ldr	r3, [r3, #0]
 802e3d0:	f503 60b5 	add.w	r0, r3, #1448	@ 0x5a8
 802e3d4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e3d8:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802e3dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802e3e0:	4619      	mov	r1, r3
 802e3e2:	f7e4 fba4 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.z, &out->precomputation.x, &TT2.y);
 802e3e6:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e3ea:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e3ee:	681b      	ldr	r3, [r3, #0]
 802e3f0:	f503 60c7 	add.w	r0, r3, #1592	@ 0x638
 802e3f4:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e3f8:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e3fc:	681b      	ldr	r3, [r3, #0]
 802e3fe:	f503 61b5 	add.w	r1, r3, #1448	@ 0x5a8
 802e402:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e406:	3348      	adds	r3, #72	@ 0x48
 802e408:	461a      	mov	r2, r3
 802e40a:	f7e4 fb90 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.x, &out->precomputation.x, &TT2.z);
 802e40e:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e412:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e416:	681b      	ldr	r3, [r3, #0]
 802e418:	f503 60b5 	add.w	r0, r3, #1448	@ 0x5a8
 802e41c:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e420:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e424:	681b      	ldr	r3, [r3, #0]
 802e426:	f503 61b5 	add.w	r1, r3, #1448	@ 0x5a8
 802e42a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e42e:	3390      	adds	r3, #144	@ 0x90
 802e430:	461a      	mov	r2, r3
 802e432:	f7e4 fb7c 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.y, &out->precomputation.x, &sqaabb); // done for out->precomputation.y
 802e436:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e43a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e43e:	681b      	ldr	r3, [r3, #0]
 802e440:	f503 60be 	add.w	r0, r3, #1520	@ 0x5f0
 802e444:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e448:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e44c:	681b      	ldr	r3, [r3, #0]
 802e44e:	f503 63b5 	add.w	r3, r3, #1448	@ 0x5a8
 802e452:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 802e456:	4619      	mov	r1, r3
 802e458:	f7e4 fb69 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.x, &out->precomputation.x, &TT2.y);  // done for out->precomputation.x
 802e45c:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e460:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e464:	681b      	ldr	r3, [r3, #0]
 802e466:	f503 60b5 	add.w	r0, r3, #1448	@ 0x5a8
 802e46a:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e46e:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e472:	681b      	ldr	r3, [r3, #0]
 802e474:	f503 61b5 	add.w	r1, r3, #1448	@ 0x5a8
 802e478:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e47c:	3348      	adds	r3, #72	@ 0x48
 802e47e:	461a      	mov	r2, r3
 802e480:	f7e4 fb55 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.z, &out->precomputation.z, &sqaacc); // done for out->precomputation.z
 802e484:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e488:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e48c:	681b      	ldr	r3, [r3, #0]
 802e48e:	f503 60c7 	add.w	r0, r3, #1592	@ 0x638
 802e492:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e496:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e49a:	681b      	ldr	r3, [r3, #0]
 802e49c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 802e4a0:	f107 0210 	add.w	r2, r7, #16
 802e4a4:	4619      	mov	r1, r3
 802e4a6:	f7e4 fb42 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.t, &out->precomputation.t, &TT2.y);  // done for out->precomputation.t
 802e4aa:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e4ae:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e4b2:	681b      	ldr	r3, [r3, #0]
 802e4b4:	f503 60d0 	add.w	r0, r3, #1664	@ 0x680
 802e4b8:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e4bc:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e4c0:	681b      	ldr	r3, [r3, #0]
 802e4c2:	f503 61d0 	add.w	r1, r3, #1664	@ 0x680
 802e4c6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802e4ca:	3348      	adds	r3, #72	@ 0x48
 802e4cc:	461a      	mov	r2, r3
 802e4ce:	f7e4 fb2e 	bl	8012b2e <fp2_mul>

    if (hadamard_bool_2) {
 802e4d2:	f897 32f4 	ldrb.w	r3, [r7, #756]	@ 0x2f4
 802e4d6:	2b00      	cmp	r3, #0
 802e4d8:	d011      	beq.n	802e4fe <theta_isogeny_compute_4+0x3dc>
        hadamard(&out->codomain.null_point, &out->codomain.null_point);
 802e4da:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e4de:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e4e2:	681b      	ldr	r3, [r3, #0]
 802e4e4:	f503 62d9 	add.w	r2, r3, #1736	@ 0x6c8
 802e4e8:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 802e4ec:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 802e4f0:	681b      	ldr	r3, [r3, #0]
 802e4f2:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 802e4f6:	4619      	mov	r1, r3
 802e4f8:	4610      	mov	r0, r2
 802e4fa:	f7fd fb4e 	bl	802bb9a <hadamard>
    }
}
 802e4fe:	bf00      	nop
 802e500:	f507 7739 	add.w	r7, r7, #740	@ 0x2e4
 802e504:	46bd      	mov	sp, r7
 802e506:	bd90      	pop	{r4, r7, pc}

0802e508 <theta_isogeny_compute_2>:
                        const theta_structure_t *A,
                        const theta_point_t *T1_2,
                        const theta_point_t *T2_2,
                        bool hadamard_bool_1,
                        bool hadamard_bool_2)
{
 802e508:	b590      	push	{r4, r7, lr}
 802e50a:	b0cd      	sub	sp, #308	@ 0x134
 802e50c:	af00      	add	r7, sp, #0
 802e50e:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 802e512:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 802e516:	6020      	str	r0, [r4, #0]
 802e518:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 802e51c:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 802e520:	6001      	str	r1, [r0, #0]
 802e522:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 802e526:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 802e52a:	600a      	str	r2, [r1, #0]
 802e52c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802e530:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 802e534:	6013      	str	r3, [r2, #0]
    out->hadamard_bool_1 = hadamard_bool_1;
 802e536:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e53a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e53e:	681b      	ldr	r3, [r3, #0]
 802e540:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 802e544:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
    out->hadamard_bool_2 = hadamard_bool_2;
 802e548:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e54c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e550:	681b      	ldr	r3, [r3, #0]
 802e552:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 802e556:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241
    out->domain = *A;
 802e55a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e55e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e562:	681b      	ldr	r3, [r3, #0]
 802e564:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802e568:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 802e56c:	6812      	ldr	r2, [r2, #0]
 802e56e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 802e572:	4611      	mov	r1, r2
 802e574:	f44f 7259 	mov.w	r2, #868	@ 0x364
 802e578:	4618      	mov	r0, r3
 802e57a:	f007 fc10 	bl	8035d9e <memcpy>
    out->T1_8 = *T1_2;
 802e57e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e582:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e586:	681a      	ldr	r2, [r3, #0]
 802e588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e58c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802e590:	681b      	ldr	r3, [r3, #0]
 802e592:	4610      	mov	r0, r2
 802e594:	4619      	mov	r1, r3
 802e596:	f44f 7390 	mov.w	r3, #288	@ 0x120
 802e59a:	461a      	mov	r2, r3
 802e59c:	f007 fbff 	bl	8035d9e <memcpy>
    out->T2_8 = *T2_2;
 802e5a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e5a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e5a8:	681b      	ldr	r3, [r3, #0]
 802e5aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 802e5ae:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 802e5b2:	6812      	ldr	r2, [r2, #0]
 802e5b4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 802e5b8:	4611      	mov	r1, r2
 802e5ba:	f44f 7290 	mov.w	r2, #288	@ 0x120
 802e5be:	4618      	mov	r0, r3
 802e5c0:	f007 fbed 	bl	8035d9e <memcpy>
    out->codomain.precomputation = false;
 802e5c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e5c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e5cc:	681b      	ldr	r3, [r3, #0]
 802e5ce:	2200      	movs	r2, #0
 802e5d0:	f883 27e8 	strb.w	r2, [r3, #2024]	@ 0x7e8

    theta_point_t TT2;
    // we will compute:
    // TT2 = (AA,BB,CC,DD)

    if (hadamard_bool_1) {
 802e5d4:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 802e5d8:	2b00      	cmp	r3, #0
 802e5da:	d013      	beq.n	802e604 <theta_isogeny_compute_2+0xfc>
        hadamard(&TT2, &A->null_point);
 802e5dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e5e0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802e5e4:	681a      	ldr	r2, [r3, #0]
 802e5e6:	f107 0310 	add.w	r3, r7, #16
 802e5ea:	4611      	mov	r1, r2
 802e5ec:	4618      	mov	r0, r3
 802e5ee:	f7fd fad4 	bl	802bb9a <hadamard>
        to_squared_theta(&TT2, &TT2);
 802e5f2:	f107 0210 	add.w	r2, r7, #16
 802e5f6:	f107 0310 	add.w	r3, r7, #16
 802e5fa:	4611      	mov	r1, r2
 802e5fc:	4618      	mov	r0, r3
 802e5fe:	f7fd fb83 	bl	802bd08 <to_squared_theta>
 802e602:	e00a      	b.n	802e61a <theta_isogeny_compute_2+0x112>
    } else {
        to_squared_theta(&TT2, &A->null_point);
 802e604:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e608:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802e60c:	681a      	ldr	r2, [r3, #0]
 802e60e:	f107 0310 	add.w	r3, r7, #16
 802e612:	4611      	mov	r1, r2
 802e614:	4618      	mov	r0, r3
 802e616:	f7fd fb77 	bl	802bd08 <to_squared_theta>
    }

    // we compute out->codomain.null_point = (AA,sqaabb, sqaacc, sqaadd)
    // out->precomputation = (  BB * CC *DD , sqaabb * CC * DD , sqaacc * BB* DD , sqaadd * BB * CC)
    fp2_copy(&out->codomain.null_point.x, &TT2.x);
 802e61a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e61e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e622:	681b      	ldr	r3, [r3, #0]
 802e624:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 802e628:	f107 0210 	add.w	r2, r7, #16
 802e62c:	4611      	mov	r1, r2
 802e62e:	4618      	mov	r0, r3
 802e630:	f7e4 f9fc 	bl	8012a2c <fp2_copy>
    fp2_mul(&out->codomain.null_point.y, &TT2.x, &TT2.y);
 802e634:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e638:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e63c:	681b      	ldr	r3, [r3, #0]
 802e63e:	f503 60e2 	add.w	r0, r3, #1808	@ 0x710
 802e642:	f107 0310 	add.w	r3, r7, #16
 802e646:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802e64a:	f107 0310 	add.w	r3, r7, #16
 802e64e:	4619      	mov	r1, r3
 802e650:	f7e4 fa6d 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.z, &TT2.x, &TT2.z);
 802e654:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e658:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e65c:	681b      	ldr	r3, [r3, #0]
 802e65e:	f503 60eb 	add.w	r0, r3, #1880	@ 0x758
 802e662:	f107 0310 	add.w	r3, r7, #16
 802e666:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802e66a:	f107 0310 	add.w	r3, r7, #16
 802e66e:	4619      	mov	r1, r3
 802e670:	f7e4 fa5d 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->codomain.null_point.t, &TT2.x, &TT2.t);
 802e674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e678:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e67c:	681b      	ldr	r3, [r3, #0]
 802e67e:	f503 60f4 	add.w	r0, r3, #1952	@ 0x7a0
 802e682:	f107 0310 	add.w	r3, r7, #16
 802e686:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802e68a:	f107 0310 	add.w	r3, r7, #16
 802e68e:	4619      	mov	r1, r3
 802e690:	f7e4 fa4d 	bl	8012b2e <fp2_mul>
    // No need to check the square roots, only used for signing.
    fp2_sqrt(&out->codomain.null_point.y);
 802e694:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e698:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e69c:	681b      	ldr	r3, [r3, #0]
 802e69e:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 802e6a2:	4618      	mov	r0, r3
 802e6a4:	f7e4 fb30 	bl	8012d08 <fp2_sqrt>
    fp2_sqrt(&out->codomain.null_point.z);
 802e6a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e6ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e6b0:	681b      	ldr	r3, [r3, #0]
 802e6b2:	f503 63eb 	add.w	r3, r3, #1880	@ 0x758
 802e6b6:	4618      	mov	r0, r3
 802e6b8:	f7e4 fb26 	bl	8012d08 <fp2_sqrt>
    fp2_sqrt(&out->codomain.null_point.t);
 802e6bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e6c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e6c4:	681b      	ldr	r3, [r3, #0]
 802e6c6:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 802e6ca:	4618      	mov	r0, r3
 802e6cc:	f7e4 fb1c 	bl	8012d08 <fp2_sqrt>

    fp2_mul(&out->precomputation.x, &TT2.z, &TT2.t);
 802e6d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e6d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e6d8:	681b      	ldr	r3, [r3, #0]
 802e6da:	f503 60b5 	add.w	r0, r3, #1448	@ 0x5a8
 802e6de:	f107 0310 	add.w	r3, r7, #16
 802e6e2:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 802e6e6:	f107 0310 	add.w	r3, r7, #16
 802e6ea:	3390      	adds	r3, #144	@ 0x90
 802e6ec:	4619      	mov	r1, r3
 802e6ee:	f7e4 fa1e 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.y,
 802e6f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e6f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e6fa:	681b      	ldr	r3, [r3, #0]
 802e6fc:	f503 60be 	add.w	r0, r3, #1520	@ 0x5f0
            &out->precomputation.x,
 802e700:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e704:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e708:	681b      	ldr	r3, [r3, #0]
 802e70a:	f503 61b5 	add.w	r1, r3, #1448	@ 0x5a8
            &out->codomain.null_point.y);                            // done for out->precomputation.y
 802e70e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e712:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e716:	681b      	ldr	r3, [r3, #0]
 802e718:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
    fp2_mul(&out->precomputation.y,
 802e71c:	461a      	mov	r2, r3
 802e71e:	f7e4 fa06 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.x, &out->precomputation.x, &TT2.y); // done for out->precomputation.x
 802e722:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e726:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e72a:	681b      	ldr	r3, [r3, #0]
 802e72c:	f503 60b5 	add.w	r0, r3, #1448	@ 0x5a8
 802e730:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e734:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e738:	681b      	ldr	r3, [r3, #0]
 802e73a:	f503 61b5 	add.w	r1, r3, #1448	@ 0x5a8
 802e73e:	f107 0310 	add.w	r3, r7, #16
 802e742:	3348      	adds	r3, #72	@ 0x48
 802e744:	461a      	mov	r2, r3
 802e746:	f7e4 f9f2 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.z, &TT2.t, &out->codomain.null_point.z);
 802e74a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e74e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e752:	681b      	ldr	r3, [r3, #0]
 802e754:	f503 60c7 	add.w	r0, r3, #1592	@ 0x638
 802e758:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e75c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e760:	681b      	ldr	r3, [r3, #0]
 802e762:	f503 62eb 	add.w	r2, r3, #1880	@ 0x758
 802e766:	f107 0310 	add.w	r3, r7, #16
 802e76a:	33d8      	adds	r3, #216	@ 0xd8
 802e76c:	4619      	mov	r1, r3
 802e76e:	f7e4 f9de 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.z, &out->precomputation.z, &TT2.y); // done for out->precomputation.z
 802e772:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e776:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e77a:	681b      	ldr	r3, [r3, #0]
 802e77c:	f503 60c7 	add.w	r0, r3, #1592	@ 0x638
 802e780:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e784:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e788:	681b      	ldr	r3, [r3, #0]
 802e78a:	f503 61c7 	add.w	r1, r3, #1592	@ 0x638
 802e78e:	f107 0310 	add.w	r3, r7, #16
 802e792:	3348      	adds	r3, #72	@ 0x48
 802e794:	461a      	mov	r2, r3
 802e796:	f7e4 f9ca 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.t, &TT2.z, &out->codomain.null_point.t);
 802e79a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e79e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e7a2:	681b      	ldr	r3, [r3, #0]
 802e7a4:	f503 60d0 	add.w	r0, r3, #1664	@ 0x680
 802e7a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e7ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e7b0:	681b      	ldr	r3, [r3, #0]
 802e7b2:	f503 62f4 	add.w	r2, r3, #1952	@ 0x7a0
 802e7b6:	f107 0310 	add.w	r3, r7, #16
 802e7ba:	3390      	adds	r3, #144	@ 0x90
 802e7bc:	4619      	mov	r1, r3
 802e7be:	f7e4 f9b6 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->precomputation.t, &out->precomputation.t, &TT2.y); // done for out->precomputation.t
 802e7c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e7c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e7ca:	681b      	ldr	r3, [r3, #0]
 802e7cc:	f503 60d0 	add.w	r0, r3, #1664	@ 0x680
 802e7d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e7d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e7d8:	681b      	ldr	r3, [r3, #0]
 802e7da:	f503 61d0 	add.w	r1, r3, #1664	@ 0x680
 802e7de:	f107 0310 	add.w	r3, r7, #16
 802e7e2:	3348      	adds	r3, #72	@ 0x48
 802e7e4:	461a      	mov	r2, r3
 802e7e6:	f7e4 f9a2 	bl	8012b2e <fp2_mul>

    if (hadamard_bool_2) {
 802e7ea:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 802e7ee:	2b00      	cmp	r3, #0
 802e7f0:	d011      	beq.n	802e816 <theta_isogeny_compute_2+0x30e>
        hadamard(&out->codomain.null_point, &out->codomain.null_point);
 802e7f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e7f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e7fa:	681b      	ldr	r3, [r3, #0]
 802e7fc:	f503 62d9 	add.w	r2, r3, #1736	@ 0x6c8
 802e800:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 802e804:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802e808:	681b      	ldr	r3, [r3, #0]
 802e80a:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 802e80e:	4619      	mov	r1, r3
 802e810:	4610      	mov	r0, r2
 802e812:	f7fd f9c2 	bl	802bb9a <hadamard>
    }
}
 802e816:	bf00      	nop
 802e818:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 802e81c:	46bd      	mov	sp, r7
 802e81e:	bd90      	pop	{r4, r7, pc}

0802e820 <theta_isogeny_eval>:

static void
theta_isogeny_eval(theta_point_t *out, const theta_isogeny_t *phi, const theta_point_t *P)
{
 802e820:	b580      	push	{r7, lr}
 802e822:	b084      	sub	sp, #16
 802e824:	af00      	add	r7, sp, #0
 802e826:	60f8      	str	r0, [r7, #12]
 802e828:	60b9      	str	r1, [r7, #8]
 802e82a:	607a      	str	r2, [r7, #4]
    if (phi->hadamard_bool_1) {
 802e82c:	68bb      	ldr	r3, [r7, #8]
 802e82e:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 802e832:	2b00      	cmp	r3, #0
 802e834:	d008      	beq.n	802e848 <theta_isogeny_eval+0x28>
        hadamard(out, P);
 802e836:	6879      	ldr	r1, [r7, #4]
 802e838:	68f8      	ldr	r0, [r7, #12]
 802e83a:	f7fd f9ae 	bl	802bb9a <hadamard>
        to_squared_theta(out, out);
 802e83e:	68f9      	ldr	r1, [r7, #12]
 802e840:	68f8      	ldr	r0, [r7, #12]
 802e842:	f7fd fa61 	bl	802bd08 <to_squared_theta>
 802e846:	e003      	b.n	802e850 <theta_isogeny_eval+0x30>
    } else {
        to_squared_theta(out, P);
 802e848:	6879      	ldr	r1, [r7, #4]
 802e84a:	68f8      	ldr	r0, [r7, #12]
 802e84c:	f7fd fa5c 	bl	802bd08 <to_squared_theta>
    }
    fp2_mul(&out->x, &out->x, &phi->precomputation.x);
 802e850:	68f8      	ldr	r0, [r7, #12]
 802e852:	68f9      	ldr	r1, [r7, #12]
 802e854:	68bb      	ldr	r3, [r7, #8]
 802e856:	f503 63b5 	add.w	r3, r3, #1448	@ 0x5a8
 802e85a:	461a      	mov	r2, r3
 802e85c:	f7e4 f967 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->y, &out->y, &phi->precomputation.y);
 802e860:	68fb      	ldr	r3, [r7, #12]
 802e862:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802e866:	68fb      	ldr	r3, [r7, #12]
 802e868:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802e86c:	68bb      	ldr	r3, [r7, #8]
 802e86e:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 802e872:	461a      	mov	r2, r3
 802e874:	f7e4 f95b 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->z, &out->z, &phi->precomputation.z);
 802e878:	68fb      	ldr	r3, [r7, #12]
 802e87a:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802e87e:	68fb      	ldr	r3, [r7, #12]
 802e880:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802e884:	68bb      	ldr	r3, [r7, #8]
 802e886:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 802e88a:	461a      	mov	r2, r3
 802e88c:	f7e4 f94f 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->t, &out->t, &phi->precomputation.t);
 802e890:	68fb      	ldr	r3, [r7, #12]
 802e892:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802e896:	68fb      	ldr	r3, [r7, #12]
 802e898:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802e89c:	68bb      	ldr	r3, [r7, #8]
 802e89e:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 802e8a2:	461a      	mov	r2, r3
 802e8a4:	f7e4 f943 	bl	8012b2e <fp2_mul>

    if (phi->hadamard_bool_2) {
 802e8a8:	68bb      	ldr	r3, [r7, #8]
 802e8aa:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 802e8ae:	2b00      	cmp	r3, #0
 802e8b0:	d003      	beq.n	802e8ba <theta_isogeny_eval+0x9a>
        hadamard(out, out);
 802e8b2:	68f9      	ldr	r1, [r7, #12]
 802e8b4:	68f8      	ldr	r0, [r7, #12]
 802e8b6:	f7fd f970 	bl	802bb9a <hadamard>
    }
}
 802e8ba:	bf00      	nop
 802e8bc:	3710      	adds	r7, #16
 802e8be:	46bd      	mov	sp, r7
 802e8c0:	bd80      	pop	{r7, pc}
	...

0802e8c4 <sample_random_index>:
// Sample a random secret index in [0, 5] to select one of the 6 normalisation
// matrices for the normalisation of the output of the (2,2)-chain during
// splitting
static unsigned char
sample_random_index(void)
{
 802e8c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802e8c8:	b084      	sub	sp, #16
 802e8ca:	af00      	add	r7, sp, #0
    // We have 4294967292/2^32 = ~99.9999999% chance that the first try is "good".
    unsigned char seed_arr[4];
    uint32_t seed;

    do {
        randombytes(seed_arr, 4);
 802e8cc:	1d39      	adds	r1, r7, #4
 802e8ce:	f04f 0204 	mov.w	r2, #4
 802e8d2:	f04f 0300 	mov.w	r3, #0
 802e8d6:	4608      	mov	r0, r1
 802e8d8:	f7fa ff4e 	bl	8029778 <randombytes>
        seed = (seed_arr[0] | (seed_arr[1] << 8) | (seed_arr[2] << 16) | (seed_arr[3] << 24));
 802e8dc:	793b      	ldrb	r3, [r7, #4]
 802e8de:	461a      	mov	r2, r3
 802e8e0:	797b      	ldrb	r3, [r7, #5]
 802e8e2:	021b      	lsls	r3, r3, #8
 802e8e4:	431a      	orrs	r2, r3
 802e8e6:	79bb      	ldrb	r3, [r7, #6]
 802e8e8:	041b      	lsls	r3, r3, #16
 802e8ea:	431a      	orrs	r2, r3
 802e8ec:	79fb      	ldrb	r3, [r7, #7]
 802e8ee:	061b      	lsls	r3, r3, #24
 802e8f0:	4313      	orrs	r3, r2
 802e8f2:	60fb      	str	r3, [r7, #12]
    } while (seed >= 4294967292U);
 802e8f4:	68fb      	ldr	r3, [r7, #12]
 802e8f6:	f113 0f05 	cmn.w	r3, #5
 802e8fa:	d8e7      	bhi.n	802e8cc <sample_random_index+0x8>

    uint32_t secret_index = seed - (((uint64_t)seed * 2863311531U) >> 34) * 6;
 802e8fc:	68fb      	ldr	r3, [r7, #12]
 802e8fe:	2200      	movs	r2, #0
 802e900:	4698      	mov	r8, r3
 802e902:	4691      	mov	r9, r2
 802e904:	4b1a      	ldr	r3, [pc, #104]	@ (802e970 <sample_random_index+0xac>)
 802e906:	fb03 f209 	mul.w	r2, r3, r9
 802e90a:	2300      	movs	r3, #0
 802e90c:	fb03 f308 	mul.w	r3, r3, r8
 802e910:	4413      	add	r3, r2
 802e912:	4a17      	ldr	r2, [pc, #92]	@ (802e970 <sample_random_index+0xac>)
 802e914:	fba8 4502 	umull	r4, r5, r8, r2
 802e918:	442b      	add	r3, r5
 802e91a:	461d      	mov	r5, r3
 802e91c:	f04f 0200 	mov.w	r2, #0
 802e920:	f04f 0300 	mov.w	r3, #0
 802e924:	08aa      	lsrs	r2, r5, #2
 802e926:	2300      	movs	r3, #0
 802e928:	4613      	mov	r3, r2
 802e92a:	005b      	lsls	r3, r3, #1
 802e92c:	4413      	add	r3, r2
 802e92e:	005b      	lsls	r3, r3, #1
 802e930:	461a      	mov	r2, r3
 802e932:	68fb      	ldr	r3, [r7, #12]
 802e934:	1a9b      	subs	r3, r3, r2
 802e936:	60bb      	str	r3, [r7, #8]
    assert(secret_index == seed % 6); // ensure the constant time trick above works
 802e938:	68f9      	ldr	r1, [r7, #12]
 802e93a:	4b0d      	ldr	r3, [pc, #52]	@ (802e970 <sample_random_index+0xac>)
 802e93c:	fba3 2301 	umull	r2, r3, r3, r1
 802e940:	089a      	lsrs	r2, r3, #2
 802e942:	4613      	mov	r3, r2
 802e944:	005b      	lsls	r3, r3, #1
 802e946:	4413      	add	r3, r2
 802e948:	005b      	lsls	r3, r3, #1
 802e94a:	1aca      	subs	r2, r1, r3
 802e94c:	68bb      	ldr	r3, [r7, #8]
 802e94e:	4293      	cmp	r3, r2
 802e950:	d006      	beq.n	802e960 <sample_random_index+0x9c>
 802e952:	4b08      	ldr	r3, [pc, #32]	@ (802e974 <sample_random_index+0xb0>)
 802e954:	4a08      	ldr	r2, [pc, #32]	@ (802e978 <sample_random_index+0xb4>)
 802e956:	f240 317e 	movw	r1, #894	@ 0x37e
 802e95a:	4808      	ldr	r0, [pc, #32]	@ (802e97c <sample_random_index+0xb8>)
 802e95c:	f006 fc6c 	bl	8035238 <__assert_func>
    return (unsigned char)secret_index;
 802e960:	68bb      	ldr	r3, [r7, #8]
 802e962:	b2db      	uxtb	r3, r3
}
 802e964:	4618      	mov	r0, r3
 802e966:	3710      	adds	r7, #16
 802e968:	46bd      	mov	sp, r7
 802e96a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802e96e:	bf00      	nop
 802e970:	aaaaaaab 	.word	0xaaaaaaab
 802e974:	08039250 	.word	0x08039250
 802e978:	0803911c 	.word	0x0803911c
 802e97c:	08039120 	.word	0x08039120

0802e980 <splitting_compute>:
#endif

static bool
splitting_compute(theta_splitting_t *out, const theta_structure_t *A, int zero_index, bool randomize)

{
 802e980:	b590      	push	{r4, r7, lr}
 802e982:	f2ad 5d84 	subw	sp, sp, #1412	@ 0x584
 802e986:	af00      	add	r7, sp, #0
 802e988:	f507 64b0 	add.w	r4, r7, #1408	@ 0x580
 802e98c:	f2a4 5474 	subw	r4, r4, #1396	@ 0x574
 802e990:	6020      	str	r0, [r4, #0]
 802e992:	f507 60b0 	add.w	r0, r7, #1408	@ 0x580
 802e996:	f5a0 60af 	sub.w	r0, r0, #1400	@ 0x578
 802e99a:	6001      	str	r1, [r0, #0]
 802e99c:	f507 61b0 	add.w	r1, r7, #1408	@ 0x580
 802e9a0:	f2a1 517c 	subw	r1, r1, #1404	@ 0x57c
 802e9a4:	600a      	str	r2, [r1, #0]
 802e9a6:	461a      	mov	r2, r3
 802e9a8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802e9ac:	f2a3 537d 	subw	r3, r3, #1405	@ 0x57d
 802e9b0:	701a      	strb	r2, [r3, #0]
    // init
    uint32_t ctl;
    uint32_t count = 0;
 802e9b2:	2300      	movs	r3, #0
 802e9b4:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
    fp2_t U_cst, t1, t2;

    memset(&out->M, 0, sizeof(basis_change_matrix_t));
 802e9b8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802e9bc:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802e9c0:	681b      	ldr	r3, [r3, #0]
 802e9c2:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 802e9c6:	2100      	movs	r1, #0
 802e9c8:	4618      	mov	r0, r3
 802e9ca:	f007 f919 	bl	8035c00 <memset>

    // enumerate through all indices
    for (int i = 0; i < 10; i++) {
 802e9ce:	2300      	movs	r3, #0
 802e9d0:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
 802e9d4:	e0b1      	b.n	802eb3a <splitting_compute+0x1ba>
        fp2_set_zero(&U_cst);
 802e9d6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 802e9da:	4618      	mov	r0, r3
 802e9dc:	f7e3 ffcd 	bl	801297a <fp2_set_zero>
        for (int t = 0; t < 4; t++) {
 802e9e0:	2300      	movs	r3, #0
 802e9e2:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 802e9e6:	e067      	b.n	802eab8 <splitting_compute+0x138>
            // Iterate through the null point
            choose_index_theta_point(&t2, t, &A->null_point);
 802e9e8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802e9ec:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 802e9f0:	681a      	ldr	r2, [r3, #0]
 802e9f2:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802e9f6:	f8d7 1574 	ldr.w	r1, [r7, #1396]	@ 0x574
 802e9fa:	4618      	mov	r0, r3
 802e9fc:	f7fd fa24 	bl	802be48 <choose_index_theta_point>
            choose_index_theta_point(&t1, t ^ EVEN_INDEX[i][1], &A->null_point);
 802ea00:	4a86      	ldr	r2, [pc, #536]	@ (802ec1c <splitting_compute+0x29c>)
 802ea02:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
 802ea06:	00db      	lsls	r3, r3, #3
 802ea08:	4413      	add	r3, r2
 802ea0a:	685a      	ldr	r2, [r3, #4]
 802ea0c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 802ea10:	ea82 0103 	eor.w	r1, r2, r3
 802ea14:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802ea18:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 802ea1c:	681a      	ldr	r2, [r3, #0]
 802ea1e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 802ea22:	4618      	mov	r0, r3
 802ea24:	f7fd fa10 	bl	802be48 <choose_index_theta_point>

            // Compute t1 * t2
            fp2_mul(&t1, &t1, &t2);
 802ea28:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 802ea2c:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 802ea30:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 802ea34:	4618      	mov	r0, r3
 802ea36:	f7e4 f87a 	bl	8012b2e <fp2_mul>
            // If CHI_EVAL(i,t) is +1 we want ctl to be 0 and
            // If CHI_EVAL(i,t) is -1 we want ctl to be 0xFF..FF
            ctl = (uint32_t)(CHI_EVAL[EVEN_INDEX[i][0]][t] >> 1);
 802ea3a:	4a78      	ldr	r2, [pc, #480]	@ (802ec1c <splitting_compute+0x29c>)
 802ea3c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
 802ea40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802ea44:	4976      	ldr	r1, [pc, #472]	@ (802ec20 <splitting_compute+0x2a0>)
 802ea46:	009a      	lsls	r2, r3, #2
 802ea48:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 802ea4c:	4413      	add	r3, r2
 802ea4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ea52:	105b      	asrs	r3, r3, #1
 802ea54:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
            assert(ctl == 0 || ctl == 0xffffffff);
 802ea58:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 802ea5c:	2b00      	cmp	r3, #0
 802ea5e:	d00b      	beq.n	802ea78 <splitting_compute+0xf8>
 802ea60:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 802ea64:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ea68:	d006      	beq.n	802ea78 <splitting_compute+0xf8>
 802ea6a:	4b6e      	ldr	r3, [pc, #440]	@ (802ec24 <splitting_compute+0x2a4>)
 802ea6c:	4a6e      	ldr	r2, [pc, #440]	@ (802ec28 <splitting_compute+0x2a8>)
 802ea6e:	f240 319b 	movw	r1, #923	@ 0x39b
 802ea72:	486e      	ldr	r0, [pc, #440]	@ (802ec2c <splitting_compute+0x2ac>)
 802ea74:	f006 fbe0 	bl	8035238 <__assert_func>

            fp2_neg(&t2, &t1);
 802ea78:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 802ea7c:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 802ea80:	4611      	mov	r1, r2
 802ea82:	4618      	mov	r0, r3
 802ea84:	f7e4 f83b 	bl	8012afe <fp2_neg>
            fp2_select(&t1, &t1, &t2, ctl);
 802ea88:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 802ea8c:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 802ea90:	f507 609b 	add.w	r0, r7, #1240	@ 0x4d8
 802ea94:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 802ea98:	f7e4 fc5b 	bl	8013352 <fp2_select>

            // Then we compute U_cst ± (t1 * t2)
            fp2_add(&U_cst, &U_cst, &t1);
 802ea9c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 802eaa0:	f507 61a4 	add.w	r1, r7, #1312	@ 0x520
 802eaa4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 802eaa8:	4618      	mov	r0, r3
 802eaaa:	f7e3 ffd7 	bl	8012a5c <fp2_add>
        for (int t = 0; t < 4; t++) {
 802eaae:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 802eab2:	3301      	adds	r3, #1
 802eab4:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 802eab8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 802eabc:	2b03      	cmp	r3, #3
 802eabe:	dd93      	ble.n	802e9e8 <splitting_compute+0x68>
        }

        // If U_cst is 0 then update the splitting matrix
        ctl = fp2_is_zero(&U_cst);
 802eac0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 802eac4:	4618      	mov	r0, r3
 802eac6:	f7e3 ff69 	bl	801299c <fp2_is_zero>
 802eaca:	f8c7 0568 	str.w	r0, [r7, #1384]	@ 0x568
        count -= ctl;
 802eace:	f8d7 257c 	ldr.w	r2, [r7, #1404]	@ 0x57c
 802ead2:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 802ead6:	1ad3      	subs	r3, r2, r3
 802ead8:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
        select_base_change_matrix(&out->M, &out->M, &SPLITTING_TRANSFORMS[i], ctl);
 802eadc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802eae0:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802eae4:	6818      	ldr	r0, [r3, #0]
 802eae6:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802eaea:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802eaee:	6819      	ldr	r1, [r3, #0]
 802eaf0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
 802eaf4:	011b      	lsls	r3, r3, #4
 802eaf6:	4a4e      	ldr	r2, [pc, #312]	@ (802ec30 <splitting_compute+0x2b0>)
 802eaf8:	441a      	add	r2, r3
 802eafa:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 802eafe:	f7fd f915 	bl	802bd2c <select_base_change_matrix>
        if (zero_index != -1 && i == zero_index &&
 802eb02:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802eb06:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 802eb0a:	681b      	ldr	r3, [r3, #0]
 802eb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802eb10:	d00e      	beq.n	802eb30 <splitting_compute+0x1b0>
 802eb12:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802eb16:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 802eb1a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	@ 0x578
 802eb1e:	681b      	ldr	r3, [r3, #0]
 802eb20:	429a      	cmp	r2, r3
 802eb22:	d105      	bne.n	802eb30 <splitting_compute+0x1b0>
 802eb24:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 802eb28:	2b00      	cmp	r3, #0
 802eb2a:	d101      	bne.n	802eb30 <splitting_compute+0x1b0>
            !ctl) { // extra checks if we know exactly where the 0 index should be
            return 0;
 802eb2c:	2300      	movs	r3, #0
 802eb2e:	e070      	b.n	802ec12 <splitting_compute+0x292>
    for (int i = 0; i < 10; i++) {
 802eb30:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
 802eb34:	3301      	adds	r3, #1
 802eb36:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
 802eb3a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
 802eb3e:	2b09      	cmp	r3, #9
 802eb40:	f77f af49 	ble.w	802e9d6 <splitting_compute+0x56>
        }
    }

#if defined(ENABLE_SIGN)
    // Pick a random normalization matrix
    if (randomize) {
 802eb44:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802eb48:	f2a3 537d 	subw	r3, r3, #1405	@ 0x57d
 802eb4c:	781b      	ldrb	r3, [r3, #0]
 802eb4e:	2b00      	cmp	r3, #0
 802eb50:	d044      	beq.n	802ebdc <splitting_compute+0x25c>
        unsigned char secret_index = sample_random_index();
 802eb52:	f7ff feb7 	bl	802e8c4 <sample_random_index>
 802eb56:	4603      	mov	r3, r0
 802eb58:	f887 3572 	strb.w	r3, [r7, #1394]	@ 0x572
        basis_change_matrix_t Mrandom;

        set_base_change_matrix_from_precomp(&Mrandom, &NORMALIZATION_TRANSFORMS[0]);
 802eb5c:	f107 0310 	add.w	r3, r7, #16
 802eb60:	4934      	ldr	r1, [pc, #208]	@ (802ec34 <splitting_compute+0x2b4>)
 802eb62:	4618      	mov	r0, r3
 802eb64:	f7fd f930 	bl	802bdc8 <set_base_change_matrix_from_precomp>

        // Use a constant time selection to pick the index we want
        for (unsigned char i = 1; i < 6; i++) {
 802eb68:	2301      	movs	r3, #1
 802eb6a:	f887 3573 	strb.w	r3, [r7, #1395]	@ 0x573
 802eb6e:	e022      	b.n	802ebb6 <splitting_compute+0x236>
            // When i == secret_index, mask == 0 and 0xFF..FF otherwise
            int32_t mask = i - secret_index;
 802eb70:	f897 2573 	ldrb.w	r2, [r7, #1395]	@ 0x573
 802eb74:	f897 3572 	ldrb.w	r3, [r7, #1394]	@ 0x572
 802eb78:	1ad3      	subs	r3, r2, r3
 802eb7a:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
            mask = (mask | -mask) >> 31;
 802eb7e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 802eb82:	425a      	negs	r2, r3
 802eb84:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 802eb88:	4313      	orrs	r3, r2
 802eb8a:	17db      	asrs	r3, r3, #31
 802eb8c:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
            select_base_change_matrix(&Mrandom, &Mrandom, &NORMALIZATION_TRANSFORMS[i], ~mask);
 802eb90:	f897 3573 	ldrb.w	r3, [r7, #1395]	@ 0x573
 802eb94:	011b      	lsls	r3, r3, #4
 802eb96:	4a27      	ldr	r2, [pc, #156]	@ (802ec34 <splitting_compute+0x2b4>)
 802eb98:	441a      	add	r2, r3
 802eb9a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 802eb9e:	43db      	mvns	r3, r3
 802eba0:	f107 0110 	add.w	r1, r7, #16
 802eba4:	f107 0010 	add.w	r0, r7, #16
 802eba8:	f7fd f8c0 	bl	802bd2c <select_base_change_matrix>
        for (unsigned char i = 1; i < 6; i++) {
 802ebac:	f897 3573 	ldrb.w	r3, [r7, #1395]	@ 0x573
 802ebb0:	3301      	adds	r3, #1
 802ebb2:	f887 3573 	strb.w	r3, [r7, #1395]	@ 0x573
 802ebb6:	f897 3573 	ldrb.w	r3, [r7, #1395]	@ 0x573
 802ebba:	2b05      	cmp	r3, #5
 802ebbc:	d9d8      	bls.n	802eb70 <splitting_compute+0x1f0>
        }
        base_change_matrix_multiplication(&out->M, &Mrandom, &out->M);
 802ebbe:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802ebc2:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802ebc6:	6818      	ldr	r0, [r3, #0]
 802ebc8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802ebcc:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802ebd0:	681a      	ldr	r2, [r3, #0]
 802ebd2:	f107 0310 	add.w	r3, r7, #16
 802ebd6:	4619      	mov	r1, r3
 802ebd8:	f7fd fb91 	bl	802c2fe <base_change_matrix_multiplication>
#else
    assert(!randomize);
#endif

    // apply the isomorphism to ensure the null point is compatible with splitting
    apply_isomorphism(&out->B.null_point, &out->M, &A->null_point);
 802ebdc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802ebe0:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802ebe4:	681b      	ldr	r3, [r3, #0]
 802ebe6:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 802ebea:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802ebee:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 802ebf2:	6819      	ldr	r1, [r3, #0]
 802ebf4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 802ebf8:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 802ebfc:	681b      	ldr	r3, [r3, #0]
 802ebfe:	461a      	mov	r2, r3
 802ec00:	f7fd fb6d 	bl	802c2de <apply_isomorphism>

    // splitting was successful only if exactly one zero was identified
    return count == 1;
 802ec04:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
 802ec08:	2b01      	cmp	r3, #1
 802ec0a:	bf0c      	ite	eq
 802ec0c:	2301      	moveq	r3, #1
 802ec0e:	2300      	movne	r3, #0
 802ec10:	b2db      	uxtb	r3, r3
}
 802ec12:	4618      	mov	r0, r3
 802ec14:	f207 5784 	addw	r7, r7, #1412	@ 0x584
 802ec18:	46bd      	mov	sp, r7
 802ec1a:	bd90      	pop	{r4, r7, pc}
 802ec1c:	0803b41c 	.word	0x0803b41c
 802ec20:	0803b46c 	.word	0x0803b46c
 802ec24:	0803926c 	.word	0x0803926c
 802ec28:	0803911c 	.word	0x0803911c
 802ec2c:	08039120 	.word	0x08039120
 802ec30:	0803b614 	.word	0x0803b614
 802ec34:	0803b6b4 	.word	0x0803b6b4

0802ec38 <theta_product_structure_to_elliptic_product>:

static int
theta_product_structure_to_elliptic_product(theta_couple_curve_t *E12, theta_structure_t *A)
{
 802ec38:	b590      	push	{r4, r7, lr}
 802ec3a:	b0a7      	sub	sp, #156	@ 0x9c
 802ec3c:	af00      	add	r7, sp, #0
 802ec3e:	6078      	str	r0, [r7, #4]
 802ec40:	6039      	str	r1, [r7, #0]
    fp2_t xx, yy;

    // This should be true from our computations in splitting_compute
    // but still check this for sanity
    if (!is_product_theta_point(&A->null_point))
 802ec42:	683b      	ldr	r3, [r7, #0]
 802ec44:	4618      	mov	r0, r3
 802ec46:	f002 f803 	bl	8030c50 <is_product_theta_point>
 802ec4a:	4603      	mov	r3, r0
 802ec4c:	2b00      	cmp	r3, #0
 802ec4e:	d101      	bne.n	802ec54 <theta_product_structure_to_elliptic_product+0x1c>
        return 0;
 802ec50:	2300      	movs	r3, #0
 802ec52:	e0ba      	b.n	802edca <theta_product_structure_to_elliptic_product+0x192>

    ec_curve_init(&(E12->E1));
 802ec54:	687b      	ldr	r3, [r7, #4]
 802ec56:	4618      	mov	r0, r3
 802ec58:	f7dc fbdf 	bl	800b41a <ec_curve_init>
    ec_curve_init(&(E12->E2));
 802ec5c:	687b      	ldr	r3, [r7, #4]
 802ec5e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802ec62:	4618      	mov	r0, r3
 802ec64:	f7dc fbd9 	bl	800b41a <ec_curve_init>

    // A valid elliptic theta null point has no zero coordinate
    if (fp2_is_zero(&A->null_point.x) | fp2_is_zero(&A->null_point.y) | fp2_is_zero(&A->null_point.z))
 802ec68:	683b      	ldr	r3, [r7, #0]
 802ec6a:	4618      	mov	r0, r3
 802ec6c:	f7e3 fe96 	bl	801299c <fp2_is_zero>
 802ec70:	4604      	mov	r4, r0
 802ec72:	683b      	ldr	r3, [r7, #0]
 802ec74:	3348      	adds	r3, #72	@ 0x48
 802ec76:	4618      	mov	r0, r3
 802ec78:	f7e3 fe90 	bl	801299c <fp2_is_zero>
 802ec7c:	4603      	mov	r3, r0
 802ec7e:	431c      	orrs	r4, r3
 802ec80:	683b      	ldr	r3, [r7, #0]
 802ec82:	3390      	adds	r3, #144	@ 0x90
 802ec84:	4618      	mov	r0, r3
 802ec86:	f7e3 fe89 	bl	801299c <fp2_is_zero>
 802ec8a:	4603      	mov	r3, r0
 802ec8c:	4323      	orrs	r3, r4
 802ec8e:	2b00      	cmp	r3, #0
 802ec90:	d001      	beq.n	802ec96 <theta_product_structure_to_elliptic_product+0x5e>
        return 0;
 802ec92:	2300      	movs	r3, #0
 802ec94:	e099      	b.n	802edca <theta_product_structure_to_elliptic_product+0x192>

    // xx = x², yy = y²
    fp2_sqr(&xx, &A->null_point.x);
 802ec96:	683a      	ldr	r2, [r7, #0]
 802ec98:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802ec9c:	4611      	mov	r1, r2
 802ec9e:	4618      	mov	r0, r3
 802eca0:	f7e3 ff94 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&yy, &A->null_point.y);
 802eca4:	683b      	ldr	r3, [r7, #0]
 802eca6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802ecaa:	f107 0308 	add.w	r3, r7, #8
 802ecae:	4611      	mov	r1, r2
 802ecb0:	4618      	mov	r0, r3
 802ecb2:	f7e3 ff8b 	bl	8012bcc <fp2_sqr>
    // xx = x^4, yy = y^4
    fp2_sqr(&xx, &xx);
 802ecb6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802ecba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802ecbe:	4611      	mov	r1, r2
 802ecc0:	4618      	mov	r0, r3
 802ecc2:	f7e3 ff83 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&yy, &yy);
 802ecc6:	f107 0208 	add.w	r2, r7, #8
 802ecca:	f107 0308 	add.w	r3, r7, #8
 802ecce:	4611      	mov	r1, r2
 802ecd0:	4618      	mov	r0, r3
 802ecd2:	f7e3 ff7b 	bl	8012bcc <fp2_sqr>

    // A2 = -2(x^4+y^4)/(x^4-y^4)
    fp2_add(&E12->E2.A, &xx, &yy);
 802ecd6:	687b      	ldr	r3, [r7, #4]
 802ecd8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802ecdc:	f107 0208 	add.w	r2, r7, #8
 802ece0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802ece4:	4618      	mov	r0, r3
 802ece6:	f7e3 feb9 	bl	8012a5c <fp2_add>
    fp2_sub(&E12->E2.C, &xx, &yy);
 802ecea:	687b      	ldr	r3, [r7, #4]
 802ecec:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802ecf0:	f107 0208 	add.w	r2, r7, #8
 802ecf4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802ecf8:	4618      	mov	r0, r3
 802ecfa:	f7e3 fee5 	bl	8012ac8 <fp2_sub>
    fp2_add(&E12->E2.A, &E12->E2.A, &E12->E2.A);
 802ecfe:	687b      	ldr	r3, [r7, #4]
 802ed00:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 802ed04:	687b      	ldr	r3, [r7, #4]
 802ed06:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 802ed0a:	687b      	ldr	r3, [r7, #4]
 802ed0c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802ed10:	461a      	mov	r2, r3
 802ed12:	f7e3 fea3 	bl	8012a5c <fp2_add>
    fp2_neg(&E12->E2.A, &E12->E2.A);
 802ed16:	687b      	ldr	r3, [r7, #4]
 802ed18:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 802ed1c:	687b      	ldr	r3, [r7, #4]
 802ed1e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 802ed22:	4619      	mov	r1, r3
 802ed24:	4610      	mov	r0, r2
 802ed26:	f7e3 feea 	bl	8012afe <fp2_neg>

    // same with x,z
    fp2_sqr(&xx, &A->null_point.x);
 802ed2a:	683a      	ldr	r2, [r7, #0]
 802ed2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802ed30:	4611      	mov	r1, r2
 802ed32:	4618      	mov	r0, r3
 802ed34:	f7e3 ff4a 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&yy, &A->null_point.z);
 802ed38:	683b      	ldr	r3, [r7, #0]
 802ed3a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802ed3e:	f107 0308 	add.w	r3, r7, #8
 802ed42:	4611      	mov	r1, r2
 802ed44:	4618      	mov	r0, r3
 802ed46:	f7e3 ff41 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&xx, &xx);
 802ed4a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802ed4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802ed52:	4611      	mov	r1, r2
 802ed54:	4618      	mov	r0, r3
 802ed56:	f7e3 ff39 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&yy, &yy);
 802ed5a:	f107 0208 	add.w	r2, r7, #8
 802ed5e:	f107 0308 	add.w	r3, r7, #8
 802ed62:	4611      	mov	r1, r2
 802ed64:	4618      	mov	r0, r3
 802ed66:	f7e3 ff31 	bl	8012bcc <fp2_sqr>

    // A1 = -2(x^4+z^4)/(x^4-z^4)
    fp2_add(&E12->E1.A, &xx, &yy);
 802ed6a:	687b      	ldr	r3, [r7, #4]
 802ed6c:	f107 0208 	add.w	r2, r7, #8
 802ed70:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802ed74:	4618      	mov	r0, r3
 802ed76:	f7e3 fe71 	bl	8012a5c <fp2_add>
    fp2_sub(&E12->E1.C, &xx, &yy);
 802ed7a:	687b      	ldr	r3, [r7, #4]
 802ed7c:	3348      	adds	r3, #72	@ 0x48
 802ed7e:	f107 0208 	add.w	r2, r7, #8
 802ed82:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802ed86:	4618      	mov	r0, r3
 802ed88:	f7e3 fe9e 	bl	8012ac8 <fp2_sub>
    fp2_add(&E12->E1.A, &E12->E1.A, &E12->E1.A);
 802ed8c:	687b      	ldr	r3, [r7, #4]
 802ed8e:	6879      	ldr	r1, [r7, #4]
 802ed90:	687a      	ldr	r2, [r7, #4]
 802ed92:	4618      	mov	r0, r3
 802ed94:	f7e3 fe62 	bl	8012a5c <fp2_add>
    fp2_neg(&E12->E1.A, &E12->E1.A);
 802ed98:	687b      	ldr	r3, [r7, #4]
 802ed9a:	687a      	ldr	r2, [r7, #4]
 802ed9c:	4611      	mov	r1, r2
 802ed9e:	4618      	mov	r0, r3
 802eda0:	f7e3 fead 	bl	8012afe <fp2_neg>

    if (fp2_is_zero(&E12->E1.C) | fp2_is_zero(&E12->E2.C))
 802eda4:	687b      	ldr	r3, [r7, #4]
 802eda6:	3348      	adds	r3, #72	@ 0x48
 802eda8:	4618      	mov	r0, r3
 802edaa:	f7e3 fdf7 	bl	801299c <fp2_is_zero>
 802edae:	4604      	mov	r4, r0
 802edb0:	687b      	ldr	r3, [r7, #4]
 802edb2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802edb6:	4618      	mov	r0, r3
 802edb8:	f7e3 fdf0 	bl	801299c <fp2_is_zero>
 802edbc:	4603      	mov	r3, r0
 802edbe:	4323      	orrs	r3, r4
 802edc0:	2b00      	cmp	r3, #0
 802edc2:	d001      	beq.n	802edc8 <theta_product_structure_to_elliptic_product+0x190>
        return 0;
 802edc4:	2300      	movs	r3, #0
 802edc6:	e000      	b.n	802edca <theta_product_structure_to_elliptic_product+0x192>

    return 1;
 802edc8:	2301      	movs	r3, #1
}
 802edca:	4618      	mov	r0, r3
 802edcc:	379c      	adds	r7, #156	@ 0x9c
 802edce:	46bd      	mov	sp, r7
 802edd0:	bd90      	pop	{r4, r7, pc}

0802edd2 <theta_point_to_montgomery_point>:

static int
theta_point_to_montgomery_point(theta_couple_point_t *P12, const theta_point_t *P, const theta_structure_t *A)
{
 802edd2:	b590      	push	{r4, r7, lr}
 802edd4:	b099      	sub	sp, #100	@ 0x64
 802edd6:	af00      	add	r7, sp, #0
 802edd8:	60f8      	str	r0, [r7, #12]
 802edda:	60b9      	str	r1, [r7, #8]
 802eddc:	607a      	str	r2, [r7, #4]
    fp2_t temp;
    const fp2_t *x, *z;

    if (!is_product_theta_point(P))
 802edde:	68b8      	ldr	r0, [r7, #8]
 802ede0:	f001 ff36 	bl	8030c50 <is_product_theta_point>
 802ede4:	4603      	mov	r3, r0
 802ede6:	2b00      	cmp	r3, #0
 802ede8:	d101      	bne.n	802edee <theta_point_to_montgomery_point+0x1c>
        return 0;
 802edea:	2300      	movs	r3, #0
 802edec:	e07b      	b.n	802eee6 <theta_point_to_montgomery_point+0x114>

    x = &P->x;
 802edee:	68bb      	ldr	r3, [r7, #8]
 802edf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    z = &P->y;
 802edf2:	68bb      	ldr	r3, [r7, #8]
 802edf4:	3348      	adds	r3, #72	@ 0x48
 802edf6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (fp2_is_zero(x) & fp2_is_zero(z)) {
 802edf8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 802edfa:	f7e3 fdcf 	bl	801299c <fp2_is_zero>
 802edfe:	4604      	mov	r4, r0
 802ee00:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ee02:	f7e3 fdcb 	bl	801299c <fp2_is_zero>
 802ee06:	4603      	mov	r3, r0
 802ee08:	4023      	ands	r3, r4
 802ee0a:	2b00      	cmp	r3, #0
 802ee0c:	d005      	beq.n	802ee1a <theta_point_to_montgomery_point+0x48>
        x = &P->z;
 802ee0e:	68bb      	ldr	r3, [r7, #8]
 802ee10:	3390      	adds	r3, #144	@ 0x90
 802ee12:	65fb      	str	r3, [r7, #92]	@ 0x5c
        z = &P->t;
 802ee14:	68bb      	ldr	r3, [r7, #8]
 802ee16:	33d8      	adds	r3, #216	@ 0xd8
 802ee18:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    if (fp2_is_zero(x) & fp2_is_zero(z)) {
 802ee1a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 802ee1c:	f7e3 fdbe 	bl	801299c <fp2_is_zero>
 802ee20:	4604      	mov	r4, r0
 802ee22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ee24:	f7e3 fdba 	bl	801299c <fp2_is_zero>
 802ee28:	4603      	mov	r3, r0
 802ee2a:	4023      	ands	r3, r4
 802ee2c:	2b00      	cmp	r3, #0
 802ee2e:	d001      	beq.n	802ee34 <theta_point_to_montgomery_point+0x62>
        return 0; // at this point P=(0:0:0:0) so is invalid
 802ee30:	2300      	movs	r3, #0
 802ee32:	e058      	b.n	802eee6 <theta_point_to_montgomery_point+0x114>
    }
    // P2.X = A.null_point.y * P.x + A.null_point.x * P.y
    // P2.Z = - A.null_point.y * P.x + A.null_point.x * P.y
    fp2_mul(&P12->P2.x, &A->null_point.y, x);
 802ee34:	68fb      	ldr	r3, [r7, #12]
 802ee36:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802ee3a:	687b      	ldr	r3, [r7, #4]
 802ee3c:	3348      	adds	r3, #72	@ 0x48
 802ee3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 802ee40:	4619      	mov	r1, r3
 802ee42:	f7e3 fe74 	bl	8012b2e <fp2_mul>
    fp2_mul(&temp, &A->null_point.x, z);
 802ee46:	6879      	ldr	r1, [r7, #4]
 802ee48:	f107 0310 	add.w	r3, r7, #16
 802ee4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ee4e:	4618      	mov	r0, r3
 802ee50:	f7e3 fe6d 	bl	8012b2e <fp2_mul>
    fp2_sub(&P12->P2.z, &temp, &P12->P2.x);
 802ee54:	68fb      	ldr	r3, [r7, #12]
 802ee56:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802ee5a:	68fb      	ldr	r3, [r7, #12]
 802ee5c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 802ee60:	f107 0310 	add.w	r3, r7, #16
 802ee64:	4619      	mov	r1, r3
 802ee66:	f7e3 fe2f 	bl	8012ac8 <fp2_sub>
    fp2_add(&P12->P2.x, &P12->P2.x, &temp);
 802ee6a:	68fb      	ldr	r3, [r7, #12]
 802ee6c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 802ee70:	68fb      	ldr	r3, [r7, #12]
 802ee72:	3390      	adds	r3, #144	@ 0x90
 802ee74:	f107 0210 	add.w	r2, r7, #16
 802ee78:	4619      	mov	r1, r3
 802ee7a:	f7e3 fdef 	bl	8012a5c <fp2_add>

    x = &P->x;
 802ee7e:	68bb      	ldr	r3, [r7, #8]
 802ee80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    z = &P->z;
 802ee82:	68bb      	ldr	r3, [r7, #8]
 802ee84:	3390      	adds	r3, #144	@ 0x90
 802ee86:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (fp2_is_zero(x) & fp2_is_zero(z)) {
 802ee88:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 802ee8a:	f7e3 fd87 	bl	801299c <fp2_is_zero>
 802ee8e:	4604      	mov	r4, r0
 802ee90:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ee92:	f7e3 fd83 	bl	801299c <fp2_is_zero>
 802ee96:	4603      	mov	r3, r0
 802ee98:	4023      	ands	r3, r4
 802ee9a:	2b00      	cmp	r3, #0
 802ee9c:	d005      	beq.n	802eeaa <theta_point_to_montgomery_point+0xd8>
        x = &P->y;
 802ee9e:	68bb      	ldr	r3, [r7, #8]
 802eea0:	3348      	adds	r3, #72	@ 0x48
 802eea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        z = &P->t;
 802eea4:	68bb      	ldr	r3, [r7, #8]
 802eea6:	33d8      	adds	r3, #216	@ 0xd8
 802eea8:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    // P1.X = A.null_point.z * P.x + A.null_point.x * P.z
    // P1.Z = -A.null_point.z * P.x + A.null_point.x * P.z
    fp2_mul(&P12->P1.x, &A->null_point.z, x);
 802eeaa:	68f8      	ldr	r0, [r7, #12]
 802eeac:	687b      	ldr	r3, [r7, #4]
 802eeae:	3390      	adds	r3, #144	@ 0x90
 802eeb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 802eeb2:	4619      	mov	r1, r3
 802eeb4:	f7e3 fe3b 	bl	8012b2e <fp2_mul>
    fp2_mul(&temp, &A->null_point.x, z);
 802eeb8:	6879      	ldr	r1, [r7, #4]
 802eeba:	f107 0310 	add.w	r3, r7, #16
 802eebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802eec0:	4618      	mov	r0, r3
 802eec2:	f7e3 fe34 	bl	8012b2e <fp2_mul>
    fp2_sub(&P12->P1.z, &temp, &P12->P1.x);
 802eec6:	68fb      	ldr	r3, [r7, #12]
 802eec8:	3348      	adds	r3, #72	@ 0x48
 802eeca:	68fa      	ldr	r2, [r7, #12]
 802eecc:	f107 0110 	add.w	r1, r7, #16
 802eed0:	4618      	mov	r0, r3
 802eed2:	f7e3 fdf9 	bl	8012ac8 <fp2_sub>
    fp2_add(&P12->P1.x, &P12->P1.x, &temp);
 802eed6:	68fb      	ldr	r3, [r7, #12]
 802eed8:	68f9      	ldr	r1, [r7, #12]
 802eeda:	f107 0210 	add.w	r2, r7, #16
 802eede:	4618      	mov	r0, r3
 802eee0:	f7e3 fdbc 	bl	8012a5c <fp2_add>
    return 1;
 802eee4:	2301      	movs	r3, #1
}
 802eee6:	4618      	mov	r0, r3
 802eee8:	3764      	adds	r7, #100	@ 0x64
 802eeea:	46bd      	mov	sp, r7
 802eeec:	bd90      	pop	{r4, r7, pc}
	...

0802eef0 <_theta_chain_compute_impl>:
                          theta_couple_curve_t *E34,
                          theta_couple_point_t *P12,
                          size_t numP,
                          bool verify,
                          bool randomize)
{
 802eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eef4:	f5ad 5d23 	sub.w	sp, sp, #10432	@ 0x28c0
 802eef8:	b08d      	sub	sp, #52	@ 0x34
 802eefa:	af04      	add	r7, sp, #16
 802eefc:	f507 640e 	add.w	r4, r7, #2272	@ 0x8e0
 802ef00:	f2a4 74f4 	subw	r4, r4, #2036	@ 0x7f4
 802ef04:	6020      	str	r0, [r4, #0]
 802ef06:	f507 600e 	add.w	r0, r7, #2272	@ 0x8e0
 802ef0a:	f5a0 60ff 	sub.w	r0, r0, #2040	@ 0x7f8
 802ef0e:	6001      	str	r1, [r0, #0]
 802ef10:	f507 610e 	add.w	r1, r7, #2272	@ 0x8e0
 802ef14:	f2a1 71fc 	subw	r1, r1, #2044	@ 0x7fc
 802ef18:	600a      	str	r2, [r1, #0]
 802ef1a:	4619      	mov	r1, r3
 802ef1c:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802ef20:	f2a3 72fd 	subw	r2, r3, #2045	@ 0x7fd
 802ef24:	460b      	mov	r3, r1
 802ef26:	7013      	strb	r3, [r2, #0]
 802ef28:	466b      	mov	r3, sp
 802ef2a:	607b      	str	r3, [r7, #4]
    theta_structure_t theta;

    // lift the basis
    theta_couple_jac_point_t xyT1, xyT2;

    ec_basis_t bas1 = { .P = ker->T1.P1, .Q = ker->T2.P1, .PmQ = ker->T1m2.P1 };
 802ef2c:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ef30:	f103 0320 	add.w	r3, r3, #32
 802ef34:	f6a3 02e4 	subw	r2, r3, #2276	@ 0x8e4
 802ef38:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802ef3c:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 802ef40:	681b      	ldr	r3, [r3, #0]
 802ef42:	4610      	mov	r0, r2
 802ef44:	4619      	mov	r1, r3
 802ef46:	2390      	movs	r3, #144	@ 0x90
 802ef48:	461a      	mov	r2, r3
 802ef4a:	f006 ff28 	bl	8035d9e <memcpy>
 802ef4e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ef52:	f103 0320 	add.w	r3, r3, #32
 802ef56:	f6a3 02e4 	subw	r2, r3, #2276	@ 0x8e4
 802ef5a:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802ef5e:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 802ef62:	681b      	ldr	r3, [r3, #0]
 802ef64:	f102 0090 	add.w	r0, r2, #144	@ 0x90
 802ef68:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 802ef6c:	2390      	movs	r3, #144	@ 0x90
 802ef6e:	461a      	mov	r2, r3
 802ef70:	f006 ff15 	bl	8035d9e <memcpy>
 802ef74:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ef78:	f103 0320 	add.w	r3, r3, #32
 802ef7c:	f6a3 02e4 	subw	r2, r3, #2276	@ 0x8e4
 802ef80:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802ef84:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 802ef88:	681b      	ldr	r3, [r3, #0]
 802ef8a:	f502 7090 	add.w	r0, r2, #288	@ 0x120
 802ef8e:	f503 7110 	add.w	r1, r3, #576	@ 0x240
 802ef92:	2390      	movs	r3, #144	@ 0x90
 802ef94:	461a      	mov	r2, r3
 802ef96:	f006 ff02 	bl	8035d9e <memcpy>
    ec_basis_t bas2 = { .P = ker->T1.P2, .Q = ker->T2.P2, .PmQ = ker->T1m2.P2 };
 802ef9a:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ef9e:	f103 0320 	add.w	r3, r3, #32
 802efa2:	f6a3 2294 	subw	r2, r3, #2708	@ 0xa94
 802efa6:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802efaa:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 802efae:	681b      	ldr	r3, [r3, #0]
 802efb0:	4610      	mov	r0, r2
 802efb2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 802efb6:	2390      	movs	r3, #144	@ 0x90
 802efb8:	461a      	mov	r2, r3
 802efba:	f006 fef0 	bl	8035d9e <memcpy>
 802efbe:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802efc2:	f103 0320 	add.w	r3, r3, #32
 802efc6:	f6a3 2294 	subw	r2, r3, #2708	@ 0xa94
 802efca:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802efce:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 802efd2:	681b      	ldr	r3, [r3, #0]
 802efd4:	f102 0090 	add.w	r0, r2, #144	@ 0x90
 802efd8:	f503 71d8 	add.w	r1, r3, #432	@ 0x1b0
 802efdc:	2390      	movs	r3, #144	@ 0x90
 802efde:	461a      	mov	r2, r3
 802efe0:	f006 fedd 	bl	8035d9e <memcpy>
 802efe4:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802efe8:	f103 0320 	add.w	r3, r3, #32
 802efec:	f6a3 2294 	subw	r2, r3, #2708	@ 0xa94
 802eff0:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802eff4:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 802eff8:	681b      	ldr	r3, [r3, #0]
 802effa:	f502 7090 	add.w	r0, r2, #288	@ 0x120
 802effe:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 802f002:	2390      	movs	r3, #144	@ 0x90
 802f004:	461a      	mov	r2, r3
 802f006:	f006 feca 	bl	8035d9e <memcpy>
    if (!lift_basis(&xyT1.P1, &xyT2.P1, &bas1, &E12->E1))
 802f00a:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f00e:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 802f012:	681b      	ldr	r3, [r3, #0]
 802f014:	f507 52ff 	add.w	r2, r7, #8160	@ 0x1fe0
 802f018:	f102 021c 	add.w	r2, r2, #28
 802f01c:	f507 5106 	add.w	r1, r7, #8576	@ 0x2180
 802f020:	f101 012c 	add.w	r1, r1, #44	@ 0x2c
 802f024:	f507 500d 	add.w	r0, r7, #9024	@ 0x2340
 802f028:	f100 001c 	add.w	r0, r0, #28
 802f02c:	f7d3 f8ae 	bl	800218c <lift_basis>
 802f030:	4603      	mov	r3, r0
 802f032:	2b00      	cmp	r3, #0
 802f034:	d102      	bne.n	802f03c <_theta_chain_compute_impl+0x14c>
        return 0;
 802f036:	2300      	movs	r3, #0
 802f038:	f001 bb29 	b.w	803068e <_theta_chain_compute_impl+0x179e>
    if (!lift_basis(&xyT1.P2, &xyT2.P2, &bas2, &E12->E2))
 802f03c:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f040:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 802f044:	681b      	ldr	r3, [r3, #0]
 802f046:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 802f04a:	f507 52f2 	add.w	r2, r7, #7744	@ 0x1e40
 802f04e:	f102 020c 	add.w	r2, r2, #12
 802f052:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 802f056:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 802f05a:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 802f05e:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 802f062:	f103 031c 	add.w	r3, r3, #28
 802f066:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 802f06a:	4623      	mov	r3, r4
 802f06c:	f7d3 f88e 	bl	800218c <lift_basis>
 802f070:	4603      	mov	r3, r0
 802f072:	2b00      	cmp	r3, #0
 802f074:	d102      	bne.n	802f07c <_theta_chain_compute_impl+0x18c>
        return 0;
 802f076:	2300      	movs	r3, #0
 802f078:	f001 bb09 	b.w	803068e <_theta_chain_compute_impl+0x179e>

    const unsigned extra = HD_extra_torsion * extra_torsion;
 802f07c:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f080:	f2a3 73fd 	subw	r3, r3, #2045	@ 0x7fd
 802f084:	781b      	ldrb	r3, [r3, #0]
 802f086:	005b      	lsls	r3, r3, #1
 802f088:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f08c:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 802f090:	6013      	str	r3, [r2, #0]

#ifndef NDEBUG
    assert(extra == 0 || extra == 2); // only cases implemented
 802f092:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f096:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 802f09a:	681b      	ldr	r3, [r3, #0]
 802f09c:	2b00      	cmp	r3, #0
 802f09e:	d00d      	beq.n	802f0bc <_theta_chain_compute_impl+0x1cc>
 802f0a0:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f0a4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 802f0a8:	681b      	ldr	r3, [r3, #0]
 802f0aa:	2b02      	cmp	r3, #2
 802f0ac:	d006      	beq.n	802f0bc <_theta_chain_compute_impl+0x1cc>
 802f0ae:	4b6e      	ldr	r3, [pc, #440]	@ (802f268 <_theta_chain_compute_impl+0x378>)
 802f0b0:	4a6e      	ldr	r2, [pc, #440]	@ (802f26c <_theta_chain_compute_impl+0x37c>)
 802f0b2:	f240 413c 	movw	r1, #1084	@ 0x43c
 802f0b6:	486e      	ldr	r0, [pc, #440]	@ (802f270 <_theta_chain_compute_impl+0x380>)
 802f0b8:	f006 f8be 	bl	8035238 <__assert_func>
    if (!test_point_order_twof(&bas2.P, &E12->E2, n + extra))
 802f0bc:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f0c0:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 802f0c4:	681b      	ldr	r3, [r3, #0]
 802f0c6:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 802f0ca:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f0ce:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 802f0d2:	681a      	ldr	r2, [r3, #0]
 802f0d4:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f0d8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 802f0dc:	681b      	ldr	r3, [r3, #0]
 802f0de:	4413      	add	r3, r2
 802f0e0:	461a      	mov	r2, r3
 802f0e2:	f507 53f2 	add.w	r3, r7, #7744	@ 0x1e40
 802f0e6:	f103 030c 	add.w	r3, r3, #12
 802f0ea:	4618      	mov	r0, r3
 802f0ec:	f7fc fca9 	bl	802ba42 <test_point_order_twof>
 802f0f0:	4603      	mov	r3, r0
 802f0f2:	2b00      	cmp	r3, #0
 802f0f4:	d108      	bne.n	802f108 <_theta_chain_compute_impl+0x218>
        debug_print("bas2.P does not have correct order");
 802f0f6:	4b5d      	ldr	r3, [pc, #372]	@ (802f26c <_theta_chain_compute_impl+0x37c>)
 802f0f8:	9300      	str	r3, [sp, #0]
 802f0fa:	f240 433e 	movw	r3, #1086	@ 0x43e
 802f0fe:	4a5d      	ldr	r2, [pc, #372]	@ (802f274 <_theta_chain_compute_impl+0x384>)
 802f100:	495d      	ldr	r1, [pc, #372]	@ (802f278 <_theta_chain_compute_impl+0x388>)
 802f102:	485e      	ldr	r0, [pc, #376]	@ (802f27c <_theta_chain_compute_impl+0x38c>)
 802f104:	f006 fc1a 	bl	803593c <iprintf>

    if (!test_jac_order_twof(&xyT2.P2, &E12->E2, n + extra))
 802f108:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f10c:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 802f110:	681b      	ldr	r3, [r3, #0]
 802f112:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 802f116:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f11a:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 802f11e:	681a      	ldr	r2, [r3, #0]
 802f120:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f124:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 802f128:	681b      	ldr	r3, [r3, #0]
 802f12a:	4413      	add	r3, r2
 802f12c:	461a      	mov	r2, r3
 802f12e:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 802f132:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 802f136:	33d8      	adds	r3, #216	@ 0xd8
 802f138:	4618      	mov	r0, r3
 802f13a:	f7fc fce0 	bl	802bafe <test_jac_order_twof>
 802f13e:	4603      	mov	r3, r0
 802f140:	2b00      	cmp	r3, #0
 802f142:	d108      	bne.n	802f156 <_theta_chain_compute_impl+0x266>
        debug_print("xyT2.P2 does not have correct order");
 802f144:	4b49      	ldr	r3, [pc, #292]	@ (802f26c <_theta_chain_compute_impl+0x37c>)
 802f146:	9300      	str	r3, [sp, #0]
 802f148:	f240 4341 	movw	r3, #1089	@ 0x441
 802f14c:	4a49      	ldr	r2, [pc, #292]	@ (802f274 <_theta_chain_compute_impl+0x384>)
 802f14e:	494c      	ldr	r1, [pc, #304]	@ (802f280 <_theta_chain_compute_impl+0x390>)
 802f150:	484a      	ldr	r0, [pc, #296]	@ (802f27c <_theta_chain_compute_impl+0x38c>)
 802f152:	f006 fbf3 	bl	803593c <iprintf>
#endif

    theta_point_t pts[numP ? numP : 1];
 802f156:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802f15a:	f103 0310 	add.w	r3, r3, #16
 802f15e:	681b      	ldr	r3, [r3, #0]
 802f160:	2b00      	cmp	r3, #0
 802f162:	d005      	beq.n	802f170 <_theta_chain_compute_impl+0x280>
 802f164:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802f168:	f103 0310 	add.w	r3, r3, #16
 802f16c:	681c      	ldr	r4, [r3, #0]
 802f16e:	e000      	b.n	802f172 <_theta_chain_compute_impl+0x282>
 802f170:	2401      	movs	r4, #1
 802f172:	4623      	mov	r3, r4
 802f174:	3b01      	subs	r3, #1
 802f176:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f17a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 802f17e:	6013      	str	r3, [r2, #0]
 802f180:	2300      	movs	r3, #0
 802f182:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 802f186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802f18a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 802f18e:	f04f 0000 	mov.w	r0, #0
 802f192:	f04f 0100 	mov.w	r1, #0
 802f196:	00d9      	lsls	r1, r3, #3
 802f198:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802f19c:	00d0      	lsls	r0, r2, #3
 802f19e:	4602      	mov	r2, r0
 802f1a0:	460b      	mov	r3, r1
 802f1a2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 802f1a6:	1851      	adds	r1, r2, r1
 802f1a8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 802f1ac:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 802f1b0:	eb43 0101 	adc.w	r1, r3, r1
 802f1b4:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
 802f1b8:	f04f 0200 	mov.w	r2, #0
 802f1bc:	f04f 0300 	mov.w	r3, #0
 802f1c0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 802f1c4:	020b      	lsls	r3, r1, #8
 802f1c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 802f1ca:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 802f1ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 802f1d2:	020a      	lsls	r2, r1, #8
 802f1d4:	2300      	movs	r3, #0
 802f1d6:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 802f1da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 802f1de:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 802f1e2:	f04f 0000 	mov.w	r0, #0
 802f1e6:	f04f 0100 	mov.w	r1, #0
 802f1ea:	00d9      	lsls	r1, r3, #3
 802f1ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802f1f0:	00d0      	lsls	r0, r2, #3
 802f1f2:	4602      	mov	r2, r0
 802f1f4:	460b      	mov	r3, r1
 802f1f6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 802f1fa:	1851      	adds	r1, r2, r1
 802f1fc:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 802f200:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 802f204:	eb43 0101 	adc.w	r1, r3, r1
 802f208:	f8c7 10ac 	str.w	r1, [r7, #172]	@ 0xac
 802f20c:	f04f 0200 	mov.w	r2, #0
 802f210:	f04f 0300 	mov.w	r3, #0
 802f214:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 802f218:	020b      	lsls	r3, r1, #8
 802f21a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 802f21e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 802f222:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 802f226:	020a      	lsls	r2, r1, #8
 802f228:	4623      	mov	r3, r4
 802f22a:	00db      	lsls	r3, r3, #3
 802f22c:	4423      	add	r3, r4
 802f22e:	015b      	lsls	r3, r3, #5
 802f230:	3307      	adds	r3, #7
 802f232:	08db      	lsrs	r3, r3, #3
 802f234:	00db      	lsls	r3, r3, #3
 802f236:	ebad 0d03 	sub.w	sp, sp, r3
 802f23a:	ab04      	add	r3, sp, #16
 802f23c:	3303      	adds	r3, #3
 802f23e:	089b      	lsrs	r3, r3, #2
 802f240:	009b      	lsls	r3, r3, #2
 802f242:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f246:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 802f24a:	6013      	str	r3, [r2, #0]

    int space = 1;
 802f24c:	2301      	movs	r3, #1
 802f24e:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f252:	f102 021c 	add.w	r2, r2, #28
 802f256:	6013      	str	r3, [r2, #0]
    for (unsigned i = 1; i < n; i *= 2)
 802f258:	2301      	movs	r3, #1
 802f25a:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f25e:	f102 0218 	add.w	r2, r2, #24
 802f262:	6013      	str	r3, [r2, #0]
 802f264:	e024      	b.n	802f2b0 <_theta_chain_compute_impl+0x3c0>
 802f266:	bf00      	nop
 802f268:	0803928c 	.word	0x0803928c
 802f26c:	0803911c 	.word	0x0803911c
 802f270:	08039120 	.word	0x08039120
 802f274:	08039140 	.word	0x08039140
 802f278:	080392a8 	.word	0x080392a8
 802f27c:	08039178 	.word	0x08039178
 802f280:	080392cc 	.word	0x080392cc
        ++space;
 802f284:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f288:	f103 031c 	add.w	r3, r3, #28
 802f28c:	681b      	ldr	r3, [r3, #0]
 802f28e:	3301      	adds	r3, #1
 802f290:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f294:	f102 021c 	add.w	r2, r2, #28
 802f298:	6013      	str	r3, [r2, #0]
    for (unsigned i = 1; i < n; i *= 2)
 802f29a:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f29e:	f103 0318 	add.w	r3, r3, #24
 802f2a2:	681b      	ldr	r3, [r3, #0]
 802f2a4:	005b      	lsls	r3, r3, #1
 802f2a6:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f2aa:	f102 0218 	add.w	r2, r2, #24
 802f2ae:	6013      	str	r3, [r2, #0]
 802f2b0:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f2b4:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 802f2b8:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f2bc:	f102 0218 	add.w	r2, r2, #24
 802f2c0:	6812      	ldr	r2, [r2, #0]
 802f2c2:	681b      	ldr	r3, [r3, #0]
 802f2c4:	429a      	cmp	r2, r3
 802f2c6:	d3dd      	bcc.n	802f284 <_theta_chain_compute_impl+0x394>

    uint16_t todo[space];
 802f2c8:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f2cc:	f103 031c 	add.w	r3, r3, #28
 802f2d0:	6819      	ldr	r1, [r3, #0]
 802f2d2:	1e4b      	subs	r3, r1, #1
 802f2d4:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f2d8:	f102 0220 	add.w	r2, r2, #32
 802f2dc:	6013      	str	r3, [r2, #0]
 802f2de:	460a      	mov	r2, r1
 802f2e0:	2300      	movs	r3, #0
 802f2e2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 802f2e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802f2ea:	f04f 0200 	mov.w	r2, #0
 802f2ee:	f04f 0300 	mov.w	r3, #0
 802f2f2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 802f2f6:	0103      	lsls	r3, r0, #4
 802f2f8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 802f2fc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 802f300:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 802f304:	0102      	lsls	r2, r0, #4
 802f306:	460a      	mov	r2, r1
 802f308:	2300      	movs	r3, #0
 802f30a:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 802f30e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 802f312:	f04f 0200 	mov.w	r2, #0
 802f316:	f04f 0300 	mov.w	r3, #0
 802f31a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 802f31e:	0103      	lsls	r3, r0, #4
 802f320:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 802f324:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 802f328:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 802f32c:	0102      	lsls	r2, r0, #4
 802f32e:	460b      	mov	r3, r1
 802f330:	005b      	lsls	r3, r3, #1
 802f332:	3307      	adds	r3, #7
 802f334:	08db      	lsrs	r3, r3, #3
 802f336:	00db      	lsls	r3, r3, #3
 802f338:	ebad 0d03 	sub.w	sp, sp, r3
 802f33c:	ab04      	add	r3, sp, #16
 802f33e:	3301      	adds	r3, #1
 802f340:	085b      	lsrs	r3, r3, #1
 802f342:	005b      	lsls	r3, r3, #1
 802f344:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f348:	f102 021c 	add.w	r2, r2, #28
 802f34c:	6013      	str	r3, [r2, #0]
    todo[0] = n - 2 + extra;
 802f34e:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f352:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 802f356:	681b      	ldr	r3, [r3, #0]
 802f358:	b29a      	uxth	r2, r3
 802f35a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f35e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 802f362:	681b      	ldr	r3, [r3, #0]
 802f364:	b29b      	uxth	r3, r3
 802f366:	4413      	add	r3, r2
 802f368:	b29b      	uxth	r3, r3
 802f36a:	3b02      	subs	r3, #2
 802f36c:	b29b      	uxth	r3, r3
 802f36e:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f372:	f102 021c 	add.w	r2, r2, #28
 802f376:	6812      	ldr	r2, [r2, #0]
 802f378:	8013      	strh	r3, [r2, #0]

    int current = 0;
 802f37a:	2300      	movs	r3, #0
 802f37c:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f380:	f102 0214 	add.w	r2, r2, #20
 802f384:	6013      	str	r3, [r2, #0]

    // kernel points for the gluing isogeny
    theta_couple_jac_point_t jacQ1[space], jacQ2[space];
 802f386:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f38a:	f103 031c 	add.w	r3, r3, #28
 802f38e:	6819      	ldr	r1, [r3, #0]
 802f390:	1e4b      	subs	r3, r1, #1
 802f392:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f396:	f102 0218 	add.w	r2, r2, #24
 802f39a:	6013      	str	r3, [r2, #0]
 802f39c:	460a      	mov	r2, r1
 802f39e:	2300      	movs	r3, #0
 802f3a0:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 802f3a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 802f3a8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 802f3ac:	1890      	adds	r0, r2, r2
 802f3ae:	66b8      	str	r0, [r7, #104]	@ 0x68
 802f3b0:	415b      	adcs	r3, r3
 802f3b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802f3b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 802f3b8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 802f3bc:	eb12 0800 	adds.w	r8, r2, r0
 802f3c0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 802f3c4:	eb43 0900 	adc.w	r9, r3, r0
 802f3c8:	f04f 0200 	mov.w	r2, #0
 802f3cc:	f04f 0300 	mov.w	r3, #0
 802f3d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802f3d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802f3d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802f3dc:	eb18 0002 	adds.w	r0, r8, r2
 802f3e0:	6638      	str	r0, [r7, #96]	@ 0x60
 802f3e2:	eb49 0303 	adc.w	r3, r9, r3
 802f3e6:	667b      	str	r3, [r7, #100]	@ 0x64
 802f3e8:	f04f 0200 	mov.w	r2, #0
 802f3ec:	f04f 0300 	mov.w	r3, #0
 802f3f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 802f3f4:	4648      	mov	r0, r9
 802f3f6:	01c3      	lsls	r3, r0, #7
 802f3f8:	4640      	mov	r0, r8
 802f3fa:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802f3fe:	4640      	mov	r0, r8
 802f400:	01c2      	lsls	r2, r0, #7
 802f402:	460a      	mov	r2, r1
 802f404:	2300      	movs	r3, #0
 802f406:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 802f40a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 802f40e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 802f412:	4642      	mov	r2, r8
 802f414:	464b      	mov	r3, r9
 802f416:	1890      	adds	r0, r2, r2
 802f418:	65b8      	str	r0, [r7, #88]	@ 0x58
 802f41a:	415b      	adcs	r3, r3
 802f41c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802f41e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802f422:	4640      	mov	r0, r8
 802f424:	eb12 0a00 	adds.w	sl, r2, r0
 802f428:	4648      	mov	r0, r9
 802f42a:	eb43 0b00 	adc.w	fp, r3, r0
 802f42e:	f04f 0200 	mov.w	r2, #0
 802f432:	f04f 0300 	mov.w	r3, #0
 802f436:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802f43a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802f43e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802f442:	eb1a 0002 	adds.w	r0, sl, r2
 802f446:	6538      	str	r0, [r7, #80]	@ 0x50
 802f448:	eb4b 0303 	adc.w	r3, fp, r3
 802f44c:	657b      	str	r3, [r7, #84]	@ 0x54
 802f44e:	f04f 0200 	mov.w	r2, #0
 802f452:	f04f 0300 	mov.w	r3, #0
 802f456:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 802f45a:	4648      	mov	r0, r9
 802f45c:	01c3      	lsls	r3, r0, #7
 802f45e:	4640      	mov	r0, r8
 802f460:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802f464:	4640      	mov	r0, r8
 802f466:	01c2      	lsls	r2, r0, #7
 802f468:	460a      	mov	r2, r1
 802f46a:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f46e:	fb02 f303 	mul.w	r3, r2, r3
 802f472:	3307      	adds	r3, #7
 802f474:	08db      	lsrs	r3, r3, #3
 802f476:	00db      	lsls	r3, r3, #3
 802f478:	ebad 0d03 	sub.w	sp, sp, r3
 802f47c:	ab04      	add	r3, sp, #16
 802f47e:	3303      	adds	r3, #3
 802f480:	089b      	lsrs	r3, r3, #2
 802f482:	009b      	lsls	r3, r3, #2
 802f484:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f488:	f102 0214 	add.w	r2, r2, #20
 802f48c:	6013      	str	r3, [r2, #0]
 802f48e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f492:	f103 031c 	add.w	r3, r3, #28
 802f496:	6819      	ldr	r1, [r3, #0]
 802f498:	1e4b      	subs	r3, r1, #1
 802f49a:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f49e:	f102 0210 	add.w	r2, r2, #16
 802f4a2:	6013      	str	r3, [r2, #0]
 802f4a4:	460a      	mov	r2, r1
 802f4a6:	2300      	movs	r3, #0
 802f4a8:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 802f4ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 802f4b0:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 802f4b4:	4642      	mov	r2, r8
 802f4b6:	464b      	mov	r3, r9
 802f4b8:	1890      	adds	r0, r2, r2
 802f4ba:	64b8      	str	r0, [r7, #72]	@ 0x48
 802f4bc:	415b      	adcs	r3, r3
 802f4be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802f4c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 802f4c4:	4640      	mov	r0, r8
 802f4c6:	1815      	adds	r5, r2, r0
 802f4c8:	4648      	mov	r0, r9
 802f4ca:	eb43 0000 	adc.w	r0, r3, r0
 802f4ce:	4606      	mov	r6, r0
 802f4d0:	f04f 0200 	mov.w	r2, #0
 802f4d4:	f04f 0300 	mov.w	r3, #0
 802f4d8:	00f3      	lsls	r3, r6, #3
 802f4da:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 802f4de:	00ea      	lsls	r2, r5, #3
 802f4e0:	18a8      	adds	r0, r5, r2
 802f4e2:	6438      	str	r0, [r7, #64]	@ 0x40
 802f4e4:	eb46 0303 	adc.w	r3, r6, r3
 802f4e8:	647b      	str	r3, [r7, #68]	@ 0x44
 802f4ea:	f04f 0200 	mov.w	r2, #0
 802f4ee:	f04f 0300 	mov.w	r3, #0
 802f4f2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 802f4f6:	4628      	mov	r0, r5
 802f4f8:	01c3      	lsls	r3, r0, #7
 802f4fa:	4620      	mov	r0, r4
 802f4fc:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802f500:	4620      	mov	r0, r4
 802f502:	01c2      	lsls	r2, r0, #7
 802f504:	460a      	mov	r2, r1
 802f506:	2300      	movs	r3, #0
 802f508:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 802f50c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 802f510:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 802f514:	4622      	mov	r2, r4
 802f516:	462b      	mov	r3, r5
 802f518:	1890      	adds	r0, r2, r2
 802f51a:	63b8      	str	r0, [r7, #56]	@ 0x38
 802f51c:	415b      	adcs	r3, r3
 802f51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802f520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 802f524:	4620      	mov	r0, r4
 802f526:	1810      	adds	r0, r2, r0
 802f528:	6338      	str	r0, [r7, #48]	@ 0x30
 802f52a:	4628      	mov	r0, r5
 802f52c:	eb43 0000 	adc.w	r0, r3, r0
 802f530:	6378      	str	r0, [r7, #52]	@ 0x34
 802f532:	f04f 0200 	mov.w	r2, #0
 802f536:	f04f 0300 	mov.w	r3, #0
 802f53a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 802f53e:	4628      	mov	r0, r5
 802f540:	00c3      	lsls	r3, r0, #3
 802f542:	4620      	mov	r0, r4
 802f544:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 802f548:	4620      	mov	r0, r4
 802f54a:	00c2      	lsls	r2, r0, #3
 802f54c:	4620      	mov	r0, r4
 802f54e:	1880      	adds	r0, r0, r2
 802f550:	62b8      	str	r0, [r7, #40]	@ 0x28
 802f552:	4628      	mov	r0, r5
 802f554:	eb43 0000 	adc.w	r0, r3, r0
 802f558:	62f8      	str	r0, [r7, #44]	@ 0x2c
 802f55a:	f04f 0200 	mov.w	r2, #0
 802f55e:	f04f 0300 	mov.w	r3, #0
 802f562:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 802f566:	4628      	mov	r0, r5
 802f568:	01c3      	lsls	r3, r0, #7
 802f56a:	4620      	mov	r0, r4
 802f56c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802f570:	4620      	mov	r0, r4
 802f572:	01c2      	lsls	r2, r0, #7
 802f574:	460a      	mov	r2, r1
 802f576:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f57a:	fb02 f303 	mul.w	r3, r2, r3
 802f57e:	3307      	adds	r3, #7
 802f580:	08db      	lsrs	r3, r3, #3
 802f582:	00db      	lsls	r3, r3, #3
 802f584:	ebad 0d03 	sub.w	sp, sp, r3
 802f588:	ab04      	add	r3, sp, #16
 802f58a:	3303      	adds	r3, #3
 802f58c:	089b      	lsrs	r3, r3, #2
 802f58e:	009b      	lsls	r3, r3, #2
 802f590:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f594:	f102 020c 	add.w	r2, r2, #12
 802f598:	6013      	str	r3, [r2, #0]
    jacQ1[0] = xyT1;
 802f59a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f59e:	f103 0314 	add.w	r3, r3, #20
 802f5a2:	681a      	ldr	r2, [r3, #0]
 802f5a4:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f5a8:	f103 0320 	add.w	r3, r3, #32
 802f5ac:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 802f5b0:	4610      	mov	r0, r2
 802f5b2:	4619      	mov	r1, r3
 802f5b4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f5b8:	461a      	mov	r2, r3
 802f5ba:	f006 fbf0 	bl	8035d9e <memcpy>
    jacQ2[0] = xyT2;
 802f5be:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f5c2:	f103 030c 	add.w	r3, r3, #12
 802f5c6:	681a      	ldr	r2, [r3, #0]
 802f5c8:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f5cc:	f103 0320 	add.w	r3, r3, #32
 802f5d0:	f2a3 7334 	subw	r3, r3, #1844	@ 0x734
 802f5d4:	4610      	mov	r0, r2
 802f5d6:	4619      	mov	r1, r3
 802f5d8:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f5dc:	461a      	mov	r2, r3
 802f5de:	f006 fbde 	bl	8035d9e <memcpy>
    while (todo[current] != 1) {
 802f5e2:	e108      	b.n	802f7f6 <_theta_chain_compute_impl+0x906>
        assert(todo[current] >= 2);
 802f5e4:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f5e8:	f103 031c 	add.w	r3, r3, #28
 802f5ec:	681a      	ldr	r2, [r3, #0]
 802f5ee:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f5f2:	f103 0314 	add.w	r3, r3, #20
 802f5f6:	681b      	ldr	r3, [r3, #0]
 802f5f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802f5fc:	2b01      	cmp	r3, #1
 802f5fe:	d806      	bhi.n	802f60e <_theta_chain_compute_impl+0x71e>
 802f600:	4b3c      	ldr	r3, [pc, #240]	@ (802f6f4 <_theta_chain_compute_impl+0x804>)
 802f602:	4a3d      	ldr	r2, [pc, #244]	@ (802f6f8 <_theta_chain_compute_impl+0x808>)
 802f604:	f240 4154 	movw	r1, #1108	@ 0x454
 802f608:	483c      	ldr	r0, [pc, #240]	@ (802f6fc <_theta_chain_compute_impl+0x80c>)
 802f60a:	f005 fe15 	bl	8035238 <__assert_func>
        ++current;
 802f60e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f612:	f103 0314 	add.w	r3, r3, #20
 802f616:	681b      	ldr	r3, [r3, #0]
 802f618:	3301      	adds	r3, #1
 802f61a:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f61e:	f102 0214 	add.w	r2, r2, #20
 802f622:	6013      	str	r3, [r2, #0]
        assert(current < space);
 802f624:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f628:	f103 0314 	add.w	r3, r3, #20
 802f62c:	681a      	ldr	r2, [r3, #0]
 802f62e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f632:	f103 031c 	add.w	r3, r3, #28
 802f636:	681b      	ldr	r3, [r3, #0]
 802f638:	429a      	cmp	r2, r3
 802f63a:	db06      	blt.n	802f64a <_theta_chain_compute_impl+0x75a>
 802f63c:	4b30      	ldr	r3, [pc, #192]	@ (802f700 <_theta_chain_compute_impl+0x810>)
 802f63e:	4a2e      	ldr	r2, [pc, #184]	@ (802f6f8 <_theta_chain_compute_impl+0x808>)
 802f640:	f240 4156 	movw	r1, #1110	@ 0x456
 802f644:	482d      	ldr	r0, [pc, #180]	@ (802f6fc <_theta_chain_compute_impl+0x80c>)
 802f646:	f005 fdf7 	bl	8035238 <__assert_func>
        // the gluing isogeny is quite a bit more expensive than the others,
        // so we adjust the usual splitting rule here a little bit: towards
        // the end of the doubling chain it will be cheaper to recompute the
        // doublings after evaluation than to push the intermediate points.
        const unsigned num_dbls = todo[current - 1] >= 16 ? todo[current - 1] / 2 : todo[current - 1] - 1;
 802f64a:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f64e:	f103 0314 	add.w	r3, r3, #20
 802f652:	681b      	ldr	r3, [r3, #0]
 802f654:	1e5a      	subs	r2, r3, #1
 802f656:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f65a:	f103 031c 	add.w	r3, r3, #28
 802f65e:	681b      	ldr	r3, [r3, #0]
 802f660:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802f664:	2b0f      	cmp	r3, #15
 802f666:	d90f      	bls.n	802f688 <_theta_chain_compute_impl+0x798>
 802f668:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f66c:	f103 0314 	add.w	r3, r3, #20
 802f670:	681b      	ldr	r3, [r3, #0]
 802f672:	1e5a      	subs	r2, r3, #1
 802f674:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f678:	f103 031c 	add.w	r3, r3, #28
 802f67c:	681b      	ldr	r3, [r3, #0]
 802f67e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802f682:	085b      	lsrs	r3, r3, #1
 802f684:	b29b      	uxth	r3, r3
 802f686:	e00d      	b.n	802f6a4 <_theta_chain_compute_impl+0x7b4>
 802f688:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f68c:	f103 0314 	add.w	r3, r3, #20
 802f690:	681b      	ldr	r3, [r3, #0]
 802f692:	1e5a      	subs	r2, r3, #1
 802f694:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f698:	f103 031c 	add.w	r3, r3, #28
 802f69c:	681b      	ldr	r3, [r3, #0]
 802f69e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802f6a2:	3b01      	subs	r3, #1
 802f6a4:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802f6a8:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 802f6ac:	6013      	str	r3, [r2, #0]
        assert(num_dbls && num_dbls < todo[current - 1]);
 802f6ae:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802f6b2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 802f6b6:	681b      	ldr	r3, [r3, #0]
 802f6b8:	2b00      	cmp	r3, #0
 802f6ba:	d014      	beq.n	802f6e6 <_theta_chain_compute_impl+0x7f6>
 802f6bc:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f6c0:	f103 0314 	add.w	r3, r3, #20
 802f6c4:	681b      	ldr	r3, [r3, #0]
 802f6c6:	1e5a      	subs	r2, r3, #1
 802f6c8:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f6cc:	f103 031c 	add.w	r3, r3, #28
 802f6d0:	681b      	ldr	r3, [r3, #0]
 802f6d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802f6d6:	461a      	mov	r2, r3
 802f6d8:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802f6dc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 802f6e0:	681b      	ldr	r3, [r3, #0]
 802f6e2:	4293      	cmp	r3, r2
 802f6e4:	d310      	bcc.n	802f708 <_theta_chain_compute_impl+0x818>
 802f6e6:	4b07      	ldr	r3, [pc, #28]	@ (802f704 <_theta_chain_compute_impl+0x814>)
 802f6e8:	4a03      	ldr	r2, [pc, #12]	@ (802f6f8 <_theta_chain_compute_impl+0x808>)
 802f6ea:	f240 415c 	movw	r1, #1116	@ 0x45c
 802f6ee:	4803      	ldr	r0, [pc, #12]	@ (802f6fc <_theta_chain_compute_impl+0x80c>)
 802f6f0:	f005 fda2 	bl	8035238 <__assert_func>
 802f6f4:	080392f0 	.word	0x080392f0
 802f6f8:	0803911c 	.word	0x0803911c
 802f6fc:	08039120 	.word	0x08039120
 802f700:	08039304 	.word	0x08039304
 802f704:	08039314 	.word	0x08039314
        double_couple_jac_point_iter(&jacQ1[current], num_dbls, &jacQ1[current - 1], E12);
 802f708:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f70c:	f103 0314 	add.w	r3, r3, #20
 802f710:	681a      	ldr	r2, [r3, #0]
 802f712:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f716:	fb03 f202 	mul.w	r2, r3, r2
 802f71a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f71e:	f103 0314 	add.w	r3, r3, #20
 802f722:	681b      	ldr	r3, [r3, #0]
 802f724:	1898      	adds	r0, r3, r2
 802f726:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f72a:	f103 0314 	add.w	r3, r3, #20
 802f72e:	681b      	ldr	r3, [r3, #0]
 802f730:	1e5a      	subs	r2, r3, #1
 802f732:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f736:	fb03 f202 	mul.w	r2, r3, r2
 802f73a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f73e:	f103 0314 	add.w	r3, r3, #20
 802f742:	681b      	ldr	r3, [r3, #0]
 802f744:	441a      	add	r2, r3
 802f746:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f74a:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 802f74e:	681b      	ldr	r3, [r3, #0]
 802f750:	f507 5121 	add.w	r1, r7, #10304	@ 0x2840
 802f754:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 802f758:	6809      	ldr	r1, [r1, #0]
 802f75a:	f7ea fa16 	bl	8019b8a <double_couple_jac_point_iter>
        double_couple_jac_point_iter(&jacQ2[current], num_dbls, &jacQ2[current - 1], E12);
 802f75e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f762:	f103 0314 	add.w	r3, r3, #20
 802f766:	681a      	ldr	r2, [r3, #0]
 802f768:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f76c:	fb03 f202 	mul.w	r2, r3, r2
 802f770:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f774:	f103 030c 	add.w	r3, r3, #12
 802f778:	681b      	ldr	r3, [r3, #0]
 802f77a:	1898      	adds	r0, r3, r2
 802f77c:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f780:	f103 0314 	add.w	r3, r3, #20
 802f784:	681b      	ldr	r3, [r3, #0]
 802f786:	1e5a      	subs	r2, r3, #1
 802f788:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 802f78c:	fb03 f202 	mul.w	r2, r3, r2
 802f790:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f794:	f103 030c 	add.w	r3, r3, #12
 802f798:	681b      	ldr	r3, [r3, #0]
 802f79a:	441a      	add	r2, r3
 802f79c:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802f7a0:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 802f7a4:	681b      	ldr	r3, [r3, #0]
 802f7a6:	f507 5121 	add.w	r1, r7, #10304	@ 0x2840
 802f7aa:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 802f7ae:	6809      	ldr	r1, [r1, #0]
 802f7b0:	f7ea f9eb 	bl	8019b8a <double_couple_jac_point_iter>
        todo[current] = todo[current - 1] - num_dbls;
 802f7b4:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f7b8:	f103 0314 	add.w	r3, r3, #20
 802f7bc:	681b      	ldr	r3, [r3, #0]
 802f7be:	1e5a      	subs	r2, r3, #1
 802f7c0:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f7c4:	f103 031c 	add.w	r3, r3, #28
 802f7c8:	681b      	ldr	r3, [r3, #0]
 802f7ca:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802f7ce:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802f7d2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 802f7d6:	681b      	ldr	r3, [r3, #0]
 802f7d8:	b29b      	uxth	r3, r3
 802f7da:	1ad3      	subs	r3, r2, r3
 802f7dc:	b29b      	uxth	r3, r3
 802f7de:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f7e2:	f102 021c 	add.w	r2, r2, #28
 802f7e6:	6811      	ldr	r1, [r2, #0]
 802f7e8:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f7ec:	f102 0214 	add.w	r2, r2, #20
 802f7f0:	6812      	ldr	r2, [r2, #0]
 802f7f2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    while (todo[current] != 1) {
 802f7f6:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f7fa:	f103 031c 	add.w	r3, r3, #28
 802f7fe:	681a      	ldr	r2, [r3, #0]
 802f800:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f804:	f103 0314 	add.w	r3, r3, #20
 802f808:	681b      	ldr	r3, [r3, #0]
 802f80a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802f80e:	2b01      	cmp	r3, #1
 802f810:	f47f aee8 	bne.w	802f5e4 <_theta_chain_compute_impl+0x6f4>
    }

    // kernel points for the remaining isogeny steps
    theta_point_t thetaQ1[space], thetaQ2[space];
 802f814:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f818:	f103 031c 	add.w	r3, r3, #28
 802f81c:	681c      	ldr	r4, [r3, #0]
 802f81e:	1e63      	subs	r3, r4, #1
 802f820:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f824:	f102 0208 	add.w	r2, r2, #8
 802f828:	6013      	str	r3, [r2, #0]
 802f82a:	4622      	mov	r2, r4
 802f82c:	2300      	movs	r3, #0
 802f82e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 802f832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802f836:	e9d7 5622 	ldrd	r5, r6, [r7, #136]	@ 0x88
 802f83a:	462a      	mov	r2, r5
 802f83c:	4633      	mov	r3, r6
 802f83e:	f04f 0000 	mov.w	r0, #0
 802f842:	f04f 0100 	mov.w	r1, #0
 802f846:	00d9      	lsls	r1, r3, #3
 802f848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802f84c:	00d0      	lsls	r0, r2, #3
 802f84e:	4602      	mov	r2, r0
 802f850:	460b      	mov	r3, r1
 802f852:	4629      	mov	r1, r5
 802f854:	1851      	adds	r1, r2, r1
 802f856:	6239      	str	r1, [r7, #32]
 802f858:	4631      	mov	r1, r6
 802f85a:	eb43 0101 	adc.w	r1, r3, r1
 802f85e:	6279      	str	r1, [r7, #36]	@ 0x24
 802f860:	f04f 0200 	mov.w	r2, #0
 802f864:	f04f 0300 	mov.w	r3, #0
 802f868:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 802f86c:	4631      	mov	r1, r6
 802f86e:	020b      	lsls	r3, r1, #8
 802f870:	4629      	mov	r1, r5
 802f872:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 802f876:	4629      	mov	r1, r5
 802f878:	020a      	lsls	r2, r1, #8
 802f87a:	4622      	mov	r2, r4
 802f87c:	2300      	movs	r3, #0
 802f87e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 802f882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802f886:	e9d7 5620 	ldrd	r5, r6, [r7, #128]	@ 0x80
 802f88a:	462a      	mov	r2, r5
 802f88c:	4633      	mov	r3, r6
 802f88e:	f04f 0000 	mov.w	r0, #0
 802f892:	f04f 0100 	mov.w	r1, #0
 802f896:	00d9      	lsls	r1, r3, #3
 802f898:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802f89c:	00d0      	lsls	r0, r2, #3
 802f89e:	4602      	mov	r2, r0
 802f8a0:	460b      	mov	r3, r1
 802f8a2:	4629      	mov	r1, r5
 802f8a4:	1851      	adds	r1, r2, r1
 802f8a6:	61b9      	str	r1, [r7, #24]
 802f8a8:	4631      	mov	r1, r6
 802f8aa:	eb43 0101 	adc.w	r1, r3, r1
 802f8ae:	61f9      	str	r1, [r7, #28]
 802f8b0:	f04f 0200 	mov.w	r2, #0
 802f8b4:	f04f 0300 	mov.w	r3, #0
 802f8b8:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 802f8bc:	4631      	mov	r1, r6
 802f8be:	020b      	lsls	r3, r1, #8
 802f8c0:	4629      	mov	r1, r5
 802f8c2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 802f8c6:	4629      	mov	r1, r5
 802f8c8:	020a      	lsls	r2, r1, #8
 802f8ca:	4622      	mov	r2, r4
 802f8cc:	4613      	mov	r3, r2
 802f8ce:	00db      	lsls	r3, r3, #3
 802f8d0:	4413      	add	r3, r2
 802f8d2:	015b      	lsls	r3, r3, #5
 802f8d4:	3307      	adds	r3, #7
 802f8d6:	08db      	lsrs	r3, r3, #3
 802f8d8:	00db      	lsls	r3, r3, #3
 802f8da:	ebad 0d03 	sub.w	sp, sp, r3
 802f8de:	ab04      	add	r3, sp, #16
 802f8e0:	3303      	adds	r3, #3
 802f8e2:	089b      	lsrs	r3, r3, #2
 802f8e4:	009b      	lsls	r3, r3, #2
 802f8e6:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f8ea:	f102 0204 	add.w	r2, r2, #4
 802f8ee:	6013      	str	r3, [r2, #0]
 802f8f0:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f8f4:	f103 031c 	add.w	r3, r3, #28
 802f8f8:	681c      	ldr	r4, [r3, #0]
 802f8fa:	1e63      	subs	r3, r4, #1
 802f8fc:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802f900:	6013      	str	r3, [r2, #0]
 802f902:	4622      	mov	r2, r4
 802f904:	2300      	movs	r3, #0
 802f906:	67ba      	str	r2, [r7, #120]	@ 0x78
 802f908:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802f90a:	e9d7 561e 	ldrd	r5, r6, [r7, #120]	@ 0x78
 802f90e:	462a      	mov	r2, r5
 802f910:	4633      	mov	r3, r6
 802f912:	f04f 0000 	mov.w	r0, #0
 802f916:	f04f 0100 	mov.w	r1, #0
 802f91a:	00d9      	lsls	r1, r3, #3
 802f91c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802f920:	00d0      	lsls	r0, r2, #3
 802f922:	4602      	mov	r2, r0
 802f924:	460b      	mov	r3, r1
 802f926:	4629      	mov	r1, r5
 802f928:	1851      	adds	r1, r2, r1
 802f92a:	6139      	str	r1, [r7, #16]
 802f92c:	4631      	mov	r1, r6
 802f92e:	eb43 0101 	adc.w	r1, r3, r1
 802f932:	6179      	str	r1, [r7, #20]
 802f934:	f04f 0200 	mov.w	r2, #0
 802f938:	f04f 0300 	mov.w	r3, #0
 802f93c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 802f940:	4631      	mov	r1, r6
 802f942:	020b      	lsls	r3, r1, #8
 802f944:	4629      	mov	r1, r5
 802f946:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 802f94a:	4629      	mov	r1, r5
 802f94c:	020a      	lsls	r2, r1, #8
 802f94e:	4622      	mov	r2, r4
 802f950:	2300      	movs	r3, #0
 802f952:	673a      	str	r2, [r7, #112]	@ 0x70
 802f954:	677b      	str	r3, [r7, #116]	@ 0x74
 802f956:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 802f95a:	462a      	mov	r2, r5
 802f95c:	4633      	mov	r3, r6
 802f95e:	f04f 0000 	mov.w	r0, #0
 802f962:	f04f 0100 	mov.w	r1, #0
 802f966:	00d9      	lsls	r1, r3, #3
 802f968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802f96c:	00d0      	lsls	r0, r2, #3
 802f96e:	4602      	mov	r2, r0
 802f970:	460b      	mov	r3, r1
 802f972:	4629      	mov	r1, r5
 802f974:	1851      	adds	r1, r2, r1
 802f976:	60b9      	str	r1, [r7, #8]
 802f978:	4631      	mov	r1, r6
 802f97a:	eb43 0101 	adc.w	r1, r3, r1
 802f97e:	60f9      	str	r1, [r7, #12]
 802f980:	f04f 0200 	mov.w	r2, #0
 802f984:	f04f 0300 	mov.w	r3, #0
 802f988:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 802f98c:	4631      	mov	r1, r6
 802f98e:	020b      	lsls	r3, r1, #8
 802f990:	4629      	mov	r1, r5
 802f992:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 802f996:	4629      	mov	r1, r5
 802f998:	020a      	lsls	r2, r1, #8
 802f99a:	4622      	mov	r2, r4
 802f99c:	4613      	mov	r3, r2
 802f99e:	00db      	lsls	r3, r3, #3
 802f9a0:	4413      	add	r3, r2
 802f9a2:	015b      	lsls	r3, r3, #5
 802f9a4:	3307      	adds	r3, #7
 802f9a6:	08db      	lsrs	r3, r3, #3
 802f9a8:	00db      	lsls	r3, r3, #3
 802f9aa:	ebad 0d03 	sub.w	sp, sp, r3
 802f9ae:	ab04      	add	r3, sp, #16
 802f9b0:	3303      	adds	r3, #3
 802f9b2:	089b      	lsrs	r3, r3, #2
 802f9b4:	009b      	lsls	r3, r3, #2
 802f9b6:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802f9ba:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 802f9be:	6013      	str	r3, [r2, #0]

    // the gluing step
    theta_gluing_t first_step;
    {
        assert(todo[current] == 1);
 802f9c0:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802f9c4:	f103 031c 	add.w	r3, r3, #28
 802f9c8:	681b      	ldr	r3, [r3, #0]
 802f9ca:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802f9ce:	f102 0214 	add.w	r2, r2, #20
 802f9d2:	6812      	ldr	r2, [r2, #0]
 802f9d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802f9d8:	2b01      	cmp	r3, #1
 802f9da:	d006      	beq.n	802f9ea <_theta_chain_compute_impl+0xafa>
 802f9dc:	4bc9      	ldr	r3, [pc, #804]	@ (802fd04 <_theta_chain_compute_impl+0xe14>)
 802f9de:	4aca      	ldr	r2, [pc, #808]	@ (802fd08 <_theta_chain_compute_impl+0xe18>)
 802f9e0:	f44f 618d 	mov.w	r1, #1128	@ 0x468
 802f9e4:	48c9      	ldr	r0, [pc, #804]	@ (802fd0c <_theta_chain_compute_impl+0xe1c>)
 802f9e6:	f005 fc27 	bl	8035238 <__assert_func>

        // compute the gluing isogeny
        if (!gluing_compute(&first_step, E12, &jacQ1[current], &jacQ2[current], verify))
 802f9ea:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802f9ee:	f103 0314 	add.w	r3, r3, #20
 802f9f2:	681b      	ldr	r3, [r3, #0]
 802f9f4:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 802f9f8:	fb02 f303 	mul.w	r3, r2, r3
 802f9fc:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fa00:	f102 0214 	add.w	r2, r2, #20
 802fa04:	6812      	ldr	r2, [r2, #0]
 802fa06:	18d4      	adds	r4, r2, r3
 802fa08:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fa0c:	f103 0314 	add.w	r3, r3, #20
 802fa10:	681b      	ldr	r3, [r3, #0]
 802fa12:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 802fa16:	fb02 f303 	mul.w	r3, r2, r3
 802fa1a:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fa1e:	f102 020c 	add.w	r2, r2, #12
 802fa22:	6812      	ldr	r2, [r2, #0]
 802fa24:	441a      	add	r2, r3
 802fa26:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802fa2a:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 802fa2e:	f507 5099 	add.w	r0, r7, #4896	@ 0x1320
 802fa32:	381c      	subs	r0, #28
 802fa34:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802fa38:	f103 0314 	add.w	r3, r3, #20
 802fa3c:	781b      	ldrb	r3, [r3, #0]
 802fa3e:	9300      	str	r3, [sp, #0]
 802fa40:	4613      	mov	r3, r2
 802fa42:	4622      	mov	r2, r4
 802fa44:	6809      	ldr	r1, [r1, #0]
 802fa46:	f7fd fc57 	bl	802d2f8 <gluing_compute>
 802fa4a:	4603      	mov	r3, r0
 802fa4c:	2b00      	cmp	r3, #0
 802fa4e:	d102      	bne.n	802fa56 <_theta_chain_compute_impl+0xb66>
            return 0;
 802fa50:	2300      	movs	r3, #0
 802fa52:	f000 be1c 	b.w	803068e <_theta_chain_compute_impl+0x179e>

        // evaluate
        for (unsigned j = 0; j < numP; ++j) {
 802fa56:	2300      	movs	r3, #0
 802fa58:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fa5c:	f102 0210 	add.w	r2, r2, #16
 802fa60:	6013      	str	r3, [r2, #0]
 802fa62:	e069      	b.n	802fb38 <_theta_chain_compute_impl+0xc48>
            assert(ec_is_zero(&P12[j].P1) || ec_is_zero(&P12[j].P2));
 802fa64:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fa68:	f103 0310 	add.w	r3, r3, #16
 802fa6c:	681a      	ldr	r2, [r3, #0]
 802fa6e:	4613      	mov	r3, r2
 802fa70:	00db      	lsls	r3, r3, #3
 802fa72:	4413      	add	r3, r2
 802fa74:	015b      	lsls	r3, r3, #5
 802fa76:	461a      	mov	r2, r3
 802fa78:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802fa7c:	f103 030c 	add.w	r3, r3, #12
 802fa80:	681b      	ldr	r3, [r3, #0]
 802fa82:	4413      	add	r3, r2
 802fa84:	4618      	mov	r0, r3
 802fa86:	f7db fdce 	bl	800b626 <ec_is_zero>
 802fa8a:	4603      	mov	r3, r0
 802fa8c:	2b00      	cmp	r3, #0
 802fa8e:	d11d      	bne.n	802facc <_theta_chain_compute_impl+0xbdc>
 802fa90:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fa94:	f103 0310 	add.w	r3, r3, #16
 802fa98:	681a      	ldr	r2, [r3, #0]
 802fa9a:	4613      	mov	r3, r2
 802fa9c:	00db      	lsls	r3, r3, #3
 802fa9e:	4413      	add	r3, r2
 802faa0:	015b      	lsls	r3, r3, #5
 802faa2:	461a      	mov	r2, r3
 802faa4:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802faa8:	f103 030c 	add.w	r3, r3, #12
 802faac:	681b      	ldr	r3, [r3, #0]
 802faae:	4413      	add	r3, r2
 802fab0:	3390      	adds	r3, #144	@ 0x90
 802fab2:	4618      	mov	r0, r3
 802fab4:	f7db fdb7 	bl	800b626 <ec_is_zero>
 802fab8:	4603      	mov	r3, r0
 802faba:	2b00      	cmp	r3, #0
 802fabc:	d106      	bne.n	802facc <_theta_chain_compute_impl+0xbdc>
 802fabe:	4b94      	ldr	r3, [pc, #592]	@ (802fd10 <_theta_chain_compute_impl+0xe20>)
 802fac0:	4a91      	ldr	r2, [pc, #580]	@ (802fd08 <_theta_chain_compute_impl+0xe18>)
 802fac2:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 802fac6:	4891      	ldr	r0, [pc, #580]	@ (802fd0c <_theta_chain_compute_impl+0xe1c>)
 802fac8:	f005 fbb6 	bl	8035238 <__assert_func>
            if (!gluing_eval_point_special_case(&pts[j], &P12[j], &first_step))
 802facc:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fad0:	f103 0310 	add.w	r3, r3, #16
 802fad4:	681a      	ldr	r2, [r3, #0]
 802fad6:	4613      	mov	r3, r2
 802fad8:	00db      	lsls	r3, r3, #3
 802fada:	4413      	add	r3, r2
 802fadc:	015b      	lsls	r3, r3, #5
 802fade:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fae2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 802fae6:	6812      	ldr	r2, [r2, #0]
 802fae8:	18d0      	adds	r0, r2, r3
 802faea:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802faee:	f103 0310 	add.w	r3, r3, #16
 802faf2:	681a      	ldr	r2, [r3, #0]
 802faf4:	4613      	mov	r3, r2
 802faf6:	00db      	lsls	r3, r3, #3
 802faf8:	4413      	add	r3, r2
 802fafa:	015b      	lsls	r3, r3, #5
 802fafc:	461a      	mov	r2, r3
 802fafe:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802fb02:	f103 030c 	add.w	r3, r3, #12
 802fb06:	681b      	ldr	r3, [r3, #0]
 802fb08:	1899      	adds	r1, r3, r2
 802fb0a:	f507 5399 	add.w	r3, r7, #4896	@ 0x1320
 802fb0e:	3b1c      	subs	r3, #28
 802fb10:	461a      	mov	r2, r3
 802fb12:	f7fe f824 	bl	802db5e <gluing_eval_point_special_case>
 802fb16:	4603      	mov	r3, r0
 802fb18:	2b00      	cmp	r3, #0
 802fb1a:	d102      	bne.n	802fb22 <_theta_chain_compute_impl+0xc32>
                return 0;
 802fb1c:	2300      	movs	r3, #0
 802fb1e:	f000 bdb6 	b.w	803068e <_theta_chain_compute_impl+0x179e>
        for (unsigned j = 0; j < numP; ++j) {
 802fb22:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fb26:	f103 0310 	add.w	r3, r3, #16
 802fb2a:	681b      	ldr	r3, [r3, #0]
 802fb2c:	3301      	adds	r3, #1
 802fb2e:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fb32:	f102 0210 	add.w	r2, r2, #16
 802fb36:	6013      	str	r3, [r2, #0]
 802fb38:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fb3c:	f103 0310 	add.w	r3, r3, #16
 802fb40:	681a      	ldr	r2, [r3, #0]
 802fb42:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802fb46:	f103 0310 	add.w	r3, r3, #16
 802fb4a:	681b      	ldr	r3, [r3, #0]
 802fb4c:	429a      	cmp	r2, r3
 802fb4e:	d389      	bcc.n	802fa64 <_theta_chain_compute_impl+0xb74>
        }

        // push kernel points through gluing isogeny
        for (int j = 0; j < current; ++j) {
 802fb50:	2300      	movs	r3, #0
 802fb52:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fb56:	f102 020c 	add.w	r2, r2, #12
 802fb5a:	6013      	str	r3, [r2, #0]
 802fb5c:	e068      	b.n	802fc30 <_theta_chain_compute_impl+0xd40>
            gluing_eval_basis(&thetaQ1[j], &thetaQ2[j], &jacQ1[j], &jacQ2[j], &first_step);
 802fb5e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fb62:	f103 030c 	add.w	r3, r3, #12
 802fb66:	681a      	ldr	r2, [r3, #0]
 802fb68:	4613      	mov	r3, r2
 802fb6a:	00db      	lsls	r3, r3, #3
 802fb6c:	4413      	add	r3, r2
 802fb6e:	015b      	lsls	r3, r3, #5
 802fb70:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fb74:	f102 0204 	add.w	r2, r2, #4
 802fb78:	6812      	ldr	r2, [r2, #0]
 802fb7a:	18d0      	adds	r0, r2, r3
 802fb7c:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fb80:	f103 030c 	add.w	r3, r3, #12
 802fb84:	681a      	ldr	r2, [r3, #0]
 802fb86:	4613      	mov	r3, r2
 802fb88:	00db      	lsls	r3, r3, #3
 802fb8a:	4413      	add	r3, r2
 802fb8c:	015b      	lsls	r3, r3, #5
 802fb8e:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802fb92:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 802fb96:	6812      	ldr	r2, [r2, #0]
 802fb98:	18d1      	adds	r1, r2, r3
 802fb9a:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fb9e:	f103 030c 	add.w	r3, r3, #12
 802fba2:	681b      	ldr	r3, [r3, #0]
 802fba4:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 802fba8:	fb02 f303 	mul.w	r3, r2, r3
 802fbac:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fbb0:	f102 0214 	add.w	r2, r2, #20
 802fbb4:	6812      	ldr	r2, [r2, #0]
 802fbb6:	18d4      	adds	r4, r2, r3
 802fbb8:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fbbc:	f103 030c 	add.w	r3, r3, #12
 802fbc0:	681b      	ldr	r3, [r3, #0]
 802fbc2:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 802fbc6:	fb02 f303 	mul.w	r3, r2, r3
 802fbca:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fbce:	f102 020c 	add.w	r2, r2, #12
 802fbd2:	6812      	ldr	r2, [r2, #0]
 802fbd4:	441a      	add	r2, r3
 802fbd6:	f507 5399 	add.w	r3, r7, #4896	@ 0x1320
 802fbda:	3b1c      	subs	r3, #28
 802fbdc:	9300      	str	r3, [sp, #0]
 802fbde:	4613      	mov	r3, r2
 802fbe0:	4622      	mov	r2, r4
 802fbe2:	f7fe f843 	bl	802dc6c <gluing_eval_basis>
            --todo[j];
 802fbe6:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802fbea:	f103 031c 	add.w	r3, r3, #28
 802fbee:	681b      	ldr	r3, [r3, #0]
 802fbf0:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fbf4:	f102 020c 	add.w	r2, r2, #12
 802fbf8:	6812      	ldr	r2, [r2, #0]
 802fbfa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802fbfe:	3b01      	subs	r3, #1
 802fc00:	b299      	uxth	r1, r3
 802fc02:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802fc06:	f103 031c 	add.w	r3, r3, #28
 802fc0a:	681b      	ldr	r3, [r3, #0]
 802fc0c:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fc10:	f102 020c 	add.w	r2, r2, #12
 802fc14:	6812      	ldr	r2, [r2, #0]
 802fc16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int j = 0; j < current; ++j) {
 802fc1a:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fc1e:	f103 030c 	add.w	r3, r3, #12
 802fc22:	681b      	ldr	r3, [r3, #0]
 802fc24:	3301      	adds	r3, #1
 802fc26:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fc2a:	f102 020c 	add.w	r2, r2, #12
 802fc2e:	6013      	str	r3, [r2, #0]
 802fc30:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fc34:	f103 030c 	add.w	r3, r3, #12
 802fc38:	681a      	ldr	r2, [r3, #0]
 802fc3a:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fc3e:	f103 0314 	add.w	r3, r3, #20
 802fc42:	681b      	ldr	r3, [r3, #0]
 802fc44:	429a      	cmp	r2, r3
 802fc46:	db8a      	blt.n	802fb5e <_theta_chain_compute_impl+0xc6e>
        }

        --current;
 802fc48:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fc4c:	f103 0314 	add.w	r3, r3, #20
 802fc50:	681b      	ldr	r3, [r3, #0]
 802fc52:	3b01      	subs	r3, #1
 802fc54:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fc58:	f102 0214 	add.w	r2, r2, #20
 802fc5c:	6013      	str	r3, [r2, #0]
    }

    // set-up the theta_structure for the first codomain
    theta.null_point = first_step.codomain;
 802fc5e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fc62:	f103 0320 	add.w	r3, r3, #32
 802fc66:	f5a3 7275 	sub.w	r2, r3, #980	@ 0x3d4
 802fc6a:	f507 53c7 	add.w	r3, r7, #6368	@ 0x18e0
 802fc6e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 802fc72:	4610      	mov	r0, r2
 802fc74:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 802fc78:	f44f 7290 	mov.w	r2, #288	@ 0x120
 802fc7c:	4619      	mov	r1, r3
 802fc7e:	f006 f88e 	bl	8035d9e <memcpy>
    theta.precomputation = 0;
 802fc82:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fc86:	f103 0320 	add.w	r3, r3, #32
 802fc8a:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 802fc8e:	2200      	movs	r2, #0
 802fc90:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    theta_precomputation(&theta);
 802fc94:	f507 5314 	add.w	r3, r7, #9472	@ 0x2500
 802fc98:	f103 030c 	add.w	r3, r3, #12
 802fc9c:	4618      	mov	r0, r3
 802fc9e:	f000 fe26 	bl	80308ee <theta_precomputation>

    theta_isogeny_t step;

    // and now we do the remaining steps
    for (unsigned i = 1; current >= 0 && todo[current]; ++i) {
 802fca2:	2301      	movs	r3, #1
 802fca4:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fca8:	f102 0208 	add.w	r2, r2, #8
 802fcac:	6013      	str	r3, [r2, #0]
 802fcae:	e2e5      	b.n	803027c <_theta_chain_compute_impl+0x138c>
        assert(current < space);
 802fcb0:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fcb4:	f103 0314 	add.w	r3, r3, #20
 802fcb8:	681a      	ldr	r2, [r3, #0]
 802fcba:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fcbe:	f103 031c 	add.w	r3, r3, #28
 802fcc2:	681b      	ldr	r3, [r3, #0]
 802fcc4:	429a      	cmp	r2, r3
 802fcc6:	f2c0 80f3 	blt.w	802feb0 <_theta_chain_compute_impl+0xfc0>
 802fcca:	4b12      	ldr	r3, [pc, #72]	@ (802fd14 <_theta_chain_compute_impl+0xe24>)
 802fccc:	4a0e      	ldr	r2, [pc, #56]	@ (802fd08 <_theta_chain_compute_impl+0xe18>)
 802fcce:	f240 4187 	movw	r1, #1159	@ 0x487
 802fcd2:	480e      	ldr	r0, [pc, #56]	@ (802fd0c <_theta_chain_compute_impl+0xe1c>)
 802fcd4:	f005 fab0 	bl	8035238 <__assert_func>
        while (todo[current] != 1) {
            assert(todo[current] >= 2);
 802fcd8:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802fcdc:	f103 031c 	add.w	r3, r3, #28
 802fce0:	681b      	ldr	r3, [r3, #0]
 802fce2:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fce6:	f102 0214 	add.w	r2, r2, #20
 802fcea:	6812      	ldr	r2, [r2, #0]
 802fcec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802fcf0:	2b01      	cmp	r3, #1
 802fcf2:	d813      	bhi.n	802fd1c <_theta_chain_compute_impl+0xe2c>
 802fcf4:	4b08      	ldr	r3, [pc, #32]	@ (802fd18 <_theta_chain_compute_impl+0xe28>)
 802fcf6:	4a04      	ldr	r2, [pc, #16]	@ (802fd08 <_theta_chain_compute_impl+0xe18>)
 802fcf8:	f240 4189 	movw	r1, #1161	@ 0x489
 802fcfc:	4803      	ldr	r0, [pc, #12]	@ (802fd0c <_theta_chain_compute_impl+0xe1c>)
 802fcfe:	f005 fa9b 	bl	8035238 <__assert_func>
 802fd02:	bf00      	nop
 802fd04:	08039340 	.word	0x08039340
 802fd08:	0803911c 	.word	0x0803911c
 802fd0c:	08039120 	.word	0x08039120
 802fd10:	08039354 	.word	0x08039354
 802fd14:	08039304 	.word	0x08039304
 802fd18:	080392f0 	.word	0x080392f0
            ++current;
 802fd1c:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fd20:	f103 0314 	add.w	r3, r3, #20
 802fd24:	681b      	ldr	r3, [r3, #0]
 802fd26:	3301      	adds	r3, #1
 802fd28:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fd2c:	f102 0214 	add.w	r2, r2, #20
 802fd30:	6013      	str	r3, [r2, #0]
            assert(current < space);
 802fd32:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fd36:	f103 0314 	add.w	r3, r3, #20
 802fd3a:	681a      	ldr	r2, [r3, #0]
 802fd3c:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fd40:	f103 031c 	add.w	r3, r3, #28
 802fd44:	681b      	ldr	r3, [r3, #0]
 802fd46:	429a      	cmp	r2, r3
 802fd48:	db06      	blt.n	802fd58 <_theta_chain_compute_impl+0xe68>
 802fd4a:	4bc7      	ldr	r3, [pc, #796]	@ (8030068 <_theta_chain_compute_impl+0x1178>)
 802fd4c:	4ac7      	ldr	r2, [pc, #796]	@ (803006c <_theta_chain_compute_impl+0x117c>)
 802fd4e:	f240 418b 	movw	r1, #1163	@ 0x48b
 802fd52:	48c7      	ldr	r0, [pc, #796]	@ (8030070 <_theta_chain_compute_impl+0x1180>)
 802fd54:	f005 fa70 	bl	8035238 <__assert_func>
            const unsigned num_dbls = todo[current - 1] / 2;
 802fd58:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fd5c:	f103 0314 	add.w	r3, r3, #20
 802fd60:	681b      	ldr	r3, [r3, #0]
 802fd62:	1e5a      	subs	r2, r3, #1
 802fd64:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802fd68:	f103 031c 	add.w	r3, r3, #28
 802fd6c:	681b      	ldr	r3, [r3, #0]
 802fd6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802fd72:	085b      	lsrs	r3, r3, #1
 802fd74:	b29b      	uxth	r3, r3
 802fd76:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802fd7a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 802fd7e:	6013      	str	r3, [r2, #0]
            assert(num_dbls && num_dbls < todo[current - 1]);
 802fd80:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802fd84:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 802fd88:	681b      	ldr	r3, [r3, #0]
 802fd8a:	2b00      	cmp	r3, #0
 802fd8c:	d014      	beq.n	802fdb8 <_theta_chain_compute_impl+0xec8>
 802fd8e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fd92:	f103 0314 	add.w	r3, r3, #20
 802fd96:	681b      	ldr	r3, [r3, #0]
 802fd98:	1e5a      	subs	r2, r3, #1
 802fd9a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802fd9e:	f103 031c 	add.w	r3, r3, #28
 802fda2:	681b      	ldr	r3, [r3, #0]
 802fda4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802fda8:	461a      	mov	r2, r3
 802fdaa:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802fdae:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 802fdb2:	681b      	ldr	r3, [r3, #0]
 802fdb4:	4293      	cmp	r3, r2
 802fdb6:	d306      	bcc.n	802fdc6 <_theta_chain_compute_impl+0xed6>
 802fdb8:	4bae      	ldr	r3, [pc, #696]	@ (8030074 <_theta_chain_compute_impl+0x1184>)
 802fdba:	4aac      	ldr	r2, [pc, #688]	@ (803006c <_theta_chain_compute_impl+0x117c>)
 802fdbc:	f240 418d 	movw	r1, #1165	@ 0x48d
 802fdc0:	48ab      	ldr	r0, [pc, #684]	@ (8030070 <_theta_chain_compute_impl+0x1180>)
 802fdc2:	f005 fa39 	bl	8035238 <__assert_func>
            double_iter(&thetaQ1[current], &theta, &thetaQ1[current - 1], num_dbls);
 802fdc6:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fdca:	f103 0314 	add.w	r3, r3, #20
 802fdce:	681a      	ldr	r2, [r3, #0]
 802fdd0:	4613      	mov	r3, r2
 802fdd2:	00db      	lsls	r3, r3, #3
 802fdd4:	4413      	add	r3, r2
 802fdd6:	015b      	lsls	r3, r3, #5
 802fdd8:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fddc:	f102 0204 	add.w	r2, r2, #4
 802fde0:	6812      	ldr	r2, [r2, #0]
 802fde2:	18d0      	adds	r0, r2, r3
 802fde4:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fde8:	f103 0314 	add.w	r3, r3, #20
 802fdec:	681b      	ldr	r3, [r3, #0]
 802fdee:	1e5a      	subs	r2, r3, #1
 802fdf0:	4613      	mov	r3, r2
 802fdf2:	00db      	lsls	r3, r3, #3
 802fdf4:	4413      	add	r3, r2
 802fdf6:	015b      	lsls	r3, r3, #5
 802fdf8:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fdfc:	f102 0204 	add.w	r2, r2, #4
 802fe00:	6812      	ldr	r2, [r2, #0]
 802fe02:	441a      	add	r2, r3
 802fe04:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802fe08:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 802fe0c:	681b      	ldr	r3, [r3, #0]
 802fe0e:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 802fe12:	f101 010c 	add.w	r1, r1, #12
 802fe16:	f000 feef 	bl	8030bf8 <double_iter>
            double_iter(&thetaQ2[current], &theta, &thetaQ2[current - 1], num_dbls);
 802fe1a:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fe1e:	f103 0314 	add.w	r3, r3, #20
 802fe22:	681a      	ldr	r2, [r3, #0]
 802fe24:	4613      	mov	r3, r2
 802fe26:	00db      	lsls	r3, r3, #3
 802fe28:	4413      	add	r3, r2
 802fe2a:	015b      	lsls	r3, r3, #5
 802fe2c:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802fe30:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 802fe34:	6812      	ldr	r2, [r2, #0]
 802fe36:	18d0      	adds	r0, r2, r3
 802fe38:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fe3c:	f103 0314 	add.w	r3, r3, #20
 802fe40:	681b      	ldr	r3, [r3, #0]
 802fe42:	1e5a      	subs	r2, r3, #1
 802fe44:	4613      	mov	r3, r2
 802fe46:	00db      	lsls	r3, r3, #3
 802fe48:	4413      	add	r3, r2
 802fe4a:	015b      	lsls	r3, r3, #5
 802fe4c:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802fe50:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 802fe54:	6812      	ldr	r2, [r2, #0]
 802fe56:	441a      	add	r2, r3
 802fe58:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802fe5c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 802fe60:	681b      	ldr	r3, [r3, #0]
 802fe62:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 802fe66:	f101 010c 	add.w	r1, r1, #12
 802fe6a:	f000 fec5 	bl	8030bf8 <double_iter>
            todo[current] = todo[current - 1] - num_dbls;
 802fe6e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fe72:	f103 0314 	add.w	r3, r3, #20
 802fe76:	681b      	ldr	r3, [r3, #0]
 802fe78:	1e5a      	subs	r2, r3, #1
 802fe7a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802fe7e:	f103 031c 	add.w	r3, r3, #28
 802fe82:	681b      	ldr	r3, [r3, #0]
 802fe84:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802fe88:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 802fe8c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 802fe90:	681b      	ldr	r3, [r3, #0]
 802fe92:	b29b      	uxth	r3, r3
 802fe94:	1ad3      	subs	r3, r2, r3
 802fe96:	b299      	uxth	r1, r3
 802fe98:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802fe9c:	f103 031c 	add.w	r3, r3, #28
 802fea0:	681b      	ldr	r3, [r3, #0]
 802fea2:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fea6:	f102 0214 	add.w	r2, r2, #20
 802feaa:	6812      	ldr	r2, [r2, #0]
 802feac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        while (todo[current] != 1) {
 802feb0:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 802feb4:	f103 031c 	add.w	r3, r3, #28
 802feb8:	681b      	ldr	r3, [r3, #0]
 802feba:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802febe:	f102 0214 	add.w	r2, r2, #20
 802fec2:	6812      	ldr	r2, [r2, #0]
 802fec4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802fec8:	2b01      	cmp	r3, #1
 802feca:	f47f af05 	bne.w	802fcd8 <_theta_chain_compute_impl+0xde8>
        }

        // computing the next step
        int ret;
        if (i == n - 2) // penultimate step
 802fece:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802fed2:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 802fed6:	681b      	ldr	r3, [r3, #0]
 802fed8:	3b02      	subs	r3, #2
 802feda:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802fede:	f102 0208 	add.w	r2, r2, #8
 802fee2:	6812      	ldr	r2, [r2, #0]
 802fee4:	429a      	cmp	r2, r3
 802fee6:	d138      	bne.n	802ff5a <_theta_chain_compute_impl+0x106a>
            ret = theta_isogeny_compute(&step, &theta, &thetaQ1[current], &thetaQ2[current], 0, 0, verify);
 802fee8:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802feec:	f103 0314 	add.w	r3, r3, #20
 802fef0:	681a      	ldr	r2, [r3, #0]
 802fef2:	4613      	mov	r3, r2
 802fef4:	00db      	lsls	r3, r3, #3
 802fef6:	4413      	add	r3, r2
 802fef8:	015b      	lsls	r3, r3, #5
 802fefa:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fefe:	f102 0204 	add.w	r2, r2, #4
 802ff02:	6812      	ldr	r2, [r2, #0]
 802ff04:	18d4      	adds	r4, r2, r3
 802ff06:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ff0a:	f103 0314 	add.w	r3, r3, #20
 802ff0e:	681a      	ldr	r2, [r3, #0]
 802ff10:	4613      	mov	r3, r2
 802ff12:	00db      	lsls	r3, r3, #3
 802ff14:	4413      	add	r3, r2
 802ff16:	015b      	lsls	r3, r3, #5
 802ff18:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802ff1c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 802ff20:	6812      	ldr	r2, [r2, #0]
 802ff22:	441a      	add	r2, r3
 802ff24:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 802ff28:	f101 010c 	add.w	r1, r1, #12
 802ff2c:	f507 600e 	add.w	r0, r7, #2272	@ 0x8e0
 802ff30:	3808      	subs	r0, #8
 802ff32:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 802ff36:	f103 0314 	add.w	r3, r3, #20
 802ff3a:	781b      	ldrb	r3, [r3, #0]
 802ff3c:	9302      	str	r3, [sp, #8]
 802ff3e:	2300      	movs	r3, #0
 802ff40:	9301      	str	r3, [sp, #4]
 802ff42:	2300      	movs	r3, #0
 802ff44:	9300      	str	r3, [sp, #0]
 802ff46:	4613      	mov	r3, r2
 802ff48:	4622      	mov	r2, r4
 802ff4a:	f7fd fea4 	bl	802dc96 <theta_isogeny_compute>
 802ff4e:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ff52:	f103 0304 	add.w	r3, r3, #4
 802ff56:	6018      	str	r0, [r3, #0]
 802ff58:	e078      	b.n	803004c <_theta_chain_compute_impl+0x115c>
        else if (i == n - 1) // ultimate step
 802ff5a:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 802ff5e:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 802ff62:	681b      	ldr	r3, [r3, #0]
 802ff64:	3b01      	subs	r3, #1
 802ff66:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 802ff6a:	f102 0208 	add.w	r2, r2, #8
 802ff6e:	6812      	ldr	r2, [r2, #0]
 802ff70:	429a      	cmp	r2, r3
 802ff72:	d133      	bne.n	802ffdc <_theta_chain_compute_impl+0x10ec>
            ret = theta_isogeny_compute(&step, &theta, &thetaQ1[current], &thetaQ2[current], 1, 0, false);
 802ff74:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ff78:	f103 0314 	add.w	r3, r3, #20
 802ff7c:	681a      	ldr	r2, [r3, #0]
 802ff7e:	4613      	mov	r3, r2
 802ff80:	00db      	lsls	r3, r3, #3
 802ff82:	4413      	add	r3, r2
 802ff84:	015b      	lsls	r3, r3, #5
 802ff86:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802ff8a:	f102 0204 	add.w	r2, r2, #4
 802ff8e:	6812      	ldr	r2, [r2, #0]
 802ff90:	18d4      	adds	r4, r2, r3
 802ff92:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ff96:	f103 0314 	add.w	r3, r3, #20
 802ff9a:	681a      	ldr	r2, [r3, #0]
 802ff9c:	4613      	mov	r3, r2
 802ff9e:	00db      	lsls	r3, r3, #3
 802ffa0:	4413      	add	r3, r2
 802ffa2:	015b      	lsls	r3, r3, #5
 802ffa4:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 802ffa8:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 802ffac:	6812      	ldr	r2, [r2, #0]
 802ffae:	4413      	add	r3, r2
 802ffb0:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 802ffb4:	f101 010c 	add.w	r1, r1, #12
 802ffb8:	f507 600e 	add.w	r0, r7, #2272	@ 0x8e0
 802ffbc:	3808      	subs	r0, #8
 802ffbe:	2200      	movs	r2, #0
 802ffc0:	9202      	str	r2, [sp, #8]
 802ffc2:	2200      	movs	r2, #0
 802ffc4:	9201      	str	r2, [sp, #4]
 802ffc6:	2201      	movs	r2, #1
 802ffc8:	9200      	str	r2, [sp, #0]
 802ffca:	4622      	mov	r2, r4
 802ffcc:	f7fd fe63 	bl	802dc96 <theta_isogeny_compute>
 802ffd0:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ffd4:	f103 0304 	add.w	r3, r3, #4
 802ffd8:	6018      	str	r0, [r3, #0]
 802ffda:	e037      	b.n	803004c <_theta_chain_compute_impl+0x115c>
        else
            ret = theta_isogeny_compute(&step, &theta, &thetaQ1[current], &thetaQ2[current], 0, 1, verify);
 802ffdc:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802ffe0:	f103 0314 	add.w	r3, r3, #20
 802ffe4:	681a      	ldr	r2, [r3, #0]
 802ffe6:	4613      	mov	r3, r2
 802ffe8:	00db      	lsls	r3, r3, #3
 802ffea:	4413      	add	r3, r2
 802ffec:	015b      	lsls	r3, r3, #5
 802ffee:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 802fff2:	f102 0204 	add.w	r2, r2, #4
 802fff6:	6812      	ldr	r2, [r2, #0]
 802fff8:	18d4      	adds	r4, r2, r3
 802fffa:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 802fffe:	f103 0314 	add.w	r3, r3, #20
 8030002:	681a      	ldr	r2, [r3, #0]
 8030004:	4613      	mov	r3, r2
 8030006:	00db      	lsls	r3, r3, #3
 8030008:	4413      	add	r3, r2
 803000a:	015b      	lsls	r3, r3, #5
 803000c:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 8030010:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8030014:	6812      	ldr	r2, [r2, #0]
 8030016:	441a      	add	r2, r3
 8030018:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 803001c:	f101 010c 	add.w	r1, r1, #12
 8030020:	f507 600e 	add.w	r0, r7, #2272	@ 0x8e0
 8030024:	3808      	subs	r0, #8
 8030026:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 803002a:	f103 0314 	add.w	r3, r3, #20
 803002e:	781b      	ldrb	r3, [r3, #0]
 8030030:	9302      	str	r3, [sp, #8]
 8030032:	2301      	movs	r3, #1
 8030034:	9301      	str	r3, [sp, #4]
 8030036:	2300      	movs	r3, #0
 8030038:	9300      	str	r3, [sp, #0]
 803003a:	4613      	mov	r3, r2
 803003c:	4622      	mov	r2, r4
 803003e:	f7fd fe2a 	bl	802dc96 <theta_isogeny_compute>
 8030042:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 8030046:	f103 0304 	add.w	r3, r3, #4
 803004a:	6018      	str	r0, [r3, #0]
        if (!ret)
 803004c:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 8030050:	f103 0304 	add.w	r3, r3, #4
 8030054:	681b      	ldr	r3, [r3, #0]
 8030056:	2b00      	cmp	r3, #0
 8030058:	d101      	bne.n	803005e <_theta_chain_compute_impl+0x116e>
            return 0;
 803005a:	2300      	movs	r3, #0
 803005c:	e317      	b.n	803068e <_theta_chain_compute_impl+0x179e>

        for (unsigned j = 0; j < numP; ++j)
 803005e:	2300      	movs	r3, #0
 8030060:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 8030064:	6013      	str	r3, [r2, #0]
 8030066:	e02e      	b.n	80300c6 <_theta_chain_compute_impl+0x11d6>
 8030068:	08039304 	.word	0x08039304
 803006c:	0803911c 	.word	0x0803911c
 8030070:	08039120 	.word	0x08039120
 8030074:	08039314 	.word	0x08039314
            theta_isogeny_eval(&pts[j], &step, &pts[j]);
 8030078:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 803007c:	681a      	ldr	r2, [r3, #0]
 803007e:	4613      	mov	r3, r2
 8030080:	00db      	lsls	r3, r3, #3
 8030082:	4413      	add	r3, r2
 8030084:	015b      	lsls	r3, r3, #5
 8030086:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 803008a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 803008e:	6812      	ldr	r2, [r2, #0]
 8030090:	18d0      	adds	r0, r2, r3
 8030092:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 8030096:	681a      	ldr	r2, [r3, #0]
 8030098:	4613      	mov	r3, r2
 803009a:	00db      	lsls	r3, r3, #3
 803009c:	4413      	add	r3, r2
 803009e:	015b      	lsls	r3, r3, #5
 80300a0:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80300a4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80300a8:	6812      	ldr	r2, [r2, #0]
 80300aa:	441a      	add	r2, r3
 80300ac:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 80300b0:	3b08      	subs	r3, #8
 80300b2:	4619      	mov	r1, r3
 80300b4:	f7fe fbb4 	bl	802e820 <theta_isogeny_eval>
        for (unsigned j = 0; j < numP; ++j)
 80300b8:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 80300bc:	681b      	ldr	r3, [r3, #0]
 80300be:	3301      	adds	r3, #1
 80300c0:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 80300c4:	6013      	str	r3, [r2, #0]
 80300c6:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 80300ca:	681a      	ldr	r2, [r3, #0]
 80300cc:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80300d0:	f103 0310 	add.w	r3, r3, #16
 80300d4:	681b      	ldr	r3, [r3, #0]
 80300d6:	429a      	cmp	r2, r3
 80300d8:	d3ce      	bcc.n	8030078 <_theta_chain_compute_impl+0x1188>

        // updating the codomain
        theta = step.codomain;
 80300da:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 80300de:	f103 0320 	add.w	r3, r3, #32
 80300e2:	f5a3 7275 	sub.w	r2, r3, #980	@ 0x3d4
 80300e6:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 80300ea:	4610      	mov	r0, r2
 80300ec:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 80300f0:	f44f 7259 	mov.w	r2, #868	@ 0x364
 80300f4:	4619      	mov	r1, r3
 80300f6:	f005 fe52 	bl	8035d9e <memcpy>

        // pushing the kernel
        assert(todo[current] == 1);
 80300fa:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80300fe:	f103 031c 	add.w	r3, r3, #28
 8030102:	681b      	ldr	r3, [r3, #0]
 8030104:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 8030108:	f102 0214 	add.w	r2, r2, #20
 803010c:	6812      	ldr	r2, [r2, #0]
 803010e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8030112:	2b01      	cmp	r3, #1
 8030114:	d006      	beq.n	8030124 <_theta_chain_compute_impl+0x1234>
 8030116:	4b94      	ldr	r3, [pc, #592]	@ (8030368 <_theta_chain_compute_impl+0x1478>)
 8030118:	4a94      	ldr	r2, [pc, #592]	@ (803036c <_theta_chain_compute_impl+0x147c>)
 803011a:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 803011e:	4894      	ldr	r0, [pc, #592]	@ (8030370 <_theta_chain_compute_impl+0x1480>)
 8030120:	f005 f88a 	bl	8035238 <__assert_func>
        for (int j = 0; j < current; ++j) {
 8030124:	2300      	movs	r3, #0
 8030126:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 803012a:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 803012e:	6013      	str	r3, [r2, #0]
 8030130:	e081      	b.n	8030236 <_theta_chain_compute_impl+0x1346>
            theta_isogeny_eval(&thetaQ1[j], &step, &thetaQ1[j]);
 8030132:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030136:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 803013a:	681a      	ldr	r2, [r3, #0]
 803013c:	4613      	mov	r3, r2
 803013e:	00db      	lsls	r3, r3, #3
 8030140:	4413      	add	r3, r2
 8030142:	015b      	lsls	r3, r3, #5
 8030144:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 8030148:	f102 0204 	add.w	r2, r2, #4
 803014c:	6812      	ldr	r2, [r2, #0]
 803014e:	18d0      	adds	r0, r2, r3
 8030150:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030154:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8030158:	681a      	ldr	r2, [r3, #0]
 803015a:	4613      	mov	r3, r2
 803015c:	00db      	lsls	r3, r3, #3
 803015e:	4413      	add	r3, r2
 8030160:	015b      	lsls	r3, r3, #5
 8030162:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 8030166:	f102 0204 	add.w	r2, r2, #4
 803016a:	6812      	ldr	r2, [r2, #0]
 803016c:	441a      	add	r2, r3
 803016e:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 8030172:	3b08      	subs	r3, #8
 8030174:	4619      	mov	r1, r3
 8030176:	f7fe fb53 	bl	802e820 <theta_isogeny_eval>
            theta_isogeny_eval(&thetaQ2[j], &step, &thetaQ2[j]);
 803017a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803017e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8030182:	681a      	ldr	r2, [r3, #0]
 8030184:	4613      	mov	r3, r2
 8030186:	00db      	lsls	r3, r3, #3
 8030188:	4413      	add	r3, r2
 803018a:	015b      	lsls	r3, r3, #5
 803018c:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 8030190:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8030194:	6812      	ldr	r2, [r2, #0]
 8030196:	18d0      	adds	r0, r2, r3
 8030198:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803019c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80301a0:	681a      	ldr	r2, [r3, #0]
 80301a2:	4613      	mov	r3, r2
 80301a4:	00db      	lsls	r3, r3, #3
 80301a6:	4413      	add	r3, r2
 80301a8:	015b      	lsls	r3, r3, #5
 80301aa:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 80301ae:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80301b2:	6812      	ldr	r2, [r2, #0]
 80301b4:	441a      	add	r2, r3
 80301b6:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 80301ba:	3b08      	subs	r3, #8
 80301bc:	4619      	mov	r1, r3
 80301be:	f7fe fb2f 	bl	802e820 <theta_isogeny_eval>
            assert(todo[j]);
 80301c2:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80301c6:	f103 031c 	add.w	r3, r3, #28
 80301ca:	681b      	ldr	r3, [r3, #0]
 80301cc:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80301d0:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80301d4:	6812      	ldr	r2, [r2, #0]
 80301d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80301da:	2b00      	cmp	r3, #0
 80301dc:	d106      	bne.n	80301ec <_theta_chain_compute_impl+0x12fc>
 80301de:	4b65      	ldr	r3, [pc, #404]	@ (8030374 <_theta_chain_compute_impl+0x1484>)
 80301e0:	4a62      	ldr	r2, [pc, #392]	@ (803036c <_theta_chain_compute_impl+0x147c>)
 80301e2:	f240 41a9 	movw	r1, #1193	@ 0x4a9
 80301e6:	4862      	ldr	r0, [pc, #392]	@ (8030370 <_theta_chain_compute_impl+0x1480>)
 80301e8:	f005 f826 	bl	8035238 <__assert_func>
            --todo[j];
 80301ec:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80301f0:	f103 031c 	add.w	r3, r3, #28
 80301f4:	681b      	ldr	r3, [r3, #0]
 80301f6:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80301fa:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80301fe:	6812      	ldr	r2, [r2, #0]
 8030200:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8030204:	3b01      	subs	r3, #1
 8030206:	b299      	uxth	r1, r3
 8030208:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803020c:	f103 031c 	add.w	r3, r3, #28
 8030210:	681b      	ldr	r3, [r3, #0]
 8030212:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 8030216:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 803021a:	6812      	ldr	r2, [r2, #0]
 803021c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int j = 0; j < current; ++j) {
 8030220:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030224:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8030228:	681b      	ldr	r3, [r3, #0]
 803022a:	3301      	adds	r3, #1
 803022c:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 8030230:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8030234:	6013      	str	r3, [r2, #0]
 8030236:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803023a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 803023e:	681a      	ldr	r2, [r3, #0]
 8030240:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 8030244:	f103 0314 	add.w	r3, r3, #20
 8030248:	681b      	ldr	r3, [r3, #0]
 803024a:	429a      	cmp	r2, r3
 803024c:	f6ff af71 	blt.w	8030132 <_theta_chain_compute_impl+0x1242>
        }

        --current;
 8030250:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 8030254:	f103 0314 	add.w	r3, r3, #20
 8030258:	681b      	ldr	r3, [r3, #0]
 803025a:	3b01      	subs	r3, #1
 803025c:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 8030260:	f102 0214 	add.w	r2, r2, #20
 8030264:	6013      	str	r3, [r2, #0]
    for (unsigned i = 1; current >= 0 && todo[current]; ++i) {
 8030266:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 803026a:	f103 0308 	add.w	r3, r3, #8
 803026e:	681b      	ldr	r3, [r3, #0]
 8030270:	3301      	adds	r3, #1
 8030272:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 8030276:	f102 0208 	add.w	r2, r2, #8
 803027a:	6013      	str	r3, [r2, #0]
 803027c:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 8030280:	f103 0314 	add.w	r3, r3, #20
 8030284:	681b      	ldr	r3, [r3, #0]
 8030286:	2b00      	cmp	r3, #0
 8030288:	db0e      	blt.n	80302a8 <_theta_chain_compute_impl+0x13b8>
 803028a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803028e:	f103 031c 	add.w	r3, r3, #28
 8030292:	681b      	ldr	r3, [r3, #0]
 8030294:	f507 5223 	add.w	r2, r7, #10432	@ 0x28c0
 8030298:	f102 0214 	add.w	r2, r2, #20
 803029c:	6812      	ldr	r2, [r2, #0]
 803029e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80302a2:	2b00      	cmp	r3, #0
 80302a4:	f47f ad04 	bne.w	802fcb0 <_theta_chain_compute_impl+0xdc0>
    }

    assert(current == -1);
 80302a8:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 80302ac:	f103 0314 	add.w	r3, r3, #20
 80302b0:	681b      	ldr	r3, [r3, #0]
 80302b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80302b6:	d006      	beq.n	80302c6 <_theta_chain_compute_impl+0x13d6>
 80302b8:	4b2f      	ldr	r3, [pc, #188]	@ (8030378 <_theta_chain_compute_impl+0x1488>)
 80302ba:	4a2c      	ldr	r2, [pc, #176]	@ (803036c <_theta_chain_compute_impl+0x147c>)
 80302bc:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80302c0:	482b      	ldr	r0, [pc, #172]	@ (8030370 <_theta_chain_compute_impl+0x1480>)
 80302c2:	f004 ffb9 	bl	8035238 <__assert_func>

    if (!extra_torsion) {
 80302c6:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 80302ca:	f2a3 73fd 	subw	r3, r3, #2045	@ 0x7fd
 80302ce:	781b      	ldrb	r3, [r3, #0]
 80302d0:	f083 0301 	eor.w	r3, r3, #1
 80302d4:	b2db      	uxtb	r3, r3
 80302d6:	2b00      	cmp	r3, #0
 80302d8:	f000 8124 	beq.w	8030524 <_theta_chain_compute_impl+0x1634>
        if (n >= 3) {
 80302dc:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 80302e0:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 80302e4:	681b      	ldr	r3, [r3, #0]
 80302e6:	2b02      	cmp	r3, #2
 80302e8:	d91f      	bls.n	803032a <_theta_chain_compute_impl+0x143a>
            // in the last step we've skipped pushing the kernel since current was == 0, let's do it now
            theta_isogeny_eval(&thetaQ1[0], &step, &thetaQ1[0]);
 80302ea:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80302ee:	f103 0304 	add.w	r3, r3, #4
 80302f2:	6818      	ldr	r0, [r3, #0]
 80302f4:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80302f8:	f103 0304 	add.w	r3, r3, #4
 80302fc:	681a      	ldr	r2, [r3, #0]
 80302fe:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 8030302:	3b08      	subs	r3, #8
 8030304:	4619      	mov	r1, r3
 8030306:	f7fe fa8b 	bl	802e820 <theta_isogeny_eval>
            theta_isogeny_eval(&thetaQ2[0], &step, &thetaQ2[0]);
 803030a:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 803030e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8030312:	6818      	ldr	r0, [r3, #0]
 8030314:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8030318:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 803031c:	681a      	ldr	r2, [r3, #0]
 803031e:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 8030322:	3b08      	subs	r3, #8
 8030324:	4619      	mov	r1, r3
 8030326:	f7fe fa7b 	bl	802e820 <theta_isogeny_eval>
        }

        // penultimate step
        theta_isogeny_compute_4(&step, &theta, &thetaQ1[0], &thetaQ2[0], 0, 0);
 803032a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803032e:	f103 0304 	add.w	r3, r3, #4
 8030332:	681a      	ldr	r2, [r3, #0]
 8030334:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8030338:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 803033c:	681b      	ldr	r3, [r3, #0]
 803033e:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 8030342:	f101 010c 	add.w	r1, r1, #12
 8030346:	f507 600e 	add.w	r0, r7, #2272	@ 0x8e0
 803034a:	3808      	subs	r0, #8
 803034c:	2400      	movs	r4, #0
 803034e:	9401      	str	r4, [sp, #4]
 8030350:	2400      	movs	r4, #0
 8030352:	9400      	str	r4, [sp, #0]
 8030354:	f7fd fee5 	bl	802e122 <theta_isogeny_compute_4>
        for (unsigned j = 0; j < numP; ++j)
 8030358:	2300      	movs	r3, #0
 803035a:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 803035e:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8030362:	6013      	str	r3, [r2, #0]
 8030364:	e039      	b.n	80303da <_theta_chain_compute_impl+0x14ea>
 8030366:	bf00      	nop
 8030368:	08039340 	.word	0x08039340
 803036c:	0803911c 	.word	0x0803911c
 8030370:	08039120 	.word	0x08039120
 8030374:	08039388 	.word	0x08039388
 8030378:	08039390 	.word	0x08039390
            theta_isogeny_eval(&pts[j], &step, &pts[j]);
 803037c:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030380:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8030384:	681a      	ldr	r2, [r3, #0]
 8030386:	4613      	mov	r3, r2
 8030388:	00db      	lsls	r3, r3, #3
 803038a:	4413      	add	r3, r2
 803038c:	015b      	lsls	r3, r3, #5
 803038e:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 8030392:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8030396:	6812      	ldr	r2, [r2, #0]
 8030398:	18d0      	adds	r0, r2, r3
 803039a:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803039e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80303a2:	681a      	ldr	r2, [r3, #0]
 80303a4:	4613      	mov	r3, r2
 80303a6:	00db      	lsls	r3, r3, #3
 80303a8:	4413      	add	r3, r2
 80303aa:	015b      	lsls	r3, r3, #5
 80303ac:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80303b0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80303b4:	6812      	ldr	r2, [r2, #0]
 80303b6:	441a      	add	r2, r3
 80303b8:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 80303bc:	3b08      	subs	r3, #8
 80303be:	4619      	mov	r1, r3
 80303c0:	f7fe fa2e 	bl	802e820 <theta_isogeny_eval>
        for (unsigned j = 0; j < numP; ++j)
 80303c4:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80303c8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80303cc:	681b      	ldr	r3, [r3, #0]
 80303ce:	3301      	adds	r3, #1
 80303d0:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80303d4:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80303d8:	6013      	str	r3, [r2, #0]
 80303da:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80303de:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80303e2:	681a      	ldr	r2, [r3, #0]
 80303e4:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80303e8:	f103 0310 	add.w	r3, r3, #16
 80303ec:	681b      	ldr	r3, [r3, #0]
 80303ee:	429a      	cmp	r2, r3
 80303f0:	d3c4      	bcc.n	803037c <_theta_chain_compute_impl+0x148c>
        theta = step.codomain;
 80303f2:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 80303f6:	f103 0320 	add.w	r3, r3, #32
 80303fa:	f5a3 7275 	sub.w	r2, r3, #980	@ 0x3d4
 80303fe:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 8030402:	4610      	mov	r0, r2
 8030404:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8030408:	f44f 7259 	mov.w	r2, #868	@ 0x364
 803040c:	4619      	mov	r1, r3
 803040e:	f005 fcc6 	bl	8035d9e <memcpy>
        theta_isogeny_eval(&thetaQ1[0], &step, &thetaQ1[0]);
 8030412:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030416:	f103 0304 	add.w	r3, r3, #4
 803041a:	6818      	ldr	r0, [r3, #0]
 803041c:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030420:	f103 0304 	add.w	r3, r3, #4
 8030424:	681a      	ldr	r2, [r3, #0]
 8030426:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 803042a:	3b08      	subs	r3, #8
 803042c:	4619      	mov	r1, r3
 803042e:	f7fe f9f7 	bl	802e820 <theta_isogeny_eval>
        theta_isogeny_eval(&thetaQ2[0], &step, &thetaQ2[0]);
 8030432:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8030436:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 803043a:	6818      	ldr	r0, [r3, #0]
 803043c:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8030440:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8030444:	681a      	ldr	r2, [r3, #0]
 8030446:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 803044a:	3b08      	subs	r3, #8
 803044c:	4619      	mov	r1, r3
 803044e:	f7fe f9e7 	bl	802e820 <theta_isogeny_eval>

        // ultimate step
        theta_isogeny_compute_2(&step, &theta, &thetaQ1[0], &thetaQ2[0], 1, 0);
 8030452:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030456:	f103 0304 	add.w	r3, r3, #4
 803045a:	681a      	ldr	r2, [r3, #0]
 803045c:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8030460:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8030464:	681b      	ldr	r3, [r3, #0]
 8030466:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 803046a:	f101 010c 	add.w	r1, r1, #12
 803046e:	f507 600e 	add.w	r0, r7, #2272	@ 0x8e0
 8030472:	3808      	subs	r0, #8
 8030474:	2400      	movs	r4, #0
 8030476:	9401      	str	r4, [sp, #4]
 8030478:	2401      	movs	r4, #1
 803047a:	9400      	str	r4, [sp, #0]
 803047c:	f7fe f844 	bl	802e508 <theta_isogeny_compute_2>
        for (unsigned j = 0; j < numP; ++j)
 8030480:	2300      	movs	r3, #0
 8030482:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 8030486:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 803048a:	6013      	str	r3, [r2, #0]
 803048c:	e02e      	b.n	80304ec <_theta_chain_compute_impl+0x15fc>
            theta_isogeny_eval(&pts[j], &step, &pts[j]);
 803048e:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030492:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8030496:	681a      	ldr	r2, [r3, #0]
 8030498:	4613      	mov	r3, r2
 803049a:	00db      	lsls	r3, r3, #3
 803049c:	4413      	add	r3, r2
 803049e:	015b      	lsls	r3, r3, #5
 80304a0:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80304a4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80304a8:	6812      	ldr	r2, [r2, #0]
 80304aa:	18d0      	adds	r0, r2, r3
 80304ac:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80304b0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80304b4:	681a      	ldr	r2, [r3, #0]
 80304b6:	4613      	mov	r3, r2
 80304b8:	00db      	lsls	r3, r3, #3
 80304ba:	4413      	add	r3, r2
 80304bc:	015b      	lsls	r3, r3, #5
 80304be:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80304c2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80304c6:	6812      	ldr	r2, [r2, #0]
 80304c8:	441a      	add	r2, r3
 80304ca:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 80304ce:	3b08      	subs	r3, #8
 80304d0:	4619      	mov	r1, r3
 80304d2:	f7fe f9a5 	bl	802e820 <theta_isogeny_eval>
        for (unsigned j = 0; j < numP; ++j)
 80304d6:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80304da:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80304de:	681b      	ldr	r3, [r3, #0]
 80304e0:	3301      	adds	r3, #1
 80304e2:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80304e6:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80304ea:	6013      	str	r3, [r2, #0]
 80304ec:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80304f0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80304f4:	681a      	ldr	r2, [r3, #0]
 80304f6:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80304fa:	f103 0310 	add.w	r3, r3, #16
 80304fe:	681b      	ldr	r3, [r3, #0]
 8030500:	429a      	cmp	r2, r3
 8030502:	d3c4      	bcc.n	803048e <_theta_chain_compute_impl+0x159e>
        theta = step.codomain;
 8030504:	f507 5323 	add.w	r3, r7, #10432	@ 0x28c0
 8030508:	f103 0320 	add.w	r3, r3, #32
 803050c:	f5a3 7275 	sub.w	r2, r3, #980	@ 0x3d4
 8030510:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 8030514:	4610      	mov	r0, r2
 8030516:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 803051a:	f44f 7259 	mov.w	r2, #868	@ 0x364
 803051e:	4619      	mov	r1, r3
 8030520:	f005 fc3d 	bl	8035d9e <memcpy>
    }

    // final splitting step
    theta_splitting_t last_step;

    bool is_split = splitting_compute(&last_step, &theta, extra_torsion ? 8 : -1, randomize);
 8030524:	f507 630e 	add.w	r3, r7, #2272	@ 0x8e0
 8030528:	f2a3 73fd 	subw	r3, r3, #2045	@ 0x7fd
 803052c:	781b      	ldrb	r3, [r3, #0]
 803052e:	2b00      	cmp	r3, #0
 8030530:	d001      	beq.n	8030536 <_theta_chain_compute_impl+0x1646>
 8030532:	2208      	movs	r2, #8
 8030534:	e001      	b.n	803053a <_theta_chain_compute_impl+0x164a>
 8030536:	f04f 32ff 	mov.w	r2, #4294967295
 803053a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 803053e:	f103 0318 	add.w	r3, r3, #24
 8030542:	781b      	ldrb	r3, [r3, #0]
 8030544:	f507 5114 	add.w	r1, r7, #9472	@ 0x2500
 8030548:	f101 010c 	add.w	r1, r1, #12
 803054c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8030550:	382c      	subs	r0, #44	@ 0x2c
 8030552:	f7fe fa15 	bl	802e980 <splitting_compute>
 8030556:	4603      	mov	r3, r0
 8030558:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 803055c:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8030560:	7013      	strb	r3, [r2, #0]

    if (!is_split) {
 8030562:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8030566:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 803056a:	781b      	ldrb	r3, [r3, #0]
 803056c:	f083 0301 	eor.w	r3, r3, #1
 8030570:	b2db      	uxtb	r3, r3
 8030572:	2b00      	cmp	r3, #0
 8030574:	d00a      	beq.n	803058c <_theta_chain_compute_impl+0x169c>
        debug_print("kernel did not generate an isogeny between elliptic products");
 8030576:	4b4a      	ldr	r3, [pc, #296]	@ (80306a0 <_theta_chain_compute_impl+0x17b0>)
 8030578:	9300      	str	r3, [sp, #0]
 803057a:	f240 43ce 	movw	r3, #1230	@ 0x4ce
 803057e:	4a49      	ldr	r2, [pc, #292]	@ (80306a4 <_theta_chain_compute_impl+0x17b4>)
 8030580:	4949      	ldr	r1, [pc, #292]	@ (80306a8 <_theta_chain_compute_impl+0x17b8>)
 8030582:	484a      	ldr	r0, [pc, #296]	@ (80306ac <_theta_chain_compute_impl+0x17bc>)
 8030584:	f005 f9da 	bl	803593c <iprintf>
        return 0;
 8030588:	2300      	movs	r3, #0
 803058a:	e080      	b.n	803068e <_theta_chain_compute_impl+0x179e>
    }

    if (!theta_product_structure_to_elliptic_product(E34, &last_step.B))
 803058c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8030590:	3b2c      	subs	r3, #44	@ 0x2c
 8030592:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8030596:	4619      	mov	r1, r3
 8030598:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 803059c:	f103 0308 	add.w	r3, r3, #8
 80305a0:	6818      	ldr	r0, [r3, #0]
 80305a2:	f7fe fb49 	bl	802ec38 <theta_product_structure_to_elliptic_product>
 80305a6:	4603      	mov	r3, r0
 80305a8:	2b00      	cmp	r3, #0
 80305aa:	d101      	bne.n	80305b0 <_theta_chain_compute_impl+0x16c0>
        return 0;
 80305ac:	2300      	movs	r3, #0
 80305ae:	e06e      	b.n	803068e <_theta_chain_compute_impl+0x179e>

    // evaluate
    for (size_t j = 0; j < numP; ++j) {
 80305b0:	2300      	movs	r3, #0
 80305b2:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80305b6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80305ba:	6013      	str	r3, [r2, #0]
 80305bc:	e05a      	b.n	8030674 <_theta_chain_compute_impl+0x1784>
        apply_isomorphism(&pts[j], &last_step.M, &pts[j]);
 80305be:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80305c2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80305c6:	681a      	ldr	r2, [r3, #0]
 80305c8:	4613      	mov	r3, r2
 80305ca:	00db      	lsls	r3, r3, #3
 80305cc:	4413      	add	r3, r2
 80305ce:	015b      	lsls	r3, r3, #5
 80305d0:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80305d4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80305d8:	6812      	ldr	r2, [r2, #0]
 80305da:	18d0      	adds	r0, r2, r3
 80305dc:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80305e0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80305e4:	681a      	ldr	r2, [r3, #0]
 80305e6:	4613      	mov	r3, r2
 80305e8:	00db      	lsls	r3, r3, #3
 80305ea:	4413      	add	r3, r2
 80305ec:	015b      	lsls	r3, r3, #5
 80305ee:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 80305f2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80305f6:	6812      	ldr	r2, [r2, #0]
 80305f8:	441a      	add	r2, r3
 80305fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80305fe:	3b2c      	subs	r3, #44	@ 0x2c
 8030600:	4619      	mov	r1, r3
 8030602:	f7fb fe6c 	bl	802c2de <apply_isomorphism>
        if (!theta_point_to_montgomery_point(&P12[j], &pts[j], &last_step.B))
 8030606:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803060a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 803060e:	681a      	ldr	r2, [r3, #0]
 8030610:	4613      	mov	r3, r2
 8030612:	00db      	lsls	r3, r3, #3
 8030614:	4413      	add	r3, r2
 8030616:	015b      	lsls	r3, r3, #5
 8030618:	461a      	mov	r2, r3
 803061a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 803061e:	f103 030c 	add.w	r3, r3, #12
 8030622:	681b      	ldr	r3, [r3, #0]
 8030624:	1898      	adds	r0, r3, r2
 8030626:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 803062a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 803062e:	681a      	ldr	r2, [r3, #0]
 8030630:	4613      	mov	r3, r2
 8030632:	00db      	lsls	r3, r3, #3
 8030634:	4413      	add	r3, r2
 8030636:	015b      	lsls	r3, r3, #5
 8030638:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 803063c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8030640:	6812      	ldr	r2, [r2, #0]
 8030642:	18d1      	adds	r1, r2, r3
 8030644:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8030648:	3b2c      	subs	r3, #44	@ 0x2c
 803064a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 803064e:	461a      	mov	r2, r3
 8030650:	f7fe fbbf 	bl	802edd2 <theta_point_to_montgomery_point>
 8030654:	4603      	mov	r3, r0
 8030656:	2b00      	cmp	r3, #0
 8030658:	d101      	bne.n	803065e <_theta_chain_compute_impl+0x176e>
            return 0;
 803065a:	2300      	movs	r3, #0
 803065c:	e017      	b.n	803068e <_theta_chain_compute_impl+0x179e>
    for (size_t j = 0; j < numP; ++j) {
 803065e:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030662:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8030666:	681b      	ldr	r3, [r3, #0]
 8030668:	3301      	adds	r3, #1
 803066a:	f507 5222 	add.w	r2, r7, #10368	@ 0x2880
 803066e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8030672:	6013      	str	r3, [r2, #0]
 8030674:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8030678:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 803067c:	681a      	ldr	r2, [r3, #0]
 803067e:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8030682:	f103 0310 	add.w	r3, r3, #16
 8030686:	681b      	ldr	r3, [r3, #0]
 8030688:	429a      	cmp	r2, r3
 803068a:	d398      	bcc.n	80305be <_theta_chain_compute_impl+0x16ce>
    }

    return 1;
 803068c:	2301      	movs	r3, #1
 803068e:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8030692:	4618      	mov	r0, r3
 8030694:	f507 5723 	add.w	r7, r7, #10432	@ 0x28c0
 8030698:	3724      	adds	r7, #36	@ 0x24
 803069a:	46bd      	mov	sp, r7
 803069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80306a0:	0803911c 	.word	0x0803911c
 80306a4:	08039140 	.word	0x08039140
 80306a8:	080393a0 	.word	0x080393a0
 80306ac:	08039178 	.word	0x08039178

080306b0 <theta_chain_compute_and_eval>:
                             const theta_kernel_couple_points_t *ker,
                             bool extra_torsion,
                             theta_couple_curve_t *E34,
                             theta_couple_point_t *P12,
                             size_t numP)
{
 80306b0:	b580      	push	{r7, lr}
 80306b2:	b08a      	sub	sp, #40	@ 0x28
 80306b4:	af06      	add	r7, sp, #24
 80306b6:	60f8      	str	r0, [r7, #12]
 80306b8:	60b9      	str	r1, [r7, #8]
 80306ba:	607a      	str	r2, [r7, #4]
 80306bc:	70fb      	strb	r3, [r7, #3]
    return _theta_chain_compute_impl(n, E12, ker, extra_torsion, E34, P12, numP, false, false);
 80306be:	78fa      	ldrb	r2, [r7, #3]
 80306c0:	2300      	movs	r3, #0
 80306c2:	9304      	str	r3, [sp, #16]
 80306c4:	2300      	movs	r3, #0
 80306c6:	9303      	str	r3, [sp, #12]
 80306c8:	6a3b      	ldr	r3, [r7, #32]
 80306ca:	9302      	str	r3, [sp, #8]
 80306cc:	69fb      	ldr	r3, [r7, #28]
 80306ce:	9301      	str	r3, [sp, #4]
 80306d0:	69bb      	ldr	r3, [r7, #24]
 80306d2:	9300      	str	r3, [sp, #0]
 80306d4:	4613      	mov	r3, r2
 80306d6:	687a      	ldr	r2, [r7, #4]
 80306d8:	68b9      	ldr	r1, [r7, #8]
 80306da:	68f8      	ldr	r0, [r7, #12]
 80306dc:	f7fe fc08 	bl	802eef0 <_theta_chain_compute_impl>
 80306e0:	4603      	mov	r3, r0
}
 80306e2:	4618      	mov	r0, r3
 80306e4:	3710      	adds	r7, #16
 80306e6:	46bd      	mov	sp, r7
 80306e8:	bd80      	pop	{r7, pc}

080306ea <theta_chain_compute_and_eval_verify>:
                                    const theta_kernel_couple_points_t *ker,
                                    bool extra_torsion,
                                    theta_couple_curve_t *E34,
                                    theta_couple_point_t *P12,
                                    size_t numP)
{
 80306ea:	b580      	push	{r7, lr}
 80306ec:	b08a      	sub	sp, #40	@ 0x28
 80306ee:	af06      	add	r7, sp, #24
 80306f0:	60f8      	str	r0, [r7, #12]
 80306f2:	60b9      	str	r1, [r7, #8]
 80306f4:	607a      	str	r2, [r7, #4]
 80306f6:	70fb      	strb	r3, [r7, #3]
    return _theta_chain_compute_impl(n, E12, ker, extra_torsion, E34, P12, numP, true, false);
 80306f8:	78fa      	ldrb	r2, [r7, #3]
 80306fa:	2300      	movs	r3, #0
 80306fc:	9304      	str	r3, [sp, #16]
 80306fe:	2301      	movs	r3, #1
 8030700:	9303      	str	r3, [sp, #12]
 8030702:	6a3b      	ldr	r3, [r7, #32]
 8030704:	9302      	str	r3, [sp, #8]
 8030706:	69fb      	ldr	r3, [r7, #28]
 8030708:	9301      	str	r3, [sp, #4]
 803070a:	69bb      	ldr	r3, [r7, #24]
 803070c:	9300      	str	r3, [sp, #0]
 803070e:	4613      	mov	r3, r2
 8030710:	687a      	ldr	r2, [r7, #4]
 8030712:	68b9      	ldr	r1, [r7, #8]
 8030714:	68f8      	ldr	r0, [r7, #12]
 8030716:	f7fe fbeb 	bl	802eef0 <_theta_chain_compute_impl>
 803071a:	4603      	mov	r3, r0
}
 803071c:	4618      	mov	r0, r3
 803071e:	3710      	adds	r7, #16
 8030720:	46bd      	mov	sp, r7
 8030722:	bd80      	pop	{r7, pc}

08030724 <theta_chain_compute_and_eval_randomized>:
                                        const theta_kernel_couple_points_t *ker,
                                        bool extra_torsion,
                                        theta_couple_curve_t *E34,
                                        theta_couple_point_t *P12,
                                        size_t numP)
{
 8030724:	b580      	push	{r7, lr}
 8030726:	b08a      	sub	sp, #40	@ 0x28
 8030728:	af06      	add	r7, sp, #24
 803072a:	60f8      	str	r0, [r7, #12]
 803072c:	60b9      	str	r1, [r7, #8]
 803072e:	607a      	str	r2, [r7, #4]
 8030730:	70fb      	strb	r3, [r7, #3]
    return _theta_chain_compute_impl(n, E12, ker, extra_torsion, E34, P12, numP, false, true);
 8030732:	78fa      	ldrb	r2, [r7, #3]
 8030734:	2301      	movs	r3, #1
 8030736:	9304      	str	r3, [sp, #16]
 8030738:	2300      	movs	r3, #0
 803073a:	9303      	str	r3, [sp, #12]
 803073c:	6a3b      	ldr	r3, [r7, #32]
 803073e:	9302      	str	r3, [sp, #8]
 8030740:	69fb      	ldr	r3, [r7, #28]
 8030742:	9301      	str	r3, [sp, #4]
 8030744:	69bb      	ldr	r3, [r7, #24]
 8030746:	9300      	str	r3, [sp, #0]
 8030748:	4613      	mov	r3, r2
 803074a:	687a      	ldr	r2, [r7, #4]
 803074c:	68b9      	ldr	r1, [r7, #8]
 803074e:	68f8      	ldr	r0, [r7, #12]
 8030750:	f7fe fbce 	bl	802eef0 <_theta_chain_compute_impl>
 8030754:	4603      	mov	r3, r0
}
 8030756:	4618      	mov	r0, r3
 8030758:	3710      	adds	r7, #16
 803075a:	46bd      	mov	sp, r7
 803075c:	bd80      	pop	{r7, pc}

0803075e <hadamard>:
{
 803075e:	b580      	push	{r7, lr}
 8030760:	b0ca      	sub	sp, #296	@ 0x128
 8030762:	af00      	add	r7, sp, #0
 8030764:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8030768:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 803076c:	6018      	str	r0, [r3, #0]
 803076e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8030772:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8030776:	6019      	str	r1, [r3, #0]
    fp2_add(&t1, &in->x, &in->y);
 8030778:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 803077c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8030780:	6819      	ldr	r1, [r3, #0]
 8030782:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8030786:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 803078a:	681b      	ldr	r3, [r3, #0]
 803078c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8030790:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8030794:	4618      	mov	r0, r3
 8030796:	f7e2 f961 	bl	8012a5c <fp2_add>
    fp2_sub(&t2, &in->x, &in->y);
 803079a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 803079e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80307a2:	6819      	ldr	r1, [r3, #0]
 80307a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80307a8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80307ac:	681b      	ldr	r3, [r3, #0]
 80307ae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80307b2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80307b6:	4618      	mov	r0, r3
 80307b8:	f7e2 f986 	bl	8012ac8 <fp2_sub>
    fp2_add(&t3, &in->z, &in->t);
 80307bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80307c0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80307c4:	681b      	ldr	r3, [r3, #0]
 80307c6:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80307ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80307ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80307d2:	681b      	ldr	r3, [r3, #0]
 80307d4:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 80307d8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80307dc:	4618      	mov	r0, r3
 80307de:	f7e2 f93d 	bl	8012a5c <fp2_add>
    fp2_sub(&t4, &in->z, &in->t);
 80307e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80307e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80307ea:	681b      	ldr	r3, [r3, #0]
 80307ec:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80307f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80307f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80307f8:	681b      	ldr	r3, [r3, #0]
 80307fa:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 80307fe:	f107 0308 	add.w	r3, r7, #8
 8030802:	4618      	mov	r0, r3
 8030804:	f7e2 f960 	bl	8012ac8 <fp2_sub>
    fp2_add(&out->x, &t1, &t3);
 8030808:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 803080c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8030810:	681b      	ldr	r3, [r3, #0]
 8030812:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8030816:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 803081a:	4618      	mov	r0, r3
 803081c:	f7e2 f91e 	bl	8012a5c <fp2_add>
    fp2_add(&out->y, &t2, &t4);
 8030820:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8030824:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8030828:	681b      	ldr	r3, [r3, #0]
 803082a:	3348      	adds	r3, #72	@ 0x48
 803082c:	f107 0208 	add.w	r2, r7, #8
 8030830:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8030834:	4618      	mov	r0, r3
 8030836:	f7e2 f911 	bl	8012a5c <fp2_add>
    fp2_sub(&out->z, &t1, &t3);
 803083a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 803083e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8030842:	681b      	ldr	r3, [r3, #0]
 8030844:	3390      	adds	r3, #144	@ 0x90
 8030846:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 803084a:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 803084e:	4618      	mov	r0, r3
 8030850:	f7e2 f93a 	bl	8012ac8 <fp2_sub>
    fp2_sub(&out->t, &t2, &t4);
 8030854:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8030858:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 803085c:	681b      	ldr	r3, [r3, #0]
 803085e:	33d8      	adds	r3, #216	@ 0xd8
 8030860:	f107 0208 	add.w	r2, r7, #8
 8030864:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8030868:	4618      	mov	r0, r3
 803086a:	f7e2 f92d 	bl	8012ac8 <fp2_sub>
}
 803086e:	bf00      	nop
 8030870:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8030874:	46bd      	mov	sp, r7
 8030876:	bd80      	pop	{r7, pc}

08030878 <pointwise_square>:
{
 8030878:	b580      	push	{r7, lr}
 803087a:	b082      	sub	sp, #8
 803087c:	af00      	add	r7, sp, #0
 803087e:	6078      	str	r0, [r7, #4]
 8030880:	6039      	str	r1, [r7, #0]
    fp2_sqr(&out->x, &in->x);
 8030882:	687b      	ldr	r3, [r7, #4]
 8030884:	683a      	ldr	r2, [r7, #0]
 8030886:	4611      	mov	r1, r2
 8030888:	4618      	mov	r0, r3
 803088a:	f7e2 f99f 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->y, &in->y);
 803088e:	687b      	ldr	r3, [r7, #4]
 8030890:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8030894:	683b      	ldr	r3, [r7, #0]
 8030896:	3348      	adds	r3, #72	@ 0x48
 8030898:	4619      	mov	r1, r3
 803089a:	4610      	mov	r0, r2
 803089c:	f7e2 f996 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->z, &in->z);
 80308a0:	687b      	ldr	r3, [r7, #4]
 80308a2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80308a6:	683b      	ldr	r3, [r7, #0]
 80308a8:	3390      	adds	r3, #144	@ 0x90
 80308aa:	4619      	mov	r1, r3
 80308ac:	4610      	mov	r0, r2
 80308ae:	f7e2 f98d 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->t, &in->t);
 80308b2:	687b      	ldr	r3, [r7, #4]
 80308b4:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 80308b8:	683b      	ldr	r3, [r7, #0]
 80308ba:	33d8      	adds	r3, #216	@ 0xd8
 80308bc:	4619      	mov	r1, r3
 80308be:	4610      	mov	r0, r2
 80308c0:	f7e2 f984 	bl	8012bcc <fp2_sqr>
}
 80308c4:	bf00      	nop
 80308c6:	3708      	adds	r7, #8
 80308c8:	46bd      	mov	sp, r7
 80308ca:	bd80      	pop	{r7, pc}

080308cc <to_squared_theta>:
{
 80308cc:	b580      	push	{r7, lr}
 80308ce:	b082      	sub	sp, #8
 80308d0:	af00      	add	r7, sp, #0
 80308d2:	6078      	str	r0, [r7, #4]
 80308d4:	6039      	str	r1, [r7, #0]
    pointwise_square(out, in);
 80308d6:	6839      	ldr	r1, [r7, #0]
 80308d8:	6878      	ldr	r0, [r7, #4]
 80308da:	f7ff ffcd 	bl	8030878 <pointwise_square>
    hadamard(out, out);
 80308de:	6879      	ldr	r1, [r7, #4]
 80308e0:	6878      	ldr	r0, [r7, #4]
 80308e2:	f7ff ff3c 	bl	803075e <hadamard>
}
 80308e6:	bf00      	nop
 80308e8:	3708      	adds	r7, #8
 80308ea:	46bd      	mov	sp, r7
 80308ec:	bd80      	pop	{r7, pc}

080308ee <theta_precomputation>:
#include "theta_structure.h"
#include <assert.h>

void
theta_precomputation(theta_structure_t *A)
{
 80308ee:	b580      	push	{r7, lr}
 80308f0:	b0ee      	sub	sp, #440	@ 0x1b8
 80308f2:	af00      	add	r7, sp, #0
 80308f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80308f8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80308fc:	6018      	str	r0, [r3, #0]

    if (A->precomputation) {
 80308fe:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030902:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030906:	681b      	ldr	r3, [r3, #0]
 8030908:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 803090c:	2b00      	cmp	r3, #0
 803090e:	f040 80d8 	bne.w	8030ac2 <theta_precomputation+0x1d4>
        return;
    }

    theta_point_t A_dual;
    to_squared_theta(&A_dual, &A->null_point);
 8030912:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030916:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 803091a:	681a      	ldr	r2, [r3, #0]
 803091c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8030920:	4611      	mov	r1, r2
 8030922:	4618      	mov	r0, r3
 8030924:	f7ff ffd2 	bl	80308cc <to_squared_theta>

    fp2_t t1, t2;
    fp2_mul(&t1, &A_dual.x, &A_dual.y);
 8030928:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 803092c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8030930:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8030934:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8030938:	4618      	mov	r0, r3
 803093a:	f7e2 f8f8 	bl	8012b2e <fp2_mul>
    fp2_mul(&t2, &A_dual.z, &A_dual.t);
 803093e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8030942:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8030946:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 803094a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 803094e:	f107 0308 	add.w	r3, r7, #8
 8030952:	4618      	mov	r0, r3
 8030954:	f7e2 f8eb 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->XYZ0, &t1, &A_dual.z);
 8030958:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 803095c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030960:	681b      	ldr	r3, [r3, #0]
 8030962:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8030966:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 803096a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 803096e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8030972:	4619      	mov	r1, r3
 8030974:	f7e2 f8db 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->XYT0, &t1, &A_dual.t);
 8030978:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 803097c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030980:	681b      	ldr	r3, [r3, #0]
 8030982:	f503 70fe 	add.w	r0, r3, #508	@ 0x1fc
 8030986:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 803098a:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 803098e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8030992:	4619      	mov	r1, r3
 8030994:	f7e2 f8cb 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->YZT0, &t2, &A_dual.y);
 8030998:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 803099c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80309a0:	681b      	ldr	r3, [r3, #0]
 80309a2:	f503 70b6 	add.w	r0, r3, #364	@ 0x16c
 80309a6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80309aa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80309ae:	f107 0308 	add.w	r3, r7, #8
 80309b2:	4619      	mov	r1, r3
 80309b4:	f7e2 f8bb 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->XZT0, &t2, &A_dual.x);
 80309b8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80309bc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80309c0:	681b      	ldr	r3, [r3, #0]
 80309c2:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80309c6:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80309ca:	f107 0108 	add.w	r1, r7, #8
 80309ce:	4618      	mov	r0, r3
 80309d0:	f7e2 f8ad 	bl	8012b2e <fp2_mul>

    fp2_mul(&t1, &A->null_point.x, &A->null_point.y);
 80309d4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80309d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80309dc:	6819      	ldr	r1, [r3, #0]
 80309de:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80309e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80309e6:	681b      	ldr	r3, [r3, #0]
 80309e8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80309ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80309f0:	4618      	mov	r0, r3
 80309f2:	f7e2 f89c 	bl	8012b2e <fp2_mul>
    fp2_mul(&t2, &A->null_point.z, &A->null_point.t);
 80309f6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80309fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80309fe:	681b      	ldr	r3, [r3, #0]
 8030a00:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8030a04:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a08:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a0c:	681b      	ldr	r3, [r3, #0]
 8030a0e:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8030a12:	f107 0308 	add.w	r3, r7, #8
 8030a16:	4618      	mov	r0, r3
 8030a18:	f7e2 f889 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->xyz0, &t1, &A->null_point.z);
 8030a1c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a20:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a24:	681b      	ldr	r3, [r3, #0]
 8030a26:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8030a2a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a2e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a32:	681b      	ldr	r3, [r3, #0]
 8030a34:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8030a38:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8030a3c:	4619      	mov	r1, r3
 8030a3e:	f7e2 f876 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->xyt0, &t1, &A->null_point.t);
 8030a42:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a46:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a4a:	681b      	ldr	r3, [r3, #0]
 8030a4c:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8030a50:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a54:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a58:	681b      	ldr	r3, [r3, #0]
 8030a5a:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8030a5e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8030a62:	4619      	mov	r1, r3
 8030a64:	f7e2 f863 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->yzt0, &t2, &A->null_point.y);
 8030a68:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a6c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a70:	681b      	ldr	r3, [r3, #0]
 8030a72:	f503 7023 	add.w	r0, r3, #652	@ 0x28c
 8030a76:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a7a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a7e:	681b      	ldr	r3, [r3, #0]
 8030a80:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8030a84:	f107 0308 	add.w	r3, r7, #8
 8030a88:	4619      	mov	r1, r3
 8030a8a:	f7e2 f850 	bl	8012b2e <fp2_mul>
    fp2_mul(&A->xzt0, &t2, &A->null_point.x);
 8030a8e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030a92:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030a96:	681b      	ldr	r3, [r3, #0]
 8030a98:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8030a9c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030aa0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030aa4:	681a      	ldr	r2, [r3, #0]
 8030aa6:	f107 0308 	add.w	r3, r7, #8
 8030aaa:	4619      	mov	r1, r3
 8030aac:	f7e2 f83f 	bl	8012b2e <fp2_mul>

    A->precomputation = true;
 8030ab0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8030ab4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8030ab8:	681b      	ldr	r3, [r3, #0]
 8030aba:	2201      	movs	r2, #1
 8030abc:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8030ac0:	e000      	b.n	8030ac4 <theta_precomputation+0x1d6>
        return;
 8030ac2:	bf00      	nop
}
 8030ac4:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8030ac8:	46bd      	mov	sp, r7
 8030aca:	bd80      	pop	{r7, pc}

08030acc <double_point>:

void
double_point(theta_point_t *out, theta_structure_t *A, const theta_point_t *in)
{
 8030acc:	b580      	push	{r7, lr}
 8030ace:	b084      	sub	sp, #16
 8030ad0:	af00      	add	r7, sp, #0
 8030ad2:	60f8      	str	r0, [r7, #12]
 8030ad4:	60b9      	str	r1, [r7, #8]
 8030ad6:	607a      	str	r2, [r7, #4]
    to_squared_theta(out, in);
 8030ad8:	6879      	ldr	r1, [r7, #4]
 8030ada:	68f8      	ldr	r0, [r7, #12]
 8030adc:	f7ff fef6 	bl	80308cc <to_squared_theta>
    fp2_sqr(&out->x, &out->x);
 8030ae0:	68fb      	ldr	r3, [r7, #12]
 8030ae2:	68fa      	ldr	r2, [r7, #12]
 8030ae4:	4611      	mov	r1, r2
 8030ae6:	4618      	mov	r0, r3
 8030ae8:	f7e2 f870 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->y, &out->y);
 8030aec:	68fb      	ldr	r3, [r7, #12]
 8030aee:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8030af2:	68fb      	ldr	r3, [r7, #12]
 8030af4:	3348      	adds	r3, #72	@ 0x48
 8030af6:	4619      	mov	r1, r3
 8030af8:	4610      	mov	r0, r2
 8030afa:	f7e2 f867 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->z, &out->z);
 8030afe:	68fb      	ldr	r3, [r7, #12]
 8030b00:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8030b04:	68fb      	ldr	r3, [r7, #12]
 8030b06:	3390      	adds	r3, #144	@ 0x90
 8030b08:	4619      	mov	r1, r3
 8030b0a:	4610      	mov	r0, r2
 8030b0c:	f7e2 f85e 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&out->t, &out->t);
 8030b10:	68fb      	ldr	r3, [r7, #12]
 8030b12:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8030b16:	68fb      	ldr	r3, [r7, #12]
 8030b18:	33d8      	adds	r3, #216	@ 0xd8
 8030b1a:	4619      	mov	r1, r3
 8030b1c:	4610      	mov	r0, r2
 8030b1e:	f7e2 f855 	bl	8012bcc <fp2_sqr>

    if (!A->precomputation) {
 8030b22:	68bb      	ldr	r3, [r7, #8]
 8030b24:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8030b28:	f083 0301 	eor.w	r3, r3, #1
 8030b2c:	b2db      	uxtb	r3, r3
 8030b2e:	2b00      	cmp	r3, #0
 8030b30:	d002      	beq.n	8030b38 <double_point+0x6c>
        theta_precomputation(A);
 8030b32:	68b8      	ldr	r0, [r7, #8]
 8030b34:	f7ff fedb 	bl	80308ee <theta_precomputation>
    }
    fp2_mul(&out->x, &out->x, &A->YZT0);
 8030b38:	68f8      	ldr	r0, [r7, #12]
 8030b3a:	68f9      	ldr	r1, [r7, #12]
 8030b3c:	68bb      	ldr	r3, [r7, #8]
 8030b3e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8030b42:	461a      	mov	r2, r3
 8030b44:	f7e1 fff3 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->y, &out->y, &A->XZT0);
 8030b48:	68fb      	ldr	r3, [r7, #12]
 8030b4a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8030b4e:	68fb      	ldr	r3, [r7, #12]
 8030b50:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8030b54:	68bb      	ldr	r3, [r7, #8]
 8030b56:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8030b5a:	461a      	mov	r2, r3
 8030b5c:	f7e1 ffe7 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->z, &out->z, &A->XYT0);
 8030b60:	68fb      	ldr	r3, [r7, #12]
 8030b62:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8030b66:	68fb      	ldr	r3, [r7, #12]
 8030b68:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8030b6c:	68bb      	ldr	r3, [r7, #8]
 8030b6e:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8030b72:	461a      	mov	r2, r3
 8030b74:	f7e1 ffdb 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->t, &out->t, &A->XYZ0);
 8030b78:	68fb      	ldr	r3, [r7, #12]
 8030b7a:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8030b7e:	68fb      	ldr	r3, [r7, #12]
 8030b80:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8030b84:	68bb      	ldr	r3, [r7, #8]
 8030b86:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8030b8a:	461a      	mov	r2, r3
 8030b8c:	f7e1 ffcf 	bl	8012b2e <fp2_mul>

    hadamard(out, out);
 8030b90:	68f9      	ldr	r1, [r7, #12]
 8030b92:	68f8      	ldr	r0, [r7, #12]
 8030b94:	f7ff fde3 	bl	803075e <hadamard>

    fp2_mul(&out->x, &out->x, &A->yzt0);
 8030b98:	68f8      	ldr	r0, [r7, #12]
 8030b9a:	68f9      	ldr	r1, [r7, #12]
 8030b9c:	68bb      	ldr	r3, [r7, #8]
 8030b9e:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8030ba2:	461a      	mov	r2, r3
 8030ba4:	f7e1 ffc3 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->y, &out->y, &A->xzt0);
 8030ba8:	68fb      	ldr	r3, [r7, #12]
 8030baa:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8030bae:	68fb      	ldr	r3, [r7, #12]
 8030bb0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8030bb4:	68bb      	ldr	r3, [r7, #8]
 8030bb6:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8030bba:	461a      	mov	r2, r3
 8030bbc:	f7e1 ffb7 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->z, &out->z, &A->xyt0);
 8030bc0:	68fb      	ldr	r3, [r7, #12]
 8030bc2:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8030bc6:	68fb      	ldr	r3, [r7, #12]
 8030bc8:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8030bcc:	68bb      	ldr	r3, [r7, #8]
 8030bce:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8030bd2:	461a      	mov	r2, r3
 8030bd4:	f7e1 ffab 	bl	8012b2e <fp2_mul>
    fp2_mul(&out->t, &out->t, &A->xyz0);
 8030bd8:	68fb      	ldr	r3, [r7, #12]
 8030bda:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8030bde:	68fb      	ldr	r3, [r7, #12]
 8030be0:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8030be4:	68bb      	ldr	r3, [r7, #8]
 8030be6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8030bea:	461a      	mov	r2, r3
 8030bec:	f7e1 ff9f 	bl	8012b2e <fp2_mul>
}
 8030bf0:	bf00      	nop
 8030bf2:	3710      	adds	r7, #16
 8030bf4:	46bd      	mov	sp, r7
 8030bf6:	bd80      	pop	{r7, pc}

08030bf8 <double_iter>:

void
double_iter(theta_point_t *out, theta_structure_t *A, const theta_point_t *in, int exp)
{
 8030bf8:	b580      	push	{r7, lr}
 8030bfa:	b086      	sub	sp, #24
 8030bfc:	af00      	add	r7, sp, #0
 8030bfe:	60f8      	str	r0, [r7, #12]
 8030c00:	60b9      	str	r1, [r7, #8]
 8030c02:	607a      	str	r2, [r7, #4]
 8030c04:	603b      	str	r3, [r7, #0]
    if (exp == 0) {
 8030c06:	683b      	ldr	r3, [r7, #0]
 8030c08:	2b00      	cmp	r3, #0
 8030c0a:	d109      	bne.n	8030c20 <double_iter+0x28>
        *out = *in;
 8030c0c:	68fa      	ldr	r2, [r7, #12]
 8030c0e:	687b      	ldr	r3, [r7, #4]
 8030c10:	4610      	mov	r0, r2
 8030c12:	4619      	mov	r1, r3
 8030c14:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8030c18:	461a      	mov	r2, r3
 8030c1a:	f005 f8c0 	bl	8035d9e <memcpy>
        double_point(out, A, in);
        for (int i = 1; i < exp; i++) {
            double_point(out, A, out);
        }
    }
}
 8030c1e:	e013      	b.n	8030c48 <double_iter+0x50>
        double_point(out, A, in);
 8030c20:	687a      	ldr	r2, [r7, #4]
 8030c22:	68b9      	ldr	r1, [r7, #8]
 8030c24:	68f8      	ldr	r0, [r7, #12]
 8030c26:	f7ff ff51 	bl	8030acc <double_point>
        for (int i = 1; i < exp; i++) {
 8030c2a:	2301      	movs	r3, #1
 8030c2c:	617b      	str	r3, [r7, #20]
 8030c2e:	e007      	b.n	8030c40 <double_iter+0x48>
            double_point(out, A, out);
 8030c30:	68fa      	ldr	r2, [r7, #12]
 8030c32:	68b9      	ldr	r1, [r7, #8]
 8030c34:	68f8      	ldr	r0, [r7, #12]
 8030c36:	f7ff ff49 	bl	8030acc <double_point>
        for (int i = 1; i < exp; i++) {
 8030c3a:	697b      	ldr	r3, [r7, #20]
 8030c3c:	3301      	adds	r3, #1
 8030c3e:	617b      	str	r3, [r7, #20]
 8030c40:	697a      	ldr	r2, [r7, #20]
 8030c42:	683b      	ldr	r3, [r7, #0]
 8030c44:	429a      	cmp	r2, r3
 8030c46:	dbf3      	blt.n	8030c30 <double_iter+0x38>
}
 8030c48:	bf00      	nop
 8030c4a:	3718      	adds	r7, #24
 8030c4c:	46bd      	mov	sp, r7
 8030c4e:	bd80      	pop	{r7, pc}

08030c50 <is_product_theta_point>:

uint32_t
is_product_theta_point(const theta_point_t *P)
{
 8030c50:	b580      	push	{r7, lr}
 8030c52:	b0a6      	sub	sp, #152	@ 0x98
 8030c54:	af00      	add	r7, sp, #0
 8030c56:	6078      	str	r0, [r7, #4]
    fp2_t t1, t2;
    fp2_mul(&t1, &P->x, &P->t);
 8030c58:	6879      	ldr	r1, [r7, #4]
 8030c5a:	687b      	ldr	r3, [r7, #4]
 8030c5c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8030c60:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8030c64:	4618      	mov	r0, r3
 8030c66:	f7e1 ff62 	bl	8012b2e <fp2_mul>
    fp2_mul(&t2, &P->y, &P->z);
 8030c6a:	687b      	ldr	r3, [r7, #4]
 8030c6c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8030c70:	687b      	ldr	r3, [r7, #4]
 8030c72:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8030c76:	f107 0308 	add.w	r3, r7, #8
 8030c7a:	4618      	mov	r0, r3
 8030c7c:	f7e1 ff57 	bl	8012b2e <fp2_mul>
    return fp2_is_equal(&t1, &t2);
 8030c80:	f107 0208 	add.w	r2, r7, #8
 8030c84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8030c88:	4611      	mov	r1, r2
 8030c8a:	4618      	mov	r0, r3
 8030c8c:	f7e1 fe9a 	bl	80129c4 <fp2_is_equal>
 8030c90:	4603      	mov	r3, r0
}
 8030c92:	4618      	mov	r0, r3
 8030c94:	3798      	adds	r7, #152	@ 0x98
 8030c96:	46bd      	mov	sp, r7
 8030c98:	bd80      	pop	{r7, pc}

08030c9a <copy_point>:
{
 8030c9a:	b580      	push	{r7, lr}
 8030c9c:	b082      	sub	sp, #8
 8030c9e:	af00      	add	r7, sp, #0
 8030ca0:	6078      	str	r0, [r7, #4]
 8030ca2:	6039      	str	r1, [r7, #0]
    fp2_copy(&P->x, &Q->x);
 8030ca4:	687b      	ldr	r3, [r7, #4]
 8030ca6:	683a      	ldr	r2, [r7, #0]
 8030ca8:	4611      	mov	r1, r2
 8030caa:	4618      	mov	r0, r3
 8030cac:	f7e1 febe 	bl	8012a2c <fp2_copy>
    fp2_copy(&P->z, &Q->z);
 8030cb0:	687b      	ldr	r3, [r7, #4]
 8030cb2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8030cb6:	683b      	ldr	r3, [r7, #0]
 8030cb8:	3348      	adds	r3, #72	@ 0x48
 8030cba:	4619      	mov	r1, r3
 8030cbc:	4610      	mov	r0, r2
 8030cbe:	f7e1 feb5 	bl	8012a2c <fp2_copy>
}
 8030cc2:	bf00      	nop
 8030cc4:	3708      	adds	r7, #8
 8030cc6:	46bd      	mov	sp, r7
 8030cc8:	bd80      	pop	{r7, pc}

08030cca <copy_basis>:
{
 8030cca:	b580      	push	{r7, lr}
 8030ccc:	b082      	sub	sp, #8
 8030cce:	af00      	add	r7, sp, #0
 8030cd0:	6078      	str	r0, [r7, #4]
 8030cd2:	6039      	str	r1, [r7, #0]
    copy_point(&B1->P, &B0->P);
 8030cd4:	687b      	ldr	r3, [r7, #4]
 8030cd6:	683a      	ldr	r2, [r7, #0]
 8030cd8:	4611      	mov	r1, r2
 8030cda:	4618      	mov	r0, r3
 8030cdc:	f7ff ffdd 	bl	8030c9a <copy_point>
    copy_point(&B1->Q, &B0->Q);
 8030ce0:	687b      	ldr	r3, [r7, #4]
 8030ce2:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8030ce6:	683b      	ldr	r3, [r7, #0]
 8030ce8:	3390      	adds	r3, #144	@ 0x90
 8030cea:	4619      	mov	r1, r3
 8030cec:	4610      	mov	r0, r2
 8030cee:	f7ff ffd4 	bl	8030c9a <copy_point>
    copy_point(&B1->PmQ, &B0->PmQ);
 8030cf2:	687b      	ldr	r3, [r7, #4]
 8030cf4:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8030cf8:	683b      	ldr	r3, [r7, #0]
 8030cfa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8030cfe:	4619      	mov	r1, r3
 8030d00:	4610      	mov	r0, r2
 8030d02:	f7ff ffca 	bl	8030c9a <copy_point>
}
 8030d06:	bf00      	nop
 8030d08:	3708      	adds	r7, #8
 8030d0a:	46bd      	mov	sp, r7
 8030d0c:	bd80      	pop	{r7, pc}

08030d0e <copy_curve>:
{
 8030d0e:	b580      	push	{r7, lr}
 8030d10:	b082      	sub	sp, #8
 8030d12:	af00      	add	r7, sp, #0
 8030d14:	6078      	str	r0, [r7, #4]
 8030d16:	6039      	str	r1, [r7, #0]
    fp2_copy(&(E1->A), &(E2->A));
 8030d18:	687b      	ldr	r3, [r7, #4]
 8030d1a:	683a      	ldr	r2, [r7, #0]
 8030d1c:	4611      	mov	r1, r2
 8030d1e:	4618      	mov	r0, r3
 8030d20:	f7e1 fe84 	bl	8012a2c <fp2_copy>
    fp2_copy(&(E1->C), &(E2->C));
 8030d24:	687b      	ldr	r3, [r7, #4]
 8030d26:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8030d2a:	683b      	ldr	r3, [r7, #0]
 8030d2c:	3348      	adds	r3, #72	@ 0x48
 8030d2e:	4619      	mov	r1, r3
 8030d30:	4610      	mov	r0, r2
 8030d32:	f7e1 fe7b 	bl	8012a2c <fp2_copy>
    E1->is_A24_computed_and_normalized = E2->is_A24_computed_and_normalized;
 8030d36:	683b      	ldr	r3, [r7, #0]
 8030d38:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8030d3c:	687b      	ldr	r3, [r7, #4]
 8030d3e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    copy_point(&E1->A24, &E2->A24);
 8030d42:	687b      	ldr	r3, [r7, #4]
 8030d44:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8030d48:	683b      	ldr	r3, [r7, #0]
 8030d4a:	3390      	adds	r3, #144	@ 0x90
 8030d4c:	4619      	mov	r1, r3
 8030d4e:	4610      	mov	r0, r2
 8030d50:	f7ff ffa3 	bl	8030c9a <copy_point>
}
 8030d54:	bf00      	nop
 8030d56:	3708      	adds	r7, #8
 8030d58:	46bd      	mov	sp, r7
 8030d5a:	bd80      	pop	{r7, pc}

08030d5c <test_point_order_twof>:
{
 8030d5c:	b580      	push	{r7, lr}
 8030d5e:	b0f2      	sub	sp, #456	@ 0x1c8
 8030d60:	af00      	add	r7, sp, #0
 8030d62:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030d66:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8030d6a:	6018      	str	r0, [r3, #0]
 8030d6c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030d70:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8030d74:	6019      	str	r1, [r3, #0]
 8030d76:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030d7a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8030d7e:	601a      	str	r2, [r3, #0]
    test = *P;
 8030d80:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030d84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8030d88:	681a      	ldr	r2, [r3, #0]
 8030d8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8030d8e:	4611      	mov	r1, r2
 8030d90:	2290      	movs	r2, #144	@ 0x90
 8030d92:	4618      	mov	r0, r3
 8030d94:	f005 f803 	bl	8035d9e <memcpy>
    copy_curve(&curve, E);
 8030d98:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030d9c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8030da0:	f107 0214 	add.w	r2, r7, #20
 8030da4:	6819      	ldr	r1, [r3, #0]
 8030da6:	4610      	mov	r0, r2
 8030da8:	f7ff ffb1 	bl	8030d0e <copy_curve>
    if (ec_is_zero(&test))
 8030dac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8030db0:	4618      	mov	r0, r3
 8030db2:	f7da fc38 	bl	800b626 <ec_is_zero>
 8030db6:	4603      	mov	r3, r0
 8030db8:	2b00      	cmp	r3, #0
 8030dba:	d001      	beq.n	8030dc0 <test_point_order_twof+0x64>
        return 0;
 8030dbc:	2300      	movs	r3, #0
 8030dbe:	e026      	b.n	8030e0e <test_point_order_twof+0xb2>
    ec_dbl_iter(&test, t - 1, &test, &curve);
 8030dc0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030dc4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8030dc8:	681b      	ldr	r3, [r3, #0]
 8030dca:	1e59      	subs	r1, r3, #1
 8030dcc:	f107 0314 	add.w	r3, r7, #20
 8030dd0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8030dd4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8030dd8:	f7db fe9a 	bl	800cb10 <ec_dbl_iter>
    if (ec_is_zero(&test))
 8030ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8030de0:	4618      	mov	r0, r3
 8030de2:	f7da fc20 	bl	800b626 <ec_is_zero>
 8030de6:	4603      	mov	r3, r0
 8030de8:	2b00      	cmp	r3, #0
 8030dea:	d001      	beq.n	8030df0 <test_point_order_twof+0x94>
        return 0;
 8030dec:	2300      	movs	r3, #0
 8030dee:	e00e      	b.n	8030e0e <test_point_order_twof+0xb2>
    ec_dbl(&test, &test, &curve);
 8030df0:	f107 0214 	add.w	r2, r7, #20
 8030df4:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8030df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8030dfc:	4618      	mov	r0, r3
 8030dfe:	f7db fe55 	bl	800caac <ec_dbl>
    return ec_is_zero(&test);
 8030e02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8030e06:	4618      	mov	r0, r3
 8030e08:	f7da fc0d 	bl	800b626 <ec_is_zero>
 8030e0c:	4603      	mov	r3, r0
}
 8030e0e:	4618      	mov	r0, r3
 8030e10:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 8030e14:	46bd      	mov	sp, r7
 8030e16:	bd80      	pop	{r7, pc}

08030e18 <test_basis_order_twof>:
{
 8030e18:	b580      	push	{r7, lr}
 8030e1a:	b088      	sub	sp, #32
 8030e1c:	af00      	add	r7, sp, #0
 8030e1e:	60f8      	str	r0, [r7, #12]
 8030e20:	60b9      	str	r1, [r7, #8]
 8030e22:	607a      	str	r2, [r7, #4]
    int check_P = test_point_order_twof(&B->P, E, t);
 8030e24:	68fb      	ldr	r3, [r7, #12]
 8030e26:	687a      	ldr	r2, [r7, #4]
 8030e28:	68b9      	ldr	r1, [r7, #8]
 8030e2a:	4618      	mov	r0, r3
 8030e2c:	f7ff ff96 	bl	8030d5c <test_point_order_twof>
 8030e30:	61f8      	str	r0, [r7, #28]
    int check_Q = test_point_order_twof(&B->Q, E, t);
 8030e32:	68fb      	ldr	r3, [r7, #12]
 8030e34:	3390      	adds	r3, #144	@ 0x90
 8030e36:	687a      	ldr	r2, [r7, #4]
 8030e38:	68b9      	ldr	r1, [r7, #8]
 8030e3a:	4618      	mov	r0, r3
 8030e3c:	f7ff ff8e 	bl	8030d5c <test_point_order_twof>
 8030e40:	61b8      	str	r0, [r7, #24]
    int check_PmQ = test_point_order_twof(&B->PmQ, E, t);
 8030e42:	68fb      	ldr	r3, [r7, #12]
 8030e44:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8030e48:	687a      	ldr	r2, [r7, #4]
 8030e4a:	68b9      	ldr	r1, [r7, #8]
 8030e4c:	4618      	mov	r0, r3
 8030e4e:	f7ff ff85 	bl	8030d5c <test_point_order_twof>
 8030e52:	6178      	str	r0, [r7, #20]
    return check_P & check_Q & check_PmQ;
 8030e54:	69fa      	ldr	r2, [r7, #28]
 8030e56:	69bb      	ldr	r3, [r7, #24]
 8030e58:	401a      	ands	r2, r3
 8030e5a:	697b      	ldr	r3, [r7, #20]
 8030e5c:	4013      	ands	r3, r2
}
 8030e5e:	4618      	mov	r0, r3
 8030e60:	3720      	adds	r7, #32
 8030e62:	46bd      	mov	sp, r7
 8030e64:	bd80      	pop	{r7, pc}

08030e66 <check_canonical_basis_change_matrix>:

// Check that the basis change matrix elements are canonical
// representatives modulo 2^(SQIsign_response_length + 2).
static int
check_canonical_basis_change_matrix(const signature_t *sig)
{
 8030e66:	b580      	push	{r7, lr}
 8030e68:	b08e      	sub	sp, #56	@ 0x38
 8030e6a:	af00      	add	r7, sp, #0
 8030e6c:	6078      	str	r0, [r7, #4]
    // This works as long as all values in sig->mat_Bchall_can_to_B_chall are
    // positive integers.
    int ret = 1;
 8030e6e:	2301      	movs	r3, #1
 8030e70:	637b      	str	r3, [r7, #52]	@ 0x34
    scalar_t aux;

    memset(aux, 0, NWORDS_ORDER * sizeof(digit_t));
 8030e72:	f107 030c 	add.w	r3, r7, #12
 8030e76:	2220      	movs	r2, #32
 8030e78:	2100      	movs	r1, #0
 8030e7a:	4618      	mov	r0, r3
 8030e7c:	f004 fec0 	bl	8035c00 <memset>
    aux[0] = 0x1;
 8030e80:	2301      	movs	r3, #1
 8030e82:	60fb      	str	r3, [r7, #12]
    multiple_mp_shiftl(aux, SQIsign_response_length + HD_extra_torsion - (int)sig->backtracking, NWORDS_ORDER);
 8030e84:	687b      	ldr	r3, [r7, #4]
 8030e86:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8030e8a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8030e8e:	4619      	mov	r1, r3
 8030e90:	f107 030c 	add.w	r3, r7, #12
 8030e94:	2208      	movs	r2, #8
 8030e96:	4618      	mov	r0, r3
 8030e98:	f7f6 ff1c 	bl	8027cd4 <sqisign_gen_multiple_mp_shiftl>

    for (int i = 0; i < 2; i++) {
 8030e9c:	2300      	movs	r3, #0
 8030e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8030ea0:	e01f      	b.n	8030ee2 <check_canonical_basis_change_matrix+0x7c>
        for (int j = 0; j < 2; j++) {
 8030ea2:	2300      	movs	r3, #0
 8030ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030ea6:	e016      	b.n	8030ed6 <check_canonical_basis_change_matrix+0x70>
            if (mp_compare(aux, sig->mat_Bchall_can_to_B_chall[i][j], NWORDS_ORDER) <= 0) {
 8030ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8030eaa:	005a      	lsls	r2, r3, #1
 8030eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030eae:	4413      	add	r3, r2
 8030eb0:	015b      	lsls	r3, r3, #5
 8030eb2:	3348      	adds	r3, #72	@ 0x48
 8030eb4:	687a      	ldr	r2, [r7, #4]
 8030eb6:	4413      	add	r3, r2
 8030eb8:	1d19      	adds	r1, r3, #4
 8030eba:	f107 030c 	add.w	r3, r7, #12
 8030ebe:	2208      	movs	r2, #8
 8030ec0:	4618      	mov	r0, r3
 8030ec2:	f7f6 ffd8 	bl	8027e76 <sqisign_gen_mp_compare>
 8030ec6:	4603      	mov	r3, r0
 8030ec8:	2b00      	cmp	r3, #0
 8030eca:	dc01      	bgt.n	8030ed0 <check_canonical_basis_change_matrix+0x6a>
                ret = 0;
 8030ecc:	2300      	movs	r3, #0
 8030ece:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int j = 0; j < 2; j++) {
 8030ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030ed2:	3301      	adds	r3, #1
 8030ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030ed8:	2b01      	cmp	r3, #1
 8030eda:	dde5      	ble.n	8030ea8 <check_canonical_basis_change_matrix+0x42>
    for (int i = 0; i < 2; i++) {
 8030edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8030ede:	3301      	adds	r3, #1
 8030ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8030ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8030ee4:	2b01      	cmp	r3, #1
 8030ee6:	dddc      	ble.n	8030ea2 <check_canonical_basis_change_matrix+0x3c>
            }
        }
    }

    return ret;
 8030ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8030eea:	4618      	mov	r0, r3
 8030eec:	3738      	adds	r7, #56	@ 0x38
 8030eee:	46bd      	mov	sp, r7
 8030ef0:	bd80      	pop	{r7, pc}

08030ef2 <compute_challenge_verify>:

// Compute the 2^n isogeny from the signature with kernel
// P + [chall_coeff]Q and store the codomain in E_chall
static int
compute_challenge_verify(ec_curve_t *E_chall, const signature_t *sig, const ec_curve_t *Epk, const uint8_t hint_pk)
{
 8030ef2:	b590      	push	{r4, r7, lr}
 8030ef4:	f5ad 7d61 	sub.w	sp, sp, #900	@ 0x384
 8030ef8:	af02      	add	r7, sp, #8
 8030efa:	f507 745e 	add.w	r4, r7, #888	@ 0x378
 8030efe:	f5a4 745b 	sub.w	r4, r4, #876	@ 0x36c
 8030f02:	6020      	str	r0, [r4, #0]
 8030f04:	f507 705e 	add.w	r0, r7, #888	@ 0x378
 8030f08:	f5a0 705c 	sub.w	r0, r0, #880	@ 0x370
 8030f0c:	6001      	str	r1, [r0, #0]
 8030f0e:	f507 715e 	add.w	r1, r7, #888	@ 0x378
 8030f12:	f5a1 715d 	sub.w	r1, r1, #884	@ 0x374
 8030f16:	600a      	str	r2, [r1, #0]
 8030f18:	461a      	mov	r2, r3
 8030f1a:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030f1e:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8030f22:	701a      	strb	r2, [r3, #0]
    ec_basis_t bas_EA;
    ec_isog_even_t phi_chall;

    // Set domain and length of 2^n isogeny
    copy_curve(&phi_chall.curve, Epk);
 8030f24:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030f28:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8030f2c:	f107 0210 	add.w	r2, r7, #16
 8030f30:	6819      	ldr	r1, [r3, #0]
 8030f32:	4610      	mov	r0, r2
 8030f34:	f7ff feeb 	bl	8030d0e <copy_curve>
    phi_chall.length = TORSION_EVEN_POWER - sig->backtracking;
 8030f38:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030f3c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8030f40:	681b      	ldr	r3, [r3, #0]
 8030f42:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8030f46:	f1c3 03f8 	rsb	r3, r3, #248	@ 0xf8
 8030f4a:	461a      	mov	r2, r3
 8030f4c:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030f50:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8030f54:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4

    // Compute the basis from the supplied hint
    if (!ec_curve_to_basis_2f_from_hint(&bas_EA, &phi_chall.curve, TORSION_EVEN_POWER, hint_pk)) // canonical
 8030f58:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030f5c:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8030f60:	781b      	ldrb	r3, [r3, #0]
 8030f62:	f107 0110 	add.w	r1, r7, #16
 8030f66:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 8030f6a:	22f8      	movs	r2, #248	@ 0xf8
 8030f6c:	f7d1 fc70 	bl	8002850 <ec_curve_to_basis_2f_from_hint>
 8030f70:	4603      	mov	r3, r0
 8030f72:	2b00      	cmp	r3, #0
 8030f74:	d101      	bne.n	8030f7a <compute_challenge_verify+0x88>
        return 0;
 8030f76:	2300      	movs	r3, #0
 8030f78:	e051      	b.n	803101e <compute_challenge_verify+0x12c>

    // recovering the exact challenge
    {
        if (!ec_ladder3pt(&phi_chall.kernel, sig->chall_coeff, &bas_EA.P, &bas_EA.Q, &bas_EA.PmQ, &phi_chall.curve)) {
 8030f7a:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030f7e:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8030f82:	681b      	ldr	r3, [r3, #0]
 8030f84:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8030f88:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030f8c:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 8030f90:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8030f94:	f107 0310 	add.w	r3, r7, #16
 8030f98:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8030f9c:	f107 0310 	add.w	r3, r7, #16
 8030fa0:	9301      	str	r3, [sp, #4]
 8030fa2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8030fa6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8030faa:	9300      	str	r3, [sp, #0]
 8030fac:	4623      	mov	r3, r4
 8030fae:	f7db fca7 	bl	800c900 <ec_ladder3pt>
 8030fb2:	4603      	mov	r3, r0
 8030fb4:	2b00      	cmp	r3, #0
 8030fb6:	d101      	bne.n	8030fbc <compute_challenge_verify+0xca>
            return 0;
 8030fb8:	2300      	movs	r3, #0
 8030fba:	e030      	b.n	803101e <compute_challenge_verify+0x12c>
        };
    }

    // Double the kernel until is has the correct order
    ec_dbl_iter(&phi_chall.kernel, sig->backtracking, &phi_chall.kernel, &phi_chall.curve);
 8030fbc:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030fc0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8030fc4:	681b      	ldr	r3, [r3, #0]
 8030fc6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8030fca:	461c      	mov	r4, r3
 8030fcc:	f107 0110 	add.w	r1, r7, #16
 8030fd0:	f107 0310 	add.w	r3, r7, #16
 8030fd4:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8030fd8:	f107 0310 	add.w	r3, r7, #16
 8030fdc:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8030fe0:	460b      	mov	r3, r1
 8030fe2:	4621      	mov	r1, r4
 8030fe4:	f7db fd94 	bl	800cb10 <ec_dbl_iter>

    // Compute the codomain
    copy_curve(E_chall, &phi_chall.curve);
 8030fe8:	f107 0210 	add.w	r2, r7, #16
 8030fec:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8030ff0:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8030ff4:	4611      	mov	r1, r2
 8030ff6:	6818      	ldr	r0, [r3, #0]
 8030ff8:	f7ff fe89 	bl	8030d0e <copy_curve>
    if (ec_eval_even(E_chall, &phi_chall, NULL, 0))
 8030ffc:	f107 0110 	add.w	r1, r7, #16
 8031000:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8031004:	f5a3 705b 	sub.w	r0, r3, #876	@ 0x36c
 8031008:	2300      	movs	r3, #0
 803100a:	2200      	movs	r2, #0
 803100c:	6800      	ldr	r0, [r0, #0]
 803100e:	f7ed facd 	bl	801e5ac <ec_eval_even>
 8031012:	4603      	mov	r3, r0
 8031014:	2b00      	cmp	r3, #0
 8031016:	d001      	beq.n	803101c <compute_challenge_verify+0x12a>
        return 0;
 8031018:	2300      	movs	r3, #0
 803101a:	e000      	b.n	803101e <compute_challenge_verify+0x12c>
    return 1;
 803101c:	2301      	movs	r3, #1
}
 803101e:	4618      	mov	r0, r3
 8031020:	f507 775f 	add.w	r7, r7, #892	@ 0x37c
 8031024:	46bd      	mov	sp, r7
 8031026:	bd90      	pop	{r4, r7, pc}

08031028 <matrix_scalar_application_even_basis>:
//   assumed that the elements are already cannonical representatives modulo
//   2^f; this is ensured by calling check_canonical_basis_change_matrix() at
//   the beginning of protocols_verify().
static int
matrix_scalar_application_even_basis(ec_basis_t *bas, const ec_curve_t *E, scalar_mtx_2x2_t *mat, int f)
{
 8031028:	b590      	push	{r4, r7, lr}
 803102a:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 803102e:	af02      	add	r7, sp, #8
 8031030:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 8031034:	f5a4 74fa 	sub.w	r4, r4, #500	@ 0x1f4
 8031038:	6020      	str	r0, [r4, #0]
 803103a:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 803103e:	f5a0 70fc 	sub.w	r0, r0, #504	@ 0x1f8
 8031042:	6001      	str	r1, [r0, #0]
 8031044:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8031048:	f5a1 71fe 	sub.w	r1, r1, #508	@ 0x1fc
 803104c:	600a      	str	r2, [r1, #0]
 803104e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8031052:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
 8031056:	6013      	str	r3, [r2, #0]
    scalar_t scalar0, scalar1;
    memset(scalar0, 0, NWORDS_ORDER * sizeof(digit_t));
 8031058:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 803105c:	2220      	movs	r2, #32
 803105e:	2100      	movs	r1, #0
 8031060:	4618      	mov	r0, r3
 8031062:	f004 fdcd 	bl	8035c00 <memset>
    memset(scalar1, 0, NWORDS_ORDER * sizeof(digit_t));
 8031066:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 803106a:	2220      	movs	r2, #32
 803106c:	2100      	movs	r1, #0
 803106e:	4618      	mov	r0, r3
 8031070:	f004 fdc6 	bl	8035c00 <memset>

    ec_basis_t tmp_bas;
    copy_basis(&tmp_bas, bas);
 8031074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8031078:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 803107c:	f107 0210 	add.w	r2, r7, #16
 8031080:	6819      	ldr	r1, [r3, #0]
 8031082:	4610      	mov	r0, r2
 8031084:	f7ff fe21 	bl	8030cca <copy_basis>

    // For a matrix [[a, c], [b, d]] we compute:
    //
    // first basis element R = [a]P + [b]Q
    if (!ec_biscalar_mul(&bas->P, (*mat)[0][0], (*mat)[1][0], f, &tmp_bas, E))
 8031088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 803108c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8031090:	6818      	ldr	r0, [r3, #0]
 8031092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8031096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 803109a:	6819      	ldr	r1, [r3, #0]
 803109c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80310a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80310a4:	681b      	ldr	r3, [r3, #0]
 80310a6:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80310aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80310ae:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80310b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80310b6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80310ba:	6812      	ldr	r2, [r2, #0]
 80310bc:	9201      	str	r2, [sp, #4]
 80310be:	f107 0210 	add.w	r2, r7, #16
 80310c2:	9200      	str	r2, [sp, #0]
 80310c4:	681b      	ldr	r3, [r3, #0]
 80310c6:	4622      	mov	r2, r4
 80310c8:	f7db fdd2 	bl	800cc70 <ec_biscalar_mul>
 80310cc:	4603      	mov	r3, r0
 80310ce:	2b00      	cmp	r3, #0
 80310d0:	d101      	bne.n	80310d6 <matrix_scalar_application_even_basis+0xae>
        return 0;
 80310d2:	2300      	movs	r3, #0
 80310d4:	e081      	b.n	80311da <matrix_scalar_application_even_basis+0x1b2>
    // second basis element S = [c]P + [d]Q
    if (!ec_biscalar_mul(&bas->Q, (*mat)[0][1], (*mat)[1][1], f, &tmp_bas, E))
 80310d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80310da:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80310de:	681b      	ldr	r3, [r3, #0]
 80310e0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80310e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80310e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80310ec:	681b      	ldr	r3, [r3, #0]
 80310ee:	f103 0120 	add.w	r1, r3, #32
 80310f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80310f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80310fa:	681b      	ldr	r3, [r3, #0]
 80310fc:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8031100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8031104:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8031108:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 803110c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8031110:	6812      	ldr	r2, [r2, #0]
 8031112:	9201      	str	r2, [sp, #4]
 8031114:	f107 0210 	add.w	r2, r7, #16
 8031118:	9200      	str	r2, [sp, #0]
 803111a:	681b      	ldr	r3, [r3, #0]
 803111c:	4622      	mov	r2, r4
 803111e:	f7db fda7 	bl	800cc70 <ec_biscalar_mul>
 8031122:	4603      	mov	r3, r0
 8031124:	2b00      	cmp	r3, #0
 8031126:	d101      	bne.n	803112c <matrix_scalar_application_even_basis+0x104>
        return 0;
 8031128:	2300      	movs	r3, #0
 803112a:	e056      	b.n	80311da <matrix_scalar_application_even_basis+0x1b2>
    // Their difference R - S = [a - c]P + [b - d]Q
    mp_sub(scalar0, (*mat)[0][0], (*mat)[0][1], NWORDS_ORDER);
 803112c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8031130:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8031134:	6819      	ldr	r1, [r3, #0]
 8031136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 803113a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 803113e:	681b      	ldr	r3, [r3, #0]
 8031140:	f103 0220 	add.w	r2, r3, #32
 8031144:	f507 70f0 	add.w	r0, r7, #480	@ 0x1e0
 8031148:	2308      	movs	r3, #8
 803114a:	f7f6 fde1 	bl	8027d10 <sqisign_gen_mp_sub>
    mp_mod_2exp(scalar0, f, NWORDS_ORDER);
 803114e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8031152:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8031156:	6819      	ldr	r1, [r3, #0]
 8031158:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 803115c:	2208      	movs	r2, #8
 803115e:	4618      	mov	r0, r3
 8031160:	f7f6 ffe3 	bl	802812a <sqisign_gen_mp_mod_2exp>
    mp_sub(scalar1, (*mat)[1][0], (*mat)[1][1], NWORDS_ORDER);
 8031164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8031168:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 803116c:	681b      	ldr	r3, [r3, #0]
 803116e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8031172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8031176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 803117a:	681b      	ldr	r3, [r3, #0]
 803117c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8031180:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8031184:	2308      	movs	r3, #8
 8031186:	f7f6 fdc3 	bl	8027d10 <sqisign_gen_mp_sub>
    mp_mod_2exp(scalar1, f, NWORDS_ORDER);
 803118a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 803118e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8031192:	6819      	ldr	r1, [r3, #0]
 8031194:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8031198:	2208      	movs	r2, #8
 803119a:	4618      	mov	r0, r3
 803119c:	f7f6 ffc5 	bl	802812a <sqisign_gen_mp_mod_2exp>
    return ec_biscalar_mul(&bas->PmQ, scalar0, scalar1, f, &tmp_bas, E);
 80311a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80311a4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80311a8:	681b      	ldr	r3, [r3, #0]
 80311aa:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80311ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80311b2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80311b6:	f507 74e0 	add.w	r4, r7, #448	@ 0x1c0
 80311ba:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 80311be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80311c2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80311c6:	6812      	ldr	r2, [r2, #0]
 80311c8:	9201      	str	r2, [sp, #4]
 80311ca:	f107 0210 	add.w	r2, r7, #16
 80311ce:	9200      	str	r2, [sp, #0]
 80311d0:	681b      	ldr	r3, [r3, #0]
 80311d2:	4622      	mov	r2, r4
 80311d4:	f7db fd4c 	bl	800cc70 <ec_biscalar_mul>
 80311d8:	4603      	mov	r3, r0
}
 80311da:	4618      	mov	r0, r3
 80311dc:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 80311e0:	46bd      	mov	sp, r7
 80311e2:	bd90      	pop	{r4, r7, pc}

080311e4 <challenge_and_aux_basis_verify>:
                               ec_basis_t *B_aux_can,
                               ec_curve_t *E_chall,
                               ec_curve_t *E_aux,
                               signature_t *sig,
                               const int pow_dim2_deg_resp)
{
 80311e4:	b580      	push	{r7, lr}
 80311e6:	b086      	sub	sp, #24
 80311e8:	af02      	add	r7, sp, #8
 80311ea:	60f8      	str	r0, [r7, #12]
 80311ec:	60b9      	str	r1, [r7, #8]
 80311ee:	607a      	str	r2, [r7, #4]
 80311f0:	603b      	str	r3, [r7, #0]

    // recovering the canonical basis as TORSION_EVEN_POWER for consistency with signing
    if (!ec_curve_to_basis_2f_from_hint(B_chall_can, E_chall, TORSION_EVEN_POWER, sig->hint_chall))
 80311f2:	69bb      	ldr	r3, [r7, #24]
 80311f4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 80311f8:	22f8      	movs	r2, #248	@ 0xf8
 80311fa:	6879      	ldr	r1, [r7, #4]
 80311fc:	68f8      	ldr	r0, [r7, #12]
 80311fe:	f7d1 fb27 	bl	8002850 <ec_curve_to_basis_2f_from_hint>
 8031202:	4603      	mov	r3, r0
 8031204:	2b00      	cmp	r3, #0
 8031206:	d101      	bne.n	803120c <challenge_and_aux_basis_verify+0x28>
        return 0;
 8031208:	2300      	movs	r3, #0
 803120a:	e045      	b.n	8031298 <challenge_and_aux_basis_verify+0xb4>

    // setting to the right order
    ec_dbl_iter_basis(B_chall_can,
                      TORSION_EVEN_POWER - pow_dim2_deg_resp - HD_extra_torsion - sig->two_resp_length,
 803120c:	69fb      	ldr	r3, [r7, #28]
 803120e:	f1c3 03f6 	rsb	r3, r3, #246	@ 0xf6
 8031212:	69ba      	ldr	r2, [r7, #24]
 8031214:	f892 2049 	ldrb.w	r2, [r2, #73]	@ 0x49
    ec_dbl_iter_basis(B_chall_can,
 8031218:	1a99      	subs	r1, r3, r2
 803121a:	687b      	ldr	r3, [r7, #4]
 803121c:	68fa      	ldr	r2, [r7, #12]
 803121e:	68f8      	ldr	r0, [r7, #12]
 8031220:	f7db fce8 	bl	800cbf4 <ec_dbl_iter_basis>
                      B_chall_can,
                      E_chall);

    if (!ec_curve_to_basis_2f_from_hint(B_aux_can, E_aux, TORSION_EVEN_POWER, sig->hint_aux))
 8031224:	69bb      	ldr	r3, [r7, #24]
 8031226:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 803122a:	22f8      	movs	r2, #248	@ 0xf8
 803122c:	6839      	ldr	r1, [r7, #0]
 803122e:	68b8      	ldr	r0, [r7, #8]
 8031230:	f7d1 fb0e 	bl	8002850 <ec_curve_to_basis_2f_from_hint>
 8031234:	4603      	mov	r3, r0
 8031236:	2b00      	cmp	r3, #0
 8031238:	d101      	bne.n	803123e <challenge_and_aux_basis_verify+0x5a>
        return 0;
 803123a:	2300      	movs	r3, #0
 803123c:	e02c      	b.n	8031298 <challenge_and_aux_basis_verify+0xb4>

    // setting to the right order
    ec_dbl_iter_basis(B_aux_can, TORSION_EVEN_POWER - pow_dim2_deg_resp - HD_extra_torsion, B_aux_can, E_aux);
 803123e:	69fb      	ldr	r3, [r7, #28]
 8031240:	f1c3 01f6 	rsb	r1, r3, #246	@ 0xf6
 8031244:	683b      	ldr	r3, [r7, #0]
 8031246:	68ba      	ldr	r2, [r7, #8]
 8031248:	68b8      	ldr	r0, [r7, #8]
 803124a:	f7db fcd3 	bl	800cbf4 <ec_dbl_iter_basis>

#ifndef NDEBUG
    if (!test_basis_order_twof(B_chall_can, E_chall, HD_extra_torsion + pow_dim2_deg_resp + sig->two_resp_length))
 803124e:	69fb      	ldr	r3, [r7, #28]
 8031250:	3302      	adds	r3, #2
 8031252:	69ba      	ldr	r2, [r7, #24]
 8031254:	f892 2049 	ldrb.w	r2, [r2, #73]	@ 0x49
 8031258:	4413      	add	r3, r2
 803125a:	461a      	mov	r2, r3
 803125c:	6879      	ldr	r1, [r7, #4]
 803125e:	68f8      	ldr	r0, [r7, #12]
 8031260:	f7ff fdda 	bl	8030e18 <test_basis_order_twof>
 8031264:	4603      	mov	r3, r0
 8031266:	2b00      	cmp	r3, #0
 8031268:	d107      	bne.n	803127a <challenge_and_aux_basis_verify+0x96>
        debug_print("canonical basis has wrong order, expect something to fail");
 803126a:	4b0d      	ldr	r3, [pc, #52]	@ (80312a0 <challenge_and_aux_basis_verify+0xbc>)
 803126c:	9300      	str	r3, [sp, #0]
 803126e:	237f      	movs	r3, #127	@ 0x7f
 8031270:	4a0c      	ldr	r2, [pc, #48]	@ (80312a4 <challenge_and_aux_basis_verify+0xc0>)
 8031272:	490d      	ldr	r1, [pc, #52]	@ (80312a8 <challenge_and_aux_basis_verify+0xc4>)
 8031274:	480d      	ldr	r0, [pc, #52]	@ (80312ac <challenge_and_aux_basis_verify+0xc8>)
 8031276:	f004 fb61 	bl	803593c <iprintf>
#endif

    // applying the change matrix on the basis of E_chall
    return matrix_scalar_application_even_basis(B_chall_can,
 803127a:	69bb      	ldr	r3, [r7, #24]
 803127c:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
                                                E_chall,
                                                &sig->mat_Bchall_can_to_B_chall,
                                                pow_dim2_deg_resp + HD_extra_torsion + sig->two_resp_length);
 8031280:	69fb      	ldr	r3, [r7, #28]
 8031282:	3302      	adds	r3, #2
 8031284:	69ba      	ldr	r2, [r7, #24]
 8031286:	f892 2049 	ldrb.w	r2, [r2, #73]	@ 0x49
    return matrix_scalar_application_even_basis(B_chall_can,
 803128a:	4413      	add	r3, r2
 803128c:	460a      	mov	r2, r1
 803128e:	6879      	ldr	r1, [r7, #4]
 8031290:	68f8      	ldr	r0, [r7, #12]
 8031292:	f7ff fec9 	bl	8031028 <matrix_scalar_application_even_basis>
 8031296:	4603      	mov	r3, r0
}
 8031298:	4618      	mov	r0, r3
 803129a:	3710      	adds	r7, #16
 803129c:	46bd      	mov	sp, r7
 803129e:	bd80      	pop	{r7, pc}
 80312a0:	08039464 	.word	0x08039464
 80312a4:	080393ec 	.word	0x080393ec
 80312a8:	080393f8 	.word	0x080393f8
 80312ac:	08039434 	.word	0x08039434

080312b0 <two_response_isogeny_verify>:
// When two_resp_length is non-zero, we must compute a small 2^n-isogeny
// updating E_chall as the codomain as well as push the basis on E_chall
// through this isogeny
static int
two_response_isogeny_verify(ec_curve_t *E_chall, ec_basis_t *B_chall_can, const signature_t *sig, int pow_dim2_deg_resp)
{
 80312b0:	b590      	push	{r4, r7, lr}
 80312b2:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 80312b6:	af02      	add	r7, sp, #8
 80312b8:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 80312bc:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 80312c0:	6020      	str	r0, [r4, #0]
 80312c2:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80312c6:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 80312ca:	6001      	str	r1, [r0, #0]
 80312cc:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80312d0:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80312d4:	600a      	str	r2, [r1, #0]
 80312d6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80312da:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80312de:	6013      	str	r3, [r2, #0]
    ec_point_t ker, points[3];

    // choosing the right point for the small two_isogenies
    if (mp_is_even(sig->mat_Bchall_can_to_B_chall[0][0], NWORDS_ORDER) &&
 80312e0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80312e4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80312e8:	681b      	ldr	r3, [r3, #0]
 80312ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80312ec:	f003 0301 	and.w	r3, r3, #1
 80312f0:	2b00      	cmp	r3, #0
 80312f2:	d118      	bne.n	8031326 <two_response_isogeny_verify+0x76>
        mp_is_even(sig->mat_Bchall_can_to_B_chall[1][0], NWORDS_ORDER)) {
 80312f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80312f8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80312fc:	681b      	ldr	r3, [r3, #0]
 80312fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8031302:	f003 0301 	and.w	r3, r3, #1
    if (mp_is_even(sig->mat_Bchall_can_to_B_chall[0][0], NWORDS_ORDER) &&
 8031306:	2b00      	cmp	r3, #0
 8031308:	d10d      	bne.n	8031326 <two_response_isogeny_verify+0x76>
        copy_point(&ker, &B_chall_can->Q);
 803130a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 803130e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8031312:	681b      	ldr	r3, [r3, #0]
 8031314:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8031318:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 803131c:	4611      	mov	r1, r2
 803131e:	4618      	mov	r0, r3
 8031320:	f7ff fcbb 	bl	8030c9a <copy_point>
 8031324:	e00a      	b.n	803133c <two_response_isogeny_verify+0x8c>
    } else {
        copy_point(&ker, &B_chall_can->P);
 8031326:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 803132a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 803132e:	681a      	ldr	r2, [r3, #0]
 8031330:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8031334:	4611      	mov	r1, r2
 8031336:	4618      	mov	r0, r3
 8031338:	f7ff fcaf 	bl	8030c9a <copy_point>
    }

    copy_point(&points[0], &B_chall_can->P);
 803133c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031340:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8031344:	681a      	ldr	r2, [r3, #0]
 8031346:	f107 0310 	add.w	r3, r7, #16
 803134a:	4611      	mov	r1, r2
 803134c:	4618      	mov	r0, r3
 803134e:	f7ff fca4 	bl	8030c9a <copy_point>
    copy_point(&points[1], &B_chall_can->Q);
 8031352:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031356:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 803135a:	681b      	ldr	r3, [r3, #0]
 803135c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8031360:	f107 0310 	add.w	r3, r7, #16
 8031364:	3390      	adds	r3, #144	@ 0x90
 8031366:	4611      	mov	r1, r2
 8031368:	4618      	mov	r0, r3
 803136a:	f7ff fc96 	bl	8030c9a <copy_point>
    copy_point(&points[2], &B_chall_can->PmQ);
 803136e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031372:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8031376:	681b      	ldr	r3, [r3, #0]
 8031378:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 803137c:	f107 0310 	add.w	r3, r7, #16
 8031380:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8031384:	4611      	mov	r1, r2
 8031386:	4618      	mov	r0, r3
 8031388:	f7ff fc87 	bl	8030c9a <copy_point>

    ec_dbl_iter(&ker, pow_dim2_deg_resp + HD_extra_torsion, &ker, E_chall);
 803138c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031390:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8031394:	681b      	ldr	r3, [r3, #0]
 8031396:	1c99      	adds	r1, r3, #2
 8031398:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 803139c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80313a0:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80313a4:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80313a8:	681b      	ldr	r3, [r3, #0]
 80313aa:	f7db fbb1 	bl	800cb10 <ec_dbl_iter>

#ifndef NDEBUG
    if (!test_point_order_twof(&ker, E_chall, sig->two_resp_length))
 80313ae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80313b2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80313b6:	681b      	ldr	r3, [r3, #0]
 80313b8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80313bc:	461a      	mov	r2, r3
 80313be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80313c2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80313c6:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80313ca:	6819      	ldr	r1, [r3, #0]
 80313cc:	f7ff fcc6 	bl	8030d5c <test_point_order_twof>
 80313d0:	4603      	mov	r3, r0
 80313d2:	2b00      	cmp	r3, #0
 80313d4:	d107      	bne.n	80313e6 <two_response_isogeny_verify+0x136>
        debug_print("kernel does not have order 2^(two_resp_length");
 80313d6:	4b53      	ldr	r3, [pc, #332]	@ (8031524 <two_response_isogeny_verify+0x274>)
 80313d8:	9300      	str	r3, [sp, #0]
 80313da:	23a1      	movs	r3, #161	@ 0xa1
 80313dc:	4a52      	ldr	r2, [pc, #328]	@ (8031528 <two_response_isogeny_verify+0x278>)
 80313de:	4953      	ldr	r1, [pc, #332]	@ (803152c <two_response_isogeny_verify+0x27c>)
 80313e0:	4853      	ldr	r0, [pc, #332]	@ (8031530 <two_response_isogeny_verify+0x280>)
 80313e2:	f004 faab 	bl	803593c <iprintf>
#endif

    if (ec_eval_small_chain(E_chall, &ker, sig->two_resp_length, points, 3, false)) {
 80313e6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80313ea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80313ee:	681b      	ldr	r3, [r3, #0]
 80313f0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80313f4:	461c      	mov	r4, r3
 80313f6:	f107 0310 	add.w	r3, r7, #16
 80313fa:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80313fe:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8031402:	f5a2 7011 	sub.w	r0, r2, #580	@ 0x244
 8031406:	2200      	movs	r2, #0
 8031408:	9201      	str	r2, [sp, #4]
 803140a:	2203      	movs	r2, #3
 803140c:	9200      	str	r2, [sp, #0]
 803140e:	4622      	mov	r2, r4
 8031410:	6800      	ldr	r0, [r0, #0]
 8031412:	f7ed f8e9 	bl	801e5e8 <ec_eval_small_chain>
 8031416:	4603      	mov	r3, r0
 8031418:	2b00      	cmp	r3, #0
 803141a:	d001      	beq.n	8031420 <two_response_isogeny_verify+0x170>
        return 0;
 803141c:	2300      	movs	r3, #0
 803141e:	e07c      	b.n	803151a <two_response_isogeny_verify+0x26a>
    }

#ifndef NDEBUG
    if (!test_point_order_twof(&points[0], E_chall, HD_extra_torsion + pow_dim2_deg_resp))
 8031420:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031424:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8031428:	681b      	ldr	r3, [r3, #0]
 803142a:	1c9a      	adds	r2, r3, #2
 803142c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031430:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8031434:	f107 0010 	add.w	r0, r7, #16
 8031438:	6819      	ldr	r1, [r3, #0]
 803143a:	f7ff fc8f 	bl	8030d5c <test_point_order_twof>
 803143e:	4603      	mov	r3, r0
 8031440:	2b00      	cmp	r3, #0
 8031442:	d107      	bne.n	8031454 <two_response_isogeny_verify+0x1a4>
        debug_print("points[0] does not have order 2^(HD_extra_torsion + pow_dim2_deg_resp");
 8031444:	4b37      	ldr	r3, [pc, #220]	@ (8031524 <two_response_isogeny_verify+0x274>)
 8031446:	9300      	str	r3, [sp, #0]
 8031448:	23aa      	movs	r3, #170	@ 0xaa
 803144a:	4a37      	ldr	r2, [pc, #220]	@ (8031528 <two_response_isogeny_verify+0x278>)
 803144c:	4939      	ldr	r1, [pc, #228]	@ (8031534 <two_response_isogeny_verify+0x284>)
 803144e:	4838      	ldr	r0, [pc, #224]	@ (8031530 <two_response_isogeny_verify+0x280>)
 8031450:	f004 fa74 	bl	803593c <iprintf>
    if (!test_point_order_twof(&points[1], E_chall, HD_extra_torsion + pow_dim2_deg_resp))
 8031454:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031458:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 803145c:	681b      	ldr	r3, [r3, #0]
 803145e:	1c99      	adds	r1, r3, #2
 8031460:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031464:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8031468:	f107 0210 	add.w	r2, r7, #16
 803146c:	f102 0090 	add.w	r0, r2, #144	@ 0x90
 8031470:	460a      	mov	r2, r1
 8031472:	6819      	ldr	r1, [r3, #0]
 8031474:	f7ff fc72 	bl	8030d5c <test_point_order_twof>
 8031478:	4603      	mov	r3, r0
 803147a:	2b00      	cmp	r3, #0
 803147c:	d107      	bne.n	803148e <two_response_isogeny_verify+0x1de>
        debug_print("points[1] does not have order 2^(HD_extra_torsion + pow_dim2_deg_resp");
 803147e:	4b29      	ldr	r3, [pc, #164]	@ (8031524 <two_response_isogeny_verify+0x274>)
 8031480:	9300      	str	r3, [sp, #0]
 8031482:	23ac      	movs	r3, #172	@ 0xac
 8031484:	4a28      	ldr	r2, [pc, #160]	@ (8031528 <two_response_isogeny_verify+0x278>)
 8031486:	492c      	ldr	r1, [pc, #176]	@ (8031538 <two_response_isogeny_verify+0x288>)
 8031488:	4829      	ldr	r0, [pc, #164]	@ (8031530 <two_response_isogeny_verify+0x280>)
 803148a:	f004 fa57 	bl	803593c <iprintf>
    if (!test_point_order_twof(&points[2], E_chall, HD_extra_torsion + pow_dim2_deg_resp))
 803148e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8031492:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8031496:	681b      	ldr	r3, [r3, #0]
 8031498:	1c99      	adds	r1, r3, #2
 803149a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 803149e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80314a2:	f107 0210 	add.w	r2, r7, #16
 80314a6:	f502 7090 	add.w	r0, r2, #288	@ 0x120
 80314aa:	460a      	mov	r2, r1
 80314ac:	6819      	ldr	r1, [r3, #0]
 80314ae:	f7ff fc55 	bl	8030d5c <test_point_order_twof>
 80314b2:	4603      	mov	r3, r0
 80314b4:	2b00      	cmp	r3, #0
 80314b6:	d107      	bne.n	80314c8 <two_response_isogeny_verify+0x218>
        debug_print("points[2] does not have order 2^(HD_extra_torsion + pow_dim2_deg_resp");
 80314b8:	4b1a      	ldr	r3, [pc, #104]	@ (8031524 <two_response_isogeny_verify+0x274>)
 80314ba:	9300      	str	r3, [sp, #0]
 80314bc:	23ae      	movs	r3, #174	@ 0xae
 80314be:	4a1a      	ldr	r2, [pc, #104]	@ (8031528 <two_response_isogeny_verify+0x278>)
 80314c0:	491e      	ldr	r1, [pc, #120]	@ (803153c <two_response_isogeny_verify+0x28c>)
 80314c2:	481b      	ldr	r0, [pc, #108]	@ (8031530 <two_response_isogeny_verify+0x280>)
 80314c4:	f004 fa3a 	bl	803593c <iprintf>
#endif

    copy_point(&B_chall_can->P, &points[0]);
 80314c8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80314cc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80314d0:	681b      	ldr	r3, [r3, #0]
 80314d2:	f107 0210 	add.w	r2, r7, #16
 80314d6:	4611      	mov	r1, r2
 80314d8:	4618      	mov	r0, r3
 80314da:	f7ff fbde 	bl	8030c9a <copy_point>
    copy_point(&B_chall_can->Q, &points[1]);
 80314de:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80314e2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80314e6:	681b      	ldr	r3, [r3, #0]
 80314e8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80314ec:	f107 0310 	add.w	r3, r7, #16
 80314f0:	3390      	adds	r3, #144	@ 0x90
 80314f2:	4619      	mov	r1, r3
 80314f4:	4610      	mov	r0, r2
 80314f6:	f7ff fbd0 	bl	8030c9a <copy_point>
    copy_point(&B_chall_can->PmQ, &points[2]);
 80314fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80314fe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8031502:	681b      	ldr	r3, [r3, #0]
 8031504:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8031508:	f107 0310 	add.w	r3, r7, #16
 803150c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8031510:	4619      	mov	r1, r3
 8031512:	4610      	mov	r0, r2
 8031514:	f7ff fbc1 	bl	8030c9a <copy_point>
    return 1;
 8031518:	2301      	movs	r3, #1
}
 803151a:	4618      	mov	r0, r3
 803151c:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8031520:	46bd      	mov	sp, r7
 8031522:	bd90      	pop	{r4, r7, pc}
 8031524:	08039464 	.word	0x08039464
 8031528:	080393ec 	.word	0x080393ec
 803152c:	08039468 	.word	0x08039468
 8031530:	08039434 	.word	0x08039434
 8031534:	08039498 	.word	0x08039498
 8031538:	080394e0 	.word	0x080394e0
 803153c:	08039528 	.word	0x08039528

08031540 <compute_commitment_curve_verify>:
                                const ec_basis_t *B_aux_can,
                                const ec_curve_t *E_chall,
                                const ec_curve_t *E_aux,
                                int pow_dim2_deg_resp)

{
 8031540:	b590      	push	{r4, r7, lr}
 8031542:	f6ad 0d1c 	subw	sp, sp, #2076	@ 0x81c
 8031546:	af04      	add	r7, sp, #16
 8031548:	f607 0408 	addw	r4, r7, #2056	@ 0x808
 803154c:	f2a4 74fc 	subw	r4, r4, #2044	@ 0x7fc
 8031550:	6020      	str	r0, [r4, #0]
 8031552:	f607 0008 	addw	r0, r7, #2056	@ 0x808
 8031556:	f5a0 6000 	sub.w	r0, r0, #2048	@ 0x800
 803155a:	6001      	str	r1, [r0, #0]
 803155c:	f607 0108 	addw	r1, r7, #2056	@ 0x808
 8031560:	f6a1 0104 	subw	r1, r1, #2052	@ 0x804
 8031564:	600a      	str	r2, [r1, #0]
 8031566:	f607 0208 	addw	r2, r7, #2056	@ 0x808
 803156a:	f6a2 0208 	subw	r2, r2, #2056	@ 0x808
 803156e:	6013      	str	r3, [r2, #0]
#ifndef NDEBUG
    // Check all the points are the correct order
    if (!test_basis_order_twof(B_chall_can, E_chall, HD_extra_torsion + pow_dim2_deg_resp))
 8031570:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8031574:	1c9a      	adds	r2, r3, #2
 8031576:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 803157a:	f6a3 0108 	subw	r1, r3, #2056	@ 0x808
 803157e:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8031582:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8031586:	6809      	ldr	r1, [r1, #0]
 8031588:	6818      	ldr	r0, [r3, #0]
 803158a:	f7ff fc45 	bl	8030e18 <test_basis_order_twof>
 803158e:	4603      	mov	r3, r0
 8031590:	2b00      	cmp	r3, #0
 8031592:	d107      	bne.n	80315a4 <compute_commitment_curve_verify+0x64>
        debug_print("B_chall_can does not have order 2^(HD_extra_torsion + pow_dim2_deg_resp");
 8031594:	4b4d      	ldr	r3, [pc, #308]	@ (80316cc <compute_commitment_curve_verify+0x18c>)
 8031596:	9300      	str	r3, [sp, #0]
 8031598:	23c5      	movs	r3, #197	@ 0xc5
 803159a:	4a4d      	ldr	r2, [pc, #308]	@ (80316d0 <compute_commitment_curve_verify+0x190>)
 803159c:	494d      	ldr	r1, [pc, #308]	@ (80316d4 <compute_commitment_curve_verify+0x194>)
 803159e:	484e      	ldr	r0, [pc, #312]	@ (80316d8 <compute_commitment_curve_verify+0x198>)
 80315a0:	f004 f9cc 	bl	803593c <iprintf>

    if (!test_basis_order_twof(B_aux_can, E_aux, HD_extra_torsion + pow_dim2_deg_resp))
 80315a4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80315a8:	1c9a      	adds	r2, r3, #2
 80315aa:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80315ae:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80315b2:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 80315b6:	6818      	ldr	r0, [r3, #0]
 80315b8:	f7ff fc2e 	bl	8030e18 <test_basis_order_twof>
 80315bc:	4603      	mov	r3, r0
 80315be:	2b00      	cmp	r3, #0
 80315c0:	d107      	bne.n	80315d2 <compute_commitment_curve_verify+0x92>
        debug_print("B_aux_can does not have order 2^(HD_extra_torsion + pow_dim2_deg_resp");
 80315c2:	4b42      	ldr	r3, [pc, #264]	@ (80316cc <compute_commitment_curve_verify+0x18c>)
 80315c4:	9300      	str	r3, [sp, #0]
 80315c6:	23c8      	movs	r3, #200	@ 0xc8
 80315c8:	4a41      	ldr	r2, [pc, #260]	@ (80316d0 <compute_commitment_curve_verify+0x190>)
 80315ca:	4944      	ldr	r1, [pc, #272]	@ (80316dc <compute_commitment_curve_verify+0x19c>)
 80315cc:	4842      	ldr	r0, [pc, #264]	@ (80316d8 <compute_commitment_curve_verify+0x198>)
 80315ce:	f004 f9b5 	bl	803593c <iprintf>
    // now compute the dim2 isogeny from Echall x E_aux -> E_com x E_aux'
    // of kernel B_chall_can x B_aux_can

    // first we set-up the kernel
    theta_couple_curve_t EchallxEaux;
    copy_curve(&EchallxEaux.E1, E_chall);
 80315d2:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80315d6:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 80315da:	f207 52bc 	addw	r2, r7, #1468	@ 0x5bc
 80315de:	6819      	ldr	r1, [r3, #0]
 80315e0:	4610      	mov	r0, r2
 80315e2:	f7ff fb94 	bl	8030d0e <copy_curve>
    copy_curve(&EchallxEaux.E2, E_aux);
 80315e6:	f207 53bc 	addw	r3, r7, #1468	@ 0x5bc
 80315ea:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80315ee:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 80315f2:	4618      	mov	r0, r3
 80315f4:	f7ff fb8b 	bl	8030d0e <copy_curve>

    theta_kernel_couple_points_t dim_two_ker;
    copy_bases_to_kernel(&dim_two_ker, B_chall_can, B_aux_can);
 80315f8:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80315fc:	f6a3 0204 	subw	r2, r3, #2052	@ 0x804
 8031600:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8031604:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8031608:	f507 7017 	add.w	r0, r7, #604	@ 0x25c
 803160c:	6812      	ldr	r2, [r2, #0]
 803160e:	6819      	ldr	r1, [r3, #0]
 8031610:	f7e8 fbdc 	bl	8019dcc <copy_bases_to_kernel>

    // computing the isogeny
    theta_couple_curve_t codomain;
    int codomain_splits;
    ec_curve_init(&codomain.E1);
 8031614:	f107 0314 	add.w	r3, r7, #20
 8031618:	4618      	mov	r0, r3
 803161a:	f7d9 fefe 	bl	800b41a <ec_curve_init>
    ec_curve_init(&codomain.E2);
 803161e:	f107 0314 	add.w	r3, r7, #20
 8031622:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8031626:	4618      	mov	r0, r3
 8031628:	f7d9 fef7 	bl	800b41a <ec_curve_init>
    // handling the special case where we don't need to perform any dim2 computation
    if (pow_dim2_deg_resp == 0) {
 803162c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8031630:	2b00      	cmp	r3, #0
 8031632:	d127      	bne.n	8031684 <compute_commitment_curve_verify+0x144>
        codomain_splits = 1;
 8031634:	2301      	movs	r3, #1
 8031636:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        copy_curve(&codomain.E1, &EchallxEaux.E1);
 803163a:	f207 52bc 	addw	r2, r7, #1468	@ 0x5bc
 803163e:	f107 0314 	add.w	r3, r7, #20
 8031642:	4611      	mov	r1, r2
 8031644:	4618      	mov	r0, r3
 8031646:	f7ff fb62 	bl	8030d0e <copy_curve>
        copy_curve(&codomain.E2, &EchallxEaux.E2);
 803164a:	f207 53bc 	addw	r3, r7, #1468	@ 0x5bc
 803164e:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8031652:	f107 0314 	add.w	r3, r7, #20
 8031656:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 803165a:	4611      	mov	r1, r2
 803165c:	4618      	mov	r0, r3
 803165e:	f7ff fb56 	bl	8030d0e <copy_curve>
        // We still need to check that E_chall is supersingular
        // This assumes that HD_extra_torsion == 2
        if (!ec_is_basis_four_torsion(B_chall_can, E_chall)) {
 8031662:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8031666:	f6a3 0208 	subw	r2, r3, #2056	@ 0x808
 803166a:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 803166e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8031672:	6811      	ldr	r1, [r2, #0]
 8031674:	6818      	ldr	r0, [r3, #0]
 8031676:	f7da f8ce 	bl	800b816 <ec_is_basis_four_torsion>
 803167a:	4603      	mov	r3, r0
 803167c:	2b00      	cmp	r3, #0
 803167e:	d113      	bne.n	80316a8 <compute_commitment_curve_verify+0x168>
            return 0;
 8031680:	2300      	movs	r3, #0
 8031682:	e01d      	b.n	80316c0 <compute_commitment_curve_verify+0x180>
        }
    } else {
        codomain_splits = theta_chain_compute_and_eval_verify(
 8031684:	f8d7 081c 	ldr.w	r0, [r7, #2076]	@ 0x81c
 8031688:	f507 7217 	add.w	r2, r7, #604	@ 0x25c
 803168c:	f207 51bc 	addw	r1, r7, #1468	@ 0x5bc
 8031690:	2300      	movs	r3, #0
 8031692:	9302      	str	r3, [sp, #8]
 8031694:	2300      	movs	r3, #0
 8031696:	9301      	str	r3, [sp, #4]
 8031698:	f107 0314 	add.w	r3, r7, #20
 803169c:	9300      	str	r3, [sp, #0]
 803169e:	2301      	movs	r3, #1
 80316a0:	f7ff f823 	bl	80306ea <theta_chain_compute_and_eval_verify>
 80316a4:	f8c7 0804 	str.w	r0, [r7, #2052]	@ 0x804
            pow_dim2_deg_resp, &EchallxEaux, &dim_two_ker, true, &codomain, NULL, 0);
    }

    // computing the commitment curve
    // its always the first one because of our (2^n,2^n)-isogeny formulae
    copy_curve(E_com, &codomain.E1);
 80316a8:	f107 0214 	add.w	r2, r7, #20
 80316ac:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80316b0:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80316b4:	4611      	mov	r1, r2
 80316b6:	6818      	ldr	r0, [r3, #0]
 80316b8:	f7ff fb29 	bl	8030d0e <copy_curve>

    return codomain_splits;
 80316bc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
}
 80316c0:	4618      	mov	r0, r3
 80316c2:	f607 070c 	addw	r7, r7, #2060	@ 0x80c
 80316c6:	46bd      	mov	sp, r7
 80316c8:	bd90      	pop	{r4, r7, pc}
 80316ca:	bf00      	nop
 80316cc:	08039464 	.word	0x08039464
 80316d0:	080393ec 	.word	0x080393ec
 80316d4:	08039570 	.word	0x08039570
 80316d8:	08039434 	.word	0x08039434
 80316dc:	080395b8 	.word	0x080395b8

080316e0 <protocols_verify>:

// SQIsign verification
int
protocols_verify(signature_t *sig, const public_key_t *pk, const unsigned char *m, size_t l)
{
 80316e0:	b590      	push	{r4, r7, lr}
 80316e2:	f2ad 7d14 	subw	sp, sp, #1812	@ 0x714
 80316e6:	af02      	add	r7, sp, #8
 80316e8:	f507 64e1 	add.w	r4, r7, #1800	@ 0x708
 80316ec:	f2a4 64fc 	subw	r4, r4, #1788	@ 0x6fc
 80316f0:	6020      	str	r0, [r4, #0]
 80316f2:	f507 60e1 	add.w	r0, r7, #1800	@ 0x708
 80316f6:	f5a0 60e0 	sub.w	r0, r0, #1792	@ 0x700
 80316fa:	6001      	str	r1, [r0, #0]
 80316fc:	f507 61e1 	add.w	r1, r7, #1800	@ 0x708
 8031700:	f2a1 7104 	subw	r1, r1, #1796	@ 0x704
 8031704:	600a      	str	r2, [r1, #0]
 8031706:	f507 62e1 	add.w	r2, r7, #1800	@ 0x708
 803170a:	f5a2 62e1 	sub.w	r2, r2, #1800	@ 0x708
 803170e:	6013      	str	r3, [r2, #0]
    int verify;

    if (!check_canonical_basis_change_matrix(sig))
 8031710:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8031714:	f2a3 63fc 	subw	r3, r3, #1788	@ 0x6fc
 8031718:	6818      	ldr	r0, [r3, #0]
 803171a:	f7ff fba4 	bl	8030e66 <check_canonical_basis_change_matrix>
 803171e:	4603      	mov	r3, r0
 8031720:	2b00      	cmp	r3, #0
 8031722:	d101      	bne.n	8031728 <protocols_verify+0x48>
        return 0;
 8031724:	2300      	movs	r3, #0
 8031726:	e0e9      	b.n	80318fc <protocols_verify+0x21c>

    // Computation of the length of the dim 2 2^n isogeny
    int pow_dim2_deg_resp = SQIsign_response_length - (int)sig->two_resp_length - (int)sig->backtracking;
 8031728:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 803172c:	f2a3 63fc 	subw	r3, r3, #1788	@ 0x6fc
 8031730:	681b      	ldr	r3, [r3, #0]
 8031732:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8031736:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 803173a:	f507 62e1 	add.w	r2, r7, #1800	@ 0x708
 803173e:	f2a2 62fc 	subw	r2, r2, #1788	@ 0x6fc
 8031742:	6812      	ldr	r2, [r2, #0]
 8031744:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8031748:	1a9b      	subs	r3, r3, r2
 803174a:	f8c7 3704 	str.w	r3, [r7, #1796]	@ 0x704

    // basic sanity test: checking that the response is not too long
    if (pow_dim2_deg_resp < 0)
 803174e:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
 8031752:	2b00      	cmp	r3, #0
 8031754:	da01      	bge.n	803175a <protocols_verify+0x7a>
        return 0;
 8031756:	2300      	movs	r3, #0
 8031758:	e0d0      	b.n	80318fc <protocols_verify+0x21c>
    // The dim 2 isogeny embeds a dim 1 isogeny of odd degree, so it can
    // never be of length 2.
    if (pow_dim2_deg_resp == 1)
 803175a:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
 803175e:	2b01      	cmp	r3, #1
 8031760:	d101      	bne.n	8031766 <protocols_verify+0x86>
        return 0;
 8031762:	2300      	movs	r3, #0
 8031764:	e0ca      	b.n	80318fc <protocols_verify+0x21c>

    // check the public curve is valid
    if (!ec_curve_verify_A(&(pk->curve).A))
 8031766:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 803176a:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 803176e:	681b      	ldr	r3, [r3, #0]
 8031770:	4618      	mov	r0, r3
 8031772:	f7da f8b4 	bl	800b8de <ec_curve_verify_A>
 8031776:	4603      	mov	r3, r0
 8031778:	2b00      	cmp	r3, #0
 803177a:	d101      	bne.n	8031780 <protocols_verify+0xa0>
        return 0;
 803177c:	2300      	movs	r3, #0
 803177e:	e0bd      	b.n	80318fc <protocols_verify+0x21c>

    // Set auxiliary curve from the A-coefficient within the signature
    ec_curve_t E_aux;
    if (!ec_curve_init_from_A(&E_aux, &sig->E_aux_A))
 8031780:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8031784:	f2a3 63fc 	subw	r3, r3, #1788	@ 0x6fc
 8031788:	681a      	ldr	r2, [r3, #0]
 803178a:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 803178e:	4611      	mov	r1, r2
 8031790:	4618      	mov	r0, r3
 8031792:	f7da f8d9 	bl	800b948 <ec_curve_init_from_A>
 8031796:	4603      	mov	r3, r0
 8031798:	2b00      	cmp	r3, #0
 803179a:	d101      	bne.n	80317a0 <protocols_verify+0xc0>
        return 0; // invalid curve
 803179c:	2300      	movs	r3, #0
 803179e:	e0ad      	b.n	80318fc <protocols_verify+0x21c>

    // checking that we are given A-coefficients and no precomputation
    assert(fp2_is_one(&pk->curve.C) == 0xFFFFFFFF && !pk->curve.is_A24_computed_and_normalized);
 80317a0:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80317a4:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 80317a8:	681b      	ldr	r3, [r3, #0]
 80317aa:	3348      	adds	r3, #72	@ 0x48
 80317ac:	4618      	mov	r0, r3
 80317ae:	f7e1 f925 	bl	80129fc <fp2_is_one>
 80317b2:	4603      	mov	r3, r0
 80317b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80317b8:	d108      	bne.n	80317cc <protocols_verify+0xec>
 80317ba:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80317be:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 80317c2:	681b      	ldr	r3, [r3, #0]
 80317c4:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80317c8:	2b00      	cmp	r3, #0
 80317ca:	d006      	beq.n	80317da <protocols_verify+0xfa>
 80317cc:	4b4e      	ldr	r3, [pc, #312]	@ (8031908 <protocols_verify+0x228>)
 80317ce:	4a4f      	ldr	r2, [pc, #316]	@ (803190c <protocols_verify+0x22c>)
 80317d0:	f240 110f 	movw	r1, #271	@ 0x10f
 80317d4:	484e      	ldr	r0, [pc, #312]	@ (8031910 <protocols_verify+0x230>)
 80317d6:	f003 fd2f 	bl	8035238 <__assert_func>

    // computation of the challenge
    ec_curve_t E_chall;
    if (!compute_challenge_verify(&E_chall, sig, &pk->curve, pk->hint_pk)) {
 80317da:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80317de:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 80317e2:	681a      	ldr	r2, [r3, #0]
 80317e4:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80317e8:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 80317ec:	681b      	ldr	r3, [r3, #0]
 80317ee:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 80317f2:	f507 61e1 	add.w	r1, r7, #1800	@ 0x708
 80317f6:	f2a1 61fc 	subw	r1, r1, #1788	@ 0x6fc
 80317fa:	f507 6097 	add.w	r0, r7, #1208	@ 0x4b8
 80317fe:	6809      	ldr	r1, [r1, #0]
 8031800:	f7ff fb77 	bl	8030ef2 <compute_challenge_verify>
 8031804:	4603      	mov	r3, r0
 8031806:	2b00      	cmp	r3, #0
 8031808:	d101      	bne.n	803180e <protocols_verify+0x12e>
        return 0;
 803180a:	2300      	movs	r3, #0
 803180c:	e076      	b.n	80318fc <protocols_verify+0x21c>
    }

    // Computation of the canonical bases for the challenge and aux curve
    ec_basis_t B_chall_can, B_aux_can;

    if (!challenge_and_aux_basis_verify(&B_chall_can, &B_aux_can, &E_chall, &E_aux, sig, pow_dim2_deg_resp)) {
 803180e:	f207 54dc 	addw	r4, r7, #1500	@ 0x5dc
 8031812:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8031816:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 803181a:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 803181e:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
 8031822:	9301      	str	r3, [sp, #4]
 8031824:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8031828:	f2a3 63fc 	subw	r3, r3, #1788	@ 0x6fc
 803182c:	681b      	ldr	r3, [r3, #0]
 803182e:	9300      	str	r3, [sp, #0]
 8031830:	4623      	mov	r3, r4
 8031832:	f7ff fcd7 	bl	80311e4 <challenge_and_aux_basis_verify>
 8031836:	4603      	mov	r3, r0
 8031838:	2b00      	cmp	r3, #0
 803183a:	d101      	bne.n	8031840 <protocols_verify+0x160>
        return 0;
 803183c:	2300      	movs	r3, #0
 803183e:	e05d      	b.n	80318fc <protocols_verify+0x21c>
    }

    // When two_resp_length != 0 we need to compute a second, short 2^r-isogeny
    if (sig->two_resp_length > 0) {
 8031840:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8031844:	f2a3 63fc 	subw	r3, r3, #1788	@ 0x6fc
 8031848:	681b      	ldr	r3, [r3, #0]
 803184a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 803184e:	2b00      	cmp	r3, #0
 8031850:	d011      	beq.n	8031876 <protocols_verify+0x196>
        if (!two_response_isogeny_verify(&E_chall, &B_chall_can, sig, pow_dim2_deg_resp)) {
 8031852:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8031856:	f2a3 62fc 	subw	r2, r3, #1788	@ 0x6fc
 803185a:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 803185e:	f507 6097 	add.w	r0, r7, #1208	@ 0x4b8
 8031862:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
 8031866:	6812      	ldr	r2, [r2, #0]
 8031868:	f7ff fd22 	bl	80312b0 <two_response_isogeny_verify>
 803186c:	4603      	mov	r3, r0
 803186e:	2b00      	cmp	r3, #0
 8031870:	d101      	bne.n	8031876 <protocols_verify+0x196>
            return 0;
 8031872:	2300      	movs	r3, #0
 8031874:	e042      	b.n	80318fc <protocols_verify+0x21c>

    // We can recover the commitment curve with a 2D isogeny
    // The supplied signature did not compute an isogeny between eliptic products
    // and so definitely is an invalid signature.
    ec_curve_t E_com;
    if (!compute_commitment_curve_verify(&E_com, &B_chall_can, &B_aux_can, &E_chall, &E_aux, pow_dim2_deg_resp))
 8031876:	f507 6497 	add.w	r4, r7, #1208	@ 0x4b8
 803187a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 803187e:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8031882:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8031886:	f8d7 3704 	ldr.w	r3, [r7, #1796]	@ 0x704
 803188a:	9301      	str	r3, [sp, #4]
 803188c:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 8031890:	9300      	str	r3, [sp, #0]
 8031892:	4623      	mov	r3, r4
 8031894:	f7ff fe54 	bl	8031540 <compute_commitment_curve_verify>
 8031898:	4603      	mov	r3, r0
 803189a:	2b00      	cmp	r3, #0
 803189c:	d101      	bne.n	80318a2 <protocols_verify+0x1c2>
        return 0;
 803189e:	2300      	movs	r3, #0
 80318a0:	e02c      	b.n	80318fc <protocols_verify+0x21c>

    scalar_t chk_chall;

    // recomputing the challenge vector
    hash_to_challenge(&chk_chall, pk, &E_com, m, l);
 80318a2:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80318a6:	f2a3 7304 	subw	r3, r3, #1796	@ 0x704
 80318aa:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80318ae:	f507 62e1 	add.w	r2, r7, #1800	@ 0x708
 80318b2:	f5a2 61e0 	sub.w	r1, r2, #1792	@ 0x700
 80318b6:	f107 0014 	add.w	r0, r7, #20
 80318ba:	f507 62e1 	add.w	r2, r7, #1800	@ 0x708
 80318be:	f5a2 62e1 	sub.w	r2, r2, #1800	@ 0x708
 80318c2:	6812      	ldr	r2, [r2, #0]
 80318c4:	9200      	str	r2, [sp, #0]
 80318c6:	681b      	ldr	r3, [r3, #0]
 80318c8:	4622      	mov	r2, r4
 80318ca:	6809      	ldr	r1, [r1, #0]
 80318cc:	f7d2 ffe4 	bl	8004898 <hash_to_challenge>

    // performing the final check
    verify = mp_compare(sig->chall_coeff, chk_chall, NWORDS_ORDER) == 0;
 80318d0:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80318d4:	f2a3 63fc 	subw	r3, r3, #1788	@ 0x6fc
 80318d8:	681b      	ldr	r3, [r3, #0]
 80318da:	33cc      	adds	r3, #204	@ 0xcc
 80318dc:	f107 0114 	add.w	r1, r7, #20
 80318e0:	2208      	movs	r2, #8
 80318e2:	4618      	mov	r0, r3
 80318e4:	f7f6 fac7 	bl	8027e76 <sqisign_gen_mp_compare>
 80318e8:	4603      	mov	r3, r0
 80318ea:	2b00      	cmp	r3, #0
 80318ec:	bf0c      	ite	eq
 80318ee:	2301      	moveq	r3, #1
 80318f0:	2300      	movne	r3, #0
 80318f2:	b2db      	uxtb	r3, r3
 80318f4:	f8c7 3700 	str.w	r3, [r7, #1792]	@ 0x700

    return verify;
 80318f8:	f8d7 3700 	ldr.w	r3, [r7, #1792]	@ 0x700
}
 80318fc:	4618      	mov	r0, r3
 80318fe:	f207 770c 	addw	r7, r7, #1804	@ 0x70c
 8031902:	46bd      	mov	sp, r7
 8031904:	bd90      	pop	{r4, r7, pc}
 8031906:	bf00      	nop
 8031908:	08039600 	.word	0x08039600
 803190c:	08039464 	.word	0x08039464
 8031910:	08039654 	.word	0x08039654

08031914 <xeval_2>:
// -----------------------------------------------------------------------------------------

// Degree-2 isogeny evaluation with kenerl generated by P != (0, 0)
void
xeval_2(ec_point_t *R, ec_point_t *const Q, const int lenQ, const ec_kps2_t *kps)
{
 8031914:	b580      	push	{r7, lr}
 8031916:	b0bc      	sub	sp, #240	@ 0xf0
 8031918:	af00      	add	r7, sp, #0
 803191a:	60f8      	str	r0, [r7, #12]
 803191c:	60b9      	str	r1, [r7, #8]
 803191e:	607a      	str	r2, [r7, #4]
 8031920:	603b      	str	r3, [r7, #0]
    fp2_t t0, t1, t2;
    for (int j = 0; j < lenQ; j++) {
 8031922:	2300      	movs	r3, #0
 8031924:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8031928:	e08f      	b.n	8031a4a <xeval_2+0x136>
        fp2_add(&t0, &Q[j].x, &Q[j].z);
 803192a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 803192e:	4613      	mov	r3, r2
 8031930:	00db      	lsls	r3, r3, #3
 8031932:	4413      	add	r3, r2
 8031934:	011b      	lsls	r3, r3, #4
 8031936:	461a      	mov	r2, r3
 8031938:	68bb      	ldr	r3, [r7, #8]
 803193a:	4413      	add	r3, r2
 803193c:	4619      	mov	r1, r3
 803193e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8031942:	4613      	mov	r3, r2
 8031944:	00db      	lsls	r3, r3, #3
 8031946:	4413      	add	r3, r2
 8031948:	011b      	lsls	r3, r3, #4
 803194a:	461a      	mov	r2, r3
 803194c:	68bb      	ldr	r3, [r7, #8]
 803194e:	4413      	add	r3, r2
 8031950:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031954:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8031958:	4618      	mov	r0, r3
 803195a:	f7e1 f87f 	bl	8012a5c <fp2_add>
        fp2_sub(&t1, &Q[j].x, &Q[j].z);
 803195e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8031962:	4613      	mov	r3, r2
 8031964:	00db      	lsls	r3, r3, #3
 8031966:	4413      	add	r3, r2
 8031968:	011b      	lsls	r3, r3, #4
 803196a:	461a      	mov	r2, r3
 803196c:	68bb      	ldr	r3, [r7, #8]
 803196e:	4413      	add	r3, r2
 8031970:	4619      	mov	r1, r3
 8031972:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8031976:	4613      	mov	r3, r2
 8031978:	00db      	lsls	r3, r3, #3
 803197a:	4413      	add	r3, r2
 803197c:	011b      	lsls	r3, r3, #4
 803197e:	461a      	mov	r2, r3
 8031980:	68bb      	ldr	r3, [r7, #8]
 8031982:	4413      	add	r3, r2
 8031984:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031988:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 803198c:	4618      	mov	r0, r3
 803198e:	f7e1 f89b 	bl	8012ac8 <fp2_sub>
        fp2_mul(&t2, &kps->K.x, &t1);
 8031992:	6839      	ldr	r1, [r7, #0]
 8031994:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8031998:	f107 0314 	add.w	r3, r7, #20
 803199c:	4618      	mov	r0, r3
 803199e:	f7e1 f8c6 	bl	8012b2e <fp2_mul>
        fp2_mul(&t1, &kps->K.z, &t0);
 80319a2:	683b      	ldr	r3, [r7, #0]
 80319a4:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80319a8:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80319ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80319b0:	4618      	mov	r0, r3
 80319b2:	f7e1 f8bc 	bl	8012b2e <fp2_mul>
        fp2_add(&t0, &t2, &t1);
 80319b6:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80319ba:	f107 0114 	add.w	r1, r7, #20
 80319be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80319c2:	4618      	mov	r0, r3
 80319c4:	f7e1 f84a 	bl	8012a5c <fp2_add>
        fp2_sub(&t1, &t2, &t1);
 80319c8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80319cc:	f107 0114 	add.w	r1, r7, #20
 80319d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80319d4:	4618      	mov	r0, r3
 80319d6:	f7e1 f877 	bl	8012ac8 <fp2_sub>
        fp2_mul(&R[j].x, &Q[j].x, &t0);
 80319da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80319de:	4613      	mov	r3, r2
 80319e0:	00db      	lsls	r3, r3, #3
 80319e2:	4413      	add	r3, r2
 80319e4:	011b      	lsls	r3, r3, #4
 80319e6:	461a      	mov	r2, r3
 80319e8:	68fb      	ldr	r3, [r7, #12]
 80319ea:	4413      	add	r3, r2
 80319ec:	4618      	mov	r0, r3
 80319ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80319f2:	4613      	mov	r3, r2
 80319f4:	00db      	lsls	r3, r3, #3
 80319f6:	4413      	add	r3, r2
 80319f8:	011b      	lsls	r3, r3, #4
 80319fa:	461a      	mov	r2, r3
 80319fc:	68bb      	ldr	r3, [r7, #8]
 80319fe:	4413      	add	r3, r2
 8031a00:	4619      	mov	r1, r3
 8031a02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8031a06:	461a      	mov	r2, r3
 8031a08:	f7e1 f891 	bl	8012b2e <fp2_mul>
        fp2_mul(&R[j].z, &Q[j].z, &t1);
 8031a0c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8031a10:	4613      	mov	r3, r2
 8031a12:	00db      	lsls	r3, r3, #3
 8031a14:	4413      	add	r3, r2
 8031a16:	011b      	lsls	r3, r3, #4
 8031a18:	461a      	mov	r2, r3
 8031a1a:	68fb      	ldr	r3, [r7, #12]
 8031a1c:	4413      	add	r3, r2
 8031a1e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031a22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8031a26:	4613      	mov	r3, r2
 8031a28:	00db      	lsls	r3, r3, #3
 8031a2a:	4413      	add	r3, r2
 8031a2c:	011b      	lsls	r3, r3, #4
 8031a2e:	461a      	mov	r2, r3
 8031a30:	68bb      	ldr	r3, [r7, #8]
 8031a32:	4413      	add	r3, r2
 8031a34:	3348      	adds	r3, #72	@ 0x48
 8031a36:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8031a3a:	4619      	mov	r1, r3
 8031a3c:	f7e1 f877 	bl	8012b2e <fp2_mul>
    for (int j = 0; j < lenQ; j++) {
 8031a40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8031a44:	3301      	adds	r3, #1
 8031a46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8031a4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8031a4e:	687b      	ldr	r3, [r7, #4]
 8031a50:	429a      	cmp	r2, r3
 8031a52:	f6ff af6a 	blt.w	803192a <xeval_2+0x16>
    }
}
 8031a56:	bf00      	nop
 8031a58:	bf00      	nop
 8031a5a:	37f0      	adds	r7, #240	@ 0xf0
 8031a5c:	46bd      	mov	sp, r7
 8031a5e:	bd80      	pop	{r7, pc}

08031a60 <xeval_2_singular>:

void
xeval_2_singular(ec_point_t *R, const ec_point_t *Q, const int lenQ, const ec_kps2_t *kps)
{
 8031a60:	b580      	push	{r7, lr}
 8031a62:	b0aa      	sub	sp, #168	@ 0xa8
 8031a64:	af00      	add	r7, sp, #0
 8031a66:	60f8      	str	r0, [r7, #12]
 8031a68:	60b9      	str	r1, [r7, #8]
 8031a6a:	607a      	str	r2, [r7, #4]
 8031a6c:	603b      	str	r3, [r7, #0]
    fp2_t t0, t1;
    for (int i = 0; i < lenQ; i++) {
 8031a6e:	2300      	movs	r3, #0
 8031a70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8031a74:	e094      	b.n	8031ba0 <xeval_2_singular+0x140>
        fp2_mul(&t0, &Q[i].x, &Q[i].z);
 8031a76:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031a7a:	4613      	mov	r3, r2
 8031a7c:	00db      	lsls	r3, r3, #3
 8031a7e:	4413      	add	r3, r2
 8031a80:	011b      	lsls	r3, r3, #4
 8031a82:	461a      	mov	r2, r3
 8031a84:	68bb      	ldr	r3, [r7, #8]
 8031a86:	4413      	add	r3, r2
 8031a88:	4619      	mov	r1, r3
 8031a8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031a8e:	4613      	mov	r3, r2
 8031a90:	00db      	lsls	r3, r3, #3
 8031a92:	4413      	add	r3, r2
 8031a94:	011b      	lsls	r3, r3, #4
 8031a96:	461a      	mov	r2, r3
 8031a98:	68bb      	ldr	r3, [r7, #8]
 8031a9a:	4413      	add	r3, r2
 8031a9c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031aa0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8031aa4:	4618      	mov	r0, r3
 8031aa6:	f7e1 f842 	bl	8012b2e <fp2_mul>
        fp2_mul(&t1, &kps->K.x, &Q[i].z);
 8031aaa:	6839      	ldr	r1, [r7, #0]
 8031aac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031ab0:	4613      	mov	r3, r2
 8031ab2:	00db      	lsls	r3, r3, #3
 8031ab4:	4413      	add	r3, r2
 8031ab6:	011b      	lsls	r3, r3, #4
 8031ab8:	461a      	mov	r2, r3
 8031aba:	68bb      	ldr	r3, [r7, #8]
 8031abc:	4413      	add	r3, r2
 8031abe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031ac2:	f107 0314 	add.w	r3, r7, #20
 8031ac6:	4618      	mov	r0, r3
 8031ac8:	f7e1 f831 	bl	8012b2e <fp2_mul>
        fp2_add(&t1, &t1, &Q[i].x);
 8031acc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031ad0:	4613      	mov	r3, r2
 8031ad2:	00db      	lsls	r3, r3, #3
 8031ad4:	4413      	add	r3, r2
 8031ad6:	011b      	lsls	r3, r3, #4
 8031ad8:	461a      	mov	r2, r3
 8031ada:	68bb      	ldr	r3, [r7, #8]
 8031adc:	4413      	add	r3, r2
 8031ade:	461a      	mov	r2, r3
 8031ae0:	f107 0114 	add.w	r1, r7, #20
 8031ae4:	f107 0314 	add.w	r3, r7, #20
 8031ae8:	4618      	mov	r0, r3
 8031aea:	f7e0 ffb7 	bl	8012a5c <fp2_add>
        fp2_mul(&t1, &t1, &Q[i].x);
 8031aee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031af2:	4613      	mov	r3, r2
 8031af4:	00db      	lsls	r3, r3, #3
 8031af6:	4413      	add	r3, r2
 8031af8:	011b      	lsls	r3, r3, #4
 8031afa:	461a      	mov	r2, r3
 8031afc:	68bb      	ldr	r3, [r7, #8]
 8031afe:	4413      	add	r3, r2
 8031b00:	461a      	mov	r2, r3
 8031b02:	f107 0114 	add.w	r1, r7, #20
 8031b06:	f107 0314 	add.w	r3, r7, #20
 8031b0a:	4618      	mov	r0, r3
 8031b0c:	f7e1 f80f 	bl	8012b2e <fp2_mul>
        fp2_sqr(&R[i].x, &Q[i].z);
 8031b10:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031b14:	4613      	mov	r3, r2
 8031b16:	00db      	lsls	r3, r3, #3
 8031b18:	4413      	add	r3, r2
 8031b1a:	011b      	lsls	r3, r3, #4
 8031b1c:	461a      	mov	r2, r3
 8031b1e:	68fb      	ldr	r3, [r7, #12]
 8031b20:	4413      	add	r3, r2
 8031b22:	4618      	mov	r0, r3
 8031b24:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031b28:	4613      	mov	r3, r2
 8031b2a:	00db      	lsls	r3, r3, #3
 8031b2c:	4413      	add	r3, r2
 8031b2e:	011b      	lsls	r3, r3, #4
 8031b30:	461a      	mov	r2, r3
 8031b32:	68bb      	ldr	r3, [r7, #8]
 8031b34:	4413      	add	r3, r2
 8031b36:	3348      	adds	r3, #72	@ 0x48
 8031b38:	4619      	mov	r1, r3
 8031b3a:	f7e1 f847 	bl	8012bcc <fp2_sqr>
        fp2_add(&R[i].x, &R[i].x, &t1);
 8031b3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031b42:	4613      	mov	r3, r2
 8031b44:	00db      	lsls	r3, r3, #3
 8031b46:	4413      	add	r3, r2
 8031b48:	011b      	lsls	r3, r3, #4
 8031b4a:	461a      	mov	r2, r3
 8031b4c:	68fb      	ldr	r3, [r7, #12]
 8031b4e:	4413      	add	r3, r2
 8031b50:	4618      	mov	r0, r3
 8031b52:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031b56:	4613      	mov	r3, r2
 8031b58:	00db      	lsls	r3, r3, #3
 8031b5a:	4413      	add	r3, r2
 8031b5c:	011b      	lsls	r3, r3, #4
 8031b5e:	461a      	mov	r2, r3
 8031b60:	68fb      	ldr	r3, [r7, #12]
 8031b62:	4413      	add	r3, r2
 8031b64:	4619      	mov	r1, r3
 8031b66:	f107 0314 	add.w	r3, r7, #20
 8031b6a:	461a      	mov	r2, r3
 8031b6c:	f7e0 ff76 	bl	8012a5c <fp2_add>
        fp2_mul(&R[i].z, &t0, &kps->K.z);
 8031b70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031b74:	4613      	mov	r3, r2
 8031b76:	00db      	lsls	r3, r3, #3
 8031b78:	4413      	add	r3, r2
 8031b7a:	011b      	lsls	r3, r3, #4
 8031b7c:	461a      	mov	r2, r3
 8031b7e:	68fb      	ldr	r3, [r7, #12]
 8031b80:	4413      	add	r3, r2
 8031b82:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031b86:	683b      	ldr	r3, [r7, #0]
 8031b88:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031b8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8031b90:	4619      	mov	r1, r3
 8031b92:	f7e0 ffcc 	bl	8012b2e <fp2_mul>
    for (int i = 0; i < lenQ; i++) {
 8031b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8031b9a:	3301      	adds	r3, #1
 8031b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8031ba0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031ba4:	687b      	ldr	r3, [r7, #4]
 8031ba6:	429a      	cmp	r2, r3
 8031ba8:	f6ff af65 	blt.w	8031a76 <xeval_2_singular+0x16>
    }
}
 8031bac:	bf00      	nop
 8031bae:	bf00      	nop
 8031bb0:	37a8      	adds	r7, #168	@ 0xa8
 8031bb2:	46bd      	mov	sp, r7
 8031bb4:	bd80      	pop	{r7, pc}

08031bb6 <xeval_4>:

// Degree-4 isogeny evaluation with kenerl generated by P such that [2]P != (0, 0)
void
xeval_4(ec_point_t *R, const ec_point_t *Q, const int lenQ, const ec_kps4_t *kps)
{
 8031bb6:	b580      	push	{r7, lr}
 8031bb8:	b0aa      	sub	sp, #168	@ 0xa8
 8031bba:	af00      	add	r7, sp, #0
 8031bbc:	60f8      	str	r0, [r7, #12]
 8031bbe:	60b9      	str	r1, [r7, #8]
 8031bc0:	607a      	str	r2, [r7, #4]
 8031bc2:	603b      	str	r3, [r7, #0]
    const ec_point_t *K = kps->K;
 8031bc4:	683b      	ldr	r3, [r7, #0]
 8031bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    fp2_t t0, t1;

    for (int i = 0; i < lenQ; i++) {
 8031bca:	2300      	movs	r3, #0
 8031bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8031bd0:	e124      	b.n	8031e1c <xeval_4+0x266>
        fp2_add(&t0, &Q[i].x, &Q[i].z);
 8031bd2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031bd6:	4613      	mov	r3, r2
 8031bd8:	00db      	lsls	r3, r3, #3
 8031bda:	4413      	add	r3, r2
 8031bdc:	011b      	lsls	r3, r3, #4
 8031bde:	461a      	mov	r2, r3
 8031be0:	68bb      	ldr	r3, [r7, #8]
 8031be2:	4413      	add	r3, r2
 8031be4:	4619      	mov	r1, r3
 8031be6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031bea:	4613      	mov	r3, r2
 8031bec:	00db      	lsls	r3, r3, #3
 8031bee:	4413      	add	r3, r2
 8031bf0:	011b      	lsls	r3, r3, #4
 8031bf2:	461a      	mov	r2, r3
 8031bf4:	68bb      	ldr	r3, [r7, #8]
 8031bf6:	4413      	add	r3, r2
 8031bf8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031bfc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8031c00:	4618      	mov	r0, r3
 8031c02:	f7e0 ff2b 	bl	8012a5c <fp2_add>
        fp2_sub(&t1, &Q[i].x, &Q[i].z);
 8031c06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031c0a:	4613      	mov	r3, r2
 8031c0c:	00db      	lsls	r3, r3, #3
 8031c0e:	4413      	add	r3, r2
 8031c10:	011b      	lsls	r3, r3, #4
 8031c12:	461a      	mov	r2, r3
 8031c14:	68bb      	ldr	r3, [r7, #8]
 8031c16:	4413      	add	r3, r2
 8031c18:	4619      	mov	r1, r3
 8031c1a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031c1e:	4613      	mov	r3, r2
 8031c20:	00db      	lsls	r3, r3, #3
 8031c22:	4413      	add	r3, r2
 8031c24:	011b      	lsls	r3, r3, #4
 8031c26:	461a      	mov	r2, r3
 8031c28:	68bb      	ldr	r3, [r7, #8]
 8031c2a:	4413      	add	r3, r2
 8031c2c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031c30:	f107 0310 	add.w	r3, r7, #16
 8031c34:	4618      	mov	r0, r3
 8031c36:	f7e0 ff47 	bl	8012ac8 <fp2_sub>
        fp2_mul(&(R[i].x), &t0, &K[1].x);
 8031c3a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031c3e:	4613      	mov	r3, r2
 8031c40:	00db      	lsls	r3, r3, #3
 8031c42:	4413      	add	r3, r2
 8031c44:	011b      	lsls	r3, r3, #4
 8031c46:	461a      	mov	r2, r3
 8031c48:	68fb      	ldr	r3, [r7, #12]
 8031c4a:	4413      	add	r3, r2
 8031c4c:	4618      	mov	r0, r3
 8031c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8031c52:	3390      	adds	r3, #144	@ 0x90
 8031c54:	461a      	mov	r2, r3
 8031c56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8031c5a:	4619      	mov	r1, r3
 8031c5c:	f7e0 ff67 	bl	8012b2e <fp2_mul>
        fp2_mul(&(R[i].z), &t1, &K[2].x);
 8031c60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031c64:	4613      	mov	r3, r2
 8031c66:	00db      	lsls	r3, r3, #3
 8031c68:	4413      	add	r3, r2
 8031c6a:	011b      	lsls	r3, r3, #4
 8031c6c:	461a      	mov	r2, r3
 8031c6e:	68fb      	ldr	r3, [r7, #12]
 8031c70:	4413      	add	r3, r2
 8031c72:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8031c7a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8031c7e:	461a      	mov	r2, r3
 8031c80:	f107 0310 	add.w	r3, r7, #16
 8031c84:	4619      	mov	r1, r3
 8031c86:	f7e0 ff52 	bl	8012b2e <fp2_mul>
        fp2_mul(&t0, &t0, &t1);
 8031c8a:	f107 0210 	add.w	r2, r7, #16
 8031c8e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8031c92:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8031c96:	4618      	mov	r0, r3
 8031c98:	f7e0 ff49 	bl	8012b2e <fp2_mul>
        fp2_mul(&t0, &t0, &K[0].x);
 8031c9c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8031ca0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8031ca4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8031ca8:	4618      	mov	r0, r3
 8031caa:	f7e0 ff40 	bl	8012b2e <fp2_mul>
        fp2_add(&t1, &(R[i].x), &(R[i].z));
 8031cae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031cb2:	4613      	mov	r3, r2
 8031cb4:	00db      	lsls	r3, r3, #3
 8031cb6:	4413      	add	r3, r2
 8031cb8:	011b      	lsls	r3, r3, #4
 8031cba:	461a      	mov	r2, r3
 8031cbc:	68fb      	ldr	r3, [r7, #12]
 8031cbe:	4413      	add	r3, r2
 8031cc0:	4619      	mov	r1, r3
 8031cc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031cc6:	4613      	mov	r3, r2
 8031cc8:	00db      	lsls	r3, r3, #3
 8031cca:	4413      	add	r3, r2
 8031ccc:	011b      	lsls	r3, r3, #4
 8031cce:	461a      	mov	r2, r3
 8031cd0:	68fb      	ldr	r3, [r7, #12]
 8031cd2:	4413      	add	r3, r2
 8031cd4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031cd8:	f107 0310 	add.w	r3, r7, #16
 8031cdc:	4618      	mov	r0, r3
 8031cde:	f7e0 febd 	bl	8012a5c <fp2_add>
        fp2_sub(&(R[i].z), &(R[i].x), &(R[i].z));
 8031ce2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031ce6:	4613      	mov	r3, r2
 8031ce8:	00db      	lsls	r3, r3, #3
 8031cea:	4413      	add	r3, r2
 8031cec:	011b      	lsls	r3, r3, #4
 8031cee:	461a      	mov	r2, r3
 8031cf0:	68fb      	ldr	r3, [r7, #12]
 8031cf2:	4413      	add	r3, r2
 8031cf4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031cf8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031cfc:	4613      	mov	r3, r2
 8031cfe:	00db      	lsls	r3, r3, #3
 8031d00:	4413      	add	r3, r2
 8031d02:	011b      	lsls	r3, r3, #4
 8031d04:	461a      	mov	r2, r3
 8031d06:	68fb      	ldr	r3, [r7, #12]
 8031d08:	4413      	add	r3, r2
 8031d0a:	4619      	mov	r1, r3
 8031d0c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031d10:	4613      	mov	r3, r2
 8031d12:	00db      	lsls	r3, r3, #3
 8031d14:	4413      	add	r3, r2
 8031d16:	011b      	lsls	r3, r3, #4
 8031d18:	461a      	mov	r2, r3
 8031d1a:	68fb      	ldr	r3, [r7, #12]
 8031d1c:	4413      	add	r3, r2
 8031d1e:	3348      	adds	r3, #72	@ 0x48
 8031d20:	461a      	mov	r2, r3
 8031d22:	f7e0 fed1 	bl	8012ac8 <fp2_sub>
        fp2_sqr(&t1, &t1);
 8031d26:	f107 0210 	add.w	r2, r7, #16
 8031d2a:	f107 0310 	add.w	r3, r7, #16
 8031d2e:	4611      	mov	r1, r2
 8031d30:	4618      	mov	r0, r3
 8031d32:	f7e0 ff4b 	bl	8012bcc <fp2_sqr>
        fp2_sqr(&(R[i].z), &(R[i].z));
 8031d36:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031d3a:	4613      	mov	r3, r2
 8031d3c:	00db      	lsls	r3, r3, #3
 8031d3e:	4413      	add	r3, r2
 8031d40:	011b      	lsls	r3, r3, #4
 8031d42:	461a      	mov	r2, r3
 8031d44:	68fb      	ldr	r3, [r7, #12]
 8031d46:	4413      	add	r3, r2
 8031d48:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031d4c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031d50:	4613      	mov	r3, r2
 8031d52:	00db      	lsls	r3, r3, #3
 8031d54:	4413      	add	r3, r2
 8031d56:	011b      	lsls	r3, r3, #4
 8031d58:	461a      	mov	r2, r3
 8031d5a:	68fb      	ldr	r3, [r7, #12]
 8031d5c:	4413      	add	r3, r2
 8031d5e:	3348      	adds	r3, #72	@ 0x48
 8031d60:	4619      	mov	r1, r3
 8031d62:	f7e0 ff33 	bl	8012bcc <fp2_sqr>
        fp2_add(&(R[i].x), &t0, &t1);
 8031d66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031d6a:	4613      	mov	r3, r2
 8031d6c:	00db      	lsls	r3, r3, #3
 8031d6e:	4413      	add	r3, r2
 8031d70:	011b      	lsls	r3, r3, #4
 8031d72:	461a      	mov	r2, r3
 8031d74:	68fb      	ldr	r3, [r7, #12]
 8031d76:	4413      	add	r3, r2
 8031d78:	4618      	mov	r0, r3
 8031d7a:	f107 0210 	add.w	r2, r7, #16
 8031d7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8031d82:	4619      	mov	r1, r3
 8031d84:	f7e0 fe6a 	bl	8012a5c <fp2_add>
        fp2_sub(&t0, &t0, &(R[i].z));
 8031d88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031d8c:	4613      	mov	r3, r2
 8031d8e:	00db      	lsls	r3, r3, #3
 8031d90:	4413      	add	r3, r2
 8031d92:	011b      	lsls	r3, r3, #4
 8031d94:	461a      	mov	r2, r3
 8031d96:	68fb      	ldr	r3, [r7, #12]
 8031d98:	4413      	add	r3, r2
 8031d9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8031d9e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8031da2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8031da6:	4618      	mov	r0, r3
 8031da8:	f7e0 fe8e 	bl	8012ac8 <fp2_sub>
        fp2_mul(&(R[i].x), &(R[i].x), &t1);
 8031dac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031db0:	4613      	mov	r3, r2
 8031db2:	00db      	lsls	r3, r3, #3
 8031db4:	4413      	add	r3, r2
 8031db6:	011b      	lsls	r3, r3, #4
 8031db8:	461a      	mov	r2, r3
 8031dba:	68fb      	ldr	r3, [r7, #12]
 8031dbc:	4413      	add	r3, r2
 8031dbe:	4618      	mov	r0, r3
 8031dc0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031dc4:	4613      	mov	r3, r2
 8031dc6:	00db      	lsls	r3, r3, #3
 8031dc8:	4413      	add	r3, r2
 8031dca:	011b      	lsls	r3, r3, #4
 8031dcc:	461a      	mov	r2, r3
 8031dce:	68fb      	ldr	r3, [r7, #12]
 8031dd0:	4413      	add	r3, r2
 8031dd2:	4619      	mov	r1, r3
 8031dd4:	f107 0310 	add.w	r3, r7, #16
 8031dd8:	461a      	mov	r2, r3
 8031dda:	f7e0 fea8 	bl	8012b2e <fp2_mul>
        fp2_mul(&(R[i].z), &(R[i].z), &t0);
 8031dde:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031de2:	4613      	mov	r3, r2
 8031de4:	00db      	lsls	r3, r3, #3
 8031de6:	4413      	add	r3, r2
 8031de8:	011b      	lsls	r3, r3, #4
 8031dea:	461a      	mov	r2, r3
 8031dec:	68fb      	ldr	r3, [r7, #12]
 8031dee:	4413      	add	r3, r2
 8031df0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031df4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031df8:	4613      	mov	r3, r2
 8031dfa:	00db      	lsls	r3, r3, #3
 8031dfc:	4413      	add	r3, r2
 8031dfe:	011b      	lsls	r3, r3, #4
 8031e00:	461a      	mov	r2, r3
 8031e02:	68fb      	ldr	r3, [r7, #12]
 8031e04:	4413      	add	r3, r2
 8031e06:	3348      	adds	r3, #72	@ 0x48
 8031e08:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8031e0c:	4619      	mov	r1, r3
 8031e0e:	f7e0 fe8e 	bl	8012b2e <fp2_mul>
    for (int i = 0; i < lenQ; i++) {
 8031e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8031e16:	3301      	adds	r3, #1
 8031e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8031e1c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8031e20:	687b      	ldr	r3, [r7, #4]
 8031e22:	429a      	cmp	r2, r3
 8031e24:	f6ff aed5 	blt.w	8031bd2 <xeval_4+0x1c>
    }
}
 8031e28:	bf00      	nop
 8031e2a:	bf00      	nop
 8031e2c:	37a8      	adds	r7, #168	@ 0xa8
 8031e2e:	46bd      	mov	sp, r7
 8031e30:	bd80      	pop	{r7, pc}

08031e32 <xisog_2>:

// Degree-2 isogeny with kernel generated by P != (0 ,0)
// Outputs the curve coefficient in the form A24=(A+2C:4C)
void
xisog_2(ec_kps2_t *kps, ec_point_t *B, const ec_point_t P)
{
 8031e32:	b082      	sub	sp, #8
 8031e34:	b580      	push	{r7, lr}
 8031e36:	b082      	sub	sp, #8
 8031e38:	af00      	add	r7, sp, #0
 8031e3a:	6078      	str	r0, [r7, #4]
 8031e3c:	6039      	str	r1, [r7, #0]
 8031e3e:	f107 0110 	add.w	r1, r7, #16
 8031e42:	e881 000c 	stmia.w	r1, {r2, r3}
    fp2_sqr(&B->x, &P.x);
 8031e46:	683b      	ldr	r3, [r7, #0]
 8031e48:	f107 0110 	add.w	r1, r7, #16
 8031e4c:	4618      	mov	r0, r3
 8031e4e:	f7e0 febd 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&B->z, &P.z);
 8031e52:	683b      	ldr	r3, [r7, #0]
 8031e54:	3348      	adds	r3, #72	@ 0x48
 8031e56:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8031e5a:	4611      	mov	r1, r2
 8031e5c:	4618      	mov	r0, r3
 8031e5e:	f7e0 feb5 	bl	8012bcc <fp2_sqr>
    fp2_sub(&B->x, &B->z, &B->x);
 8031e62:	6838      	ldr	r0, [r7, #0]
 8031e64:	683b      	ldr	r3, [r7, #0]
 8031e66:	3348      	adds	r3, #72	@ 0x48
 8031e68:	683a      	ldr	r2, [r7, #0]
 8031e6a:	4619      	mov	r1, r3
 8031e6c:	f7e0 fe2c 	bl	8012ac8 <fp2_sub>
    fp2_add(&kps->K.x, &P.x, &P.z);
 8031e70:	687b      	ldr	r3, [r7, #4]
 8031e72:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8031e76:	f107 0110 	add.w	r1, r7, #16
 8031e7a:	4618      	mov	r0, r3
 8031e7c:	f7e0 fdee 	bl	8012a5c <fp2_add>
    fp2_sub(&kps->K.z, &P.x, &P.z);
 8031e80:	687b      	ldr	r3, [r7, #4]
 8031e82:	3348      	adds	r3, #72	@ 0x48
 8031e84:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8031e88:	f107 0110 	add.w	r1, r7, #16
 8031e8c:	4618      	mov	r0, r3
 8031e8e:	f7e0 fe1b 	bl	8012ac8 <fp2_sub>
}
 8031e92:	bf00      	nop
 8031e94:	3708      	adds	r7, #8
 8031e96:	46bd      	mov	sp, r7
 8031e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8031e9c:	b002      	add	sp, #8
 8031e9e:	4770      	bx	lr

08031ea0 <xisog_2_singular>:

void
xisog_2_singular(ec_kps2_t *kps, ec_point_t *B24, ec_point_t A24)
{
 8031ea0:	b082      	sub	sp, #8
 8031ea2:	b580      	push	{r7, lr}
 8031ea4:	b0a6      	sub	sp, #152	@ 0x98
 8031ea6:	af00      	add	r7, sp, #0
 8031ea8:	6078      	str	r0, [r7, #4]
 8031eaa:	6039      	str	r1, [r7, #0]
 8031eac:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8031eb0:	e881 000c 	stmia.w	r1, {r2, r3}
    // No need to check the square root, only used for signing.
    fp2_t t0, four;
    fp2_set_small(&four, 4);
 8031eb4:	f107 0308 	add.w	r3, r7, #8
 8031eb8:	2104      	movs	r1, #4
 8031eba:	4618      	mov	r0, r3
 8031ebc:	f7e0 fd20 	bl	8012900 <fp2_set_small>
    fp2_add(&t0, &A24.x, &A24.x);
 8031ec0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031ec4:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8031ec8:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8031ecc:	4618      	mov	r0, r3
 8031ece:	f7e0 fdc5 	bl	8012a5c <fp2_add>
    fp2_sub(&t0, &t0, &A24.z);
 8031ed2:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8031ed6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8031eda:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031ede:	4618      	mov	r0, r3
 8031ee0:	f7e0 fdf2 	bl	8012ac8 <fp2_sub>
    fp2_add(&t0, &t0, &t0);
 8031ee4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8031ee8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8031eec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031ef0:	4618      	mov	r0, r3
 8031ef2:	f7e0 fdb3 	bl	8012a5c <fp2_add>
    fp2_inv(&A24.z);
 8031ef6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8031efa:	4618      	mov	r0, r3
 8031efc:	f7e0 fe9d 	bl	8012c3a <fp2_inv>
    fp2_mul(&t0, &t0, &A24.z);
 8031f00:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8031f04:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8031f08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031f0c:	4618      	mov	r0, r3
 8031f0e:	f7e0 fe0e 	bl	8012b2e <fp2_mul>
    fp2_copy(&kps->K.x, &t0);
 8031f12:	687b      	ldr	r3, [r7, #4]
 8031f14:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8031f18:	4611      	mov	r1, r2
 8031f1a:	4618      	mov	r0, r3
 8031f1c:	f7e0 fd86 	bl	8012a2c <fp2_copy>
    fp2_add(&B24->x, &t0, &t0);
 8031f20:	683b      	ldr	r3, [r7, #0]
 8031f22:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8031f26:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8031f2a:	4618      	mov	r0, r3
 8031f2c:	f7e0 fd96 	bl	8012a5c <fp2_add>
    fp2_sqr(&t0, &t0);
 8031f30:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8031f34:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031f38:	4611      	mov	r1, r2
 8031f3a:	4618      	mov	r0, r3
 8031f3c:	f7e0 fe46 	bl	8012bcc <fp2_sqr>
    fp2_sub(&t0, &t0, &four);
 8031f40:	f107 0208 	add.w	r2, r7, #8
 8031f44:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8031f48:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031f4c:	4618      	mov	r0, r3
 8031f4e:	f7e0 fdbb 	bl	8012ac8 <fp2_sub>
    fp2_sqrt(&t0);
 8031f52:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031f56:	4618      	mov	r0, r3
 8031f58:	f7e0 fed6 	bl	8012d08 <fp2_sqrt>
    fp2_neg(&kps->K.z, &t0);
 8031f5c:	687b      	ldr	r3, [r7, #4]
 8031f5e:	3348      	adds	r3, #72	@ 0x48
 8031f60:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8031f64:	4611      	mov	r1, r2
 8031f66:	4618      	mov	r0, r3
 8031f68:	f7e0 fdc9 	bl	8012afe <fp2_neg>
    fp2_add(&B24->z, &t0, &t0);
 8031f6c:	683b      	ldr	r3, [r7, #0]
 8031f6e:	3348      	adds	r3, #72	@ 0x48
 8031f70:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8031f74:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8031f78:	4618      	mov	r0, r3
 8031f7a:	f7e0 fd6f 	bl	8012a5c <fp2_add>
    fp2_add(&B24->x, &B24->x, &B24->z);
 8031f7e:	6838      	ldr	r0, [r7, #0]
 8031f80:	6839      	ldr	r1, [r7, #0]
 8031f82:	683b      	ldr	r3, [r7, #0]
 8031f84:	3348      	adds	r3, #72	@ 0x48
 8031f86:	461a      	mov	r2, r3
 8031f88:	f7e0 fd68 	bl	8012a5c <fp2_add>
    fp2_add(&B24->z, &B24->z, &B24->z);
 8031f8c:	683b      	ldr	r3, [r7, #0]
 8031f8e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031f92:	683b      	ldr	r3, [r7, #0]
 8031f94:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8031f98:	683b      	ldr	r3, [r7, #0]
 8031f9a:	3348      	adds	r3, #72	@ 0x48
 8031f9c:	461a      	mov	r2, r3
 8031f9e:	f7e0 fd5d 	bl	8012a5c <fp2_add>
}
 8031fa2:	bf00      	nop
 8031fa4:	3798      	adds	r7, #152	@ 0x98
 8031fa6:	46bd      	mov	sp, r7
 8031fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8031fac:	b002      	add	sp, #8
 8031fae:	4770      	bx	lr

08031fb0 <xisog_4>:

// Degree-4 isogeny with kernel generated by P such that [2]P != (0 ,0)
// Outputs the curve coefficient in the form A24=(A+2C:4C)
void
xisog_4(ec_kps4_t *kps, ec_point_t *B, const ec_point_t P)
{
 8031fb0:	b082      	sub	sp, #8
 8031fb2:	b580      	push	{r7, lr}
 8031fb4:	b084      	sub	sp, #16
 8031fb6:	af00      	add	r7, sp, #0
 8031fb8:	6078      	str	r0, [r7, #4]
 8031fba:	6039      	str	r1, [r7, #0]
 8031fbc:	f107 0118 	add.w	r1, r7, #24
 8031fc0:	e881 000c 	stmia.w	r1, {r2, r3}
    ec_point_t *K = kps->K;
 8031fc4:	687b      	ldr	r3, [r7, #4]
 8031fc6:	60fb      	str	r3, [r7, #12]

    fp2_sqr(&K[0].x, &P.x);
 8031fc8:	68fb      	ldr	r3, [r7, #12]
 8031fca:	f107 0118 	add.w	r1, r7, #24
 8031fce:	4618      	mov	r0, r3
 8031fd0:	f7e0 fdfc 	bl	8012bcc <fp2_sqr>
    fp2_sqr(&K[0].z, &P.z);
 8031fd4:	68fb      	ldr	r3, [r7, #12]
 8031fd6:	3348      	adds	r3, #72	@ 0x48
 8031fd8:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8031fdc:	4611      	mov	r1, r2
 8031fde:	4618      	mov	r0, r3
 8031fe0:	f7e0 fdf4 	bl	8012bcc <fp2_sqr>
    fp2_add(&K[1].x, &K[0].z, &K[0].x);
 8031fe4:	68fb      	ldr	r3, [r7, #12]
 8031fe6:	3390      	adds	r3, #144	@ 0x90
 8031fe8:	4618      	mov	r0, r3
 8031fea:	68fb      	ldr	r3, [r7, #12]
 8031fec:	3348      	adds	r3, #72	@ 0x48
 8031fee:	68fa      	ldr	r2, [r7, #12]
 8031ff0:	4619      	mov	r1, r3
 8031ff2:	f7e0 fd33 	bl	8012a5c <fp2_add>
    fp2_sub(&K[1].z, &K[0].z, &K[0].x);
 8031ff6:	68fb      	ldr	r3, [r7, #12]
 8031ff8:	3390      	adds	r3, #144	@ 0x90
 8031ffa:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8031ffe:	68fb      	ldr	r3, [r7, #12]
 8032000:	3348      	adds	r3, #72	@ 0x48
 8032002:	68fa      	ldr	r2, [r7, #12]
 8032004:	4619      	mov	r1, r3
 8032006:	f7e0 fd5f 	bl	8012ac8 <fp2_sub>
    fp2_mul(&B->x, &K[1].x, &K[1].z);
 803200a:	6838      	ldr	r0, [r7, #0]
 803200c:	68fb      	ldr	r3, [r7, #12]
 803200e:	3390      	adds	r3, #144	@ 0x90
 8032010:	4619      	mov	r1, r3
 8032012:	68fb      	ldr	r3, [r7, #12]
 8032014:	3390      	adds	r3, #144	@ 0x90
 8032016:	3348      	adds	r3, #72	@ 0x48
 8032018:	461a      	mov	r2, r3
 803201a:	f7e0 fd88 	bl	8012b2e <fp2_mul>
    fp2_sqr(&B->z, &K[0].z);
 803201e:	683b      	ldr	r3, [r7, #0]
 8032020:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8032024:	68fb      	ldr	r3, [r7, #12]
 8032026:	3348      	adds	r3, #72	@ 0x48
 8032028:	4619      	mov	r1, r3
 803202a:	4610      	mov	r0, r2
 803202c:	f7e0 fdce 	bl	8012bcc <fp2_sqr>

    // Constants for xeval_4
    fp2_add(&K[2].x, &P.x, &P.z);
 8032030:	68fb      	ldr	r3, [r7, #12]
 8032032:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8032036:	4618      	mov	r0, r3
 8032038:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 803203c:	461a      	mov	r2, r3
 803203e:	f107 0118 	add.w	r1, r7, #24
 8032042:	f7e0 fd0b 	bl	8012a5c <fp2_add>
    fp2_sub(&K[1].x, &P.x, &P.z);
 8032046:	68fb      	ldr	r3, [r7, #12]
 8032048:	3390      	adds	r3, #144	@ 0x90
 803204a:	4618      	mov	r0, r3
 803204c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8032050:	461a      	mov	r2, r3
 8032052:	f107 0118 	add.w	r1, r7, #24
 8032056:	f7e0 fd37 	bl	8012ac8 <fp2_sub>
    fp2_add(&K[0].x, &K[0].z, &K[0].z);
 803205a:	68f8      	ldr	r0, [r7, #12]
 803205c:	68fb      	ldr	r3, [r7, #12]
 803205e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8032062:	68fb      	ldr	r3, [r7, #12]
 8032064:	3348      	adds	r3, #72	@ 0x48
 8032066:	461a      	mov	r2, r3
 8032068:	f7e0 fcf8 	bl	8012a5c <fp2_add>
    fp2_add(&K[0].x, &K[0].x, &K[0].x);
 803206c:	68fb      	ldr	r3, [r7, #12]
 803206e:	68f9      	ldr	r1, [r7, #12]
 8032070:	68fa      	ldr	r2, [r7, #12]
 8032072:	4618      	mov	r0, r3
 8032074:	f7e0 fcf2 	bl	8012a5c <fp2_add>
}
 8032078:	bf00      	nop
 803207a:	3710      	adds	r7, #16
 803207c:	46bd      	mov	sp, r7
 803207e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8032082:	b002      	add	sp, #8
 8032084:	4770      	bx	lr
	...

08032088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8032088:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80320c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 803208c:	f7f9 fc88 	bl	802b9a0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8032090:	480c      	ldr	r0, [pc, #48]	@ (80320c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8032092:	490d      	ldr	r1, [pc, #52]	@ (80320c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8032094:	4a0d      	ldr	r2, [pc, #52]	@ (80320cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8032096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8032098:	e002      	b.n	80320a0 <LoopCopyDataInit>

0803209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 803209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 803209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 803209e:	3304      	adds	r3, #4

080320a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80320a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80320a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80320a4:	d3f9      	bcc.n	803209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80320a6:	4a0a      	ldr	r2, [pc, #40]	@ (80320d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80320a8:	4c0a      	ldr	r4, [pc, #40]	@ (80320d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80320aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80320ac:	e001      	b.n	80320b2 <LoopFillZerobss>

080320ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80320ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80320b0:	3204      	adds	r2, #4

080320b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80320b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80320b4:	d3fb      	bcc.n	80320ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80320b6:	f003 fe4b 	bl	8035d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80320ba:	f7ef fe59 	bl	8021d70 <main>
  bx  lr    
 80320be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80320c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80320c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80320c8:	20001d10 	.word	0x20001d10
  ldr r2, =_sidata
 80320cc:	0803cf08 	.word	0x0803cf08
  ldr r2, =_sbss
 80320d0:	20001d10 	.word	0x20001d10
  ldr r4, =_ebss
 80320d4:	20002388 	.word	0x20002388

080320d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80320d8:	e7fe      	b.n	80320d8 <ADC_IRQHandler>
	...

080320dc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80320dc:	b580      	push	{r7, lr}
 80320de:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80320e0:	4b29      	ldr	r3, [pc, #164]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 80320e2:	4a2a      	ldr	r2, [pc, #168]	@ (803218c <BSP_SDRAM_Init+0xb0>)
 80320e4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80320e6:	4b2a      	ldr	r3, [pc, #168]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 80320e8:	2202      	movs	r2, #2
 80320ea:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80320ec:	4b28      	ldr	r3, [pc, #160]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 80320ee:	2207      	movs	r2, #7
 80320f0:	605a      	str	r2, [r3, #4]
  //Timing.ExitSelfRefreshDelay = 8;
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80320f2:	4b27      	ldr	r3, [pc, #156]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 80320f4:	2204      	movs	r2, #4
 80320f6:	609a      	str	r2, [r3, #8]
  //Timing.SelfRefreshTime      = 6;
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80320f8:	4b25      	ldr	r3, [pc, #148]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 80320fa:	2207      	movs	r2, #7
 80320fc:	60da      	str	r2, [r3, #12]
  //Timing.RowCycleDelay        = 8;
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  //Timing.WriteRecoveryTime    = 2;
  Timing.WriteRecoveryTime    = 3;
 80320fe:	4b24      	ldr	r3, [pc, #144]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 8032100:	2203      	movs	r2, #3
 8032102:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8032104:	4b22      	ldr	r3, [pc, #136]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 8032106:	2202      	movs	r2, #2
 8032108:	615a      	str	r2, [r3, #20]
  //Timing.RPDelay              = 3;
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 803210a:	4b21      	ldr	r3, [pc, #132]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 803210c:	2202      	movs	r2, #2
 803210e:	619a      	str	r2, [r3, #24]
  //Timing.RCDDelay             = 3;

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8032110:	4b1d      	ldr	r3, [pc, #116]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 8032112:	2201      	movs	r2, #1
 8032114:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8032116:	4b1c      	ldr	r3, [pc, #112]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 8032118:	2200      	movs	r2, #0
 803211a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 803211c:	4b1a      	ldr	r3, [pc, #104]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 803211e:	2204      	movs	r2, #4
 8032120:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8032122:	4b19      	ldr	r3, [pc, #100]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 8032124:	2210      	movs	r2, #16
 8032126:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8032128:	4b17      	ldr	r3, [pc, #92]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 803212a:	2240      	movs	r2, #64	@ 0x40
 803212c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 803212e:	4b16      	ldr	r3, [pc, #88]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 8032130:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8032134:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8032136:	4b14      	ldr	r3, [pc, #80]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 8032138:	2200      	movs	r2, #0
 803213a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 803213c:	4b12      	ldr	r3, [pc, #72]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 803213e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8032142:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8032144:	4b10      	ldr	r3, [pc, #64]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 8032146:	2200      	movs	r2, #0
 8032148:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 803214a:	4b0f      	ldr	r3, [pc, #60]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 803214c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8032150:	629a      	str	r2, [r3, #40]	@ 0x28
  //SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_2;

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8032152:	2100      	movs	r1, #0
 8032154:	480c      	ldr	r0, [pc, #48]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 8032156:	f000 f87f 	bl	8032258 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 803215a:	490d      	ldr	r1, [pc, #52]	@ (8032190 <BSP_SDRAM_Init+0xb4>)
 803215c:	480a      	ldr	r0, [pc, #40]	@ (8032188 <BSP_SDRAM_Init+0xac>)
 803215e:	f001 fdad 	bl	8033cbc <HAL_SDRAM_Init>
 8032162:	4603      	mov	r3, r0
 8032164:	2b00      	cmp	r3, #0
 8032166:	d003      	beq.n	8032170 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8032168:	4b0a      	ldr	r3, [pc, #40]	@ (8032194 <BSP_SDRAM_Init+0xb8>)
 803216a:	2201      	movs	r2, #1
 803216c:	701a      	strb	r2, [r3, #0]
 803216e:	e002      	b.n	8032176 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8032170:	4b08      	ldr	r3, [pc, #32]	@ (8032194 <BSP_SDRAM_Init+0xb8>)
 8032172:	2200      	movs	r2, #0
 8032174:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8032176:	f240 506a 	movw	r0, #1386	@ 0x56a
 803217a:	f000 f80d 	bl	8032198 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 803217e:	4b05      	ldr	r3, [pc, #20]	@ (8032194 <BSP_SDRAM_Init+0xb8>)
 8032180:	781b      	ldrb	r3, [r3, #0]
}
 8032182:	4618      	mov	r0, r3
 8032184:	bd80      	pop	{r7, pc}
 8032186:	bf00      	nop
 8032188:	20002178 	.word	0x20002178
 803218c:	a0000140 	.word	0xa0000140
 8032190:	200021ac 	.word	0x200021ac
 8032194:	20001ca8 	.word	0x20001ca8

08032198 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8032198:	b580      	push	{r7, lr}
 803219a:	b084      	sub	sp, #16
 803219c:	af00      	add	r7, sp, #0
 803219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80321a0:	2300      	movs	r3, #0
 80321a2:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80321a4:	4b2a      	ldr	r3, [pc, #168]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321a6:	2201      	movs	r2, #1
 80321a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80321aa:	4b29      	ldr	r3, [pc, #164]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321ac:	2208      	movs	r2, #8
 80321ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80321b0:	4b27      	ldr	r3, [pc, #156]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321b2:	2201      	movs	r2, #1
 80321b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80321b6:	4b26      	ldr	r3, [pc, #152]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321b8:	2200      	movs	r2, #0
 80321ba:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80321bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80321c0:	4923      	ldr	r1, [pc, #140]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321c2:	4824      	ldr	r0, [pc, #144]	@ (8032254 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80321c4:	f001 fdae 	bl	8033d24 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80321c8:	2001      	movs	r0, #1
 80321ca:	f000 f993 	bl	80324f4 <HAL_Delay>
  //HAL_Delay(10);

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80321ce:	4b20      	ldr	r3, [pc, #128]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321d0:	2202      	movs	r2, #2
 80321d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80321d4:	4b1e      	ldr	r3, [pc, #120]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321d6:	2208      	movs	r2, #8
 80321d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80321da:	4b1d      	ldr	r3, [pc, #116]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321dc:	2201      	movs	r2, #1
 80321de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80321e0:	4b1b      	ldr	r3, [pc, #108]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321e2:	2200      	movs	r2, #0
 80321e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80321e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80321ea:	4919      	ldr	r1, [pc, #100]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321ec:	4819      	ldr	r0, [pc, #100]	@ (8032254 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80321ee:	f001 fd99 	bl	8033d24 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80321f2:	4b17      	ldr	r3, [pc, #92]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321f4:	2203      	movs	r2, #3
 80321f6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80321f8:	4b15      	ldr	r3, [pc, #84]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80321fa:	2208      	movs	r2, #8
 80321fc:	605a      	str	r2, [r3, #4]
  //Command.AutoRefreshNumber       = 4;
  Command.AutoRefreshNumber       = 8;
 80321fe:	4b14      	ldr	r3, [pc, #80]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8032200:	2208      	movs	r2, #8
 8032202:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8032204:	4b12      	ldr	r3, [pc, #72]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8032206:	2200      	movs	r2, #0
 8032208:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 803220a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 803220e:	4910      	ldr	r1, [pc, #64]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8032210:	4810      	ldr	r0, [pc, #64]	@ (8032254 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8032212:	f001 fd87 	bl	8033d24 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8032216:	f44f 730c 	mov.w	r3, #560	@ 0x230
 803221a:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 803221c:	4b0c      	ldr	r3, [pc, #48]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 803221e:	2204      	movs	r2, #4
 8032220:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8032222:	4b0b      	ldr	r3, [pc, #44]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8032224:	2208      	movs	r2, #8
 8032226:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8032228:	4b09      	ldr	r3, [pc, #36]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 803222a:	2201      	movs	r2, #1
 803222c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 803222e:	68fb      	ldr	r3, [r7, #12]
 8032230:	4a07      	ldr	r2, [pc, #28]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8032232:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8032234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8032238:	4905      	ldr	r1, [pc, #20]	@ (8032250 <BSP_SDRAM_Initialization_sequence+0xb8>)
 803223a:	4806      	ldr	r0, [pc, #24]	@ (8032254 <BSP_SDRAM_Initialization_sequence+0xbc>)
 803223c:	f001 fd72 	bl	8033d24 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8032240:	6879      	ldr	r1, [r7, #4]
 8032242:	4804      	ldr	r0, [pc, #16]	@ (8032254 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8032244:	f001 fda3 	bl	8033d8e <HAL_SDRAM_ProgramRefreshRate>
}
 8032248:	bf00      	nop
 803224a:	3710      	adds	r7, #16
 803224c:	46bd      	mov	sp, r7
 803224e:	bd80      	pop	{r7, pc}
 8032250:	200021c8 	.word	0x200021c8
 8032254:	20002178 	.word	0x20002178

08032258 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8032258:	b580      	push	{r7, lr}
 803225a:	b090      	sub	sp, #64	@ 0x40
 803225c:	af00      	add	r7, sp, #0
 803225e:	6078      	str	r0, [r7, #4]
 8032260:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8032262:	687b      	ldr	r3, [r7, #4]
 8032264:	2b00      	cmp	r3, #0
 8032266:	f000 80ec 	beq.w	8032442 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 803226a:	2300      	movs	r3, #0
 803226c:	62bb      	str	r3, [r7, #40]	@ 0x28
 803226e:	4b77      	ldr	r3, [pc, #476]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8032272:	4a76      	ldr	r2, [pc, #472]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032274:	f043 0301 	orr.w	r3, r3, #1
 8032278:	6393      	str	r3, [r2, #56]	@ 0x38
 803227a:	4b74      	ldr	r3, [pc, #464]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 803227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803227e:	f003 0301 	and.w	r3, r3, #1
 8032282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8032284:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8032286:	2300      	movs	r3, #0
 8032288:	627b      	str	r3, [r7, #36]	@ 0x24
 803228a:	4b70      	ldr	r3, [pc, #448]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 803228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803228e:	4a6f      	ldr	r2, [pc, #444]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032290:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8032294:	6313      	str	r3, [r2, #48]	@ 0x30
 8032296:	4b6d      	ldr	r3, [pc, #436]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803229a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 803229e:	627b      	str	r3, [r7, #36]	@ 0x24
 80322a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80322a2:	2300      	movs	r3, #0
 80322a4:	623b      	str	r3, [r7, #32]
 80322a6:	4b69      	ldr	r3, [pc, #420]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80322aa:	4a68      	ldr	r2, [pc, #416]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322ac:	f043 0302 	orr.w	r3, r3, #2
 80322b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80322b2:	4b66      	ldr	r3, [pc, #408]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80322b6:	f003 0302 	and.w	r3, r3, #2
 80322ba:	623b      	str	r3, [r7, #32]
 80322bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80322be:	2300      	movs	r3, #0
 80322c0:	61fb      	str	r3, [r7, #28]
 80322c2:	4b62      	ldr	r3, [pc, #392]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80322c6:	4a61      	ldr	r2, [pc, #388]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322c8:	f043 0304 	orr.w	r3, r3, #4
 80322cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80322ce:	4b5f      	ldr	r3, [pc, #380]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80322d2:	f003 0304 	and.w	r3, r3, #4
 80322d6:	61fb      	str	r3, [r7, #28]
 80322d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80322da:	2300      	movs	r3, #0
 80322dc:	61bb      	str	r3, [r7, #24]
 80322de:	4b5b      	ldr	r3, [pc, #364]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80322e2:	4a5a      	ldr	r2, [pc, #360]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322e4:	f043 0308 	orr.w	r3, r3, #8
 80322e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80322ea:	4b58      	ldr	r3, [pc, #352]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80322ee:	f003 0308 	and.w	r3, r3, #8
 80322f2:	61bb      	str	r3, [r7, #24]
 80322f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80322f6:	2300      	movs	r3, #0
 80322f8:	617b      	str	r3, [r7, #20]
 80322fa:	4b54      	ldr	r3, [pc, #336]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 80322fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80322fe:	4a53      	ldr	r2, [pc, #332]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032300:	f043 0310 	orr.w	r3, r3, #16
 8032304:	6313      	str	r3, [r2, #48]	@ 0x30
 8032306:	4b51      	ldr	r3, [pc, #324]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803230a:	f003 0310 	and.w	r3, r3, #16
 803230e:	617b      	str	r3, [r7, #20]
 8032310:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8032312:	2300      	movs	r3, #0
 8032314:	613b      	str	r3, [r7, #16]
 8032316:	4b4d      	ldr	r3, [pc, #308]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803231a:	4a4c      	ldr	r2, [pc, #304]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 803231c:	f043 0320 	orr.w	r3, r3, #32
 8032320:	6313      	str	r3, [r2, #48]	@ 0x30
 8032322:	4b4a      	ldr	r3, [pc, #296]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8032326:	f003 0320 	and.w	r3, r3, #32
 803232a:	613b      	str	r3, [r7, #16]
 803232c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 803232e:	2300      	movs	r3, #0
 8032330:	60fb      	str	r3, [r7, #12]
 8032332:	4b46      	ldr	r3, [pc, #280]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8032336:	4a45      	ldr	r2, [pc, #276]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803233c:	6313      	str	r3, [r2, #48]	@ 0x30
 803233e:	4b43      	ldr	r3, [pc, #268]	@ (803244c <BSP_SDRAM_MspInit+0x1f4>)
 8032340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8032342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8032346:	60fb      	str	r3, [r7, #12]
 8032348:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 803234a:	2302      	movs	r3, #2
 803234c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 803234e:	2302      	movs	r3, #2
 8032350:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8032352:	2300      	movs	r3, #0
 8032354:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8032356:	230c      	movs	r3, #12
 8032358:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 803235a:	2360      	movs	r3, #96	@ 0x60
 803235c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 803235e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8032362:	4619      	mov	r1, r3
 8032364:	483a      	ldr	r0, [pc, #232]	@ (8032450 <BSP_SDRAM_MspInit+0x1f8>)
 8032366:	f000 fb89 	bl	8032a7c <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 803236a:	2301      	movs	r3, #1
 803236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 803236e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8032372:	4619      	mov	r1, r3
 8032374:	4837      	ldr	r0, [pc, #220]	@ (8032454 <BSP_SDRAM_MspInit+0x1fc>)
 8032376:	f000 fb81 	bl	8032a7c <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 803237a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 803237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8032380:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8032384:	4619      	mov	r1, r3
 8032386:	4834      	ldr	r0, [pc, #208]	@ (8032458 <BSP_SDRAM_MspInit+0x200>)
 8032388:	f000 fb78 	bl	8032a7c <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 803238c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8032390:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8032392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8032396:	4619      	mov	r1, r3
 8032398:	4830      	ldr	r0, [pc, #192]	@ (803245c <BSP_SDRAM_MspInit+0x204>)
 803239a:	f000 fb6f 	bl	8032a7c <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 803239e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80323a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80323a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80323a8:	4619      	mov	r1, r3
 80323aa:	482d      	ldr	r0, [pc, #180]	@ (8032460 <BSP_SDRAM_MspInit+0x208>)
 80323ac:	f000 fb66 	bl	8032a7c <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80323b0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80323b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80323b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80323ba:	4619      	mov	r1, r3
 80323bc:	4829      	ldr	r0, [pc, #164]	@ (8032464 <BSP_SDRAM_MspInit+0x20c>)
 80323be:	f000 fb5d 	bl	8032a7c <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80323c2:	4b29      	ldr	r3, [pc, #164]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323c4:	2200      	movs	r2, #0
 80323c6:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80323c8:	4b27      	ldr	r3, [pc, #156]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323ca:	2280      	movs	r2, #128	@ 0x80
 80323cc:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80323ce:	4b26      	ldr	r3, [pc, #152]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80323d4:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80323d6:	4b24      	ldr	r3, [pc, #144]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80323dc:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80323de:	4b22      	ldr	r3, [pc, #136]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80323e4:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80323e6:	4b20      	ldr	r3, [pc, #128]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80323ec:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 80323ee:	4b1e      	ldr	r3, [pc, #120]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323f0:	2200      	movs	r2, #0
 80323f2:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80323f4:	4b1c      	ldr	r3, [pc, #112]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80323fa:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80323fc:	4b1a      	ldr	r3, [pc, #104]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 80323fe:	2200      	movs	r2, #0
 8032400:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8032402:	4b19      	ldr	r3, [pc, #100]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 8032404:	2203      	movs	r2, #3
 8032406:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8032408:	4b17      	ldr	r3, [pc, #92]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 803240a:	2200      	movs	r2, #0
 803240c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 803240e:	4b16      	ldr	r3, [pc, #88]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 8032410:	2200      	movs	r2, #0
 8032412:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8032414:	4b14      	ldr	r3, [pc, #80]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 8032416:	4a15      	ldr	r2, [pc, #84]	@ (803246c <BSP_SDRAM_MspInit+0x214>)
 8032418:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 803241a:	687b      	ldr	r3, [r7, #4]
 803241c:	4a12      	ldr	r2, [pc, #72]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 803241e:	631a      	str	r2, [r3, #48]	@ 0x30
 8032420:	4a11      	ldr	r2, [pc, #68]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 8032422:	687b      	ldr	r3, [r7, #4]
 8032424:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8032426:	4810      	ldr	r0, [pc, #64]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 8032428:	f000 fa18 	bl	803285c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 803242c:	480e      	ldr	r0, [pc, #56]	@ (8032468 <BSP_SDRAM_MspInit+0x210>)
 803242e:	f000 f967 	bl	8032700 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8032432:	2200      	movs	r2, #0
 8032434:	210f      	movs	r1, #15
 8032436:	2038      	movs	r0, #56	@ 0x38
 8032438:	f000 f938 	bl	80326ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 803243c:	2038      	movs	r0, #56	@ 0x38
 803243e:	f000 f951 	bl	80326e4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8032442:	bf00      	nop
 8032444:	3740      	adds	r7, #64	@ 0x40
 8032446:	46bd      	mov	sp, r7
 8032448:	bd80      	pop	{r7, pc}
 803244a:	bf00      	nop
 803244c:	40023800 	.word	0x40023800
 8032450:	40020400 	.word	0x40020400
 8032454:	40020800 	.word	0x40020800
 8032458:	40020c00 	.word	0x40020c00
 803245c:	40021000 	.word	0x40021000
 8032460:	40021400 	.word	0x40021400
 8032464:	40021800 	.word	0x40021800
 8032468:	200021d8 	.word	0x200021d8
 803246c:	40026410 	.word	0x40026410

08032470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8032470:	b580      	push	{r7, lr}
 8032472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8032474:	4b0e      	ldr	r3, [pc, #56]	@ (80324b0 <HAL_Init+0x40>)
 8032476:	681b      	ldr	r3, [r3, #0]
 8032478:	4a0d      	ldr	r2, [pc, #52]	@ (80324b0 <HAL_Init+0x40>)
 803247a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 803247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8032480:	4b0b      	ldr	r3, [pc, #44]	@ (80324b0 <HAL_Init+0x40>)
 8032482:	681b      	ldr	r3, [r3, #0]
 8032484:	4a0a      	ldr	r2, [pc, #40]	@ (80324b0 <HAL_Init+0x40>)
 8032486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 803248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 803248c:	4b08      	ldr	r3, [pc, #32]	@ (80324b0 <HAL_Init+0x40>)
 803248e:	681b      	ldr	r3, [r3, #0]
 8032490:	4a07      	ldr	r2, [pc, #28]	@ (80324b0 <HAL_Init+0x40>)
 8032492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8032496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8032498:	2003      	movs	r0, #3
 803249a:	f000 f8fc 	bl	8032696 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 803249e:	200f      	movs	r0, #15
 80324a0:	f7f9 f92e 	bl	802b700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80324a4:	f7f8 ff2a 	bl	802b2fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80324a8:	2300      	movs	r3, #0
}
 80324aa:	4618      	mov	r0, r3
 80324ac:	bd80      	pop	{r7, pc}
 80324ae:	bf00      	nop
 80324b0:	40023c00 	.word	0x40023c00

080324b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80324b4:	b480      	push	{r7}
 80324b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80324b8:	4b06      	ldr	r3, [pc, #24]	@ (80324d4 <HAL_IncTick+0x20>)
 80324ba:	781b      	ldrb	r3, [r3, #0]
 80324bc:	461a      	mov	r2, r3
 80324be:	4b06      	ldr	r3, [pc, #24]	@ (80324d8 <HAL_IncTick+0x24>)
 80324c0:	681b      	ldr	r3, [r3, #0]
 80324c2:	4413      	add	r3, r2
 80324c4:	4a04      	ldr	r2, [pc, #16]	@ (80324d8 <HAL_IncTick+0x24>)
 80324c6:	6013      	str	r3, [r2, #0]
}
 80324c8:	bf00      	nop
 80324ca:	46bd      	mov	sp, r7
 80324cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80324d0:	4770      	bx	lr
 80324d2:	bf00      	nop
 80324d4:	20001cb0 	.word	0x20001cb0
 80324d8:	20002238 	.word	0x20002238

080324dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80324dc:	b480      	push	{r7}
 80324de:	af00      	add	r7, sp, #0
  return uwTick;
 80324e0:	4b03      	ldr	r3, [pc, #12]	@ (80324f0 <HAL_GetTick+0x14>)
 80324e2:	681b      	ldr	r3, [r3, #0]
}
 80324e4:	4618      	mov	r0, r3
 80324e6:	46bd      	mov	sp, r7
 80324e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80324ec:	4770      	bx	lr
 80324ee:	bf00      	nop
 80324f0:	20002238 	.word	0x20002238

080324f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80324f4:	b580      	push	{r7, lr}
 80324f6:	b084      	sub	sp, #16
 80324f8:	af00      	add	r7, sp, #0
 80324fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80324fc:	f7ff ffee 	bl	80324dc <HAL_GetTick>
 8032500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8032502:	687b      	ldr	r3, [r7, #4]
 8032504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8032506:	68fb      	ldr	r3, [r7, #12]
 8032508:	f1b3 3fff 	cmp.w	r3, #4294967295
 803250c:	d005      	beq.n	803251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 803250e:	4b0a      	ldr	r3, [pc, #40]	@ (8032538 <HAL_Delay+0x44>)
 8032510:	781b      	ldrb	r3, [r3, #0]
 8032512:	461a      	mov	r2, r3
 8032514:	68fb      	ldr	r3, [r7, #12]
 8032516:	4413      	add	r3, r2
 8032518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 803251a:	bf00      	nop
 803251c:	f7ff ffde 	bl	80324dc <HAL_GetTick>
 8032520:	4602      	mov	r2, r0
 8032522:	68bb      	ldr	r3, [r7, #8]
 8032524:	1ad3      	subs	r3, r2, r3
 8032526:	68fa      	ldr	r2, [r7, #12]
 8032528:	429a      	cmp	r2, r3
 803252a:	d8f7      	bhi.n	803251c <HAL_Delay+0x28>
  {
  }
}
 803252c:	bf00      	nop
 803252e:	bf00      	nop
 8032530:	3710      	adds	r7, #16
 8032532:	46bd      	mov	sp, r7
 8032534:	bd80      	pop	{r7, pc}
 8032536:	bf00      	nop
 8032538:	20001cb0 	.word	0x20001cb0

0803253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 803253c:	b480      	push	{r7}
 803253e:	b085      	sub	sp, #20
 8032540:	af00      	add	r7, sp, #0
 8032542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8032544:	687b      	ldr	r3, [r7, #4]
 8032546:	f003 0307 	and.w	r3, r3, #7
 803254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 803254c:	4b0c      	ldr	r3, [pc, #48]	@ (8032580 <__NVIC_SetPriorityGrouping+0x44>)
 803254e:	68db      	ldr	r3, [r3, #12]
 8032550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8032552:	68ba      	ldr	r2, [r7, #8]
 8032554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8032558:	4013      	ands	r3, r2
 803255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 803255c:	68fb      	ldr	r3, [r7, #12]
 803255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8032560:	68bb      	ldr	r3, [r7, #8]
 8032562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8032564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8032568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 803256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 803256e:	4a04      	ldr	r2, [pc, #16]	@ (8032580 <__NVIC_SetPriorityGrouping+0x44>)
 8032570:	68bb      	ldr	r3, [r7, #8]
 8032572:	60d3      	str	r3, [r2, #12]
}
 8032574:	bf00      	nop
 8032576:	3714      	adds	r7, #20
 8032578:	46bd      	mov	sp, r7
 803257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803257e:	4770      	bx	lr
 8032580:	e000ed00 	.word	0xe000ed00

08032584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8032584:	b480      	push	{r7}
 8032586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8032588:	4b04      	ldr	r3, [pc, #16]	@ (803259c <__NVIC_GetPriorityGrouping+0x18>)
 803258a:	68db      	ldr	r3, [r3, #12]
 803258c:	0a1b      	lsrs	r3, r3, #8
 803258e:	f003 0307 	and.w	r3, r3, #7
}
 8032592:	4618      	mov	r0, r3
 8032594:	46bd      	mov	sp, r7
 8032596:	f85d 7b04 	ldr.w	r7, [sp], #4
 803259a:	4770      	bx	lr
 803259c:	e000ed00 	.word	0xe000ed00

080325a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80325a0:	b480      	push	{r7}
 80325a2:	b083      	sub	sp, #12
 80325a4:	af00      	add	r7, sp, #0
 80325a6:	4603      	mov	r3, r0
 80325a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80325aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80325ae:	2b00      	cmp	r3, #0
 80325b0:	db0b      	blt.n	80325ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80325b2:	79fb      	ldrb	r3, [r7, #7]
 80325b4:	f003 021f 	and.w	r2, r3, #31
 80325b8:	4907      	ldr	r1, [pc, #28]	@ (80325d8 <__NVIC_EnableIRQ+0x38>)
 80325ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80325be:	095b      	lsrs	r3, r3, #5
 80325c0:	2001      	movs	r0, #1
 80325c2:	fa00 f202 	lsl.w	r2, r0, r2
 80325c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80325ca:	bf00      	nop
 80325cc:	370c      	adds	r7, #12
 80325ce:	46bd      	mov	sp, r7
 80325d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80325d4:	4770      	bx	lr
 80325d6:	bf00      	nop
 80325d8:	e000e100 	.word	0xe000e100

080325dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80325dc:	b480      	push	{r7}
 80325de:	b083      	sub	sp, #12
 80325e0:	af00      	add	r7, sp, #0
 80325e2:	4603      	mov	r3, r0
 80325e4:	6039      	str	r1, [r7, #0]
 80325e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80325e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80325ec:	2b00      	cmp	r3, #0
 80325ee:	db0a      	blt.n	8032606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80325f0:	683b      	ldr	r3, [r7, #0]
 80325f2:	b2da      	uxtb	r2, r3
 80325f4:	490c      	ldr	r1, [pc, #48]	@ (8032628 <__NVIC_SetPriority+0x4c>)
 80325f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80325fa:	0112      	lsls	r2, r2, #4
 80325fc:	b2d2      	uxtb	r2, r2
 80325fe:	440b      	add	r3, r1
 8032600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8032604:	e00a      	b.n	803261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8032606:	683b      	ldr	r3, [r7, #0]
 8032608:	b2da      	uxtb	r2, r3
 803260a:	4908      	ldr	r1, [pc, #32]	@ (803262c <__NVIC_SetPriority+0x50>)
 803260c:	79fb      	ldrb	r3, [r7, #7]
 803260e:	f003 030f 	and.w	r3, r3, #15
 8032612:	3b04      	subs	r3, #4
 8032614:	0112      	lsls	r2, r2, #4
 8032616:	b2d2      	uxtb	r2, r2
 8032618:	440b      	add	r3, r1
 803261a:	761a      	strb	r2, [r3, #24]
}
 803261c:	bf00      	nop
 803261e:	370c      	adds	r7, #12
 8032620:	46bd      	mov	sp, r7
 8032622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032626:	4770      	bx	lr
 8032628:	e000e100 	.word	0xe000e100
 803262c:	e000ed00 	.word	0xe000ed00

08032630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8032630:	b480      	push	{r7}
 8032632:	b089      	sub	sp, #36	@ 0x24
 8032634:	af00      	add	r7, sp, #0
 8032636:	60f8      	str	r0, [r7, #12]
 8032638:	60b9      	str	r1, [r7, #8]
 803263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 803263c:	68fb      	ldr	r3, [r7, #12]
 803263e:	f003 0307 	and.w	r3, r3, #7
 8032642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8032644:	69fb      	ldr	r3, [r7, #28]
 8032646:	f1c3 0307 	rsb	r3, r3, #7
 803264a:	2b04      	cmp	r3, #4
 803264c:	bf28      	it	cs
 803264e:	2304      	movcs	r3, #4
 8032650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8032652:	69fb      	ldr	r3, [r7, #28]
 8032654:	3304      	adds	r3, #4
 8032656:	2b06      	cmp	r3, #6
 8032658:	d902      	bls.n	8032660 <NVIC_EncodePriority+0x30>
 803265a:	69fb      	ldr	r3, [r7, #28]
 803265c:	3b03      	subs	r3, #3
 803265e:	e000      	b.n	8032662 <NVIC_EncodePriority+0x32>
 8032660:	2300      	movs	r3, #0
 8032662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8032664:	f04f 32ff 	mov.w	r2, #4294967295
 8032668:	69bb      	ldr	r3, [r7, #24]
 803266a:	fa02 f303 	lsl.w	r3, r2, r3
 803266e:	43da      	mvns	r2, r3
 8032670:	68bb      	ldr	r3, [r7, #8]
 8032672:	401a      	ands	r2, r3
 8032674:	697b      	ldr	r3, [r7, #20]
 8032676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8032678:	f04f 31ff 	mov.w	r1, #4294967295
 803267c:	697b      	ldr	r3, [r7, #20]
 803267e:	fa01 f303 	lsl.w	r3, r1, r3
 8032682:	43d9      	mvns	r1, r3
 8032684:	687b      	ldr	r3, [r7, #4]
 8032686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8032688:	4313      	orrs	r3, r2
         );
}
 803268a:	4618      	mov	r0, r3
 803268c:	3724      	adds	r7, #36	@ 0x24
 803268e:	46bd      	mov	sp, r7
 8032690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032694:	4770      	bx	lr

08032696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8032696:	b580      	push	{r7, lr}
 8032698:	b082      	sub	sp, #8
 803269a:	af00      	add	r7, sp, #0
 803269c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 803269e:	6878      	ldr	r0, [r7, #4]
 80326a0:	f7ff ff4c 	bl	803253c <__NVIC_SetPriorityGrouping>
}
 80326a4:	bf00      	nop
 80326a6:	3708      	adds	r7, #8
 80326a8:	46bd      	mov	sp, r7
 80326aa:	bd80      	pop	{r7, pc}

080326ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80326ac:	b580      	push	{r7, lr}
 80326ae:	b086      	sub	sp, #24
 80326b0:	af00      	add	r7, sp, #0
 80326b2:	4603      	mov	r3, r0
 80326b4:	60b9      	str	r1, [r7, #8]
 80326b6:	607a      	str	r2, [r7, #4]
 80326b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80326ba:	2300      	movs	r3, #0
 80326bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80326be:	f7ff ff61 	bl	8032584 <__NVIC_GetPriorityGrouping>
 80326c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80326c4:	687a      	ldr	r2, [r7, #4]
 80326c6:	68b9      	ldr	r1, [r7, #8]
 80326c8:	6978      	ldr	r0, [r7, #20]
 80326ca:	f7ff ffb1 	bl	8032630 <NVIC_EncodePriority>
 80326ce:	4602      	mov	r2, r0
 80326d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80326d4:	4611      	mov	r1, r2
 80326d6:	4618      	mov	r0, r3
 80326d8:	f7ff ff80 	bl	80325dc <__NVIC_SetPriority>
}
 80326dc:	bf00      	nop
 80326de:	3718      	adds	r7, #24
 80326e0:	46bd      	mov	sp, r7
 80326e2:	bd80      	pop	{r7, pc}

080326e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80326e4:	b580      	push	{r7, lr}
 80326e6:	b082      	sub	sp, #8
 80326e8:	af00      	add	r7, sp, #0
 80326ea:	4603      	mov	r3, r0
 80326ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80326ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80326f2:	4618      	mov	r0, r3
 80326f4:	f7ff ff54 	bl	80325a0 <__NVIC_EnableIRQ>
}
 80326f8:	bf00      	nop
 80326fa:	3708      	adds	r7, #8
 80326fc:	46bd      	mov	sp, r7
 80326fe:	bd80      	pop	{r7, pc}

08032700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8032700:	b580      	push	{r7, lr}
 8032702:	b086      	sub	sp, #24
 8032704:	af00      	add	r7, sp, #0
 8032706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8032708:	2300      	movs	r3, #0
 803270a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 803270c:	f7ff fee6 	bl	80324dc <HAL_GetTick>
 8032710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8032712:	687b      	ldr	r3, [r7, #4]
 8032714:	2b00      	cmp	r3, #0
 8032716:	d101      	bne.n	803271c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8032718:	2301      	movs	r3, #1
 803271a:	e099      	b.n	8032850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 803271c:	687b      	ldr	r3, [r7, #4]
 803271e:	2202      	movs	r2, #2
 8032720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8032724:	687b      	ldr	r3, [r7, #4]
 8032726:	2200      	movs	r2, #0
 8032728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 803272c:	687b      	ldr	r3, [r7, #4]
 803272e:	681b      	ldr	r3, [r3, #0]
 8032730:	681a      	ldr	r2, [r3, #0]
 8032732:	687b      	ldr	r3, [r7, #4]
 8032734:	681b      	ldr	r3, [r3, #0]
 8032736:	f022 0201 	bic.w	r2, r2, #1
 803273a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 803273c:	e00f      	b.n	803275e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 803273e:	f7ff fecd 	bl	80324dc <HAL_GetTick>
 8032742:	4602      	mov	r2, r0
 8032744:	693b      	ldr	r3, [r7, #16]
 8032746:	1ad3      	subs	r3, r2, r3
 8032748:	2b05      	cmp	r3, #5
 803274a:	d908      	bls.n	803275e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 803274c:	687b      	ldr	r3, [r7, #4]
 803274e:	2220      	movs	r2, #32
 8032750:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8032752:	687b      	ldr	r3, [r7, #4]
 8032754:	2203      	movs	r2, #3
 8032756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 803275a:	2303      	movs	r3, #3
 803275c:	e078      	b.n	8032850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 803275e:	687b      	ldr	r3, [r7, #4]
 8032760:	681b      	ldr	r3, [r3, #0]
 8032762:	681b      	ldr	r3, [r3, #0]
 8032764:	f003 0301 	and.w	r3, r3, #1
 8032768:	2b00      	cmp	r3, #0
 803276a:	d1e8      	bne.n	803273e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 803276c:	687b      	ldr	r3, [r7, #4]
 803276e:	681b      	ldr	r3, [r3, #0]
 8032770:	681b      	ldr	r3, [r3, #0]
 8032772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8032774:	697a      	ldr	r2, [r7, #20]
 8032776:	4b38      	ldr	r3, [pc, #224]	@ (8032858 <HAL_DMA_Init+0x158>)
 8032778:	4013      	ands	r3, r2
 803277a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803277c:	687b      	ldr	r3, [r7, #4]
 803277e:	685a      	ldr	r2, [r3, #4]
 8032780:	687b      	ldr	r3, [r7, #4]
 8032782:	689b      	ldr	r3, [r3, #8]
 8032784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8032786:	687b      	ldr	r3, [r7, #4]
 8032788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803278a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 803278c:	687b      	ldr	r3, [r7, #4]
 803278e:	691b      	ldr	r3, [r3, #16]
 8032790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8032792:	687b      	ldr	r3, [r7, #4]
 8032794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8032796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8032798:	687b      	ldr	r3, [r7, #4]
 803279a:	699b      	ldr	r3, [r3, #24]
 803279c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 803279e:	687b      	ldr	r3, [r7, #4]
 80327a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80327a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80327a4:	687b      	ldr	r3, [r7, #4]
 80327a6:	6a1b      	ldr	r3, [r3, #32]
 80327a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80327aa:	697a      	ldr	r2, [r7, #20]
 80327ac:	4313      	orrs	r3, r2
 80327ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80327b0:	687b      	ldr	r3, [r7, #4]
 80327b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80327b4:	2b04      	cmp	r3, #4
 80327b6:	d107      	bne.n	80327c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80327b8:	687b      	ldr	r3, [r7, #4]
 80327ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80327bc:	687b      	ldr	r3, [r7, #4]
 80327be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80327c0:	4313      	orrs	r3, r2
 80327c2:	697a      	ldr	r2, [r7, #20]
 80327c4:	4313      	orrs	r3, r2
 80327c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80327c8:	687b      	ldr	r3, [r7, #4]
 80327ca:	681b      	ldr	r3, [r3, #0]
 80327cc:	697a      	ldr	r2, [r7, #20]
 80327ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80327d0:	687b      	ldr	r3, [r7, #4]
 80327d2:	681b      	ldr	r3, [r3, #0]
 80327d4:	695b      	ldr	r3, [r3, #20]
 80327d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80327d8:	697b      	ldr	r3, [r7, #20]
 80327da:	f023 0307 	bic.w	r3, r3, #7
 80327de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80327e0:	687b      	ldr	r3, [r7, #4]
 80327e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80327e4:	697a      	ldr	r2, [r7, #20]
 80327e6:	4313      	orrs	r3, r2
 80327e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80327ea:	687b      	ldr	r3, [r7, #4]
 80327ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80327ee:	2b04      	cmp	r3, #4
 80327f0:	d117      	bne.n	8032822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80327f2:	687b      	ldr	r3, [r7, #4]
 80327f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80327f6:	697a      	ldr	r2, [r7, #20]
 80327f8:	4313      	orrs	r3, r2
 80327fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80327fc:	687b      	ldr	r3, [r7, #4]
 80327fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032800:	2b00      	cmp	r3, #0
 8032802:	d00e      	beq.n	8032822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8032804:	6878      	ldr	r0, [r7, #4]
 8032806:	f000 f8bd 	bl	8032984 <DMA_CheckFifoParam>
 803280a:	4603      	mov	r3, r0
 803280c:	2b00      	cmp	r3, #0
 803280e:	d008      	beq.n	8032822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8032810:	687b      	ldr	r3, [r7, #4]
 8032812:	2240      	movs	r2, #64	@ 0x40
 8032814:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8032816:	687b      	ldr	r3, [r7, #4]
 8032818:	2201      	movs	r2, #1
 803281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 803281e:	2301      	movs	r3, #1
 8032820:	e016      	b.n	8032850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8032822:	687b      	ldr	r3, [r7, #4]
 8032824:	681b      	ldr	r3, [r3, #0]
 8032826:	697a      	ldr	r2, [r7, #20]
 8032828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 803282a:	6878      	ldr	r0, [r7, #4]
 803282c:	f000 f874 	bl	8032918 <DMA_CalcBaseAndBitshift>
 8032830:	4603      	mov	r3, r0
 8032832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8032834:	687b      	ldr	r3, [r7, #4]
 8032836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8032838:	223f      	movs	r2, #63	@ 0x3f
 803283a:	409a      	lsls	r2, r3
 803283c:	68fb      	ldr	r3, [r7, #12]
 803283e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8032840:	687b      	ldr	r3, [r7, #4]
 8032842:	2200      	movs	r2, #0
 8032844:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8032846:	687b      	ldr	r3, [r7, #4]
 8032848:	2201      	movs	r2, #1
 803284a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 803284e:	2300      	movs	r3, #0
}
 8032850:	4618      	mov	r0, r3
 8032852:	3718      	adds	r7, #24
 8032854:	46bd      	mov	sp, r7
 8032856:	bd80      	pop	{r7, pc}
 8032858:	f010803f 	.word	0xf010803f

0803285c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 803285c:	b580      	push	{r7, lr}
 803285e:	b084      	sub	sp, #16
 8032860:	af00      	add	r7, sp, #0
 8032862:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8032864:	687b      	ldr	r3, [r7, #4]
 8032866:	2b00      	cmp	r3, #0
 8032868:	d101      	bne.n	803286e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 803286a:	2301      	movs	r3, #1
 803286c:	e050      	b.n	8032910 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 803286e:	687b      	ldr	r3, [r7, #4]
 8032870:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8032874:	b2db      	uxtb	r3, r3
 8032876:	2b02      	cmp	r3, #2
 8032878:	d101      	bne.n	803287e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 803287a:	2302      	movs	r3, #2
 803287c:	e048      	b.n	8032910 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 803287e:	687b      	ldr	r3, [r7, #4]
 8032880:	681b      	ldr	r3, [r3, #0]
 8032882:	681a      	ldr	r2, [r3, #0]
 8032884:	687b      	ldr	r3, [r7, #4]
 8032886:	681b      	ldr	r3, [r3, #0]
 8032888:	f022 0201 	bic.w	r2, r2, #1
 803288c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 803288e:	687b      	ldr	r3, [r7, #4]
 8032890:	681b      	ldr	r3, [r3, #0]
 8032892:	2200      	movs	r2, #0
 8032894:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8032896:	687b      	ldr	r3, [r7, #4]
 8032898:	681b      	ldr	r3, [r3, #0]
 803289a:	2200      	movs	r2, #0
 803289c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 803289e:	687b      	ldr	r3, [r7, #4]
 80328a0:	681b      	ldr	r3, [r3, #0]
 80328a2:	2200      	movs	r2, #0
 80328a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80328a6:	687b      	ldr	r3, [r7, #4]
 80328a8:	681b      	ldr	r3, [r3, #0]
 80328aa:	2200      	movs	r2, #0
 80328ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80328ae:	687b      	ldr	r3, [r7, #4]
 80328b0:	681b      	ldr	r3, [r3, #0]
 80328b2:	2200      	movs	r2, #0
 80328b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80328b6:	687b      	ldr	r3, [r7, #4]
 80328b8:	681b      	ldr	r3, [r3, #0]
 80328ba:	2221      	movs	r2, #33	@ 0x21
 80328bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80328be:	6878      	ldr	r0, [r7, #4]
 80328c0:	f000 f82a 	bl	8032918 <DMA_CalcBaseAndBitshift>
 80328c4:	4603      	mov	r3, r0
 80328c6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80328c8:	687b      	ldr	r3, [r7, #4]
 80328ca:	2200      	movs	r2, #0
 80328cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80328ce:	687b      	ldr	r3, [r7, #4]
 80328d0:	2200      	movs	r2, #0
 80328d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80328d4:	687b      	ldr	r3, [r7, #4]
 80328d6:	2200      	movs	r2, #0
 80328d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80328da:	687b      	ldr	r3, [r7, #4]
 80328dc:	2200      	movs	r2, #0
 80328de:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80328e0:	687b      	ldr	r3, [r7, #4]
 80328e2:	2200      	movs	r2, #0
 80328e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80328e6:	687b      	ldr	r3, [r7, #4]
 80328e8:	2200      	movs	r2, #0
 80328ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80328ec:	687b      	ldr	r3, [r7, #4]
 80328ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80328f0:	223f      	movs	r2, #63	@ 0x3f
 80328f2:	409a      	lsls	r2, r3
 80328f4:	68fb      	ldr	r3, [r7, #12]
 80328f6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80328f8:	687b      	ldr	r3, [r7, #4]
 80328fa:	2200      	movs	r2, #0
 80328fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80328fe:	687b      	ldr	r3, [r7, #4]
 8032900:	2200      	movs	r2, #0
 8032902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8032906:	687b      	ldr	r3, [r7, #4]
 8032908:	2200      	movs	r2, #0
 803290a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 803290e:	2300      	movs	r3, #0
}
 8032910:	4618      	mov	r0, r3
 8032912:	3710      	adds	r7, #16
 8032914:	46bd      	mov	sp, r7
 8032916:	bd80      	pop	{r7, pc}

08032918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8032918:	b480      	push	{r7}
 803291a:	b085      	sub	sp, #20
 803291c:	af00      	add	r7, sp, #0
 803291e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8032920:	687b      	ldr	r3, [r7, #4]
 8032922:	681b      	ldr	r3, [r3, #0]
 8032924:	b2db      	uxtb	r3, r3
 8032926:	3b10      	subs	r3, #16
 8032928:	4a14      	ldr	r2, [pc, #80]	@ (803297c <DMA_CalcBaseAndBitshift+0x64>)
 803292a:	fba2 2303 	umull	r2, r3, r2, r3
 803292e:	091b      	lsrs	r3, r3, #4
 8032930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8032932:	4a13      	ldr	r2, [pc, #76]	@ (8032980 <DMA_CalcBaseAndBitshift+0x68>)
 8032934:	68fb      	ldr	r3, [r7, #12]
 8032936:	4413      	add	r3, r2
 8032938:	781b      	ldrb	r3, [r3, #0]
 803293a:	461a      	mov	r2, r3
 803293c:	687b      	ldr	r3, [r7, #4]
 803293e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8032940:	68fb      	ldr	r3, [r7, #12]
 8032942:	2b03      	cmp	r3, #3
 8032944:	d909      	bls.n	803295a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8032946:	687b      	ldr	r3, [r7, #4]
 8032948:	681b      	ldr	r3, [r3, #0]
 803294a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 803294e:	f023 0303 	bic.w	r3, r3, #3
 8032952:	1d1a      	adds	r2, r3, #4
 8032954:	687b      	ldr	r3, [r7, #4]
 8032956:	659a      	str	r2, [r3, #88]	@ 0x58
 8032958:	e007      	b.n	803296a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 803295a:	687b      	ldr	r3, [r7, #4]
 803295c:	681b      	ldr	r3, [r3, #0]
 803295e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8032962:	f023 0303 	bic.w	r3, r3, #3
 8032966:	687a      	ldr	r2, [r7, #4]
 8032968:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 803296a:	687b      	ldr	r3, [r7, #4]
 803296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 803296e:	4618      	mov	r0, r3
 8032970:	3714      	adds	r7, #20
 8032972:	46bd      	mov	sp, r7
 8032974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032978:	4770      	bx	lr
 803297a:	bf00      	nop
 803297c:	aaaaaaab 	.word	0xaaaaaaab
 8032980:	0803ce80 	.word	0x0803ce80

08032984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8032984:	b480      	push	{r7}
 8032986:	b085      	sub	sp, #20
 8032988:	af00      	add	r7, sp, #0
 803298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 803298c:	2300      	movs	r3, #0
 803298e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8032990:	687b      	ldr	r3, [r7, #4]
 8032992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8032994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8032996:	687b      	ldr	r3, [r7, #4]
 8032998:	699b      	ldr	r3, [r3, #24]
 803299a:	2b00      	cmp	r3, #0
 803299c:	d11f      	bne.n	80329de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 803299e:	68bb      	ldr	r3, [r7, #8]
 80329a0:	2b03      	cmp	r3, #3
 80329a2:	d856      	bhi.n	8032a52 <DMA_CheckFifoParam+0xce>
 80329a4:	a201      	add	r2, pc, #4	@ (adr r2, 80329ac <DMA_CheckFifoParam+0x28>)
 80329a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80329aa:	bf00      	nop
 80329ac:	080329bd 	.word	0x080329bd
 80329b0:	080329cf 	.word	0x080329cf
 80329b4:	080329bd 	.word	0x080329bd
 80329b8:	08032a53 	.word	0x08032a53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80329bc:	687b      	ldr	r3, [r7, #4]
 80329be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80329c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80329c4:	2b00      	cmp	r3, #0
 80329c6:	d046      	beq.n	8032a56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80329c8:	2301      	movs	r3, #1
 80329ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80329cc:	e043      	b.n	8032a56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80329ce:	687b      	ldr	r3, [r7, #4]
 80329d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80329d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80329d6:	d140      	bne.n	8032a5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80329d8:	2301      	movs	r3, #1
 80329da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80329dc:	e03d      	b.n	8032a5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80329de:	687b      	ldr	r3, [r7, #4]
 80329e0:	699b      	ldr	r3, [r3, #24]
 80329e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80329e6:	d121      	bne.n	8032a2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80329e8:	68bb      	ldr	r3, [r7, #8]
 80329ea:	2b03      	cmp	r3, #3
 80329ec:	d837      	bhi.n	8032a5e <DMA_CheckFifoParam+0xda>
 80329ee:	a201      	add	r2, pc, #4	@ (adr r2, 80329f4 <DMA_CheckFifoParam+0x70>)
 80329f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80329f4:	08032a05 	.word	0x08032a05
 80329f8:	08032a0b 	.word	0x08032a0b
 80329fc:	08032a05 	.word	0x08032a05
 8032a00:	08032a1d 	.word	0x08032a1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8032a04:	2301      	movs	r3, #1
 8032a06:	73fb      	strb	r3, [r7, #15]
      break;
 8032a08:	e030      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8032a0a:	687b      	ldr	r3, [r7, #4]
 8032a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8032a12:	2b00      	cmp	r3, #0
 8032a14:	d025      	beq.n	8032a62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8032a16:	2301      	movs	r3, #1
 8032a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8032a1a:	e022      	b.n	8032a62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8032a1c:	687b      	ldr	r3, [r7, #4]
 8032a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032a20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8032a24:	d11f      	bne.n	8032a66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8032a26:	2301      	movs	r3, #1
 8032a28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8032a2a:	e01c      	b.n	8032a66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8032a2c:	68bb      	ldr	r3, [r7, #8]
 8032a2e:	2b02      	cmp	r3, #2
 8032a30:	d903      	bls.n	8032a3a <DMA_CheckFifoParam+0xb6>
 8032a32:	68bb      	ldr	r3, [r7, #8]
 8032a34:	2b03      	cmp	r3, #3
 8032a36:	d003      	beq.n	8032a40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8032a38:	e018      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8032a3a:	2301      	movs	r3, #1
 8032a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8032a3e:	e015      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8032a40:	687b      	ldr	r3, [r7, #4]
 8032a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032a44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8032a48:	2b00      	cmp	r3, #0
 8032a4a:	d00e      	beq.n	8032a6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8032a4c:	2301      	movs	r3, #1
 8032a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8032a50:	e00b      	b.n	8032a6a <DMA_CheckFifoParam+0xe6>
      break;
 8032a52:	bf00      	nop
 8032a54:	e00a      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      break;
 8032a56:	bf00      	nop
 8032a58:	e008      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      break;
 8032a5a:	bf00      	nop
 8032a5c:	e006      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      break;
 8032a5e:	bf00      	nop
 8032a60:	e004      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      break;
 8032a62:	bf00      	nop
 8032a64:	e002      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      break;   
 8032a66:	bf00      	nop
 8032a68:	e000      	b.n	8032a6c <DMA_CheckFifoParam+0xe8>
      break;
 8032a6a:	bf00      	nop
    }
  } 
  
  return status; 
 8032a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8032a6e:	4618      	mov	r0, r3
 8032a70:	3714      	adds	r7, #20
 8032a72:	46bd      	mov	sp, r7
 8032a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a78:	4770      	bx	lr
 8032a7a:	bf00      	nop

08032a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8032a7c:	b480      	push	{r7}
 8032a7e:	b089      	sub	sp, #36	@ 0x24
 8032a80:	af00      	add	r7, sp, #0
 8032a82:	6078      	str	r0, [r7, #4]
 8032a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8032a86:	2300      	movs	r3, #0
 8032a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8032a8a:	2300      	movs	r3, #0
 8032a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8032a8e:	2300      	movs	r3, #0
 8032a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8032a92:	2300      	movs	r3, #0
 8032a94:	61fb      	str	r3, [r7, #28]
 8032a96:	e177      	b.n	8032d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8032a98:	2201      	movs	r2, #1
 8032a9a:	69fb      	ldr	r3, [r7, #28]
 8032a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8032aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8032aa2:	683b      	ldr	r3, [r7, #0]
 8032aa4:	681b      	ldr	r3, [r3, #0]
 8032aa6:	697a      	ldr	r2, [r7, #20]
 8032aa8:	4013      	ands	r3, r2
 8032aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8032aac:	693a      	ldr	r2, [r7, #16]
 8032aae:	697b      	ldr	r3, [r7, #20]
 8032ab0:	429a      	cmp	r2, r3
 8032ab2:	f040 8166 	bne.w	8032d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8032ab6:	683b      	ldr	r3, [r7, #0]
 8032ab8:	685b      	ldr	r3, [r3, #4]
 8032aba:	f003 0303 	and.w	r3, r3, #3
 8032abe:	2b01      	cmp	r3, #1
 8032ac0:	d005      	beq.n	8032ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8032ac2:	683b      	ldr	r3, [r7, #0]
 8032ac4:	685b      	ldr	r3, [r3, #4]
 8032ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8032aca:	2b02      	cmp	r3, #2
 8032acc:	d130      	bne.n	8032b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8032ace:	687b      	ldr	r3, [r7, #4]
 8032ad0:	689b      	ldr	r3, [r3, #8]
 8032ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8032ad4:	69fb      	ldr	r3, [r7, #28]
 8032ad6:	005b      	lsls	r3, r3, #1
 8032ad8:	2203      	movs	r2, #3
 8032ada:	fa02 f303 	lsl.w	r3, r2, r3
 8032ade:	43db      	mvns	r3, r3
 8032ae0:	69ba      	ldr	r2, [r7, #24]
 8032ae2:	4013      	ands	r3, r2
 8032ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8032ae6:	683b      	ldr	r3, [r7, #0]
 8032ae8:	68da      	ldr	r2, [r3, #12]
 8032aea:	69fb      	ldr	r3, [r7, #28]
 8032aec:	005b      	lsls	r3, r3, #1
 8032aee:	fa02 f303 	lsl.w	r3, r2, r3
 8032af2:	69ba      	ldr	r2, [r7, #24]
 8032af4:	4313      	orrs	r3, r2
 8032af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8032af8:	687b      	ldr	r3, [r7, #4]
 8032afa:	69ba      	ldr	r2, [r7, #24]
 8032afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8032afe:	687b      	ldr	r3, [r7, #4]
 8032b00:	685b      	ldr	r3, [r3, #4]
 8032b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8032b04:	2201      	movs	r2, #1
 8032b06:	69fb      	ldr	r3, [r7, #28]
 8032b08:	fa02 f303 	lsl.w	r3, r2, r3
 8032b0c:	43db      	mvns	r3, r3
 8032b0e:	69ba      	ldr	r2, [r7, #24]
 8032b10:	4013      	ands	r3, r2
 8032b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8032b14:	683b      	ldr	r3, [r7, #0]
 8032b16:	685b      	ldr	r3, [r3, #4]
 8032b18:	091b      	lsrs	r3, r3, #4
 8032b1a:	f003 0201 	and.w	r2, r3, #1
 8032b1e:	69fb      	ldr	r3, [r7, #28]
 8032b20:	fa02 f303 	lsl.w	r3, r2, r3
 8032b24:	69ba      	ldr	r2, [r7, #24]
 8032b26:	4313      	orrs	r3, r2
 8032b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8032b2a:	687b      	ldr	r3, [r7, #4]
 8032b2c:	69ba      	ldr	r2, [r7, #24]
 8032b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8032b30:	683b      	ldr	r3, [r7, #0]
 8032b32:	685b      	ldr	r3, [r3, #4]
 8032b34:	f003 0303 	and.w	r3, r3, #3
 8032b38:	2b03      	cmp	r3, #3
 8032b3a:	d017      	beq.n	8032b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8032b3c:	687b      	ldr	r3, [r7, #4]
 8032b3e:	68db      	ldr	r3, [r3, #12]
 8032b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8032b42:	69fb      	ldr	r3, [r7, #28]
 8032b44:	005b      	lsls	r3, r3, #1
 8032b46:	2203      	movs	r2, #3
 8032b48:	fa02 f303 	lsl.w	r3, r2, r3
 8032b4c:	43db      	mvns	r3, r3
 8032b4e:	69ba      	ldr	r2, [r7, #24]
 8032b50:	4013      	ands	r3, r2
 8032b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8032b54:	683b      	ldr	r3, [r7, #0]
 8032b56:	689a      	ldr	r2, [r3, #8]
 8032b58:	69fb      	ldr	r3, [r7, #28]
 8032b5a:	005b      	lsls	r3, r3, #1
 8032b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8032b60:	69ba      	ldr	r2, [r7, #24]
 8032b62:	4313      	orrs	r3, r2
 8032b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8032b66:	687b      	ldr	r3, [r7, #4]
 8032b68:	69ba      	ldr	r2, [r7, #24]
 8032b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8032b6c:	683b      	ldr	r3, [r7, #0]
 8032b6e:	685b      	ldr	r3, [r3, #4]
 8032b70:	f003 0303 	and.w	r3, r3, #3
 8032b74:	2b02      	cmp	r3, #2
 8032b76:	d123      	bne.n	8032bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8032b78:	69fb      	ldr	r3, [r7, #28]
 8032b7a:	08da      	lsrs	r2, r3, #3
 8032b7c:	687b      	ldr	r3, [r7, #4]
 8032b7e:	3208      	adds	r2, #8
 8032b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8032b86:	69fb      	ldr	r3, [r7, #28]
 8032b88:	f003 0307 	and.w	r3, r3, #7
 8032b8c:	009b      	lsls	r3, r3, #2
 8032b8e:	220f      	movs	r2, #15
 8032b90:	fa02 f303 	lsl.w	r3, r2, r3
 8032b94:	43db      	mvns	r3, r3
 8032b96:	69ba      	ldr	r2, [r7, #24]
 8032b98:	4013      	ands	r3, r2
 8032b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8032b9c:	683b      	ldr	r3, [r7, #0]
 8032b9e:	691a      	ldr	r2, [r3, #16]
 8032ba0:	69fb      	ldr	r3, [r7, #28]
 8032ba2:	f003 0307 	and.w	r3, r3, #7
 8032ba6:	009b      	lsls	r3, r3, #2
 8032ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8032bac:	69ba      	ldr	r2, [r7, #24]
 8032bae:	4313      	orrs	r3, r2
 8032bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8032bb2:	69fb      	ldr	r3, [r7, #28]
 8032bb4:	08da      	lsrs	r2, r3, #3
 8032bb6:	687b      	ldr	r3, [r7, #4]
 8032bb8:	3208      	adds	r2, #8
 8032bba:	69b9      	ldr	r1, [r7, #24]
 8032bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8032bc0:	687b      	ldr	r3, [r7, #4]
 8032bc2:	681b      	ldr	r3, [r3, #0]
 8032bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8032bc6:	69fb      	ldr	r3, [r7, #28]
 8032bc8:	005b      	lsls	r3, r3, #1
 8032bca:	2203      	movs	r2, #3
 8032bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8032bd0:	43db      	mvns	r3, r3
 8032bd2:	69ba      	ldr	r2, [r7, #24]
 8032bd4:	4013      	ands	r3, r2
 8032bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8032bd8:	683b      	ldr	r3, [r7, #0]
 8032bda:	685b      	ldr	r3, [r3, #4]
 8032bdc:	f003 0203 	and.w	r2, r3, #3
 8032be0:	69fb      	ldr	r3, [r7, #28]
 8032be2:	005b      	lsls	r3, r3, #1
 8032be4:	fa02 f303 	lsl.w	r3, r2, r3
 8032be8:	69ba      	ldr	r2, [r7, #24]
 8032bea:	4313      	orrs	r3, r2
 8032bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8032bee:	687b      	ldr	r3, [r7, #4]
 8032bf0:	69ba      	ldr	r2, [r7, #24]
 8032bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8032bf4:	683b      	ldr	r3, [r7, #0]
 8032bf6:	685b      	ldr	r3, [r3, #4]
 8032bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8032bfc:	2b00      	cmp	r3, #0
 8032bfe:	f000 80c0 	beq.w	8032d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8032c02:	2300      	movs	r3, #0
 8032c04:	60fb      	str	r3, [r7, #12]
 8032c06:	4b66      	ldr	r3, [pc, #408]	@ (8032da0 <HAL_GPIO_Init+0x324>)
 8032c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8032c0a:	4a65      	ldr	r2, [pc, #404]	@ (8032da0 <HAL_GPIO_Init+0x324>)
 8032c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8032c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8032c12:	4b63      	ldr	r3, [pc, #396]	@ (8032da0 <HAL_GPIO_Init+0x324>)
 8032c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8032c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8032c1a:	60fb      	str	r3, [r7, #12]
 8032c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8032c1e:	4a61      	ldr	r2, [pc, #388]	@ (8032da4 <HAL_GPIO_Init+0x328>)
 8032c20:	69fb      	ldr	r3, [r7, #28]
 8032c22:	089b      	lsrs	r3, r3, #2
 8032c24:	3302      	adds	r3, #2
 8032c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8032c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8032c2c:	69fb      	ldr	r3, [r7, #28]
 8032c2e:	f003 0303 	and.w	r3, r3, #3
 8032c32:	009b      	lsls	r3, r3, #2
 8032c34:	220f      	movs	r2, #15
 8032c36:	fa02 f303 	lsl.w	r3, r2, r3
 8032c3a:	43db      	mvns	r3, r3
 8032c3c:	69ba      	ldr	r2, [r7, #24]
 8032c3e:	4013      	ands	r3, r2
 8032c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8032c42:	687b      	ldr	r3, [r7, #4]
 8032c44:	4a58      	ldr	r2, [pc, #352]	@ (8032da8 <HAL_GPIO_Init+0x32c>)
 8032c46:	4293      	cmp	r3, r2
 8032c48:	d037      	beq.n	8032cba <HAL_GPIO_Init+0x23e>
 8032c4a:	687b      	ldr	r3, [r7, #4]
 8032c4c:	4a57      	ldr	r2, [pc, #348]	@ (8032dac <HAL_GPIO_Init+0x330>)
 8032c4e:	4293      	cmp	r3, r2
 8032c50:	d031      	beq.n	8032cb6 <HAL_GPIO_Init+0x23a>
 8032c52:	687b      	ldr	r3, [r7, #4]
 8032c54:	4a56      	ldr	r2, [pc, #344]	@ (8032db0 <HAL_GPIO_Init+0x334>)
 8032c56:	4293      	cmp	r3, r2
 8032c58:	d02b      	beq.n	8032cb2 <HAL_GPIO_Init+0x236>
 8032c5a:	687b      	ldr	r3, [r7, #4]
 8032c5c:	4a55      	ldr	r2, [pc, #340]	@ (8032db4 <HAL_GPIO_Init+0x338>)
 8032c5e:	4293      	cmp	r3, r2
 8032c60:	d025      	beq.n	8032cae <HAL_GPIO_Init+0x232>
 8032c62:	687b      	ldr	r3, [r7, #4]
 8032c64:	4a54      	ldr	r2, [pc, #336]	@ (8032db8 <HAL_GPIO_Init+0x33c>)
 8032c66:	4293      	cmp	r3, r2
 8032c68:	d01f      	beq.n	8032caa <HAL_GPIO_Init+0x22e>
 8032c6a:	687b      	ldr	r3, [r7, #4]
 8032c6c:	4a53      	ldr	r2, [pc, #332]	@ (8032dbc <HAL_GPIO_Init+0x340>)
 8032c6e:	4293      	cmp	r3, r2
 8032c70:	d019      	beq.n	8032ca6 <HAL_GPIO_Init+0x22a>
 8032c72:	687b      	ldr	r3, [r7, #4]
 8032c74:	4a52      	ldr	r2, [pc, #328]	@ (8032dc0 <HAL_GPIO_Init+0x344>)
 8032c76:	4293      	cmp	r3, r2
 8032c78:	d013      	beq.n	8032ca2 <HAL_GPIO_Init+0x226>
 8032c7a:	687b      	ldr	r3, [r7, #4]
 8032c7c:	4a51      	ldr	r2, [pc, #324]	@ (8032dc4 <HAL_GPIO_Init+0x348>)
 8032c7e:	4293      	cmp	r3, r2
 8032c80:	d00d      	beq.n	8032c9e <HAL_GPIO_Init+0x222>
 8032c82:	687b      	ldr	r3, [r7, #4]
 8032c84:	4a50      	ldr	r2, [pc, #320]	@ (8032dc8 <HAL_GPIO_Init+0x34c>)
 8032c86:	4293      	cmp	r3, r2
 8032c88:	d007      	beq.n	8032c9a <HAL_GPIO_Init+0x21e>
 8032c8a:	687b      	ldr	r3, [r7, #4]
 8032c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8032dcc <HAL_GPIO_Init+0x350>)
 8032c8e:	4293      	cmp	r3, r2
 8032c90:	d101      	bne.n	8032c96 <HAL_GPIO_Init+0x21a>
 8032c92:	2309      	movs	r3, #9
 8032c94:	e012      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032c96:	230a      	movs	r3, #10
 8032c98:	e010      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032c9a:	2308      	movs	r3, #8
 8032c9c:	e00e      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032c9e:	2307      	movs	r3, #7
 8032ca0:	e00c      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032ca2:	2306      	movs	r3, #6
 8032ca4:	e00a      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032ca6:	2305      	movs	r3, #5
 8032ca8:	e008      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032caa:	2304      	movs	r3, #4
 8032cac:	e006      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032cae:	2303      	movs	r3, #3
 8032cb0:	e004      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032cb2:	2302      	movs	r3, #2
 8032cb4:	e002      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032cb6:	2301      	movs	r3, #1
 8032cb8:	e000      	b.n	8032cbc <HAL_GPIO_Init+0x240>
 8032cba:	2300      	movs	r3, #0
 8032cbc:	69fa      	ldr	r2, [r7, #28]
 8032cbe:	f002 0203 	and.w	r2, r2, #3
 8032cc2:	0092      	lsls	r2, r2, #2
 8032cc4:	4093      	lsls	r3, r2
 8032cc6:	69ba      	ldr	r2, [r7, #24]
 8032cc8:	4313      	orrs	r3, r2
 8032cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8032ccc:	4935      	ldr	r1, [pc, #212]	@ (8032da4 <HAL_GPIO_Init+0x328>)
 8032cce:	69fb      	ldr	r3, [r7, #28]
 8032cd0:	089b      	lsrs	r3, r3, #2
 8032cd2:	3302      	adds	r3, #2
 8032cd4:	69ba      	ldr	r2, [r7, #24]
 8032cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8032cda:	4b3d      	ldr	r3, [pc, #244]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032cdc:	689b      	ldr	r3, [r3, #8]
 8032cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032ce0:	693b      	ldr	r3, [r7, #16]
 8032ce2:	43db      	mvns	r3, r3
 8032ce4:	69ba      	ldr	r2, [r7, #24]
 8032ce6:	4013      	ands	r3, r2
 8032ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8032cea:	683b      	ldr	r3, [r7, #0]
 8032cec:	685b      	ldr	r3, [r3, #4]
 8032cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8032cf2:	2b00      	cmp	r3, #0
 8032cf4:	d003      	beq.n	8032cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8032cf6:	69ba      	ldr	r2, [r7, #24]
 8032cf8:	693b      	ldr	r3, [r7, #16]
 8032cfa:	4313      	orrs	r3, r2
 8032cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8032cfe:	4a34      	ldr	r2, [pc, #208]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032d00:	69bb      	ldr	r3, [r7, #24]
 8032d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8032d04:	4b32      	ldr	r3, [pc, #200]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032d06:	68db      	ldr	r3, [r3, #12]
 8032d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032d0a:	693b      	ldr	r3, [r7, #16]
 8032d0c:	43db      	mvns	r3, r3
 8032d0e:	69ba      	ldr	r2, [r7, #24]
 8032d10:	4013      	ands	r3, r2
 8032d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8032d14:	683b      	ldr	r3, [r7, #0]
 8032d16:	685b      	ldr	r3, [r3, #4]
 8032d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8032d1c:	2b00      	cmp	r3, #0
 8032d1e:	d003      	beq.n	8032d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8032d20:	69ba      	ldr	r2, [r7, #24]
 8032d22:	693b      	ldr	r3, [r7, #16]
 8032d24:	4313      	orrs	r3, r2
 8032d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8032d28:	4a29      	ldr	r2, [pc, #164]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032d2a:	69bb      	ldr	r3, [r7, #24]
 8032d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8032d2e:	4b28      	ldr	r3, [pc, #160]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032d30:	685b      	ldr	r3, [r3, #4]
 8032d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032d34:	693b      	ldr	r3, [r7, #16]
 8032d36:	43db      	mvns	r3, r3
 8032d38:	69ba      	ldr	r2, [r7, #24]
 8032d3a:	4013      	ands	r3, r2
 8032d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8032d3e:	683b      	ldr	r3, [r7, #0]
 8032d40:	685b      	ldr	r3, [r3, #4]
 8032d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8032d46:	2b00      	cmp	r3, #0
 8032d48:	d003      	beq.n	8032d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8032d4a:	69ba      	ldr	r2, [r7, #24]
 8032d4c:	693b      	ldr	r3, [r7, #16]
 8032d4e:	4313      	orrs	r3, r2
 8032d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8032d52:	4a1f      	ldr	r2, [pc, #124]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032d54:	69bb      	ldr	r3, [r7, #24]
 8032d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8032d58:	4b1d      	ldr	r3, [pc, #116]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032d5a:	681b      	ldr	r3, [r3, #0]
 8032d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032d5e:	693b      	ldr	r3, [r7, #16]
 8032d60:	43db      	mvns	r3, r3
 8032d62:	69ba      	ldr	r2, [r7, #24]
 8032d64:	4013      	ands	r3, r2
 8032d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8032d68:	683b      	ldr	r3, [r7, #0]
 8032d6a:	685b      	ldr	r3, [r3, #4]
 8032d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8032d70:	2b00      	cmp	r3, #0
 8032d72:	d003      	beq.n	8032d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8032d74:	69ba      	ldr	r2, [r7, #24]
 8032d76:	693b      	ldr	r3, [r7, #16]
 8032d78:	4313      	orrs	r3, r2
 8032d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8032d7c:	4a14      	ldr	r2, [pc, #80]	@ (8032dd0 <HAL_GPIO_Init+0x354>)
 8032d7e:	69bb      	ldr	r3, [r7, #24]
 8032d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8032d82:	69fb      	ldr	r3, [r7, #28]
 8032d84:	3301      	adds	r3, #1
 8032d86:	61fb      	str	r3, [r7, #28]
 8032d88:	69fb      	ldr	r3, [r7, #28]
 8032d8a:	2b0f      	cmp	r3, #15
 8032d8c:	f67f ae84 	bls.w	8032a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8032d90:	bf00      	nop
 8032d92:	bf00      	nop
 8032d94:	3724      	adds	r7, #36	@ 0x24
 8032d96:	46bd      	mov	sp, r7
 8032d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d9c:	4770      	bx	lr
 8032d9e:	bf00      	nop
 8032da0:	40023800 	.word	0x40023800
 8032da4:	40013800 	.word	0x40013800
 8032da8:	40020000 	.word	0x40020000
 8032dac:	40020400 	.word	0x40020400
 8032db0:	40020800 	.word	0x40020800
 8032db4:	40020c00 	.word	0x40020c00
 8032db8:	40021000 	.word	0x40021000
 8032dbc:	40021400 	.word	0x40021400
 8032dc0:	40021800 	.word	0x40021800
 8032dc4:	40021c00 	.word	0x40021c00
 8032dc8:	40022000 	.word	0x40022000
 8032dcc:	40022400 	.word	0x40022400
 8032dd0:	40013c00 	.word	0x40013c00

08032dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8032dd4:	b480      	push	{r7}
 8032dd6:	b083      	sub	sp, #12
 8032dd8:	af00      	add	r7, sp, #0
 8032dda:	6078      	str	r0, [r7, #4]
 8032ddc:	460b      	mov	r3, r1
 8032dde:	807b      	strh	r3, [r7, #2]
 8032de0:	4613      	mov	r3, r2
 8032de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8032de4:	787b      	ldrb	r3, [r7, #1]
 8032de6:	2b00      	cmp	r3, #0
 8032de8:	d003      	beq.n	8032df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8032dea:	887a      	ldrh	r2, [r7, #2]
 8032dec:	687b      	ldr	r3, [r7, #4]
 8032dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8032df0:	e003      	b.n	8032dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8032df2:	887b      	ldrh	r3, [r7, #2]
 8032df4:	041a      	lsls	r2, r3, #16
 8032df6:	687b      	ldr	r3, [r7, #4]
 8032df8:	619a      	str	r2, [r3, #24]
}
 8032dfa:	bf00      	nop
 8032dfc:	370c      	adds	r7, #12
 8032dfe:	46bd      	mov	sp, r7
 8032e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e04:	4770      	bx	lr
	...

08032e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8032e08:	b580      	push	{r7, lr}
 8032e0a:	b084      	sub	sp, #16
 8032e0c:	af00      	add	r7, sp, #0
 8032e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8032e10:	687b      	ldr	r3, [r7, #4]
 8032e12:	2b00      	cmp	r3, #0
 8032e14:	d101      	bne.n	8032e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8032e16:	2301      	movs	r3, #1
 8032e18:	e12b      	b.n	8033072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8032e1a:	687b      	ldr	r3, [r7, #4]
 8032e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8032e20:	b2db      	uxtb	r3, r3
 8032e22:	2b00      	cmp	r3, #0
 8032e24:	d106      	bne.n	8032e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8032e26:	687b      	ldr	r3, [r7, #4]
 8032e28:	2200      	movs	r2, #0
 8032e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8032e2e:	6878      	ldr	r0, [r7, #4]
 8032e30:	f7f8 fa8c 	bl	802b34c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8032e34:	687b      	ldr	r3, [r7, #4]
 8032e36:	2224      	movs	r2, #36	@ 0x24
 8032e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8032e3c:	687b      	ldr	r3, [r7, #4]
 8032e3e:	681b      	ldr	r3, [r3, #0]
 8032e40:	681a      	ldr	r2, [r3, #0]
 8032e42:	687b      	ldr	r3, [r7, #4]
 8032e44:	681b      	ldr	r3, [r3, #0]
 8032e46:	f022 0201 	bic.w	r2, r2, #1
 8032e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8032e4c:	687b      	ldr	r3, [r7, #4]
 8032e4e:	681b      	ldr	r3, [r3, #0]
 8032e50:	681a      	ldr	r2, [r3, #0]
 8032e52:	687b      	ldr	r3, [r7, #4]
 8032e54:	681b      	ldr	r3, [r3, #0]
 8032e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8032e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8032e5c:	687b      	ldr	r3, [r7, #4]
 8032e5e:	681b      	ldr	r3, [r3, #0]
 8032e60:	681a      	ldr	r2, [r3, #0]
 8032e62:	687b      	ldr	r3, [r7, #4]
 8032e64:	681b      	ldr	r3, [r3, #0]
 8032e66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8032e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8032e6c:	f000 fe4c 	bl	8033b08 <HAL_RCC_GetPCLK1Freq>
 8032e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8032e72:	687b      	ldr	r3, [r7, #4]
 8032e74:	685b      	ldr	r3, [r3, #4]
 8032e76:	4a81      	ldr	r2, [pc, #516]	@ (803307c <HAL_I2C_Init+0x274>)
 8032e78:	4293      	cmp	r3, r2
 8032e7a:	d807      	bhi.n	8032e8c <HAL_I2C_Init+0x84>
 8032e7c:	68fb      	ldr	r3, [r7, #12]
 8032e7e:	4a80      	ldr	r2, [pc, #512]	@ (8033080 <HAL_I2C_Init+0x278>)
 8032e80:	4293      	cmp	r3, r2
 8032e82:	bf94      	ite	ls
 8032e84:	2301      	movls	r3, #1
 8032e86:	2300      	movhi	r3, #0
 8032e88:	b2db      	uxtb	r3, r3
 8032e8a:	e006      	b.n	8032e9a <HAL_I2C_Init+0x92>
 8032e8c:	68fb      	ldr	r3, [r7, #12]
 8032e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8033084 <HAL_I2C_Init+0x27c>)
 8032e90:	4293      	cmp	r3, r2
 8032e92:	bf94      	ite	ls
 8032e94:	2301      	movls	r3, #1
 8032e96:	2300      	movhi	r3, #0
 8032e98:	b2db      	uxtb	r3, r3
 8032e9a:	2b00      	cmp	r3, #0
 8032e9c:	d001      	beq.n	8032ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8032e9e:	2301      	movs	r3, #1
 8032ea0:	e0e7      	b.n	8033072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8032ea2:	68fb      	ldr	r3, [r7, #12]
 8032ea4:	4a78      	ldr	r2, [pc, #480]	@ (8033088 <HAL_I2C_Init+0x280>)
 8032ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8032eaa:	0c9b      	lsrs	r3, r3, #18
 8032eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8032eae:	687b      	ldr	r3, [r7, #4]
 8032eb0:	681b      	ldr	r3, [r3, #0]
 8032eb2:	685b      	ldr	r3, [r3, #4]
 8032eb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8032eb8:	687b      	ldr	r3, [r7, #4]
 8032eba:	681b      	ldr	r3, [r3, #0]
 8032ebc:	68ba      	ldr	r2, [r7, #8]
 8032ebe:	430a      	orrs	r2, r1
 8032ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8032ec2:	687b      	ldr	r3, [r7, #4]
 8032ec4:	681b      	ldr	r3, [r3, #0]
 8032ec6:	6a1b      	ldr	r3, [r3, #32]
 8032ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8032ecc:	687b      	ldr	r3, [r7, #4]
 8032ece:	685b      	ldr	r3, [r3, #4]
 8032ed0:	4a6a      	ldr	r2, [pc, #424]	@ (803307c <HAL_I2C_Init+0x274>)
 8032ed2:	4293      	cmp	r3, r2
 8032ed4:	d802      	bhi.n	8032edc <HAL_I2C_Init+0xd4>
 8032ed6:	68bb      	ldr	r3, [r7, #8]
 8032ed8:	3301      	adds	r3, #1
 8032eda:	e009      	b.n	8032ef0 <HAL_I2C_Init+0xe8>
 8032edc:	68bb      	ldr	r3, [r7, #8]
 8032ede:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8032ee2:	fb02 f303 	mul.w	r3, r2, r3
 8032ee6:	4a69      	ldr	r2, [pc, #420]	@ (803308c <HAL_I2C_Init+0x284>)
 8032ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8032eec:	099b      	lsrs	r3, r3, #6
 8032eee:	3301      	adds	r3, #1
 8032ef0:	687a      	ldr	r2, [r7, #4]
 8032ef2:	6812      	ldr	r2, [r2, #0]
 8032ef4:	430b      	orrs	r3, r1
 8032ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8032ef8:	687b      	ldr	r3, [r7, #4]
 8032efa:	681b      	ldr	r3, [r3, #0]
 8032efc:	69db      	ldr	r3, [r3, #28]
 8032efe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8032f02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8032f06:	687b      	ldr	r3, [r7, #4]
 8032f08:	685b      	ldr	r3, [r3, #4]
 8032f0a:	495c      	ldr	r1, [pc, #368]	@ (803307c <HAL_I2C_Init+0x274>)
 8032f0c:	428b      	cmp	r3, r1
 8032f0e:	d819      	bhi.n	8032f44 <HAL_I2C_Init+0x13c>
 8032f10:	68fb      	ldr	r3, [r7, #12]
 8032f12:	1e59      	subs	r1, r3, #1
 8032f14:	687b      	ldr	r3, [r7, #4]
 8032f16:	685b      	ldr	r3, [r3, #4]
 8032f18:	005b      	lsls	r3, r3, #1
 8032f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8032f1e:	1c59      	adds	r1, r3, #1
 8032f20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8032f24:	400b      	ands	r3, r1
 8032f26:	2b00      	cmp	r3, #0
 8032f28:	d00a      	beq.n	8032f40 <HAL_I2C_Init+0x138>
 8032f2a:	68fb      	ldr	r3, [r7, #12]
 8032f2c:	1e59      	subs	r1, r3, #1
 8032f2e:	687b      	ldr	r3, [r7, #4]
 8032f30:	685b      	ldr	r3, [r3, #4]
 8032f32:	005b      	lsls	r3, r3, #1
 8032f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8032f38:	3301      	adds	r3, #1
 8032f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032f3e:	e051      	b.n	8032fe4 <HAL_I2C_Init+0x1dc>
 8032f40:	2304      	movs	r3, #4
 8032f42:	e04f      	b.n	8032fe4 <HAL_I2C_Init+0x1dc>
 8032f44:	687b      	ldr	r3, [r7, #4]
 8032f46:	689b      	ldr	r3, [r3, #8]
 8032f48:	2b00      	cmp	r3, #0
 8032f4a:	d111      	bne.n	8032f70 <HAL_I2C_Init+0x168>
 8032f4c:	68fb      	ldr	r3, [r7, #12]
 8032f4e:	1e58      	subs	r0, r3, #1
 8032f50:	687b      	ldr	r3, [r7, #4]
 8032f52:	6859      	ldr	r1, [r3, #4]
 8032f54:	460b      	mov	r3, r1
 8032f56:	005b      	lsls	r3, r3, #1
 8032f58:	440b      	add	r3, r1
 8032f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8032f5e:	3301      	adds	r3, #1
 8032f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032f64:	2b00      	cmp	r3, #0
 8032f66:	bf0c      	ite	eq
 8032f68:	2301      	moveq	r3, #1
 8032f6a:	2300      	movne	r3, #0
 8032f6c:	b2db      	uxtb	r3, r3
 8032f6e:	e012      	b.n	8032f96 <HAL_I2C_Init+0x18e>
 8032f70:	68fb      	ldr	r3, [r7, #12]
 8032f72:	1e58      	subs	r0, r3, #1
 8032f74:	687b      	ldr	r3, [r7, #4]
 8032f76:	6859      	ldr	r1, [r3, #4]
 8032f78:	460b      	mov	r3, r1
 8032f7a:	009b      	lsls	r3, r3, #2
 8032f7c:	440b      	add	r3, r1
 8032f7e:	0099      	lsls	r1, r3, #2
 8032f80:	440b      	add	r3, r1
 8032f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8032f86:	3301      	adds	r3, #1
 8032f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032f8c:	2b00      	cmp	r3, #0
 8032f8e:	bf0c      	ite	eq
 8032f90:	2301      	moveq	r3, #1
 8032f92:	2300      	movne	r3, #0
 8032f94:	b2db      	uxtb	r3, r3
 8032f96:	2b00      	cmp	r3, #0
 8032f98:	d001      	beq.n	8032f9e <HAL_I2C_Init+0x196>
 8032f9a:	2301      	movs	r3, #1
 8032f9c:	e022      	b.n	8032fe4 <HAL_I2C_Init+0x1dc>
 8032f9e:	687b      	ldr	r3, [r7, #4]
 8032fa0:	689b      	ldr	r3, [r3, #8]
 8032fa2:	2b00      	cmp	r3, #0
 8032fa4:	d10e      	bne.n	8032fc4 <HAL_I2C_Init+0x1bc>
 8032fa6:	68fb      	ldr	r3, [r7, #12]
 8032fa8:	1e58      	subs	r0, r3, #1
 8032faa:	687b      	ldr	r3, [r7, #4]
 8032fac:	6859      	ldr	r1, [r3, #4]
 8032fae:	460b      	mov	r3, r1
 8032fb0:	005b      	lsls	r3, r3, #1
 8032fb2:	440b      	add	r3, r1
 8032fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8032fb8:	3301      	adds	r3, #1
 8032fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8032fc2:	e00f      	b.n	8032fe4 <HAL_I2C_Init+0x1dc>
 8032fc4:	68fb      	ldr	r3, [r7, #12]
 8032fc6:	1e58      	subs	r0, r3, #1
 8032fc8:	687b      	ldr	r3, [r7, #4]
 8032fca:	6859      	ldr	r1, [r3, #4]
 8032fcc:	460b      	mov	r3, r1
 8032fce:	009b      	lsls	r3, r3, #2
 8032fd0:	440b      	add	r3, r1
 8032fd2:	0099      	lsls	r1, r3, #2
 8032fd4:	440b      	add	r3, r1
 8032fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8032fda:	3301      	adds	r3, #1
 8032fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032fe0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8032fe4:	6879      	ldr	r1, [r7, #4]
 8032fe6:	6809      	ldr	r1, [r1, #0]
 8032fe8:	4313      	orrs	r3, r2
 8032fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8032fec:	687b      	ldr	r3, [r7, #4]
 8032fee:	681b      	ldr	r3, [r3, #0]
 8032ff0:	681b      	ldr	r3, [r3, #0]
 8032ff2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8032ff6:	687b      	ldr	r3, [r7, #4]
 8032ff8:	69da      	ldr	r2, [r3, #28]
 8032ffa:	687b      	ldr	r3, [r7, #4]
 8032ffc:	6a1b      	ldr	r3, [r3, #32]
 8032ffe:	431a      	orrs	r2, r3
 8033000:	687b      	ldr	r3, [r7, #4]
 8033002:	681b      	ldr	r3, [r3, #0]
 8033004:	430a      	orrs	r2, r1
 8033006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8033008:	687b      	ldr	r3, [r7, #4]
 803300a:	681b      	ldr	r3, [r3, #0]
 803300c:	689b      	ldr	r3, [r3, #8]
 803300e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8033012:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8033016:	687a      	ldr	r2, [r7, #4]
 8033018:	6911      	ldr	r1, [r2, #16]
 803301a:	687a      	ldr	r2, [r7, #4]
 803301c:	68d2      	ldr	r2, [r2, #12]
 803301e:	4311      	orrs	r1, r2
 8033020:	687a      	ldr	r2, [r7, #4]
 8033022:	6812      	ldr	r2, [r2, #0]
 8033024:	430b      	orrs	r3, r1
 8033026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8033028:	687b      	ldr	r3, [r7, #4]
 803302a:	681b      	ldr	r3, [r3, #0]
 803302c:	68db      	ldr	r3, [r3, #12]
 803302e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8033032:	687b      	ldr	r3, [r7, #4]
 8033034:	695a      	ldr	r2, [r3, #20]
 8033036:	687b      	ldr	r3, [r7, #4]
 8033038:	699b      	ldr	r3, [r3, #24]
 803303a:	431a      	orrs	r2, r3
 803303c:	687b      	ldr	r3, [r7, #4]
 803303e:	681b      	ldr	r3, [r3, #0]
 8033040:	430a      	orrs	r2, r1
 8033042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8033044:	687b      	ldr	r3, [r7, #4]
 8033046:	681b      	ldr	r3, [r3, #0]
 8033048:	681a      	ldr	r2, [r3, #0]
 803304a:	687b      	ldr	r3, [r7, #4]
 803304c:	681b      	ldr	r3, [r3, #0]
 803304e:	f042 0201 	orr.w	r2, r2, #1
 8033052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8033054:	687b      	ldr	r3, [r7, #4]
 8033056:	2200      	movs	r2, #0
 8033058:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 803305a:	687b      	ldr	r3, [r7, #4]
 803305c:	2220      	movs	r2, #32
 803305e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8033062:	687b      	ldr	r3, [r7, #4]
 8033064:	2200      	movs	r2, #0
 8033066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8033068:	687b      	ldr	r3, [r7, #4]
 803306a:	2200      	movs	r2, #0
 803306c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8033070:	2300      	movs	r3, #0
}
 8033072:	4618      	mov	r0, r3
 8033074:	3710      	adds	r7, #16
 8033076:	46bd      	mov	sp, r7
 8033078:	bd80      	pop	{r7, pc}
 803307a:	bf00      	nop
 803307c:	000186a0 	.word	0x000186a0
 8033080:	001e847f 	.word	0x001e847f
 8033084:	003d08ff 	.word	0x003d08ff
 8033088:	431bde83 	.word	0x431bde83
 803308c:	10624dd3 	.word	0x10624dd3

08033090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8033090:	b480      	push	{r7}
 8033092:	b083      	sub	sp, #12
 8033094:	af00      	add	r7, sp, #0
 8033096:	6078      	str	r0, [r7, #4]
 8033098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 803309a:	687b      	ldr	r3, [r7, #4]
 803309c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80330a0:	b2db      	uxtb	r3, r3
 80330a2:	2b20      	cmp	r3, #32
 80330a4:	d129      	bne.n	80330fa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80330a6:	687b      	ldr	r3, [r7, #4]
 80330a8:	2224      	movs	r2, #36	@ 0x24
 80330aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80330ae:	687b      	ldr	r3, [r7, #4]
 80330b0:	681b      	ldr	r3, [r3, #0]
 80330b2:	681a      	ldr	r2, [r3, #0]
 80330b4:	687b      	ldr	r3, [r7, #4]
 80330b6:	681b      	ldr	r3, [r3, #0]
 80330b8:	f022 0201 	bic.w	r2, r2, #1
 80330bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80330be:	687b      	ldr	r3, [r7, #4]
 80330c0:	681b      	ldr	r3, [r3, #0]
 80330c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80330c4:	687b      	ldr	r3, [r7, #4]
 80330c6:	681b      	ldr	r3, [r3, #0]
 80330c8:	f022 0210 	bic.w	r2, r2, #16
 80330cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80330ce:	687b      	ldr	r3, [r7, #4]
 80330d0:	681b      	ldr	r3, [r3, #0]
 80330d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80330d4:	687b      	ldr	r3, [r7, #4]
 80330d6:	681b      	ldr	r3, [r3, #0]
 80330d8:	683a      	ldr	r2, [r7, #0]
 80330da:	430a      	orrs	r2, r1
 80330dc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80330de:	687b      	ldr	r3, [r7, #4]
 80330e0:	681b      	ldr	r3, [r3, #0]
 80330e2:	681a      	ldr	r2, [r3, #0]
 80330e4:	687b      	ldr	r3, [r7, #4]
 80330e6:	681b      	ldr	r3, [r3, #0]
 80330e8:	f042 0201 	orr.w	r2, r2, #1
 80330ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80330ee:	687b      	ldr	r3, [r7, #4]
 80330f0:	2220      	movs	r2, #32
 80330f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80330f6:	2300      	movs	r3, #0
 80330f8:	e000      	b.n	80330fc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80330fa:	2302      	movs	r3, #2
  }
}
 80330fc:	4618      	mov	r0, r3
 80330fe:	370c      	adds	r7, #12
 8033100:	46bd      	mov	sp, r7
 8033102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033106:	4770      	bx	lr

08033108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8033108:	b480      	push	{r7}
 803310a:	b085      	sub	sp, #20
 803310c:	af00      	add	r7, sp, #0
 803310e:	6078      	str	r0, [r7, #4]
 8033110:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8033112:	2300      	movs	r3, #0
 8033114:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8033116:	687b      	ldr	r3, [r7, #4]
 8033118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 803311c:	b2db      	uxtb	r3, r3
 803311e:	2b20      	cmp	r3, #32
 8033120:	d12a      	bne.n	8033178 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8033122:	687b      	ldr	r3, [r7, #4]
 8033124:	2224      	movs	r2, #36	@ 0x24
 8033126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 803312a:	687b      	ldr	r3, [r7, #4]
 803312c:	681b      	ldr	r3, [r3, #0]
 803312e:	681a      	ldr	r2, [r3, #0]
 8033130:	687b      	ldr	r3, [r7, #4]
 8033132:	681b      	ldr	r3, [r3, #0]
 8033134:	f022 0201 	bic.w	r2, r2, #1
 8033138:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 803313a:	687b      	ldr	r3, [r7, #4]
 803313c:	681b      	ldr	r3, [r3, #0]
 803313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8033140:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8033142:	89fb      	ldrh	r3, [r7, #14]
 8033144:	f023 030f 	bic.w	r3, r3, #15
 8033148:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 803314a:	683b      	ldr	r3, [r7, #0]
 803314c:	b29a      	uxth	r2, r3
 803314e:	89fb      	ldrh	r3, [r7, #14]
 8033150:	4313      	orrs	r3, r2
 8033152:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8033154:	687b      	ldr	r3, [r7, #4]
 8033156:	681b      	ldr	r3, [r3, #0]
 8033158:	89fa      	ldrh	r2, [r7, #14]
 803315a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 803315c:	687b      	ldr	r3, [r7, #4]
 803315e:	681b      	ldr	r3, [r3, #0]
 8033160:	681a      	ldr	r2, [r3, #0]
 8033162:	687b      	ldr	r3, [r7, #4]
 8033164:	681b      	ldr	r3, [r3, #0]
 8033166:	f042 0201 	orr.w	r2, r2, #1
 803316a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 803316c:	687b      	ldr	r3, [r7, #4]
 803316e:	2220      	movs	r2, #32
 8033170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8033174:	2300      	movs	r3, #0
 8033176:	e000      	b.n	803317a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8033178:	2302      	movs	r3, #2
  }
}
 803317a:	4618      	mov	r0, r3
 803317c:	3714      	adds	r7, #20
 803317e:	46bd      	mov	sp, r7
 8033180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033184:	4770      	bx	lr
	...

08033188 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8033188:	b580      	push	{r7, lr}
 803318a:	b082      	sub	sp, #8
 803318c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 803318e:	2300      	movs	r3, #0
 8033190:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8033192:	2300      	movs	r3, #0
 8033194:	603b      	str	r3, [r7, #0]
 8033196:	4b20      	ldr	r3, [pc, #128]	@ (8033218 <HAL_PWREx_EnableOverDrive+0x90>)
 8033198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803319a:	4a1f      	ldr	r2, [pc, #124]	@ (8033218 <HAL_PWREx_EnableOverDrive+0x90>)
 803319c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80331a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80331a2:	4b1d      	ldr	r3, [pc, #116]	@ (8033218 <HAL_PWREx_EnableOverDrive+0x90>)
 80331a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80331a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80331aa:	603b      	str	r3, [r7, #0]
 80331ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80331ae:	4b1b      	ldr	r3, [pc, #108]	@ (803321c <HAL_PWREx_EnableOverDrive+0x94>)
 80331b0:	2201      	movs	r2, #1
 80331b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80331b4:	f7ff f992 	bl	80324dc <HAL_GetTick>
 80331b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80331ba:	e009      	b.n	80331d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80331bc:	f7ff f98e 	bl	80324dc <HAL_GetTick>
 80331c0:	4602      	mov	r2, r0
 80331c2:	687b      	ldr	r3, [r7, #4]
 80331c4:	1ad3      	subs	r3, r2, r3
 80331c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80331ca:	d901      	bls.n	80331d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80331cc:	2303      	movs	r3, #3
 80331ce:	e01f      	b.n	8033210 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80331d0:	4b13      	ldr	r3, [pc, #76]	@ (8033220 <HAL_PWREx_EnableOverDrive+0x98>)
 80331d2:	685b      	ldr	r3, [r3, #4]
 80331d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80331d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80331dc:	d1ee      	bne.n	80331bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80331de:	4b11      	ldr	r3, [pc, #68]	@ (8033224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80331e0:	2201      	movs	r2, #1
 80331e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80331e4:	f7ff f97a 	bl	80324dc <HAL_GetTick>
 80331e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80331ea:	e009      	b.n	8033200 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80331ec:	f7ff f976 	bl	80324dc <HAL_GetTick>
 80331f0:	4602      	mov	r2, r0
 80331f2:	687b      	ldr	r3, [r7, #4]
 80331f4:	1ad3      	subs	r3, r2, r3
 80331f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80331fa:	d901      	bls.n	8033200 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80331fc:	2303      	movs	r3, #3
 80331fe:	e007      	b.n	8033210 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8033200:	4b07      	ldr	r3, [pc, #28]	@ (8033220 <HAL_PWREx_EnableOverDrive+0x98>)
 8033202:	685b      	ldr	r3, [r3, #4]
 8033204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8033208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 803320c:	d1ee      	bne.n	80331ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 803320e:	2300      	movs	r3, #0
}
 8033210:	4618      	mov	r0, r3
 8033212:	3708      	adds	r7, #8
 8033214:	46bd      	mov	sp, r7
 8033216:	bd80      	pop	{r7, pc}
 8033218:	40023800 	.word	0x40023800
 803321c:	420e0040 	.word	0x420e0040
 8033220:	40007000 	.word	0x40007000
 8033224:	420e0044 	.word	0x420e0044

08033228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8033228:	b580      	push	{r7, lr}
 803322a:	b086      	sub	sp, #24
 803322c:	af00      	add	r7, sp, #0
 803322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8033230:	687b      	ldr	r3, [r7, #4]
 8033232:	2b00      	cmp	r3, #0
 8033234:	d101      	bne.n	803323a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8033236:	2301      	movs	r3, #1
 8033238:	e267      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 803323a:	687b      	ldr	r3, [r7, #4]
 803323c:	681b      	ldr	r3, [r3, #0]
 803323e:	f003 0301 	and.w	r3, r3, #1
 8033242:	2b00      	cmp	r3, #0
 8033244:	d075      	beq.n	8033332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8033246:	4b88      	ldr	r3, [pc, #544]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033248:	689b      	ldr	r3, [r3, #8]
 803324a:	f003 030c 	and.w	r3, r3, #12
 803324e:	2b04      	cmp	r3, #4
 8033250:	d00c      	beq.n	803326c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8033252:	4b85      	ldr	r3, [pc, #532]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033254:	689b      	ldr	r3, [r3, #8]
 8033256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 803325a:	2b08      	cmp	r3, #8
 803325c:	d112      	bne.n	8033284 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 803325e:	4b82      	ldr	r3, [pc, #520]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033260:	685b      	ldr	r3, [r3, #4]
 8033262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8033266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 803326a:	d10b      	bne.n	8033284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 803326c:	4b7e      	ldr	r3, [pc, #504]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 803326e:	681b      	ldr	r3, [r3, #0]
 8033270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8033274:	2b00      	cmp	r3, #0
 8033276:	d05b      	beq.n	8033330 <HAL_RCC_OscConfig+0x108>
 8033278:	687b      	ldr	r3, [r7, #4]
 803327a:	685b      	ldr	r3, [r3, #4]
 803327c:	2b00      	cmp	r3, #0
 803327e:	d157      	bne.n	8033330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8033280:	2301      	movs	r3, #1
 8033282:	e242      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8033284:	687b      	ldr	r3, [r7, #4]
 8033286:	685b      	ldr	r3, [r3, #4]
 8033288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 803328c:	d106      	bne.n	803329c <HAL_RCC_OscConfig+0x74>
 803328e:	4b76      	ldr	r3, [pc, #472]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033290:	681b      	ldr	r3, [r3, #0]
 8033292:	4a75      	ldr	r2, [pc, #468]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8033298:	6013      	str	r3, [r2, #0]
 803329a:	e01d      	b.n	80332d8 <HAL_RCC_OscConfig+0xb0>
 803329c:	687b      	ldr	r3, [r7, #4]
 803329e:	685b      	ldr	r3, [r3, #4]
 80332a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80332a4:	d10c      	bne.n	80332c0 <HAL_RCC_OscConfig+0x98>
 80332a6:	4b70      	ldr	r3, [pc, #448]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332a8:	681b      	ldr	r3, [r3, #0]
 80332aa:	4a6f      	ldr	r2, [pc, #444]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80332b0:	6013      	str	r3, [r2, #0]
 80332b2:	4b6d      	ldr	r3, [pc, #436]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332b4:	681b      	ldr	r3, [r3, #0]
 80332b6:	4a6c      	ldr	r2, [pc, #432]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80332bc:	6013      	str	r3, [r2, #0]
 80332be:	e00b      	b.n	80332d8 <HAL_RCC_OscConfig+0xb0>
 80332c0:	4b69      	ldr	r3, [pc, #420]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332c2:	681b      	ldr	r3, [r3, #0]
 80332c4:	4a68      	ldr	r2, [pc, #416]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80332ca:	6013      	str	r3, [r2, #0]
 80332cc:	4b66      	ldr	r3, [pc, #408]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332ce:	681b      	ldr	r3, [r3, #0]
 80332d0:	4a65      	ldr	r2, [pc, #404]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80332d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80332d8:	687b      	ldr	r3, [r7, #4]
 80332da:	685b      	ldr	r3, [r3, #4]
 80332dc:	2b00      	cmp	r3, #0
 80332de:	d013      	beq.n	8033308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80332e0:	f7ff f8fc 	bl	80324dc <HAL_GetTick>
 80332e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80332e6:	e008      	b.n	80332fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80332e8:	f7ff f8f8 	bl	80324dc <HAL_GetTick>
 80332ec:	4602      	mov	r2, r0
 80332ee:	693b      	ldr	r3, [r7, #16]
 80332f0:	1ad3      	subs	r3, r2, r3
 80332f2:	2b64      	cmp	r3, #100	@ 0x64
 80332f4:	d901      	bls.n	80332fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80332f6:	2303      	movs	r3, #3
 80332f8:	e207      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80332fa:	4b5b      	ldr	r3, [pc, #364]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80332fc:	681b      	ldr	r3, [r3, #0]
 80332fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8033302:	2b00      	cmp	r3, #0
 8033304:	d0f0      	beq.n	80332e8 <HAL_RCC_OscConfig+0xc0>
 8033306:	e014      	b.n	8033332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033308:	f7ff f8e8 	bl	80324dc <HAL_GetTick>
 803330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 803330e:	e008      	b.n	8033322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8033310:	f7ff f8e4 	bl	80324dc <HAL_GetTick>
 8033314:	4602      	mov	r2, r0
 8033316:	693b      	ldr	r3, [r7, #16]
 8033318:	1ad3      	subs	r3, r2, r3
 803331a:	2b64      	cmp	r3, #100	@ 0x64
 803331c:	d901      	bls.n	8033322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 803331e:	2303      	movs	r3, #3
 8033320:	e1f3      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8033322:	4b51      	ldr	r3, [pc, #324]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033324:	681b      	ldr	r3, [r3, #0]
 8033326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 803332a:	2b00      	cmp	r3, #0
 803332c:	d1f0      	bne.n	8033310 <HAL_RCC_OscConfig+0xe8>
 803332e:	e000      	b.n	8033332 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8033330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8033332:	687b      	ldr	r3, [r7, #4]
 8033334:	681b      	ldr	r3, [r3, #0]
 8033336:	f003 0302 	and.w	r3, r3, #2
 803333a:	2b00      	cmp	r3, #0
 803333c:	d063      	beq.n	8033406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 803333e:	4b4a      	ldr	r3, [pc, #296]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033340:	689b      	ldr	r3, [r3, #8]
 8033342:	f003 030c 	and.w	r3, r3, #12
 8033346:	2b00      	cmp	r3, #0
 8033348:	d00b      	beq.n	8033362 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 803334a:	4b47      	ldr	r3, [pc, #284]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 803334c:	689b      	ldr	r3, [r3, #8]
 803334e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8033352:	2b08      	cmp	r3, #8
 8033354:	d11c      	bne.n	8033390 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8033356:	4b44      	ldr	r3, [pc, #272]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033358:	685b      	ldr	r3, [r3, #4]
 803335a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 803335e:	2b00      	cmp	r3, #0
 8033360:	d116      	bne.n	8033390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8033362:	4b41      	ldr	r3, [pc, #260]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 8033364:	681b      	ldr	r3, [r3, #0]
 8033366:	f003 0302 	and.w	r3, r3, #2
 803336a:	2b00      	cmp	r3, #0
 803336c:	d005      	beq.n	803337a <HAL_RCC_OscConfig+0x152>
 803336e:	687b      	ldr	r3, [r7, #4]
 8033370:	68db      	ldr	r3, [r3, #12]
 8033372:	2b01      	cmp	r3, #1
 8033374:	d001      	beq.n	803337a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8033376:	2301      	movs	r3, #1
 8033378:	e1c7      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 803337a:	4b3b      	ldr	r3, [pc, #236]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 803337c:	681b      	ldr	r3, [r3, #0]
 803337e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8033382:	687b      	ldr	r3, [r7, #4]
 8033384:	691b      	ldr	r3, [r3, #16]
 8033386:	00db      	lsls	r3, r3, #3
 8033388:	4937      	ldr	r1, [pc, #220]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 803338a:	4313      	orrs	r3, r2
 803338c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 803338e:	e03a      	b.n	8033406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8033390:	687b      	ldr	r3, [r7, #4]
 8033392:	68db      	ldr	r3, [r3, #12]
 8033394:	2b00      	cmp	r3, #0
 8033396:	d020      	beq.n	80333da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8033398:	4b34      	ldr	r3, [pc, #208]	@ (803346c <HAL_RCC_OscConfig+0x244>)
 803339a:	2201      	movs	r2, #1
 803339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803339e:	f7ff f89d 	bl	80324dc <HAL_GetTick>
 80333a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80333a4:	e008      	b.n	80333b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80333a6:	f7ff f899 	bl	80324dc <HAL_GetTick>
 80333aa:	4602      	mov	r2, r0
 80333ac:	693b      	ldr	r3, [r7, #16]
 80333ae:	1ad3      	subs	r3, r2, r3
 80333b0:	2b02      	cmp	r3, #2
 80333b2:	d901      	bls.n	80333b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80333b4:	2303      	movs	r3, #3
 80333b6:	e1a8      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80333b8:	4b2b      	ldr	r3, [pc, #172]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80333ba:	681b      	ldr	r3, [r3, #0]
 80333bc:	f003 0302 	and.w	r3, r3, #2
 80333c0:	2b00      	cmp	r3, #0
 80333c2:	d0f0      	beq.n	80333a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80333c4:	4b28      	ldr	r3, [pc, #160]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80333c6:	681b      	ldr	r3, [r3, #0]
 80333c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80333cc:	687b      	ldr	r3, [r7, #4]
 80333ce:	691b      	ldr	r3, [r3, #16]
 80333d0:	00db      	lsls	r3, r3, #3
 80333d2:	4925      	ldr	r1, [pc, #148]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80333d4:	4313      	orrs	r3, r2
 80333d6:	600b      	str	r3, [r1, #0]
 80333d8:	e015      	b.n	8033406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80333da:	4b24      	ldr	r3, [pc, #144]	@ (803346c <HAL_RCC_OscConfig+0x244>)
 80333dc:	2200      	movs	r2, #0
 80333de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80333e0:	f7ff f87c 	bl	80324dc <HAL_GetTick>
 80333e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80333e6:	e008      	b.n	80333fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80333e8:	f7ff f878 	bl	80324dc <HAL_GetTick>
 80333ec:	4602      	mov	r2, r0
 80333ee:	693b      	ldr	r3, [r7, #16]
 80333f0:	1ad3      	subs	r3, r2, r3
 80333f2:	2b02      	cmp	r3, #2
 80333f4:	d901      	bls.n	80333fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80333f6:	2303      	movs	r3, #3
 80333f8:	e187      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80333fa:	4b1b      	ldr	r3, [pc, #108]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 80333fc:	681b      	ldr	r3, [r3, #0]
 80333fe:	f003 0302 	and.w	r3, r3, #2
 8033402:	2b00      	cmp	r3, #0
 8033404:	d1f0      	bne.n	80333e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8033406:	687b      	ldr	r3, [r7, #4]
 8033408:	681b      	ldr	r3, [r3, #0]
 803340a:	f003 0308 	and.w	r3, r3, #8
 803340e:	2b00      	cmp	r3, #0
 8033410:	d036      	beq.n	8033480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8033412:	687b      	ldr	r3, [r7, #4]
 8033414:	695b      	ldr	r3, [r3, #20]
 8033416:	2b00      	cmp	r3, #0
 8033418:	d016      	beq.n	8033448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 803341a:	4b15      	ldr	r3, [pc, #84]	@ (8033470 <HAL_RCC_OscConfig+0x248>)
 803341c:	2201      	movs	r2, #1
 803341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8033420:	f7ff f85c 	bl	80324dc <HAL_GetTick>
 8033424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8033426:	e008      	b.n	803343a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8033428:	f7ff f858 	bl	80324dc <HAL_GetTick>
 803342c:	4602      	mov	r2, r0
 803342e:	693b      	ldr	r3, [r7, #16]
 8033430:	1ad3      	subs	r3, r2, r3
 8033432:	2b02      	cmp	r3, #2
 8033434:	d901      	bls.n	803343a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8033436:	2303      	movs	r3, #3
 8033438:	e167      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 803343a:	4b0b      	ldr	r3, [pc, #44]	@ (8033468 <HAL_RCC_OscConfig+0x240>)
 803343c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 803343e:	f003 0302 	and.w	r3, r3, #2
 8033442:	2b00      	cmp	r3, #0
 8033444:	d0f0      	beq.n	8033428 <HAL_RCC_OscConfig+0x200>
 8033446:	e01b      	b.n	8033480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8033448:	4b09      	ldr	r3, [pc, #36]	@ (8033470 <HAL_RCC_OscConfig+0x248>)
 803344a:	2200      	movs	r2, #0
 803344c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 803344e:	f7ff f845 	bl	80324dc <HAL_GetTick>
 8033452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8033454:	e00e      	b.n	8033474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8033456:	f7ff f841 	bl	80324dc <HAL_GetTick>
 803345a:	4602      	mov	r2, r0
 803345c:	693b      	ldr	r3, [r7, #16]
 803345e:	1ad3      	subs	r3, r2, r3
 8033460:	2b02      	cmp	r3, #2
 8033462:	d907      	bls.n	8033474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8033464:	2303      	movs	r3, #3
 8033466:	e150      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
 8033468:	40023800 	.word	0x40023800
 803346c:	42470000 	.word	0x42470000
 8033470:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8033474:	4b88      	ldr	r3, [pc, #544]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8033478:	f003 0302 	and.w	r3, r3, #2
 803347c:	2b00      	cmp	r3, #0
 803347e:	d1ea      	bne.n	8033456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8033480:	687b      	ldr	r3, [r7, #4]
 8033482:	681b      	ldr	r3, [r3, #0]
 8033484:	f003 0304 	and.w	r3, r3, #4
 8033488:	2b00      	cmp	r3, #0
 803348a:	f000 8097 	beq.w	80335bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 803348e:	2300      	movs	r3, #0
 8033490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8033492:	4b81      	ldr	r3, [pc, #516]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8033496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 803349a:	2b00      	cmp	r3, #0
 803349c:	d10f      	bne.n	80334be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 803349e:	2300      	movs	r3, #0
 80334a0:	60bb      	str	r3, [r7, #8]
 80334a2:	4b7d      	ldr	r3, [pc, #500]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80334a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80334a6:	4a7c      	ldr	r2, [pc, #496]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80334a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80334ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80334ae:	4b7a      	ldr	r3, [pc, #488]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80334b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80334b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80334b6:	60bb      	str	r3, [r7, #8]
 80334b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80334ba:	2301      	movs	r3, #1
 80334bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80334be:	4b77      	ldr	r3, [pc, #476]	@ (803369c <HAL_RCC_OscConfig+0x474>)
 80334c0:	681b      	ldr	r3, [r3, #0]
 80334c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80334c6:	2b00      	cmp	r3, #0
 80334c8:	d118      	bne.n	80334fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80334ca:	4b74      	ldr	r3, [pc, #464]	@ (803369c <HAL_RCC_OscConfig+0x474>)
 80334cc:	681b      	ldr	r3, [r3, #0]
 80334ce:	4a73      	ldr	r2, [pc, #460]	@ (803369c <HAL_RCC_OscConfig+0x474>)
 80334d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80334d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80334d6:	f7ff f801 	bl	80324dc <HAL_GetTick>
 80334da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80334dc:	e008      	b.n	80334f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80334de:	f7fe fffd 	bl	80324dc <HAL_GetTick>
 80334e2:	4602      	mov	r2, r0
 80334e4:	693b      	ldr	r3, [r7, #16]
 80334e6:	1ad3      	subs	r3, r2, r3
 80334e8:	2b02      	cmp	r3, #2
 80334ea:	d901      	bls.n	80334f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80334ec:	2303      	movs	r3, #3
 80334ee:	e10c      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80334f0:	4b6a      	ldr	r3, [pc, #424]	@ (803369c <HAL_RCC_OscConfig+0x474>)
 80334f2:	681b      	ldr	r3, [r3, #0]
 80334f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80334f8:	2b00      	cmp	r3, #0
 80334fa:	d0f0      	beq.n	80334de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80334fc:	687b      	ldr	r3, [r7, #4]
 80334fe:	689b      	ldr	r3, [r3, #8]
 8033500:	2b01      	cmp	r3, #1
 8033502:	d106      	bne.n	8033512 <HAL_RCC_OscConfig+0x2ea>
 8033504:	4b64      	ldr	r3, [pc, #400]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8033508:	4a63      	ldr	r2, [pc, #396]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 803350a:	f043 0301 	orr.w	r3, r3, #1
 803350e:	6713      	str	r3, [r2, #112]	@ 0x70
 8033510:	e01c      	b.n	803354c <HAL_RCC_OscConfig+0x324>
 8033512:	687b      	ldr	r3, [r7, #4]
 8033514:	689b      	ldr	r3, [r3, #8]
 8033516:	2b05      	cmp	r3, #5
 8033518:	d10c      	bne.n	8033534 <HAL_RCC_OscConfig+0x30c>
 803351a:	4b5f      	ldr	r3, [pc, #380]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 803351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 803351e:	4a5e      	ldr	r2, [pc, #376]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033520:	f043 0304 	orr.w	r3, r3, #4
 8033524:	6713      	str	r3, [r2, #112]	@ 0x70
 8033526:	4b5c      	ldr	r3, [pc, #368]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 803352a:	4a5b      	ldr	r2, [pc, #364]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 803352c:	f043 0301 	orr.w	r3, r3, #1
 8033530:	6713      	str	r3, [r2, #112]	@ 0x70
 8033532:	e00b      	b.n	803354c <HAL_RCC_OscConfig+0x324>
 8033534:	4b58      	ldr	r3, [pc, #352]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8033538:	4a57      	ldr	r2, [pc, #348]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 803353a:	f023 0301 	bic.w	r3, r3, #1
 803353e:	6713      	str	r3, [r2, #112]	@ 0x70
 8033540:	4b55      	ldr	r3, [pc, #340]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8033544:	4a54      	ldr	r2, [pc, #336]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033546:	f023 0304 	bic.w	r3, r3, #4
 803354a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 803354c:	687b      	ldr	r3, [r7, #4]
 803354e:	689b      	ldr	r3, [r3, #8]
 8033550:	2b00      	cmp	r3, #0
 8033552:	d015      	beq.n	8033580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8033554:	f7fe ffc2 	bl	80324dc <HAL_GetTick>
 8033558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 803355a:	e00a      	b.n	8033572 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 803355c:	f7fe ffbe 	bl	80324dc <HAL_GetTick>
 8033560:	4602      	mov	r2, r0
 8033562:	693b      	ldr	r3, [r7, #16]
 8033564:	1ad3      	subs	r3, r2, r3
 8033566:	f241 3288 	movw	r2, #5000	@ 0x1388
 803356a:	4293      	cmp	r3, r2
 803356c:	d901      	bls.n	8033572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 803356e:	2303      	movs	r3, #3
 8033570:	e0cb      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8033572:	4b49      	ldr	r3, [pc, #292]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8033576:	f003 0302 	and.w	r3, r3, #2
 803357a:	2b00      	cmp	r3, #0
 803357c:	d0ee      	beq.n	803355c <HAL_RCC_OscConfig+0x334>
 803357e:	e014      	b.n	80335aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8033580:	f7fe ffac 	bl	80324dc <HAL_GetTick>
 8033584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8033586:	e00a      	b.n	803359e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8033588:	f7fe ffa8 	bl	80324dc <HAL_GetTick>
 803358c:	4602      	mov	r2, r0
 803358e:	693b      	ldr	r3, [r7, #16]
 8033590:	1ad3      	subs	r3, r2, r3
 8033592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8033596:	4293      	cmp	r3, r2
 8033598:	d901      	bls.n	803359e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 803359a:	2303      	movs	r3, #3
 803359c:	e0b5      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 803359e:	4b3e      	ldr	r3, [pc, #248]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80335a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80335a2:	f003 0302 	and.w	r3, r3, #2
 80335a6:	2b00      	cmp	r3, #0
 80335a8:	d1ee      	bne.n	8033588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80335aa:	7dfb      	ldrb	r3, [r7, #23]
 80335ac:	2b01      	cmp	r3, #1
 80335ae:	d105      	bne.n	80335bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80335b0:	4b39      	ldr	r3, [pc, #228]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80335b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80335b4:	4a38      	ldr	r2, [pc, #224]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80335b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80335ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80335bc:	687b      	ldr	r3, [r7, #4]
 80335be:	699b      	ldr	r3, [r3, #24]
 80335c0:	2b00      	cmp	r3, #0
 80335c2:	f000 80a1 	beq.w	8033708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80335c6:	4b34      	ldr	r3, [pc, #208]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80335c8:	689b      	ldr	r3, [r3, #8]
 80335ca:	f003 030c 	and.w	r3, r3, #12
 80335ce:	2b08      	cmp	r3, #8
 80335d0:	d05c      	beq.n	803368c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80335d2:	687b      	ldr	r3, [r7, #4]
 80335d4:	699b      	ldr	r3, [r3, #24]
 80335d6:	2b02      	cmp	r3, #2
 80335d8:	d141      	bne.n	803365e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80335da:	4b31      	ldr	r3, [pc, #196]	@ (80336a0 <HAL_RCC_OscConfig+0x478>)
 80335dc:	2200      	movs	r2, #0
 80335de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80335e0:	f7fe ff7c 	bl	80324dc <HAL_GetTick>
 80335e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80335e6:	e008      	b.n	80335fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80335e8:	f7fe ff78 	bl	80324dc <HAL_GetTick>
 80335ec:	4602      	mov	r2, r0
 80335ee:	693b      	ldr	r3, [r7, #16]
 80335f0:	1ad3      	subs	r3, r2, r3
 80335f2:	2b02      	cmp	r3, #2
 80335f4:	d901      	bls.n	80335fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80335f6:	2303      	movs	r3, #3
 80335f8:	e087      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80335fa:	4b27      	ldr	r3, [pc, #156]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 80335fc:	681b      	ldr	r3, [r3, #0]
 80335fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8033602:	2b00      	cmp	r3, #0
 8033604:	d1f0      	bne.n	80335e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8033606:	687b      	ldr	r3, [r7, #4]
 8033608:	69da      	ldr	r2, [r3, #28]
 803360a:	687b      	ldr	r3, [r7, #4]
 803360c:	6a1b      	ldr	r3, [r3, #32]
 803360e:	431a      	orrs	r2, r3
 8033610:	687b      	ldr	r3, [r7, #4]
 8033612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8033614:	019b      	lsls	r3, r3, #6
 8033616:	431a      	orrs	r2, r3
 8033618:	687b      	ldr	r3, [r7, #4]
 803361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803361c:	085b      	lsrs	r3, r3, #1
 803361e:	3b01      	subs	r3, #1
 8033620:	041b      	lsls	r3, r3, #16
 8033622:	431a      	orrs	r2, r3
 8033624:	687b      	ldr	r3, [r7, #4]
 8033626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8033628:	061b      	lsls	r3, r3, #24
 803362a:	491b      	ldr	r1, [pc, #108]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 803362c:	4313      	orrs	r3, r2
 803362e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8033630:	4b1b      	ldr	r3, [pc, #108]	@ (80336a0 <HAL_RCC_OscConfig+0x478>)
 8033632:	2201      	movs	r2, #1
 8033634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033636:	f7fe ff51 	bl	80324dc <HAL_GetTick>
 803363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 803363c:	e008      	b.n	8033650 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 803363e:	f7fe ff4d 	bl	80324dc <HAL_GetTick>
 8033642:	4602      	mov	r2, r0
 8033644:	693b      	ldr	r3, [r7, #16]
 8033646:	1ad3      	subs	r3, r2, r3
 8033648:	2b02      	cmp	r3, #2
 803364a:	d901      	bls.n	8033650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 803364c:	2303      	movs	r3, #3
 803364e:	e05c      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8033650:	4b11      	ldr	r3, [pc, #68]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033652:	681b      	ldr	r3, [r3, #0]
 8033654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8033658:	2b00      	cmp	r3, #0
 803365a:	d0f0      	beq.n	803363e <HAL_RCC_OscConfig+0x416>
 803365c:	e054      	b.n	8033708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 803365e:	4b10      	ldr	r3, [pc, #64]	@ (80336a0 <HAL_RCC_OscConfig+0x478>)
 8033660:	2200      	movs	r2, #0
 8033662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033664:	f7fe ff3a 	bl	80324dc <HAL_GetTick>
 8033668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 803366a:	e008      	b.n	803367e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 803366c:	f7fe ff36 	bl	80324dc <HAL_GetTick>
 8033670:	4602      	mov	r2, r0
 8033672:	693b      	ldr	r3, [r7, #16]
 8033674:	1ad3      	subs	r3, r2, r3
 8033676:	2b02      	cmp	r3, #2
 8033678:	d901      	bls.n	803367e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 803367a:	2303      	movs	r3, #3
 803367c:	e045      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 803367e:	4b06      	ldr	r3, [pc, #24]	@ (8033698 <HAL_RCC_OscConfig+0x470>)
 8033680:	681b      	ldr	r3, [r3, #0]
 8033682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8033686:	2b00      	cmp	r3, #0
 8033688:	d1f0      	bne.n	803366c <HAL_RCC_OscConfig+0x444>
 803368a:	e03d      	b.n	8033708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 803368c:	687b      	ldr	r3, [r7, #4]
 803368e:	699b      	ldr	r3, [r3, #24]
 8033690:	2b01      	cmp	r3, #1
 8033692:	d107      	bne.n	80336a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8033694:	2301      	movs	r3, #1
 8033696:	e038      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
 8033698:	40023800 	.word	0x40023800
 803369c:	40007000 	.word	0x40007000
 80336a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80336a4:	4b1b      	ldr	r3, [pc, #108]	@ (8033714 <HAL_RCC_OscConfig+0x4ec>)
 80336a6:	685b      	ldr	r3, [r3, #4]
 80336a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80336aa:	687b      	ldr	r3, [r7, #4]
 80336ac:	699b      	ldr	r3, [r3, #24]
 80336ae:	2b01      	cmp	r3, #1
 80336b0:	d028      	beq.n	8033704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80336b2:	68fb      	ldr	r3, [r7, #12]
 80336b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80336b8:	687b      	ldr	r3, [r7, #4]
 80336ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80336bc:	429a      	cmp	r2, r3
 80336be:	d121      	bne.n	8033704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80336c0:	68fb      	ldr	r3, [r7, #12]
 80336c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80336c6:	687b      	ldr	r3, [r7, #4]
 80336c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80336ca:	429a      	cmp	r2, r3
 80336cc:	d11a      	bne.n	8033704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80336ce:	68fa      	ldr	r2, [r7, #12]
 80336d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80336d4:	4013      	ands	r3, r2
 80336d6:	687a      	ldr	r2, [r7, #4]
 80336d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80336da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80336dc:	4293      	cmp	r3, r2
 80336de:	d111      	bne.n	8033704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80336e0:	68fb      	ldr	r3, [r7, #12]
 80336e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80336e6:	687b      	ldr	r3, [r7, #4]
 80336e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80336ea:	085b      	lsrs	r3, r3, #1
 80336ec:	3b01      	subs	r3, #1
 80336ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80336f0:	429a      	cmp	r2, r3
 80336f2:	d107      	bne.n	8033704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80336f4:	68fb      	ldr	r3, [r7, #12]
 80336f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80336fa:	687b      	ldr	r3, [r7, #4]
 80336fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80336fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8033700:	429a      	cmp	r2, r3
 8033702:	d001      	beq.n	8033708 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8033704:	2301      	movs	r3, #1
 8033706:	e000      	b.n	803370a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8033708:	2300      	movs	r3, #0
}
 803370a:	4618      	mov	r0, r3
 803370c:	3718      	adds	r7, #24
 803370e:	46bd      	mov	sp, r7
 8033710:	bd80      	pop	{r7, pc}
 8033712:	bf00      	nop
 8033714:	40023800 	.word	0x40023800

08033718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8033718:	b580      	push	{r7, lr}
 803371a:	b084      	sub	sp, #16
 803371c:	af00      	add	r7, sp, #0
 803371e:	6078      	str	r0, [r7, #4]
 8033720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8033722:	687b      	ldr	r3, [r7, #4]
 8033724:	2b00      	cmp	r3, #0
 8033726:	d101      	bne.n	803372c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8033728:	2301      	movs	r3, #1
 803372a:	e0cc      	b.n	80338c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 803372c:	4b68      	ldr	r3, [pc, #416]	@ (80338d0 <HAL_RCC_ClockConfig+0x1b8>)
 803372e:	681b      	ldr	r3, [r3, #0]
 8033730:	f003 030f 	and.w	r3, r3, #15
 8033734:	683a      	ldr	r2, [r7, #0]
 8033736:	429a      	cmp	r2, r3
 8033738:	d90c      	bls.n	8033754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 803373a:	4b65      	ldr	r3, [pc, #404]	@ (80338d0 <HAL_RCC_ClockConfig+0x1b8>)
 803373c:	683a      	ldr	r2, [r7, #0]
 803373e:	b2d2      	uxtb	r2, r2
 8033740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8033742:	4b63      	ldr	r3, [pc, #396]	@ (80338d0 <HAL_RCC_ClockConfig+0x1b8>)
 8033744:	681b      	ldr	r3, [r3, #0]
 8033746:	f003 030f 	and.w	r3, r3, #15
 803374a:	683a      	ldr	r2, [r7, #0]
 803374c:	429a      	cmp	r2, r3
 803374e:	d001      	beq.n	8033754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8033750:	2301      	movs	r3, #1
 8033752:	e0b8      	b.n	80338c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8033754:	687b      	ldr	r3, [r7, #4]
 8033756:	681b      	ldr	r3, [r3, #0]
 8033758:	f003 0302 	and.w	r3, r3, #2
 803375c:	2b00      	cmp	r3, #0
 803375e:	d020      	beq.n	80337a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033760:	687b      	ldr	r3, [r7, #4]
 8033762:	681b      	ldr	r3, [r3, #0]
 8033764:	f003 0304 	and.w	r3, r3, #4
 8033768:	2b00      	cmp	r3, #0
 803376a:	d005      	beq.n	8033778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 803376c:	4b59      	ldr	r3, [pc, #356]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 803376e:	689b      	ldr	r3, [r3, #8]
 8033770:	4a58      	ldr	r2, [pc, #352]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 8033772:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8033776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8033778:	687b      	ldr	r3, [r7, #4]
 803377a:	681b      	ldr	r3, [r3, #0]
 803377c:	f003 0308 	and.w	r3, r3, #8
 8033780:	2b00      	cmp	r3, #0
 8033782:	d005      	beq.n	8033790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8033784:	4b53      	ldr	r3, [pc, #332]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 8033786:	689b      	ldr	r3, [r3, #8]
 8033788:	4a52      	ldr	r2, [pc, #328]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 803378a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 803378e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8033790:	4b50      	ldr	r3, [pc, #320]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 8033792:	689b      	ldr	r3, [r3, #8]
 8033794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8033798:	687b      	ldr	r3, [r7, #4]
 803379a:	689b      	ldr	r3, [r3, #8]
 803379c:	494d      	ldr	r1, [pc, #308]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 803379e:	4313      	orrs	r3, r2
 80337a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80337a2:	687b      	ldr	r3, [r7, #4]
 80337a4:	681b      	ldr	r3, [r3, #0]
 80337a6:	f003 0301 	and.w	r3, r3, #1
 80337aa:	2b00      	cmp	r3, #0
 80337ac:	d044      	beq.n	8033838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80337ae:	687b      	ldr	r3, [r7, #4]
 80337b0:	685b      	ldr	r3, [r3, #4]
 80337b2:	2b01      	cmp	r3, #1
 80337b4:	d107      	bne.n	80337c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80337b6:	4b47      	ldr	r3, [pc, #284]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 80337b8:	681b      	ldr	r3, [r3, #0]
 80337ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80337be:	2b00      	cmp	r3, #0
 80337c0:	d119      	bne.n	80337f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80337c2:	2301      	movs	r3, #1
 80337c4:	e07f      	b.n	80338c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80337c6:	687b      	ldr	r3, [r7, #4]
 80337c8:	685b      	ldr	r3, [r3, #4]
 80337ca:	2b02      	cmp	r3, #2
 80337cc:	d003      	beq.n	80337d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80337ce:	687b      	ldr	r3, [r7, #4]
 80337d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80337d2:	2b03      	cmp	r3, #3
 80337d4:	d107      	bne.n	80337e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80337d6:	4b3f      	ldr	r3, [pc, #252]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 80337d8:	681b      	ldr	r3, [r3, #0]
 80337da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80337de:	2b00      	cmp	r3, #0
 80337e0:	d109      	bne.n	80337f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80337e2:	2301      	movs	r3, #1
 80337e4:	e06f      	b.n	80338c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80337e6:	4b3b      	ldr	r3, [pc, #236]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 80337e8:	681b      	ldr	r3, [r3, #0]
 80337ea:	f003 0302 	and.w	r3, r3, #2
 80337ee:	2b00      	cmp	r3, #0
 80337f0:	d101      	bne.n	80337f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80337f2:	2301      	movs	r3, #1
 80337f4:	e067      	b.n	80338c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80337f6:	4b37      	ldr	r3, [pc, #220]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 80337f8:	689b      	ldr	r3, [r3, #8]
 80337fa:	f023 0203 	bic.w	r2, r3, #3
 80337fe:	687b      	ldr	r3, [r7, #4]
 8033800:	685b      	ldr	r3, [r3, #4]
 8033802:	4934      	ldr	r1, [pc, #208]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 8033804:	4313      	orrs	r3, r2
 8033806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8033808:	f7fe fe68 	bl	80324dc <HAL_GetTick>
 803380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 803380e:	e00a      	b.n	8033826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8033810:	f7fe fe64 	bl	80324dc <HAL_GetTick>
 8033814:	4602      	mov	r2, r0
 8033816:	68fb      	ldr	r3, [r7, #12]
 8033818:	1ad3      	subs	r3, r2, r3
 803381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 803381e:	4293      	cmp	r3, r2
 8033820:	d901      	bls.n	8033826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8033822:	2303      	movs	r3, #3
 8033824:	e04f      	b.n	80338c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8033826:	4b2b      	ldr	r3, [pc, #172]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 8033828:	689b      	ldr	r3, [r3, #8]
 803382a:	f003 020c 	and.w	r2, r3, #12
 803382e:	687b      	ldr	r3, [r7, #4]
 8033830:	685b      	ldr	r3, [r3, #4]
 8033832:	009b      	lsls	r3, r3, #2
 8033834:	429a      	cmp	r2, r3
 8033836:	d1eb      	bne.n	8033810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8033838:	4b25      	ldr	r3, [pc, #148]	@ (80338d0 <HAL_RCC_ClockConfig+0x1b8>)
 803383a:	681b      	ldr	r3, [r3, #0]
 803383c:	f003 030f 	and.w	r3, r3, #15
 8033840:	683a      	ldr	r2, [r7, #0]
 8033842:	429a      	cmp	r2, r3
 8033844:	d20c      	bcs.n	8033860 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8033846:	4b22      	ldr	r3, [pc, #136]	@ (80338d0 <HAL_RCC_ClockConfig+0x1b8>)
 8033848:	683a      	ldr	r2, [r7, #0]
 803384a:	b2d2      	uxtb	r2, r2
 803384c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 803384e:	4b20      	ldr	r3, [pc, #128]	@ (80338d0 <HAL_RCC_ClockConfig+0x1b8>)
 8033850:	681b      	ldr	r3, [r3, #0]
 8033852:	f003 030f 	and.w	r3, r3, #15
 8033856:	683a      	ldr	r2, [r7, #0]
 8033858:	429a      	cmp	r2, r3
 803385a:	d001      	beq.n	8033860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 803385c:	2301      	movs	r3, #1
 803385e:	e032      	b.n	80338c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033860:	687b      	ldr	r3, [r7, #4]
 8033862:	681b      	ldr	r3, [r3, #0]
 8033864:	f003 0304 	and.w	r3, r3, #4
 8033868:	2b00      	cmp	r3, #0
 803386a:	d008      	beq.n	803387e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 803386c:	4b19      	ldr	r3, [pc, #100]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 803386e:	689b      	ldr	r3, [r3, #8]
 8033870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8033874:	687b      	ldr	r3, [r7, #4]
 8033876:	68db      	ldr	r3, [r3, #12]
 8033878:	4916      	ldr	r1, [pc, #88]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 803387a:	4313      	orrs	r3, r2
 803387c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 803387e:	687b      	ldr	r3, [r7, #4]
 8033880:	681b      	ldr	r3, [r3, #0]
 8033882:	f003 0308 	and.w	r3, r3, #8
 8033886:	2b00      	cmp	r3, #0
 8033888:	d009      	beq.n	803389e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 803388a:	4b12      	ldr	r3, [pc, #72]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 803388c:	689b      	ldr	r3, [r3, #8]
 803388e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8033892:	687b      	ldr	r3, [r7, #4]
 8033894:	691b      	ldr	r3, [r3, #16]
 8033896:	00db      	lsls	r3, r3, #3
 8033898:	490e      	ldr	r1, [pc, #56]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 803389a:	4313      	orrs	r3, r2
 803389c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 803389e:	f000 f821 	bl	80338e4 <HAL_RCC_GetSysClockFreq>
 80338a2:	4602      	mov	r2, r0
 80338a4:	4b0b      	ldr	r3, [pc, #44]	@ (80338d4 <HAL_RCC_ClockConfig+0x1bc>)
 80338a6:	689b      	ldr	r3, [r3, #8]
 80338a8:	091b      	lsrs	r3, r3, #4
 80338aa:	f003 030f 	and.w	r3, r3, #15
 80338ae:	490a      	ldr	r1, [pc, #40]	@ (80338d8 <HAL_RCC_ClockConfig+0x1c0>)
 80338b0:	5ccb      	ldrb	r3, [r1, r3]
 80338b2:	fa22 f303 	lsr.w	r3, r2, r3
 80338b6:	4a09      	ldr	r2, [pc, #36]	@ (80338dc <HAL_RCC_ClockConfig+0x1c4>)
 80338b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80338ba:	4b09      	ldr	r3, [pc, #36]	@ (80338e0 <HAL_RCC_ClockConfig+0x1c8>)
 80338bc:	681b      	ldr	r3, [r3, #0]
 80338be:	4618      	mov	r0, r3
 80338c0:	f7f7 ff1e 	bl	802b700 <HAL_InitTick>

  return HAL_OK;
 80338c4:	2300      	movs	r3, #0
}
 80338c6:	4618      	mov	r0, r3
 80338c8:	3710      	adds	r7, #16
 80338ca:	46bd      	mov	sp, r7
 80338cc:	bd80      	pop	{r7, pc}
 80338ce:	bf00      	nop
 80338d0:	40023c00 	.word	0x40023c00
 80338d4:	40023800 	.word	0x40023800
 80338d8:	0803ce44 	.word	0x0803ce44
 80338dc:	20001bfc 	.word	0x20001bfc
 80338e0:	20001cac 	.word	0x20001cac

080338e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80338e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80338e8:	b094      	sub	sp, #80	@ 0x50
 80338ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80338ec:	2300      	movs	r3, #0
 80338ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80338f0:	2300      	movs	r3, #0
 80338f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80338f4:	2300      	movs	r3, #0
 80338f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80338f8:	2300      	movs	r3, #0
 80338fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80338fc:	4b79      	ldr	r3, [pc, #484]	@ (8033ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80338fe:	689b      	ldr	r3, [r3, #8]
 8033900:	f003 030c 	and.w	r3, r3, #12
 8033904:	2b08      	cmp	r3, #8
 8033906:	d00d      	beq.n	8033924 <HAL_RCC_GetSysClockFreq+0x40>
 8033908:	2b08      	cmp	r3, #8
 803390a:	f200 80e1 	bhi.w	8033ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 803390e:	2b00      	cmp	r3, #0
 8033910:	d002      	beq.n	8033918 <HAL_RCC_GetSysClockFreq+0x34>
 8033912:	2b04      	cmp	r3, #4
 8033914:	d003      	beq.n	803391e <HAL_RCC_GetSysClockFreq+0x3a>
 8033916:	e0db      	b.n	8033ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8033918:	4b73      	ldr	r3, [pc, #460]	@ (8033ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 803391a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 803391c:	e0db      	b.n	8033ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 803391e:	4b73      	ldr	r3, [pc, #460]	@ (8033aec <HAL_RCC_GetSysClockFreq+0x208>)
 8033920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8033922:	e0d8      	b.n	8033ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8033924:	4b6f      	ldr	r3, [pc, #444]	@ (8033ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8033926:	685b      	ldr	r3, [r3, #4]
 8033928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 803392c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 803392e:	4b6d      	ldr	r3, [pc, #436]	@ (8033ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8033930:	685b      	ldr	r3, [r3, #4]
 8033932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8033936:	2b00      	cmp	r3, #0
 8033938:	d063      	beq.n	8033a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 803393a:	4b6a      	ldr	r3, [pc, #424]	@ (8033ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 803393c:	685b      	ldr	r3, [r3, #4]
 803393e:	099b      	lsrs	r3, r3, #6
 8033940:	2200      	movs	r2, #0
 8033942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8033944:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8033946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8033948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803394c:	633b      	str	r3, [r7, #48]	@ 0x30
 803394e:	2300      	movs	r3, #0
 8033950:	637b      	str	r3, [r7, #52]	@ 0x34
 8033952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8033956:	4622      	mov	r2, r4
 8033958:	462b      	mov	r3, r5
 803395a:	f04f 0000 	mov.w	r0, #0
 803395e:	f04f 0100 	mov.w	r1, #0
 8033962:	0159      	lsls	r1, r3, #5
 8033964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8033968:	0150      	lsls	r0, r2, #5
 803396a:	4602      	mov	r2, r0
 803396c:	460b      	mov	r3, r1
 803396e:	4621      	mov	r1, r4
 8033970:	1a51      	subs	r1, r2, r1
 8033972:	6139      	str	r1, [r7, #16]
 8033974:	4629      	mov	r1, r5
 8033976:	eb63 0301 	sbc.w	r3, r3, r1
 803397a:	617b      	str	r3, [r7, #20]
 803397c:	f04f 0200 	mov.w	r2, #0
 8033980:	f04f 0300 	mov.w	r3, #0
 8033984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8033988:	4659      	mov	r1, fp
 803398a:	018b      	lsls	r3, r1, #6
 803398c:	4651      	mov	r1, sl
 803398e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8033992:	4651      	mov	r1, sl
 8033994:	018a      	lsls	r2, r1, #6
 8033996:	4651      	mov	r1, sl
 8033998:	ebb2 0801 	subs.w	r8, r2, r1
 803399c:	4659      	mov	r1, fp
 803399e:	eb63 0901 	sbc.w	r9, r3, r1
 80339a2:	f04f 0200 	mov.w	r2, #0
 80339a6:	f04f 0300 	mov.w	r3, #0
 80339aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80339ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80339b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80339b6:	4690      	mov	r8, r2
 80339b8:	4699      	mov	r9, r3
 80339ba:	4623      	mov	r3, r4
 80339bc:	eb18 0303 	adds.w	r3, r8, r3
 80339c0:	60bb      	str	r3, [r7, #8]
 80339c2:	462b      	mov	r3, r5
 80339c4:	eb49 0303 	adc.w	r3, r9, r3
 80339c8:	60fb      	str	r3, [r7, #12]
 80339ca:	f04f 0200 	mov.w	r2, #0
 80339ce:	f04f 0300 	mov.w	r3, #0
 80339d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80339d6:	4629      	mov	r1, r5
 80339d8:	024b      	lsls	r3, r1, #9
 80339da:	4621      	mov	r1, r4
 80339dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80339e0:	4621      	mov	r1, r4
 80339e2:	024a      	lsls	r2, r1, #9
 80339e4:	4610      	mov	r0, r2
 80339e6:	4619      	mov	r1, r3
 80339e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80339ea:	2200      	movs	r2, #0
 80339ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80339ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80339f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80339f4:	f7cd f900 	bl	8000bf8 <__aeabi_uldivmod>
 80339f8:	4602      	mov	r2, r0
 80339fa:	460b      	mov	r3, r1
 80339fc:	4613      	mov	r3, r2
 80339fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8033a00:	e058      	b.n	8033ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8033a02:	4b38      	ldr	r3, [pc, #224]	@ (8033ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8033a04:	685b      	ldr	r3, [r3, #4]
 8033a06:	099b      	lsrs	r3, r3, #6
 8033a08:	2200      	movs	r2, #0
 8033a0a:	4618      	mov	r0, r3
 8033a0c:	4611      	mov	r1, r2
 8033a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8033a12:	623b      	str	r3, [r7, #32]
 8033a14:	2300      	movs	r3, #0
 8033a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8033a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8033a1c:	4642      	mov	r2, r8
 8033a1e:	464b      	mov	r3, r9
 8033a20:	f04f 0000 	mov.w	r0, #0
 8033a24:	f04f 0100 	mov.w	r1, #0
 8033a28:	0159      	lsls	r1, r3, #5
 8033a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8033a2e:	0150      	lsls	r0, r2, #5
 8033a30:	4602      	mov	r2, r0
 8033a32:	460b      	mov	r3, r1
 8033a34:	4641      	mov	r1, r8
 8033a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8033a3a:	4649      	mov	r1, r9
 8033a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8033a40:	f04f 0200 	mov.w	r2, #0
 8033a44:	f04f 0300 	mov.w	r3, #0
 8033a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8033a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8033a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8033a54:	ebb2 040a 	subs.w	r4, r2, sl
 8033a58:	eb63 050b 	sbc.w	r5, r3, fp
 8033a5c:	f04f 0200 	mov.w	r2, #0
 8033a60:	f04f 0300 	mov.w	r3, #0
 8033a64:	00eb      	lsls	r3, r5, #3
 8033a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8033a6a:	00e2      	lsls	r2, r4, #3
 8033a6c:	4614      	mov	r4, r2
 8033a6e:	461d      	mov	r5, r3
 8033a70:	4643      	mov	r3, r8
 8033a72:	18e3      	adds	r3, r4, r3
 8033a74:	603b      	str	r3, [r7, #0]
 8033a76:	464b      	mov	r3, r9
 8033a78:	eb45 0303 	adc.w	r3, r5, r3
 8033a7c:	607b      	str	r3, [r7, #4]
 8033a7e:	f04f 0200 	mov.w	r2, #0
 8033a82:	f04f 0300 	mov.w	r3, #0
 8033a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8033a8a:	4629      	mov	r1, r5
 8033a8c:	028b      	lsls	r3, r1, #10
 8033a8e:	4621      	mov	r1, r4
 8033a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8033a94:	4621      	mov	r1, r4
 8033a96:	028a      	lsls	r2, r1, #10
 8033a98:	4610      	mov	r0, r2
 8033a9a:	4619      	mov	r1, r3
 8033a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8033a9e:	2200      	movs	r2, #0
 8033aa0:	61bb      	str	r3, [r7, #24]
 8033aa2:	61fa      	str	r2, [r7, #28]
 8033aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8033aa8:	f7cd f8a6 	bl	8000bf8 <__aeabi_uldivmod>
 8033aac:	4602      	mov	r2, r0
 8033aae:	460b      	mov	r3, r1
 8033ab0:	4613      	mov	r3, r2
 8033ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8033ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8033ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8033ab6:	685b      	ldr	r3, [r3, #4]
 8033ab8:	0c1b      	lsrs	r3, r3, #16
 8033aba:	f003 0303 	and.w	r3, r3, #3
 8033abe:	3301      	adds	r3, #1
 8033ac0:	005b      	lsls	r3, r3, #1
 8033ac2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8033ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8033ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8033ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8033acc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8033ace:	e002      	b.n	8033ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8033ad0:	4b05      	ldr	r3, [pc, #20]	@ (8033ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8033ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8033ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8033ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8033ad8:	4618      	mov	r0, r3
 8033ada:	3750      	adds	r7, #80	@ 0x50
 8033adc:	46bd      	mov	sp, r7
 8033ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8033ae2:	bf00      	nop
 8033ae4:	40023800 	.word	0x40023800
 8033ae8:	00f42400 	.word	0x00f42400
 8033aec:	007a1200 	.word	0x007a1200

08033af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8033af0:	b480      	push	{r7}
 8033af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8033af4:	4b03      	ldr	r3, [pc, #12]	@ (8033b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8033af6:	681b      	ldr	r3, [r3, #0]
}
 8033af8:	4618      	mov	r0, r3
 8033afa:	46bd      	mov	sp, r7
 8033afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033b00:	4770      	bx	lr
 8033b02:	bf00      	nop
 8033b04:	20001bfc 	.word	0x20001bfc

08033b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8033b08:	b580      	push	{r7, lr}
 8033b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8033b0c:	f7ff fff0 	bl	8033af0 <HAL_RCC_GetHCLKFreq>
 8033b10:	4602      	mov	r2, r0
 8033b12:	4b05      	ldr	r3, [pc, #20]	@ (8033b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8033b14:	689b      	ldr	r3, [r3, #8]
 8033b16:	0a9b      	lsrs	r3, r3, #10
 8033b18:	f003 0307 	and.w	r3, r3, #7
 8033b1c:	4903      	ldr	r1, [pc, #12]	@ (8033b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8033b1e:	5ccb      	ldrb	r3, [r1, r3]
 8033b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8033b24:	4618      	mov	r0, r3
 8033b26:	bd80      	pop	{r7, pc}
 8033b28:	40023800 	.word	0x40023800
 8033b2c:	0803ce54 	.word	0x0803ce54

08033b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8033b30:	b580      	push	{r7, lr}
 8033b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8033b34:	f7ff ffdc 	bl	8033af0 <HAL_RCC_GetHCLKFreq>
 8033b38:	4602      	mov	r2, r0
 8033b3a:	4b05      	ldr	r3, [pc, #20]	@ (8033b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8033b3c:	689b      	ldr	r3, [r3, #8]
 8033b3e:	0b5b      	lsrs	r3, r3, #13
 8033b40:	f003 0307 	and.w	r3, r3, #7
 8033b44:	4903      	ldr	r1, [pc, #12]	@ (8033b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8033b46:	5ccb      	ldrb	r3, [r1, r3]
 8033b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8033b4c:	4618      	mov	r0, r3
 8033b4e:	bd80      	pop	{r7, pc}
 8033b50:	40023800 	.word	0x40023800
 8033b54:	0803ce54 	.word	0x0803ce54

08033b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8033b58:	b480      	push	{r7}
 8033b5a:	b083      	sub	sp, #12
 8033b5c:	af00      	add	r7, sp, #0
 8033b5e:	6078      	str	r0, [r7, #4]
 8033b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8033b62:	687b      	ldr	r3, [r7, #4]
 8033b64:	220f      	movs	r2, #15
 8033b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8033b68:	4b12      	ldr	r3, [pc, #72]	@ (8033bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8033b6a:	689b      	ldr	r3, [r3, #8]
 8033b6c:	f003 0203 	and.w	r2, r3, #3
 8033b70:	687b      	ldr	r3, [r7, #4]
 8033b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8033b74:	4b0f      	ldr	r3, [pc, #60]	@ (8033bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8033b76:	689b      	ldr	r3, [r3, #8]
 8033b78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8033b7c:	687b      	ldr	r3, [r7, #4]
 8033b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8033b80:	4b0c      	ldr	r3, [pc, #48]	@ (8033bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8033b82:	689b      	ldr	r3, [r3, #8]
 8033b84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8033b88:	687b      	ldr	r3, [r7, #4]
 8033b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8033b8c:	4b09      	ldr	r3, [pc, #36]	@ (8033bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8033b8e:	689b      	ldr	r3, [r3, #8]
 8033b90:	08db      	lsrs	r3, r3, #3
 8033b92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8033b96:	687b      	ldr	r3, [r7, #4]
 8033b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8033b9a:	4b07      	ldr	r3, [pc, #28]	@ (8033bb8 <HAL_RCC_GetClockConfig+0x60>)
 8033b9c:	681b      	ldr	r3, [r3, #0]
 8033b9e:	f003 020f 	and.w	r2, r3, #15
 8033ba2:	683b      	ldr	r3, [r7, #0]
 8033ba4:	601a      	str	r2, [r3, #0]
}
 8033ba6:	bf00      	nop
 8033ba8:	370c      	adds	r7, #12
 8033baa:	46bd      	mov	sp, r7
 8033bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033bb0:	4770      	bx	lr
 8033bb2:	bf00      	nop
 8033bb4:	40023800 	.word	0x40023800
 8033bb8:	40023c00 	.word	0x40023c00

08033bbc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8033bbc:	b580      	push	{r7, lr}
 8033bbe:	b082      	sub	sp, #8
 8033bc0:	af00      	add	r7, sp, #0
 8033bc2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8033bc4:	687b      	ldr	r3, [r7, #4]
 8033bc6:	2b00      	cmp	r3, #0
 8033bc8:	d101      	bne.n	8033bce <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8033bca:	2301      	movs	r3, #1
 8033bcc:	e01c      	b.n	8033c08 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8033bce:	687b      	ldr	r3, [r7, #4]
 8033bd0:	795b      	ldrb	r3, [r3, #5]
 8033bd2:	b2db      	uxtb	r3, r3
 8033bd4:	2b00      	cmp	r3, #0
 8033bd6:	d105      	bne.n	8033be4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8033bd8:	687b      	ldr	r3, [r7, #4]
 8033bda:	2200      	movs	r2, #0
 8033bdc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8033bde:	6878      	ldr	r0, [r7, #4]
 8033be0:	f7f7 fc1e 	bl	802b420 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8033be4:	687b      	ldr	r3, [r7, #4]
 8033be6:	2202      	movs	r2, #2
 8033be8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8033bea:	687b      	ldr	r3, [r7, #4]
 8033bec:	681b      	ldr	r3, [r3, #0]
 8033bee:	681a      	ldr	r2, [r3, #0]
 8033bf0:	687b      	ldr	r3, [r7, #4]
 8033bf2:	681b      	ldr	r3, [r3, #0]
 8033bf4:	f042 0204 	orr.w	r2, r2, #4
 8033bf8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8033bfa:	687b      	ldr	r3, [r7, #4]
 8033bfc:	2201      	movs	r2, #1
 8033bfe:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8033c00:	687b      	ldr	r3, [r7, #4]
 8033c02:	2200      	movs	r2, #0
 8033c04:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8033c06:	2300      	movs	r3, #0
}
 8033c08:	4618      	mov	r0, r3
 8033c0a:	3708      	adds	r7, #8
 8033c0c:	46bd      	mov	sp, r7
 8033c0e:	bd80      	pop	{r7, pc}

08033c10 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8033c10:	b580      	push	{r7, lr}
 8033c12:	b084      	sub	sp, #16
 8033c14:	af00      	add	r7, sp, #0
 8033c16:	6078      	str	r0, [r7, #4]
 8033c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8033c1a:	2300      	movs	r3, #0
 8033c1c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8033c1e:	687b      	ldr	r3, [r7, #4]
 8033c20:	791b      	ldrb	r3, [r3, #4]
 8033c22:	2b01      	cmp	r3, #1
 8033c24:	d101      	bne.n	8033c2a <HAL_RNG_GenerateRandomNumber+0x1a>
 8033c26:	2302      	movs	r3, #2
 8033c28:	e044      	b.n	8033cb4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8033c2a:	687b      	ldr	r3, [r7, #4]
 8033c2c:	2201      	movs	r2, #1
 8033c2e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8033c30:	687b      	ldr	r3, [r7, #4]
 8033c32:	795b      	ldrb	r3, [r3, #5]
 8033c34:	b2db      	uxtb	r3, r3
 8033c36:	2b01      	cmp	r3, #1
 8033c38:	d133      	bne.n	8033ca2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8033c3a:	687b      	ldr	r3, [r7, #4]
 8033c3c:	2202      	movs	r2, #2
 8033c3e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8033c40:	f7fe fc4c 	bl	80324dc <HAL_GetTick>
 8033c44:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8033c46:	e018      	b.n	8033c7a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8033c48:	f7fe fc48 	bl	80324dc <HAL_GetTick>
 8033c4c:	4602      	mov	r2, r0
 8033c4e:	68bb      	ldr	r3, [r7, #8]
 8033c50:	1ad3      	subs	r3, r2, r3
 8033c52:	2b02      	cmp	r3, #2
 8033c54:	d911      	bls.n	8033c7a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8033c56:	687b      	ldr	r3, [r7, #4]
 8033c58:	681b      	ldr	r3, [r3, #0]
 8033c5a:	685b      	ldr	r3, [r3, #4]
 8033c5c:	f003 0301 	and.w	r3, r3, #1
 8033c60:	2b01      	cmp	r3, #1
 8033c62:	d00a      	beq.n	8033c7a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8033c64:	687b      	ldr	r3, [r7, #4]
 8033c66:	2201      	movs	r2, #1
 8033c68:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8033c6a:	687b      	ldr	r3, [r7, #4]
 8033c6c:	2202      	movs	r2, #2
 8033c6e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8033c70:	687b      	ldr	r3, [r7, #4]
 8033c72:	2200      	movs	r2, #0
 8033c74:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8033c76:	2301      	movs	r3, #1
 8033c78:	e01c      	b.n	8033cb4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8033c7a:	687b      	ldr	r3, [r7, #4]
 8033c7c:	681b      	ldr	r3, [r3, #0]
 8033c7e:	685b      	ldr	r3, [r3, #4]
 8033c80:	f003 0301 	and.w	r3, r3, #1
 8033c84:	2b01      	cmp	r3, #1
 8033c86:	d1df      	bne.n	8033c48 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8033c88:	687b      	ldr	r3, [r7, #4]
 8033c8a:	681b      	ldr	r3, [r3, #0]
 8033c8c:	689a      	ldr	r2, [r3, #8]
 8033c8e:	687b      	ldr	r3, [r7, #4]
 8033c90:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8033c92:	687b      	ldr	r3, [r7, #4]
 8033c94:	68da      	ldr	r2, [r3, #12]
 8033c96:	683b      	ldr	r3, [r7, #0]
 8033c98:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8033c9a:	687b      	ldr	r3, [r7, #4]
 8033c9c:	2201      	movs	r2, #1
 8033c9e:	715a      	strb	r2, [r3, #5]
 8033ca0:	e004      	b.n	8033cac <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8033ca2:	687b      	ldr	r3, [r7, #4]
 8033ca4:	2204      	movs	r2, #4
 8033ca6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8033ca8:	2301      	movs	r3, #1
 8033caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8033cac:	687b      	ldr	r3, [r7, #4]
 8033cae:	2200      	movs	r2, #0
 8033cb0:	711a      	strb	r2, [r3, #4]

  return status;
 8033cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8033cb4:	4618      	mov	r0, r3
 8033cb6:	3710      	adds	r7, #16
 8033cb8:	46bd      	mov	sp, r7
 8033cba:	bd80      	pop	{r7, pc}

08033cbc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8033cbc:	b580      	push	{r7, lr}
 8033cbe:	b082      	sub	sp, #8
 8033cc0:	af00      	add	r7, sp, #0
 8033cc2:	6078      	str	r0, [r7, #4]
 8033cc4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8033cc6:	687b      	ldr	r3, [r7, #4]
 8033cc8:	2b00      	cmp	r3, #0
 8033cca:	d101      	bne.n	8033cd0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8033ccc:	2301      	movs	r3, #1
 8033cce:	e025      	b.n	8033d1c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8033cd0:	687b      	ldr	r3, [r7, #4]
 8033cd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8033cd6:	b2db      	uxtb	r3, r3
 8033cd8:	2b00      	cmp	r3, #0
 8033cda:	d106      	bne.n	8033cea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8033cdc:	687b      	ldr	r3, [r7, #4]
 8033cde:	2200      	movs	r2, #0
 8033ce0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8033ce4:	6878      	ldr	r0, [r7, #4]
 8033ce6:	f7f7 fd01 	bl	802b6ec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8033cea:	687b      	ldr	r3, [r7, #4]
 8033cec:	2202      	movs	r2, #2
 8033cee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8033cf2:	687b      	ldr	r3, [r7, #4]
 8033cf4:	681a      	ldr	r2, [r3, #0]
 8033cf6:	687b      	ldr	r3, [r7, #4]
 8033cf8:	3304      	adds	r3, #4
 8033cfa:	4619      	mov	r1, r3
 8033cfc:	4610      	mov	r0, r2
 8033cfe:	f001 f979 	bl	8034ff4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8033d02:	687b      	ldr	r3, [r7, #4]
 8033d04:	6818      	ldr	r0, [r3, #0]
 8033d06:	687b      	ldr	r3, [r7, #4]
 8033d08:	685b      	ldr	r3, [r3, #4]
 8033d0a:	461a      	mov	r2, r3
 8033d0c:	6839      	ldr	r1, [r7, #0]
 8033d0e:	f001 f9ce 	bl	80350ae <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8033d12:	687b      	ldr	r3, [r7, #4]
 8033d14:	2201      	movs	r2, #1
 8033d16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8033d1a:	2300      	movs	r3, #0
}
 8033d1c:	4618      	mov	r0, r3
 8033d1e:	3708      	adds	r7, #8
 8033d20:	46bd      	mov	sp, r7
 8033d22:	bd80      	pop	{r7, pc}

08033d24 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8033d24:	b580      	push	{r7, lr}
 8033d26:	b086      	sub	sp, #24
 8033d28:	af00      	add	r7, sp, #0
 8033d2a:	60f8      	str	r0, [r7, #12]
 8033d2c:	60b9      	str	r1, [r7, #8]
 8033d2e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8033d30:	68fb      	ldr	r3, [r7, #12]
 8033d32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8033d36:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8033d38:	7dfb      	ldrb	r3, [r7, #23]
 8033d3a:	2b02      	cmp	r3, #2
 8033d3c:	d101      	bne.n	8033d42 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8033d3e:	2302      	movs	r3, #2
 8033d40:	e021      	b.n	8033d86 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8033d42:	7dfb      	ldrb	r3, [r7, #23]
 8033d44:	2b01      	cmp	r3, #1
 8033d46:	d002      	beq.n	8033d4e <HAL_SDRAM_SendCommand+0x2a>
 8033d48:	7dfb      	ldrb	r3, [r7, #23]
 8033d4a:	2b05      	cmp	r3, #5
 8033d4c:	d118      	bne.n	8033d80 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8033d4e:	68fb      	ldr	r3, [r7, #12]
 8033d50:	2202      	movs	r2, #2
 8033d52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8033d56:	68fb      	ldr	r3, [r7, #12]
 8033d58:	681b      	ldr	r3, [r3, #0]
 8033d5a:	687a      	ldr	r2, [r7, #4]
 8033d5c:	68b9      	ldr	r1, [r7, #8]
 8033d5e:	4618      	mov	r0, r3
 8033d60:	f001 fa0e 	bl	8035180 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8033d64:	68bb      	ldr	r3, [r7, #8]
 8033d66:	681b      	ldr	r3, [r3, #0]
 8033d68:	2b02      	cmp	r3, #2
 8033d6a:	d104      	bne.n	8033d76 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8033d6c:	68fb      	ldr	r3, [r7, #12]
 8033d6e:	2205      	movs	r2, #5
 8033d70:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8033d74:	e006      	b.n	8033d84 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8033d76:	68fb      	ldr	r3, [r7, #12]
 8033d78:	2201      	movs	r2, #1
 8033d7a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8033d7e:	e001      	b.n	8033d84 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8033d80:	2301      	movs	r3, #1
 8033d82:	e000      	b.n	8033d86 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8033d84:	2300      	movs	r3, #0
}
 8033d86:	4618      	mov	r0, r3
 8033d88:	3718      	adds	r7, #24
 8033d8a:	46bd      	mov	sp, r7
 8033d8c:	bd80      	pop	{r7, pc}

08033d8e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8033d8e:	b580      	push	{r7, lr}
 8033d90:	b082      	sub	sp, #8
 8033d92:	af00      	add	r7, sp, #0
 8033d94:	6078      	str	r0, [r7, #4]
 8033d96:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8033d98:	687b      	ldr	r3, [r7, #4]
 8033d9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8033d9e:	b2db      	uxtb	r3, r3
 8033da0:	2b02      	cmp	r3, #2
 8033da2:	d101      	bne.n	8033da8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8033da4:	2302      	movs	r3, #2
 8033da6:	e016      	b.n	8033dd6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8033da8:	687b      	ldr	r3, [r7, #4]
 8033daa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8033dae:	b2db      	uxtb	r3, r3
 8033db0:	2b01      	cmp	r3, #1
 8033db2:	d10f      	bne.n	8033dd4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8033db4:	687b      	ldr	r3, [r7, #4]
 8033db6:	2202      	movs	r2, #2
 8033db8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8033dbc:	687b      	ldr	r3, [r7, #4]
 8033dbe:	681b      	ldr	r3, [r3, #0]
 8033dc0:	6839      	ldr	r1, [r7, #0]
 8033dc2:	4618      	mov	r0, r3
 8033dc4:	f001 fa19 	bl	80351fa <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8033dc8:	687b      	ldr	r3, [r7, #4]
 8033dca:	2201      	movs	r2, #1
 8033dcc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8033dd0:	2300      	movs	r3, #0
 8033dd2:	e000      	b.n	8033dd6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8033dd4:	2301      	movs	r3, #1
}
 8033dd6:	4618      	mov	r0, r3
 8033dd8:	3708      	adds	r7, #8
 8033dda:	46bd      	mov	sp, r7
 8033ddc:	bd80      	pop	{r7, pc}

08033dde <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8033dde:	b580      	push	{r7, lr}
 8033de0:	b082      	sub	sp, #8
 8033de2:	af00      	add	r7, sp, #0
 8033de4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8033de6:	687b      	ldr	r3, [r7, #4]
 8033de8:	2b00      	cmp	r3, #0
 8033dea:	d101      	bne.n	8033df0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8033dec:	2301      	movs	r3, #1
 8033dee:	e07b      	b.n	8033ee8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8033df0:	687b      	ldr	r3, [r7, #4]
 8033df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8033df4:	2b00      	cmp	r3, #0
 8033df6:	d108      	bne.n	8033e0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033df8:	687b      	ldr	r3, [r7, #4]
 8033dfa:	685b      	ldr	r3, [r3, #4]
 8033dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8033e00:	d009      	beq.n	8033e16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8033e02:	687b      	ldr	r3, [r7, #4]
 8033e04:	2200      	movs	r2, #0
 8033e06:	61da      	str	r2, [r3, #28]
 8033e08:	e005      	b.n	8033e16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8033e0a:	687b      	ldr	r3, [r7, #4]
 8033e0c:	2200      	movs	r2, #0
 8033e0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8033e10:	687b      	ldr	r3, [r7, #4]
 8033e12:	2200      	movs	r2, #0
 8033e14:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8033e16:	687b      	ldr	r3, [r7, #4]
 8033e18:	2200      	movs	r2, #0
 8033e1a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8033e1c:	687b      	ldr	r3, [r7, #4]
 8033e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8033e22:	b2db      	uxtb	r3, r3
 8033e24:	2b00      	cmp	r3, #0
 8033e26:	d106      	bne.n	8033e36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8033e28:	687b      	ldr	r3, [r7, #4]
 8033e2a:	2200      	movs	r2, #0
 8033e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8033e30:	6878      	ldr	r0, [r7, #4]
 8033e32:	f7f7 fb17 	bl	802b464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8033e36:	687b      	ldr	r3, [r7, #4]
 8033e38:	2202      	movs	r2, #2
 8033e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8033e3e:	687b      	ldr	r3, [r7, #4]
 8033e40:	681b      	ldr	r3, [r3, #0]
 8033e42:	681a      	ldr	r2, [r3, #0]
 8033e44:	687b      	ldr	r3, [r7, #4]
 8033e46:	681b      	ldr	r3, [r3, #0]
 8033e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8033e4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8033e4e:	687b      	ldr	r3, [r7, #4]
 8033e50:	685b      	ldr	r3, [r3, #4]
 8033e52:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8033e56:	687b      	ldr	r3, [r7, #4]
 8033e58:	689b      	ldr	r3, [r3, #8]
 8033e5a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8033e5e:	431a      	orrs	r2, r3
 8033e60:	687b      	ldr	r3, [r7, #4]
 8033e62:	68db      	ldr	r3, [r3, #12]
 8033e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8033e68:	431a      	orrs	r2, r3
 8033e6a:	687b      	ldr	r3, [r7, #4]
 8033e6c:	691b      	ldr	r3, [r3, #16]
 8033e6e:	f003 0302 	and.w	r3, r3, #2
 8033e72:	431a      	orrs	r2, r3
 8033e74:	687b      	ldr	r3, [r7, #4]
 8033e76:	695b      	ldr	r3, [r3, #20]
 8033e78:	f003 0301 	and.w	r3, r3, #1
 8033e7c:	431a      	orrs	r2, r3
 8033e7e:	687b      	ldr	r3, [r7, #4]
 8033e80:	699b      	ldr	r3, [r3, #24]
 8033e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8033e86:	431a      	orrs	r2, r3
 8033e88:	687b      	ldr	r3, [r7, #4]
 8033e8a:	69db      	ldr	r3, [r3, #28]
 8033e8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8033e90:	431a      	orrs	r2, r3
 8033e92:	687b      	ldr	r3, [r7, #4]
 8033e94:	6a1b      	ldr	r3, [r3, #32]
 8033e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8033e9a:	ea42 0103 	orr.w	r1, r2, r3
 8033e9e:	687b      	ldr	r3, [r7, #4]
 8033ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8033ea2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8033ea6:	687b      	ldr	r3, [r7, #4]
 8033ea8:	681b      	ldr	r3, [r3, #0]
 8033eaa:	430a      	orrs	r2, r1
 8033eac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8033eae:	687b      	ldr	r3, [r7, #4]
 8033eb0:	699b      	ldr	r3, [r3, #24]
 8033eb2:	0c1b      	lsrs	r3, r3, #16
 8033eb4:	f003 0104 	and.w	r1, r3, #4
 8033eb8:	687b      	ldr	r3, [r7, #4]
 8033eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8033ebc:	f003 0210 	and.w	r2, r3, #16
 8033ec0:	687b      	ldr	r3, [r7, #4]
 8033ec2:	681b      	ldr	r3, [r3, #0]
 8033ec4:	430a      	orrs	r2, r1
 8033ec6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8033ec8:	687b      	ldr	r3, [r7, #4]
 8033eca:	681b      	ldr	r3, [r3, #0]
 8033ecc:	69da      	ldr	r2, [r3, #28]
 8033ece:	687b      	ldr	r3, [r7, #4]
 8033ed0:	681b      	ldr	r3, [r3, #0]
 8033ed2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8033ed6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8033ed8:	687b      	ldr	r3, [r7, #4]
 8033eda:	2200      	movs	r2, #0
 8033edc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8033ede:	687b      	ldr	r3, [r7, #4]
 8033ee0:	2201      	movs	r2, #1
 8033ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8033ee6:	2300      	movs	r3, #0
}
 8033ee8:	4618      	mov	r0, r3
 8033eea:	3708      	adds	r7, #8
 8033eec:	46bd      	mov	sp, r7
 8033eee:	bd80      	pop	{r7, pc}

08033ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8033ef0:	b580      	push	{r7, lr}
 8033ef2:	b082      	sub	sp, #8
 8033ef4:	af00      	add	r7, sp, #0
 8033ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8033ef8:	687b      	ldr	r3, [r7, #4]
 8033efa:	2b00      	cmp	r3, #0
 8033efc:	d101      	bne.n	8033f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8033efe:	2301      	movs	r3, #1
 8033f00:	e041      	b.n	8033f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8033f02:	687b      	ldr	r3, [r7, #4]
 8033f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8033f08:	b2db      	uxtb	r3, r3
 8033f0a:	2b00      	cmp	r3, #0
 8033f0c:	d106      	bne.n	8033f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8033f0e:	687b      	ldr	r3, [r7, #4]
 8033f10:	2200      	movs	r2, #0
 8033f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8033f16:	6878      	ldr	r0, [r7, #4]
 8033f18:	f7f7 faec 	bl	802b4f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8033f1c:	687b      	ldr	r3, [r7, #4]
 8033f1e:	2202      	movs	r2, #2
 8033f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8033f24:	687b      	ldr	r3, [r7, #4]
 8033f26:	681a      	ldr	r2, [r3, #0]
 8033f28:	687b      	ldr	r3, [r7, #4]
 8033f2a:	3304      	adds	r3, #4
 8033f2c:	4619      	mov	r1, r3
 8033f2e:	4610      	mov	r0, r2
 8033f30:	f000 fa7e 	bl	8034430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8033f34:	687b      	ldr	r3, [r7, #4]
 8033f36:	2201      	movs	r2, #1
 8033f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8033f3c:	687b      	ldr	r3, [r7, #4]
 8033f3e:	2201      	movs	r2, #1
 8033f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8033f44:	687b      	ldr	r3, [r7, #4]
 8033f46:	2201      	movs	r2, #1
 8033f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8033f4c:	687b      	ldr	r3, [r7, #4]
 8033f4e:	2201      	movs	r2, #1
 8033f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8033f54:	687b      	ldr	r3, [r7, #4]
 8033f56:	2201      	movs	r2, #1
 8033f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8033f5c:	687b      	ldr	r3, [r7, #4]
 8033f5e:	2201      	movs	r2, #1
 8033f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8033f64:	687b      	ldr	r3, [r7, #4]
 8033f66:	2201      	movs	r2, #1
 8033f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8033f6c:	687b      	ldr	r3, [r7, #4]
 8033f6e:	2201      	movs	r2, #1
 8033f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8033f74:	687b      	ldr	r3, [r7, #4]
 8033f76:	2201      	movs	r2, #1
 8033f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8033f7c:	687b      	ldr	r3, [r7, #4]
 8033f7e:	2201      	movs	r2, #1
 8033f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8033f84:	2300      	movs	r3, #0
}
 8033f86:	4618      	mov	r0, r3
 8033f88:	3708      	adds	r7, #8
 8033f8a:	46bd      	mov	sp, r7
 8033f8c:	bd80      	pop	{r7, pc}
	...

08033f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8033f90:	b480      	push	{r7}
 8033f92:	b085      	sub	sp, #20
 8033f94:	af00      	add	r7, sp, #0
 8033f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8033f98:	687b      	ldr	r3, [r7, #4]
 8033f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8033f9e:	b2db      	uxtb	r3, r3
 8033fa0:	2b01      	cmp	r3, #1
 8033fa2:	d001      	beq.n	8033fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8033fa4:	2301      	movs	r3, #1
 8033fa6:	e04e      	b.n	8034046 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8033fa8:	687b      	ldr	r3, [r7, #4]
 8033faa:	2202      	movs	r2, #2
 8033fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8033fb0:	687b      	ldr	r3, [r7, #4]
 8033fb2:	681b      	ldr	r3, [r3, #0]
 8033fb4:	68da      	ldr	r2, [r3, #12]
 8033fb6:	687b      	ldr	r3, [r7, #4]
 8033fb8:	681b      	ldr	r3, [r3, #0]
 8033fba:	f042 0201 	orr.w	r2, r2, #1
 8033fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8033fc0:	687b      	ldr	r3, [r7, #4]
 8033fc2:	681b      	ldr	r3, [r3, #0]
 8033fc4:	4a23      	ldr	r2, [pc, #140]	@ (8034054 <HAL_TIM_Base_Start_IT+0xc4>)
 8033fc6:	4293      	cmp	r3, r2
 8033fc8:	d022      	beq.n	8034010 <HAL_TIM_Base_Start_IT+0x80>
 8033fca:	687b      	ldr	r3, [r7, #4]
 8033fcc:	681b      	ldr	r3, [r3, #0]
 8033fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8033fd2:	d01d      	beq.n	8034010 <HAL_TIM_Base_Start_IT+0x80>
 8033fd4:	687b      	ldr	r3, [r7, #4]
 8033fd6:	681b      	ldr	r3, [r3, #0]
 8033fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8034058 <HAL_TIM_Base_Start_IT+0xc8>)
 8033fda:	4293      	cmp	r3, r2
 8033fdc:	d018      	beq.n	8034010 <HAL_TIM_Base_Start_IT+0x80>
 8033fde:	687b      	ldr	r3, [r7, #4]
 8033fe0:	681b      	ldr	r3, [r3, #0]
 8033fe2:	4a1e      	ldr	r2, [pc, #120]	@ (803405c <HAL_TIM_Base_Start_IT+0xcc>)
 8033fe4:	4293      	cmp	r3, r2
 8033fe6:	d013      	beq.n	8034010 <HAL_TIM_Base_Start_IT+0x80>
 8033fe8:	687b      	ldr	r3, [r7, #4]
 8033fea:	681b      	ldr	r3, [r3, #0]
 8033fec:	4a1c      	ldr	r2, [pc, #112]	@ (8034060 <HAL_TIM_Base_Start_IT+0xd0>)
 8033fee:	4293      	cmp	r3, r2
 8033ff0:	d00e      	beq.n	8034010 <HAL_TIM_Base_Start_IT+0x80>
 8033ff2:	687b      	ldr	r3, [r7, #4]
 8033ff4:	681b      	ldr	r3, [r3, #0]
 8033ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8034064 <HAL_TIM_Base_Start_IT+0xd4>)
 8033ff8:	4293      	cmp	r3, r2
 8033ffa:	d009      	beq.n	8034010 <HAL_TIM_Base_Start_IT+0x80>
 8033ffc:	687b      	ldr	r3, [r7, #4]
 8033ffe:	681b      	ldr	r3, [r3, #0]
 8034000:	4a19      	ldr	r2, [pc, #100]	@ (8034068 <HAL_TIM_Base_Start_IT+0xd8>)
 8034002:	4293      	cmp	r3, r2
 8034004:	d004      	beq.n	8034010 <HAL_TIM_Base_Start_IT+0x80>
 8034006:	687b      	ldr	r3, [r7, #4]
 8034008:	681b      	ldr	r3, [r3, #0]
 803400a:	4a18      	ldr	r2, [pc, #96]	@ (803406c <HAL_TIM_Base_Start_IT+0xdc>)
 803400c:	4293      	cmp	r3, r2
 803400e:	d111      	bne.n	8034034 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8034010:	687b      	ldr	r3, [r7, #4]
 8034012:	681b      	ldr	r3, [r3, #0]
 8034014:	689b      	ldr	r3, [r3, #8]
 8034016:	f003 0307 	and.w	r3, r3, #7
 803401a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803401c:	68fb      	ldr	r3, [r7, #12]
 803401e:	2b06      	cmp	r3, #6
 8034020:	d010      	beq.n	8034044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8034022:	687b      	ldr	r3, [r7, #4]
 8034024:	681b      	ldr	r3, [r3, #0]
 8034026:	681a      	ldr	r2, [r3, #0]
 8034028:	687b      	ldr	r3, [r7, #4]
 803402a:	681b      	ldr	r3, [r3, #0]
 803402c:	f042 0201 	orr.w	r2, r2, #1
 8034030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034032:	e007      	b.n	8034044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8034034:	687b      	ldr	r3, [r7, #4]
 8034036:	681b      	ldr	r3, [r3, #0]
 8034038:	681a      	ldr	r2, [r3, #0]
 803403a:	687b      	ldr	r3, [r7, #4]
 803403c:	681b      	ldr	r3, [r3, #0]
 803403e:	f042 0201 	orr.w	r2, r2, #1
 8034042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8034044:	2300      	movs	r3, #0
}
 8034046:	4618      	mov	r0, r3
 8034048:	3714      	adds	r7, #20
 803404a:	46bd      	mov	sp, r7
 803404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034050:	4770      	bx	lr
 8034052:	bf00      	nop
 8034054:	40010000 	.word	0x40010000
 8034058:	40000400 	.word	0x40000400
 803405c:	40000800 	.word	0x40000800
 8034060:	40000c00 	.word	0x40000c00
 8034064:	40010400 	.word	0x40010400
 8034068:	40014000 	.word	0x40014000
 803406c:	40001800 	.word	0x40001800

08034070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8034070:	b580      	push	{r7, lr}
 8034072:	b084      	sub	sp, #16
 8034074:	af00      	add	r7, sp, #0
 8034076:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8034078:	687b      	ldr	r3, [r7, #4]
 803407a:	681b      	ldr	r3, [r3, #0]
 803407c:	68db      	ldr	r3, [r3, #12]
 803407e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8034080:	687b      	ldr	r3, [r7, #4]
 8034082:	681b      	ldr	r3, [r3, #0]
 8034084:	691b      	ldr	r3, [r3, #16]
 8034086:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8034088:	68bb      	ldr	r3, [r7, #8]
 803408a:	f003 0302 	and.w	r3, r3, #2
 803408e:	2b00      	cmp	r3, #0
 8034090:	d020      	beq.n	80340d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8034092:	68fb      	ldr	r3, [r7, #12]
 8034094:	f003 0302 	and.w	r3, r3, #2
 8034098:	2b00      	cmp	r3, #0
 803409a:	d01b      	beq.n	80340d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 803409c:	687b      	ldr	r3, [r7, #4]
 803409e:	681b      	ldr	r3, [r3, #0]
 80340a0:	f06f 0202 	mvn.w	r2, #2
 80340a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80340a6:	687b      	ldr	r3, [r7, #4]
 80340a8:	2201      	movs	r2, #1
 80340aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80340ac:	687b      	ldr	r3, [r7, #4]
 80340ae:	681b      	ldr	r3, [r3, #0]
 80340b0:	699b      	ldr	r3, [r3, #24]
 80340b2:	f003 0303 	and.w	r3, r3, #3
 80340b6:	2b00      	cmp	r3, #0
 80340b8:	d003      	beq.n	80340c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80340ba:	6878      	ldr	r0, [r7, #4]
 80340bc:	f000 f999 	bl	80343f2 <HAL_TIM_IC_CaptureCallback>
 80340c0:	e005      	b.n	80340ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80340c2:	6878      	ldr	r0, [r7, #4]
 80340c4:	f000 f98b 	bl	80343de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80340c8:	6878      	ldr	r0, [r7, #4]
 80340ca:	f000 f99c 	bl	8034406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80340ce:	687b      	ldr	r3, [r7, #4]
 80340d0:	2200      	movs	r2, #0
 80340d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80340d4:	68bb      	ldr	r3, [r7, #8]
 80340d6:	f003 0304 	and.w	r3, r3, #4
 80340da:	2b00      	cmp	r3, #0
 80340dc:	d020      	beq.n	8034120 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80340de:	68fb      	ldr	r3, [r7, #12]
 80340e0:	f003 0304 	and.w	r3, r3, #4
 80340e4:	2b00      	cmp	r3, #0
 80340e6:	d01b      	beq.n	8034120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80340e8:	687b      	ldr	r3, [r7, #4]
 80340ea:	681b      	ldr	r3, [r3, #0]
 80340ec:	f06f 0204 	mvn.w	r2, #4
 80340f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80340f2:	687b      	ldr	r3, [r7, #4]
 80340f4:	2202      	movs	r2, #2
 80340f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80340f8:	687b      	ldr	r3, [r7, #4]
 80340fa:	681b      	ldr	r3, [r3, #0]
 80340fc:	699b      	ldr	r3, [r3, #24]
 80340fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8034102:	2b00      	cmp	r3, #0
 8034104:	d003      	beq.n	803410e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8034106:	6878      	ldr	r0, [r7, #4]
 8034108:	f000 f973 	bl	80343f2 <HAL_TIM_IC_CaptureCallback>
 803410c:	e005      	b.n	803411a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 803410e:	6878      	ldr	r0, [r7, #4]
 8034110:	f000 f965 	bl	80343de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034114:	6878      	ldr	r0, [r7, #4]
 8034116:	f000 f976 	bl	8034406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803411a:	687b      	ldr	r3, [r7, #4]
 803411c:	2200      	movs	r2, #0
 803411e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8034120:	68bb      	ldr	r3, [r7, #8]
 8034122:	f003 0308 	and.w	r3, r3, #8
 8034126:	2b00      	cmp	r3, #0
 8034128:	d020      	beq.n	803416c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 803412a:	68fb      	ldr	r3, [r7, #12]
 803412c:	f003 0308 	and.w	r3, r3, #8
 8034130:	2b00      	cmp	r3, #0
 8034132:	d01b      	beq.n	803416c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8034134:	687b      	ldr	r3, [r7, #4]
 8034136:	681b      	ldr	r3, [r3, #0]
 8034138:	f06f 0208 	mvn.w	r2, #8
 803413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 803413e:	687b      	ldr	r3, [r7, #4]
 8034140:	2204      	movs	r2, #4
 8034142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8034144:	687b      	ldr	r3, [r7, #4]
 8034146:	681b      	ldr	r3, [r3, #0]
 8034148:	69db      	ldr	r3, [r3, #28]
 803414a:	f003 0303 	and.w	r3, r3, #3
 803414e:	2b00      	cmp	r3, #0
 8034150:	d003      	beq.n	803415a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8034152:	6878      	ldr	r0, [r7, #4]
 8034154:	f000 f94d 	bl	80343f2 <HAL_TIM_IC_CaptureCallback>
 8034158:	e005      	b.n	8034166 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 803415a:	6878      	ldr	r0, [r7, #4]
 803415c:	f000 f93f 	bl	80343de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034160:	6878      	ldr	r0, [r7, #4]
 8034162:	f000 f950 	bl	8034406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8034166:	687b      	ldr	r3, [r7, #4]
 8034168:	2200      	movs	r2, #0
 803416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 803416c:	68bb      	ldr	r3, [r7, #8]
 803416e:	f003 0310 	and.w	r3, r3, #16
 8034172:	2b00      	cmp	r3, #0
 8034174:	d020      	beq.n	80341b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8034176:	68fb      	ldr	r3, [r7, #12]
 8034178:	f003 0310 	and.w	r3, r3, #16
 803417c:	2b00      	cmp	r3, #0
 803417e:	d01b      	beq.n	80341b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8034180:	687b      	ldr	r3, [r7, #4]
 8034182:	681b      	ldr	r3, [r3, #0]
 8034184:	f06f 0210 	mvn.w	r2, #16
 8034188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 803418a:	687b      	ldr	r3, [r7, #4]
 803418c:	2208      	movs	r2, #8
 803418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8034190:	687b      	ldr	r3, [r7, #4]
 8034192:	681b      	ldr	r3, [r3, #0]
 8034194:	69db      	ldr	r3, [r3, #28]
 8034196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 803419a:	2b00      	cmp	r3, #0
 803419c:	d003      	beq.n	80341a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803419e:	6878      	ldr	r0, [r7, #4]
 80341a0:	f000 f927 	bl	80343f2 <HAL_TIM_IC_CaptureCallback>
 80341a4:	e005      	b.n	80341b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80341a6:	6878      	ldr	r0, [r7, #4]
 80341a8:	f000 f919 	bl	80343de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80341ac:	6878      	ldr	r0, [r7, #4]
 80341ae:	f000 f92a 	bl	8034406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80341b2:	687b      	ldr	r3, [r7, #4]
 80341b4:	2200      	movs	r2, #0
 80341b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80341b8:	68bb      	ldr	r3, [r7, #8]
 80341ba:	f003 0301 	and.w	r3, r3, #1
 80341be:	2b00      	cmp	r3, #0
 80341c0:	d00c      	beq.n	80341dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80341c2:	68fb      	ldr	r3, [r7, #12]
 80341c4:	f003 0301 	and.w	r3, r3, #1
 80341c8:	2b00      	cmp	r3, #0
 80341ca:	d007      	beq.n	80341dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80341cc:	687b      	ldr	r3, [r7, #4]
 80341ce:	681b      	ldr	r3, [r3, #0]
 80341d0:	f06f 0201 	mvn.w	r2, #1
 80341d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80341d6:	6878      	ldr	r0, [r7, #4]
 80341d8:	f7ee f936 	bl	8022448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80341dc:	68bb      	ldr	r3, [r7, #8]
 80341de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80341e2:	2b00      	cmp	r3, #0
 80341e4:	d00c      	beq.n	8034200 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80341e6:	68fb      	ldr	r3, [r7, #12]
 80341e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80341ec:	2b00      	cmp	r3, #0
 80341ee:	d007      	beq.n	8034200 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80341f0:	687b      	ldr	r3, [r7, #4]
 80341f2:	681b      	ldr	r3, [r3, #0]
 80341f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80341f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80341fa:	6878      	ldr	r0, [r7, #4]
 80341fc:	f000 fae4 	bl	80347c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8034200:	68bb      	ldr	r3, [r7, #8]
 8034202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8034206:	2b00      	cmp	r3, #0
 8034208:	d00c      	beq.n	8034224 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 803420a:	68fb      	ldr	r3, [r7, #12]
 803420c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8034210:	2b00      	cmp	r3, #0
 8034212:	d007      	beq.n	8034224 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8034214:	687b      	ldr	r3, [r7, #4]
 8034216:	681b      	ldr	r3, [r3, #0]
 8034218:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 803421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 803421e:	6878      	ldr	r0, [r7, #4]
 8034220:	f000 f8fb 	bl	803441a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8034224:	68bb      	ldr	r3, [r7, #8]
 8034226:	f003 0320 	and.w	r3, r3, #32
 803422a:	2b00      	cmp	r3, #0
 803422c:	d00c      	beq.n	8034248 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 803422e:	68fb      	ldr	r3, [r7, #12]
 8034230:	f003 0320 	and.w	r3, r3, #32
 8034234:	2b00      	cmp	r3, #0
 8034236:	d007      	beq.n	8034248 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8034238:	687b      	ldr	r3, [r7, #4]
 803423a:	681b      	ldr	r3, [r3, #0]
 803423c:	f06f 0220 	mvn.w	r2, #32
 8034240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8034242:	6878      	ldr	r0, [r7, #4]
 8034244:	f000 fab6 	bl	80347b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8034248:	bf00      	nop
 803424a:	3710      	adds	r7, #16
 803424c:	46bd      	mov	sp, r7
 803424e:	bd80      	pop	{r7, pc}

08034250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8034250:	b580      	push	{r7, lr}
 8034252:	b084      	sub	sp, #16
 8034254:	af00      	add	r7, sp, #0
 8034256:	6078      	str	r0, [r7, #4]
 8034258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 803425a:	2300      	movs	r3, #0
 803425c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 803425e:	687b      	ldr	r3, [r7, #4]
 8034260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8034264:	2b01      	cmp	r3, #1
 8034266:	d101      	bne.n	803426c <HAL_TIM_ConfigClockSource+0x1c>
 8034268:	2302      	movs	r3, #2
 803426a:	e0b4      	b.n	80343d6 <HAL_TIM_ConfigClockSource+0x186>
 803426c:	687b      	ldr	r3, [r7, #4]
 803426e:	2201      	movs	r2, #1
 8034270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8034274:	687b      	ldr	r3, [r7, #4]
 8034276:	2202      	movs	r2, #2
 8034278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 803427c:	687b      	ldr	r3, [r7, #4]
 803427e:	681b      	ldr	r3, [r3, #0]
 8034280:	689b      	ldr	r3, [r3, #8]
 8034282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8034284:	68bb      	ldr	r3, [r7, #8]
 8034286:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 803428a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 803428c:	68bb      	ldr	r3, [r7, #8]
 803428e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8034292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8034294:	687b      	ldr	r3, [r7, #4]
 8034296:	681b      	ldr	r3, [r3, #0]
 8034298:	68ba      	ldr	r2, [r7, #8]
 803429a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 803429c:	683b      	ldr	r3, [r7, #0]
 803429e:	681b      	ldr	r3, [r3, #0]
 80342a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80342a4:	d03e      	beq.n	8034324 <HAL_TIM_ConfigClockSource+0xd4>
 80342a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80342aa:	f200 8087 	bhi.w	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80342b2:	f000 8086 	beq.w	80343c2 <HAL_TIM_ConfigClockSource+0x172>
 80342b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80342ba:	d87f      	bhi.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342bc:	2b70      	cmp	r3, #112	@ 0x70
 80342be:	d01a      	beq.n	80342f6 <HAL_TIM_ConfigClockSource+0xa6>
 80342c0:	2b70      	cmp	r3, #112	@ 0x70
 80342c2:	d87b      	bhi.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342c4:	2b60      	cmp	r3, #96	@ 0x60
 80342c6:	d050      	beq.n	803436a <HAL_TIM_ConfigClockSource+0x11a>
 80342c8:	2b60      	cmp	r3, #96	@ 0x60
 80342ca:	d877      	bhi.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342cc:	2b50      	cmp	r3, #80	@ 0x50
 80342ce:	d03c      	beq.n	803434a <HAL_TIM_ConfigClockSource+0xfa>
 80342d0:	2b50      	cmp	r3, #80	@ 0x50
 80342d2:	d873      	bhi.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342d4:	2b40      	cmp	r3, #64	@ 0x40
 80342d6:	d058      	beq.n	803438a <HAL_TIM_ConfigClockSource+0x13a>
 80342d8:	2b40      	cmp	r3, #64	@ 0x40
 80342da:	d86f      	bhi.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342dc:	2b30      	cmp	r3, #48	@ 0x30
 80342de:	d064      	beq.n	80343aa <HAL_TIM_ConfigClockSource+0x15a>
 80342e0:	2b30      	cmp	r3, #48	@ 0x30
 80342e2:	d86b      	bhi.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342e4:	2b20      	cmp	r3, #32
 80342e6:	d060      	beq.n	80343aa <HAL_TIM_ConfigClockSource+0x15a>
 80342e8:	2b20      	cmp	r3, #32
 80342ea:	d867      	bhi.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
 80342ec:	2b00      	cmp	r3, #0
 80342ee:	d05c      	beq.n	80343aa <HAL_TIM_ConfigClockSource+0x15a>
 80342f0:	2b10      	cmp	r3, #16
 80342f2:	d05a      	beq.n	80343aa <HAL_TIM_ConfigClockSource+0x15a>
 80342f4:	e062      	b.n	80343bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80342f6:	687b      	ldr	r3, [r7, #4]
 80342f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80342fa:	683b      	ldr	r3, [r7, #0]
 80342fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80342fe:	683b      	ldr	r3, [r7, #0]
 8034300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8034302:	683b      	ldr	r3, [r7, #0]
 8034304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8034306:	f000 f9b9 	bl	803467c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 803430a:	687b      	ldr	r3, [r7, #4]
 803430c:	681b      	ldr	r3, [r3, #0]
 803430e:	689b      	ldr	r3, [r3, #8]
 8034310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8034312:	68bb      	ldr	r3, [r7, #8]
 8034314:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8034318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 803431a:	687b      	ldr	r3, [r7, #4]
 803431c:	681b      	ldr	r3, [r3, #0]
 803431e:	68ba      	ldr	r2, [r7, #8]
 8034320:	609a      	str	r2, [r3, #8]
      break;
 8034322:	e04f      	b.n	80343c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8034324:	687b      	ldr	r3, [r7, #4]
 8034326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8034328:	683b      	ldr	r3, [r7, #0]
 803432a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 803432c:	683b      	ldr	r3, [r7, #0]
 803432e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8034330:	683b      	ldr	r3, [r7, #0]
 8034332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8034334:	f000 f9a2 	bl	803467c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8034338:	687b      	ldr	r3, [r7, #4]
 803433a:	681b      	ldr	r3, [r3, #0]
 803433c:	689a      	ldr	r2, [r3, #8]
 803433e:	687b      	ldr	r3, [r7, #4]
 8034340:	681b      	ldr	r3, [r3, #0]
 8034342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8034346:	609a      	str	r2, [r3, #8]
      break;
 8034348:	e03c      	b.n	80343c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803434a:	687b      	ldr	r3, [r7, #4]
 803434c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 803434e:	683b      	ldr	r3, [r7, #0]
 8034350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8034352:	683b      	ldr	r3, [r7, #0]
 8034354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8034356:	461a      	mov	r2, r3
 8034358:	f000 f916 	bl	8034588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 803435c:	687b      	ldr	r3, [r7, #4]
 803435e:	681b      	ldr	r3, [r3, #0]
 8034360:	2150      	movs	r1, #80	@ 0x50
 8034362:	4618      	mov	r0, r3
 8034364:	f000 f96f 	bl	8034646 <TIM_ITRx_SetConfig>
      break;
 8034368:	e02c      	b.n	80343c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 803436a:	687b      	ldr	r3, [r7, #4]
 803436c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 803436e:	683b      	ldr	r3, [r7, #0]
 8034370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8034372:	683b      	ldr	r3, [r7, #0]
 8034374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8034376:	461a      	mov	r2, r3
 8034378:	f000 f935 	bl	80345e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 803437c:	687b      	ldr	r3, [r7, #4]
 803437e:	681b      	ldr	r3, [r3, #0]
 8034380:	2160      	movs	r1, #96	@ 0x60
 8034382:	4618      	mov	r0, r3
 8034384:	f000 f95f 	bl	8034646 <TIM_ITRx_SetConfig>
      break;
 8034388:	e01c      	b.n	80343c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803438a:	687b      	ldr	r3, [r7, #4]
 803438c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 803438e:	683b      	ldr	r3, [r7, #0]
 8034390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8034392:	683b      	ldr	r3, [r7, #0]
 8034394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8034396:	461a      	mov	r2, r3
 8034398:	f000 f8f6 	bl	8034588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 803439c:	687b      	ldr	r3, [r7, #4]
 803439e:	681b      	ldr	r3, [r3, #0]
 80343a0:	2140      	movs	r1, #64	@ 0x40
 80343a2:	4618      	mov	r0, r3
 80343a4:	f000 f94f 	bl	8034646 <TIM_ITRx_SetConfig>
      break;
 80343a8:	e00c      	b.n	80343c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80343aa:	687b      	ldr	r3, [r7, #4]
 80343ac:	681a      	ldr	r2, [r3, #0]
 80343ae:	683b      	ldr	r3, [r7, #0]
 80343b0:	681b      	ldr	r3, [r3, #0]
 80343b2:	4619      	mov	r1, r3
 80343b4:	4610      	mov	r0, r2
 80343b6:	f000 f946 	bl	8034646 <TIM_ITRx_SetConfig>
      break;
 80343ba:	e003      	b.n	80343c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80343bc:	2301      	movs	r3, #1
 80343be:	73fb      	strb	r3, [r7, #15]
      break;
 80343c0:	e000      	b.n	80343c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80343c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80343c4:	687b      	ldr	r3, [r7, #4]
 80343c6:	2201      	movs	r2, #1
 80343c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80343cc:	687b      	ldr	r3, [r7, #4]
 80343ce:	2200      	movs	r2, #0
 80343d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80343d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80343d6:	4618      	mov	r0, r3
 80343d8:	3710      	adds	r7, #16
 80343da:	46bd      	mov	sp, r7
 80343dc:	bd80      	pop	{r7, pc}

080343de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80343de:	b480      	push	{r7}
 80343e0:	b083      	sub	sp, #12
 80343e2:	af00      	add	r7, sp, #0
 80343e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80343e6:	bf00      	nop
 80343e8:	370c      	adds	r7, #12
 80343ea:	46bd      	mov	sp, r7
 80343ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80343f0:	4770      	bx	lr

080343f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80343f2:	b480      	push	{r7}
 80343f4:	b083      	sub	sp, #12
 80343f6:	af00      	add	r7, sp, #0
 80343f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80343fa:	bf00      	nop
 80343fc:	370c      	adds	r7, #12
 80343fe:	46bd      	mov	sp, r7
 8034400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034404:	4770      	bx	lr

08034406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8034406:	b480      	push	{r7}
 8034408:	b083      	sub	sp, #12
 803440a:	af00      	add	r7, sp, #0
 803440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 803440e:	bf00      	nop
 8034410:	370c      	adds	r7, #12
 8034412:	46bd      	mov	sp, r7
 8034414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034418:	4770      	bx	lr

0803441a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 803441a:	b480      	push	{r7}
 803441c:	b083      	sub	sp, #12
 803441e:	af00      	add	r7, sp, #0
 8034420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8034422:	bf00      	nop
 8034424:	370c      	adds	r7, #12
 8034426:	46bd      	mov	sp, r7
 8034428:	f85d 7b04 	ldr.w	r7, [sp], #4
 803442c:	4770      	bx	lr
	...

08034430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8034430:	b480      	push	{r7}
 8034432:	b085      	sub	sp, #20
 8034434:	af00      	add	r7, sp, #0
 8034436:	6078      	str	r0, [r7, #4]
 8034438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 803443a:	687b      	ldr	r3, [r7, #4]
 803443c:	681b      	ldr	r3, [r3, #0]
 803443e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8034440:	687b      	ldr	r3, [r7, #4]
 8034442:	4a46      	ldr	r2, [pc, #280]	@ (803455c <TIM_Base_SetConfig+0x12c>)
 8034444:	4293      	cmp	r3, r2
 8034446:	d013      	beq.n	8034470 <TIM_Base_SetConfig+0x40>
 8034448:	687b      	ldr	r3, [r7, #4]
 803444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803444e:	d00f      	beq.n	8034470 <TIM_Base_SetConfig+0x40>
 8034450:	687b      	ldr	r3, [r7, #4]
 8034452:	4a43      	ldr	r2, [pc, #268]	@ (8034560 <TIM_Base_SetConfig+0x130>)
 8034454:	4293      	cmp	r3, r2
 8034456:	d00b      	beq.n	8034470 <TIM_Base_SetConfig+0x40>
 8034458:	687b      	ldr	r3, [r7, #4]
 803445a:	4a42      	ldr	r2, [pc, #264]	@ (8034564 <TIM_Base_SetConfig+0x134>)
 803445c:	4293      	cmp	r3, r2
 803445e:	d007      	beq.n	8034470 <TIM_Base_SetConfig+0x40>
 8034460:	687b      	ldr	r3, [r7, #4]
 8034462:	4a41      	ldr	r2, [pc, #260]	@ (8034568 <TIM_Base_SetConfig+0x138>)
 8034464:	4293      	cmp	r3, r2
 8034466:	d003      	beq.n	8034470 <TIM_Base_SetConfig+0x40>
 8034468:	687b      	ldr	r3, [r7, #4]
 803446a:	4a40      	ldr	r2, [pc, #256]	@ (803456c <TIM_Base_SetConfig+0x13c>)
 803446c:	4293      	cmp	r3, r2
 803446e:	d108      	bne.n	8034482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8034470:	68fb      	ldr	r3, [r7, #12]
 8034472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8034476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8034478:	683b      	ldr	r3, [r7, #0]
 803447a:	685b      	ldr	r3, [r3, #4]
 803447c:	68fa      	ldr	r2, [r7, #12]
 803447e:	4313      	orrs	r3, r2
 8034480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8034482:	687b      	ldr	r3, [r7, #4]
 8034484:	4a35      	ldr	r2, [pc, #212]	@ (803455c <TIM_Base_SetConfig+0x12c>)
 8034486:	4293      	cmp	r3, r2
 8034488:	d02b      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 803448a:	687b      	ldr	r3, [r7, #4]
 803448c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8034490:	d027      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 8034492:	687b      	ldr	r3, [r7, #4]
 8034494:	4a32      	ldr	r2, [pc, #200]	@ (8034560 <TIM_Base_SetConfig+0x130>)
 8034496:	4293      	cmp	r3, r2
 8034498:	d023      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 803449a:	687b      	ldr	r3, [r7, #4]
 803449c:	4a31      	ldr	r2, [pc, #196]	@ (8034564 <TIM_Base_SetConfig+0x134>)
 803449e:	4293      	cmp	r3, r2
 80344a0:	d01f      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344a2:	687b      	ldr	r3, [r7, #4]
 80344a4:	4a30      	ldr	r2, [pc, #192]	@ (8034568 <TIM_Base_SetConfig+0x138>)
 80344a6:	4293      	cmp	r3, r2
 80344a8:	d01b      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344aa:	687b      	ldr	r3, [r7, #4]
 80344ac:	4a2f      	ldr	r2, [pc, #188]	@ (803456c <TIM_Base_SetConfig+0x13c>)
 80344ae:	4293      	cmp	r3, r2
 80344b0:	d017      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344b2:	687b      	ldr	r3, [r7, #4]
 80344b4:	4a2e      	ldr	r2, [pc, #184]	@ (8034570 <TIM_Base_SetConfig+0x140>)
 80344b6:	4293      	cmp	r3, r2
 80344b8:	d013      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344ba:	687b      	ldr	r3, [r7, #4]
 80344bc:	4a2d      	ldr	r2, [pc, #180]	@ (8034574 <TIM_Base_SetConfig+0x144>)
 80344be:	4293      	cmp	r3, r2
 80344c0:	d00f      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344c2:	687b      	ldr	r3, [r7, #4]
 80344c4:	4a2c      	ldr	r2, [pc, #176]	@ (8034578 <TIM_Base_SetConfig+0x148>)
 80344c6:	4293      	cmp	r3, r2
 80344c8:	d00b      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344ca:	687b      	ldr	r3, [r7, #4]
 80344cc:	4a2b      	ldr	r2, [pc, #172]	@ (803457c <TIM_Base_SetConfig+0x14c>)
 80344ce:	4293      	cmp	r3, r2
 80344d0:	d007      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344d2:	687b      	ldr	r3, [r7, #4]
 80344d4:	4a2a      	ldr	r2, [pc, #168]	@ (8034580 <TIM_Base_SetConfig+0x150>)
 80344d6:	4293      	cmp	r3, r2
 80344d8:	d003      	beq.n	80344e2 <TIM_Base_SetConfig+0xb2>
 80344da:	687b      	ldr	r3, [r7, #4]
 80344dc:	4a29      	ldr	r2, [pc, #164]	@ (8034584 <TIM_Base_SetConfig+0x154>)
 80344de:	4293      	cmp	r3, r2
 80344e0:	d108      	bne.n	80344f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80344e2:	68fb      	ldr	r3, [r7, #12]
 80344e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80344e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80344ea:	683b      	ldr	r3, [r7, #0]
 80344ec:	68db      	ldr	r3, [r3, #12]
 80344ee:	68fa      	ldr	r2, [r7, #12]
 80344f0:	4313      	orrs	r3, r2
 80344f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80344f4:	68fb      	ldr	r3, [r7, #12]
 80344f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80344fa:	683b      	ldr	r3, [r7, #0]
 80344fc:	695b      	ldr	r3, [r3, #20]
 80344fe:	4313      	orrs	r3, r2
 8034500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8034502:	687b      	ldr	r3, [r7, #4]
 8034504:	68fa      	ldr	r2, [r7, #12]
 8034506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8034508:	683b      	ldr	r3, [r7, #0]
 803450a:	689a      	ldr	r2, [r3, #8]
 803450c:	687b      	ldr	r3, [r7, #4]
 803450e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8034510:	683b      	ldr	r3, [r7, #0]
 8034512:	681a      	ldr	r2, [r3, #0]
 8034514:	687b      	ldr	r3, [r7, #4]
 8034516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8034518:	687b      	ldr	r3, [r7, #4]
 803451a:	4a10      	ldr	r2, [pc, #64]	@ (803455c <TIM_Base_SetConfig+0x12c>)
 803451c:	4293      	cmp	r3, r2
 803451e:	d003      	beq.n	8034528 <TIM_Base_SetConfig+0xf8>
 8034520:	687b      	ldr	r3, [r7, #4]
 8034522:	4a12      	ldr	r2, [pc, #72]	@ (803456c <TIM_Base_SetConfig+0x13c>)
 8034524:	4293      	cmp	r3, r2
 8034526:	d103      	bne.n	8034530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8034528:	683b      	ldr	r3, [r7, #0]
 803452a:	691a      	ldr	r2, [r3, #16]
 803452c:	687b      	ldr	r3, [r7, #4]
 803452e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8034530:	687b      	ldr	r3, [r7, #4]
 8034532:	2201      	movs	r2, #1
 8034534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8034536:	687b      	ldr	r3, [r7, #4]
 8034538:	691b      	ldr	r3, [r3, #16]
 803453a:	f003 0301 	and.w	r3, r3, #1
 803453e:	2b01      	cmp	r3, #1
 8034540:	d105      	bne.n	803454e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8034542:	687b      	ldr	r3, [r7, #4]
 8034544:	691b      	ldr	r3, [r3, #16]
 8034546:	f023 0201 	bic.w	r2, r3, #1
 803454a:	687b      	ldr	r3, [r7, #4]
 803454c:	611a      	str	r2, [r3, #16]
  }
}
 803454e:	bf00      	nop
 8034550:	3714      	adds	r7, #20
 8034552:	46bd      	mov	sp, r7
 8034554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034558:	4770      	bx	lr
 803455a:	bf00      	nop
 803455c:	40010000 	.word	0x40010000
 8034560:	40000400 	.word	0x40000400
 8034564:	40000800 	.word	0x40000800
 8034568:	40000c00 	.word	0x40000c00
 803456c:	40010400 	.word	0x40010400
 8034570:	40014000 	.word	0x40014000
 8034574:	40014400 	.word	0x40014400
 8034578:	40014800 	.word	0x40014800
 803457c:	40001800 	.word	0x40001800
 8034580:	40001c00 	.word	0x40001c00
 8034584:	40002000 	.word	0x40002000

08034588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034588:	b480      	push	{r7}
 803458a:	b087      	sub	sp, #28
 803458c:	af00      	add	r7, sp, #0
 803458e:	60f8      	str	r0, [r7, #12]
 8034590:	60b9      	str	r1, [r7, #8]
 8034592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8034594:	68fb      	ldr	r3, [r7, #12]
 8034596:	6a1b      	ldr	r3, [r3, #32]
 8034598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 803459a:	68fb      	ldr	r3, [r7, #12]
 803459c:	6a1b      	ldr	r3, [r3, #32]
 803459e:	f023 0201 	bic.w	r2, r3, #1
 80345a2:	68fb      	ldr	r3, [r7, #12]
 80345a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80345a6:	68fb      	ldr	r3, [r7, #12]
 80345a8:	699b      	ldr	r3, [r3, #24]
 80345aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80345ac:	693b      	ldr	r3, [r7, #16]
 80345ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80345b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80345b4:	687b      	ldr	r3, [r7, #4]
 80345b6:	011b      	lsls	r3, r3, #4
 80345b8:	693a      	ldr	r2, [r7, #16]
 80345ba:	4313      	orrs	r3, r2
 80345bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80345be:	697b      	ldr	r3, [r7, #20]
 80345c0:	f023 030a 	bic.w	r3, r3, #10
 80345c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80345c6:	697a      	ldr	r2, [r7, #20]
 80345c8:	68bb      	ldr	r3, [r7, #8]
 80345ca:	4313      	orrs	r3, r2
 80345cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80345ce:	68fb      	ldr	r3, [r7, #12]
 80345d0:	693a      	ldr	r2, [r7, #16]
 80345d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80345d4:	68fb      	ldr	r3, [r7, #12]
 80345d6:	697a      	ldr	r2, [r7, #20]
 80345d8:	621a      	str	r2, [r3, #32]
}
 80345da:	bf00      	nop
 80345dc:	371c      	adds	r7, #28
 80345de:	46bd      	mov	sp, r7
 80345e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80345e4:	4770      	bx	lr

080345e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80345e6:	b480      	push	{r7}
 80345e8:	b087      	sub	sp, #28
 80345ea:	af00      	add	r7, sp, #0
 80345ec:	60f8      	str	r0, [r7, #12]
 80345ee:	60b9      	str	r1, [r7, #8]
 80345f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80345f2:	68fb      	ldr	r3, [r7, #12]
 80345f4:	6a1b      	ldr	r3, [r3, #32]
 80345f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80345f8:	68fb      	ldr	r3, [r7, #12]
 80345fa:	6a1b      	ldr	r3, [r3, #32]
 80345fc:	f023 0210 	bic.w	r2, r3, #16
 8034600:	68fb      	ldr	r3, [r7, #12]
 8034602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034604:	68fb      	ldr	r3, [r7, #12]
 8034606:	699b      	ldr	r3, [r3, #24]
 8034608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 803460a:	693b      	ldr	r3, [r7, #16]
 803460c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8034610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8034612:	687b      	ldr	r3, [r7, #4]
 8034614:	031b      	lsls	r3, r3, #12
 8034616:	693a      	ldr	r2, [r7, #16]
 8034618:	4313      	orrs	r3, r2
 803461a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 803461c:	697b      	ldr	r3, [r7, #20]
 803461e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8034622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8034624:	68bb      	ldr	r3, [r7, #8]
 8034626:	011b      	lsls	r3, r3, #4
 8034628:	697a      	ldr	r2, [r7, #20]
 803462a:	4313      	orrs	r3, r2
 803462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 803462e:	68fb      	ldr	r3, [r7, #12]
 8034630:	693a      	ldr	r2, [r7, #16]
 8034632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034634:	68fb      	ldr	r3, [r7, #12]
 8034636:	697a      	ldr	r2, [r7, #20]
 8034638:	621a      	str	r2, [r3, #32]
}
 803463a:	bf00      	nop
 803463c:	371c      	adds	r7, #28
 803463e:	46bd      	mov	sp, r7
 8034640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034644:	4770      	bx	lr

08034646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8034646:	b480      	push	{r7}
 8034648:	b085      	sub	sp, #20
 803464a:	af00      	add	r7, sp, #0
 803464c:	6078      	str	r0, [r7, #4]
 803464e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8034650:	687b      	ldr	r3, [r7, #4]
 8034652:	689b      	ldr	r3, [r3, #8]
 8034654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8034656:	68fb      	ldr	r3, [r7, #12]
 8034658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 803465c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 803465e:	683a      	ldr	r2, [r7, #0]
 8034660:	68fb      	ldr	r3, [r7, #12]
 8034662:	4313      	orrs	r3, r2
 8034664:	f043 0307 	orr.w	r3, r3, #7
 8034668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 803466a:	687b      	ldr	r3, [r7, #4]
 803466c:	68fa      	ldr	r2, [r7, #12]
 803466e:	609a      	str	r2, [r3, #8]
}
 8034670:	bf00      	nop
 8034672:	3714      	adds	r7, #20
 8034674:	46bd      	mov	sp, r7
 8034676:	f85d 7b04 	ldr.w	r7, [sp], #4
 803467a:	4770      	bx	lr

0803467c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 803467c:	b480      	push	{r7}
 803467e:	b087      	sub	sp, #28
 8034680:	af00      	add	r7, sp, #0
 8034682:	60f8      	str	r0, [r7, #12]
 8034684:	60b9      	str	r1, [r7, #8]
 8034686:	607a      	str	r2, [r7, #4]
 8034688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 803468a:	68fb      	ldr	r3, [r7, #12]
 803468c:	689b      	ldr	r3, [r3, #8]
 803468e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034690:	697b      	ldr	r3, [r7, #20]
 8034692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8034696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8034698:	683b      	ldr	r3, [r7, #0]
 803469a:	021a      	lsls	r2, r3, #8
 803469c:	687b      	ldr	r3, [r7, #4]
 803469e:	431a      	orrs	r2, r3
 80346a0:	68bb      	ldr	r3, [r7, #8]
 80346a2:	4313      	orrs	r3, r2
 80346a4:	697a      	ldr	r2, [r7, #20]
 80346a6:	4313      	orrs	r3, r2
 80346a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80346aa:	68fb      	ldr	r3, [r7, #12]
 80346ac:	697a      	ldr	r2, [r7, #20]
 80346ae:	609a      	str	r2, [r3, #8]
}
 80346b0:	bf00      	nop
 80346b2:	371c      	adds	r7, #28
 80346b4:	46bd      	mov	sp, r7
 80346b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80346ba:	4770      	bx	lr

080346bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80346bc:	b480      	push	{r7}
 80346be:	b085      	sub	sp, #20
 80346c0:	af00      	add	r7, sp, #0
 80346c2:	6078      	str	r0, [r7, #4]
 80346c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80346c6:	687b      	ldr	r3, [r7, #4]
 80346c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80346cc:	2b01      	cmp	r3, #1
 80346ce:	d101      	bne.n	80346d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80346d0:	2302      	movs	r3, #2
 80346d2:	e05a      	b.n	803478a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80346d4:	687b      	ldr	r3, [r7, #4]
 80346d6:	2201      	movs	r2, #1
 80346d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80346dc:	687b      	ldr	r3, [r7, #4]
 80346de:	2202      	movs	r2, #2
 80346e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80346e4:	687b      	ldr	r3, [r7, #4]
 80346e6:	681b      	ldr	r3, [r3, #0]
 80346e8:	685b      	ldr	r3, [r3, #4]
 80346ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80346ec:	687b      	ldr	r3, [r7, #4]
 80346ee:	681b      	ldr	r3, [r3, #0]
 80346f0:	689b      	ldr	r3, [r3, #8]
 80346f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80346f4:	68fb      	ldr	r3, [r7, #12]
 80346f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80346fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80346fc:	683b      	ldr	r3, [r7, #0]
 80346fe:	681b      	ldr	r3, [r3, #0]
 8034700:	68fa      	ldr	r2, [r7, #12]
 8034702:	4313      	orrs	r3, r2
 8034704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8034706:	687b      	ldr	r3, [r7, #4]
 8034708:	681b      	ldr	r3, [r3, #0]
 803470a:	68fa      	ldr	r2, [r7, #12]
 803470c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 803470e:	687b      	ldr	r3, [r7, #4]
 8034710:	681b      	ldr	r3, [r3, #0]
 8034712:	4a21      	ldr	r2, [pc, #132]	@ (8034798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8034714:	4293      	cmp	r3, r2
 8034716:	d022      	beq.n	803475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034718:	687b      	ldr	r3, [r7, #4]
 803471a:	681b      	ldr	r3, [r3, #0]
 803471c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8034720:	d01d      	beq.n	803475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034722:	687b      	ldr	r3, [r7, #4]
 8034724:	681b      	ldr	r3, [r3, #0]
 8034726:	4a1d      	ldr	r2, [pc, #116]	@ (803479c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8034728:	4293      	cmp	r3, r2
 803472a:	d018      	beq.n	803475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 803472c:	687b      	ldr	r3, [r7, #4]
 803472e:	681b      	ldr	r3, [r3, #0]
 8034730:	4a1b      	ldr	r2, [pc, #108]	@ (80347a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8034732:	4293      	cmp	r3, r2
 8034734:	d013      	beq.n	803475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034736:	687b      	ldr	r3, [r7, #4]
 8034738:	681b      	ldr	r3, [r3, #0]
 803473a:	4a1a      	ldr	r2, [pc, #104]	@ (80347a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 803473c:	4293      	cmp	r3, r2
 803473e:	d00e      	beq.n	803475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034740:	687b      	ldr	r3, [r7, #4]
 8034742:	681b      	ldr	r3, [r3, #0]
 8034744:	4a18      	ldr	r2, [pc, #96]	@ (80347a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8034746:	4293      	cmp	r3, r2
 8034748:	d009      	beq.n	803475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 803474a:	687b      	ldr	r3, [r7, #4]
 803474c:	681b      	ldr	r3, [r3, #0]
 803474e:	4a17      	ldr	r2, [pc, #92]	@ (80347ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8034750:	4293      	cmp	r3, r2
 8034752:	d004      	beq.n	803475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034754:	687b      	ldr	r3, [r7, #4]
 8034756:	681b      	ldr	r3, [r3, #0]
 8034758:	4a15      	ldr	r2, [pc, #84]	@ (80347b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 803475a:	4293      	cmp	r3, r2
 803475c:	d10c      	bne.n	8034778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 803475e:	68bb      	ldr	r3, [r7, #8]
 8034760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8034764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8034766:	683b      	ldr	r3, [r7, #0]
 8034768:	685b      	ldr	r3, [r3, #4]
 803476a:	68ba      	ldr	r2, [r7, #8]
 803476c:	4313      	orrs	r3, r2
 803476e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8034770:	687b      	ldr	r3, [r7, #4]
 8034772:	681b      	ldr	r3, [r3, #0]
 8034774:	68ba      	ldr	r2, [r7, #8]
 8034776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8034778:	687b      	ldr	r3, [r7, #4]
 803477a:	2201      	movs	r2, #1
 803477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8034780:	687b      	ldr	r3, [r7, #4]
 8034782:	2200      	movs	r2, #0
 8034784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8034788:	2300      	movs	r3, #0
}
 803478a:	4618      	mov	r0, r3
 803478c:	3714      	adds	r7, #20
 803478e:	46bd      	mov	sp, r7
 8034790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034794:	4770      	bx	lr
 8034796:	bf00      	nop
 8034798:	40010000 	.word	0x40010000
 803479c:	40000400 	.word	0x40000400
 80347a0:	40000800 	.word	0x40000800
 80347a4:	40000c00 	.word	0x40000c00
 80347a8:	40010400 	.word	0x40010400
 80347ac:	40014000 	.word	0x40014000
 80347b0:	40001800 	.word	0x40001800

080347b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80347b4:	b480      	push	{r7}
 80347b6:	b083      	sub	sp, #12
 80347b8:	af00      	add	r7, sp, #0
 80347ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80347bc:	bf00      	nop
 80347be:	370c      	adds	r7, #12
 80347c0:	46bd      	mov	sp, r7
 80347c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80347c6:	4770      	bx	lr

080347c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80347c8:	b480      	push	{r7}
 80347ca:	b083      	sub	sp, #12
 80347cc:	af00      	add	r7, sp, #0
 80347ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80347d0:	bf00      	nop
 80347d2:	370c      	adds	r7, #12
 80347d4:	46bd      	mov	sp, r7
 80347d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80347da:	4770      	bx	lr

080347dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80347dc:	b580      	push	{r7, lr}
 80347de:	b082      	sub	sp, #8
 80347e0:	af00      	add	r7, sp, #0
 80347e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80347e4:	687b      	ldr	r3, [r7, #4]
 80347e6:	2b00      	cmp	r3, #0
 80347e8:	d101      	bne.n	80347ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80347ea:	2301      	movs	r3, #1
 80347ec:	e042      	b.n	8034874 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80347ee:	687b      	ldr	r3, [r7, #4]
 80347f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80347f4:	b2db      	uxtb	r3, r3
 80347f6:	2b00      	cmp	r3, #0
 80347f8:	d106      	bne.n	8034808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80347fa:	687b      	ldr	r3, [r7, #4]
 80347fc:	2200      	movs	r2, #0
 80347fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8034802:	6878      	ldr	r0, [r7, #4]
 8034804:	f7f6 fe98 	bl	802b538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8034808:	687b      	ldr	r3, [r7, #4]
 803480a:	2224      	movs	r2, #36	@ 0x24
 803480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8034810:	687b      	ldr	r3, [r7, #4]
 8034812:	681b      	ldr	r3, [r3, #0]
 8034814:	68da      	ldr	r2, [r3, #12]
 8034816:	687b      	ldr	r3, [r7, #4]
 8034818:	681b      	ldr	r3, [r3, #0]
 803481a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 803481e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8034820:	6878      	ldr	r0, [r7, #4]
 8034822:	f000 f973 	bl	8034b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8034826:	687b      	ldr	r3, [r7, #4]
 8034828:	681b      	ldr	r3, [r3, #0]
 803482a:	691a      	ldr	r2, [r3, #16]
 803482c:	687b      	ldr	r3, [r7, #4]
 803482e:	681b      	ldr	r3, [r3, #0]
 8034830:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8034834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8034836:	687b      	ldr	r3, [r7, #4]
 8034838:	681b      	ldr	r3, [r3, #0]
 803483a:	695a      	ldr	r2, [r3, #20]
 803483c:	687b      	ldr	r3, [r7, #4]
 803483e:	681b      	ldr	r3, [r3, #0]
 8034840:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8034844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8034846:	687b      	ldr	r3, [r7, #4]
 8034848:	681b      	ldr	r3, [r3, #0]
 803484a:	68da      	ldr	r2, [r3, #12]
 803484c:	687b      	ldr	r3, [r7, #4]
 803484e:	681b      	ldr	r3, [r3, #0]
 8034850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8034854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034856:	687b      	ldr	r3, [r7, #4]
 8034858:	2200      	movs	r2, #0
 803485a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 803485c:	687b      	ldr	r3, [r7, #4]
 803485e:	2220      	movs	r2, #32
 8034860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8034864:	687b      	ldr	r3, [r7, #4]
 8034866:	2220      	movs	r2, #32
 8034868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 803486c:	687b      	ldr	r3, [r7, #4]
 803486e:	2200      	movs	r2, #0
 8034870:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8034872:	2300      	movs	r3, #0
}
 8034874:	4618      	mov	r0, r3
 8034876:	3708      	adds	r7, #8
 8034878:	46bd      	mov	sp, r7
 803487a:	bd80      	pop	{r7, pc}

0803487c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 803487c:	b580      	push	{r7, lr}
 803487e:	b08a      	sub	sp, #40	@ 0x28
 8034880:	af02      	add	r7, sp, #8
 8034882:	60f8      	str	r0, [r7, #12]
 8034884:	60b9      	str	r1, [r7, #8]
 8034886:	603b      	str	r3, [r7, #0]
 8034888:	4613      	mov	r3, r2
 803488a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 803488c:	2300      	movs	r3, #0
 803488e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8034890:	68fb      	ldr	r3, [r7, #12]
 8034892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8034896:	b2db      	uxtb	r3, r3
 8034898:	2b20      	cmp	r3, #32
 803489a:	d175      	bne.n	8034988 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 803489c:	68bb      	ldr	r3, [r7, #8]
 803489e:	2b00      	cmp	r3, #0
 80348a0:	d002      	beq.n	80348a8 <HAL_UART_Transmit+0x2c>
 80348a2:	88fb      	ldrh	r3, [r7, #6]
 80348a4:	2b00      	cmp	r3, #0
 80348a6:	d101      	bne.n	80348ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80348a8:	2301      	movs	r3, #1
 80348aa:	e06e      	b.n	803498a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80348ac:	68fb      	ldr	r3, [r7, #12]
 80348ae:	2200      	movs	r2, #0
 80348b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80348b2:	68fb      	ldr	r3, [r7, #12]
 80348b4:	2221      	movs	r2, #33	@ 0x21
 80348b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80348ba:	f7fd fe0f 	bl	80324dc <HAL_GetTick>
 80348be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80348c0:	68fb      	ldr	r3, [r7, #12]
 80348c2:	88fa      	ldrh	r2, [r7, #6]
 80348c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80348c6:	68fb      	ldr	r3, [r7, #12]
 80348c8:	88fa      	ldrh	r2, [r7, #6]
 80348ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80348cc:	68fb      	ldr	r3, [r7, #12]
 80348ce:	689b      	ldr	r3, [r3, #8]
 80348d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80348d4:	d108      	bne.n	80348e8 <HAL_UART_Transmit+0x6c>
 80348d6:	68fb      	ldr	r3, [r7, #12]
 80348d8:	691b      	ldr	r3, [r3, #16]
 80348da:	2b00      	cmp	r3, #0
 80348dc:	d104      	bne.n	80348e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80348de:	2300      	movs	r3, #0
 80348e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80348e2:	68bb      	ldr	r3, [r7, #8]
 80348e4:	61bb      	str	r3, [r7, #24]
 80348e6:	e003      	b.n	80348f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80348e8:	68bb      	ldr	r3, [r7, #8]
 80348ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80348ec:	2300      	movs	r3, #0
 80348ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80348f0:	e02e      	b.n	8034950 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80348f2:	683b      	ldr	r3, [r7, #0]
 80348f4:	9300      	str	r3, [sp, #0]
 80348f6:	697b      	ldr	r3, [r7, #20]
 80348f8:	2200      	movs	r2, #0
 80348fa:	2180      	movs	r1, #128	@ 0x80
 80348fc:	68f8      	ldr	r0, [r7, #12]
 80348fe:	f000 f848 	bl	8034992 <UART_WaitOnFlagUntilTimeout>
 8034902:	4603      	mov	r3, r0
 8034904:	2b00      	cmp	r3, #0
 8034906:	d005      	beq.n	8034914 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8034908:	68fb      	ldr	r3, [r7, #12]
 803490a:	2220      	movs	r2, #32
 803490c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8034910:	2303      	movs	r3, #3
 8034912:	e03a      	b.n	803498a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8034914:	69fb      	ldr	r3, [r7, #28]
 8034916:	2b00      	cmp	r3, #0
 8034918:	d10b      	bne.n	8034932 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 803491a:	69bb      	ldr	r3, [r7, #24]
 803491c:	881b      	ldrh	r3, [r3, #0]
 803491e:	461a      	mov	r2, r3
 8034920:	68fb      	ldr	r3, [r7, #12]
 8034922:	681b      	ldr	r3, [r3, #0]
 8034924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8034928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 803492a:	69bb      	ldr	r3, [r7, #24]
 803492c:	3302      	adds	r3, #2
 803492e:	61bb      	str	r3, [r7, #24]
 8034930:	e007      	b.n	8034942 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8034932:	69fb      	ldr	r3, [r7, #28]
 8034934:	781a      	ldrb	r2, [r3, #0]
 8034936:	68fb      	ldr	r3, [r7, #12]
 8034938:	681b      	ldr	r3, [r3, #0]
 803493a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 803493c:	69fb      	ldr	r3, [r7, #28]
 803493e:	3301      	adds	r3, #1
 8034940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8034942:	68fb      	ldr	r3, [r7, #12]
 8034944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8034946:	b29b      	uxth	r3, r3
 8034948:	3b01      	subs	r3, #1
 803494a:	b29a      	uxth	r2, r3
 803494c:	68fb      	ldr	r3, [r7, #12]
 803494e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8034950:	68fb      	ldr	r3, [r7, #12]
 8034952:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8034954:	b29b      	uxth	r3, r3
 8034956:	2b00      	cmp	r3, #0
 8034958:	d1cb      	bne.n	80348f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 803495a:	683b      	ldr	r3, [r7, #0]
 803495c:	9300      	str	r3, [sp, #0]
 803495e:	697b      	ldr	r3, [r7, #20]
 8034960:	2200      	movs	r2, #0
 8034962:	2140      	movs	r1, #64	@ 0x40
 8034964:	68f8      	ldr	r0, [r7, #12]
 8034966:	f000 f814 	bl	8034992 <UART_WaitOnFlagUntilTimeout>
 803496a:	4603      	mov	r3, r0
 803496c:	2b00      	cmp	r3, #0
 803496e:	d005      	beq.n	803497c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8034970:	68fb      	ldr	r3, [r7, #12]
 8034972:	2220      	movs	r2, #32
 8034974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8034978:	2303      	movs	r3, #3
 803497a:	e006      	b.n	803498a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 803497c:	68fb      	ldr	r3, [r7, #12]
 803497e:	2220      	movs	r2, #32
 8034980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8034984:	2300      	movs	r3, #0
 8034986:	e000      	b.n	803498a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8034988:	2302      	movs	r3, #2
  }
}
 803498a:	4618      	mov	r0, r3
 803498c:	3720      	adds	r7, #32
 803498e:	46bd      	mov	sp, r7
 8034990:	bd80      	pop	{r7, pc}

08034992 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8034992:	b580      	push	{r7, lr}
 8034994:	b086      	sub	sp, #24
 8034996:	af00      	add	r7, sp, #0
 8034998:	60f8      	str	r0, [r7, #12]
 803499a:	60b9      	str	r1, [r7, #8]
 803499c:	603b      	str	r3, [r7, #0]
 803499e:	4613      	mov	r3, r2
 80349a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80349a2:	e03b      	b.n	8034a1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80349a4:	6a3b      	ldr	r3, [r7, #32]
 80349a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80349aa:	d037      	beq.n	8034a1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80349ac:	f7fd fd96 	bl	80324dc <HAL_GetTick>
 80349b0:	4602      	mov	r2, r0
 80349b2:	683b      	ldr	r3, [r7, #0]
 80349b4:	1ad3      	subs	r3, r2, r3
 80349b6:	6a3a      	ldr	r2, [r7, #32]
 80349b8:	429a      	cmp	r2, r3
 80349ba:	d302      	bcc.n	80349c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80349bc:	6a3b      	ldr	r3, [r7, #32]
 80349be:	2b00      	cmp	r3, #0
 80349c0:	d101      	bne.n	80349c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80349c2:	2303      	movs	r3, #3
 80349c4:	e03a      	b.n	8034a3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80349c6:	68fb      	ldr	r3, [r7, #12]
 80349c8:	681b      	ldr	r3, [r3, #0]
 80349ca:	68db      	ldr	r3, [r3, #12]
 80349cc:	f003 0304 	and.w	r3, r3, #4
 80349d0:	2b00      	cmp	r3, #0
 80349d2:	d023      	beq.n	8034a1c <UART_WaitOnFlagUntilTimeout+0x8a>
 80349d4:	68bb      	ldr	r3, [r7, #8]
 80349d6:	2b80      	cmp	r3, #128	@ 0x80
 80349d8:	d020      	beq.n	8034a1c <UART_WaitOnFlagUntilTimeout+0x8a>
 80349da:	68bb      	ldr	r3, [r7, #8]
 80349dc:	2b40      	cmp	r3, #64	@ 0x40
 80349de:	d01d      	beq.n	8034a1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80349e0:	68fb      	ldr	r3, [r7, #12]
 80349e2:	681b      	ldr	r3, [r3, #0]
 80349e4:	681b      	ldr	r3, [r3, #0]
 80349e6:	f003 0308 	and.w	r3, r3, #8
 80349ea:	2b08      	cmp	r3, #8
 80349ec:	d116      	bne.n	8034a1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80349ee:	2300      	movs	r3, #0
 80349f0:	617b      	str	r3, [r7, #20]
 80349f2:	68fb      	ldr	r3, [r7, #12]
 80349f4:	681b      	ldr	r3, [r3, #0]
 80349f6:	681b      	ldr	r3, [r3, #0]
 80349f8:	617b      	str	r3, [r7, #20]
 80349fa:	68fb      	ldr	r3, [r7, #12]
 80349fc:	681b      	ldr	r3, [r3, #0]
 80349fe:	685b      	ldr	r3, [r3, #4]
 8034a00:	617b      	str	r3, [r7, #20]
 8034a02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8034a04:	68f8      	ldr	r0, [r7, #12]
 8034a06:	f000 f81d 	bl	8034a44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8034a0a:	68fb      	ldr	r3, [r7, #12]
 8034a0c:	2208      	movs	r2, #8
 8034a0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8034a10:	68fb      	ldr	r3, [r7, #12]
 8034a12:	2200      	movs	r2, #0
 8034a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8034a18:	2301      	movs	r3, #1
 8034a1a:	e00f      	b.n	8034a3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8034a1c:	68fb      	ldr	r3, [r7, #12]
 8034a1e:	681b      	ldr	r3, [r3, #0]
 8034a20:	681a      	ldr	r2, [r3, #0]
 8034a22:	68bb      	ldr	r3, [r7, #8]
 8034a24:	4013      	ands	r3, r2
 8034a26:	68ba      	ldr	r2, [r7, #8]
 8034a28:	429a      	cmp	r2, r3
 8034a2a:	bf0c      	ite	eq
 8034a2c:	2301      	moveq	r3, #1
 8034a2e:	2300      	movne	r3, #0
 8034a30:	b2db      	uxtb	r3, r3
 8034a32:	461a      	mov	r2, r3
 8034a34:	79fb      	ldrb	r3, [r7, #7]
 8034a36:	429a      	cmp	r2, r3
 8034a38:	d0b4      	beq.n	80349a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8034a3a:	2300      	movs	r3, #0
}
 8034a3c:	4618      	mov	r0, r3
 8034a3e:	3718      	adds	r7, #24
 8034a40:	46bd      	mov	sp, r7
 8034a42:	bd80      	pop	{r7, pc}

08034a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8034a44:	b480      	push	{r7}
 8034a46:	b095      	sub	sp, #84	@ 0x54
 8034a48:	af00      	add	r7, sp, #0
 8034a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8034a4c:	687b      	ldr	r3, [r7, #4]
 8034a4e:	681b      	ldr	r3, [r3, #0]
 8034a50:	330c      	adds	r3, #12
 8034a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8034a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8034a56:	e853 3f00 	ldrex	r3, [r3]
 8034a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8034a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8034a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8034a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8034a64:	687b      	ldr	r3, [r7, #4]
 8034a66:	681b      	ldr	r3, [r3, #0]
 8034a68:	330c      	adds	r3, #12
 8034a6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8034a6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8034a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8034a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8034a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8034a74:	e841 2300 	strex	r3, r2, [r1]
 8034a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8034a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8034a7c:	2b00      	cmp	r3, #0
 8034a7e:	d1e5      	bne.n	8034a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8034a80:	687b      	ldr	r3, [r7, #4]
 8034a82:	681b      	ldr	r3, [r3, #0]
 8034a84:	3314      	adds	r3, #20
 8034a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8034a88:	6a3b      	ldr	r3, [r7, #32]
 8034a8a:	e853 3f00 	ldrex	r3, [r3]
 8034a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8034a90:	69fb      	ldr	r3, [r7, #28]
 8034a92:	f023 0301 	bic.w	r3, r3, #1
 8034a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8034a98:	687b      	ldr	r3, [r7, #4]
 8034a9a:	681b      	ldr	r3, [r3, #0]
 8034a9c:	3314      	adds	r3, #20
 8034a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8034aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8034aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8034aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8034aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8034aa8:	e841 2300 	strex	r3, r2, [r1]
 8034aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8034aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034ab0:	2b00      	cmp	r3, #0
 8034ab2:	d1e5      	bne.n	8034a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8034ab4:	687b      	ldr	r3, [r7, #4]
 8034ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8034ab8:	2b01      	cmp	r3, #1
 8034aba:	d119      	bne.n	8034af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8034abc:	687b      	ldr	r3, [r7, #4]
 8034abe:	681b      	ldr	r3, [r3, #0]
 8034ac0:	330c      	adds	r3, #12
 8034ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8034ac4:	68fb      	ldr	r3, [r7, #12]
 8034ac6:	e853 3f00 	ldrex	r3, [r3]
 8034aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8034acc:	68bb      	ldr	r3, [r7, #8]
 8034ace:	f023 0310 	bic.w	r3, r3, #16
 8034ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8034ad4:	687b      	ldr	r3, [r7, #4]
 8034ad6:	681b      	ldr	r3, [r3, #0]
 8034ad8:	330c      	adds	r3, #12
 8034ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8034adc:	61ba      	str	r2, [r7, #24]
 8034ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8034ae0:	6979      	ldr	r1, [r7, #20]
 8034ae2:	69ba      	ldr	r2, [r7, #24]
 8034ae4:	e841 2300 	strex	r3, r2, [r1]
 8034ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8034aea:	693b      	ldr	r3, [r7, #16]
 8034aec:	2b00      	cmp	r3, #0
 8034aee:	d1e5      	bne.n	8034abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8034af0:	687b      	ldr	r3, [r7, #4]
 8034af2:	2220      	movs	r2, #32
 8034af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034af8:	687b      	ldr	r3, [r7, #4]
 8034afa:	2200      	movs	r2, #0
 8034afc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8034afe:	bf00      	nop
 8034b00:	3754      	adds	r7, #84	@ 0x54
 8034b02:	46bd      	mov	sp, r7
 8034b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b08:	4770      	bx	lr
	...

08034b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8034b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8034b10:	b0c0      	sub	sp, #256	@ 0x100
 8034b12:	af00      	add	r7, sp, #0
 8034b14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8034b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b1c:	681b      	ldr	r3, [r3, #0]
 8034b1e:	691b      	ldr	r3, [r3, #16]
 8034b20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8034b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b28:	68d9      	ldr	r1, [r3, #12]
 8034b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b2e:	681a      	ldr	r2, [r3, #0]
 8034b30:	ea40 0301 	orr.w	r3, r0, r1
 8034b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8034b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b3a:	689a      	ldr	r2, [r3, #8]
 8034b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b40:	691b      	ldr	r3, [r3, #16]
 8034b42:	431a      	orrs	r2, r3
 8034b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b48:	695b      	ldr	r3, [r3, #20]
 8034b4a:	431a      	orrs	r2, r3
 8034b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b50:	69db      	ldr	r3, [r3, #28]
 8034b52:	4313      	orrs	r3, r2
 8034b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8034b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b5c:	681b      	ldr	r3, [r3, #0]
 8034b5e:	68db      	ldr	r3, [r3, #12]
 8034b60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8034b64:	f021 010c 	bic.w	r1, r1, #12
 8034b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b6c:	681a      	ldr	r2, [r3, #0]
 8034b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8034b72:	430b      	orrs	r3, r1
 8034b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8034b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b7a:	681b      	ldr	r3, [r3, #0]
 8034b7c:	695b      	ldr	r3, [r3, #20]
 8034b7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8034b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b86:	6999      	ldr	r1, [r3, #24]
 8034b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b8c:	681a      	ldr	r2, [r3, #0]
 8034b8e:	ea40 0301 	orr.w	r3, r0, r1
 8034b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8034b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034b98:	681a      	ldr	r2, [r3, #0]
 8034b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8034dd8 <UART_SetConfig+0x2cc>)
 8034b9c:	429a      	cmp	r2, r3
 8034b9e:	d005      	beq.n	8034bac <UART_SetConfig+0xa0>
 8034ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034ba4:	681a      	ldr	r2, [r3, #0]
 8034ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8034ddc <UART_SetConfig+0x2d0>)
 8034ba8:	429a      	cmp	r2, r3
 8034baa:	d104      	bne.n	8034bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8034bac:	f7fe ffc0 	bl	8033b30 <HAL_RCC_GetPCLK2Freq>
 8034bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8034bb4:	e003      	b.n	8034bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8034bb6:	f7fe ffa7 	bl	8033b08 <HAL_RCC_GetPCLK1Freq>
 8034bba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8034bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034bc2:	69db      	ldr	r3, [r3, #28]
 8034bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8034bc8:	f040 810c 	bne.w	8034de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8034bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8034bd0:	2200      	movs	r2, #0
 8034bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8034bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8034bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8034bde:	4622      	mov	r2, r4
 8034be0:	462b      	mov	r3, r5
 8034be2:	1891      	adds	r1, r2, r2
 8034be4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8034be6:	415b      	adcs	r3, r3
 8034be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8034bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8034bee:	4621      	mov	r1, r4
 8034bf0:	eb12 0801 	adds.w	r8, r2, r1
 8034bf4:	4629      	mov	r1, r5
 8034bf6:	eb43 0901 	adc.w	r9, r3, r1
 8034bfa:	f04f 0200 	mov.w	r2, #0
 8034bfe:	f04f 0300 	mov.w	r3, #0
 8034c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8034c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8034c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8034c0e:	4690      	mov	r8, r2
 8034c10:	4699      	mov	r9, r3
 8034c12:	4623      	mov	r3, r4
 8034c14:	eb18 0303 	adds.w	r3, r8, r3
 8034c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8034c1c:	462b      	mov	r3, r5
 8034c1e:	eb49 0303 	adc.w	r3, r9, r3
 8034c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8034c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034c2a:	685b      	ldr	r3, [r3, #4]
 8034c2c:	2200      	movs	r2, #0
 8034c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8034c32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8034c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8034c3a:	460b      	mov	r3, r1
 8034c3c:	18db      	adds	r3, r3, r3
 8034c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8034c40:	4613      	mov	r3, r2
 8034c42:	eb42 0303 	adc.w	r3, r2, r3
 8034c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8034c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8034c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8034c50:	f7cb ffd2 	bl	8000bf8 <__aeabi_uldivmod>
 8034c54:	4602      	mov	r2, r0
 8034c56:	460b      	mov	r3, r1
 8034c58:	4b61      	ldr	r3, [pc, #388]	@ (8034de0 <UART_SetConfig+0x2d4>)
 8034c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8034c5e:	095b      	lsrs	r3, r3, #5
 8034c60:	011c      	lsls	r4, r3, #4
 8034c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8034c66:	2200      	movs	r2, #0
 8034c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8034c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8034c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8034c74:	4642      	mov	r2, r8
 8034c76:	464b      	mov	r3, r9
 8034c78:	1891      	adds	r1, r2, r2
 8034c7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8034c7c:	415b      	adcs	r3, r3
 8034c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8034c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8034c84:	4641      	mov	r1, r8
 8034c86:	eb12 0a01 	adds.w	sl, r2, r1
 8034c8a:	4649      	mov	r1, r9
 8034c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8034c90:	f04f 0200 	mov.w	r2, #0
 8034c94:	f04f 0300 	mov.w	r3, #0
 8034c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8034c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8034ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8034ca4:	4692      	mov	sl, r2
 8034ca6:	469b      	mov	fp, r3
 8034ca8:	4643      	mov	r3, r8
 8034caa:	eb1a 0303 	adds.w	r3, sl, r3
 8034cae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8034cb2:	464b      	mov	r3, r9
 8034cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8034cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8034cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034cc0:	685b      	ldr	r3, [r3, #4]
 8034cc2:	2200      	movs	r2, #0
 8034cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8034cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8034ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8034cd0:	460b      	mov	r3, r1
 8034cd2:	18db      	adds	r3, r3, r3
 8034cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8034cd6:	4613      	mov	r3, r2
 8034cd8:	eb42 0303 	adc.w	r3, r2, r3
 8034cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8034cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8034ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8034ce6:	f7cb ff87 	bl	8000bf8 <__aeabi_uldivmod>
 8034cea:	4602      	mov	r2, r0
 8034cec:	460b      	mov	r3, r1
 8034cee:	4611      	mov	r1, r2
 8034cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8034de0 <UART_SetConfig+0x2d4>)
 8034cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8034cf6:	095b      	lsrs	r3, r3, #5
 8034cf8:	2264      	movs	r2, #100	@ 0x64
 8034cfa:	fb02 f303 	mul.w	r3, r2, r3
 8034cfe:	1acb      	subs	r3, r1, r3
 8034d00:	00db      	lsls	r3, r3, #3
 8034d02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8034d06:	4b36      	ldr	r3, [pc, #216]	@ (8034de0 <UART_SetConfig+0x2d4>)
 8034d08:	fba3 2302 	umull	r2, r3, r3, r2
 8034d0c:	095b      	lsrs	r3, r3, #5
 8034d0e:	005b      	lsls	r3, r3, #1
 8034d10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8034d14:	441c      	add	r4, r3
 8034d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8034d1a:	2200      	movs	r2, #0
 8034d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8034d20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8034d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8034d28:	4642      	mov	r2, r8
 8034d2a:	464b      	mov	r3, r9
 8034d2c:	1891      	adds	r1, r2, r2
 8034d2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8034d30:	415b      	adcs	r3, r3
 8034d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8034d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8034d38:	4641      	mov	r1, r8
 8034d3a:	1851      	adds	r1, r2, r1
 8034d3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8034d3e:	4649      	mov	r1, r9
 8034d40:	414b      	adcs	r3, r1
 8034d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8034d44:	f04f 0200 	mov.w	r2, #0
 8034d48:	f04f 0300 	mov.w	r3, #0
 8034d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8034d50:	4659      	mov	r1, fp
 8034d52:	00cb      	lsls	r3, r1, #3
 8034d54:	4651      	mov	r1, sl
 8034d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8034d5a:	4651      	mov	r1, sl
 8034d5c:	00ca      	lsls	r2, r1, #3
 8034d5e:	4610      	mov	r0, r2
 8034d60:	4619      	mov	r1, r3
 8034d62:	4603      	mov	r3, r0
 8034d64:	4642      	mov	r2, r8
 8034d66:	189b      	adds	r3, r3, r2
 8034d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8034d6c:	464b      	mov	r3, r9
 8034d6e:	460a      	mov	r2, r1
 8034d70:	eb42 0303 	adc.w	r3, r2, r3
 8034d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8034d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034d7c:	685b      	ldr	r3, [r3, #4]
 8034d7e:	2200      	movs	r2, #0
 8034d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8034d84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8034d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8034d8c:	460b      	mov	r3, r1
 8034d8e:	18db      	adds	r3, r3, r3
 8034d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8034d92:	4613      	mov	r3, r2
 8034d94:	eb42 0303 	adc.w	r3, r2, r3
 8034d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8034d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8034d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8034da2:	f7cb ff29 	bl	8000bf8 <__aeabi_uldivmod>
 8034da6:	4602      	mov	r2, r0
 8034da8:	460b      	mov	r3, r1
 8034daa:	4b0d      	ldr	r3, [pc, #52]	@ (8034de0 <UART_SetConfig+0x2d4>)
 8034dac:	fba3 1302 	umull	r1, r3, r3, r2
 8034db0:	095b      	lsrs	r3, r3, #5
 8034db2:	2164      	movs	r1, #100	@ 0x64
 8034db4:	fb01 f303 	mul.w	r3, r1, r3
 8034db8:	1ad3      	subs	r3, r2, r3
 8034dba:	00db      	lsls	r3, r3, #3
 8034dbc:	3332      	adds	r3, #50	@ 0x32
 8034dbe:	4a08      	ldr	r2, [pc, #32]	@ (8034de0 <UART_SetConfig+0x2d4>)
 8034dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8034dc4:	095b      	lsrs	r3, r3, #5
 8034dc6:	f003 0207 	and.w	r2, r3, #7
 8034dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034dce:	681b      	ldr	r3, [r3, #0]
 8034dd0:	4422      	add	r2, r4
 8034dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8034dd4:	e106      	b.n	8034fe4 <UART_SetConfig+0x4d8>
 8034dd6:	bf00      	nop
 8034dd8:	40011000 	.word	0x40011000
 8034ddc:	40011400 	.word	0x40011400
 8034de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8034de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8034de8:	2200      	movs	r2, #0
 8034dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8034dee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8034df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8034df6:	4642      	mov	r2, r8
 8034df8:	464b      	mov	r3, r9
 8034dfa:	1891      	adds	r1, r2, r2
 8034dfc:	6239      	str	r1, [r7, #32]
 8034dfe:	415b      	adcs	r3, r3
 8034e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8034e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8034e06:	4641      	mov	r1, r8
 8034e08:	1854      	adds	r4, r2, r1
 8034e0a:	4649      	mov	r1, r9
 8034e0c:	eb43 0501 	adc.w	r5, r3, r1
 8034e10:	f04f 0200 	mov.w	r2, #0
 8034e14:	f04f 0300 	mov.w	r3, #0
 8034e18:	00eb      	lsls	r3, r5, #3
 8034e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8034e1e:	00e2      	lsls	r2, r4, #3
 8034e20:	4614      	mov	r4, r2
 8034e22:	461d      	mov	r5, r3
 8034e24:	4643      	mov	r3, r8
 8034e26:	18e3      	adds	r3, r4, r3
 8034e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8034e2c:	464b      	mov	r3, r9
 8034e2e:	eb45 0303 	adc.w	r3, r5, r3
 8034e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8034e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034e3a:	685b      	ldr	r3, [r3, #4]
 8034e3c:	2200      	movs	r2, #0
 8034e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8034e42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8034e46:	f04f 0200 	mov.w	r2, #0
 8034e4a:	f04f 0300 	mov.w	r3, #0
 8034e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8034e52:	4629      	mov	r1, r5
 8034e54:	008b      	lsls	r3, r1, #2
 8034e56:	4621      	mov	r1, r4
 8034e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8034e5c:	4621      	mov	r1, r4
 8034e5e:	008a      	lsls	r2, r1, #2
 8034e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8034e64:	f7cb fec8 	bl	8000bf8 <__aeabi_uldivmod>
 8034e68:	4602      	mov	r2, r0
 8034e6a:	460b      	mov	r3, r1
 8034e6c:	4b60      	ldr	r3, [pc, #384]	@ (8034ff0 <UART_SetConfig+0x4e4>)
 8034e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8034e72:	095b      	lsrs	r3, r3, #5
 8034e74:	011c      	lsls	r4, r3, #4
 8034e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8034e7a:	2200      	movs	r2, #0
 8034e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8034e80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8034e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8034e88:	4642      	mov	r2, r8
 8034e8a:	464b      	mov	r3, r9
 8034e8c:	1891      	adds	r1, r2, r2
 8034e8e:	61b9      	str	r1, [r7, #24]
 8034e90:	415b      	adcs	r3, r3
 8034e92:	61fb      	str	r3, [r7, #28]
 8034e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8034e98:	4641      	mov	r1, r8
 8034e9a:	1851      	adds	r1, r2, r1
 8034e9c:	6139      	str	r1, [r7, #16]
 8034e9e:	4649      	mov	r1, r9
 8034ea0:	414b      	adcs	r3, r1
 8034ea2:	617b      	str	r3, [r7, #20]
 8034ea4:	f04f 0200 	mov.w	r2, #0
 8034ea8:	f04f 0300 	mov.w	r3, #0
 8034eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8034eb0:	4659      	mov	r1, fp
 8034eb2:	00cb      	lsls	r3, r1, #3
 8034eb4:	4651      	mov	r1, sl
 8034eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8034eba:	4651      	mov	r1, sl
 8034ebc:	00ca      	lsls	r2, r1, #3
 8034ebe:	4610      	mov	r0, r2
 8034ec0:	4619      	mov	r1, r3
 8034ec2:	4603      	mov	r3, r0
 8034ec4:	4642      	mov	r2, r8
 8034ec6:	189b      	adds	r3, r3, r2
 8034ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8034ecc:	464b      	mov	r3, r9
 8034ece:	460a      	mov	r2, r1
 8034ed0:	eb42 0303 	adc.w	r3, r2, r3
 8034ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8034ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034edc:	685b      	ldr	r3, [r3, #4]
 8034ede:	2200      	movs	r2, #0
 8034ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8034ee2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8034ee4:	f04f 0200 	mov.w	r2, #0
 8034ee8:	f04f 0300 	mov.w	r3, #0
 8034eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8034ef0:	4649      	mov	r1, r9
 8034ef2:	008b      	lsls	r3, r1, #2
 8034ef4:	4641      	mov	r1, r8
 8034ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8034efa:	4641      	mov	r1, r8
 8034efc:	008a      	lsls	r2, r1, #2
 8034efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8034f02:	f7cb fe79 	bl	8000bf8 <__aeabi_uldivmod>
 8034f06:	4602      	mov	r2, r0
 8034f08:	460b      	mov	r3, r1
 8034f0a:	4611      	mov	r1, r2
 8034f0c:	4b38      	ldr	r3, [pc, #224]	@ (8034ff0 <UART_SetConfig+0x4e4>)
 8034f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8034f12:	095b      	lsrs	r3, r3, #5
 8034f14:	2264      	movs	r2, #100	@ 0x64
 8034f16:	fb02 f303 	mul.w	r3, r2, r3
 8034f1a:	1acb      	subs	r3, r1, r3
 8034f1c:	011b      	lsls	r3, r3, #4
 8034f1e:	3332      	adds	r3, #50	@ 0x32
 8034f20:	4a33      	ldr	r2, [pc, #204]	@ (8034ff0 <UART_SetConfig+0x4e4>)
 8034f22:	fba2 2303 	umull	r2, r3, r2, r3
 8034f26:	095b      	lsrs	r3, r3, #5
 8034f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8034f2c:	441c      	add	r4, r3
 8034f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8034f32:	2200      	movs	r2, #0
 8034f34:	673b      	str	r3, [r7, #112]	@ 0x70
 8034f36:	677a      	str	r2, [r7, #116]	@ 0x74
 8034f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8034f3c:	4642      	mov	r2, r8
 8034f3e:	464b      	mov	r3, r9
 8034f40:	1891      	adds	r1, r2, r2
 8034f42:	60b9      	str	r1, [r7, #8]
 8034f44:	415b      	adcs	r3, r3
 8034f46:	60fb      	str	r3, [r7, #12]
 8034f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8034f4c:	4641      	mov	r1, r8
 8034f4e:	1851      	adds	r1, r2, r1
 8034f50:	6039      	str	r1, [r7, #0]
 8034f52:	4649      	mov	r1, r9
 8034f54:	414b      	adcs	r3, r1
 8034f56:	607b      	str	r3, [r7, #4]
 8034f58:	f04f 0200 	mov.w	r2, #0
 8034f5c:	f04f 0300 	mov.w	r3, #0
 8034f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8034f64:	4659      	mov	r1, fp
 8034f66:	00cb      	lsls	r3, r1, #3
 8034f68:	4651      	mov	r1, sl
 8034f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8034f6e:	4651      	mov	r1, sl
 8034f70:	00ca      	lsls	r2, r1, #3
 8034f72:	4610      	mov	r0, r2
 8034f74:	4619      	mov	r1, r3
 8034f76:	4603      	mov	r3, r0
 8034f78:	4642      	mov	r2, r8
 8034f7a:	189b      	adds	r3, r3, r2
 8034f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8034f7e:	464b      	mov	r3, r9
 8034f80:	460a      	mov	r2, r1
 8034f82:	eb42 0303 	adc.w	r3, r2, r3
 8034f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8034f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034f8c:	685b      	ldr	r3, [r3, #4]
 8034f8e:	2200      	movs	r2, #0
 8034f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8034f92:	667a      	str	r2, [r7, #100]	@ 0x64
 8034f94:	f04f 0200 	mov.w	r2, #0
 8034f98:	f04f 0300 	mov.w	r3, #0
 8034f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8034fa0:	4649      	mov	r1, r9
 8034fa2:	008b      	lsls	r3, r1, #2
 8034fa4:	4641      	mov	r1, r8
 8034fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8034faa:	4641      	mov	r1, r8
 8034fac:	008a      	lsls	r2, r1, #2
 8034fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8034fb2:	f7cb fe21 	bl	8000bf8 <__aeabi_uldivmod>
 8034fb6:	4602      	mov	r2, r0
 8034fb8:	460b      	mov	r3, r1
 8034fba:	4b0d      	ldr	r3, [pc, #52]	@ (8034ff0 <UART_SetConfig+0x4e4>)
 8034fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8034fc0:	095b      	lsrs	r3, r3, #5
 8034fc2:	2164      	movs	r1, #100	@ 0x64
 8034fc4:	fb01 f303 	mul.w	r3, r1, r3
 8034fc8:	1ad3      	subs	r3, r2, r3
 8034fca:	011b      	lsls	r3, r3, #4
 8034fcc:	3332      	adds	r3, #50	@ 0x32
 8034fce:	4a08      	ldr	r2, [pc, #32]	@ (8034ff0 <UART_SetConfig+0x4e4>)
 8034fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8034fd4:	095b      	lsrs	r3, r3, #5
 8034fd6:	f003 020f 	and.w	r2, r3, #15
 8034fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8034fde:	681b      	ldr	r3, [r3, #0]
 8034fe0:	4422      	add	r2, r4
 8034fe2:	609a      	str	r2, [r3, #8]
}
 8034fe4:	bf00      	nop
 8034fe6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8034fea:	46bd      	mov	sp, r7
 8034fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8034ff0:	51eb851f 	.word	0x51eb851f

08034ff4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8034ff4:	b480      	push	{r7}
 8034ff6:	b083      	sub	sp, #12
 8034ff8:	af00      	add	r7, sp, #0
 8034ffa:	6078      	str	r0, [r7, #4]
 8034ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8034ffe:	683b      	ldr	r3, [r7, #0]
 8035000:	681b      	ldr	r3, [r3, #0]
 8035002:	2b00      	cmp	r3, #0
 8035004:	d123      	bne.n	803504e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8035006:	687b      	ldr	r3, [r7, #4]
 8035008:	681b      	ldr	r3, [r3, #0]
 803500a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 803500e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8035012:	683a      	ldr	r2, [r7, #0]
 8035014:	6851      	ldr	r1, [r2, #4]
 8035016:	683a      	ldr	r2, [r7, #0]
 8035018:	6892      	ldr	r2, [r2, #8]
 803501a:	4311      	orrs	r1, r2
 803501c:	683a      	ldr	r2, [r7, #0]
 803501e:	68d2      	ldr	r2, [r2, #12]
 8035020:	4311      	orrs	r1, r2
 8035022:	683a      	ldr	r2, [r7, #0]
 8035024:	6912      	ldr	r2, [r2, #16]
 8035026:	4311      	orrs	r1, r2
 8035028:	683a      	ldr	r2, [r7, #0]
 803502a:	6952      	ldr	r2, [r2, #20]
 803502c:	4311      	orrs	r1, r2
 803502e:	683a      	ldr	r2, [r7, #0]
 8035030:	6992      	ldr	r2, [r2, #24]
 8035032:	4311      	orrs	r1, r2
 8035034:	683a      	ldr	r2, [r7, #0]
 8035036:	69d2      	ldr	r2, [r2, #28]
 8035038:	4311      	orrs	r1, r2
 803503a:	683a      	ldr	r2, [r7, #0]
 803503c:	6a12      	ldr	r2, [r2, #32]
 803503e:	4311      	orrs	r1, r2
 8035040:	683a      	ldr	r2, [r7, #0]
 8035042:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8035044:	430a      	orrs	r2, r1
 8035046:	431a      	orrs	r2, r3
 8035048:	687b      	ldr	r3, [r7, #4]
 803504a:	601a      	str	r2, [r3, #0]
 803504c:	e028      	b.n	80350a0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 803504e:	687b      	ldr	r3, [r7, #4]
 8035050:	681b      	ldr	r3, [r3, #0]
 8035052:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8035056:	683b      	ldr	r3, [r7, #0]
 8035058:	69d9      	ldr	r1, [r3, #28]
 803505a:	683b      	ldr	r3, [r7, #0]
 803505c:	6a1b      	ldr	r3, [r3, #32]
 803505e:	4319      	orrs	r1, r3
 8035060:	683b      	ldr	r3, [r7, #0]
 8035062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8035064:	430b      	orrs	r3, r1
 8035066:	431a      	orrs	r2, r3
 8035068:	687b      	ldr	r3, [r7, #4]
 803506a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 803506c:	687b      	ldr	r3, [r7, #4]
 803506e:	685b      	ldr	r3, [r3, #4]
 8035070:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8035074:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8035078:	683a      	ldr	r2, [r7, #0]
 803507a:	6851      	ldr	r1, [r2, #4]
 803507c:	683a      	ldr	r2, [r7, #0]
 803507e:	6892      	ldr	r2, [r2, #8]
 8035080:	4311      	orrs	r1, r2
 8035082:	683a      	ldr	r2, [r7, #0]
 8035084:	68d2      	ldr	r2, [r2, #12]
 8035086:	4311      	orrs	r1, r2
 8035088:	683a      	ldr	r2, [r7, #0]
 803508a:	6912      	ldr	r2, [r2, #16]
 803508c:	4311      	orrs	r1, r2
 803508e:	683a      	ldr	r2, [r7, #0]
 8035090:	6952      	ldr	r2, [r2, #20]
 8035092:	4311      	orrs	r1, r2
 8035094:	683a      	ldr	r2, [r7, #0]
 8035096:	6992      	ldr	r2, [r2, #24]
 8035098:	430a      	orrs	r2, r1
 803509a:	431a      	orrs	r2, r3
 803509c:	687b      	ldr	r3, [r7, #4]
 803509e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80350a0:	2300      	movs	r3, #0
}
 80350a2:	4618      	mov	r0, r3
 80350a4:	370c      	adds	r7, #12
 80350a6:	46bd      	mov	sp, r7
 80350a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80350ac:	4770      	bx	lr

080350ae <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80350ae:	b480      	push	{r7}
 80350b0:	b085      	sub	sp, #20
 80350b2:	af00      	add	r7, sp, #0
 80350b4:	60f8      	str	r0, [r7, #12]
 80350b6:	60b9      	str	r1, [r7, #8]
 80350b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80350ba:	687b      	ldr	r3, [r7, #4]
 80350bc:	2b00      	cmp	r3, #0
 80350be:	d128      	bne.n	8035112 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80350c0:	68fb      	ldr	r3, [r7, #12]
 80350c2:	689b      	ldr	r3, [r3, #8]
 80350c4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80350c8:	68bb      	ldr	r3, [r7, #8]
 80350ca:	681b      	ldr	r3, [r3, #0]
 80350cc:	1e59      	subs	r1, r3, #1
 80350ce:	68bb      	ldr	r3, [r7, #8]
 80350d0:	685b      	ldr	r3, [r3, #4]
 80350d2:	3b01      	subs	r3, #1
 80350d4:	011b      	lsls	r3, r3, #4
 80350d6:	4319      	orrs	r1, r3
 80350d8:	68bb      	ldr	r3, [r7, #8]
 80350da:	689b      	ldr	r3, [r3, #8]
 80350dc:	3b01      	subs	r3, #1
 80350de:	021b      	lsls	r3, r3, #8
 80350e0:	4319      	orrs	r1, r3
 80350e2:	68bb      	ldr	r3, [r7, #8]
 80350e4:	68db      	ldr	r3, [r3, #12]
 80350e6:	3b01      	subs	r3, #1
 80350e8:	031b      	lsls	r3, r3, #12
 80350ea:	4319      	orrs	r1, r3
 80350ec:	68bb      	ldr	r3, [r7, #8]
 80350ee:	691b      	ldr	r3, [r3, #16]
 80350f0:	3b01      	subs	r3, #1
 80350f2:	041b      	lsls	r3, r3, #16
 80350f4:	4319      	orrs	r1, r3
 80350f6:	68bb      	ldr	r3, [r7, #8]
 80350f8:	695b      	ldr	r3, [r3, #20]
 80350fa:	3b01      	subs	r3, #1
 80350fc:	051b      	lsls	r3, r3, #20
 80350fe:	4319      	orrs	r1, r3
 8035100:	68bb      	ldr	r3, [r7, #8]
 8035102:	699b      	ldr	r3, [r3, #24]
 8035104:	3b01      	subs	r3, #1
 8035106:	061b      	lsls	r3, r3, #24
 8035108:	430b      	orrs	r3, r1
 803510a:	431a      	orrs	r2, r3
 803510c:	68fb      	ldr	r3, [r7, #12]
 803510e:	609a      	str	r2, [r3, #8]
 8035110:	e02f      	b.n	8035172 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8035112:	68fb      	ldr	r3, [r7, #12]
 8035114:	689b      	ldr	r3, [r3, #8]
 8035116:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 803511a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 803511e:	68ba      	ldr	r2, [r7, #8]
 8035120:	68d2      	ldr	r2, [r2, #12]
 8035122:	3a01      	subs	r2, #1
 8035124:	0311      	lsls	r1, r2, #12
 8035126:	68ba      	ldr	r2, [r7, #8]
 8035128:	6952      	ldr	r2, [r2, #20]
 803512a:	3a01      	subs	r2, #1
 803512c:	0512      	lsls	r2, r2, #20
 803512e:	430a      	orrs	r2, r1
 8035130:	431a      	orrs	r2, r3
 8035132:	68fb      	ldr	r3, [r7, #12]
 8035134:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8035136:	68fb      	ldr	r3, [r7, #12]
 8035138:	68db      	ldr	r3, [r3, #12]
 803513a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 803513e:	68bb      	ldr	r3, [r7, #8]
 8035140:	681b      	ldr	r3, [r3, #0]
 8035142:	1e59      	subs	r1, r3, #1
 8035144:	68bb      	ldr	r3, [r7, #8]
 8035146:	685b      	ldr	r3, [r3, #4]
 8035148:	3b01      	subs	r3, #1
 803514a:	011b      	lsls	r3, r3, #4
 803514c:	4319      	orrs	r1, r3
 803514e:	68bb      	ldr	r3, [r7, #8]
 8035150:	689b      	ldr	r3, [r3, #8]
 8035152:	3b01      	subs	r3, #1
 8035154:	021b      	lsls	r3, r3, #8
 8035156:	4319      	orrs	r1, r3
 8035158:	68bb      	ldr	r3, [r7, #8]
 803515a:	691b      	ldr	r3, [r3, #16]
 803515c:	3b01      	subs	r3, #1
 803515e:	041b      	lsls	r3, r3, #16
 8035160:	4319      	orrs	r1, r3
 8035162:	68bb      	ldr	r3, [r7, #8]
 8035164:	699b      	ldr	r3, [r3, #24]
 8035166:	3b01      	subs	r3, #1
 8035168:	061b      	lsls	r3, r3, #24
 803516a:	430b      	orrs	r3, r1
 803516c:	431a      	orrs	r2, r3
 803516e:	68fb      	ldr	r3, [r7, #12]
 8035170:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8035172:	2300      	movs	r3, #0
}
 8035174:	4618      	mov	r0, r3
 8035176:	3714      	adds	r7, #20
 8035178:	46bd      	mov	sp, r7
 803517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803517e:	4770      	bx	lr

08035180 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8035180:	b580      	push	{r7, lr}
 8035182:	b086      	sub	sp, #24
 8035184:	af00      	add	r7, sp, #0
 8035186:	60f8      	str	r0, [r7, #12]
 8035188:	60b9      	str	r1, [r7, #8]
 803518a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 803518c:	2300      	movs	r3, #0
 803518e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8035190:	68fb      	ldr	r3, [r7, #12]
 8035192:	691b      	ldr	r3, [r3, #16]
 8035194:	0d9b      	lsrs	r3, r3, #22
 8035196:	059b      	lsls	r3, r3, #22
 8035198:	68ba      	ldr	r2, [r7, #8]
 803519a:	6811      	ldr	r1, [r2, #0]
 803519c:	68ba      	ldr	r2, [r7, #8]
 803519e:	6852      	ldr	r2, [r2, #4]
 80351a0:	4311      	orrs	r1, r2
 80351a2:	68ba      	ldr	r2, [r7, #8]
 80351a4:	6892      	ldr	r2, [r2, #8]
 80351a6:	3a01      	subs	r2, #1
 80351a8:	0152      	lsls	r2, r2, #5
 80351aa:	4311      	orrs	r1, r2
 80351ac:	68ba      	ldr	r2, [r7, #8]
 80351ae:	68d2      	ldr	r2, [r2, #12]
 80351b0:	0252      	lsls	r2, r2, #9
 80351b2:	430a      	orrs	r2, r1
 80351b4:	431a      	orrs	r2, r3
 80351b6:	68fb      	ldr	r3, [r7, #12]
 80351b8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80351ba:	f7fd f98f 	bl	80324dc <HAL_GetTick>
 80351be:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80351c0:	e010      	b.n	80351e4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80351c2:	687b      	ldr	r3, [r7, #4]
 80351c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80351c8:	d00c      	beq.n	80351e4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80351ca:	687b      	ldr	r3, [r7, #4]
 80351cc:	2b00      	cmp	r3, #0
 80351ce:	d007      	beq.n	80351e0 <FMC_SDRAM_SendCommand+0x60>
 80351d0:	f7fd f984 	bl	80324dc <HAL_GetTick>
 80351d4:	4602      	mov	r2, r0
 80351d6:	697b      	ldr	r3, [r7, #20]
 80351d8:	1ad3      	subs	r3, r2, r3
 80351da:	687a      	ldr	r2, [r7, #4]
 80351dc:	429a      	cmp	r2, r3
 80351de:	d201      	bcs.n	80351e4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80351e0:	2303      	movs	r3, #3
 80351e2:	e006      	b.n	80351f2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80351e4:	68fb      	ldr	r3, [r7, #12]
 80351e6:	699b      	ldr	r3, [r3, #24]
 80351e8:	f003 0320 	and.w	r3, r3, #32
 80351ec:	2b20      	cmp	r3, #32
 80351ee:	d0e8      	beq.n	80351c2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80351f0:	2300      	movs	r3, #0
}
 80351f2:	4618      	mov	r0, r3
 80351f4:	3718      	adds	r7, #24
 80351f6:	46bd      	mov	sp, r7
 80351f8:	bd80      	pop	{r7, pc}

080351fa <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80351fa:	b480      	push	{r7}
 80351fc:	b083      	sub	sp, #12
 80351fe:	af00      	add	r7, sp, #0
 8035200:	6078      	str	r0, [r7, #4]
 8035202:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8035204:	687b      	ldr	r3, [r7, #4]
 8035206:	695b      	ldr	r3, [r3, #20]
 8035208:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 803520c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8035210:	683a      	ldr	r2, [r7, #0]
 8035212:	0052      	lsls	r2, r2, #1
 8035214:	431a      	orrs	r2, r3
 8035216:	687b      	ldr	r3, [r7, #4]
 8035218:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 803521a:	2300      	movs	r3, #0
}
 803521c:	4618      	mov	r0, r3
 803521e:	370c      	adds	r7, #12
 8035220:	46bd      	mov	sp, r7
 8035222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035226:	4770      	bx	lr

08035228 <abort>:
 8035228:	b508      	push	{r3, lr}
 803522a:	2006      	movs	r0, #6
 803522c:	f000 fd18 	bl	8035c60 <raise>
 8035230:	2001      	movs	r0, #1
 8035232:	f7f6 fb39 	bl	802b8a8 <_exit>
	...

08035238 <__assert_func>:
 8035238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803523a:	4614      	mov	r4, r2
 803523c:	461a      	mov	r2, r3
 803523e:	4b09      	ldr	r3, [pc, #36]	@ (8035264 <__assert_func+0x2c>)
 8035240:	681b      	ldr	r3, [r3, #0]
 8035242:	4605      	mov	r5, r0
 8035244:	68d8      	ldr	r0, [r3, #12]
 8035246:	b14c      	cbz	r4, 803525c <__assert_func+0x24>
 8035248:	4b07      	ldr	r3, [pc, #28]	@ (8035268 <__assert_func+0x30>)
 803524a:	9100      	str	r1, [sp, #0]
 803524c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8035250:	4906      	ldr	r1, [pc, #24]	@ (803526c <__assert_func+0x34>)
 8035252:	462b      	mov	r3, r5
 8035254:	f000 fb42 	bl	80358dc <fiprintf>
 8035258:	f7ff ffe6 	bl	8035228 <abort>
 803525c:	4b04      	ldr	r3, [pc, #16]	@ (8035270 <__assert_func+0x38>)
 803525e:	461c      	mov	r4, r3
 8035260:	e7f3      	b.n	803524a <__assert_func+0x12>
 8035262:	bf00      	nop
 8035264:	20001cc0 	.word	0x20001cc0
 8035268:	0803ce88 	.word	0x0803ce88
 803526c:	0803ce95 	.word	0x0803ce95
 8035270:	0803cec3 	.word	0x0803cec3

08035274 <calloc>:
 8035274:	4b02      	ldr	r3, [pc, #8]	@ (8035280 <calloc+0xc>)
 8035276:	460a      	mov	r2, r1
 8035278:	4601      	mov	r1, r0
 803527a:	6818      	ldr	r0, [r3, #0]
 803527c:	f000 b802 	b.w	8035284 <_calloc_r>
 8035280:	20001cc0 	.word	0x20001cc0

08035284 <_calloc_r>:
 8035284:	b570      	push	{r4, r5, r6, lr}
 8035286:	fba1 5402 	umull	r5, r4, r1, r2
 803528a:	b934      	cbnz	r4, 803529a <_calloc_r+0x16>
 803528c:	4629      	mov	r1, r5
 803528e:	f000 f83f 	bl	8035310 <_malloc_r>
 8035292:	4606      	mov	r6, r0
 8035294:	b928      	cbnz	r0, 80352a2 <_calloc_r+0x1e>
 8035296:	4630      	mov	r0, r6
 8035298:	bd70      	pop	{r4, r5, r6, pc}
 803529a:	220c      	movs	r2, #12
 803529c:	6002      	str	r2, [r0, #0]
 803529e:	2600      	movs	r6, #0
 80352a0:	e7f9      	b.n	8035296 <_calloc_r+0x12>
 80352a2:	462a      	mov	r2, r5
 80352a4:	4621      	mov	r1, r4
 80352a6:	f000 fcab 	bl	8035c00 <memset>
 80352aa:	e7f4      	b.n	8035296 <_calloc_r+0x12>

080352ac <malloc>:
 80352ac:	4b02      	ldr	r3, [pc, #8]	@ (80352b8 <malloc+0xc>)
 80352ae:	4601      	mov	r1, r0
 80352b0:	6818      	ldr	r0, [r3, #0]
 80352b2:	f000 b82d 	b.w	8035310 <_malloc_r>
 80352b6:	bf00      	nop
 80352b8:	20001cc0 	.word	0x20001cc0

080352bc <free>:
 80352bc:	4b02      	ldr	r3, [pc, #8]	@ (80352c8 <free+0xc>)
 80352be:	4601      	mov	r1, r0
 80352c0:	6818      	ldr	r0, [r3, #0]
 80352c2:	f000 be67 	b.w	8035f94 <_free_r>
 80352c6:	bf00      	nop
 80352c8:	20001cc0 	.word	0x20001cc0

080352cc <sbrk_aligned>:
 80352cc:	b570      	push	{r4, r5, r6, lr}
 80352ce:	4e0f      	ldr	r6, [pc, #60]	@ (803530c <sbrk_aligned+0x40>)
 80352d0:	460c      	mov	r4, r1
 80352d2:	6831      	ldr	r1, [r6, #0]
 80352d4:	4605      	mov	r5, r0
 80352d6:	b911      	cbnz	r1, 80352de <sbrk_aligned+0x12>
 80352d8:	f000 fd12 	bl	8035d00 <_sbrk_r>
 80352dc:	6030      	str	r0, [r6, #0]
 80352de:	4621      	mov	r1, r4
 80352e0:	4628      	mov	r0, r5
 80352e2:	f000 fd0d 	bl	8035d00 <_sbrk_r>
 80352e6:	1c43      	adds	r3, r0, #1
 80352e8:	d103      	bne.n	80352f2 <sbrk_aligned+0x26>
 80352ea:	f04f 34ff 	mov.w	r4, #4294967295
 80352ee:	4620      	mov	r0, r4
 80352f0:	bd70      	pop	{r4, r5, r6, pc}
 80352f2:	1cc4      	adds	r4, r0, #3
 80352f4:	f024 0403 	bic.w	r4, r4, #3
 80352f8:	42a0      	cmp	r0, r4
 80352fa:	d0f8      	beq.n	80352ee <sbrk_aligned+0x22>
 80352fc:	1a21      	subs	r1, r4, r0
 80352fe:	4628      	mov	r0, r5
 8035300:	f000 fcfe 	bl	8035d00 <_sbrk_r>
 8035304:	3001      	adds	r0, #1
 8035306:	d1f2      	bne.n	80352ee <sbrk_aligned+0x22>
 8035308:	e7ef      	b.n	80352ea <sbrk_aligned+0x1e>
 803530a:	bf00      	nop
 803530c:	2000223c 	.word	0x2000223c

08035310 <_malloc_r>:
 8035310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035314:	1ccd      	adds	r5, r1, #3
 8035316:	f025 0503 	bic.w	r5, r5, #3
 803531a:	3508      	adds	r5, #8
 803531c:	2d0c      	cmp	r5, #12
 803531e:	bf38      	it	cc
 8035320:	250c      	movcc	r5, #12
 8035322:	2d00      	cmp	r5, #0
 8035324:	4606      	mov	r6, r0
 8035326:	db01      	blt.n	803532c <_malloc_r+0x1c>
 8035328:	42a9      	cmp	r1, r5
 803532a:	d904      	bls.n	8035336 <_malloc_r+0x26>
 803532c:	230c      	movs	r3, #12
 803532e:	6033      	str	r3, [r6, #0]
 8035330:	2000      	movs	r0, #0
 8035332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 803540c <_malloc_r+0xfc>
 803533a:	f000 f869 	bl	8035410 <__malloc_lock>
 803533e:	f8d8 3000 	ldr.w	r3, [r8]
 8035342:	461c      	mov	r4, r3
 8035344:	bb44      	cbnz	r4, 8035398 <_malloc_r+0x88>
 8035346:	4629      	mov	r1, r5
 8035348:	4630      	mov	r0, r6
 803534a:	f7ff ffbf 	bl	80352cc <sbrk_aligned>
 803534e:	1c43      	adds	r3, r0, #1
 8035350:	4604      	mov	r4, r0
 8035352:	d158      	bne.n	8035406 <_malloc_r+0xf6>
 8035354:	f8d8 4000 	ldr.w	r4, [r8]
 8035358:	4627      	mov	r7, r4
 803535a:	2f00      	cmp	r7, #0
 803535c:	d143      	bne.n	80353e6 <_malloc_r+0xd6>
 803535e:	2c00      	cmp	r4, #0
 8035360:	d04b      	beq.n	80353fa <_malloc_r+0xea>
 8035362:	6823      	ldr	r3, [r4, #0]
 8035364:	4639      	mov	r1, r7
 8035366:	4630      	mov	r0, r6
 8035368:	eb04 0903 	add.w	r9, r4, r3
 803536c:	f000 fcc8 	bl	8035d00 <_sbrk_r>
 8035370:	4581      	cmp	r9, r0
 8035372:	d142      	bne.n	80353fa <_malloc_r+0xea>
 8035374:	6821      	ldr	r1, [r4, #0]
 8035376:	1a6d      	subs	r5, r5, r1
 8035378:	4629      	mov	r1, r5
 803537a:	4630      	mov	r0, r6
 803537c:	f7ff ffa6 	bl	80352cc <sbrk_aligned>
 8035380:	3001      	adds	r0, #1
 8035382:	d03a      	beq.n	80353fa <_malloc_r+0xea>
 8035384:	6823      	ldr	r3, [r4, #0]
 8035386:	442b      	add	r3, r5
 8035388:	6023      	str	r3, [r4, #0]
 803538a:	f8d8 3000 	ldr.w	r3, [r8]
 803538e:	685a      	ldr	r2, [r3, #4]
 8035390:	bb62      	cbnz	r2, 80353ec <_malloc_r+0xdc>
 8035392:	f8c8 7000 	str.w	r7, [r8]
 8035396:	e00f      	b.n	80353b8 <_malloc_r+0xa8>
 8035398:	6822      	ldr	r2, [r4, #0]
 803539a:	1b52      	subs	r2, r2, r5
 803539c:	d420      	bmi.n	80353e0 <_malloc_r+0xd0>
 803539e:	2a0b      	cmp	r2, #11
 80353a0:	d917      	bls.n	80353d2 <_malloc_r+0xc2>
 80353a2:	1961      	adds	r1, r4, r5
 80353a4:	42a3      	cmp	r3, r4
 80353a6:	6025      	str	r5, [r4, #0]
 80353a8:	bf18      	it	ne
 80353aa:	6059      	strne	r1, [r3, #4]
 80353ac:	6863      	ldr	r3, [r4, #4]
 80353ae:	bf08      	it	eq
 80353b0:	f8c8 1000 	streq.w	r1, [r8]
 80353b4:	5162      	str	r2, [r4, r5]
 80353b6:	604b      	str	r3, [r1, #4]
 80353b8:	4630      	mov	r0, r6
 80353ba:	f000 f82f 	bl	803541c <__malloc_unlock>
 80353be:	f104 000b 	add.w	r0, r4, #11
 80353c2:	1d23      	adds	r3, r4, #4
 80353c4:	f020 0007 	bic.w	r0, r0, #7
 80353c8:	1ac2      	subs	r2, r0, r3
 80353ca:	bf1c      	itt	ne
 80353cc:	1a1b      	subne	r3, r3, r0
 80353ce:	50a3      	strne	r3, [r4, r2]
 80353d0:	e7af      	b.n	8035332 <_malloc_r+0x22>
 80353d2:	6862      	ldr	r2, [r4, #4]
 80353d4:	42a3      	cmp	r3, r4
 80353d6:	bf0c      	ite	eq
 80353d8:	f8c8 2000 	streq.w	r2, [r8]
 80353dc:	605a      	strne	r2, [r3, #4]
 80353de:	e7eb      	b.n	80353b8 <_malloc_r+0xa8>
 80353e0:	4623      	mov	r3, r4
 80353e2:	6864      	ldr	r4, [r4, #4]
 80353e4:	e7ae      	b.n	8035344 <_malloc_r+0x34>
 80353e6:	463c      	mov	r4, r7
 80353e8:	687f      	ldr	r7, [r7, #4]
 80353ea:	e7b6      	b.n	803535a <_malloc_r+0x4a>
 80353ec:	461a      	mov	r2, r3
 80353ee:	685b      	ldr	r3, [r3, #4]
 80353f0:	42a3      	cmp	r3, r4
 80353f2:	d1fb      	bne.n	80353ec <_malloc_r+0xdc>
 80353f4:	2300      	movs	r3, #0
 80353f6:	6053      	str	r3, [r2, #4]
 80353f8:	e7de      	b.n	80353b8 <_malloc_r+0xa8>
 80353fa:	230c      	movs	r3, #12
 80353fc:	6033      	str	r3, [r6, #0]
 80353fe:	4630      	mov	r0, r6
 8035400:	f000 f80c 	bl	803541c <__malloc_unlock>
 8035404:	e794      	b.n	8035330 <_malloc_r+0x20>
 8035406:	6005      	str	r5, [r0, #0]
 8035408:	e7d6      	b.n	80353b8 <_malloc_r+0xa8>
 803540a:	bf00      	nop
 803540c:	20002240 	.word	0x20002240

08035410 <__malloc_lock>:
 8035410:	4801      	ldr	r0, [pc, #4]	@ (8035418 <__malloc_lock+0x8>)
 8035412:	f000 bcc2 	b.w	8035d9a <__retarget_lock_acquire_recursive>
 8035416:	bf00      	nop
 8035418:	20002384 	.word	0x20002384

0803541c <__malloc_unlock>:
 803541c:	4801      	ldr	r0, [pc, #4]	@ (8035424 <__malloc_unlock+0x8>)
 803541e:	f000 bcbd 	b.w	8035d9c <__retarget_lock_release_recursive>
 8035422:	bf00      	nop
 8035424:	20002384 	.word	0x20002384

08035428 <realloc>:
 8035428:	4b02      	ldr	r3, [pc, #8]	@ (8035434 <realloc+0xc>)
 803542a:	460a      	mov	r2, r1
 803542c:	4601      	mov	r1, r0
 803542e:	6818      	ldr	r0, [r3, #0]
 8035430:	f000 b802 	b.w	8035438 <_realloc_r>
 8035434:	20001cc0 	.word	0x20001cc0

08035438 <_realloc_r>:
 8035438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803543c:	4607      	mov	r7, r0
 803543e:	4614      	mov	r4, r2
 8035440:	460d      	mov	r5, r1
 8035442:	b921      	cbnz	r1, 803544e <_realloc_r+0x16>
 8035444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8035448:	4611      	mov	r1, r2
 803544a:	f7ff bf61 	b.w	8035310 <_malloc_r>
 803544e:	b92a      	cbnz	r2, 803545c <_realloc_r+0x24>
 8035450:	f000 fda0 	bl	8035f94 <_free_r>
 8035454:	4625      	mov	r5, r4
 8035456:	4628      	mov	r0, r5
 8035458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803545c:	f000 fde4 	bl	8036028 <_malloc_usable_size_r>
 8035460:	4284      	cmp	r4, r0
 8035462:	4606      	mov	r6, r0
 8035464:	d802      	bhi.n	803546c <_realloc_r+0x34>
 8035466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 803546a:	d8f4      	bhi.n	8035456 <_realloc_r+0x1e>
 803546c:	4621      	mov	r1, r4
 803546e:	4638      	mov	r0, r7
 8035470:	f7ff ff4e 	bl	8035310 <_malloc_r>
 8035474:	4680      	mov	r8, r0
 8035476:	b908      	cbnz	r0, 803547c <_realloc_r+0x44>
 8035478:	4645      	mov	r5, r8
 803547a:	e7ec      	b.n	8035456 <_realloc_r+0x1e>
 803547c:	42b4      	cmp	r4, r6
 803547e:	4622      	mov	r2, r4
 8035480:	4629      	mov	r1, r5
 8035482:	bf28      	it	cs
 8035484:	4632      	movcs	r2, r6
 8035486:	f000 fc8a 	bl	8035d9e <memcpy>
 803548a:	4629      	mov	r1, r5
 803548c:	4638      	mov	r0, r7
 803548e:	f000 fd81 	bl	8035f94 <_free_r>
 8035492:	e7f1      	b.n	8035478 <_realloc_r+0x40>

08035494 <swapfunc>:
 8035494:	2b02      	cmp	r3, #2
 8035496:	b510      	push	{r4, lr}
 8035498:	d00a      	beq.n	80354b0 <swapfunc+0x1c>
 803549a:	0892      	lsrs	r2, r2, #2
 803549c:	3a01      	subs	r2, #1
 803549e:	6803      	ldr	r3, [r0, #0]
 80354a0:	680c      	ldr	r4, [r1, #0]
 80354a2:	f840 4b04 	str.w	r4, [r0], #4
 80354a6:	2a00      	cmp	r2, #0
 80354a8:	f841 3b04 	str.w	r3, [r1], #4
 80354ac:	dcf6      	bgt.n	803549c <swapfunc+0x8>
 80354ae:	bd10      	pop	{r4, pc}
 80354b0:	4402      	add	r2, r0
 80354b2:	780c      	ldrb	r4, [r1, #0]
 80354b4:	7803      	ldrb	r3, [r0, #0]
 80354b6:	f800 4b01 	strb.w	r4, [r0], #1
 80354ba:	f801 3b01 	strb.w	r3, [r1], #1
 80354be:	1a13      	subs	r3, r2, r0
 80354c0:	2b00      	cmp	r3, #0
 80354c2:	dcf6      	bgt.n	80354b2 <swapfunc+0x1e>
 80354c4:	e7f3      	b.n	80354ae <swapfunc+0x1a>

080354c6 <med3.constprop.0>:
 80354c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80354c8:	460f      	mov	r7, r1
 80354ca:	4616      	mov	r6, r2
 80354cc:	4604      	mov	r4, r0
 80354ce:	461d      	mov	r5, r3
 80354d0:	4798      	blx	r3
 80354d2:	2800      	cmp	r0, #0
 80354d4:	4631      	mov	r1, r6
 80354d6:	4638      	mov	r0, r7
 80354d8:	da0c      	bge.n	80354f4 <med3.constprop.0+0x2e>
 80354da:	47a8      	blx	r5
 80354dc:	2800      	cmp	r0, #0
 80354de:	da02      	bge.n	80354e6 <med3.constprop.0+0x20>
 80354e0:	463c      	mov	r4, r7
 80354e2:	4620      	mov	r0, r4
 80354e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80354e6:	4631      	mov	r1, r6
 80354e8:	4620      	mov	r0, r4
 80354ea:	47a8      	blx	r5
 80354ec:	2800      	cmp	r0, #0
 80354ee:	daf8      	bge.n	80354e2 <med3.constprop.0+0x1c>
 80354f0:	4634      	mov	r4, r6
 80354f2:	e7f6      	b.n	80354e2 <med3.constprop.0+0x1c>
 80354f4:	47a8      	blx	r5
 80354f6:	2800      	cmp	r0, #0
 80354f8:	dcf2      	bgt.n	80354e0 <med3.constprop.0+0x1a>
 80354fa:	4631      	mov	r1, r6
 80354fc:	4620      	mov	r0, r4
 80354fe:	47a8      	blx	r5
 8035500:	2800      	cmp	r0, #0
 8035502:	daf5      	bge.n	80354f0 <med3.constprop.0+0x2a>
 8035504:	e7ed      	b.n	80354e2 <med3.constprop.0+0x1c>

08035506 <qsort>:
 8035506:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803550a:	b095      	sub	sp, #84	@ 0x54
 803550c:	4607      	mov	r7, r0
 803550e:	9300      	str	r3, [sp, #0]
 8035510:	ea40 0302 	orr.w	r3, r0, r2
 8035514:	079b      	lsls	r3, r3, #30
 8035516:	4615      	mov	r5, r2
 8035518:	d118      	bne.n	803554c <qsort+0x46>
 803551a:	f1b2 0804 	subs.w	r8, r2, #4
 803551e:	bf18      	it	ne
 8035520:	f04f 0801 	movne.w	r8, #1
 8035524:	2300      	movs	r3, #0
 8035526:	9301      	str	r3, [sp, #4]
 8035528:	fb05 f401 	mul.w	r4, r5, r1
 803552c:	193b      	adds	r3, r7, r4
 803552e:	2906      	cmp	r1, #6
 8035530:	eb07 0b05 	add.w	fp, r7, r5
 8035534:	9302      	str	r3, [sp, #8]
 8035536:	d828      	bhi.n	803558a <qsort+0x84>
 8035538:	9b02      	ldr	r3, [sp, #8]
 803553a:	459b      	cmp	fp, r3
 803553c:	d310      	bcc.n	8035560 <qsort+0x5a>
 803553e:	9b01      	ldr	r3, [sp, #4]
 8035540:	2b00      	cmp	r3, #0
 8035542:	f040 8117 	bne.w	8035774 <qsort+0x26e>
 8035546:	b015      	add	sp, #84	@ 0x54
 8035548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803554c:	f04f 0802 	mov.w	r8, #2
 8035550:	e7e8      	b.n	8035524 <qsort+0x1e>
 8035552:	4643      	mov	r3, r8
 8035554:	462a      	mov	r2, r5
 8035556:	4631      	mov	r1, r6
 8035558:	4620      	mov	r0, r4
 803555a:	f7ff ff9b 	bl	8035494 <swapfunc>
 803555e:	e00f      	b.n	8035580 <qsort+0x7a>
 8035560:	465c      	mov	r4, fp
 8035562:	e00e      	b.n	8035582 <qsort+0x7c>
 8035564:	1b66      	subs	r6, r4, r5
 8035566:	9b00      	ldr	r3, [sp, #0]
 8035568:	4621      	mov	r1, r4
 803556a:	4630      	mov	r0, r6
 803556c:	4798      	blx	r3
 803556e:	2800      	cmp	r0, #0
 8035570:	dd09      	ble.n	8035586 <qsort+0x80>
 8035572:	f1b8 0f00 	cmp.w	r8, #0
 8035576:	d1ec      	bne.n	8035552 <qsort+0x4c>
 8035578:	6823      	ldr	r3, [r4, #0]
 803557a:	6832      	ldr	r2, [r6, #0]
 803557c:	6022      	str	r2, [r4, #0]
 803557e:	6033      	str	r3, [r6, #0]
 8035580:	4634      	mov	r4, r6
 8035582:	42a7      	cmp	r7, r4
 8035584:	d3ee      	bcc.n	8035564 <qsort+0x5e>
 8035586:	44ab      	add	fp, r5
 8035588:	e7d6      	b.n	8035538 <qsort+0x32>
 803558a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 803558e:	1b64      	subs	r4, r4, r5
 8035590:	2907      	cmp	r1, #7
 8035592:	fb05 7909 	mla	r9, r5, r9, r7
 8035596:	443c      	add	r4, r7
 8035598:	d021      	beq.n	80355de <qsort+0xd8>
 803559a:	2928      	cmp	r1, #40	@ 0x28
 803559c:	d944      	bls.n	8035628 <qsort+0x122>
 803559e:	08ce      	lsrs	r6, r1, #3
 80355a0:	436e      	muls	r6, r5
 80355a2:	9b00      	ldr	r3, [sp, #0]
 80355a4:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 80355a8:	19b9      	adds	r1, r7, r6
 80355aa:	4638      	mov	r0, r7
 80355ac:	f7ff ff8b 	bl	80354c6 <med3.constprop.0>
 80355b0:	4649      	mov	r1, r9
 80355b2:	eb09 0206 	add.w	r2, r9, r6
 80355b6:	9b00      	ldr	r3, [sp, #0]
 80355b8:	4682      	mov	sl, r0
 80355ba:	1b88      	subs	r0, r1, r6
 80355bc:	f7ff ff83 	bl	80354c6 <med3.constprop.0>
 80355c0:	4622      	mov	r2, r4
 80355c2:	9b00      	ldr	r3, [sp, #0]
 80355c4:	4681      	mov	r9, r0
 80355c6:	1ba1      	subs	r1, r4, r6
 80355c8:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 80355cc:	f7ff ff7b 	bl	80354c6 <med3.constprop.0>
 80355d0:	4602      	mov	r2, r0
 80355d2:	4649      	mov	r1, r9
 80355d4:	9b00      	ldr	r3, [sp, #0]
 80355d6:	4650      	mov	r0, sl
 80355d8:	f7ff ff75 	bl	80354c6 <med3.constprop.0>
 80355dc:	4681      	mov	r9, r0
 80355de:	f1b8 0f00 	cmp.w	r8, #0
 80355e2:	d124      	bne.n	803562e <qsort+0x128>
 80355e4:	683b      	ldr	r3, [r7, #0]
 80355e6:	f8d9 2000 	ldr.w	r2, [r9]
 80355ea:	603a      	str	r2, [r7, #0]
 80355ec:	f8c9 3000 	str.w	r3, [r9]
 80355f0:	46d9      	mov	r9, fp
 80355f2:	46a2      	mov	sl, r4
 80355f4:	465e      	mov	r6, fp
 80355f6:	2300      	movs	r3, #0
 80355f8:	45a1      	cmp	r9, r4
 80355fa:	d836      	bhi.n	803566a <qsort+0x164>
 80355fc:	9303      	str	r3, [sp, #12]
 80355fe:	4639      	mov	r1, r7
 8035600:	9b00      	ldr	r3, [sp, #0]
 8035602:	4648      	mov	r0, r9
 8035604:	4798      	blx	r3
 8035606:	2800      	cmp	r0, #0
 8035608:	9b03      	ldr	r3, [sp, #12]
 803560a:	dc2c      	bgt.n	8035666 <qsort+0x160>
 803560c:	d10a      	bne.n	8035624 <qsort+0x11e>
 803560e:	f1b8 0f00 	cmp.w	r8, #0
 8035612:	d113      	bne.n	803563c <qsort+0x136>
 8035614:	6833      	ldr	r3, [r6, #0]
 8035616:	f8d9 2000 	ldr.w	r2, [r9]
 803561a:	6032      	str	r2, [r6, #0]
 803561c:	f8c9 3000 	str.w	r3, [r9]
 8035620:	442e      	add	r6, r5
 8035622:	2301      	movs	r3, #1
 8035624:	44a9      	add	r9, r5
 8035626:	e7e7      	b.n	80355f8 <qsort+0xf2>
 8035628:	4622      	mov	r2, r4
 803562a:	46ba      	mov	sl, r7
 803562c:	e7d1      	b.n	80355d2 <qsort+0xcc>
 803562e:	4643      	mov	r3, r8
 8035630:	462a      	mov	r2, r5
 8035632:	4649      	mov	r1, r9
 8035634:	4638      	mov	r0, r7
 8035636:	f7ff ff2d 	bl	8035494 <swapfunc>
 803563a:	e7d9      	b.n	80355f0 <qsort+0xea>
 803563c:	4643      	mov	r3, r8
 803563e:	462a      	mov	r2, r5
 8035640:	4649      	mov	r1, r9
 8035642:	4630      	mov	r0, r6
 8035644:	f7ff ff26 	bl	8035494 <swapfunc>
 8035648:	e7ea      	b.n	8035620 <qsort+0x11a>
 803564a:	d10b      	bne.n	8035664 <qsort+0x15e>
 803564c:	f1b8 0f00 	cmp.w	r8, #0
 8035650:	d113      	bne.n	803567a <qsort+0x174>
 8035652:	6823      	ldr	r3, [r4, #0]
 8035654:	f8da 2000 	ldr.w	r2, [sl]
 8035658:	6022      	str	r2, [r4, #0]
 803565a:	f8ca 3000 	str.w	r3, [sl]
 803565e:	ebaa 0a05 	sub.w	sl, sl, r5
 8035662:	2301      	movs	r3, #1
 8035664:	1b64      	subs	r4, r4, r5
 8035666:	45a1      	cmp	r9, r4
 8035668:	d90e      	bls.n	8035688 <qsort+0x182>
 803566a:	2b00      	cmp	r3, #0
 803566c:	d140      	bne.n	80356f0 <qsort+0x1ea>
 803566e:	9b02      	ldr	r3, [sp, #8]
 8035670:	459b      	cmp	fp, r3
 8035672:	f4bf af64 	bcs.w	803553e <qsort+0x38>
 8035676:	465c      	mov	r4, fp
 8035678:	e036      	b.n	80356e8 <qsort+0x1e2>
 803567a:	4643      	mov	r3, r8
 803567c:	462a      	mov	r2, r5
 803567e:	4651      	mov	r1, sl
 8035680:	4620      	mov	r0, r4
 8035682:	f7ff ff07 	bl	8035494 <swapfunc>
 8035686:	e7ea      	b.n	803565e <qsort+0x158>
 8035688:	9303      	str	r3, [sp, #12]
 803568a:	4639      	mov	r1, r7
 803568c:	9b00      	ldr	r3, [sp, #0]
 803568e:	4620      	mov	r0, r4
 8035690:	4798      	blx	r3
 8035692:	2800      	cmp	r0, #0
 8035694:	9b03      	ldr	r3, [sp, #12]
 8035696:	dad8      	bge.n	803564a <qsort+0x144>
 8035698:	f1b8 0f00 	cmp.w	r8, #0
 803569c:	d107      	bne.n	80356ae <qsort+0x1a8>
 803569e:	f8d9 3000 	ldr.w	r3, [r9]
 80356a2:	6822      	ldr	r2, [r4, #0]
 80356a4:	f8c9 2000 	str.w	r2, [r9]
 80356a8:	6023      	str	r3, [r4, #0]
 80356aa:	1b64      	subs	r4, r4, r5
 80356ac:	e7b9      	b.n	8035622 <qsort+0x11c>
 80356ae:	4643      	mov	r3, r8
 80356b0:	462a      	mov	r2, r5
 80356b2:	4621      	mov	r1, r4
 80356b4:	4648      	mov	r0, r9
 80356b6:	f7ff feed 	bl	8035494 <swapfunc>
 80356ba:	e7f6      	b.n	80356aa <qsort+0x1a4>
 80356bc:	4643      	mov	r3, r8
 80356be:	462a      	mov	r2, r5
 80356c0:	4631      	mov	r1, r6
 80356c2:	4620      	mov	r0, r4
 80356c4:	f7ff fee6 	bl	8035494 <swapfunc>
 80356c8:	e00d      	b.n	80356e6 <qsort+0x1e0>
 80356ca:	1b66      	subs	r6, r4, r5
 80356cc:	9b00      	ldr	r3, [sp, #0]
 80356ce:	4621      	mov	r1, r4
 80356d0:	4630      	mov	r0, r6
 80356d2:	4798      	blx	r3
 80356d4:	2800      	cmp	r0, #0
 80356d6:	dd09      	ble.n	80356ec <qsort+0x1e6>
 80356d8:	f1b8 0f00 	cmp.w	r8, #0
 80356dc:	d1ee      	bne.n	80356bc <qsort+0x1b6>
 80356de:	6823      	ldr	r3, [r4, #0]
 80356e0:	6832      	ldr	r2, [r6, #0]
 80356e2:	6022      	str	r2, [r4, #0]
 80356e4:	6033      	str	r3, [r6, #0]
 80356e6:	4634      	mov	r4, r6
 80356e8:	42a7      	cmp	r7, r4
 80356ea:	d3ee      	bcc.n	80356ca <qsort+0x1c4>
 80356ec:	44ab      	add	fp, r5
 80356ee:	e7be      	b.n	803566e <qsort+0x168>
 80356f0:	eba9 0b06 	sub.w	fp, r9, r6
 80356f4:	1bf2      	subs	r2, r6, r7
 80356f6:	455a      	cmp	r2, fp
 80356f8:	bfa8      	it	ge
 80356fa:	465a      	movge	r2, fp
 80356fc:	b12a      	cbz	r2, 803570a <qsort+0x204>
 80356fe:	4643      	mov	r3, r8
 8035700:	eba9 0102 	sub.w	r1, r9, r2
 8035704:	4638      	mov	r0, r7
 8035706:	f7ff fec5 	bl	8035494 <swapfunc>
 803570a:	9b02      	ldr	r3, [sp, #8]
 803570c:	eba3 020a 	sub.w	r2, r3, sl
 8035710:	ebaa 0404 	sub.w	r4, sl, r4
 8035714:	1b52      	subs	r2, r2, r5
 8035716:	42a2      	cmp	r2, r4
 8035718:	bf28      	it	cs
 803571a:	4622      	movcs	r2, r4
 803571c:	b12a      	cbz	r2, 803572a <qsort+0x224>
 803571e:	9902      	ldr	r1, [sp, #8]
 8035720:	4643      	mov	r3, r8
 8035722:	1a89      	subs	r1, r1, r2
 8035724:	4648      	mov	r0, r9
 8035726:	f7ff feb5 	bl	8035494 <swapfunc>
 803572a:	9b02      	ldr	r3, [sp, #8]
 803572c:	455c      	cmp	r4, fp
 803572e:	eba3 0604 	sub.w	r6, r3, r4
 8035732:	d805      	bhi.n	8035740 <qsort+0x23a>
 8035734:	4623      	mov	r3, r4
 8035736:	465c      	mov	r4, fp
 8035738:	469b      	mov	fp, r3
 803573a:	4633      	mov	r3, r6
 803573c:	463e      	mov	r6, r7
 803573e:	461f      	mov	r7, r3
 8035740:	45ab      	cmp	fp, r5
 8035742:	d920      	bls.n	8035786 <qsort+0x280>
 8035744:	fbbb f1f5 	udiv	r1, fp, r5
 8035748:	9b01      	ldr	r3, [sp, #4]
 803574a:	2b07      	cmp	r3, #7
 803574c:	d80b      	bhi.n	8035766 <qsort+0x260>
 803574e:	fbb4 f4f5 	udiv	r4, r4, r5
 8035752:	aa14      	add	r2, sp, #80	@ 0x50
 8035754:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8035758:	f843 6c40 	str.w	r6, [r3, #-64]
 803575c:	f843 4c3c 	str.w	r4, [r3, #-60]
 8035760:	9b01      	ldr	r3, [sp, #4]
 8035762:	3301      	adds	r3, #1
 8035764:	e6df      	b.n	8035526 <qsort+0x20>
 8035766:	9b00      	ldr	r3, [sp, #0]
 8035768:	462a      	mov	r2, r5
 803576a:	4638      	mov	r0, r7
 803576c:	f7ff fecb 	bl	8035506 <qsort>
 8035770:	42ac      	cmp	r4, r5
 8035772:	d80b      	bhi.n	803578c <qsort+0x286>
 8035774:	9b01      	ldr	r3, [sp, #4]
 8035776:	aa14      	add	r2, sp, #80	@ 0x50
 8035778:	3b01      	subs	r3, #1
 803577a:	9301      	str	r3, [sp, #4]
 803577c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8035780:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8035784:	e6d0      	b.n	8035528 <qsort+0x22>
 8035786:	42ac      	cmp	r4, r5
 8035788:	f67f aed9 	bls.w	803553e <qsort+0x38>
 803578c:	fbb4 f1f5 	udiv	r1, r4, r5
 8035790:	4637      	mov	r7, r6
 8035792:	e6c9      	b.n	8035528 <qsort+0x22>

08035794 <std>:
 8035794:	2300      	movs	r3, #0
 8035796:	b510      	push	{r4, lr}
 8035798:	4604      	mov	r4, r0
 803579a:	e9c0 3300 	strd	r3, r3, [r0]
 803579e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80357a2:	6083      	str	r3, [r0, #8]
 80357a4:	8181      	strh	r1, [r0, #12]
 80357a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80357a8:	81c2      	strh	r2, [r0, #14]
 80357aa:	6183      	str	r3, [r0, #24]
 80357ac:	4619      	mov	r1, r3
 80357ae:	2208      	movs	r2, #8
 80357b0:	305c      	adds	r0, #92	@ 0x5c
 80357b2:	f000 fa25 	bl	8035c00 <memset>
 80357b6:	4b0d      	ldr	r3, [pc, #52]	@ (80357ec <std+0x58>)
 80357b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80357ba:	4b0d      	ldr	r3, [pc, #52]	@ (80357f0 <std+0x5c>)
 80357bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80357be:	4b0d      	ldr	r3, [pc, #52]	@ (80357f4 <std+0x60>)
 80357c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80357c2:	4b0d      	ldr	r3, [pc, #52]	@ (80357f8 <std+0x64>)
 80357c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80357c6:	4b0d      	ldr	r3, [pc, #52]	@ (80357fc <std+0x68>)
 80357c8:	6224      	str	r4, [r4, #32]
 80357ca:	429c      	cmp	r4, r3
 80357cc:	d006      	beq.n	80357dc <std+0x48>
 80357ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80357d2:	4294      	cmp	r4, r2
 80357d4:	d002      	beq.n	80357dc <std+0x48>
 80357d6:	33d0      	adds	r3, #208	@ 0xd0
 80357d8:	429c      	cmp	r4, r3
 80357da:	d105      	bne.n	80357e8 <std+0x54>
 80357dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80357e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80357e4:	f000 bad8 	b.w	8035d98 <__retarget_lock_init_recursive>
 80357e8:	bd10      	pop	{r4, pc}
 80357ea:	bf00      	nop
 80357ec:	08035a1d 	.word	0x08035a1d
 80357f0:	08035a3f 	.word	0x08035a3f
 80357f4:	08035a77 	.word	0x08035a77
 80357f8:	08035a9b 	.word	0x08035a9b
 80357fc:	20002244 	.word	0x20002244

08035800 <stdio_exit_handler>:
 8035800:	4a02      	ldr	r2, [pc, #8]	@ (803580c <stdio_exit_handler+0xc>)
 8035802:	4903      	ldr	r1, [pc, #12]	@ (8035810 <stdio_exit_handler+0x10>)
 8035804:	4803      	ldr	r0, [pc, #12]	@ (8035814 <stdio_exit_handler+0x14>)
 8035806:	f000 b87b 	b.w	8035900 <_fwalk_sglue>
 803580a:	bf00      	nop
 803580c:	20001cb4 	.word	0x20001cb4
 8035810:	080366dd 	.word	0x080366dd
 8035814:	20001cc4 	.word	0x20001cc4

08035818 <cleanup_stdio>:
 8035818:	6841      	ldr	r1, [r0, #4]
 803581a:	4b0c      	ldr	r3, [pc, #48]	@ (803584c <cleanup_stdio+0x34>)
 803581c:	4299      	cmp	r1, r3
 803581e:	b510      	push	{r4, lr}
 8035820:	4604      	mov	r4, r0
 8035822:	d001      	beq.n	8035828 <cleanup_stdio+0x10>
 8035824:	f000 ff5a 	bl	80366dc <_fflush_r>
 8035828:	68a1      	ldr	r1, [r4, #8]
 803582a:	4b09      	ldr	r3, [pc, #36]	@ (8035850 <cleanup_stdio+0x38>)
 803582c:	4299      	cmp	r1, r3
 803582e:	d002      	beq.n	8035836 <cleanup_stdio+0x1e>
 8035830:	4620      	mov	r0, r4
 8035832:	f000 ff53 	bl	80366dc <_fflush_r>
 8035836:	68e1      	ldr	r1, [r4, #12]
 8035838:	4b06      	ldr	r3, [pc, #24]	@ (8035854 <cleanup_stdio+0x3c>)
 803583a:	4299      	cmp	r1, r3
 803583c:	d004      	beq.n	8035848 <cleanup_stdio+0x30>
 803583e:	4620      	mov	r0, r4
 8035840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035844:	f000 bf4a 	b.w	80366dc <_fflush_r>
 8035848:	bd10      	pop	{r4, pc}
 803584a:	bf00      	nop
 803584c:	20002244 	.word	0x20002244
 8035850:	200022ac 	.word	0x200022ac
 8035854:	20002314 	.word	0x20002314

08035858 <global_stdio_init.part.0>:
 8035858:	b510      	push	{r4, lr}
 803585a:	4b0b      	ldr	r3, [pc, #44]	@ (8035888 <global_stdio_init.part.0+0x30>)
 803585c:	4c0b      	ldr	r4, [pc, #44]	@ (803588c <global_stdio_init.part.0+0x34>)
 803585e:	4a0c      	ldr	r2, [pc, #48]	@ (8035890 <global_stdio_init.part.0+0x38>)
 8035860:	601a      	str	r2, [r3, #0]
 8035862:	4620      	mov	r0, r4
 8035864:	2200      	movs	r2, #0
 8035866:	2104      	movs	r1, #4
 8035868:	f7ff ff94 	bl	8035794 <std>
 803586c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8035870:	2201      	movs	r2, #1
 8035872:	2109      	movs	r1, #9
 8035874:	f7ff ff8e 	bl	8035794 <std>
 8035878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 803587c:	2202      	movs	r2, #2
 803587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035882:	2112      	movs	r1, #18
 8035884:	f7ff bf86 	b.w	8035794 <std>
 8035888:	2000237c 	.word	0x2000237c
 803588c:	20002244 	.word	0x20002244
 8035890:	08035801 	.word	0x08035801

08035894 <__sfp_lock_acquire>:
 8035894:	4801      	ldr	r0, [pc, #4]	@ (803589c <__sfp_lock_acquire+0x8>)
 8035896:	f000 ba80 	b.w	8035d9a <__retarget_lock_acquire_recursive>
 803589a:	bf00      	nop
 803589c:	20002385 	.word	0x20002385

080358a0 <__sfp_lock_release>:
 80358a0:	4801      	ldr	r0, [pc, #4]	@ (80358a8 <__sfp_lock_release+0x8>)
 80358a2:	f000 ba7b 	b.w	8035d9c <__retarget_lock_release_recursive>
 80358a6:	bf00      	nop
 80358a8:	20002385 	.word	0x20002385

080358ac <__sinit>:
 80358ac:	b510      	push	{r4, lr}
 80358ae:	4604      	mov	r4, r0
 80358b0:	f7ff fff0 	bl	8035894 <__sfp_lock_acquire>
 80358b4:	6a23      	ldr	r3, [r4, #32]
 80358b6:	b11b      	cbz	r3, 80358c0 <__sinit+0x14>
 80358b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80358bc:	f7ff bff0 	b.w	80358a0 <__sfp_lock_release>
 80358c0:	4b04      	ldr	r3, [pc, #16]	@ (80358d4 <__sinit+0x28>)
 80358c2:	6223      	str	r3, [r4, #32]
 80358c4:	4b04      	ldr	r3, [pc, #16]	@ (80358d8 <__sinit+0x2c>)
 80358c6:	681b      	ldr	r3, [r3, #0]
 80358c8:	2b00      	cmp	r3, #0
 80358ca:	d1f5      	bne.n	80358b8 <__sinit+0xc>
 80358cc:	f7ff ffc4 	bl	8035858 <global_stdio_init.part.0>
 80358d0:	e7f2      	b.n	80358b8 <__sinit+0xc>
 80358d2:	bf00      	nop
 80358d4:	08035819 	.word	0x08035819
 80358d8:	2000237c 	.word	0x2000237c

080358dc <fiprintf>:
 80358dc:	b40e      	push	{r1, r2, r3}
 80358de:	b503      	push	{r0, r1, lr}
 80358e0:	4601      	mov	r1, r0
 80358e2:	ab03      	add	r3, sp, #12
 80358e4:	4805      	ldr	r0, [pc, #20]	@ (80358fc <fiprintf+0x20>)
 80358e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80358ea:	6800      	ldr	r0, [r0, #0]
 80358ec:	9301      	str	r3, [sp, #4]
 80358ee:	f000 fbcd 	bl	803608c <_vfiprintf_r>
 80358f2:	b002      	add	sp, #8
 80358f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80358f8:	b003      	add	sp, #12
 80358fa:	4770      	bx	lr
 80358fc:	20001cc0 	.word	0x20001cc0

08035900 <_fwalk_sglue>:
 8035900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035904:	4607      	mov	r7, r0
 8035906:	4688      	mov	r8, r1
 8035908:	4614      	mov	r4, r2
 803590a:	2600      	movs	r6, #0
 803590c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8035910:	f1b9 0901 	subs.w	r9, r9, #1
 8035914:	d505      	bpl.n	8035922 <_fwalk_sglue+0x22>
 8035916:	6824      	ldr	r4, [r4, #0]
 8035918:	2c00      	cmp	r4, #0
 803591a:	d1f7      	bne.n	803590c <_fwalk_sglue+0xc>
 803591c:	4630      	mov	r0, r6
 803591e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035922:	89ab      	ldrh	r3, [r5, #12]
 8035924:	2b01      	cmp	r3, #1
 8035926:	d907      	bls.n	8035938 <_fwalk_sglue+0x38>
 8035928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803592c:	3301      	adds	r3, #1
 803592e:	d003      	beq.n	8035938 <_fwalk_sglue+0x38>
 8035930:	4629      	mov	r1, r5
 8035932:	4638      	mov	r0, r7
 8035934:	47c0      	blx	r8
 8035936:	4306      	orrs	r6, r0
 8035938:	3568      	adds	r5, #104	@ 0x68
 803593a:	e7e9      	b.n	8035910 <_fwalk_sglue+0x10>

0803593c <iprintf>:
 803593c:	b40f      	push	{r0, r1, r2, r3}
 803593e:	b507      	push	{r0, r1, r2, lr}
 8035940:	4906      	ldr	r1, [pc, #24]	@ (803595c <iprintf+0x20>)
 8035942:	ab04      	add	r3, sp, #16
 8035944:	6808      	ldr	r0, [r1, #0]
 8035946:	f853 2b04 	ldr.w	r2, [r3], #4
 803594a:	6881      	ldr	r1, [r0, #8]
 803594c:	9301      	str	r3, [sp, #4]
 803594e:	f000 fb9d 	bl	803608c <_vfiprintf_r>
 8035952:	b003      	add	sp, #12
 8035954:	f85d eb04 	ldr.w	lr, [sp], #4
 8035958:	b004      	add	sp, #16
 803595a:	4770      	bx	lr
 803595c:	20001cc0 	.word	0x20001cc0

08035960 <_puts_r>:
 8035960:	6a03      	ldr	r3, [r0, #32]
 8035962:	b570      	push	{r4, r5, r6, lr}
 8035964:	6884      	ldr	r4, [r0, #8]
 8035966:	4605      	mov	r5, r0
 8035968:	460e      	mov	r6, r1
 803596a:	b90b      	cbnz	r3, 8035970 <_puts_r+0x10>
 803596c:	f7ff ff9e 	bl	80358ac <__sinit>
 8035970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035972:	07db      	lsls	r3, r3, #31
 8035974:	d405      	bmi.n	8035982 <_puts_r+0x22>
 8035976:	89a3      	ldrh	r3, [r4, #12]
 8035978:	0598      	lsls	r0, r3, #22
 803597a:	d402      	bmi.n	8035982 <_puts_r+0x22>
 803597c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803597e:	f000 fa0c 	bl	8035d9a <__retarget_lock_acquire_recursive>
 8035982:	89a3      	ldrh	r3, [r4, #12]
 8035984:	0719      	lsls	r1, r3, #28
 8035986:	d502      	bpl.n	803598e <_puts_r+0x2e>
 8035988:	6923      	ldr	r3, [r4, #16]
 803598a:	2b00      	cmp	r3, #0
 803598c:	d135      	bne.n	80359fa <_puts_r+0x9a>
 803598e:	4621      	mov	r1, r4
 8035990:	4628      	mov	r0, r5
 8035992:	f000 f8c5 	bl	8035b20 <__swsetup_r>
 8035996:	b380      	cbz	r0, 80359fa <_puts_r+0x9a>
 8035998:	f04f 35ff 	mov.w	r5, #4294967295
 803599c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803599e:	07da      	lsls	r2, r3, #31
 80359a0:	d405      	bmi.n	80359ae <_puts_r+0x4e>
 80359a2:	89a3      	ldrh	r3, [r4, #12]
 80359a4:	059b      	lsls	r3, r3, #22
 80359a6:	d402      	bmi.n	80359ae <_puts_r+0x4e>
 80359a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80359aa:	f000 f9f7 	bl	8035d9c <__retarget_lock_release_recursive>
 80359ae:	4628      	mov	r0, r5
 80359b0:	bd70      	pop	{r4, r5, r6, pc}
 80359b2:	2b00      	cmp	r3, #0
 80359b4:	da04      	bge.n	80359c0 <_puts_r+0x60>
 80359b6:	69a2      	ldr	r2, [r4, #24]
 80359b8:	429a      	cmp	r2, r3
 80359ba:	dc17      	bgt.n	80359ec <_puts_r+0x8c>
 80359bc:	290a      	cmp	r1, #10
 80359be:	d015      	beq.n	80359ec <_puts_r+0x8c>
 80359c0:	6823      	ldr	r3, [r4, #0]
 80359c2:	1c5a      	adds	r2, r3, #1
 80359c4:	6022      	str	r2, [r4, #0]
 80359c6:	7019      	strb	r1, [r3, #0]
 80359c8:	68a3      	ldr	r3, [r4, #8]
 80359ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80359ce:	3b01      	subs	r3, #1
 80359d0:	60a3      	str	r3, [r4, #8]
 80359d2:	2900      	cmp	r1, #0
 80359d4:	d1ed      	bne.n	80359b2 <_puts_r+0x52>
 80359d6:	2b00      	cmp	r3, #0
 80359d8:	da11      	bge.n	80359fe <_puts_r+0x9e>
 80359da:	4622      	mov	r2, r4
 80359dc:	210a      	movs	r1, #10
 80359de:	4628      	mov	r0, r5
 80359e0:	f000 f85f 	bl	8035aa2 <__swbuf_r>
 80359e4:	3001      	adds	r0, #1
 80359e6:	d0d7      	beq.n	8035998 <_puts_r+0x38>
 80359e8:	250a      	movs	r5, #10
 80359ea:	e7d7      	b.n	803599c <_puts_r+0x3c>
 80359ec:	4622      	mov	r2, r4
 80359ee:	4628      	mov	r0, r5
 80359f0:	f000 f857 	bl	8035aa2 <__swbuf_r>
 80359f4:	3001      	adds	r0, #1
 80359f6:	d1e7      	bne.n	80359c8 <_puts_r+0x68>
 80359f8:	e7ce      	b.n	8035998 <_puts_r+0x38>
 80359fa:	3e01      	subs	r6, #1
 80359fc:	e7e4      	b.n	80359c8 <_puts_r+0x68>
 80359fe:	6823      	ldr	r3, [r4, #0]
 8035a00:	1c5a      	adds	r2, r3, #1
 8035a02:	6022      	str	r2, [r4, #0]
 8035a04:	220a      	movs	r2, #10
 8035a06:	701a      	strb	r2, [r3, #0]
 8035a08:	e7ee      	b.n	80359e8 <_puts_r+0x88>
	...

08035a0c <puts>:
 8035a0c:	4b02      	ldr	r3, [pc, #8]	@ (8035a18 <puts+0xc>)
 8035a0e:	4601      	mov	r1, r0
 8035a10:	6818      	ldr	r0, [r3, #0]
 8035a12:	f7ff bfa5 	b.w	8035960 <_puts_r>
 8035a16:	bf00      	nop
 8035a18:	20001cc0 	.word	0x20001cc0

08035a1c <__sread>:
 8035a1c:	b510      	push	{r4, lr}
 8035a1e:	460c      	mov	r4, r1
 8035a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035a24:	f000 f946 	bl	8035cb4 <_read_r>
 8035a28:	2800      	cmp	r0, #0
 8035a2a:	bfab      	itete	ge
 8035a2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8035a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8035a30:	181b      	addge	r3, r3, r0
 8035a32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8035a36:	bfac      	ite	ge
 8035a38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8035a3a:	81a3      	strhlt	r3, [r4, #12]
 8035a3c:	bd10      	pop	{r4, pc}

08035a3e <__swrite>:
 8035a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035a42:	461f      	mov	r7, r3
 8035a44:	898b      	ldrh	r3, [r1, #12]
 8035a46:	05db      	lsls	r3, r3, #23
 8035a48:	4605      	mov	r5, r0
 8035a4a:	460c      	mov	r4, r1
 8035a4c:	4616      	mov	r6, r2
 8035a4e:	d505      	bpl.n	8035a5c <__swrite+0x1e>
 8035a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035a54:	2302      	movs	r3, #2
 8035a56:	2200      	movs	r2, #0
 8035a58:	f000 f91a 	bl	8035c90 <_lseek_r>
 8035a5c:	89a3      	ldrh	r3, [r4, #12]
 8035a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8035a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8035a66:	81a3      	strh	r3, [r4, #12]
 8035a68:	4632      	mov	r2, r6
 8035a6a:	463b      	mov	r3, r7
 8035a6c:	4628      	mov	r0, r5
 8035a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8035a72:	f000 b955 	b.w	8035d20 <_write_r>

08035a76 <__sseek>:
 8035a76:	b510      	push	{r4, lr}
 8035a78:	460c      	mov	r4, r1
 8035a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035a7e:	f000 f907 	bl	8035c90 <_lseek_r>
 8035a82:	1c43      	adds	r3, r0, #1
 8035a84:	89a3      	ldrh	r3, [r4, #12]
 8035a86:	bf15      	itete	ne
 8035a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8035a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8035a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8035a92:	81a3      	strheq	r3, [r4, #12]
 8035a94:	bf18      	it	ne
 8035a96:	81a3      	strhne	r3, [r4, #12]
 8035a98:	bd10      	pop	{r4, pc}

08035a9a <__sclose>:
 8035a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035a9e:	f000 b8e7 	b.w	8035c70 <_close_r>

08035aa2 <__swbuf_r>:
 8035aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035aa4:	460e      	mov	r6, r1
 8035aa6:	4614      	mov	r4, r2
 8035aa8:	4605      	mov	r5, r0
 8035aaa:	b118      	cbz	r0, 8035ab4 <__swbuf_r+0x12>
 8035aac:	6a03      	ldr	r3, [r0, #32]
 8035aae:	b90b      	cbnz	r3, 8035ab4 <__swbuf_r+0x12>
 8035ab0:	f7ff fefc 	bl	80358ac <__sinit>
 8035ab4:	69a3      	ldr	r3, [r4, #24]
 8035ab6:	60a3      	str	r3, [r4, #8]
 8035ab8:	89a3      	ldrh	r3, [r4, #12]
 8035aba:	071a      	lsls	r2, r3, #28
 8035abc:	d501      	bpl.n	8035ac2 <__swbuf_r+0x20>
 8035abe:	6923      	ldr	r3, [r4, #16]
 8035ac0:	b943      	cbnz	r3, 8035ad4 <__swbuf_r+0x32>
 8035ac2:	4621      	mov	r1, r4
 8035ac4:	4628      	mov	r0, r5
 8035ac6:	f000 f82b 	bl	8035b20 <__swsetup_r>
 8035aca:	b118      	cbz	r0, 8035ad4 <__swbuf_r+0x32>
 8035acc:	f04f 37ff 	mov.w	r7, #4294967295
 8035ad0:	4638      	mov	r0, r7
 8035ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035ad4:	6823      	ldr	r3, [r4, #0]
 8035ad6:	6922      	ldr	r2, [r4, #16]
 8035ad8:	1a98      	subs	r0, r3, r2
 8035ada:	6963      	ldr	r3, [r4, #20]
 8035adc:	b2f6      	uxtb	r6, r6
 8035ade:	4283      	cmp	r3, r0
 8035ae0:	4637      	mov	r7, r6
 8035ae2:	dc05      	bgt.n	8035af0 <__swbuf_r+0x4e>
 8035ae4:	4621      	mov	r1, r4
 8035ae6:	4628      	mov	r0, r5
 8035ae8:	f000 fdf8 	bl	80366dc <_fflush_r>
 8035aec:	2800      	cmp	r0, #0
 8035aee:	d1ed      	bne.n	8035acc <__swbuf_r+0x2a>
 8035af0:	68a3      	ldr	r3, [r4, #8]
 8035af2:	3b01      	subs	r3, #1
 8035af4:	60a3      	str	r3, [r4, #8]
 8035af6:	6823      	ldr	r3, [r4, #0]
 8035af8:	1c5a      	adds	r2, r3, #1
 8035afa:	6022      	str	r2, [r4, #0]
 8035afc:	701e      	strb	r6, [r3, #0]
 8035afe:	6962      	ldr	r2, [r4, #20]
 8035b00:	1c43      	adds	r3, r0, #1
 8035b02:	429a      	cmp	r2, r3
 8035b04:	d004      	beq.n	8035b10 <__swbuf_r+0x6e>
 8035b06:	89a3      	ldrh	r3, [r4, #12]
 8035b08:	07db      	lsls	r3, r3, #31
 8035b0a:	d5e1      	bpl.n	8035ad0 <__swbuf_r+0x2e>
 8035b0c:	2e0a      	cmp	r6, #10
 8035b0e:	d1df      	bne.n	8035ad0 <__swbuf_r+0x2e>
 8035b10:	4621      	mov	r1, r4
 8035b12:	4628      	mov	r0, r5
 8035b14:	f000 fde2 	bl	80366dc <_fflush_r>
 8035b18:	2800      	cmp	r0, #0
 8035b1a:	d0d9      	beq.n	8035ad0 <__swbuf_r+0x2e>
 8035b1c:	e7d6      	b.n	8035acc <__swbuf_r+0x2a>
	...

08035b20 <__swsetup_r>:
 8035b20:	b538      	push	{r3, r4, r5, lr}
 8035b22:	4b29      	ldr	r3, [pc, #164]	@ (8035bc8 <__swsetup_r+0xa8>)
 8035b24:	4605      	mov	r5, r0
 8035b26:	6818      	ldr	r0, [r3, #0]
 8035b28:	460c      	mov	r4, r1
 8035b2a:	b118      	cbz	r0, 8035b34 <__swsetup_r+0x14>
 8035b2c:	6a03      	ldr	r3, [r0, #32]
 8035b2e:	b90b      	cbnz	r3, 8035b34 <__swsetup_r+0x14>
 8035b30:	f7ff febc 	bl	80358ac <__sinit>
 8035b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035b38:	0719      	lsls	r1, r3, #28
 8035b3a:	d422      	bmi.n	8035b82 <__swsetup_r+0x62>
 8035b3c:	06da      	lsls	r2, r3, #27
 8035b3e:	d407      	bmi.n	8035b50 <__swsetup_r+0x30>
 8035b40:	2209      	movs	r2, #9
 8035b42:	602a      	str	r2, [r5, #0]
 8035b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035b48:	81a3      	strh	r3, [r4, #12]
 8035b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8035b4e:	e033      	b.n	8035bb8 <__swsetup_r+0x98>
 8035b50:	0758      	lsls	r0, r3, #29
 8035b52:	d512      	bpl.n	8035b7a <__swsetup_r+0x5a>
 8035b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8035b56:	b141      	cbz	r1, 8035b6a <__swsetup_r+0x4a>
 8035b58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8035b5c:	4299      	cmp	r1, r3
 8035b5e:	d002      	beq.n	8035b66 <__swsetup_r+0x46>
 8035b60:	4628      	mov	r0, r5
 8035b62:	f000 fa17 	bl	8035f94 <_free_r>
 8035b66:	2300      	movs	r3, #0
 8035b68:	6363      	str	r3, [r4, #52]	@ 0x34
 8035b6a:	89a3      	ldrh	r3, [r4, #12]
 8035b6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8035b70:	81a3      	strh	r3, [r4, #12]
 8035b72:	2300      	movs	r3, #0
 8035b74:	6063      	str	r3, [r4, #4]
 8035b76:	6923      	ldr	r3, [r4, #16]
 8035b78:	6023      	str	r3, [r4, #0]
 8035b7a:	89a3      	ldrh	r3, [r4, #12]
 8035b7c:	f043 0308 	orr.w	r3, r3, #8
 8035b80:	81a3      	strh	r3, [r4, #12]
 8035b82:	6923      	ldr	r3, [r4, #16]
 8035b84:	b94b      	cbnz	r3, 8035b9a <__swsetup_r+0x7a>
 8035b86:	89a3      	ldrh	r3, [r4, #12]
 8035b88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8035b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8035b90:	d003      	beq.n	8035b9a <__swsetup_r+0x7a>
 8035b92:	4621      	mov	r1, r4
 8035b94:	4628      	mov	r0, r5
 8035b96:	f000 fdef 	bl	8036778 <__smakebuf_r>
 8035b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035b9e:	f013 0201 	ands.w	r2, r3, #1
 8035ba2:	d00a      	beq.n	8035bba <__swsetup_r+0x9a>
 8035ba4:	2200      	movs	r2, #0
 8035ba6:	60a2      	str	r2, [r4, #8]
 8035ba8:	6962      	ldr	r2, [r4, #20]
 8035baa:	4252      	negs	r2, r2
 8035bac:	61a2      	str	r2, [r4, #24]
 8035bae:	6922      	ldr	r2, [r4, #16]
 8035bb0:	b942      	cbnz	r2, 8035bc4 <__swsetup_r+0xa4>
 8035bb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8035bb6:	d1c5      	bne.n	8035b44 <__swsetup_r+0x24>
 8035bb8:	bd38      	pop	{r3, r4, r5, pc}
 8035bba:	0799      	lsls	r1, r3, #30
 8035bbc:	bf58      	it	pl
 8035bbe:	6962      	ldrpl	r2, [r4, #20]
 8035bc0:	60a2      	str	r2, [r4, #8]
 8035bc2:	e7f4      	b.n	8035bae <__swsetup_r+0x8e>
 8035bc4:	2000      	movs	r0, #0
 8035bc6:	e7f7      	b.n	8035bb8 <__swsetup_r+0x98>
 8035bc8:	20001cc0 	.word	0x20001cc0

08035bcc <memmove>:
 8035bcc:	4288      	cmp	r0, r1
 8035bce:	b510      	push	{r4, lr}
 8035bd0:	eb01 0402 	add.w	r4, r1, r2
 8035bd4:	d902      	bls.n	8035bdc <memmove+0x10>
 8035bd6:	4284      	cmp	r4, r0
 8035bd8:	4623      	mov	r3, r4
 8035bda:	d807      	bhi.n	8035bec <memmove+0x20>
 8035bdc:	1e43      	subs	r3, r0, #1
 8035bde:	42a1      	cmp	r1, r4
 8035be0:	d008      	beq.n	8035bf4 <memmove+0x28>
 8035be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8035be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8035bea:	e7f8      	b.n	8035bde <memmove+0x12>
 8035bec:	4402      	add	r2, r0
 8035bee:	4601      	mov	r1, r0
 8035bf0:	428a      	cmp	r2, r1
 8035bf2:	d100      	bne.n	8035bf6 <memmove+0x2a>
 8035bf4:	bd10      	pop	{r4, pc}
 8035bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8035bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8035bfe:	e7f7      	b.n	8035bf0 <memmove+0x24>

08035c00 <memset>:
 8035c00:	4402      	add	r2, r0
 8035c02:	4603      	mov	r3, r0
 8035c04:	4293      	cmp	r3, r2
 8035c06:	d100      	bne.n	8035c0a <memset+0xa>
 8035c08:	4770      	bx	lr
 8035c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8035c0e:	e7f9      	b.n	8035c04 <memset+0x4>

08035c10 <_raise_r>:
 8035c10:	291f      	cmp	r1, #31
 8035c12:	b538      	push	{r3, r4, r5, lr}
 8035c14:	4605      	mov	r5, r0
 8035c16:	460c      	mov	r4, r1
 8035c18:	d904      	bls.n	8035c24 <_raise_r+0x14>
 8035c1a:	2316      	movs	r3, #22
 8035c1c:	6003      	str	r3, [r0, #0]
 8035c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8035c22:	bd38      	pop	{r3, r4, r5, pc}
 8035c24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8035c26:	b112      	cbz	r2, 8035c2e <_raise_r+0x1e>
 8035c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8035c2c:	b94b      	cbnz	r3, 8035c42 <_raise_r+0x32>
 8035c2e:	4628      	mov	r0, r5
 8035c30:	f000 f864 	bl	8035cfc <_getpid_r>
 8035c34:	4622      	mov	r2, r4
 8035c36:	4601      	mov	r1, r0
 8035c38:	4628      	mov	r0, r5
 8035c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035c3e:	f000 b84b 	b.w	8035cd8 <_kill_r>
 8035c42:	2b01      	cmp	r3, #1
 8035c44:	d00a      	beq.n	8035c5c <_raise_r+0x4c>
 8035c46:	1c59      	adds	r1, r3, #1
 8035c48:	d103      	bne.n	8035c52 <_raise_r+0x42>
 8035c4a:	2316      	movs	r3, #22
 8035c4c:	6003      	str	r3, [r0, #0]
 8035c4e:	2001      	movs	r0, #1
 8035c50:	e7e7      	b.n	8035c22 <_raise_r+0x12>
 8035c52:	2100      	movs	r1, #0
 8035c54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8035c58:	4620      	mov	r0, r4
 8035c5a:	4798      	blx	r3
 8035c5c:	2000      	movs	r0, #0
 8035c5e:	e7e0      	b.n	8035c22 <_raise_r+0x12>

08035c60 <raise>:
 8035c60:	4b02      	ldr	r3, [pc, #8]	@ (8035c6c <raise+0xc>)
 8035c62:	4601      	mov	r1, r0
 8035c64:	6818      	ldr	r0, [r3, #0]
 8035c66:	f7ff bfd3 	b.w	8035c10 <_raise_r>
 8035c6a:	bf00      	nop
 8035c6c:	20001cc0 	.word	0x20001cc0

08035c70 <_close_r>:
 8035c70:	b538      	push	{r3, r4, r5, lr}
 8035c72:	4d06      	ldr	r5, [pc, #24]	@ (8035c8c <_close_r+0x1c>)
 8035c74:	2300      	movs	r3, #0
 8035c76:	4604      	mov	r4, r0
 8035c78:	4608      	mov	r0, r1
 8035c7a:	602b      	str	r3, [r5, #0]
 8035c7c:	f7f5 fe3c 	bl	802b8f8 <_close>
 8035c80:	1c43      	adds	r3, r0, #1
 8035c82:	d102      	bne.n	8035c8a <_close_r+0x1a>
 8035c84:	682b      	ldr	r3, [r5, #0]
 8035c86:	b103      	cbz	r3, 8035c8a <_close_r+0x1a>
 8035c88:	6023      	str	r3, [r4, #0]
 8035c8a:	bd38      	pop	{r3, r4, r5, pc}
 8035c8c:	20002380 	.word	0x20002380

08035c90 <_lseek_r>:
 8035c90:	b538      	push	{r3, r4, r5, lr}
 8035c92:	4d07      	ldr	r5, [pc, #28]	@ (8035cb0 <_lseek_r+0x20>)
 8035c94:	4604      	mov	r4, r0
 8035c96:	4608      	mov	r0, r1
 8035c98:	4611      	mov	r1, r2
 8035c9a:	2200      	movs	r2, #0
 8035c9c:	602a      	str	r2, [r5, #0]
 8035c9e:	461a      	mov	r2, r3
 8035ca0:	f7f5 fe51 	bl	802b946 <_lseek>
 8035ca4:	1c43      	adds	r3, r0, #1
 8035ca6:	d102      	bne.n	8035cae <_lseek_r+0x1e>
 8035ca8:	682b      	ldr	r3, [r5, #0]
 8035caa:	b103      	cbz	r3, 8035cae <_lseek_r+0x1e>
 8035cac:	6023      	str	r3, [r4, #0]
 8035cae:	bd38      	pop	{r3, r4, r5, pc}
 8035cb0:	20002380 	.word	0x20002380

08035cb4 <_read_r>:
 8035cb4:	b538      	push	{r3, r4, r5, lr}
 8035cb6:	4d07      	ldr	r5, [pc, #28]	@ (8035cd4 <_read_r+0x20>)
 8035cb8:	4604      	mov	r4, r0
 8035cba:	4608      	mov	r0, r1
 8035cbc:	4611      	mov	r1, r2
 8035cbe:	2200      	movs	r2, #0
 8035cc0:	602a      	str	r2, [r5, #0]
 8035cc2:	461a      	mov	r2, r3
 8035cc4:	f7f5 fdfb 	bl	802b8be <_read>
 8035cc8:	1c43      	adds	r3, r0, #1
 8035cca:	d102      	bne.n	8035cd2 <_read_r+0x1e>
 8035ccc:	682b      	ldr	r3, [r5, #0]
 8035cce:	b103      	cbz	r3, 8035cd2 <_read_r+0x1e>
 8035cd0:	6023      	str	r3, [r4, #0]
 8035cd2:	bd38      	pop	{r3, r4, r5, pc}
 8035cd4:	20002380 	.word	0x20002380

08035cd8 <_kill_r>:
 8035cd8:	b538      	push	{r3, r4, r5, lr}
 8035cda:	4d07      	ldr	r5, [pc, #28]	@ (8035cf8 <_kill_r+0x20>)
 8035cdc:	2300      	movs	r3, #0
 8035cde:	4604      	mov	r4, r0
 8035ce0:	4608      	mov	r0, r1
 8035ce2:	4611      	mov	r1, r2
 8035ce4:	602b      	str	r3, [r5, #0]
 8035ce6:	f7f5 fdcf 	bl	802b888 <_kill>
 8035cea:	1c43      	adds	r3, r0, #1
 8035cec:	d102      	bne.n	8035cf4 <_kill_r+0x1c>
 8035cee:	682b      	ldr	r3, [r5, #0]
 8035cf0:	b103      	cbz	r3, 8035cf4 <_kill_r+0x1c>
 8035cf2:	6023      	str	r3, [r4, #0]
 8035cf4:	bd38      	pop	{r3, r4, r5, pc}
 8035cf6:	bf00      	nop
 8035cf8:	20002380 	.word	0x20002380

08035cfc <_getpid_r>:
 8035cfc:	f7f5 bdbc 	b.w	802b878 <_getpid>

08035d00 <_sbrk_r>:
 8035d00:	b538      	push	{r3, r4, r5, lr}
 8035d02:	4d06      	ldr	r5, [pc, #24]	@ (8035d1c <_sbrk_r+0x1c>)
 8035d04:	2300      	movs	r3, #0
 8035d06:	4604      	mov	r4, r0
 8035d08:	4608      	mov	r0, r1
 8035d0a:	602b      	str	r3, [r5, #0]
 8035d0c:	f7f5 fe28 	bl	802b960 <_sbrk>
 8035d10:	1c43      	adds	r3, r0, #1
 8035d12:	d102      	bne.n	8035d1a <_sbrk_r+0x1a>
 8035d14:	682b      	ldr	r3, [r5, #0]
 8035d16:	b103      	cbz	r3, 8035d1a <_sbrk_r+0x1a>
 8035d18:	6023      	str	r3, [r4, #0]
 8035d1a:	bd38      	pop	{r3, r4, r5, pc}
 8035d1c:	20002380 	.word	0x20002380

08035d20 <_write_r>:
 8035d20:	b538      	push	{r3, r4, r5, lr}
 8035d22:	4d07      	ldr	r5, [pc, #28]	@ (8035d40 <_write_r+0x20>)
 8035d24:	4604      	mov	r4, r0
 8035d26:	4608      	mov	r0, r1
 8035d28:	4611      	mov	r1, r2
 8035d2a:	2200      	movs	r2, #0
 8035d2c:	602a      	str	r2, [r5, #0]
 8035d2e:	461a      	mov	r2, r3
 8035d30:	f7ec fb74 	bl	802241c <_write>
 8035d34:	1c43      	adds	r3, r0, #1
 8035d36:	d102      	bne.n	8035d3e <_write_r+0x1e>
 8035d38:	682b      	ldr	r3, [r5, #0]
 8035d3a:	b103      	cbz	r3, 8035d3e <_write_r+0x1e>
 8035d3c:	6023      	str	r3, [r4, #0]
 8035d3e:	bd38      	pop	{r3, r4, r5, pc}
 8035d40:	20002380 	.word	0x20002380

08035d44 <__errno>:
 8035d44:	4b01      	ldr	r3, [pc, #4]	@ (8035d4c <__errno+0x8>)
 8035d46:	6818      	ldr	r0, [r3, #0]
 8035d48:	4770      	bx	lr
 8035d4a:	bf00      	nop
 8035d4c:	20001cc0 	.word	0x20001cc0

08035d50 <__libc_init_array>:
 8035d50:	b570      	push	{r4, r5, r6, lr}
 8035d52:	4d0d      	ldr	r5, [pc, #52]	@ (8035d88 <__libc_init_array+0x38>)
 8035d54:	4c0d      	ldr	r4, [pc, #52]	@ (8035d8c <__libc_init_array+0x3c>)
 8035d56:	1b64      	subs	r4, r4, r5
 8035d58:	10a4      	asrs	r4, r4, #2
 8035d5a:	2600      	movs	r6, #0
 8035d5c:	42a6      	cmp	r6, r4
 8035d5e:	d109      	bne.n	8035d74 <__libc_init_array+0x24>
 8035d60:	4d0b      	ldr	r5, [pc, #44]	@ (8035d90 <__libc_init_array+0x40>)
 8035d62:	4c0c      	ldr	r4, [pc, #48]	@ (8035d94 <__libc_init_array+0x44>)
 8035d64:	f000 fdac 	bl	80368c0 <_init>
 8035d68:	1b64      	subs	r4, r4, r5
 8035d6a:	10a4      	asrs	r4, r4, #2
 8035d6c:	2600      	movs	r6, #0
 8035d6e:	42a6      	cmp	r6, r4
 8035d70:	d105      	bne.n	8035d7e <__libc_init_array+0x2e>
 8035d72:	bd70      	pop	{r4, r5, r6, pc}
 8035d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8035d78:	4798      	blx	r3
 8035d7a:	3601      	adds	r6, #1
 8035d7c:	e7ee      	b.n	8035d5c <__libc_init_array+0xc>
 8035d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8035d82:	4798      	blx	r3
 8035d84:	3601      	adds	r6, #1
 8035d86:	e7f2      	b.n	8035d6e <__libc_init_array+0x1e>
 8035d88:	0803cf00 	.word	0x0803cf00
 8035d8c:	0803cf00 	.word	0x0803cf00
 8035d90:	0803cf00 	.word	0x0803cf00
 8035d94:	0803cf04 	.word	0x0803cf04

08035d98 <__retarget_lock_init_recursive>:
 8035d98:	4770      	bx	lr

08035d9a <__retarget_lock_acquire_recursive>:
 8035d9a:	4770      	bx	lr

08035d9c <__retarget_lock_release_recursive>:
 8035d9c:	4770      	bx	lr

08035d9e <memcpy>:
 8035d9e:	440a      	add	r2, r1
 8035da0:	4291      	cmp	r1, r2
 8035da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8035da6:	d100      	bne.n	8035daa <memcpy+0xc>
 8035da8:	4770      	bx	lr
 8035daa:	b510      	push	{r4, lr}
 8035dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8035db4:	4291      	cmp	r1, r2
 8035db6:	d1f9      	bne.n	8035dac <memcpy+0xe>
 8035db8:	bd10      	pop	{r4, pc}

08035dba <ldexp>:
 8035dba:	b510      	push	{r4, lr}
 8035dbc:	ed2d 8b02 	vpush	{d8}
 8035dc0:	eeb0 8a40 	vmov.f32	s16, s0
 8035dc4:	eef0 8a60 	vmov.f32	s17, s1
 8035dc8:	4604      	mov	r4, r0
 8035dca:	f000 f8d7 	bl	8035f7c <finite>
 8035dce:	b1f8      	cbz	r0, 8035e10 <ldexp+0x56>
 8035dd0:	ec51 0b18 	vmov	r0, r1, d8
 8035dd4:	2200      	movs	r2, #0
 8035dd6:	2300      	movs	r3, #0
 8035dd8:	f7ca fe7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8035ddc:	b9c0      	cbnz	r0, 8035e10 <ldexp+0x56>
 8035dde:	eeb0 0a48 	vmov.f32	s0, s16
 8035de2:	eef0 0a68 	vmov.f32	s1, s17
 8035de6:	4620      	mov	r0, r4
 8035de8:	f000 f84e 	bl	8035e88 <scalbn>
 8035dec:	eeb0 8a40 	vmov.f32	s16, s0
 8035df0:	eef0 8a60 	vmov.f32	s17, s1
 8035df4:	f000 f8c2 	bl	8035f7c <finite>
 8035df8:	b130      	cbz	r0, 8035e08 <ldexp+0x4e>
 8035dfa:	ec51 0b18 	vmov	r0, r1, d8
 8035dfe:	2200      	movs	r2, #0
 8035e00:	2300      	movs	r3, #0
 8035e02:	f7ca fe69 	bl	8000ad8 <__aeabi_dcmpeq>
 8035e06:	b118      	cbz	r0, 8035e10 <ldexp+0x56>
 8035e08:	f7ff ff9c 	bl	8035d44 <__errno>
 8035e0c:	2322      	movs	r3, #34	@ 0x22
 8035e0e:	6003      	str	r3, [r0, #0]
 8035e10:	eeb0 0a48 	vmov.f32	s0, s16
 8035e14:	eef0 0a68 	vmov.f32	s1, s17
 8035e18:	ecbd 8b02 	vpop	{d8}
 8035e1c:	bd10      	pop	{r4, pc}
	...

08035e20 <frexp>:
 8035e20:	b570      	push	{r4, r5, r6, lr}
 8035e22:	2100      	movs	r1, #0
 8035e24:	ec55 4b10 	vmov	r4, r5, d0
 8035e28:	6001      	str	r1, [r0, #0]
 8035e2a:	4914      	ldr	r1, [pc, #80]	@ (8035e7c <frexp+0x5c>)
 8035e2c:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8035e30:	428b      	cmp	r3, r1
 8035e32:	4606      	mov	r6, r0
 8035e34:	462a      	mov	r2, r5
 8035e36:	d81e      	bhi.n	8035e76 <frexp+0x56>
 8035e38:	4621      	mov	r1, r4
 8035e3a:	4319      	orrs	r1, r3
 8035e3c:	d01b      	beq.n	8035e76 <frexp+0x56>
 8035e3e:	4910      	ldr	r1, [pc, #64]	@ (8035e80 <frexp+0x60>)
 8035e40:	4029      	ands	r1, r5
 8035e42:	b961      	cbnz	r1, 8035e5e <frexp+0x3e>
 8035e44:	4b0f      	ldr	r3, [pc, #60]	@ (8035e84 <frexp+0x64>)
 8035e46:	2200      	movs	r2, #0
 8035e48:	4620      	mov	r0, r4
 8035e4a:	4629      	mov	r1, r5
 8035e4c:	f7ca fbdc 	bl	8000608 <__aeabi_dmul>
 8035e50:	460a      	mov	r2, r1
 8035e52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8035e56:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8035e5a:	4604      	mov	r4, r0
 8035e5c:	6031      	str	r1, [r6, #0]
 8035e5e:	6831      	ldr	r1, [r6, #0]
 8035e60:	151b      	asrs	r3, r3, #20
 8035e62:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8035e66:	f36f 521e 	bfc	r2, #20, #11
 8035e6a:	4419      	add	r1, r3
 8035e6c:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8035e70:	6031      	str	r1, [r6, #0]
 8035e72:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8035e76:	ec45 4b10 	vmov	d0, r4, r5
 8035e7a:	bd70      	pop	{r4, r5, r6, pc}
 8035e7c:	7fefffff 	.word	0x7fefffff
 8035e80:	7ff00000 	.word	0x7ff00000
 8035e84:	43500000 	.word	0x43500000

08035e88 <scalbn>:
 8035e88:	b570      	push	{r4, r5, r6, lr}
 8035e8a:	ec55 4b10 	vmov	r4, r5, d0
 8035e8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8035e92:	4606      	mov	r6, r0
 8035e94:	462b      	mov	r3, r5
 8035e96:	b991      	cbnz	r1, 8035ebe <scalbn+0x36>
 8035e98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8035e9c:	4323      	orrs	r3, r4
 8035e9e:	d03b      	beq.n	8035f18 <scalbn+0x90>
 8035ea0:	4b33      	ldr	r3, [pc, #204]	@ (8035f70 <scalbn+0xe8>)
 8035ea2:	4620      	mov	r0, r4
 8035ea4:	4629      	mov	r1, r5
 8035ea6:	2200      	movs	r2, #0
 8035ea8:	f7ca fbae 	bl	8000608 <__aeabi_dmul>
 8035eac:	4b31      	ldr	r3, [pc, #196]	@ (8035f74 <scalbn+0xec>)
 8035eae:	429e      	cmp	r6, r3
 8035eb0:	4604      	mov	r4, r0
 8035eb2:	460d      	mov	r5, r1
 8035eb4:	da0f      	bge.n	8035ed6 <scalbn+0x4e>
 8035eb6:	a326      	add	r3, pc, #152	@ (adr r3, 8035f50 <scalbn+0xc8>)
 8035eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035ebc:	e01e      	b.n	8035efc <scalbn+0x74>
 8035ebe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8035ec2:	4291      	cmp	r1, r2
 8035ec4:	d10b      	bne.n	8035ede <scalbn+0x56>
 8035ec6:	4622      	mov	r2, r4
 8035ec8:	4620      	mov	r0, r4
 8035eca:	4629      	mov	r1, r5
 8035ecc:	f7ca f9e6 	bl	800029c <__adddf3>
 8035ed0:	4604      	mov	r4, r0
 8035ed2:	460d      	mov	r5, r1
 8035ed4:	e020      	b.n	8035f18 <scalbn+0x90>
 8035ed6:	460b      	mov	r3, r1
 8035ed8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8035edc:	3936      	subs	r1, #54	@ 0x36
 8035ede:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8035ee2:	4296      	cmp	r6, r2
 8035ee4:	dd0d      	ble.n	8035f02 <scalbn+0x7a>
 8035ee6:	2d00      	cmp	r5, #0
 8035ee8:	a11b      	add	r1, pc, #108	@ (adr r1, 8035f58 <scalbn+0xd0>)
 8035eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035eee:	da02      	bge.n	8035ef6 <scalbn+0x6e>
 8035ef0:	a11b      	add	r1, pc, #108	@ (adr r1, 8035f60 <scalbn+0xd8>)
 8035ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035ef6:	a318      	add	r3, pc, #96	@ (adr r3, 8035f58 <scalbn+0xd0>)
 8035ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035efc:	f7ca fb84 	bl	8000608 <__aeabi_dmul>
 8035f00:	e7e6      	b.n	8035ed0 <scalbn+0x48>
 8035f02:	1872      	adds	r2, r6, r1
 8035f04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8035f08:	428a      	cmp	r2, r1
 8035f0a:	dcec      	bgt.n	8035ee6 <scalbn+0x5e>
 8035f0c:	2a00      	cmp	r2, #0
 8035f0e:	dd06      	ble.n	8035f1e <scalbn+0x96>
 8035f10:	f36f 531e 	bfc	r3, #20, #11
 8035f14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8035f18:	ec45 4b10 	vmov	d0, r4, r5
 8035f1c:	bd70      	pop	{r4, r5, r6, pc}
 8035f1e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8035f22:	da08      	bge.n	8035f36 <scalbn+0xae>
 8035f24:	2d00      	cmp	r5, #0
 8035f26:	a10a      	add	r1, pc, #40	@ (adr r1, 8035f50 <scalbn+0xc8>)
 8035f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035f2c:	dac3      	bge.n	8035eb6 <scalbn+0x2e>
 8035f2e:	a10e      	add	r1, pc, #56	@ (adr r1, 8035f68 <scalbn+0xe0>)
 8035f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8035f34:	e7bf      	b.n	8035eb6 <scalbn+0x2e>
 8035f36:	3236      	adds	r2, #54	@ 0x36
 8035f38:	f36f 531e 	bfc	r3, #20, #11
 8035f3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8035f40:	4620      	mov	r0, r4
 8035f42:	4b0d      	ldr	r3, [pc, #52]	@ (8035f78 <scalbn+0xf0>)
 8035f44:	4629      	mov	r1, r5
 8035f46:	2200      	movs	r2, #0
 8035f48:	e7d8      	b.n	8035efc <scalbn+0x74>
 8035f4a:	bf00      	nop
 8035f4c:	f3af 8000 	nop.w
 8035f50:	c2f8f359 	.word	0xc2f8f359
 8035f54:	01a56e1f 	.word	0x01a56e1f
 8035f58:	8800759c 	.word	0x8800759c
 8035f5c:	7e37e43c 	.word	0x7e37e43c
 8035f60:	8800759c 	.word	0x8800759c
 8035f64:	fe37e43c 	.word	0xfe37e43c
 8035f68:	c2f8f359 	.word	0xc2f8f359
 8035f6c:	81a56e1f 	.word	0x81a56e1f
 8035f70:	43500000 	.word	0x43500000
 8035f74:	ffff3cb0 	.word	0xffff3cb0
 8035f78:	3c900000 	.word	0x3c900000

08035f7c <finite>:
 8035f7c:	b082      	sub	sp, #8
 8035f7e:	ed8d 0b00 	vstr	d0, [sp]
 8035f82:	9801      	ldr	r0, [sp, #4]
 8035f84:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8035f88:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8035f8c:	0fc0      	lsrs	r0, r0, #31
 8035f8e:	b002      	add	sp, #8
 8035f90:	4770      	bx	lr
	...

08035f94 <_free_r>:
 8035f94:	b538      	push	{r3, r4, r5, lr}
 8035f96:	4605      	mov	r5, r0
 8035f98:	2900      	cmp	r1, #0
 8035f9a:	d041      	beq.n	8036020 <_free_r+0x8c>
 8035f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8035fa0:	1f0c      	subs	r4, r1, #4
 8035fa2:	2b00      	cmp	r3, #0
 8035fa4:	bfb8      	it	lt
 8035fa6:	18e4      	addlt	r4, r4, r3
 8035fa8:	f7ff fa32 	bl	8035410 <__malloc_lock>
 8035fac:	4a1d      	ldr	r2, [pc, #116]	@ (8036024 <_free_r+0x90>)
 8035fae:	6813      	ldr	r3, [r2, #0]
 8035fb0:	b933      	cbnz	r3, 8035fc0 <_free_r+0x2c>
 8035fb2:	6063      	str	r3, [r4, #4]
 8035fb4:	6014      	str	r4, [r2, #0]
 8035fb6:	4628      	mov	r0, r5
 8035fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035fbc:	f7ff ba2e 	b.w	803541c <__malloc_unlock>
 8035fc0:	42a3      	cmp	r3, r4
 8035fc2:	d908      	bls.n	8035fd6 <_free_r+0x42>
 8035fc4:	6820      	ldr	r0, [r4, #0]
 8035fc6:	1821      	adds	r1, r4, r0
 8035fc8:	428b      	cmp	r3, r1
 8035fca:	bf01      	itttt	eq
 8035fcc:	6819      	ldreq	r1, [r3, #0]
 8035fce:	685b      	ldreq	r3, [r3, #4]
 8035fd0:	1809      	addeq	r1, r1, r0
 8035fd2:	6021      	streq	r1, [r4, #0]
 8035fd4:	e7ed      	b.n	8035fb2 <_free_r+0x1e>
 8035fd6:	461a      	mov	r2, r3
 8035fd8:	685b      	ldr	r3, [r3, #4]
 8035fda:	b10b      	cbz	r3, 8035fe0 <_free_r+0x4c>
 8035fdc:	42a3      	cmp	r3, r4
 8035fde:	d9fa      	bls.n	8035fd6 <_free_r+0x42>
 8035fe0:	6811      	ldr	r1, [r2, #0]
 8035fe2:	1850      	adds	r0, r2, r1
 8035fe4:	42a0      	cmp	r0, r4
 8035fe6:	d10b      	bne.n	8036000 <_free_r+0x6c>
 8035fe8:	6820      	ldr	r0, [r4, #0]
 8035fea:	4401      	add	r1, r0
 8035fec:	1850      	adds	r0, r2, r1
 8035fee:	4283      	cmp	r3, r0
 8035ff0:	6011      	str	r1, [r2, #0]
 8035ff2:	d1e0      	bne.n	8035fb6 <_free_r+0x22>
 8035ff4:	6818      	ldr	r0, [r3, #0]
 8035ff6:	685b      	ldr	r3, [r3, #4]
 8035ff8:	6053      	str	r3, [r2, #4]
 8035ffa:	4408      	add	r0, r1
 8035ffc:	6010      	str	r0, [r2, #0]
 8035ffe:	e7da      	b.n	8035fb6 <_free_r+0x22>
 8036000:	d902      	bls.n	8036008 <_free_r+0x74>
 8036002:	230c      	movs	r3, #12
 8036004:	602b      	str	r3, [r5, #0]
 8036006:	e7d6      	b.n	8035fb6 <_free_r+0x22>
 8036008:	6820      	ldr	r0, [r4, #0]
 803600a:	1821      	adds	r1, r4, r0
 803600c:	428b      	cmp	r3, r1
 803600e:	bf04      	itt	eq
 8036010:	6819      	ldreq	r1, [r3, #0]
 8036012:	685b      	ldreq	r3, [r3, #4]
 8036014:	6063      	str	r3, [r4, #4]
 8036016:	bf04      	itt	eq
 8036018:	1809      	addeq	r1, r1, r0
 803601a:	6021      	streq	r1, [r4, #0]
 803601c:	6054      	str	r4, [r2, #4]
 803601e:	e7ca      	b.n	8035fb6 <_free_r+0x22>
 8036020:	bd38      	pop	{r3, r4, r5, pc}
 8036022:	bf00      	nop
 8036024:	20002240 	.word	0x20002240

08036028 <_malloc_usable_size_r>:
 8036028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803602c:	1f18      	subs	r0, r3, #4
 803602e:	2b00      	cmp	r3, #0
 8036030:	bfbc      	itt	lt
 8036032:	580b      	ldrlt	r3, [r1, r0]
 8036034:	18c0      	addlt	r0, r0, r3
 8036036:	4770      	bx	lr

08036038 <__sfputc_r>:
 8036038:	6893      	ldr	r3, [r2, #8]
 803603a:	3b01      	subs	r3, #1
 803603c:	2b00      	cmp	r3, #0
 803603e:	b410      	push	{r4}
 8036040:	6093      	str	r3, [r2, #8]
 8036042:	da08      	bge.n	8036056 <__sfputc_r+0x1e>
 8036044:	6994      	ldr	r4, [r2, #24]
 8036046:	42a3      	cmp	r3, r4
 8036048:	db01      	blt.n	803604e <__sfputc_r+0x16>
 803604a:	290a      	cmp	r1, #10
 803604c:	d103      	bne.n	8036056 <__sfputc_r+0x1e>
 803604e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8036052:	f7ff bd26 	b.w	8035aa2 <__swbuf_r>
 8036056:	6813      	ldr	r3, [r2, #0]
 8036058:	1c58      	adds	r0, r3, #1
 803605a:	6010      	str	r0, [r2, #0]
 803605c:	7019      	strb	r1, [r3, #0]
 803605e:	4608      	mov	r0, r1
 8036060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8036064:	4770      	bx	lr

08036066 <__sfputs_r>:
 8036066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036068:	4606      	mov	r6, r0
 803606a:	460f      	mov	r7, r1
 803606c:	4614      	mov	r4, r2
 803606e:	18d5      	adds	r5, r2, r3
 8036070:	42ac      	cmp	r4, r5
 8036072:	d101      	bne.n	8036078 <__sfputs_r+0x12>
 8036074:	2000      	movs	r0, #0
 8036076:	e007      	b.n	8036088 <__sfputs_r+0x22>
 8036078:	f814 1b01 	ldrb.w	r1, [r4], #1
 803607c:	463a      	mov	r2, r7
 803607e:	4630      	mov	r0, r6
 8036080:	f7ff ffda 	bl	8036038 <__sfputc_r>
 8036084:	1c43      	adds	r3, r0, #1
 8036086:	d1f3      	bne.n	8036070 <__sfputs_r+0xa>
 8036088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803608c <_vfiprintf_r>:
 803608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036090:	460d      	mov	r5, r1
 8036092:	b09d      	sub	sp, #116	@ 0x74
 8036094:	4614      	mov	r4, r2
 8036096:	4698      	mov	r8, r3
 8036098:	4606      	mov	r6, r0
 803609a:	b118      	cbz	r0, 80360a4 <_vfiprintf_r+0x18>
 803609c:	6a03      	ldr	r3, [r0, #32]
 803609e:	b90b      	cbnz	r3, 80360a4 <_vfiprintf_r+0x18>
 80360a0:	f7ff fc04 	bl	80358ac <__sinit>
 80360a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80360a6:	07d9      	lsls	r1, r3, #31
 80360a8:	d405      	bmi.n	80360b6 <_vfiprintf_r+0x2a>
 80360aa:	89ab      	ldrh	r3, [r5, #12]
 80360ac:	059a      	lsls	r2, r3, #22
 80360ae:	d402      	bmi.n	80360b6 <_vfiprintf_r+0x2a>
 80360b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80360b2:	f7ff fe72 	bl	8035d9a <__retarget_lock_acquire_recursive>
 80360b6:	89ab      	ldrh	r3, [r5, #12]
 80360b8:	071b      	lsls	r3, r3, #28
 80360ba:	d501      	bpl.n	80360c0 <_vfiprintf_r+0x34>
 80360bc:	692b      	ldr	r3, [r5, #16]
 80360be:	b99b      	cbnz	r3, 80360e8 <_vfiprintf_r+0x5c>
 80360c0:	4629      	mov	r1, r5
 80360c2:	4630      	mov	r0, r6
 80360c4:	f7ff fd2c 	bl	8035b20 <__swsetup_r>
 80360c8:	b170      	cbz	r0, 80360e8 <_vfiprintf_r+0x5c>
 80360ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80360cc:	07dc      	lsls	r4, r3, #31
 80360ce:	d504      	bpl.n	80360da <_vfiprintf_r+0x4e>
 80360d0:	f04f 30ff 	mov.w	r0, #4294967295
 80360d4:	b01d      	add	sp, #116	@ 0x74
 80360d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80360da:	89ab      	ldrh	r3, [r5, #12]
 80360dc:	0598      	lsls	r0, r3, #22
 80360de:	d4f7      	bmi.n	80360d0 <_vfiprintf_r+0x44>
 80360e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80360e2:	f7ff fe5b 	bl	8035d9c <__retarget_lock_release_recursive>
 80360e6:	e7f3      	b.n	80360d0 <_vfiprintf_r+0x44>
 80360e8:	2300      	movs	r3, #0
 80360ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80360ec:	2320      	movs	r3, #32
 80360ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80360f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80360f6:	2330      	movs	r3, #48	@ 0x30
 80360f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80362a8 <_vfiprintf_r+0x21c>
 80360fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8036100:	f04f 0901 	mov.w	r9, #1
 8036104:	4623      	mov	r3, r4
 8036106:	469a      	mov	sl, r3
 8036108:	f813 2b01 	ldrb.w	r2, [r3], #1
 803610c:	b10a      	cbz	r2, 8036112 <_vfiprintf_r+0x86>
 803610e:	2a25      	cmp	r2, #37	@ 0x25
 8036110:	d1f9      	bne.n	8036106 <_vfiprintf_r+0x7a>
 8036112:	ebba 0b04 	subs.w	fp, sl, r4
 8036116:	d00b      	beq.n	8036130 <_vfiprintf_r+0xa4>
 8036118:	465b      	mov	r3, fp
 803611a:	4622      	mov	r2, r4
 803611c:	4629      	mov	r1, r5
 803611e:	4630      	mov	r0, r6
 8036120:	f7ff ffa1 	bl	8036066 <__sfputs_r>
 8036124:	3001      	adds	r0, #1
 8036126:	f000 80a7 	beq.w	8036278 <_vfiprintf_r+0x1ec>
 803612a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803612c:	445a      	add	r2, fp
 803612e:	9209      	str	r2, [sp, #36]	@ 0x24
 8036130:	f89a 3000 	ldrb.w	r3, [sl]
 8036134:	2b00      	cmp	r3, #0
 8036136:	f000 809f 	beq.w	8036278 <_vfiprintf_r+0x1ec>
 803613a:	2300      	movs	r3, #0
 803613c:	f04f 32ff 	mov.w	r2, #4294967295
 8036140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8036144:	f10a 0a01 	add.w	sl, sl, #1
 8036148:	9304      	str	r3, [sp, #16]
 803614a:	9307      	str	r3, [sp, #28]
 803614c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8036150:	931a      	str	r3, [sp, #104]	@ 0x68
 8036152:	4654      	mov	r4, sl
 8036154:	2205      	movs	r2, #5
 8036156:	f814 1b01 	ldrb.w	r1, [r4], #1
 803615a:	4853      	ldr	r0, [pc, #332]	@ (80362a8 <_vfiprintf_r+0x21c>)
 803615c:	f7ca f848 	bl	80001f0 <memchr>
 8036160:	9a04      	ldr	r2, [sp, #16]
 8036162:	b9d8      	cbnz	r0, 803619c <_vfiprintf_r+0x110>
 8036164:	06d1      	lsls	r1, r2, #27
 8036166:	bf44      	itt	mi
 8036168:	2320      	movmi	r3, #32
 803616a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803616e:	0713      	lsls	r3, r2, #28
 8036170:	bf44      	itt	mi
 8036172:	232b      	movmi	r3, #43	@ 0x2b
 8036174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8036178:	f89a 3000 	ldrb.w	r3, [sl]
 803617c:	2b2a      	cmp	r3, #42	@ 0x2a
 803617e:	d015      	beq.n	80361ac <_vfiprintf_r+0x120>
 8036180:	9a07      	ldr	r2, [sp, #28]
 8036182:	4654      	mov	r4, sl
 8036184:	2000      	movs	r0, #0
 8036186:	f04f 0c0a 	mov.w	ip, #10
 803618a:	4621      	mov	r1, r4
 803618c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8036190:	3b30      	subs	r3, #48	@ 0x30
 8036192:	2b09      	cmp	r3, #9
 8036194:	d94b      	bls.n	803622e <_vfiprintf_r+0x1a2>
 8036196:	b1b0      	cbz	r0, 80361c6 <_vfiprintf_r+0x13a>
 8036198:	9207      	str	r2, [sp, #28]
 803619a:	e014      	b.n	80361c6 <_vfiprintf_r+0x13a>
 803619c:	eba0 0308 	sub.w	r3, r0, r8
 80361a0:	fa09 f303 	lsl.w	r3, r9, r3
 80361a4:	4313      	orrs	r3, r2
 80361a6:	9304      	str	r3, [sp, #16]
 80361a8:	46a2      	mov	sl, r4
 80361aa:	e7d2      	b.n	8036152 <_vfiprintf_r+0xc6>
 80361ac:	9b03      	ldr	r3, [sp, #12]
 80361ae:	1d19      	adds	r1, r3, #4
 80361b0:	681b      	ldr	r3, [r3, #0]
 80361b2:	9103      	str	r1, [sp, #12]
 80361b4:	2b00      	cmp	r3, #0
 80361b6:	bfbb      	ittet	lt
 80361b8:	425b      	neglt	r3, r3
 80361ba:	f042 0202 	orrlt.w	r2, r2, #2
 80361be:	9307      	strge	r3, [sp, #28]
 80361c0:	9307      	strlt	r3, [sp, #28]
 80361c2:	bfb8      	it	lt
 80361c4:	9204      	strlt	r2, [sp, #16]
 80361c6:	7823      	ldrb	r3, [r4, #0]
 80361c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80361ca:	d10a      	bne.n	80361e2 <_vfiprintf_r+0x156>
 80361cc:	7863      	ldrb	r3, [r4, #1]
 80361ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80361d0:	d132      	bne.n	8036238 <_vfiprintf_r+0x1ac>
 80361d2:	9b03      	ldr	r3, [sp, #12]
 80361d4:	1d1a      	adds	r2, r3, #4
 80361d6:	681b      	ldr	r3, [r3, #0]
 80361d8:	9203      	str	r2, [sp, #12]
 80361da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80361de:	3402      	adds	r4, #2
 80361e0:	9305      	str	r3, [sp, #20]
 80361e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80362b8 <_vfiprintf_r+0x22c>
 80361e6:	7821      	ldrb	r1, [r4, #0]
 80361e8:	2203      	movs	r2, #3
 80361ea:	4650      	mov	r0, sl
 80361ec:	f7ca f800 	bl	80001f0 <memchr>
 80361f0:	b138      	cbz	r0, 8036202 <_vfiprintf_r+0x176>
 80361f2:	9b04      	ldr	r3, [sp, #16]
 80361f4:	eba0 000a 	sub.w	r0, r0, sl
 80361f8:	2240      	movs	r2, #64	@ 0x40
 80361fa:	4082      	lsls	r2, r0
 80361fc:	4313      	orrs	r3, r2
 80361fe:	3401      	adds	r4, #1
 8036200:	9304      	str	r3, [sp, #16]
 8036202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036206:	4829      	ldr	r0, [pc, #164]	@ (80362ac <_vfiprintf_r+0x220>)
 8036208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 803620c:	2206      	movs	r2, #6
 803620e:	f7c9 ffef 	bl	80001f0 <memchr>
 8036212:	2800      	cmp	r0, #0
 8036214:	d03f      	beq.n	8036296 <_vfiprintf_r+0x20a>
 8036216:	4b26      	ldr	r3, [pc, #152]	@ (80362b0 <_vfiprintf_r+0x224>)
 8036218:	bb1b      	cbnz	r3, 8036262 <_vfiprintf_r+0x1d6>
 803621a:	9b03      	ldr	r3, [sp, #12]
 803621c:	3307      	adds	r3, #7
 803621e:	f023 0307 	bic.w	r3, r3, #7
 8036222:	3308      	adds	r3, #8
 8036224:	9303      	str	r3, [sp, #12]
 8036226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8036228:	443b      	add	r3, r7
 803622a:	9309      	str	r3, [sp, #36]	@ 0x24
 803622c:	e76a      	b.n	8036104 <_vfiprintf_r+0x78>
 803622e:	fb0c 3202 	mla	r2, ip, r2, r3
 8036232:	460c      	mov	r4, r1
 8036234:	2001      	movs	r0, #1
 8036236:	e7a8      	b.n	803618a <_vfiprintf_r+0xfe>
 8036238:	2300      	movs	r3, #0
 803623a:	3401      	adds	r4, #1
 803623c:	9305      	str	r3, [sp, #20]
 803623e:	4619      	mov	r1, r3
 8036240:	f04f 0c0a 	mov.w	ip, #10
 8036244:	4620      	mov	r0, r4
 8036246:	f810 2b01 	ldrb.w	r2, [r0], #1
 803624a:	3a30      	subs	r2, #48	@ 0x30
 803624c:	2a09      	cmp	r2, #9
 803624e:	d903      	bls.n	8036258 <_vfiprintf_r+0x1cc>
 8036250:	2b00      	cmp	r3, #0
 8036252:	d0c6      	beq.n	80361e2 <_vfiprintf_r+0x156>
 8036254:	9105      	str	r1, [sp, #20]
 8036256:	e7c4      	b.n	80361e2 <_vfiprintf_r+0x156>
 8036258:	fb0c 2101 	mla	r1, ip, r1, r2
 803625c:	4604      	mov	r4, r0
 803625e:	2301      	movs	r3, #1
 8036260:	e7f0      	b.n	8036244 <_vfiprintf_r+0x1b8>
 8036262:	ab03      	add	r3, sp, #12
 8036264:	9300      	str	r3, [sp, #0]
 8036266:	462a      	mov	r2, r5
 8036268:	4b12      	ldr	r3, [pc, #72]	@ (80362b4 <_vfiprintf_r+0x228>)
 803626a:	a904      	add	r1, sp, #16
 803626c:	4630      	mov	r0, r6
 803626e:	f3af 8000 	nop.w
 8036272:	4607      	mov	r7, r0
 8036274:	1c78      	adds	r0, r7, #1
 8036276:	d1d6      	bne.n	8036226 <_vfiprintf_r+0x19a>
 8036278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803627a:	07d9      	lsls	r1, r3, #31
 803627c:	d405      	bmi.n	803628a <_vfiprintf_r+0x1fe>
 803627e:	89ab      	ldrh	r3, [r5, #12]
 8036280:	059a      	lsls	r2, r3, #22
 8036282:	d402      	bmi.n	803628a <_vfiprintf_r+0x1fe>
 8036284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8036286:	f7ff fd89 	bl	8035d9c <__retarget_lock_release_recursive>
 803628a:	89ab      	ldrh	r3, [r5, #12]
 803628c:	065b      	lsls	r3, r3, #25
 803628e:	f53f af1f 	bmi.w	80360d0 <_vfiprintf_r+0x44>
 8036292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8036294:	e71e      	b.n	80360d4 <_vfiprintf_r+0x48>
 8036296:	ab03      	add	r3, sp, #12
 8036298:	9300      	str	r3, [sp, #0]
 803629a:	462a      	mov	r2, r5
 803629c:	4b05      	ldr	r3, [pc, #20]	@ (80362b4 <_vfiprintf_r+0x228>)
 803629e:	a904      	add	r1, sp, #16
 80362a0:	4630      	mov	r0, r6
 80362a2:	f000 f879 	bl	8036398 <_printf_i>
 80362a6:	e7e4      	b.n	8036272 <_vfiprintf_r+0x1e6>
 80362a8:	0803cec4 	.word	0x0803cec4
 80362ac:	0803cece 	.word	0x0803cece
 80362b0:	00000000 	.word	0x00000000
 80362b4:	08036067 	.word	0x08036067
 80362b8:	0803ceca 	.word	0x0803ceca

080362bc <_printf_common>:
 80362bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80362c0:	4616      	mov	r6, r2
 80362c2:	4698      	mov	r8, r3
 80362c4:	688a      	ldr	r2, [r1, #8]
 80362c6:	690b      	ldr	r3, [r1, #16]
 80362c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80362cc:	4293      	cmp	r3, r2
 80362ce:	bfb8      	it	lt
 80362d0:	4613      	movlt	r3, r2
 80362d2:	6033      	str	r3, [r6, #0]
 80362d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80362d8:	4607      	mov	r7, r0
 80362da:	460c      	mov	r4, r1
 80362dc:	b10a      	cbz	r2, 80362e2 <_printf_common+0x26>
 80362de:	3301      	adds	r3, #1
 80362e0:	6033      	str	r3, [r6, #0]
 80362e2:	6823      	ldr	r3, [r4, #0]
 80362e4:	0699      	lsls	r1, r3, #26
 80362e6:	bf42      	ittt	mi
 80362e8:	6833      	ldrmi	r3, [r6, #0]
 80362ea:	3302      	addmi	r3, #2
 80362ec:	6033      	strmi	r3, [r6, #0]
 80362ee:	6825      	ldr	r5, [r4, #0]
 80362f0:	f015 0506 	ands.w	r5, r5, #6
 80362f4:	d106      	bne.n	8036304 <_printf_common+0x48>
 80362f6:	f104 0a19 	add.w	sl, r4, #25
 80362fa:	68e3      	ldr	r3, [r4, #12]
 80362fc:	6832      	ldr	r2, [r6, #0]
 80362fe:	1a9b      	subs	r3, r3, r2
 8036300:	42ab      	cmp	r3, r5
 8036302:	dc26      	bgt.n	8036352 <_printf_common+0x96>
 8036304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8036308:	6822      	ldr	r2, [r4, #0]
 803630a:	3b00      	subs	r3, #0
 803630c:	bf18      	it	ne
 803630e:	2301      	movne	r3, #1
 8036310:	0692      	lsls	r2, r2, #26
 8036312:	d42b      	bmi.n	803636c <_printf_common+0xb0>
 8036314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8036318:	4641      	mov	r1, r8
 803631a:	4638      	mov	r0, r7
 803631c:	47c8      	blx	r9
 803631e:	3001      	adds	r0, #1
 8036320:	d01e      	beq.n	8036360 <_printf_common+0xa4>
 8036322:	6823      	ldr	r3, [r4, #0]
 8036324:	6922      	ldr	r2, [r4, #16]
 8036326:	f003 0306 	and.w	r3, r3, #6
 803632a:	2b04      	cmp	r3, #4
 803632c:	bf02      	ittt	eq
 803632e:	68e5      	ldreq	r5, [r4, #12]
 8036330:	6833      	ldreq	r3, [r6, #0]
 8036332:	1aed      	subeq	r5, r5, r3
 8036334:	68a3      	ldr	r3, [r4, #8]
 8036336:	bf0c      	ite	eq
 8036338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803633c:	2500      	movne	r5, #0
 803633e:	4293      	cmp	r3, r2
 8036340:	bfc4      	itt	gt
 8036342:	1a9b      	subgt	r3, r3, r2
 8036344:	18ed      	addgt	r5, r5, r3
 8036346:	2600      	movs	r6, #0
 8036348:	341a      	adds	r4, #26
 803634a:	42b5      	cmp	r5, r6
 803634c:	d11a      	bne.n	8036384 <_printf_common+0xc8>
 803634e:	2000      	movs	r0, #0
 8036350:	e008      	b.n	8036364 <_printf_common+0xa8>
 8036352:	2301      	movs	r3, #1
 8036354:	4652      	mov	r2, sl
 8036356:	4641      	mov	r1, r8
 8036358:	4638      	mov	r0, r7
 803635a:	47c8      	blx	r9
 803635c:	3001      	adds	r0, #1
 803635e:	d103      	bne.n	8036368 <_printf_common+0xac>
 8036360:	f04f 30ff 	mov.w	r0, #4294967295
 8036364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036368:	3501      	adds	r5, #1
 803636a:	e7c6      	b.n	80362fa <_printf_common+0x3e>
 803636c:	18e1      	adds	r1, r4, r3
 803636e:	1c5a      	adds	r2, r3, #1
 8036370:	2030      	movs	r0, #48	@ 0x30
 8036372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8036376:	4422      	add	r2, r4
 8036378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 803637c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8036380:	3302      	adds	r3, #2
 8036382:	e7c7      	b.n	8036314 <_printf_common+0x58>
 8036384:	2301      	movs	r3, #1
 8036386:	4622      	mov	r2, r4
 8036388:	4641      	mov	r1, r8
 803638a:	4638      	mov	r0, r7
 803638c:	47c8      	blx	r9
 803638e:	3001      	adds	r0, #1
 8036390:	d0e6      	beq.n	8036360 <_printf_common+0xa4>
 8036392:	3601      	adds	r6, #1
 8036394:	e7d9      	b.n	803634a <_printf_common+0x8e>
	...

08036398 <_printf_i>:
 8036398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803639c:	7e0f      	ldrb	r7, [r1, #24]
 803639e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80363a0:	2f78      	cmp	r7, #120	@ 0x78
 80363a2:	4691      	mov	r9, r2
 80363a4:	4680      	mov	r8, r0
 80363a6:	460c      	mov	r4, r1
 80363a8:	469a      	mov	sl, r3
 80363aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80363ae:	d807      	bhi.n	80363c0 <_printf_i+0x28>
 80363b0:	2f62      	cmp	r7, #98	@ 0x62
 80363b2:	d80a      	bhi.n	80363ca <_printf_i+0x32>
 80363b4:	2f00      	cmp	r7, #0
 80363b6:	f000 80d1 	beq.w	803655c <_printf_i+0x1c4>
 80363ba:	2f58      	cmp	r7, #88	@ 0x58
 80363bc:	f000 80b8 	beq.w	8036530 <_printf_i+0x198>
 80363c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80363c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80363c8:	e03a      	b.n	8036440 <_printf_i+0xa8>
 80363ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80363ce:	2b15      	cmp	r3, #21
 80363d0:	d8f6      	bhi.n	80363c0 <_printf_i+0x28>
 80363d2:	a101      	add	r1, pc, #4	@ (adr r1, 80363d8 <_printf_i+0x40>)
 80363d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80363d8:	08036431 	.word	0x08036431
 80363dc:	08036445 	.word	0x08036445
 80363e0:	080363c1 	.word	0x080363c1
 80363e4:	080363c1 	.word	0x080363c1
 80363e8:	080363c1 	.word	0x080363c1
 80363ec:	080363c1 	.word	0x080363c1
 80363f0:	08036445 	.word	0x08036445
 80363f4:	080363c1 	.word	0x080363c1
 80363f8:	080363c1 	.word	0x080363c1
 80363fc:	080363c1 	.word	0x080363c1
 8036400:	080363c1 	.word	0x080363c1
 8036404:	08036543 	.word	0x08036543
 8036408:	0803646f 	.word	0x0803646f
 803640c:	080364fd 	.word	0x080364fd
 8036410:	080363c1 	.word	0x080363c1
 8036414:	080363c1 	.word	0x080363c1
 8036418:	08036565 	.word	0x08036565
 803641c:	080363c1 	.word	0x080363c1
 8036420:	0803646f 	.word	0x0803646f
 8036424:	080363c1 	.word	0x080363c1
 8036428:	080363c1 	.word	0x080363c1
 803642c:	08036505 	.word	0x08036505
 8036430:	6833      	ldr	r3, [r6, #0]
 8036432:	1d1a      	adds	r2, r3, #4
 8036434:	681b      	ldr	r3, [r3, #0]
 8036436:	6032      	str	r2, [r6, #0]
 8036438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 803643c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8036440:	2301      	movs	r3, #1
 8036442:	e09c      	b.n	803657e <_printf_i+0x1e6>
 8036444:	6833      	ldr	r3, [r6, #0]
 8036446:	6820      	ldr	r0, [r4, #0]
 8036448:	1d19      	adds	r1, r3, #4
 803644a:	6031      	str	r1, [r6, #0]
 803644c:	0606      	lsls	r6, r0, #24
 803644e:	d501      	bpl.n	8036454 <_printf_i+0xbc>
 8036450:	681d      	ldr	r5, [r3, #0]
 8036452:	e003      	b.n	803645c <_printf_i+0xc4>
 8036454:	0645      	lsls	r5, r0, #25
 8036456:	d5fb      	bpl.n	8036450 <_printf_i+0xb8>
 8036458:	f9b3 5000 	ldrsh.w	r5, [r3]
 803645c:	2d00      	cmp	r5, #0
 803645e:	da03      	bge.n	8036468 <_printf_i+0xd0>
 8036460:	232d      	movs	r3, #45	@ 0x2d
 8036462:	426d      	negs	r5, r5
 8036464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8036468:	4858      	ldr	r0, [pc, #352]	@ (80365cc <_printf_i+0x234>)
 803646a:	230a      	movs	r3, #10
 803646c:	e011      	b.n	8036492 <_printf_i+0xfa>
 803646e:	6821      	ldr	r1, [r4, #0]
 8036470:	6833      	ldr	r3, [r6, #0]
 8036472:	0608      	lsls	r0, r1, #24
 8036474:	f853 5b04 	ldr.w	r5, [r3], #4
 8036478:	d402      	bmi.n	8036480 <_printf_i+0xe8>
 803647a:	0649      	lsls	r1, r1, #25
 803647c:	bf48      	it	mi
 803647e:	b2ad      	uxthmi	r5, r5
 8036480:	2f6f      	cmp	r7, #111	@ 0x6f
 8036482:	4852      	ldr	r0, [pc, #328]	@ (80365cc <_printf_i+0x234>)
 8036484:	6033      	str	r3, [r6, #0]
 8036486:	bf14      	ite	ne
 8036488:	230a      	movne	r3, #10
 803648a:	2308      	moveq	r3, #8
 803648c:	2100      	movs	r1, #0
 803648e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8036492:	6866      	ldr	r6, [r4, #4]
 8036494:	60a6      	str	r6, [r4, #8]
 8036496:	2e00      	cmp	r6, #0
 8036498:	db05      	blt.n	80364a6 <_printf_i+0x10e>
 803649a:	6821      	ldr	r1, [r4, #0]
 803649c:	432e      	orrs	r6, r5
 803649e:	f021 0104 	bic.w	r1, r1, #4
 80364a2:	6021      	str	r1, [r4, #0]
 80364a4:	d04b      	beq.n	803653e <_printf_i+0x1a6>
 80364a6:	4616      	mov	r6, r2
 80364a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80364ac:	fb03 5711 	mls	r7, r3, r1, r5
 80364b0:	5dc7      	ldrb	r7, [r0, r7]
 80364b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80364b6:	462f      	mov	r7, r5
 80364b8:	42bb      	cmp	r3, r7
 80364ba:	460d      	mov	r5, r1
 80364bc:	d9f4      	bls.n	80364a8 <_printf_i+0x110>
 80364be:	2b08      	cmp	r3, #8
 80364c0:	d10b      	bne.n	80364da <_printf_i+0x142>
 80364c2:	6823      	ldr	r3, [r4, #0]
 80364c4:	07df      	lsls	r7, r3, #31
 80364c6:	d508      	bpl.n	80364da <_printf_i+0x142>
 80364c8:	6923      	ldr	r3, [r4, #16]
 80364ca:	6861      	ldr	r1, [r4, #4]
 80364cc:	4299      	cmp	r1, r3
 80364ce:	bfde      	ittt	le
 80364d0:	2330      	movle	r3, #48	@ 0x30
 80364d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80364d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80364da:	1b92      	subs	r2, r2, r6
 80364dc:	6122      	str	r2, [r4, #16]
 80364de:	f8cd a000 	str.w	sl, [sp]
 80364e2:	464b      	mov	r3, r9
 80364e4:	aa03      	add	r2, sp, #12
 80364e6:	4621      	mov	r1, r4
 80364e8:	4640      	mov	r0, r8
 80364ea:	f7ff fee7 	bl	80362bc <_printf_common>
 80364ee:	3001      	adds	r0, #1
 80364f0:	d14a      	bne.n	8036588 <_printf_i+0x1f0>
 80364f2:	f04f 30ff 	mov.w	r0, #4294967295
 80364f6:	b004      	add	sp, #16
 80364f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80364fc:	6823      	ldr	r3, [r4, #0]
 80364fe:	f043 0320 	orr.w	r3, r3, #32
 8036502:	6023      	str	r3, [r4, #0]
 8036504:	4832      	ldr	r0, [pc, #200]	@ (80365d0 <_printf_i+0x238>)
 8036506:	2778      	movs	r7, #120	@ 0x78
 8036508:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 803650c:	6823      	ldr	r3, [r4, #0]
 803650e:	6831      	ldr	r1, [r6, #0]
 8036510:	061f      	lsls	r7, r3, #24
 8036512:	f851 5b04 	ldr.w	r5, [r1], #4
 8036516:	d402      	bmi.n	803651e <_printf_i+0x186>
 8036518:	065f      	lsls	r7, r3, #25
 803651a:	bf48      	it	mi
 803651c:	b2ad      	uxthmi	r5, r5
 803651e:	6031      	str	r1, [r6, #0]
 8036520:	07d9      	lsls	r1, r3, #31
 8036522:	bf44      	itt	mi
 8036524:	f043 0320 	orrmi.w	r3, r3, #32
 8036528:	6023      	strmi	r3, [r4, #0]
 803652a:	b11d      	cbz	r5, 8036534 <_printf_i+0x19c>
 803652c:	2310      	movs	r3, #16
 803652e:	e7ad      	b.n	803648c <_printf_i+0xf4>
 8036530:	4826      	ldr	r0, [pc, #152]	@ (80365cc <_printf_i+0x234>)
 8036532:	e7e9      	b.n	8036508 <_printf_i+0x170>
 8036534:	6823      	ldr	r3, [r4, #0]
 8036536:	f023 0320 	bic.w	r3, r3, #32
 803653a:	6023      	str	r3, [r4, #0]
 803653c:	e7f6      	b.n	803652c <_printf_i+0x194>
 803653e:	4616      	mov	r6, r2
 8036540:	e7bd      	b.n	80364be <_printf_i+0x126>
 8036542:	6833      	ldr	r3, [r6, #0]
 8036544:	6825      	ldr	r5, [r4, #0]
 8036546:	6961      	ldr	r1, [r4, #20]
 8036548:	1d18      	adds	r0, r3, #4
 803654a:	6030      	str	r0, [r6, #0]
 803654c:	062e      	lsls	r6, r5, #24
 803654e:	681b      	ldr	r3, [r3, #0]
 8036550:	d501      	bpl.n	8036556 <_printf_i+0x1be>
 8036552:	6019      	str	r1, [r3, #0]
 8036554:	e002      	b.n	803655c <_printf_i+0x1c4>
 8036556:	0668      	lsls	r0, r5, #25
 8036558:	d5fb      	bpl.n	8036552 <_printf_i+0x1ba>
 803655a:	8019      	strh	r1, [r3, #0]
 803655c:	2300      	movs	r3, #0
 803655e:	6123      	str	r3, [r4, #16]
 8036560:	4616      	mov	r6, r2
 8036562:	e7bc      	b.n	80364de <_printf_i+0x146>
 8036564:	6833      	ldr	r3, [r6, #0]
 8036566:	1d1a      	adds	r2, r3, #4
 8036568:	6032      	str	r2, [r6, #0]
 803656a:	681e      	ldr	r6, [r3, #0]
 803656c:	6862      	ldr	r2, [r4, #4]
 803656e:	2100      	movs	r1, #0
 8036570:	4630      	mov	r0, r6
 8036572:	f7c9 fe3d 	bl	80001f0 <memchr>
 8036576:	b108      	cbz	r0, 803657c <_printf_i+0x1e4>
 8036578:	1b80      	subs	r0, r0, r6
 803657a:	6060      	str	r0, [r4, #4]
 803657c:	6863      	ldr	r3, [r4, #4]
 803657e:	6123      	str	r3, [r4, #16]
 8036580:	2300      	movs	r3, #0
 8036582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8036586:	e7aa      	b.n	80364de <_printf_i+0x146>
 8036588:	6923      	ldr	r3, [r4, #16]
 803658a:	4632      	mov	r2, r6
 803658c:	4649      	mov	r1, r9
 803658e:	4640      	mov	r0, r8
 8036590:	47d0      	blx	sl
 8036592:	3001      	adds	r0, #1
 8036594:	d0ad      	beq.n	80364f2 <_printf_i+0x15a>
 8036596:	6823      	ldr	r3, [r4, #0]
 8036598:	079b      	lsls	r3, r3, #30
 803659a:	d413      	bmi.n	80365c4 <_printf_i+0x22c>
 803659c:	68e0      	ldr	r0, [r4, #12]
 803659e:	9b03      	ldr	r3, [sp, #12]
 80365a0:	4298      	cmp	r0, r3
 80365a2:	bfb8      	it	lt
 80365a4:	4618      	movlt	r0, r3
 80365a6:	e7a6      	b.n	80364f6 <_printf_i+0x15e>
 80365a8:	2301      	movs	r3, #1
 80365aa:	4632      	mov	r2, r6
 80365ac:	4649      	mov	r1, r9
 80365ae:	4640      	mov	r0, r8
 80365b0:	47d0      	blx	sl
 80365b2:	3001      	adds	r0, #1
 80365b4:	d09d      	beq.n	80364f2 <_printf_i+0x15a>
 80365b6:	3501      	adds	r5, #1
 80365b8:	68e3      	ldr	r3, [r4, #12]
 80365ba:	9903      	ldr	r1, [sp, #12]
 80365bc:	1a5b      	subs	r3, r3, r1
 80365be:	42ab      	cmp	r3, r5
 80365c0:	dcf2      	bgt.n	80365a8 <_printf_i+0x210>
 80365c2:	e7eb      	b.n	803659c <_printf_i+0x204>
 80365c4:	2500      	movs	r5, #0
 80365c6:	f104 0619 	add.w	r6, r4, #25
 80365ca:	e7f5      	b.n	80365b8 <_printf_i+0x220>
 80365cc:	0803ced5 	.word	0x0803ced5
 80365d0:	0803cee6 	.word	0x0803cee6

080365d4 <__sflush_r>:
 80365d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80365d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80365dc:	0716      	lsls	r6, r2, #28
 80365de:	4605      	mov	r5, r0
 80365e0:	460c      	mov	r4, r1
 80365e2:	d454      	bmi.n	803668e <__sflush_r+0xba>
 80365e4:	684b      	ldr	r3, [r1, #4]
 80365e6:	2b00      	cmp	r3, #0
 80365e8:	dc02      	bgt.n	80365f0 <__sflush_r+0x1c>
 80365ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80365ec:	2b00      	cmp	r3, #0
 80365ee:	dd48      	ble.n	8036682 <__sflush_r+0xae>
 80365f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80365f2:	2e00      	cmp	r6, #0
 80365f4:	d045      	beq.n	8036682 <__sflush_r+0xae>
 80365f6:	2300      	movs	r3, #0
 80365f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80365fc:	682f      	ldr	r7, [r5, #0]
 80365fe:	6a21      	ldr	r1, [r4, #32]
 8036600:	602b      	str	r3, [r5, #0]
 8036602:	d030      	beq.n	8036666 <__sflush_r+0x92>
 8036604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8036606:	89a3      	ldrh	r3, [r4, #12]
 8036608:	0759      	lsls	r1, r3, #29
 803660a:	d505      	bpl.n	8036618 <__sflush_r+0x44>
 803660c:	6863      	ldr	r3, [r4, #4]
 803660e:	1ad2      	subs	r2, r2, r3
 8036610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8036612:	b10b      	cbz	r3, 8036618 <__sflush_r+0x44>
 8036614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8036616:	1ad2      	subs	r2, r2, r3
 8036618:	2300      	movs	r3, #0
 803661a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 803661c:	6a21      	ldr	r1, [r4, #32]
 803661e:	4628      	mov	r0, r5
 8036620:	47b0      	blx	r6
 8036622:	1c43      	adds	r3, r0, #1
 8036624:	89a3      	ldrh	r3, [r4, #12]
 8036626:	d106      	bne.n	8036636 <__sflush_r+0x62>
 8036628:	6829      	ldr	r1, [r5, #0]
 803662a:	291d      	cmp	r1, #29
 803662c:	d82b      	bhi.n	8036686 <__sflush_r+0xb2>
 803662e:	4a2a      	ldr	r2, [pc, #168]	@ (80366d8 <__sflush_r+0x104>)
 8036630:	40ca      	lsrs	r2, r1
 8036632:	07d6      	lsls	r6, r2, #31
 8036634:	d527      	bpl.n	8036686 <__sflush_r+0xb2>
 8036636:	2200      	movs	r2, #0
 8036638:	6062      	str	r2, [r4, #4]
 803663a:	04d9      	lsls	r1, r3, #19
 803663c:	6922      	ldr	r2, [r4, #16]
 803663e:	6022      	str	r2, [r4, #0]
 8036640:	d504      	bpl.n	803664c <__sflush_r+0x78>
 8036642:	1c42      	adds	r2, r0, #1
 8036644:	d101      	bne.n	803664a <__sflush_r+0x76>
 8036646:	682b      	ldr	r3, [r5, #0]
 8036648:	b903      	cbnz	r3, 803664c <__sflush_r+0x78>
 803664a:	6560      	str	r0, [r4, #84]	@ 0x54
 803664c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803664e:	602f      	str	r7, [r5, #0]
 8036650:	b1b9      	cbz	r1, 8036682 <__sflush_r+0xae>
 8036652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8036656:	4299      	cmp	r1, r3
 8036658:	d002      	beq.n	8036660 <__sflush_r+0x8c>
 803665a:	4628      	mov	r0, r5
 803665c:	f7ff fc9a 	bl	8035f94 <_free_r>
 8036660:	2300      	movs	r3, #0
 8036662:	6363      	str	r3, [r4, #52]	@ 0x34
 8036664:	e00d      	b.n	8036682 <__sflush_r+0xae>
 8036666:	2301      	movs	r3, #1
 8036668:	4628      	mov	r0, r5
 803666a:	47b0      	blx	r6
 803666c:	4602      	mov	r2, r0
 803666e:	1c50      	adds	r0, r2, #1
 8036670:	d1c9      	bne.n	8036606 <__sflush_r+0x32>
 8036672:	682b      	ldr	r3, [r5, #0]
 8036674:	2b00      	cmp	r3, #0
 8036676:	d0c6      	beq.n	8036606 <__sflush_r+0x32>
 8036678:	2b1d      	cmp	r3, #29
 803667a:	d001      	beq.n	8036680 <__sflush_r+0xac>
 803667c:	2b16      	cmp	r3, #22
 803667e:	d11e      	bne.n	80366be <__sflush_r+0xea>
 8036680:	602f      	str	r7, [r5, #0]
 8036682:	2000      	movs	r0, #0
 8036684:	e022      	b.n	80366cc <__sflush_r+0xf8>
 8036686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803668a:	b21b      	sxth	r3, r3
 803668c:	e01b      	b.n	80366c6 <__sflush_r+0xf2>
 803668e:	690f      	ldr	r7, [r1, #16]
 8036690:	2f00      	cmp	r7, #0
 8036692:	d0f6      	beq.n	8036682 <__sflush_r+0xae>
 8036694:	0793      	lsls	r3, r2, #30
 8036696:	680e      	ldr	r6, [r1, #0]
 8036698:	bf08      	it	eq
 803669a:	694b      	ldreq	r3, [r1, #20]
 803669c:	600f      	str	r7, [r1, #0]
 803669e:	bf18      	it	ne
 80366a0:	2300      	movne	r3, #0
 80366a2:	eba6 0807 	sub.w	r8, r6, r7
 80366a6:	608b      	str	r3, [r1, #8]
 80366a8:	f1b8 0f00 	cmp.w	r8, #0
 80366ac:	dde9      	ble.n	8036682 <__sflush_r+0xae>
 80366ae:	6a21      	ldr	r1, [r4, #32]
 80366b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80366b2:	4643      	mov	r3, r8
 80366b4:	463a      	mov	r2, r7
 80366b6:	4628      	mov	r0, r5
 80366b8:	47b0      	blx	r6
 80366ba:	2800      	cmp	r0, #0
 80366bc:	dc08      	bgt.n	80366d0 <__sflush_r+0xfc>
 80366be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80366c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80366c6:	81a3      	strh	r3, [r4, #12]
 80366c8:	f04f 30ff 	mov.w	r0, #4294967295
 80366cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80366d0:	4407      	add	r7, r0
 80366d2:	eba8 0800 	sub.w	r8, r8, r0
 80366d6:	e7e7      	b.n	80366a8 <__sflush_r+0xd4>
 80366d8:	20400001 	.word	0x20400001

080366dc <_fflush_r>:
 80366dc:	b538      	push	{r3, r4, r5, lr}
 80366de:	690b      	ldr	r3, [r1, #16]
 80366e0:	4605      	mov	r5, r0
 80366e2:	460c      	mov	r4, r1
 80366e4:	b913      	cbnz	r3, 80366ec <_fflush_r+0x10>
 80366e6:	2500      	movs	r5, #0
 80366e8:	4628      	mov	r0, r5
 80366ea:	bd38      	pop	{r3, r4, r5, pc}
 80366ec:	b118      	cbz	r0, 80366f6 <_fflush_r+0x1a>
 80366ee:	6a03      	ldr	r3, [r0, #32]
 80366f0:	b90b      	cbnz	r3, 80366f6 <_fflush_r+0x1a>
 80366f2:	f7ff f8db 	bl	80358ac <__sinit>
 80366f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80366fa:	2b00      	cmp	r3, #0
 80366fc:	d0f3      	beq.n	80366e6 <_fflush_r+0xa>
 80366fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8036700:	07d0      	lsls	r0, r2, #31
 8036702:	d404      	bmi.n	803670e <_fflush_r+0x32>
 8036704:	0599      	lsls	r1, r3, #22
 8036706:	d402      	bmi.n	803670e <_fflush_r+0x32>
 8036708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803670a:	f7ff fb46 	bl	8035d9a <__retarget_lock_acquire_recursive>
 803670e:	4628      	mov	r0, r5
 8036710:	4621      	mov	r1, r4
 8036712:	f7ff ff5f 	bl	80365d4 <__sflush_r>
 8036716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8036718:	07da      	lsls	r2, r3, #31
 803671a:	4605      	mov	r5, r0
 803671c:	d4e4      	bmi.n	80366e8 <_fflush_r+0xc>
 803671e:	89a3      	ldrh	r3, [r4, #12]
 8036720:	059b      	lsls	r3, r3, #22
 8036722:	d4e1      	bmi.n	80366e8 <_fflush_r+0xc>
 8036724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8036726:	f7ff fb39 	bl	8035d9c <__retarget_lock_release_recursive>
 803672a:	e7dd      	b.n	80366e8 <_fflush_r+0xc>

0803672c <__swhatbuf_r>:
 803672c:	b570      	push	{r4, r5, r6, lr}
 803672e:	460c      	mov	r4, r1
 8036730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8036734:	2900      	cmp	r1, #0
 8036736:	b096      	sub	sp, #88	@ 0x58
 8036738:	4615      	mov	r5, r2
 803673a:	461e      	mov	r6, r3
 803673c:	da0d      	bge.n	803675a <__swhatbuf_r+0x2e>
 803673e:	89a3      	ldrh	r3, [r4, #12]
 8036740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8036744:	f04f 0100 	mov.w	r1, #0
 8036748:	bf14      	ite	ne
 803674a:	2340      	movne	r3, #64	@ 0x40
 803674c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8036750:	2000      	movs	r0, #0
 8036752:	6031      	str	r1, [r6, #0]
 8036754:	602b      	str	r3, [r5, #0]
 8036756:	b016      	add	sp, #88	@ 0x58
 8036758:	bd70      	pop	{r4, r5, r6, pc}
 803675a:	466a      	mov	r2, sp
 803675c:	f000 f848 	bl	80367f0 <_fstat_r>
 8036760:	2800      	cmp	r0, #0
 8036762:	dbec      	blt.n	803673e <__swhatbuf_r+0x12>
 8036764:	9901      	ldr	r1, [sp, #4]
 8036766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803676a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 803676e:	4259      	negs	r1, r3
 8036770:	4159      	adcs	r1, r3
 8036772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8036776:	e7eb      	b.n	8036750 <__swhatbuf_r+0x24>

08036778 <__smakebuf_r>:
 8036778:	898b      	ldrh	r3, [r1, #12]
 803677a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803677c:	079d      	lsls	r5, r3, #30
 803677e:	4606      	mov	r6, r0
 8036780:	460c      	mov	r4, r1
 8036782:	d507      	bpl.n	8036794 <__smakebuf_r+0x1c>
 8036784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8036788:	6023      	str	r3, [r4, #0]
 803678a:	6123      	str	r3, [r4, #16]
 803678c:	2301      	movs	r3, #1
 803678e:	6163      	str	r3, [r4, #20]
 8036790:	b003      	add	sp, #12
 8036792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8036794:	ab01      	add	r3, sp, #4
 8036796:	466a      	mov	r2, sp
 8036798:	f7ff ffc8 	bl	803672c <__swhatbuf_r>
 803679c:	9f00      	ldr	r7, [sp, #0]
 803679e:	4605      	mov	r5, r0
 80367a0:	4639      	mov	r1, r7
 80367a2:	4630      	mov	r0, r6
 80367a4:	f7fe fdb4 	bl	8035310 <_malloc_r>
 80367a8:	b948      	cbnz	r0, 80367be <__smakebuf_r+0x46>
 80367aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80367ae:	059a      	lsls	r2, r3, #22
 80367b0:	d4ee      	bmi.n	8036790 <__smakebuf_r+0x18>
 80367b2:	f023 0303 	bic.w	r3, r3, #3
 80367b6:	f043 0302 	orr.w	r3, r3, #2
 80367ba:	81a3      	strh	r3, [r4, #12]
 80367bc:	e7e2      	b.n	8036784 <__smakebuf_r+0xc>
 80367be:	89a3      	ldrh	r3, [r4, #12]
 80367c0:	6020      	str	r0, [r4, #0]
 80367c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80367c6:	81a3      	strh	r3, [r4, #12]
 80367c8:	9b01      	ldr	r3, [sp, #4]
 80367ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80367ce:	b15b      	cbz	r3, 80367e8 <__smakebuf_r+0x70>
 80367d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80367d4:	4630      	mov	r0, r6
 80367d6:	f000 f81d 	bl	8036814 <_isatty_r>
 80367da:	b128      	cbz	r0, 80367e8 <__smakebuf_r+0x70>
 80367dc:	89a3      	ldrh	r3, [r4, #12]
 80367de:	f023 0303 	bic.w	r3, r3, #3
 80367e2:	f043 0301 	orr.w	r3, r3, #1
 80367e6:	81a3      	strh	r3, [r4, #12]
 80367e8:	89a3      	ldrh	r3, [r4, #12]
 80367ea:	431d      	orrs	r5, r3
 80367ec:	81a5      	strh	r5, [r4, #12]
 80367ee:	e7cf      	b.n	8036790 <__smakebuf_r+0x18>

080367f0 <_fstat_r>:
 80367f0:	b538      	push	{r3, r4, r5, lr}
 80367f2:	4d07      	ldr	r5, [pc, #28]	@ (8036810 <_fstat_r+0x20>)
 80367f4:	2300      	movs	r3, #0
 80367f6:	4604      	mov	r4, r0
 80367f8:	4608      	mov	r0, r1
 80367fa:	4611      	mov	r1, r2
 80367fc:	602b      	str	r3, [r5, #0]
 80367fe:	f7f5 f887 	bl	802b910 <_fstat>
 8036802:	1c43      	adds	r3, r0, #1
 8036804:	d102      	bne.n	803680c <_fstat_r+0x1c>
 8036806:	682b      	ldr	r3, [r5, #0]
 8036808:	b103      	cbz	r3, 803680c <_fstat_r+0x1c>
 803680a:	6023      	str	r3, [r4, #0]
 803680c:	bd38      	pop	{r3, r4, r5, pc}
 803680e:	bf00      	nop
 8036810:	20002380 	.word	0x20002380

08036814 <_isatty_r>:
 8036814:	b538      	push	{r3, r4, r5, lr}
 8036816:	4d06      	ldr	r5, [pc, #24]	@ (8036830 <_isatty_r+0x1c>)
 8036818:	2300      	movs	r3, #0
 803681a:	4604      	mov	r4, r0
 803681c:	4608      	mov	r0, r1
 803681e:	602b      	str	r3, [r5, #0]
 8036820:	f7f5 f886 	bl	802b930 <_isatty>
 8036824:	1c43      	adds	r3, r0, #1
 8036826:	d102      	bne.n	803682e <_isatty_r+0x1a>
 8036828:	682b      	ldr	r3, [r5, #0]
 803682a:	b103      	cbz	r3, 803682e <_isatty_r+0x1a>
 803682c:	6023      	str	r3, [r4, #0]
 803682e:	bd38      	pop	{r3, r4, r5, pc}
 8036830:	20002380 	.word	0x20002380

08036834 <round>:
 8036834:	ec51 0b10 	vmov	r0, r1, d0
 8036838:	b570      	push	{r4, r5, r6, lr}
 803683a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 803683e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8036842:	2a13      	cmp	r2, #19
 8036844:	460b      	mov	r3, r1
 8036846:	4605      	mov	r5, r0
 8036848:	dc1b      	bgt.n	8036882 <round+0x4e>
 803684a:	2a00      	cmp	r2, #0
 803684c:	da0b      	bge.n	8036866 <round+0x32>
 803684e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8036852:	3201      	adds	r2, #1
 8036854:	bf04      	itt	eq
 8036856:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 803685a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 803685e:	2200      	movs	r2, #0
 8036860:	4619      	mov	r1, r3
 8036862:	4610      	mov	r0, r2
 8036864:	e015      	b.n	8036892 <round+0x5e>
 8036866:	4c15      	ldr	r4, [pc, #84]	@ (80368bc <round+0x88>)
 8036868:	4114      	asrs	r4, r2
 803686a:	ea04 0601 	and.w	r6, r4, r1
 803686e:	4306      	orrs	r6, r0
 8036870:	d00f      	beq.n	8036892 <round+0x5e>
 8036872:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8036876:	fa41 f202 	asr.w	r2, r1, r2
 803687a:	4413      	add	r3, r2
 803687c:	ea23 0304 	bic.w	r3, r3, r4
 8036880:	e7ed      	b.n	803685e <round+0x2a>
 8036882:	2a33      	cmp	r2, #51	@ 0x33
 8036884:	dd08      	ble.n	8036898 <round+0x64>
 8036886:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 803688a:	d102      	bne.n	8036892 <round+0x5e>
 803688c:	4602      	mov	r2, r0
 803688e:	f7c9 fd05 	bl	800029c <__adddf3>
 8036892:	ec41 0b10 	vmov	d0, r0, r1
 8036896:	bd70      	pop	{r4, r5, r6, pc}
 8036898:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 803689c:	f04f 34ff 	mov.w	r4, #4294967295
 80368a0:	40f4      	lsrs	r4, r6
 80368a2:	4204      	tst	r4, r0
 80368a4:	d0f5      	beq.n	8036892 <round+0x5e>
 80368a6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80368aa:	2201      	movs	r2, #1
 80368ac:	408a      	lsls	r2, r1
 80368ae:	1952      	adds	r2, r2, r5
 80368b0:	bf28      	it	cs
 80368b2:	3301      	addcs	r3, #1
 80368b4:	ea22 0204 	bic.w	r2, r2, r4
 80368b8:	e7d2      	b.n	8036860 <round+0x2c>
 80368ba:	bf00      	nop
 80368bc:	000fffff 	.word	0x000fffff

080368c0 <_init>:
 80368c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80368c2:	bf00      	nop
 80368c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80368c6:	bc08      	pop	{r3}
 80368c8:	469e      	mov	lr, r3
 80368ca:	4770      	bx	lr

080368cc <_fini>:
 80368cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80368ce:	bf00      	nop
 80368d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80368d2:	bc08      	pop	{r3}
 80368d4:	469e      	mov	lr, r3
 80368d6:	4770      	bx	lr
